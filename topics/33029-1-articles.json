{"TopicId":33029,"ForumId":44,"TopicTitle":"Towards a better PID controller.","CreatedByName":"nhnifong","CreatedById":12196,"CreatedDateTime":"2013-06-15T00:33:05Z","PageNum":1,"Articles":[{"CreatedByName":"nhnifong","CreatedById":12196,"CreatedDateTime":"2013-06-15T00:33:05Z","Content":"\n\u003Cp\u003EThe ASAS module in KSP is a basic PID controller. (with an excessively high D term \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E ) but obviously a PID controller is not a great solution to the problem of controlling the attitude of the mass and spring model in space. You dont need to hunt around the target and waste fuel to stay pointed in the same direction. When I control it manually, I just use the RCS to thrust in the direction I need for a about a second, wait for it to rotate around, and thrust in the opposite direction for about a second. I can move to any target attitude and hold it manually using about 1/100th the amount of monopropellant that ASAS or mechjeb would use. Why is that? \u003C/p\u003E\u003Cp\u003EWhat method does mechjeb use?\u003C/p\u003E\u003Cp\u003EWhat do real spacecraft use to solve this problem?\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-15T01:47:42Z","Content":"\n\u003Cp\u003EI believe MechJeb is also a PID, but with a bit of compensation for the MoI of the craft in question.\u003C/p\u003E\u003Cp\u003EIn reality, PID is common. You can add a deadband to reduce low-level hunting. A lot of times thrusters need to be on-off, so various kinds of bang-bang or sliding mode control can also work. If you want to get fancy you take constraints into account and do Model Predictive Control.\u003C/p\u003E\n"},{"CreatedByName":"Bunsen","CreatedById":10598,"CreatedDateTime":"2013-06-15T03:59:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EIn reality, PID is common. You can add a deadband to reduce low-level hunting. A lot of times thrusters need to be on-off, so various kinds of bang-bang or sliding mode control can also work. If you want to get fancy you take constraints into account and do Model Predictive Control.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m curious about the practical results of those schemes. As usual, the Wikipedia articles are a near-impenetrable quagmire of abstract math and precise but opaque jargon. I might be able to work through them in a week or so, but I\u0027d rather just bother you instead. How deep into control theory would you have to go to find an algorithm that mimics nhnifong\u0027s approach? It looks to me like that involves some prediction of the system\u0027s behavior -- the first RCS burn places the system on a trajectory through state space that intersects the desired trajectory, then you wait for the intersection and burn again to stay on the desired path. But maybe you can approximate that with something really simple if you parameterize the problem the right way...\u003C/p\u003E\u003Cp\u003EDammit, I think I\u0027ve just been nerd-sniped.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-15T04:58:13Z","Content":"\n\u003Cp\u003EActually a PID with critical damping is near optimal for fuel efficiency. Of course, that\u0027s provided that you also have a way to balance thrusters. I have illustrated elsewhere, probably in a thread that got \u0022eaten\u0022, how to compute optimal I and D terms. I can also go over a balancing scheme.\u003C/p\u003E\u003Cp\u003EI probably should sit down and write an ASAS module for KSP. I\u0027ve done something very similar for missile guidance system for Garry\u0027s Mod. I had intercept missiles lead and hit most targets without any problems using all the same controls available to a rocket in KSP.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-15T09:16:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bunsen\u0022 data-cite=\u0022Bunsen\u0022\u003E\u003Cdiv\u003EI\u0027m curious about the practical results of those schemes. As usual, the Wikipedia articles are a near-impenetrable quagmire of abstract math and precise but opaque jargon. I might be able to work through them in a week or so, but I\u0027d rather just bother you instead. How deep into control theory would you have to go to find an algorithm that mimics nhnifong\u0027s approach? It looks to me like that involves some prediction of the system\u0027s behavior -- the first RCS burn places the system on a trajectory through state space that intersects the desired trajectory, then you wait for the intersection and burn again to stay on the desired path. But maybe you can approximate that with something really simple if you parameterize the problem the right way...\u003Cp\u003EDammit, I think I\u0027ve just been nerd-sniped.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWriting out the continuous-time constrained optimal control problem is pretty intuitive. Actually solving it is another story, you have to apply the Pontryagin maximum principle or the Hamilton-Jacobi-Bellman partial differential equation. It\u0027s messy and involves a lot of variational calculus. Luckily, many reasonably simple problems share a common solution pattern, which switches between minimum control input and maximum control input. For a rigid body tracking a step change in attitude reference, you can solve for how long the start and end burns need to be based on the total time you want the maneuver to take.\u003C/p\u003E\u003Cp\u003EPractically speaking, to deal with more general types of problems we usually discretize the dynamics and use optimization algorithms to solve a finite-dimensional problem. Collocation and shooting methods are both popular here.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EActually a PID with critical damping is near optimal for fuel efficiency. Of course, that\u0027s provided that you also have a way to balance thrusters. I have illustrated elsewhere, probably in a thread that got \u0022eaten\u0022, how to compute optimal I and D terms. I can also go over a balancing scheme.\u003Cp\u003EI probably should sit down and write an ASAS module for KSP. I\u0027ve done something very similar for missile guidance system for Garry\u0027s Mod. I had intercept missiles lead and hit most targets without any problems using all the same controls available to a rocket in KSP.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs long as you don\u0027t hit constraints. And neglect disturbances and model inaccuracies. Luckily rigid-body dynamics is a low-dimensional system, so you don\u0027t need a high-order controller.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-15T09:26:15Z\u0022 title=\u002206/15/2013 09:26  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 15, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2013-06-15T11:04:47Z","Content":"\n\u003Cp\u003EAside from PID parameter issues, craft can generally hold attitude by means of gyro wheels alone, without using any RCS. It would be nice if KSP would just not use RCS (even when it\u0027s on) when only holding attitude. Otoh gyro wheel force should be reduced so that RCS is really needed to turn all but the smallest craft.\u003C/p\u003E\n"},{"CreatedByName":"magnemoe","CreatedById":57801,"CreatedDateTime":"2013-06-15T20:44:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rkman\u0022 data-cite=\u0022rkman\u0022\u003E\u003Cdiv\u003EAside from PID parameter issues, craft can generally hold attitude by means of gyro wheels alone, without using any RCS. It would be nice if KSP would just not use RCS (even when it\u0027s on) when only holding attitude. Otoh gyro wheel force should be reduced so that RCS is really needed to turn all but the smallest craft.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou think heading not attitude? And yes the system should use gyros primary and rcs if it has to. \u003C/p\u003E\u003Cp\u003EWonder how hard it would be to add this to mechjeb, it would have the option to simply turn rcs on and off depending on need.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-16T01:13:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EAs long as you don\u0027t hit constraints. And neglect disturbances and model inaccuracies.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHence the \u0022nearly optimal\u0022. Point is, I don\u0027t think a more advanced controller is needed. The real issue is that KSP\u0027s PID controller has the one size fits all parameters. If parameters are going to be computed for each ship, it should be good enough.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-16T02:41:33Z","Content":"\n\u003Cp\u003EIt depends. We don\u0027t exactly have a rich set of control inputs available in stock. There is some linear programming-based RCS balancing work in MechJeb that is fairly interesting, I guess the plugin API lets you control the thrusters individually.\u003C/p\u003E\u003Cp\u003EFor tracking a transient like a step reference change, a PID doesn\u0027t know how to coast, the input of a PID is only zero along a single plane in the state space. And the cost function here isn\u0027t really L2 in the input like you see for most basic methods of control design, it\u0027s L1. A large input is actually better than a small input applied for a proportionally longer time. Applying anything less than maximum control input wastes time, and applying anything more than minimum control input wastes fuel. To reach the desired goal in a given amount of time, the optimum-fuel solution alternates between max and min input.\u003C/p\u003E\u003Cp\u003EWe\u0027d have to start plugging in some numbers to quantify exactly how suboptimal a well-tuned PID would be. And optimization-based controllers are a bit much effort to worry about for KSP. If you ask me it\u0027s not actually all that much effort, but then again I don\u0027t think the KSP team has a control expert on hand.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-16T17:44:08Z","Content":"\n\u003Cp\u003EI understand the whole L1/L2 difference, but it\u0027s really most relevant for big corrections. For a small enough correction, a controller that optimizes an L2 integral will optimize the L1 integral of the same quantity to within a desired epsilon. That\u0027s why I\u0027m saying the PID is nearly optimal for what it needs to do. Most of the time, it only needs to make small adjustments. If your attitude is 90\u00C3\u201A\u00C2\u00B0 off what you told ASAS to hold, you probably have bigger problems right now.\u003C/p\u003E\u003Cp\u003ESimilarly, control of the rotation of a rigid body is not a linear problem even if you are optimizing an L2 quantity. But again, it is only non-linear for large deviations. For small deviations, it is perfectly linear. So a PID controller should still be very good at optimizing fuel use for small corrections.\u003C/p\u003E\u003Cp\u003EThe other big issue is that right now the PID controller applies the same input on all the thrusters. That means it wastes a lot of fuel on accelerating the CoM, which it isn\u0027t meant to do. There should be a zero net force constraint on the input space. That\u0027s really the first thing I\u0027d solve. It would improve fuel consumption and make docking easier.\u003C/p\u003E\n"},{"CreatedByName":"OdinYggd","CreatedById":26917,"CreatedDateTime":"2013-06-16T19:06:16Z","Content":"\n\u003Cp\u003EMechjeb 2 has a tunable PID using the attitude adjustment feature.\u003C/p\u003E\u003Cp\u003EWhat I\u0027ve found is you need to vary Kp as your ship\u0027s tonnage changes, for instance a Kp of 10 at 30 tons while a Kp of 100 is better at 5 tons. Ki remains 0, setting it to anything else encourages overshooting due to integral windup. \u003C/p\u003E\u003Cp\u003EKd should be about 0.08 that of Kp. \u003C/p\u003E\u003Cp\u003EWhen tuned well you end up with a ship that is wobble-free, but has good steering response. It will use the RCS when it has to without twitching back and forth wasting it while idle. \u003C/p\u003E\u003Cp\u003EI\u0027m currently working on an equation to relate tonnage to Kp which can be used as a guideline, however a compensation for control authority will be required in this equation to get good results.\u003C/p\u003E\n"},{"CreatedByName":"nhnifong","CreatedById":12196,"CreatedDateTime":"2013-06-16T20:48:47Z","Content":"\n\u003Cp\u003EThanks for the balancing advice Odin \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EBut no Ki term? that leaves you with the avionics nosecone basically, and it can drift off target slowly. definitely not good for planes which need to hold a heading for a while with no attention, or a ship that needs to perform a very long burn.\u003C/p\u003E\n"},{"CreatedByName":"OdinYggd","CreatedById":26917,"CreatedDateTime":"2013-06-16T20:58:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nhnifong\u0022 data-cite=\u0022nhnifong\u0022\u003E\u003Cdiv\u003EThanks for the balancing advice Odin \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003EBut no Ki term? that leaves you with the avionics nosecone basically, and it can drift off target slowly. definitely not good for planes which need to hold a heading for a while with no attention, or a ship that needs to perform a very long burn.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo far I have yet to find a good value for Ki that does not result in chronic overshooting and loss of heading. I\u0027ll continue experimenting and let you guys know if I find anything worthwhile. \u003C/p\u003E\u003Cp\u003EThe problem with having a Ki parameter is KSP craft tend to suffer from Integral Windup, leading to further overcorrection and loss of position. If they do need a Ki value, it will have to be very small.\u003C/p\u003E\u003Cp\u003EOnly way that we\u0027ll really be able to reliably do anything about integral windup is to have the PID behavior modified so that the integral factor is only applied when the steering error is very low.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-16T21:02:23Z\u0022 title=\u002206/16/2013 09:02  PM\u0022 data-short=\u002211 yr\u0022\u003EJune 16, 2013\u003C/time\u003E by OdinYggd\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-16T21:45:41Z","Content":"\n\u003Cp\u003EThere is a way to derive all three terms based on ship\u0027s moment of inertia (roughly proportional to ML\u00C3\u201A\u00C2\u00B2 of the ship) and desired response time. I can do a write-up, if you guys are interested.\u003C/p\u003E\n"},{"CreatedByName":"OdinYggd","CreatedById":26917,"CreatedDateTime":"2013-06-16T22:14:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EThere is a way to derive all three terms based on ship\u0027s moment of inertia (roughly proportional to ML\u00C3\u201A\u00C2\u00B2 of the ship) and desired response time. I can do a write-up, if you guys are interested.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat equation would yield Pu, the ultimate gain at which the system becomes self-resonant. \u003C/p\u003E\u003Cp\u003EKp would need to be 1/2 to 1/4 of that, in order to strive for a half-wave dampening. \u003C/p\u003E\u003Cp\u003EOne of the biggest issues with making a KSP ship self-tuning is there is no reliable way to account for control authority in order to mathmatically predict the correct PID values. Although you can ballpark it by mass and moment of inertia, it still would have to have a manual trim parameter to be user configured in flight.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-16T23:01:20Z","Content":"\n\u003Cp\u003EYou can chose Kd to give you critical dampening. That gives you optimal L2 efficiency, which as I\u0027ve explained earlier, is as close as you are going to get to optimal fuel efficiency with PID.\u003C/p\u003E\u003Cp\u003EAnd what do you mean you can\u0027t account for authority? You compute the moment of inertia and you compute the torques from thrusters. Then you can get optimal input vector with an SVD.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-17T01:40:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI understand the whole L1/L2 difference, but it\u0027s really most relevant for big corrections. For a small enough correction, a controller that optimizes an L2 integral will optimize the L1 integral of the same quantity to within a desired epsilon. That\u0027s why I\u0027m saying the PID is nearly optimal for what it needs to do. Most of the time, it only needs to make small adjustments. If your attitude is 90\u00C3\u201A\u00C2\u00B0 off what you told ASAS to hold, you probably have bigger problems right now.\u003Cp\u003ESimilarly, control of the rotation of a rigid body is not a linear problem even if you are optimizing an L2 quantity. But again, it is only non-linear for large deviations. For small deviations, it is perfectly linear. So a PID controller should still be very good at optimizing fuel use for small corrections.\u003C/p\u003E\u003Cp\u003EThe other big issue is that right now the PID controller applies the same input on all the thrusters. That means it wastes a lot of fuel on accelerating the CoM, which it isn\u0027t meant to do. There should be a zero net force constraint on the input space. That\u0027s really the first thing I\u0027d solve. It would improve fuel consumption and make docking easier.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnything is within optimal to epsilon, for sufficiently large epsilon. L1 tends to give much sparser control input, with significant regions of exactly zero control input, whereas L2 gives a dense least-squares solution that is only zero exactly at the origin.\u003C/p\u003E\u003Cp\u003EThe 90 degree transient is common when you\u0027re using MechJeb\u0027s Smart A.S.S, switching from prograde to normal for example.\u003C/p\u003E\u003Cp\u003EI never said rotational dynamics was a linear problem. If you model the nonlinear dynamics, an optimization-based controller will take that into account just fine. I was mostly considering a principal-axis transient, in which case the dynamics are linear if you neglect the change in moment of inertia due to expending monopropellant.\u003C/p\u003E\u003Cp\u003EPerhaps a more ASAS-applicable transient would be toggling ASAS with a substantial nonzero angular velocity. That could be interesting if the initial velocity is not aligned with a principal axis.\u003C/p\u003E\u003Cp\u003EYes, again, constraints are important and not easily handled by a PID controller (besides by saturation, which leads to windup issues). For the purposes of KSP it would be nice to just have that implemented behind the scenes, where RCS thrusters get throttled down based on distance from CoM, to impose zero net force for rotational input and zero net torque for translational input. This should be easy and linear, and MechJeb has some prototype work that does this IIRC.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-17T01:49:58Z\u0022 title=\u002206/17/2013 01:49  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 17, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-17T03:28:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EAnything is within optimal to epsilon, for sufficiently large epsilon.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EArbitrary epsilon. Means you are free to pick epsilon as small as you like, and I can still find a patch of deviations where a PID controller will operate within that epsilon of L1 optimum. The patch might be very small, depending on how strict you are with the epsilon, but in practical sense, so long as you only need to maintain the attitude, PID controller is good enough.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EThe 90 degree transient is common when you\u0027re using MechJeb\u0027s Smart A.S.S, switching from prograde to normal for example.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut that\u0027s a completely different problem. We are talking stock ASAS here. Not an auto-pilot solution. Yes, you occasionally end up with ASAS having to fix a large deviation from course if, for example, you had RCS turned off and then you turned it back on. But this isn\u0027t really what ASAS is meant for. It is meant to maintain attitude, which means that if deviation is great, there is a more serious problem. And for small deviation we are back to not needing anything other than PID.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EI was mostly considering a principal-axis transient, in which case the dynamics are linear if you neglect the change in moment of inertia due to expending monopropellant.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERotational problem over principal axis with constant moment of inertia is still not linear. It\u0027s a problem with periodic condition. It cannot be linear by very definition. To get a linear problem you must assume that deviation never increases past pi. If you want to consider here the most general case, where desired state vector can change suddenly, you cannot guarantee that, and your controller must be capable of looking after the periodic condition.\u003C/p\u003E\u003Cp\u003EOf course, if you agree with me that ASAS is never meant to do any of that, and it\u0027s only meant to look after small deviations, then we are back to a linear problem. Moreover, for small deviations, even if you aren\u0027t aligned with the principal axis and your moment of inertia tensor changes in time, the problem is almost linear. (Infinitesimal rotation operators commute, unlike finite rotations.)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EFor the purposes of KSP it would be nice to just have that implemented behind the scenes, where RCS thrusters get throttled down based on distance from CoM, to impose zero net force for rotational input and zero net torque for translational input.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt seems like that would cost you the maximum torque you could apply. I\u0027d use SVD method to get the input vector of RCS thrust values from desired output vector of net torque/force. Again, this optimizes fuel in L2 sense, but if we are going to use it with a PID controller, that\u0027s precisely what you want.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-17T04:48:45Z","Content":"\n\u003Cp\u003ESince L1 is non-smooth, I\u0027m fairly sure the \u0022patch of deviations\u0022 for small epsilon is not finite, it would only be the origin.\u003C/p\u003E\u003Cp\u003EMost of the time, yes ASAS is designed for holding small deviations in attitude. But that doesn\u0027t mean you would want to ignore transient performance when you initially turn it on, as it tries to halt whatever current rotation exists then return to the setpoint where it was toggled.\u003C/p\u003E\u003Cp\u003EIt read to me as if nhnifong\u0027s initial question was regarding a step change in reference attitude.\u003C/p\u003E\u003Cp\u003ELinear modulo 2 pi. As long as you unwrap the desired setpoint into the closest interval to the current state, you\u0027ll get the right behavior. You obviously want to take care that you don\u0027t oscillate between 0 and 2 pi (or \u002B/- pi) as if there\u0027s a discontinuity there, but that\u0027s an easy preprocessing step that you don\u0027t really have to include as a nonlinearity in the dynamics.\u003C/p\u003E\u003Cp\u003EYou\u0027d only get a different answer if you\u0027re commanding simultaneous rotation and translation. In that case you have coupled linear constraints, still not very hard.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-17T05:48:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003ESince L1 is non-smooth, I\u0027m fairly sure the \u0022patch of deviations\u0022 for small epsilon is not finite, it would only be the origin.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is absolutely clearly wrong. As you said yourself, for a large enough epsilon, almost any controller will work well enough within the entire state space. In other words, for any patch of state space around the target, I can find an epsilon large enough so that PID gives me a solution that is within epsilon of the L1 optimal. If I reduce the patch around the target, I can get away with a smaller epsilon. The epsilon clearly goes to zero as the size of the patch goes to zero. That means that for any given epsilon, I can find a finite patch, including a very small epsilon.\u003C/p\u003E\u003Cp\u003EThe only thing that isn\u0027t smooth about the L1 case is the time profile of the output. In all other respects, it is well behaved, and therefore, linearizable.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EMost of the time, yes ASAS is designed for holding small deviations in attitude. But that doesn\u0027t mean you would want to ignore transient performance when you initially turn it on, as it tries to halt whatever current rotation exists then return to the setpoint where it was toggled.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not suggesting we ignore it. I\u0027m suggesting we consider it and we find it insignificant. Compared to the fuel ASAS is going to burn through for attitude hold, the small overhead for initial correction is pretty much irrelevant. PID isn\u0027t going to perform immeasurably worse than a proper L1 controller. It will perform worse by some factor. (Would you like me to show the math?) In the grand scheme of things, PID will perform almost as well.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EIt read to me as if nhnifong\u0027s initial question was regarding a step change in reference attitude.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExcept that you can\u0027t have a steep change in reference attitude. Once you turn on ASAS, your current attitude becomes your reference. That means that your initial condition already has correct orientation. Just not necessarily the correct derivative.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003ELinear modulo 2 pi.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhich is no longer linear.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EAs long as you unwrap the desired setpoint into the closest interval to the current state, you\u0027ll get the right behavior. You obviously want to take care that you don\u0027t oscillate between 0 and 2 pi (or \u002B/- pi) as if there\u0027s a discontinuity there, but that\u0027s an easy preprocessing step that you don\u0027t really have to include as a nonlinearity in the dynamics.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOf course you do. Say your reference is almost pi from current attitude and you are rotating rapidly away from reference. Should you be trying to slow that rotation down? Of course not. You are much better off continuing with rotation you already have, rotating past pi, and wrapping around to reference. Linear controller cannot handle that sort of thing. That\u0027s why periodic state space automatically means a non-linear controller if you want to handle general case.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-17T06:33:37Z","Content":"\n\u003Cp\u003EThe math would be a good idea. I dispute your contention that epsilon goes to zero continuously, but I\u0027m not sure we\u0027re talking about the same problem formulation. For very small deviations in state, L1 will apply zero input. PID will apply nonzero input. Nonzero input is infinitely worse than zero input, if we only consider the input\u0027s contribution to the cost. We will actually have a combined cost function of both input and state, probably L1 in input and L2 in state. The state deviation therefore has to reach a finite nonzero amount before any control input will be applied at all in the optimal solution. Considering the combined cost function, you\u0027re right that L1 control and PID will both have nonzero cost. But considering only the input, that is no longer true.\u003C/p\u003E\u003Cp\u003EIf you\u0027re moving \u0022away from reference,\u0022 you should have mapped that reference to the equivalent point that you are moving towards as a pre-processing step, then you\u0027d have a linear problem. You can precompute this mapping offline.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-17T06:47:53Z\u0022 title=\u002206/17/2013 06:47  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 17, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-06-17T09:11:25Z","Content":"\n\u003Cp\u003EFirst, lets look at response to initial velocity, which is what ASAS is really meant to deal with. Suppose, we want to hold x = 0, x\u0027 = 0. Instead, when ASAS is tripped, we start out with x(0) = 0, x\u0027(0) = v\u003Csub\u003E0\u003C/sub\u003E. All the L1-optimal controller has to do is kill the velocity. This requires kv\u003Csub\u003E0\u003C/sub\u003E of fuel for some k. Of course, unless the thrust is infinite, this will result in some deviation to be corrected, which will require a bit of extra fuel if you want it in finite time. I\u0027ll look at that in just a moment.\u003C/p\u003E\u003Cp\u003EPID will follow x\u0027\u0027 \u002B 2\u00C3\u017D\u00C2\u00BE\u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003Ex\u0027 \u002B \u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2x = 0. And since solution to L2 problem is critical damping, \u00C3\u017D\u00C2\u00BE = 1. Solution to the above IVP is x(t) = v\u003Csub\u003E0\u003C/sub\u003Et exp(-t\u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003E). If we integrate ||x\u0027\u0027(t)||, we get (2\u002Be\u00C3\u201A\u00C2\u00B2)/e\u00C3\u201A\u00C2\u00B2 v\u003Csub\u003E0\u003C/sub\u003E. (Piecewise integration is left as exercise for the reader.) In other words, total fuel consumption is going to be roughly 1.27 kv\u003Csub\u003E0\u003C/sub\u003E, which is, as promised, only worse by a factor of a constant.\u003C/p\u003E\u003Cp\u003ENow, lets suppose that we simply want to restore from a deviation. Suppose, x\u0027(0) = 0, but x(0) = d. In principle, L1-optimal controller can recover from this using no fuel at all. But that\u0027s not useful, as that takes an infinite amount of time. Instead, lets require characteristic time of \u00C3\u00E2\u20AC\u017E so that x(\u00C3\u00E2\u20AC\u017E) is at most 2d/e. For L1-optimization, this really means that total recovery time is e\u00C3\u00E2\u20AC\u017E/(e-2) and, ignoring limitations of finite acceleration, the total fuel required is 2k(e-2)/(e\u00C3\u00E2\u20AC\u017E), or roughly 0.53kd/\u00C3\u00E2\u20AC\u017E.\u003C/p\u003E\u003Cp\u003EThis time, PID responds with d (1\u002Bt\u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003E) exp(-t\u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003E), where \u00C3\u00E2\u20AC\u00B0\u003Csub\u003E0\u003C/sub\u003E = 1/\u00C3\u00E2\u20AC\u017E. This gives total fuel consumption of 2kd/(e\u00C3\u00E2\u20AC\u017E) or roughly 0.74kd/\u00C3\u00E2\u20AC\u017E. Again, the consumption is higher by a constant factor. And since in both cases fuel requirement goes to zero as deviation goes to zero, for any finite epsilon there is a value for d which makes the difference between the two less than epsilon.\u003C/p\u003E\u003Cp\u003ESo all in all, PID will consume 39% more fuel for a given deviation in attitude and 27% more fuel for a given deviation in angular velocity. This is not all together insignificant, but either one is far, far better than what ASAS is doing right now. And while, yes, a well-programmed L1-optimal controller can work better than PID, I\u0027m not sure it\u0027s worth the trouble, when simply tuning PID will improve things a whole lot.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-17T13:53:48Z","Content":"\n\u003Cp\u003EWhoops, I was thinking comparing performance by ratio rather than comparing by difference. A small deadband\u0027s probably quite acceptable in most scenarios, so you can\u0027t beat zero. Your examples are good, and I would consider 27-39% fuel savings absolutely worth a more sophisticated controller. Maybe not for KSP, but in the real world where performance is critical (and reference tracking is the simplest of the many situations a controller will need to handle) and assuming you have the engineering resources to implement an optimization-based controller, it\u0027s the right way to go.\u003C/p\u003E\u003Cp\u003EFor the principal-axis dynamics, the linear-problem approximation only breaks down in corner cases like having very high initial velocity and not enough control authority to stop the first time around. But this nonlinearity isn\u0027t in the dynamics, you still have I*theta\u0027\u0027(t) = B*u(t). It\u0027s in the cost function for reference tracking. The differential equation doesn\u0027t care that 0 and 2 pi are the same, the dynamics are still linear.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-17T13:55:53Z\u0022 title=\u002206/17/2013 01:55  PM\u0022 data-short=\u002211 yr\u0022\u003EJune 17, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Bunsen","CreatedById":10598,"CreatedDateTime":"2013-06-17T15:48:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ESo all in all, PID will consume 39% more fuel for a given deviation in attitude and 27% more fuel for a given deviation in angular velocity. This is not all together insignificant, but either one is far, far better than what ASAS is doing right now.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOkay, now that we\u0027ve scienced the living hell out of the idealized version of the problem (I love this thread, BTW -- ain\u0027t many games out there that inspire forum posts with differential equations), let\u0027s confront the reasons that the current ASAS behavior sucks so profoundly:\u003C/p\u003E\u003Cp\u003E1. The PID gains are not optimized for each craft. This should be solvable with some computation of the moments of inertia and available control torques. Thrust vectoring is a complication, because it makes the control torque change with throttle setting. That still might be within reach of a well-programmed plugin.\u003C/p\u003E\u003Cp\u003E2. The system is not a rigid body. Rockets bend. Rapid changes in control inputs excite vibrational modes of the craft, which cause the ASAS pod\u0027s measured state (IIRC, this is measured at the command pod) to deviate from the actual dynamics. That deviation tends to include phase lag, and when that gets between 1/4 and 3/4 of a cycle, control inputs intended to counteract motion amplify it instead, and things undergo rapid, unplanned deintegration. Or at least you waste craptons of RCS propellant.\u003C/p\u003E\u003Cp\u003EThe second one is, I think, the big reason we hate ASAS. A half-cycle lag for the fundamental bending mode is basically guaranteed when you have a command pod at the top of a long rocket and a vectoring engine at the bottom, or RCS clusters in their most efficient positions at the ends of the rocket. I see two obvious solutions, both of which kinda suck: Either smooth out the changes in control inputs enough that they don\u0027t significantly excite any vibrational modes (there goes any thought of bang-bang efficiency, and now your control is smeared out over a timescale longer than the rocket\u0027s fundamental vibrational period), or smooth out your state measurements enough to filter the vibrations out of the measurement (and again, you get sluggish response). The practical solution is to build stiffer rockets and make that fundamental frequency high enough not to cause problems, but that\u0027s only feasible for fairly small rockets, and small rockets bring shame to Jeb and the entire space program.\u003C/p\u003E\u003Cp\u003EThat seems like a pretty universal problem for control theory, though, so people have probably already thought up some incredibly clever ways to confront it. I hope.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-06-17T16:17:13Z","Content":"\n\u003Cp\u003EI\u0027d write a Kalman filter or moving horizon estimator to try to filter out the vibrational measurements. Then you could approximately separate the CoM dynamics from the vibrational disturbance, and apply control primarily based on the former. If necessary you could possibly also try to actively fight the vibration. But observing it can already be tricky if you don\u0027t have a good a-priori model of what you expect the vibrational modes to be, actively damping it would be as hard or harder.\u003C/p\u003E\n"}]}