{"TopicId":110069,"ForumId":29,"TopicTitle":"New to making plugins; looking for advice","CreatedByName":"The Great Potato","CreatedById":134427,"CreatedDateTime":"2015-05-20T05:27:15Z","PageNum":1,"Articles":[{"CreatedByName":"The Great Potato","CreatedById":134427,"CreatedDateTime":"2015-05-20T05:27:15Z","Content":"Hi all!\n\nI\u0027m starting up on my first plugin and I\u0027m trying to get a feel for the API and its documentation. My goal for this plugin is to create a set of part modules that support unguided rockets, i.e. rockets that have no pods or probe cores.\n\nSpecifically, I\u0027m looking to make:\n\n- A module (or perhaps an overall game condition) that always allows vessel control during prelaunch, even when there is no active command module.\n\n- A Flight Recorder part that stores flight data. Kind of like an experiment, except recording is automatic and the science is returned at the end of the flight, even after crashes. On Kerbin, at least.\n\n- A Gyroscope part that provides a weak reaction wheel and automatically provides ASAS in a preset vector.\n\nStarted working on the first one for now, because it looks like it has the least moving parts to figure out. Looking through the API documentation, I saw the CommandPod class and thought that might be a good way to implement the launch pad controller. Override onCtrlUpd to pass the event to the parent only if the vessel is in the prelaunch state, right? I dug around the docs and the stock cfg\u0027s to see if it would work that way, and I ended up getting really, really, confused. The cfg\u0027s contain no mention of a CommandPod part, only the ModuleCommand part module. \n\nAnd so, my first question(s):\n\nMessing around with the cfg\u0027s before, I always assumed that the PartModules are primarily what differentiated parts from each other; I didn\u0027t expect to see separate Part classes. It looks like these Parts are what do most of the heavy lifting for specialized pieces, but how does the game know from the cfg\u0027s which parts are CommandPods -- is it set in the ModuleCommand class? Is it possible/safe to create a new Part subclass?"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-05-20T08:38:27Z","Content":"CommandPod is the old (pre 18 or 19 ?) class. At that time part where not using module but each had a specific class. Ant class that inherits from Part should be considered as deprecated.\n\nFor your need you should do either : \n\n - a class that inherits ModuleCommand and do the control update / lock as you wanted with CommandPod \n\n - a dedicated PartModules that would disable a part ModuleCommand when some condition are met. This one is less likely to generate problem with other mods. You could look into Remotech2 code for some hints on how to do it."},{"CreatedByName":"MrHappyFace","CreatedById":76365,"CreatedDateTime":"2015-05-20T17:22:39Z","Content":"The Part classes are deprecated, and haven\u0027t been used since 0.15. Now, all parts use PartModules, and the solution for making a command module us quite simple:\n\nhave a module, that sets vessel.isControllable to true as long as vessel.state == State.PreLaunch, or something like that.\n\nYou shouldn\u0027t be making any Part subclasses, as almost everything they can do, can be done with modules much more cleanly.\n\nAs for the gyro, try messing with the vessel.vesselSAS and vessel.Autopilot members."}]}