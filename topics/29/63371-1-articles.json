{"TopicId":63371,"ForumId":29,"TopicTitle":"Daily GameTime Callbacks \u0026amp; C# Reflective Invocation Questions","CreatedByName":"notfirestorm","CreatedById":66483,"CreatedDateTime":"2014-02-16T14:04:13Z","PageNum":1,"Articles":[{"CreatedByName":"notfirestorm","CreatedById":66483,"CreatedDateTime":"2014-02-16T14:04:13Z","Content":"\n\u003Cp\u003ESo I\u0027m in the process of making a Subterranean Base mod, and I\u0027m either not happy with the solutions I have, or am completely clueless on problems I\u0027m facing.\u003C/p\u003E\u003Cp\u003EFirst question: Is there a callback/event/etc. that happens whenever a Day ticks in game? I can always implement a polling mechanic on the Universal time to do it myself, but every time I\u0027ve tried stuff like that, I always introduce time drift bugs, and those will be exasperated by KSP\u0027s Time Warp. Is there a function or class that I just overlooked?\u003C/p\u003E\u003Cp\u003ENext question: Reflection. For those of you who don\u0027t know, reflection is (in CompSci) something that allows you to discover and instantiate objects at Runtime, useful when you don\u0027t know the object at compile time. C# supports this, so you could do something like: findAllObjectsImplementingInterface(\u0022MyInterfaceName\u0022).each { object -\u0026gt; AssemblyInfo.invokeByName(object) } (obviously not C# syntax). I\u0027m looking into this because I can see alot of potential for other mods wanting to create their own Subterranean Base Modules, and since the Subterranean Base exists entirely in code, if I can provide them with an interface they can implement to make their own Base Module, and I can dynamically discover and create the ones others have made in my mod, everyone wins. If a player who has the other mod and not mine plays, the base module will just be dead code, but if they play with both our mods, the module shows up and functions.\u003C/p\u003E\u003Cp\u003EMy Question is this: Since I am a complete noob to the C# build process...will this work? Will it actually make it easier to interface with other mod makers here, or just make both our lives harder? How will I have to package the mod and interfaces for use by others? Is there an easier solution to this problem I\u0027m completely overlooking?\u003C/p\u003E\u003Cp\u003EThanks to any who has input.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-02-16T16:17:10Z","Content":"\n\u003Cp\u003E1) I am not aware of any call back on \u0027Day\u0027 in KSP.\u003C/p\u003E\u003Cp\u003EFor game time/date, I use Planatarium.GetUniversalTime(), which returns a Double. (Did not check that method name, but it\u0027s close.) You then have to do your own math on it. I\u0027m using it for a simple 15 second delay so I have not considered the code needed to do what you are looking for.\u003C/p\u003E\u003Cp\u003E2) Yes, reflection works. I\u0027m 99% sure Blizzy\u0027s toolbar has example code you could look at. Then just make sure the methods you need for other mods to access to be declared Public so they can be called. (I\u0027m personally not 100% clear on the details, not something I\u0027ve had to deal with yet for my mods.)\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-02-16T16:28:34Z","Content":"\n\u003Cp\u003E1. I\u0027m not aware of any, but implementing sth like this with Planetarium.GetUniversalTime() shouldn\u0027t be that hard.\u003C/p\u003E\u003Cp\u003E2. Jop, that should work. Here is some code i used to find the game\u0027s file loading classes and stores them in dictionary by file extension:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E            return AppDomain\u003Cbr\u003E                .CurrentDomain\u003Cbr\u003E                .GetAssemblies()\u003Cbr\u003E                .SelectMany(assembly =\u0026gt; assembly\u003Cbr\u003E                    .GetTypes()\u003Cbr\u003E                    .Where(t =\u0026gt; t.IsSubclassOf(typeof(DatabaseLoader\u0026lt;T\u0026gt;)) \u0026amp;\u0026amp; t.GetCustomAttributes(typeof(DatabaseLoaderAttrib), true).Any()))\u003Cbr\u003E                .SelectMany(t =\u0026gt;\u003Cbr\u003E                {\u003Cbr\u003E                    var loader = (DatabaseLoader\u0026lt;T\u0026gt;)Activator.CreateInstance(t);\u003Cbr\u003E                    return loader.extensions.Select(ext =\u0026gt; ext.ToUpper()).Distinct().Select(ext =\u0026gt; new { ext = ext, loader = loader });\u003Cbr\u003E                }).ToDictionary(el =\u0026gt; el.ext, el =\u0026gt; el.loader);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe code basically loops though all loaded classes, does some checking and uses Activator.CreateInstance to create the actual instances. It worked fine for KSP\u0027s stuff and should have for any other assemblies as well, though i never tried that. IsSubclassOf seems to not work on interfaces, so you might want to check out other stuff like IsAssignableFrom or GetInterface.\u003C/p\u003E\n"},{"CreatedByName":"notfirestorm","CreatedById":66483,"CreatedDateTime":"2014-02-16T17:59:51Z","Content":"\n\u003Cp\u003EThanks for both the confirmation on the time thing and the examples on how to do the reflection thing; its always nice to see multiple ways of doing stuff so you can pick the best. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThat just leaves the building/packaging question: in order to minimize the coupling between mods, how would I go about packaging up the interfaces/abstract classes needed? Extract them and put them in their own .dll that both mods reference? Or should I not bother with that if C# is smart enough to figure it out on its own?\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-02-16T18:15:11Z","Content":"\n\u003Cp\u003EYes, thats a difficult question, especially when considering version compatibility.\u003C/p\u003E\u003Cp\u003EAnother mod that implements your interface would have to create a separate DLL for the your-mod-specific stuff anyway (unless it fully depends on your mod). This separate DLL will fail to load without its dependencies, what is kinda fine for KSP installs that doesn\u0027t have your mod installed.\u003C/p\u003E\u003Cp\u003EA problem might be the order in what mods are loaded. The depended assembly has to either be already loaded or has to be in the same directory as the current dll (\u002B some other specific paths not in GameData).\u003C/p\u003E\u003Cp\u003EA working solution could be for your mod to place a dll with those public interfaces directly within GameData (should be loaded first) \u0026amp; never change its version number.\u003C/p\u003E\n"},{"CreatedByName":"MOARdV","CreatedById":60950,"CreatedDateTime":"2014-02-16T19:29:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003EA problem might be the order in what mods are loaded. The depended assembly has to either be already loaded or has to be in the same directory as the current dll (\u002B some other specific paths not in GameData).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo get around this problem in RasterPropMonitor, Mihara created DLLs that were intended to load after the linked DLL. To enforce ordering, they are in separate directories that have the original mod\u0027s directory name \u002B \u0022RPM\u0022 tacked on to the end (eg, the SCANsat RPM DLL lives in SCANsatRPM, so it loads after SCANsat does, and after RasterPropMonitor (which is in the directory JSI). It\u0027s not the prettiest looking approach, but it guarantees the interface DLL loads after the DLLs it\u0027s interfacing with.\u003C/p\u003E\n"}]}