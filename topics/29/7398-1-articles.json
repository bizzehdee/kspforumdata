{"TopicId":7398,"ForumId":29,"TopicTitle":"Part Classes and a Robust API","CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-02T18:24:26Z","PageNum":1,"Articles":[{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-02T18:24:26Z","Content":"\n\u003Cp\u003EI toyed around with the part class loader last night. (My proud creation: a solid booster that explodes when you pause/resume the game.) There\\\u0027s obviously a lot of potential here, since we\\\u0027re essentially working with the same tools as the developers. There\\\u0027s just something bugging me about the API we\\\u0027re given: it\\\u0027s \u003Cem\u003Emessy\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003EI want to discuss how we (the KSP community) might develop an API for part modding that meets several goals:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cbr\u003E[li]Takes full advantage of language features (like events) and complies with common C# coding conventions (like PascalCase member names)[/li]\u003Cbr\u003E[li]Provides a clean interface with everything we need and nothing we don\\\u0027t[/li]\u003Cbr\u003E[li]Is useful in intermediate stages of development, not just when finished[/li]\u003Cbr\u003E[li]Requires minimal modification to KSP itself[/li]\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis is no small task, so I thought some brainstorming and theory-crafting might be in order before jumping on in.\u003C/p\u003E\n"},{"CreatedByName":"r4m0n","CreatedById":5404,"CreatedDateTime":"2012-03-03T19:57:26Z","Content":"\n\u003Cp\u003EWe would basically have to encapsulate the whole game, or big portions of it. Too add to the problem, the game is constantly changing, and I\\\u0027ve already had to make changes to my modules twice since x1 came out.\u003C/p\u003E\u003Cp\u003EThe idea is interesting, and a class that brings useful functions together would be useful, but maintaining it with the game basically in a alpha state would be pretty hard.\u003C/p\u003E\u003Cp\u003EStill, if someone has any idea that could make this work, I think it may be worth the trouble.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-03T21:18:07Z","Content":"\n\u003Cp\u003EThat\\\u0027s an accurate criticism, but there\\\u0027s a flipside:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022r4m0n\u0022 data-cite=\u0022r4m0n\u0022\u003E\u003Cdiv\u003EI\\\u0027ve already had to make changes to my modules twice since x1 came out.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhile difficult to maintain, a well-structured API can provide stability for plugin writers.\u003C/p\u003E\n"},{"CreatedByName":"aphazael","CreatedById":11981,"CreatedDateTime":"2012-03-06T03:13:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Majiir\u0022 data-cite=\u0022Majiir\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E There\\\u0027s just something bugging me about the API we\\\u0027re given\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat API? I\\\u0027ve been looking for any kind of information about, for example, what are the methods and variables of the part class, and I\\\u0027m not finding anything that looks anything like an API? Does something like that exist and I haven\\\u0027t found it?\u003C/p\u003E\n"},{"CreatedByName":"skyline131313","CreatedById":4776,"CreatedDateTime":"2012-03-06T03:17:39Z","Content":"\n\u003Cp\u003EAll information regarding classes and their functions are stored within the .dll, in this case \u0027Assembly-CSharp.dll\u0027 dounf in KSP_Data. All you need to do is add a reference to this dll in visual studio or w/e ide you are using.\u003C/p\u003E\u003Cp\u003EgetOrbitalVelocityAt() returns double, \u0027velocity\u0027 implies direction (in this case should be a 3d vector)\u003C/p\u003E\u003Cp\u003EThe little things you know?\u003C/p\u003E\n"},{"CreatedByName":"aphazael","CreatedById":11981,"CreatedDateTime":"2012-03-06T03:27:02Z","Content":"\n\u003Cp\u003EOh, I see. I\\\u0027ve never worked with dll\\\u0027s nor c\u002B\u002B before, and I\\\u0027m used to doing all my coding in a text editor. So I\\\u0027m going to have to break down and use an IDE, huh? \u003C/p\u003E\u003Cp\u003EThanks for the info. \u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-06T17:39:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aphazael\u0022 data-cite=\u0022aphazael\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EOh, I see. I\\\u0027ve never worked with dll\\\u0027s nor c\u002B\u002B before, and I\\\u0027m used to doing all my coding in a text editor. So I\\\u0027m going to have to break down and use an IDE, huh? \u003C/p\u003E\u003Cp\u003EThanks for the info.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou don\\\u0027t have to, but it\\\u0027ll be about a thousand times easier since there\\\u0027s no online documentation.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-07T20:30:04Z","Content":"\n\u003Cp\u003EI\\\u0027ve started on a primitive API as a proof of concept. Here\\\u0027s the source for the test plugin I made:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing KerbalAPI;\u003Cbr\u003E\u003Cbr\u003E// This is the class in the part.cfg file\u003Cbr\u003Epublic class SabotageProxy : Sabotage.Proxy { }\u003Cbr\u003E\u003Cbr\u003E// This is where we put our code\u003Cbr\u003Epublic class Sabotage : Part\u0026lt;Sabotage\u0026gt;\u003Cbr\u003E{\u003Cbr\u003E  public Sabotage()\u003Cbr\u003E  {\u003Cbr\u003E    ActiveUpdate \u002B= MyUpdateHandler;\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  private void MyUpdateHandler(object sender, EventArgs e)\u003Cbr\u003E  {\u003Cbr\u003E    Explode();\u003Cbr\u003E  }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOn the surface, this might not look any better (it might even look worse) than the equivalent plugin using the standard API. There are a few important differences, though, and this method has a great deal of potential. Note that the Sabotage class does \u003Cstrong\u003Enot\u003C/strong\u003E extend the KSP Part class. The generic Part\u0026lt;\u0026gt; class it extends is part of KerbalAPI and defines a clean interface without any Unity methods. ActiveUpdate is a C# event, and you can see it handled by MyUpdateHandler(). Explode() works just as KSP Part.explode() does, but other methods (like requesting fuel) might be improved by an API implementation.\u003C/p\u003E\u003Cp\u003EThis is achieved so far without reflection. I\\\u0027d like to avoid using reflection wherever possible, though in some cases it might be appropriate. (For example, to expose public properties to the part.cfg file.)\u003C/p\u003E\u003Cp\u003EWhen I get home I\\\u0027ll put the source on Github and post a link here.\u003C/p\u003E\u003Cp\u003E[EDIT] Source is here: \u003Ca href=\u0022https://github.com/KerbalAPI/KerbalAPI\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KerbalAPI/KerbalAPI\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E[EDIT] I should note that this is an equally valid way to handle the event:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprotected override void OnActiveUpdate()\u003Cbr\u003E{\u003Cbr\u003E  base.OnActiveUpdate();\u003Cbr\u003E  Explode();\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe difference is basically just capitalization for now, but the takeaway is that more complex functionality can be handled by the API while exposing a useful interface for plugin developers.\u003C/p\u003E\u003Cp\u003E[EDIT] This also lets us use namespaces! ;D\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-08T17:22:39Z","Content":"\n\u003Cp\u003EI spent some time last night thinking about an interesting design problem.\u003C/p\u003E\u003Cp\u003EIdeally, a more complete API will proxy/wrap a whole collection of KSP classes. The most important is probably the Part class. My wrapper class exposes C# events, which is certainly handy for developing a single part type. Where it really shines is when you subscribe to events from \u003Cem\u003Eother\u003C/em\u003E parts, ones that you aren\\\u0027t necessarily writing a plugin for. (Suppose you want to activate a decoupler when a stage runs out of fuel; you can subscribe to the child part\\\u0027s events and listen for that state without actually modifying any fuel tanks.) So, being able to wrap any arbitrary Part is important.\u003C/p\u003E\u003Cp\u003EHere\\\u0027s the problem: KSP doesn\\\u0027t expose events. In order to make this work, parts of the underlying Part class (specifically, the event methods) need to be modified in a similar way as my Proxy class. We can\\\u0027t decompile and redistribute the KSP binaries, so that leaves us with the Dark Art of programming: reflection.\u003C/p\u003E\u003Cp\u003EI\\\u0027m admittedly a reflection newbie, but I think it may be possible to build a loader which patches the KSP classes in memory before running the game. It\\\u0027s a bit more than I wanted to do, but I think the payoff may be worth it. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Link Hogthrob","CreatedById":3697,"CreatedDateTime":"2012-03-12T20:50:24Z","Content":"\n\u003Cp\u003EMajiir,\u003C/p\u003E\u003Cp\u003ESomething like this might work. (I have not tested any of this, but its a standard Observer pattern scenario)\u003C/p\u003E\u003Cp\u003EUPDATE: Upon review this isn\\\u0027t quite right. I need time to think about it outside of work hours. Its close. Sorta.\u003C/p\u003E\u003Cp\u003Epublic interface IKSPPartCallback\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E void PartActivated(Part partThatWasActivated);\u003C/p\u003E\u003Cp\u003E void PartDestroyed(Part partThatWasDestroyed);\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Epublic class KSPPart : Part\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E static List\u0026lt;IKSPPartCallback\u0026gt; _callbacklist = new List\u0026lt;IKSPPartCallback\u0026gt;();\u003C/p\u003E\u003Cp\u003E protected void Subscribe(IKSPPartCallback subscriber) { // add to list };\u003C/p\u003E\u003Cp\u003E protected void Unsubscribe(IKSPPartCallback subscriber) { // remove from list };\u003C/p\u003E\u003Cp\u003E protected override onPartActivate()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E foreach (IKSPPartCallback part in _callbacklist)\u003C/p\u003E\u003Cp\u003E part.PartActivated();\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E protected override onPartDestroyed()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E foreach (IKSPPartCallback part in _callbacklist)\u003C/p\u003E\u003Cp\u003E part.PartDestroyed();\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Epublic class MyPart : KSPPart, IKSPPartCallback\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public void PartActivated(Part partThatWasActivated)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E // check if its the part you are watching\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E public void PartDestroyed(Part partThatWasDestroyed)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E // check if its the part you are watching\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2012-03-12T21:09:50Z","Content":"\n\u003Cp\u003EThe problem with that example is that MyPart extends KSPPart, which in turn extends the global Part class provided by KSP. I think piling additional methods on top of that class would create unnecessary confusion.\u003C/p\u003E\u003Cp\u003EI\\\u0027ve been a bit slow to make progress here since I\\\u0027ve been toying around with reflection, but I have a revised plan for wrapping KSP classes. Each part has up to one wrapper object, which in turn wraps exactly one KSP part object. The wrapping mechanism is completely hidden from the (code) user. When an API Part object is created, the corresponding KSP (and Unity) object is created as well. When any API function returns a Part, it returns a wrapper, creating and binding it if it doesn\\\u0027t already exist.\u003C/p\u003E\u003Cp\u003EIf I can get over the reflection hurdle, I think the advantages will be obvious. I might be very busy before April 1, though, so we\\\u0027ll see how much time I can put into it...\u003C/p\u003E\n"}]}