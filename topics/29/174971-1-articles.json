{"TopicId":174971,"ForumId":29,"TopicTitle":"Autostruts and moving parts","CreatedByName":"peteletroll","CreatedById":144573,"CreatedDateTime":"2018-05-15T10:00:27Z","PageNum":1,"Articles":[{"CreatedByName":"peteletroll","CreatedById":144573,"CreatedDateTime":"2018-05-15T10:00:27Z","Content":"\n\u003Cp\u003E\nHere\u0027s what I learned on the way while developing \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/170484-141-dockrotate-rotation-control-on-docking-ports-plus-noderotate-make-any-part-rotate/\u0022 rel=\u0022\u0022\u003EDockRotate\u003C/a\u003E. It took me a while to figure it out, so I\u0027m collecting it all in one place, hoping it will be useful to other modders.\n\u003C/p\u003E\n\u003Cp\u003E\nAutostruts prevent part relative motion. This can be annoying if you WANT parts to move.\n\u003C/p\u003E\n\u003Cp\u003E\nAutostruts can be placed by the user. We could say that if a user places autostruts that cross moving joints it\u0027s their fault, and they should be more careful in the future.\u00A0\u003Cimg alt=\u0022:sticktongue:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue2.gif\u0022 title=\u0022:sticktongue:\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nLanding legs are always autostrutted to heaviest part. The user has no way to disable it. So, if there\u0027s a moving joint between a landing leg and the heaviest part of a craft, the joint won\u0027t be able to move. The user should design the ship in a way that prevents such autostrut. This can be practically impossible.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003EThe quick-and-dirty solution: remove all autostruts\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe Part class has a ReleaseAutoStruts() method. If you call it on every part of a vessel, all autostruts will be gone, and every moving part will behave as expected. When the movement is done, a call to Vessel.CycleAllAutostrut() will restore them all.\n\u003C/p\u003E\n\u003Cp\u003E\nSee releaseAllAutoStruts() and secureAllAutoStruts() \u003Ca href=\u0022https://github.com/peteletroll/DockRotate/blob/c22fbee089b05a0b3da75951d71257627a091ffb/DockRotate/DockRotate.cs#L1502\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E for an example.\n\u003C/p\u003E\n\u003Cp\u003E\nThis works pretty well. But the autostrut free craft can break easier.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EThe official solution:\u00A0IJointLockState\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThere actually is a moving part in stock KSP: the \u003Ca href=\u0022https://wiki.kerbalspaceprogram.com/wiki/Advanced_Grabbing_Unit\u0022 rel=\u0022external nofollow\u0022\u003EAdvanced Grabbing Unit\u003C/a\u003E (AKA the Klaw) pivot joint can be unlocked to fix center of mass alignment.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/66485-squad/\u0026amp;do=hovercard\u0022 data-mentionid=\u002266485\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/66485-squad/\u0022 rel=\u0022\u0022\u003E@SQUAD\u003C/a\u003E\u00A0added a way to prevent autostruts from locking the joint. If a PartModule implements the \u003Ca href=\u0022https://kerbalspaceprogram.com/api/interface_i_joint_lock_state.html\u0022 rel=\u0022\u0022\u003EIJointLockState\u003C/a\u003E interface, it will have a IsJointUnlocked() method. This must return true if the part has a moving joint: Vessel.CycleAllAutostrut() method will call it to know where NOT to put autostruts. (Many thanks to \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257146\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0022 rel=\u0022\u0022\u003E@sarbian\u003C/a\u003E\u00A0and \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/176740-rudolf-meier/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022176740\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/176740-rudolf-meier/\u0022 rel=\u0022\u0022\u003E@Rudolf Meier\u003C/a\u003E for giving me pointers at this).\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want a part to move, you have to add a PartModule that implements IJointLockState. When it starts moving, you have to make IsJointUnlocked()\u00A0return true and call Vessel.CycleAllAutoStrut(). When the movement is finished, make\u00A0IsJointUnlocked() return false and call\u00A0Vessel.CycleAllAutoStrut() again.\n\u003C/p\u003E\n\u003Cp\u003E\nUnfortunately,\u00A0Vessel.CycleAllAutostrut() \u003Cstrong\u003Eappears to have a bug\u003C/strong\u003E: in a few cases\u00A0IsJointUnlocked() is not called, and autostruts can lock moving joints anyway. I filed a bug report \u003Ca href=\u0022https://bugs.kerbalspaceprogram.com/issues/18849\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E: please upvote it if you like writing (and using) mods with moving parts! (and please \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/66485-squad/\u0026amp;do=hovercard\u0022 data-mentionid=\u002266485\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/66485-squad/\u0022 rel=\u0022\u0022\u003E@SQUAD\u003C/a\u003E\u00A0fix it! We\u0027ll love you even more!\u00A0\u003Cimg alt=\u0022:kiss:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_kiss.gif\u0022 title=\u0022:kiss:\u0022\u003E)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EThe workaround: Smart Autostruts\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027s a way I found to make things work anyway: \u003Ca href=\u0022https://github.com/peteletroll/DockRotate/blob/c22fbee089b05a0b3da75951d71257627a091ffb/DockRotate/DockRotate.cs#L1550\u0022 rel=\u0022external nofollow\u0022\u003Ethis\u003C/a\u003E!\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s a hack, really. It iterates on all PartJoint objects in the physics bubble, and destroys joints across moving parts. It\u0027s not very efficient, but it works. It has a problem currently: it disables crossing \u003Ca href=\u0022https://wiki.kerbalspaceprogram.com/wiki/EAS-4_Strut_Connector\u0022 rel=\u0022external nofollow\u0022\u003Eregular struts\u003C/a\u003E too. But the user has full control over them, so it\u0027s not a big problem.\n\u003C/p\u003E\n\u003Cp\u003E\nThat\u0027s the solution that \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/170484-141-dockrotate-rotation-control-on-docking-ports-plus-noderotate-make-any-part-rotate/\u0022 rel=\u0022\u0022\u003EDockRotate\u003C/a\u003E implements by default, until\u00A0the IJointLockState bug is fixed.\n\u003C/p\u003E\n\u003Cp\u003E\nPlease feel free to use my Smart Autostruts hack for your moving parts mods. If needed, I can refactor it in a separate file, to make using it easier.\n\u003C/p\u003E\n\u003Cp\u003E\nHappy hacking!\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-05-15T14:02:42Z\u0022 title=\u002205/15/2018 02:02  PM\u0022 data-short=\u00226 yr\u0022\u003EMay 15, 2018\u003C/time\u003E by peteletroll\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Trufiadok","CreatedById":185591,"CreatedDateTime":"2018-07-02T17:26:27Z","Content":"\n\u003Cp\u003E\nHi \u003Cstrong\u003E@\u003Ca data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/144573-peteletroll/\u0026amp;do=hovercard\u0026amp;referrer=https%253A%252F%252Fforum.kerbalspaceprogram.com%252Findex.php%253F%252Ftopic%252F174971-autostruts-and-moving-parts%252F\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/144573-peteletroll/\u0022 style=\u0022background-color:transparent;color:inherit;\u0022 title=\u0022Go to peteletroll\u0027s profile\u0022 rel=\u0022\u0022\u003Epeteletroll\u003C/a\u003E\u003C/strong\u003E,\n\u003C/p\u003E\n\u003Cp\u003E\ni need your help, please. I try to do a module that aligns the port if it does not fit exactly.\u00A0I rotate the part, but it does not turn, just jump one.\n\u003C/p\u003E\n\u003Cp\u003E\nThis may be the solution you have written, but it does not work for me.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E                        float axisAngle;\n                        Vector3 eulerAngle = new Vector3();\n\n                        axisAngle = baseDockingPort.eulerAngles.x - partDockingPort.eulerAngles.x;\n                        eulerAngle.x = part.transform.eulerAngles.x \u002B eulerAxisDifferent(axisAngle);\n\n                        axisAngle = baseDockingPort.eulerAngles.y - partDockingPort.eulerAngles.y;\n                        eulerAngle.y = part.transform.eulerAngles.y \u002B eulerAxisDifferent(axisAngle);\n\n                        axisAngle = baseDockingPort.eulerAngles.z - partDockingPort.eulerAngles.z;\n                        eulerAngle.z = part.transform.eulerAngles.z \u002B eulerAxisDifferent(axisAngle);\n\n                        releaseAllAutoStruts(part.vessel);\n\n                        part.transform.eulerAngles = eulerAngle;\n\n                        part.vessel.CycleAllAutoStrut();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nWhat could be the problem?\n\u003C/p\u003E\n\u003Cp\u003E\nI try connect HPGT to the QUEST.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022jb6qIb9.png\u0022 class=\u0022ipsImage\u0022 height=\u0022768\u0022 src=\u0022https://i.imgur.com/jb6qIb9.png\u0022 width=\u00221001\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"peteletroll","CreatedById":144573,"CreatedDateTime":"2018-07-02T21:10:23Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/185591-trufiadok/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022185591\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/185591-trufiadok/\u0022 rel=\u0022\u0022\u003E@Trufiadok\u003C/a\u003E, you\u0027re changing directly a part transform, its position, so the part jumps. You have to move it slowly step by step. It should happen if you disable autostruts too.\n\u003C/p\u003E\n\u003Cp\u003E\nI think it\u0027s better to move parts by acting on the joints that connect them. Be patient, Unity Configurable joints are a complex beast.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-02T21:28:00Z\u0022 title=\u002207/02/2018 09:28  PM\u0022 data-short=\u00226 yr\u0022\u003EJuly 2, 2018\u003C/time\u003E by peteletroll\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Trufiadok","CreatedById":185591,"CreatedDateTime":"2018-07-03T05:07:38Z","Content":"\n\u003Cp\u003E\nThanks for the information. I will experiment in this direction.\n\u003C/p\u003E\n"},{"CreatedByName":"Katten","CreatedById":180392,"CreatedDateTime":"2018-07-09T05:58:29Z","Content":"\n\u003Cp\u003E\nNice!\u003Cbr\u003E\u003Cbr\u003E\nHere\u0027s another work-around - disables all auto-struts on the ship while something is moving, then sets them back to their default value.\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\n/*\u00A0\u003Cbr\u003E\n\u00A0* Stock auto-strut from wheels cause issues by not implementing the IJointLockState properly.\u003Cbr\u003E\n\u00A0* Work-around this by temporarily disabling all auto-struts when something is moving (here\u00A0\u003Cbr\u003E\n\u00A0* defined as any animation is running).\u003Cbr\u003E\n\u00A0*/\u003Cbr\u003E\n[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003E\npublic class AutoStrutUpdater: MonoBehaviour\u003Cbr\u003E\n{\u003Cbr\u003E\n\u00A0 \u00A0 bool wasMoving;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 // Collect info about all the parts in the vessel and their earlier auto strut mode\u003Cbr\u003E\n\u00A0 \u00A0 class PartInfo\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 public Part part;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 public Part.AutoStrutMode autoStrutMode;\u003Cbr\u003E\n\u00A0 \u00A0 }\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 PartInfo[] partInfos;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 private static void printf(string format, params object[] a)\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 int i = 0;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 string s = (format is string) ? System.Text.RegularExpressions.Regex.Replace((string)format, \u0022%[sdi%]\u0022,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 match =\u0026gt; match.Value == \u0022%%\u0022 ? \u0022%\u0022 : i \u0026lt; a.Length ? (a[i\u002B\u002B] != null ? a[i - 1].ToString() : \u0022null\u0022) : match.Value) : format.ToString();\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 Debug.Log(s);\u003Cbr\u003E\n\u00A0 \u00A0 }\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 // Retrieve the active vessel and its parts\u003Cbr\u003E\n\u00A0 \u00A0 public static List\u0026lt;Part\u0026gt; GetParts()\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 List\u0026lt;Part\u0026gt; parts = null;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 if (FlightGlobals.ActiveVessel)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 parts = FlightGlobals.ActiveVessel.parts;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 else\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 parts = EditorLogic.fetch.ship.parts;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 return parts;\u003Cbr\u003E\n\u00A0 \u00A0 }\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 void FixedUpdate()\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 bool isMoving = AnyAnimationMoving();\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 if (isMoving == wasMoving)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 return;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 wasMoving = isMoving;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 printf(isMoving ? \u0022Started moving\u0022 : \u0022Stopped moving\u0022);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 List\u0026lt;Part\u0026gt; parts = AnimatedAttachmentUpdater.GetParts();\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 if (isMoving)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfos = new PartInfo[parts.Count];\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // If any part is moving, we need to de-strut any wheels\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 foreach (Part part in parts)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // Ignore parts that don\u0027t have struting\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 if (part.autoStrutMode == Part.AutoStrutMode.Off)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 continue;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // Create a record to keep track of the part and the current mode\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 PartInfo partInfo = new PartInfo();\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfos[parts.IndexOf(part)] = partInfo;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.part = part;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.autoStrutMode = part.autoStrutMode;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 printf(\u0022Changing auto strut of %s from %s to %s\u0022,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 part.name,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 part.autoStrutMode,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 Part.AutoStrutMode.Off);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // Remove the struting\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 part.autoStrutMode = Part.AutoStrutMode.Off;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 part.ReleaseAutoStruts();\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 }\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 }\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 else\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // Go through our list of de-strutted parts and put their original strutting back again\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 foreach (PartInfo partInfo in partInfos)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 if (partInfo == null)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 continue;\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 printf(\u0022Changing auto strut of %s from %s to %s\u0022,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.part.name,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.part.autoStrutMode,\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.autoStrutMode);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 // Bring struty back\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 partInfo.part.autoStrutMode = partInfo.autoStrutMode;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 }\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 }\u003Cbr\u003E\n\u00A0 \u00A0 }\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 \u00A0 // Check if any animation is moving\u003Cbr\u003E\n\u00A0 \u00A0 public static bool AnyAnimationMoving()\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 List\u0026lt;Part\u0026gt; parts = GetParts();\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 foreach (Part part in parts)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 foreach (PartModule partModule in part.Modules)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 if (partModule.moduleName == \u0022ModuleAnimateGeneric\u0022)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 if (((ModuleAnimateGeneric)partModule).aniState == ModuleAnimateGeneric.animationStates.MOVING)\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 return true;\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 \u00A0 return false;\u003Cbr\u003E\n\u00A0 \u00A0 }\u003Cbr\u003E\n}\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}