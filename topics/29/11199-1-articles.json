{"TopicId":11199,"ForumId":29,"TopicTitle":"Module and Resource example","CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-22T14:51:14Z","PageNum":1,"Articles":[{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-22T14:51:14Z","Content":"Trying to work through the mechanics of the new plugin system. I built something resembling Mu\\\u0027s example of a generic rocket module, and resource tank. The code to make the tank display like an actual FuelTank isn\\\u0027t working yet, but it does appear to be actually doing what it\\\u0027s supposed to. This is built as 2 \u0027Part\u0027 Parts, one as a dual chamber LOX/LH2 tank, the other as a LOX/LH2 rocket, both are using C7\\\u0027s structural fuselage as a base.\n\n I\\\u0027m posting this here in case anyone is having problems just getting the new system setup into something that works, and want\\\u0027s a concrete example to examine.\n\n [http://dl.dropbox.com/u/74137297/KISModuleDemoV0.zip](https://dl.dropbox.com/u/74137297/KISModuleDemoV0.zip)\n\n There\\\u0027s also an OOO spreadsheet I made for calculating all the fiddly conversions. May or may not be horribly inaccurate.\n\n-24May12-\n\n Newer code with tons of debug.logs for your parsing pleasure. Think the fuel tank at least works as it, but can\\\u0027t test it without the engine running properly.\n\n[http://dl.dropbox.com/u/74137297/KFuelTank.cs](https://dl.dropbox.com/u/74137297/KFuelTank.cs)\n\n[http://dl.dropbox.com/u/74137297/KPropulsionBase.cs](https://dl.dropbox.com/u/74137297/KPropulsionBase.cs)\n\n-11Jun12-\n\n I accidentally fed the code after midnight, then spilled water on it, and it\\\u0027s grown into a horde of angry gremlins. This is in no way suitable for public consumption yet, but I did manage to get several more things working in game, and it\\\u0027s actually flyable atm.\n\n\u003E ![screenshot173d.jpg](http://img805.imageshack.us/img805/7353/screenshot173d.jpg)\n\n[https://dl.dropbox.com/u/74137297/KISModuleDemoV2.zip](https://dl.dropbox.com/u/74137297/KISModuleDemoV2.zip)"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-05-22T15:09:57Z","Content":"Thanks for sorting out PartModule\\\u0027s mechanics. Example is useful indeed :thumbup:"},{"CreatedByName":"Corax","CreatedById":11311,"CreatedDateTime":"2012-05-22T15:14:41Z","Content":"Just a quick question, so far I\\\u0027ve only glanced over the example:\n\nWhy the conversion from kg to kerbogram? Shouldn\\\u0027t mass be the same everywhere, and only the weight force require adjustment?\n\nOr am I missing something obvious?"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-23T02:33:20Z","Content":"I\\\u0027m actually using real Earth values in everything still.\n\n The conversion was just from the density of 6:1 LOX:LH2 to the density of \u0027fuel\u0027 in the default KSP rocket tanks. I was worried that the \u0027amount\u0027 values in my fuel tanks were so small(the net thrust per tank is equal assuming you\\\u0027re using this engine/tank, and LiquidEngine1/FuelTank), and the fuel consumption in the engines is also tiny.\n\n The real problem with conversions is that Kerbin g is almost identical to Earth g, which would suggest a 1:1 ratio, but the actual planet, and all the rocket parts are smaller than Earth counterparts. And the metrics used to measure non-distance stuff is also out of scale.\n\n In other words, using the kg:KG conversion factor should give you something more like the 500 \u0027amount\u0027 of fuel in a tank, instead of 4.45 total in my tank. Also should bring the engine consumption from 0.0713/s closer to LiquidEngine\\\u0027s 8/s. The tiny values from direct conversion don\\\u0027t seem to cause noticeable problems yet, so I just left the KerboGram/KerboLiter in to make it clear what\\\u0027s an earth measurement, and what\\\u0027s a KSP measure."},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-23T08:55:27Z","Content":"Been working on this still. Wanted to let anyone who was dissecting this know that it looks like the engine is loading it\\\u0027s required propellants correctly when the part cfg file is parsed, but then somehow loses that data by the time the ship actually gets to the runway. So while the engine appeared to be working, it wasn\\\u0027t actually burning (or even checking) any of the resources it was supposed to.\n\n I also managed to make the stack icon update to a fueltank icon if it\\\u0027s left at mysterybox, and I think the only thing stopping the fuel bars showing now is that the fuel level is never actually adjusted by the engines.\n\n I\\\u0027ll re-upload it once I get the propellant persistence problem sorted out."},{"CreatedByName":"Corax","CreatedById":11311,"CreatedDateTime":"2012-05-23T16:31:21Z","Content":"\u003E \n\u003E In other words, using the kg:KG conversion factor should give you something more like the 500 \u0027amount\u0027 of fuel in a tank, instead of 4.45 total in my tank. Also should bring the engine consumption from 0.0713/s closer to LiquidEngine\\\u0027s 8/s. The tiny values from direct conversion don\\\u0027t seem to cause noticeable problems yet, so I just left the KerboGram/KerboLiter in to make it clear what\\\u0027s an earth measurement, and what\\\u0027s a KSP measure.\n\nThanks for explaining, I see now what you are doing there and why."},{"CreatedByName":"Maraz","CreatedById":22308,"CreatedDateTime":"2012-05-24T07:28:58Z","Content":"Hi, following your example, I tried to build a very simple part, an advanced command pod that also has the ASAS and MechJeb functionalities.\n\nUnfortunately it did not work ![:(](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif) the part is loaded, but it is not displayed among command pods, it is displayed as a common part and has no function (no MechJeb, and, it seems, no ASAS).\n\nWhat did I do wrong? Is what I wanted to do possible at all?\n\n(cfg file follows)\n\n    // --- general parameters ---name = advancedmk1podmodule = Partauthor = Maraz | Mrbrownce// --- asset parameters ---mesh = mk1pod.DAEscale = 0.1texture = mk1podtexture.pngspecPower = 0.1rimFalloff = 3alphaCutoff = 0.0// --- node definitions ---// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Znode_stack_bottom = 0.0, -3.02662, 0.0, 0.0, 1.0, 0.0, 1node_stack_top = 0.0, 3.93121, 0.0, 0.0, 1.0, 0.0, 0// --- editor parameters ---cost = 1600category = 1subcategory = 0title = Advenced Command Pod Mk1manufacturer = Kerlington Model Rockets and Paper Products Inc.description = Originally built as a placeholder for a demonstration mock-up of a rocket, the Mk1 Command Pod was heralded as a far safer and more reliable option than it\\\u0027s predecessors by rocket scientists throughout the world. It is now commonly seen in active service.// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollisionattachRules = 1,0,1,0,0// --- standard part parameters ---mass = 1dragModelType = defaultmaximum_drag = 0.2minimum_drag = 0.15angularDrag = 2crashTolerance = 14maxTemp = 3400MODULE{\tname = CommandPod\trotPower = 5\tlinPower = 10\tKp = 1.0\tKd = 1.0}MODULE{\tname = AdvSASModule\tKi = 0.5\tKp = 1.0\tKd = 1.5}\tMODULE{\tname = MuMechJeb}\t// ----- DO NOT EDIT BELOW THIS POINT ------\n\nMaraz"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-24T11:14:26Z","Content":"If you want it to show up as in the \u0027pick a pod\u0027 list, you need to set it as:\n\n    // --- general parameters ---name = advancedmk1podmodule = CommandPodauthor = Maraz | Mrbrownce\n\n AFAIK, there are no \u0027modularized\u0027 versions of the CommandPod, ASAS, or MechJeb as of yet, so no you can\\\u0027t do that so far without writing your own versions of them.\n\n The problem is that they haven\\\u0027t been updated to the new PartModule system yet, the classes CommandPod, AdvSASModule, MuMechJeb are still setup as being their own parts, not to work as assignable PartModule(s).\n\n Once we get versions of them that are set up as PartModules, that should work like you had it."},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-05-24T11:22:51Z","Content":"I found\n\nModuleAerodynamicLift \n\nModuleAnimateHeat \n\nModuleAnimatorLandingGear \n\nModuleCommand \n\nModuleEngineRocketLiquid \n\nModuleResource \n\nand ModuleResourceIntake\n\nin the object explorer. They seem to be the only stock part modules for now. Whould suffice for integrated planes ;D\n\nI also found something called StackIcon.partModule. What could that be for?"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-05-24T12:00:09Z","Content":"I believe those Module classes are just the examples from Mu\\\u0027s thread.\n\nStackIcon.partModule is very interesting, have to take a look when I get through fixing whatever is fubar with my joint fixer plugin. I\\\u0027m thinking it might possibly be an extension to the normal stack icons, as they\\\u0027re generally tied to the Part, not the PartModule. I had to cheat to get my fuel tank part to show a fuel tank icon."},{"CreatedByName":"Maraz","CreatedById":22308,"CreatedDateTime":"2012-05-24T12:07:15Z","Content":"\u003E \n\u003E If you want it to show up as in the \u0027pick a pod\u0027 list, you need to set it as:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E     // --- general parameters ---name = advancedmk1podmodule = CommandPodauthor = Maraz | Mrbrownce\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E  AFAIK, there are no \u0027modularized\u0027 versions of the CommandPod, ASAS, or MechJeb as of yet, so no you can\\\u0027t do that so far without writing your own versions of them.\n\u003E \n\u003E  The problem is that they haven\\\u0027t been updated to the new PartModule system yet, the classes CommandPod, AdvSASModule, MuMechJeb are still setup as being their own parts, not to work as assignable PartModule(s).\n\u003E \n\u003E  Once we get versions of them that are set up as PartModules, that should work like you had it.\n\nThanks for clarification. So I\\\u0027ll have to wait....\n\nMaraz"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-06-02T07:22:53Z","Content":"Mu say: \u0027So you can\\\u0027t use constructors on classes derived from MonoBehaviour (Part, PartModule, etc). To do your constructor stuff in a PartModule you need to the override OnAwake method.\u0027\n\n Which explains quite a lot of the bugs I\\\u0027ve been having. I think I have the C# thing mostly nailed down, but learning Unity is still troublesome.\n\n Not going to update my code here right now, as I\\\u0027m almost done with a larger system this is a prototype for, but in short:\n\n Do Not\n\n -use class constructors for Unity stuff\n\n Do\n\n -use OnAwake to do constructor stuff\n\n Also Do from Mu\n\n    public string classdata = \u0027\u0027;\n\n As in provide default values for stuff that defaults to null, but don\\\u0027t do it in a constructor. Also, check for null in OnAwake, before just assigning new:\n\n    if(DumDumList == null){  DumDumList = new List();}//instead ofDumDumList = new List();\n\nEDIT: Also, if you open a part.cfg that uses ConfigNode stuff in NotePad\u002B\u002B, and set the Language to Batch, it handles the structure very well."},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-06-11T08:26:46Z","Content":"Added link to more functional version. Really needs cleaning up, but lots of low level stuff is working now. It also pulls fuel properly, and evenly, though I couldn\\\u0027t get the actual KSP resource request system to work right, and made my own."}]}