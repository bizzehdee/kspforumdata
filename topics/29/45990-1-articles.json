{"TopicId":45990,"ForumId":29,"TopicTitle":"Setting direction of deployed parachute?","CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-15T04:23:16Z","PageNum":1,"Articles":[{"CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-15T04:23:16Z","Content":"\n\u003Cp\u003EI\u0027m working on a wind/weather mod and I\u0027ve got wind working pretty well, except that the parachute model doesn\u0027t seem to respond correctly. Taking the drag vector pointing directly up, the wind effect vector perpendicular to the drag vector, the parachute seems to deploy in the direction that\u0027s opposite of the resultant velocity vector, not the direction of the net force vector.\u003C/p\u003E\u003Cp\u003ESo I understand that this is probably because it\u0027s easier to model that way, but is there a way for me to rotate the direction of the parachute model? A simple rotation of 180\u00C3\u201A\u00C2\u00B0 around the vertical axis (with respect to the vessel) would fix my problem, but I can\u0027t seem to find the API function to do that.\u003C/p\u003E\n"},{"CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-17T14:16:50Z","Content":"\n\u003Cp\u003EI\u0027ve tried for a while now and still no luck. I guess this might not be possible? Darn, that\u0027s disappointing. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"UbioZur","CreatedById":72946,"CreatedDateTime":"2013-09-17T18:11:04Z","Content":"\n\u003Cp\u003Ehave you try to set a rotation matrix4x4, and then multiplying it to your vector?\u003C/p\u003E\n"},{"CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-18T00:35:03Z","Content":"\n\u003Cp\u003EWhich vector? The impulse vector I\u0027m applying needs to be in the direction it\u0027s currently pointing, otherwise it wouldn\u0027t be an accurate model of wind, it\u0027s that I can\u0027t get the parachute to respond properly to that impulse (or rather, it responds properly, just not in the way I want as wind usually causes the parachute to act opposite the direction a normal impulse would). I\u0027ve tried things like using small position changes instead of an impulse, but that causes the craft to be unstable even though it solves the orientation issue. I\u0027ve thought of forging the velocity vector, but I can\u0027t figure out how to change the velocity vector without changing the direction the craft is going (yes, I know this sounds silly).\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-09-18T00:51:20Z","Content":"\n\u003Cp\u003ESo you basically want to move the chute into the direction of the wind? So you need to find the correct transform and rotate it. Try sth like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Evar part = ...;\u003Cbr\u003Evar moduleParachute = part.GetComponent\u0026lt;ModuleParachute\u0026gt;();\u003Cbr\u003Evar transform = part.FindModelTransform(moduleParachute.canopyName);\u003Cbr\u003E// use transform... might rotate it?\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-18T03:26:43Z","Content":"\n\u003Cp\u003EThanks for the suggestion, but it didn\u0027t seem to work. I tried:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E            ModuleParachute moduleParachute = part.GetComponent\u0026lt;ModuleParachute\u0026gt;();\u003Cbr\u003E            Transform transform = part.FindModelTransform(moduleParachute.canopyName);\u003Cbr\u003E            transform.RotateAround(Vector3.up, 180);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ebut it didn\u0027t seem to have any effect. Just to confirm, I also tried with\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Etransform.RotateAround(Vector3.right, 20);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto see if it rotated the model, but there was no effect. Is there anything I need to do to apply the transformation? According to the \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity docs\u003C/a\u003E, I shouldn\u0027t need to, but maybe KSP is doing something special here?\u003C/p\u003E\u003Cp\u003EAlso, just out of curiosity, what\u0027s the difference between transform found this way and the transform located in the scope of PartModule?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-18T03:28:47Z\u0022 title=\u002209/18/2013 03:28  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 18, 2013\u003C/time\u003E by kevmo314\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JDP","CreatedById":30775,"CreatedDateTime":"2013-09-18T08:36:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kevmo314\u0022 data-cite=\u0022kevmo314\u0022\u003E\u003Cdiv\u003EThanks for the suggestion, but it didn\u0027t seem to work. I tried:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E            ModuleParachute moduleParachute = part.GetComponent\u0026lt;ModuleParachute\u0026gt;();\u003Cbr\u003E            Transform transform = part.FindModelTransform(moduleParachute.canopyName);\u003Cbr\u003E            transform.RotateAround(Vector3.up, 180);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ebut it didn\u0027t seem to have any effect. Just to confirm, I also tried with\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Etransform.RotateAround(Vector3.right, 20);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto see if it rotated the model, but there was no effect. Is there anything I need to do to apply the transformation? According to the \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity docs\u003C/a\u003E, I shouldn\u0027t need to, but maybe KSP is doing something special here?\u003C/p\u003E\u003Cp\u003EAlso, just out of curiosity, what\u0027s the difference between transform found this way and the transform located in the scope of PartModule?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Esince ModuleParachute has a name variable for the canopy transform (canopyName) it\u0027s safe to assume that ModuleParachute sets the rotation of that transform based on frame velocity. Which in fact it does seem to do every fixed update.\u003C/p\u003E\u003Cp\u003ESadly I can\u0027t see any way around this, safe for overriding ModuleParachute entirely, which of course is a possible solution. Probably in conjunction with ModuleManager.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-09-18T14:18:11Z","Content":"\n\u003Cp\u003EWell, the approach i mentioned should work. Here is a little proof of concept:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    class DoRot : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public Transform t;\u003Cbr\u003E        public void LateUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            t.Rotate(Vector3.left);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    // Code to add the module\u003Cbr\u003E    if (GUILayout.Button(\u0022Add chute rot\u0022))\u003Cbr\u003E    {\u003Cbr\u003E        foreach (var p in FlightGlobals.ActiveVessel.Parts)\u003Cbr\u003E        {\u003Cbr\u003E            var modPara = p.GetComponent\u0026lt;ModuleParachute\u0026gt;();\u003Cbr\u003E            if (modPara != null)\u003Cbr\u003E            {\u003Cbr\u003E                var newBehavior = p.gameObject.AddComponent\u0026lt;DoRot\u0026gt;();\u003Cbr\u003E                newBehavior.t = p.FindModelTransform(modPara.canopyName);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EScreen after adding a bunch of those modules: \u003Ca href=\u0022http://db.tt/5twvUBEq\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://db.tt/5twvUBEq\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EJDP is correct, the game re-sets it on every fixedUpdate. But using a later update should work just fine, as long as you only want it as an visual effect and the physical wind was already applied anyway. You also have to make sure you do only a single rotation after each reset of the game, since there sadly is no lateFixedUdpate ... the code above does not, thats why you sometimes notice some flickering.\u003C/p\u003E\n"},{"CreatedByName":"JDP","CreatedById":30775,"CreatedDateTime":"2013-09-18T17:02:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003E\u0026lt;snip\u0026gt;\u003Cp\u003E[T]here sadly is no lateFixedUdpate ... the code above does not, thats why you sometimes notice some flickering.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ethe solution to flickering could be simply replacing each instance of ModuleParachute with a custom module that derives from ModuleParachute, with the only addition of modifying the canopy rotation. Replacing this module could be done via ModuleManager or you could do it programatically yourself.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic class ModuleParachute2 : ModuleParachute {\u003Cbr\u003E    private Transform CanopyToRotate;\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(PartModule.StartState state) {\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E        CanopyToRotate = part.FindModelTransform(canopyName);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnFixedUpdate() {\u003Cbr\u003E        base.OnFixedUpdate();\u003Cbr\u003E        CanopyToRotate.Rotate(Vector3.left);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"kevmo314","CreatedById":79088,"CreatedDateTime":"2013-09-24T04:59:28Z","Content":"\n\u003Cp\u003EI tried the LateUpdate() method and the flickering is quite extreme for me. It might be just my computer, but it\u0027s incredibly noticeable, so I guess I\u0027ll try the module replacement method. When I did it with ModuleManager, it seemed to break any current auto-saved ships saying ModuleParachute wasn\u0027t found (because I replaced it with something else). Is this supposed to happen? I can just do it programmatically, but I was just curious as ModuleManager does seem like a cleaner solution overall.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-09-24T15:29:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kevmo314\u0022 data-cite=\u0022kevmo314\u0022\u003E\u003Cdiv\u003EI tried the LateUpdate() method and the flickering is quite extreme for me.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGuess that means you have a much better PC than mine^^\u003C/p\u003E\u003Cp\u003EAs mentioned, a simple check should fix that:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    class DoRot : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        Boolean needsRot = true;\u003Cbr\u003E        public Transform t;\u003Cbr\u003E        void LateUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if (needsRot)\u003Cbr\u003E            {\u003Cbr\u003E                t.Rotate(Vector3.left);\u003Cbr\u003E                needsRot = false;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            needsRot = true;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou could try to work around those compatibility issues. An approach might be be to use the same class name as the original one. But therefor you likely have to dump modulemanager and have to replace the module yourself. It would be a much \u0022cleaner\u0022 solution (until sth else wants to manipulate ModuleParachut, ofc^^)\u003C/p\u003E\n"}]}