{"TopicId":91171,"ForumId":29,"TopicTitle":"Procedural Point-Cloud Bouyancy - In theory","CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-11-24T21:24:25Z","PageNum":1,"Articles":[{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-11-24T21:24:25Z","Content":"\n\u003Cp\u003EI\u0027ve been working on a theory to replace the stock completely useless buoyancy system with something that isn\u0027t completely useless.\u003C/p\u003E\u003Cp\u003EHere\u0027s the basic process:\u003C/p\u003E\u003Cp\u003EStep zero, disable stock bouyancy for all parts\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EPick a part that hasn\u0027t been processed yet\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPlace a plane offset on one axis\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EIntersect the plane with the visible mesh of the part and capture the lines where the triangles of the mesh intersect the plane; \u003Ca href=\u0022http://imgur.com/a/2t0P3\u0022 rel=\u0022external nofollow\u0022\u003E(here\u0027s an album)\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETake the resulting profile and strip it to just the vertices\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERun a variant of \u003Ca href=\u0022https://en.wikipedia.org/wiki/QuickHull\u0022 rel=\u0022external nofollow\u0022\u003EQuickHull\u003C/a\u003E to generate a convex nGon which contains all of the vertices\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EThrow away all the vertices which are not part of the nGon\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EEliminate all collinear vertices on the nGon\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EFor each edge on the nGon if length is greater than X, split the edge at it\u0027s midpoint; repeat until no lines are greater than X\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EStrip the nGon of it\u0027s edges and add the vertices to the part\u0027s point cloud\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMove the plane towards the far end of the part by X, where the part\u0027s length is divisible by X\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERepeat until the plane is at the far end of the part\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOnce the point cloud is generated it needs to be weighted so that the \u0027CoM\u0027 of the point cloud is the same as the part\u0027s actual CoM\u003C/p\u003E\u003Cp\u003EThe final step is to cache the point cloud to a file so that this process does not need to be \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Ecompleted\u003C/span\u003E repeated.\u003C/p\u003E\u003Cp\u003ENow that every part has a point cloud representing their volume we move to the application of this information.\u003C/p\u003E\u003Cp\u003EEvery frame determine if any parts\u0027 bounding box intersects with the surface of the water. If so we need to do a partial submersion check.\u003C/p\u003E\u003Cp\u003EPlace a plane at sealevel, this is to prevent any \u0027specialness\u0027 about the ocean surface from mattering, for any rational scale vessel the curvature of the ocean doesn\u0027t matter. Now we take the point cloud and split it on the plane; figuring out which ones are above and below the plane. Any points below the plane will contribute to the part\u0027s buoyancy, above will not.\u003C/p\u003E\u003Cp\u003EBelow the ocean buoyancy will be invariant, maybe; above the ocean there is no buoyancy\u003C/p\u003E\u003Cp\u003EThere\u0027s still a lot of stuff I\u0027m not sure about; I haven\u0027t laid down any code yet, I\u0027m not entirely sure where I\u0027m going to get the volume of the part from, though there are many options, I don\u0027t quite know how I\u0027m going to apply the force, and there are going to be a lot of verts so this is probably going to be difficult to run.\u003C/p\u003E\u003Cp\u003EBut theoretically this would approximate buoyancy to a useful degree, and circumvent the faults that have existed in other subaquatic solutions.\u003C/p\u003E\u003Cp\u003EThe biggest issue with this plan is that it entirely fails to handle concave geometry, or parts such as trusses which have several pieces of convex geometry in the slice, I don\u0027t have a solution to that yet.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-27T21:05:34Z\u0022 title=\u002201/27/2015 09:05  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 27, 2015\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-11-25T00:40:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EI\u0027ve been working on a theory to replace the stock completely useless buoyancy system with something that isn\u0027t completely useless.\u003Cp\u003EHere\u0027s the basic process:\u003C/p\u003E\u003Cp\u003EStep zero, disable stock bouyancy for all parts\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EPick a part that hasn\u0027t been processed yet\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPlace a plane offset on one axis\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EIntersect the plane with the visible mesh of the part and capture the lines where the triangles of the mesh intersect the plane; \u003Ca href=\u0022http://imgur.com/a/2t0P3\u0022 rel=\u0022external nofollow\u0022\u003E(here\u0027s an album)\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETake the resulting profile and strip it to just the vertices\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERun a variant of \u003Ca href=\u0022https://en.wikipedia.org/wiki/QuickHull\u0022 rel=\u0022external nofollow\u0022\u003EQuickHull\u003C/a\u003E to generate a convex nGon which contains all of the vertices\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EThrow away all the vertices which are not part of the nGon\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EEliminate all collinear vertices on the nGon\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EFor each edge on the nGon if length is greater than X, split the edge at it\u0027s midpoint; repeat until no lines are greater than X\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EStrip the nGon of it\u0027s edges and add the vertices to the part\u0027s point cloud\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMove the plane towards the far end of the part by X, where the part\u0027s length is divisible by X\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERepeat until the plane is at the far end of the part\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOnce the point cloud is generated it needs to be weighted so that the \u0027CoM\u0027 of the point cloud is the same as the part\u0027s actual CoM\u003C/p\u003E\u003Cp\u003EThe final step is to cache the point cloud to a file so that this process does not need to be completed.\u003C/p\u003E\u003Cp\u003ENow that every part has a point cloud representing their volume we move to the application of this information.\u003C/p\u003E\u003Cp\u003EEvery frame determine if any parts\u0027 bounding box intersects with the surface of the water. If so we need to do a partial submersion check.\u003C/p\u003E\u003Cp\u003EPlace a plane at sealevel, this is to prevent any \u0027specialness\u0027 about the ocean surface from mattering, for any rational scale vessel the curvature of the ocean doesn\u0027t matter. Now we take the point cloud and split it on the plane; figuring out which ones are above and below the plane. Any points below the plane will contribute to the part\u0027s buoyancy, above will not.\u003C/p\u003E\u003Cp\u003EBelow the ocean buoyancy will be invariant, maybe; above the ocean there is no buoyancy\u003C/p\u003E\u003Cp\u003EThere\u0027s still a lot of stuff I\u0027m not sure about; I haven\u0027t laid down any code yet, I\u0027m not entirely sure where I\u0027m going to get the volume of the part from, though there are many options, I don\u0027t quite know how I\u0027m going to apply the force, and there are going to be a lot of verts so this is probably going to be difficult to run.\u003C/p\u003E\u003Cp\u003EBut theoretically this would approximate buoyancy to a useful degree, and circumvent the faults that have existed in other subaquatic solutions.\u003C/p\u003E\u003Cp\u003EThe biggest issue with this plan is that it entirely fails to handle concave geometry, or parts such as trusses which have several pieces of convex geometry in the slice, I don\u0027t have a solution to that yet.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll add some $.02 here...\u003C/p\u003E\u003Cp\u003ESo in my testing, I was VERY surprised to find that the actual ocean mesh has no bearing on craft. When I was testing ocean floor effects for EVE, I set the Ocean PQS radii to 1. This made the mesh effectively disappear, but to my surprise, craft still hit the \u0022water\u0022!\u003C/p\u003E\u003Cp\u003EI suspect KSP is actually using a sphere collider or a plane as you suggested.\u003C/p\u003E\n"}]}