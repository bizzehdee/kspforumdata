{"TopicId":7682,"ForumId":29,"TopicTitle":"How do you bind to keys?","CreatedByName":"dodrian","CreatedById":12564,"CreatedDateTime":"2012-03-05T22:34:06Z","PageNum":1,"Articles":[{"CreatedByName":"dodrian","CreatedById":12564,"CreatedDateTime":"2012-03-05T22:34:06Z","Content":"\n\u003Cp\u003ESo far I\\\u0027ve only managed it by subclassing a part already using a key (Landing legs or ASAS). What\\\u0027s the best way to respond to keyboard input?\u003C/p\u003E\n"},{"CreatedByName":"crazygerbil","CreatedById":16266,"CreatedDateTime":"2012-03-05T23:16:00Z","Content":"\n\u003Cp\u003EI\\\u0027m wondering how you were doing it by subclassing ASAS, but the way I normally do it is:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  protected override void onPartFixedUpdate()\u003Cbr\u003E  {\u003Cbr\u003E    if (UnityEngine.Input.GetKeyDown(\u0027\u0026lt;a letter\u0026gt;\u0027))\u003Cbr\u003E    {\u003Cbr\u003E      //do stuff\u003Cbr\u003E    }\u003Cbr\u003E  }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"skyline131313","CreatedById":4776,"CreatedDateTime":"2012-03-06T01:54:26Z","Content":"\n\u003Cp\u003EIt is hardcoded to certain values in the FlightCtrlState class, which can be accessed by overriding the OnCtrlUpd(FlightCtrlState) function. It also seems you can modify certain input controls (yaw, pitch, roll) I haven\\\u0027t tested if it accepts changes to it.\u003C/p\u003E\u003Cp\u003EAlso seems you can access it through \u0027FlightInputHandler.state\u0027. The only way you can do it is like Crazygerbil suggested. It might be possible to have the hotkey editable through the .cfg file but I haven\\\u0027t tested this either.\u003C/p\u003E\n"},{"CreatedByName":"dodrian","CreatedById":12564,"CreatedDateTime":"2012-03-06T06:51:21Z","Content":"\n\u003Cp\u003EBut if you do that, this only returns if the key is pressed down. I\\\u0027m looking for something to alert me if the key is pushed and released.\u003C/p\u003E\u003Cp\u003EI know in Java it was by registering something called a keylistener, does Unity have an equivalent?\u003C/p\u003E\n"},{"CreatedByName":"trbinsc","CreatedById":10144,"CreatedDateTime":"2012-03-06T18:18:23Z","Content":"\n\u003Cp\u003ELike where you can hold down the F key to use SAS?\u003C/p\u003E\n"},{"CreatedByName":"N3X15","CreatedById":12073,"CreatedDateTime":"2012-03-06T18:22:53Z","Content":"\n\u003Cp\u003EInput class.\u003C/p\u003E\n"},{"CreatedByName":"C7Studios","CreatedById":3895,"CreatedDateTime":"2012-03-07T16:34:49Z","Content":"\n\u003Cp\u003EThere are actually a number of ways to get input. If you want access to the input that\\\u0027s already used by the game. You have to use the FlightCtrlState. This will give you the status of the \u0027throttle\u0027, \u0027pitch\u0027 and any other built in keys. Such as \u0027gear down\u0027.\u003C/p\u003E\u003Cp\u003EIf you want to use unity input. You can access it a number of ways.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine; // This is a shortcut so you don\\\u0027t have to type UnityEngine.Input, just input\u003Cbr\u003E\u003Cbr\u003Epublic string DoSomething = \u0027B\u0027; // This declares a public string, Since its public you can access it in the part.cfg file on load.\u003Cbr\u003E\u003Cbr\u003E// The key functions return either \u0027true\u0027 or \u0027false\u0027 if the condition is met. This is a useful way of checking \u0027if\u0027 a key is down.\u003Cbr\u003E\u003Cbr\u003Eif (Input.GetKey(\u0027) // if true, so key is depressed\u003Cbr\u003E{\u003Cbr\u003E    // Do something\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eif (Input.GetKey(\u0027B\u0027) // You can use a string to define the keys\u003Cbr\u003Eif (Input.GetKey(KeyCode. // Or you can hard code them to a unity keycode\u003Cbr\u003Eif(Input.GetKey(DoSomething) // we can also use a string variable to access a key. This is how you can add key configuration to your part.cfg file\u003Cbr\u003E\u003Cbr\u003E// There are three main variants of the get key functions in unity.\u003Cbr\u003E\u003Cbr\u003EGetKey(); // This is used to check if the key is depressed, returns true while the key is held. Useful for things like autofire or values that count up.\u003Cbr\u003E\u003Cbr\u003EGetKeyDown(); // Returns true if the key has just been pressed down. Good for toggles and single shot items.\u003Cbr\u003EGetKeyUp(); // Returns true if the key has just been released. Good for toggles and single shot items. Will not be true if the key is held, only if it has been released.\u003Cbr\u003E\u003Cbr\u003EThis also applies to the mouse buttons\u003Cbr\u003E\u003Cbr\u003EInput.GetMouseButton(0); // Gets the first mouse button (left)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"dodrian","CreatedById":12564,"CreatedDateTime":"2012-03-07T18:35:29Z","Content":"\n\u003Cp\u003EThanks C7! The Unity input was what I was looking for, that\\\u0027s a big help.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-03-11T21:14:35Z","Content":"\n\u003Cp\u003EI\\\u0027ve one more question regarding keyboard input. \u003C/p\u003E\u003Cp\u003EEverything is OK as soon as I handle button holds: \u003Cem\u003EInput.GetKey \u003C/em\u003Eand \u003Cem\u003EGetButton \u003C/em\u003Emethods work well. But capturing \u003Cem\u003Ea single button press\u003C/em\u003E with \u003Cem\u003EInput.GetButtonDown \u003C/em\u003Eor \u003Cem\u003EGetButtonUp \u003C/em\u003Eis a kinda messed up. If those methods are called from \u003Cem\u003EMyClass.onCtrlUpd \u003C/em\u003Ethen only the part in an active vessel receives the keystroke (which it exactly what I need), but those keystrokes are sometimes skipped. If I call those methods from \u003Cem\u003EMyClass.onPartUpdate\u003C/em\u003E then no keystrokes are skipped, but every \u003Cem\u003EMyClass \u003C/em\u003Epart in the visible range receives them! So I\\\u0027ve ended up testing \u003Cem\u003EactiveVessel \u003C/em\u003Evariable like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  protected override void onPartUpdate() {\u003Cbr\u003E    base.onPartUpdate();\u003Cbr\u003E    if( vessel != FlightGlobals.ActiveVessel )\u003Cbr\u003E      return;\u003Cbr\u003E    if( Input.GetKeyDown( KeyCode.H ) ) { // do something\u003Cbr\u003E    ...\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhich is quite ugly. \u003C/p\u003E\u003Cp\u003EIs there more convenient way to capture keystrokes for active vessel only?\u003C/p\u003E\n"},{"CreatedByName":"sarkun","CreatedById":10559,"CreatedDateTime":"2012-03-22T10:05:21Z","Content":"\n\u003Cp\u003EI don\\\u0027t really see what\\\u0027s ugly about checking if the part is on active vessel - seems pretty normal thing to me. However, if you dislike the activeVessel variable - you may want to take a look at the \u003Cem\u003EisControllable\u003C/em\u003E property of the Part class.\u003C/p\u003E\n"}]}