{"TopicId":73852,"ForumId":29,"TopicTitle":"Proper loading of ConfigNodes in a PartModule","CreatedByName":"Nertea","CreatedById":83952,"CreatedDateTime":"2014-06-01T20:04:32Z","PageNum":1,"Articles":[{"CreatedByName":"Nertea","CreatedById":83952,"CreatedDateTime":"2014-06-01T20:04:32Z","Content":"\n\u003Cp\u003EI\u0027ve looked around a bunch and haven\u0027t really been able to find any documentation on this. \u003C/p\u003E\u003Cp\u003EEssentially I have a new PartModule that I would like to contain a few new blocks similar to PROPELLANT blocks. The goal would be something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\t\tMODULE\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tname = VariableISPEngine\u003Cbr\u003E\t\t\tEnergyUsage = 180\u003Cbr\u003E\u003Cbr\u003E\t\t\tUseDirectThrottle = false\u003Cbr\u003E\u003Cbr\u003E\t\t\tVARIABLEMODE\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tname = ArgonMode\u003Cbr\u003E\t\t\t\tThrustCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 6\u003Cbr\u003E\t\t\t\t\tkey = 1 22\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tIspCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 12000\u003Cbr\u003E\t\t\t\t\tkey = 1 3200\u003Cbr\u003E\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tVARIABLEMODE\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tname = HydrogenMode\u003Cbr\u003E\t\t\t\tThrustCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 1.9\u003Cbr\u003E\t\t\t\t\tkey = 1 6\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tIspCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 26500\u003Cbr\u003E\t\t\t\t\tkey = 1 5250\u003Cbr\u003E\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\t}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, I\u0027ve got that working about halfway, then I got stuck. Based on the documentation I\u0027ve collected, I can successfully load the above data by reading it into an implementation of ConfigNode.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class VariableEngineMode : IConfigNode\u003Cbr\u003E        {\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public string name = \u0022\u0022;\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public string fuelType = \u0022\u0022;\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public FloatCurve thrustCurve = new FloatCurve();\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public FloatCurve ispCurve = new FloatCurve();\u003Cbr\u003E\u003Cbr\u003E            public VariableEngineMode()\u003Cbr\u003E            {          \u003Cbr\u003E            }\u003Cbr\u003E            public VariableEngineMode(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E                Load(node); \u003Cbr\u003E            }\u003Cbr\u003E            public void Load(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E\u003Cbr\u003E                if (node.name.Equals(\u0022VARIABLEMODE\u0022))\u003Cbr\u003E                {\u003Cbr\u003E                    ConfigNode.LoadObjectFromConfig(this, node);\u003Cbr\u003E                    if (node.HasValue(\u0022name\u0022))\u003Cbr\u003E                        name = node.GetValue(\u0022name\u0022);\u003Cbr\u003E                    if (node.HasValue(\u0022fuelType\u0022))\u003Cbr\u003E                        fuelType = node.GetValue(\u0022fuelType\u0022);\u003Cbr\u003E                    if (node.HasNode(\u0022ThrustCurve\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        thrustCurve = new FloatCurve();\u003Cbr\u003E                        thrustCurve.Load(node.GetNode(\u0022ThrustCurve\u0022));\u003Cbr\u003E\u003Cbr\u003E                    } \u003Cbr\u003E                    if (node.HasNode(\u0022IspCurve\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        ispCurve = new FloatCurve();\u003Cbr\u003E                        ispCurve.Load(node.GetNode(\u0022IspCurve\u0022));\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            public void Save(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E                ConfigNode.CreateConfigFromObject(this, node);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen load it via my PartModule\u0027s OnLoad() section. This code performs fine at load time - that is, I can read out the members of engineModes and they are correctly populated during the KSP loading scene.\u003C/p\u003E\u003Cp\u003E \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E\u003Cbr\u003E            ConfigNode[] nodes = node.GetNodes(\u0022VARIABLEMODE\u0022);\u003Cbr\u003E            engineModes = new List\u0026lt;VariableEngineMode\u0026gt;();\u003Cbr\u003E            foreach (ConfigNode n in nodes)\u003Cbr\u003E            {\u003Cbr\u003E                VariableEngineMode mode = new VariableEngineMode(n);\u003Cbr\u003E                engineModes.Add(mode);\u003Cbr\u003E            }\u003Cbr\u003E            this.moduleName = \u0022Variable ISP Engine\u0022;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe issue - Once ingame and the part\u0027s OnStart() runs, engineModes is back to an uninitialized, empty List. I\u0027ve also tried doing in with a builtin array with no luck.\u003C/p\u003E\u003Cp\u003ESo, what am I missing? I feel like there could be some step between OnLoad and OnStart that I need to specify, but I can\u0027t find info.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-06-01T20:10:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nertea\u0022 data-cite=\u0022Nertea\u0022\u003E\u003Cdiv\u003EI\u0027ve looked around a bunch and haven\u0027t really been able to find any documentation on this. \u003Cp\u003EEssentially I have a new PartModule that I would like to contain a few new blocks similar to PROPELLANT blocks. The goal would be something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\t\tMODULE\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tname = VariableISPEngine\u003Cbr\u003E\t\t\tEnergyUsage = 180\u003Cbr\u003E\u003Cbr\u003E\t\t\tUseDirectThrottle = false\u003Cbr\u003E\u003Cbr\u003E\t\t\tVARIABLEMODE\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tname = ArgonMode\u003Cbr\u003E\t\t\t\tThrustCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 6\u003Cbr\u003E\t\t\t\t\tkey = 1 22\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tIspCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 12000\u003Cbr\u003E\t\t\t\t\tkey = 1 3200\u003Cbr\u003E\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tVARIABLEMODE\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tname = HydrogenMode\u003Cbr\u003E\t\t\t\tThrustCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 1.9\u003Cbr\u003E\t\t\t\t\tkey = 1 6\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tIspCurve\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tkey = 0 26500\u003Cbr\u003E\t\t\t\t\tkey = 1 5250\u003Cbr\u003E\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\t}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, I\u0027ve got that working about halfway, then I got stuck. Based on the documentation I\u0027ve collected, I can successfully load the above data by reading it into an implementation of ConfigNode.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class VariableEngineMode : IConfigNode\u003Cbr\u003E        {\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public string name = \u0022\u0022;\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public string fuelType = \u0022\u0022;\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public FloatCurve thrustCurve = new FloatCurve();\u003Cbr\u003E            [Persistent]\u003Cbr\u003E            public FloatCurve ispCurve = new FloatCurve();\u003Cbr\u003E\u003Cbr\u003E            public VariableEngineMode()\u003Cbr\u003E            {          \u003Cbr\u003E            }\u003Cbr\u003E            public VariableEngineMode(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E                Load(node); \u003Cbr\u003E            }\u003Cbr\u003E            public void Load(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E\u003Cbr\u003E                if (node.name.Equals(\u0022VARIABLEMODE\u0022))\u003Cbr\u003E                {\u003Cbr\u003E                    ConfigNode.LoadObjectFromConfig(this, node);\u003Cbr\u003E                    if (node.HasValue(\u0022name\u0022))\u003Cbr\u003E                        name = node.GetValue(\u0022name\u0022);\u003Cbr\u003E                    if (node.HasValue(\u0022fuelType\u0022))\u003Cbr\u003E                        fuelType = node.GetValue(\u0022fuelType\u0022);\u003Cbr\u003E                    if (node.HasNode(\u0022ThrustCurve\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        thrustCurve = new FloatCurve();\u003Cbr\u003E                        thrustCurve.Load(node.GetNode(\u0022ThrustCurve\u0022));\u003Cbr\u003E\u003Cbr\u003E                    } \u003Cbr\u003E                    if (node.HasNode(\u0022IspCurve\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        ispCurve = new FloatCurve();\u003Cbr\u003E                        ispCurve.Load(node.GetNode(\u0022IspCurve\u0022));\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            public void Save(ConfigNode node)\u003Cbr\u003E            {\u003Cbr\u003E                ConfigNode.CreateConfigFromObject(this, node);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen load it via my PartModule\u0027s OnLoad() section. This code performs fine at load time - that is, I can read out the members of engineModes and they are correctly populated during the KSP loading scene.\u003C/p\u003E\u003Cp\u003E \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E\u003Cbr\u003E            ConfigNode[] nodes = node.GetNodes(\u0022VARIABLEMODE\u0022);\u003Cbr\u003E            engineModes = new List\u0026lt;VariableEngineMode\u0026gt;();\u003Cbr\u003E            foreach (ConfigNode n in nodes)\u003Cbr\u003E            {\u003Cbr\u003E                VariableEngineMode mode = new VariableEngineMode(n);\u003Cbr\u003E                engineModes.Add(mode);\u003Cbr\u003E            }\u003Cbr\u003E            this.moduleName = \u0022Variable ISP Engine\u0022;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe issue - Once ingame and the part\u0027s OnStart() runs, engineModes is back to an uninitialized, empty List. I\u0027ve also tried doing in with a builtin array with no luck.\u003C/p\u003E\u003Cp\u003ESo, what am I missing? I feel like there could be some step between OnLoad and OnStart that I need to specify, but I can\u0027t find info.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s because OnLoad is called during the loading sequence and before flight, not in the editor. So whatever you get in the loading sequence is then unloaded before you get to the editor. A solution I came with is to save the ConfigNode of the Module in a public variable, since it\u0027s serializable it won\u0027t be unloaded. You can just reload mmanually in OnStart with the node.\u003C/p\u003E\n"},{"CreatedByName":"Nertea","CreatedById":83952,"CreatedDateTime":"2014-06-02T01:23:03Z","Content":"\n\u003Cp\u003EAh, awesome. I\u0027ll do that.\u003C/p\u003E\u003Cp\u003E- edit: Ok, so I tried this... and yes, that worked. Stuff loaded in the VAB. However, of course, changing the scene to Flight cleared everything again. So reload in flight? Nope, now my saved ConfigNode is empty!\u003C/p\u003E\u003Cp\u003ESo in summary:\u003C/p\u003E\u003Cp\u003E- Loaded data in OnLoad(), saved the whole module\u0027s ConfigNode to a public variable\u003C/p\u003E\u003Cp\u003E- Data reloads manually just fine in the VAB/SPH\u003C/p\u003E\u003Cp\u003E- Data does *not* reload in flight because the ConfigNode is empty.\u003C/p\u003E\u003Cp\u003ESo I\u0027m just generally scratching my head on how all this works now.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-02T02:40:34Z\u0022 title=\u002206/02/2014 02:40  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 2, 2014\u003C/time\u003E by Nertea\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2014-06-02T11:14:00Z","Content":"\n\u003Cp\u003EI ended up putting the data in static variables to store them.\u003C/p\u003E\u003Cp\u003ECheck the source here: \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/snjo/Firespitter/blob/master/Firespitter/tools/FSnodeLoader.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/snjo/Firespitter/blob/master/Firespitter/tools/FSnodeLoader.cs\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/snjo/Firespitter/blob/master/Firespitter/FSnodeLoaderTest.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/snjo/Firespitter/blob/master/Firespitter/FSnodeLoaderTest.cs\u003C/a\u003E (not usre if that test is compatible with the above class anymore)\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/snjo/Firespitter/blob/master/Firespitter/customization/FStextureSwitch.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/snjo/Firespitter/blob/master/Firespitter/customization/FStextureSwitch.cs\u003C/a\u003E - but it is used in this one\u003C/p\u003E\u003Cp\u003EThese examples are very custom to a particular use, but you can see the system of static lists in the FStextureSwitch. This isn\u0027t the best system ever, but it works. I\u0027ve since abandoned nodes for parsed strings in \u003Ca href=\u0022https://github.com/snjo/Firespitter/blob/master/Firespitter/customization/FStextureSwitch2.cs\u0022 rel=\u0022external nofollow\u0022\u003EFStextureSwitch2\u003C/a\u003E. They are much easier to work with since you don\u0027t need to restart the game each time you change the part.cfg.\u003C/p\u003E\u003Cp\u003Eedit: and then i parse floatCurves using \u003Ca href=\u0022https://github.com/snjo/Firespitter/blob/master/Firespitter/tools/FStools.cs#L22\u0022 rel=\u0022external nofollow\u0022\u003Ethis parser\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-02T11:17:51Z\u0022 title=\u002206/02/2014 11:17  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 2, 2014\u003C/time\u003E by Snjo\u003C/strong\u003E\n\u003C/span\u003E\n"}]}