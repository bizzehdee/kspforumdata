{"TopicId":85619,"ForumId":29,"TopicTitle":"[RESOLVED] How To Determine Variable State from VAB/SPH to Launchpad?","CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-28T15:19:51Z","PageNum":1,"Articles":[{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-28T15:19:51Z","Content":"\n\u003Cp\u003EEDIT: See next post.\u003C/p\u003E\u003Cp\u003EI have a part with a bool value which enables/disables the renderer for a component. I can set it in the VAB/SPH and the component disappears and reappears. However, when I go to the launchpad, the part is created with the invisible component as visible.\u003C/p\u003E\u003Cp\u003EI\u0027ve looked through some other people\u0027s code to determine how they do it. No joy.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003Eusing System.Collections;\u003C/p\u003E\u003Cp\u003Eusing UnityEngine;\u003C/p\u003E\u003Cp\u003Enamespace RenderTest\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public class RenderTest : PartModule\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E private bool blueVisible = true;\u003C/p\u003E\u003Cp\u003E private Component compBlue;\u003C/p\u003E\u003Cp\u003E public override void OnStart(PartModule.StartState state)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E compBlue = part.FindModelComponent\u0026lt;Component\u0026gt;(\u0022blue\u0022);\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E [KSPEvent(active = true, guiActive = true, guiActiveEditor = true, guiName = \u0022Invisible\u0022)]\u003C/p\u003E\u003Cp\u003E public void ClickRed()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E blueVisible = ! blueVisible;\u003C/p\u003E\u003Cp\u003E Debug.Log(\u0022VAB: \u0022 \u002B blueVisible);\u003C/p\u003E\u003Cp\u003E Events[\u0022ClickRed\u0022].guiName = (blueVisible? \u0022Invisible\u0022 : \u0022Visible\u0022);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = (blueVisible? true : false);\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E public void onLoad()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E Debug.Log(\u0022onLoad: \u0022 \u002B blueVisible);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = (blueVisible ? true : false);\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-28T17:16:39Z\u0022 title=\u002209/28/2014 05:16  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 28, 2014\u003C/time\u003E by Apollo13\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-28T16:33:25Z","Content":"\n\u003Cp\u003EThe code now looks like this. However, the value of \u0022blueVisible\u0022 is not maintained between the VAB and Launchpad. That is, in the VAB, I set it to False. Upon going to the Launchpad, it\u0027s True again. Yet, the Attribute state(Events[\u0022ClickRed\u0022].guiName) is maintained.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003Esing System.Collections;\u003C/p\u003E\u003Cp\u003Eusing UnityEngine;\u003C/p\u003E\u003Cp\u003Enamespace RenderTest\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public class RenderTest : PartModule\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E private bool blueVisible = true;\u003C/p\u003E\u003Cp\u003E private Component compBlue;\u003C/p\u003E\u003Cp\u003E public override void OnStart(PartModule.StartState state)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E compBlue = part.FindModelComponent\u0026lt;Component\u0026gt;(\u0022blue\u0022);\u003C/p\u003E\u003Cp\u003E Debug.Log(\u0022state = \u0022 \u002B state);\u003C/p\u003E\u003Cp\u003E Debug.Log(\u0022OnStart \u0022 \u002B blueVisible);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = blueVisible;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E [KSPEvent(active = true, guiActive = true, guiActiveEditor = true, guiName = \u0022Invisible\u0022)]\u003C/p\u003E\u003Cp\u003E public void ClickRed()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E blueVisible = ! blueVisible;\u003C/p\u003E\u003Cp\u003E Debug.Log(\u0022ClickRed: \u0022 \u002B blueVisible);\u003C/p\u003E\u003Cp\u003E Events[\u0022ClickRed\u0022].guiName = (blueVisible? \u0022Invisible\u0022 : \u0022Visible\u0022);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = blueVisible;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-28T16:37:36Z\u0022 title=\u002209/28/2014 04:37  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 28, 2014\u003C/time\u003E by Apollo13\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"m4v","CreatedById":67965,"CreatedDateTime":"2014-09-28T16:45:59Z","Content":"\n\u003Cp\u003Etry with\u003C/p\u003E\u003Cp\u003E[KSPField]\u003C/p\u003E\u003Cp\u003Epublic bool blueVisible = true;\u003C/p\u003E\u003Cp\u003Eor\u003C/p\u003E\u003Cp\u003E[KSPField(isPersistant=true)]\u003C/p\u003E\u003Cp\u003Epublic bool blueVisible = true;\u003C/p\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-28T16:59:45Z","Content":"\n\u003Cp\u003Ethanks. While awaiting an answer here, I tried [KSPField(guiAcitve = false)]. I\u0027ll try without the \u0022guiActive\u0022 and with the \u0022isPersistent\u0022\u003C/p\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-28T17:16:09Z","Content":"\n\u003Cp\u003E\u0022isPersistent\u0022 was the final piece of the puzzle. THANK YOU.\u003C/p\u003E\u003Cp\u003EFinal code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003Eusing System.Collections;\u003C/p\u003E\u003Cp\u003Eusing UnityEngine;\u003C/p\u003E\u003Cp\u003Enamespace RenderTest\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public class RenderTest : PartModule\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E [KSPField(isPersistant = true, guiActive = false)]\u003C/p\u003E\u003Cp\u003E private bool blueVisible = true;\u003C/p\u003E\u003Cp\u003E private Component compBlue;\u003C/p\u003E\u003Cp\u003E public override void OnStart(PartModule.StartState state)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E compBlue = part.FindModelComponent\u0026lt;Component\u0026gt;(\u0022blue\u0022);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = blueVisible;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E [KSPEvent(active = true, guiActive = false, guiActiveEditor = true, guiName = \u0022Invisible\u0022)]\u003C/p\u003E\u003Cp\u003E public void ClickRed()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E blueVisible = ! blueVisible;\u003C/p\u003E\u003Cp\u003E Events[\u0022ClickRed\u0022].guiName = (blueVisible? \u0022Invisible\u0022 : \u0022Visible\u0022);\u003C/p\u003E\u003Cp\u003E compBlue.renderer.enabled = blueVisible;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s strange that I needed to use a KSP extension. There should be a Unity method to maintain component states across scene changes. I\u0027l research this further.\u003C/p\u003E\u003Cp\u003E@\u003Cstrong\u003Em4v\u003C/strong\u003E: tried to give you a forum Rep point; no can do. So, my gratitude is all I can offer.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-28T17:19:31Z\u0022 title=\u002209/28/2014 05:19  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 28, 2014\u003C/time\u003E by Apollo13\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-09-28T17:50:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Apollo13\u0022 data-cite=\u0022Apollo13\u0022\u003E\u003Cdiv\u003EThere should be a Unity method to maintain component states across scene changes. I\u0027l research this further.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs far as I am aware, this does not work because it is not the same object in the Editor and Flight.\u003C/p\u003E\u003Cp\u003EAfter saving to the .craft file, everything in the Editor scene is deleted and destroyed and then once the flight scene loads it creates the vessel from the .craft file. \u003C/p\u003E\u003Cp\u003ETherefore anything you want to carry over has to save to the .craft file somehow and the easiest way to do that is save the value via the KSPField as you have done.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-28T17:52:29Z\u0022 title=\u002209/28/2014 05:52  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 28, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2014-09-29T10:05:31Z","Content":"\n\u003Cp\u003EDontDestroyOnLoad(gameObject); ?\u003C/p\u003E\u003Cp\u003EEdit : err, I did not read the thread properly. This won\u0027t work for a partmodule.\u003C/p\u003E\u003Cp\u003EIt\u0027s not a exactly a unity problem, it\u0027s the way KSP load and unload ship.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-29T11:39:48Z\u0022 title=\u002209/29/2014 11:39  AM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 29, 2014\u003C/time\u003E by sarbian\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-09-29T12:34:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EAs far as I am aware, this does not work because it is not the same object in the Editor and Flight.\u003Cp\u003E\u003Cstrong\u003EAfter saving to the .craft file, everything in the Editor scene is deleted and destroyed and then once the flight scene loads it creates the vessel from the .craft file.\u003C/strong\u003E \u003C/p\u003E\u003Cp\u003ETherefore anything you want to carry over has to save to the .craft file somehow and the easiest way to do that is save the value via the KSPField as you have done.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is good info which will be used in many mods to come. Thank you. Added a forum Rep point to you as well.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-09-29T13:49:36Z","Content":"\n\u003Cp\u003EThank you for the rep.\u003C/p\u003E\u003Cp\u003EI struggled through pretty much exactly the same question myself in order to get my action group mod to work between the editor and flight mode, you have to write the data to a partModule and let KSP handle the save/loading via persistence or you have to write your own data storage methods.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"m4v","CreatedById":67965,"CreatedDateTime":"2014-09-29T14:52:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Apollo13\u0022 data-cite=\u0022Apollo13\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E [KSPField(isPersistant = true, guiActive = false)]\u003C/p\u003E\u003Cp\u003E private bool blueVisible = true;\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKSPFields should be public, I remember that odd things can happen when they aren\u0027t.\u003C/p\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2014-10-06T22:35:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022m4v\u0022 data-cite=\u0022m4v\u0022\u003E\u003Cdiv\u003EKSPFields should be public, I remember that odd things can happen when they aren\u0027t.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m able to use private without problem. But, I\u0027ll keep that in mind if I run into quirky problems in the future. thanks\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-10-07T00:38:19Z","Content":"\n\u003Cp\u003EI have not actually tested this, but I believe the KSPFields not being set public is only an issue if an external source (such as another mod, or another instance of your mod on another part) tries to reference it via the partModule.GetField(\u0022YourField\u0022); method as to the best of my knowledge the partModule.Fields list is both public and automatically populated with all KSPFields on your partModule regardless of whether they are set to public or private.\u003C/p\u003E\u003Cp\u003ESo if an external source finds makes a call to the KSPField it knows exists because of its presence in the partModule.Fields list, but that KSPField is set to private, I expect an error of some sort would be thrown. I\u0027m not sure what type, but it would stop the code execution the same as a nullRef error as it is almost that anyway.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"}]}