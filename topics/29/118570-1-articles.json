{"TopicId":118570,"ForumId":29,"TopicTitle":"Launch Clamp Module override or virtual or?","CreatedByName":"TheReadPanda","CreatedById":142617,"CreatedDateTime":"2015-08-16T02:21:38Z","PageNum":1,"Articles":[{"CreatedByName":"TheReadPanda","CreatedById":142617,"CreatedDateTime":"2015-08-16T02:21:38Z","Content":"\n\u003Cp\u003ESo I was thinking about a way to make a flat colonization surface and started playing with the launch clamp module.\u003C/p\u003E\u003Cp\u003EThe problem is that the module assumes staging and decoupling no matter what you do. What I want is the stretch effect/ground attach but /not/ the staging or release or power.\u003C/p\u003E\u003Cp\u003ENow I\u0027ve tried all the obvious ways of making the module work and even looked at the API LaunchClamp class things.... and it seems that this functionality is embedded.\u003C/p\u003E\u003Cp\u003EI can\u0027t get at the code that shows the way to get the stretched out effect or surface to ground link... \u003C/p\u003E\u003Cp\u003EWhat I want are basically ground mounted pylons that can hold something, or perhaps one big pylon with a large disc on top that I can use with EPL to build things on other planets in level stable ways.\u003C/p\u003E\u003Cp\u003ESo my question is this, anyone know if there is a way to take that Launchclamp public void and perhaps just pull out the parts I need while /leaving out/ the parts I don\u0027t want, such as staging/release/power? I\u0027ve tried a few things and feel rusty in my C# already to be honest.\u003C/p\u003E\n"},{"CreatedByName":"TheReadPanda","CreatedById":142617,"CreatedDateTime":"2015-08-18T01:21:04Z","Content":"\n\u003Cp\u003ESo basically I\u0027ve got the following: First is my attempt to use/override the existing launchclamp by using a class that inherits from it but uses the same keywords to in effect \u0027hide\u0027 the parts I don\u0027t want, then the core launchclamp class as displayed in the assembly-CSharp reference file.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Enamespace pylons\u003Cbr\u003E{\u003Cbr\u003E    class Pylons: LaunchClamp\u003Cbr\u003E    {\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public new string anim_decouple_name;\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public new string releaseFxGroupName;\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public new string trf_animationRoot_name;\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public new string trf_towerPivot_name;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public int GetStageIndex()\u003Cbr\u003E        {\u003Cbr\u003E            return -1;\u003Cbr\u003E        }\u003Cbr\u003E        [KSPEvent(guiName = \u0022Release Clamp\u0022, guiActive = true)]\u003Cbr\u003E        public new void Release()\u003Cbr\u003E        { }\u003Cbr\u003E        [KSPAction(\u0022Release Clamp\u0022)]\u003Cbr\u003E        public new void ReleaseClamp(KSPActionParam param)\u003Cbr\u003E        { }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E--------------\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic class LaunchClamp : PartModule, IStageSeparator\u003Cbr\u003E{\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string anim_decouple_name;\u003Cbr\u003E    [KSPField(isPersistant = true)]\u003Cbr\u003E    public float height;\u003Cbr\u003E    public float initialHeight;\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string releaseFxGroupName;\u003Cbr\u003E    [KSPField(isPersistant = true)]\u003Cbr\u003E    public float scaleFactor;\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string trf_anchor_name;\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string trf_animationRoot_name;\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string trf_towerPivot_name;\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public string trf_towerStretch_name;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public LaunchClamp();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public int GetStageIndex(int fallback);\u003Cbr\u003E    public override void OnActive();\u003Cbr\u003E    public override void OnLoad(ConfigNode node);\u003Cbr\u003E    public void OnPutToGround(PartHeightQuery qr);\u003Cbr\u003E    public override void OnSave(ConfigNode node);\u003Cbr\u003E    public override void OnStart(PartModule.StartState state);\u003Cbr\u003E    public void OnVesselPack();\u003Cbr\u003E    public void OnVesselUnpack();\u003Cbr\u003E    [KSPEvent(guiName = \u0022Release Clamp\u0022, guiActive = true)]\u003Cbr\u003E    public void Release();\u003Cbr\u003E    [KSPAction(\u0022Release Clamp\u0022)]\u003Cbr\u003E    public void ReleaseClamp(KSPActionParam param);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow this disables the stretch effect and the \u0027attache to ground\u0027 effect which I wanted to keep while keeping the staging which I wanted to get rid of....\u003C/p\u003E\u003Cp\u003ESo anyone have any suggestions on what I\u0027m doing wrong here, or is this the wrong tree completely?\u003C/p\u003E\n"}]}