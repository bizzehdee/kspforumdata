{"TopicId":59696,"ForumId":29,"TopicTitle":"Get direction of part?","CreatedByName":"TwistedMexi","CreatedById":95468,"CreatedDateTime":"2014-01-12T00:48:28Z","PageNum":1,"Articles":[{"CreatedByName":"TwistedMexi","CreatedById":95468,"CreatedDateTime":"2014-01-12T00:48:28Z","Content":"\n\u003Cp\u003EI want to keep track of a hatch\u0027s rotation, so that I can spawn a part a few inches out from it. So that no matter how the part was rotated in VAB, and/or rotated while in flight, the new part always spawns in front of the hatch. I\u0027ve tried about 100 different methods and all of them break down if the ship rotates. \u003C/p\u003E\u003Cp\u003EIs there an easy way to achieve this?\u003C/p\u003E\n"},{"CreatedByName":"leoshnoire","CreatedById":100557,"CreatedDateTime":"2014-01-14T23:49:06Z","Content":"\n\u003Cp\u003EYou can get a part\u0027s up vector in worldspace by calling \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Epart.transform.up\u003C/span\u003E. You can use this along with the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Epart.transform.position\u003C/span\u003E to instantiate an object directly in front of your part at an arbitary distance. Also, if you need to keep track of rotation, you may want to copy \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Epart.transform.rotation\u003C/span\u003E an apply it to your new object as well. The \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Transform.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity docs \u003C/a\u003Eare particularly helpful for these kinds of operations, and it can help to familiarize yourself with the local/global coordinate systems and transforms. \u003C/p\u003E\u003Cp\u003EI hope that helps!\u003C/p\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2014-01-15T08:55:59Z","Content":"\n\u003Cp\u003EKeep i mind that parts in KSP have a silly interpretation of up and forwards relative to the normal way of doing things in Unity.\u003C/p\u003E\u003Cp\u003EUp (y) in KSP is the rocket nose, and forward (z) is the heads up direction in a plane cockpit. Normally forward/z is the direction of travel in Unity, and therefore any examples using LookAt for instance will be confusing.\u003C/p\u003E\u003Cp\u003EAlso remember to use transform.localPosition and not the global transform.position in all cases where you move stuff inside a part (and localRotation of course)\u003C/p\u003E\n"}]}