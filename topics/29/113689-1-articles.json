{"TopicId":113689,"ForumId":29,"TopicTitle":"Vessel Modules Discussion","CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-22T09:17:07Z","PageNum":1,"Articles":[{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-22T09:17:07Z","Content":"I haven\u0027t seen any proper discussion of this (very useful) new type of plugin that was introduced with KSP 1.0 and feel they need a bit more attention. They\u0027re not hugely different from other plugin types but the sheer lack of information slows things down so hopefully this will be helpful ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)\n\n**Compared the plugin types**\n\n- **Part Module**: One set of modules per part. Number of modules for a part is set in part configuration file. Active during initial loading (do try not to...), editor, and flight scenes. Save persistence of variables using the KSPField attribute with the option isPersistant set true\n- **KSP Addon**: Single instance. Only one instance of the plugin object running, limited to either a single scene or all scenes\n- **Scenario Module**: Single instance per save, used for storing/retrieving persistent data that isn\u0027t associated with a part (? I haven\u0027t used this one so I don\u0027t know much about it)\n- **Vessel Module**: One instance per physics enabled vessel object. Only active in the flight scene. No direct access to the persistence file.\n\n Vessel Modules are closer to the KSP Addon style plugin in my opinion, the main difference being that it\u0027s one instance per loaded vessel rather than per scene. Otherwise VesselModule also inherits directly from MonoBehaviour and has no behaviour of its own other than the startup mechanism.\n\n**Using Vessel Modules**\n\nInherit from VesselModule to have your class added to every vessel as it becomes physics enabled\n\n    class DerivedVesselModule : VesselModule\n\nClasses inheriting from VesselModule have access to all of [MonoBehaviour](http://docs.unity3d.com/Manual/ExecutionOrder.html)\u0027s functions (Awake, Start, OnDestroy, OnGUI, Update, FixedUpdate, etc.)\n\nGetting a vessel module object from a vessel:\n\n    vesselObject.GetComponents(); // a list of all classes inheriting from VesselModule attached to the vesselvesselObject.GetComponent(); // the instance of your derived class attached to the vessel\n\nGetting the vessel object from the VesselModule\n\n    vesselModule.GetComponent();\n\n**Tips and notes on using Vessel Modules**\n\n- Don\u0027t keep a reference to the vessel module in another class unless you can guarantee the other class will be destroyed first or will not attemt to call any function after the module is destroyed (ie. not part modules or KSP addons). Instead keep a [static dictionary](https://github.com/ferram4/Ferram-Aerospace-Research/blob/master/FerramAerospaceResearch/FARGUI/FARFlightGUI/FlightGUI.cs#L67) of the vessels and their associated vessel modules in the class deriving from VesselModule (credit to **ferram4**)\n- If your VesselModule is tracking the output of some part modules, you can tell when a part module separated from the original vessel because it will show up in a [new vessel module](https://github.com/Crzyrndm/SymmetricFlameout/blob/master/SymmetricFlameout/VesselFlowManager.cs#L32-L40). Use this to make sure the parts are attributed to the correct vessel instead of responding to various GameEvents or watching part.vessel for changes.\n- The first frame of Fixed Update when switching to the scene is called before the Flight scene setup completes. Leads to lots of nullrefs/NaN/other Kracken bait\n- ...?\n\n**Plugins using VesselModules**\n\nExamples are always helpful ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)\n\n- Modular Flight Integrator: [link](https://github.com/sarbian/ModularFlightIntegrator/blob/master/ModularFlightIntegrator.cs)\n- Ferram Aerospace Research: [link1](https://github.com/ferram4/Ferram-Aerospace-Research/blob/master/FerramAerospaceResearch/FARGUI/FARFlightGUI/FlightGUI.cs) [link2](https://github.com/ferram4/Ferram-Aerospace-Research/blob/master/FerramAerospaceResearch/FARAeroComponents/FARVesselAero.cs)\n- Pilot Assistant: [link](https://github.com/Crzyrndm/Pilot-Assistant/blob/master/PilotAssistant/FlightModules/AsstVesselModule.cs)\n- Symmetric Flameout: [link](https://github.com/Crzyrndm/SymmetricFlameout/blob/master/SymmetricFlameout/VesselFlowManager.cs)\n- Real Fuels (ullage branch): [link](https://github.com/NathanKell/ModularFuelSystem/blob/Ullage/Source/Ullage/UllageModule.cs)\n- Solver Engines: [link](https://github.com/KSP-RO/SolverEngines/blob/master/SolverEngines/FlightSys.cs)\n- Others...?\n\n**Edited \u003Ctime datetime=\u00222015-06-23T06:03:06Z\u0022 title=\u002206/23/2015 06:03  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 23, 2015\u003C/time\u003E by Crzyrndm**"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-06-22T15:45:04Z","Content":"A couple things to add to this:\n\nVesselModules inherit MonoBehavior so some of the familiar methods are available.\n\nKnown to work: Awake(), Start(), OnDestroy(), OnGUI(), Update(), FixedUpdate()\n\nKnown to NOT work: OnSave(), OnLoad()\n\nThis is the biggest limitation of VesselModule, there is no persistence with the .sfs file, you have to save/load data manually or hook into a PartModule to persist data.\n\nTo Use:\n\n    class DerivedVesselModule : VesselModule{//stuff here}\n\nKSP will do the rest and add a single instance of your DerivedVesselModule class to every vessel in the game when said vessel is loaded into the flight scene.\n\nD."},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-06-22T21:12:55Z","Content":"RealFuels uses it (in source) for ullage."},{"CreatedByName":"TaranisElsu","CreatedById":57742,"CreatedDateTime":"2015-06-26T21:32:21Z","Content":"\u003E \n\u003E there is no persistence with the .sfs file, you have to save/load data manually or hook into a PartModule to persist data.\n\nIf that is true, then this is much less useful to me ![:(](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif)"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-06-26T22:32:53Z","Content":"\u003E \n\u003E If that is true, then this is much less useful to me ![:(](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif)\n\nI know, I\u0027ve been trying to find a way around this myself.\n\nThe best idea I\u0027ve been able to come up with so far is to hook into the GameEvents.Load/Save methods to read/write data.\n\nI have not tested this, but as I understand it those events pass a configNode that ties into the save file, so if you added a master node \u0022MyModNode\u0022, then each vessel as a sub-node (probably with Vessel.ID), I think that would work?\n\nNote I have not tested this in any way, one of the issues I have already thought of is how to tell the difference between a newly spawned vessel on the pad, and a vessel that has just undocked? In both cases the vessel will not have an entry in the MyModNode confignode so I\u0027m not sure how to handle that yet.\n\nD.\n\nedit: I just had a thought on how to do this, I should have something to post tomorrow that would make this work.\n\n**Edited \u003Ctime datetime=\u00222015-06-26T23:12:50Z\u0022 title=\u002206/26/2015 11:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 26, 2015\u003C/time\u003E by Diazo**"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-06-28T02:56:42Z","Content":"Alright, my brainwave produced something.\n\n[Framework for Save/Load of data in a VesselModule.](https://forum.kerbalspaceprogram.com/threads/127023-1-0-4-VesselModule-class-data-persistence?p=2046583#post2046583)\n\nHopefully this works and we can go ahead with this.\n\nD."},{"CreatedByName":"AaronLS","CreatedById":142846,"CreatedDateTime":"2015-07-03T22:56:47Z","Content":"Nice list, I was trying to figure out what type of mod I needed to modify recovery values, and this list really helped. It\u0027d be nice to update with a short mention of how each is accomplished, i.e. inheriting from :PartModule or \u0022a KSP Addon is simply a class marked with the attribute [KSPAddon(...)] and inherits from MonoBehavior. Note even though this doesn\u0027t inherit from anything KSP specific, there\u0027s static classes such as GameEvents that expose KSP specific hooks into the game.\n\nThis is a good example of a KSPAddon: [https://github.com/magico13/StageRecovery/blob/master/StageRecovery/StageRecovery.cs](https://github.com/magico13/StageRecovery/blob/master/StageRecovery/StageRecovery.cs)\n\nNote wiring functions up to events so that the Addon can hook and have an opportunity to modify game behaviors:\n\n            //Fired when the mod loads each scene        public void Start()        {            if (Settings.instance != null)                Settings.instance.gui.hideAll();            //If we\u0027re in the MainMenu, don\u0027t do anything            if (forbiddenScenes.Contains(HighLogic.LoadedScene))                return;            //If the event hasn\u0027t been added yet, run this code (adds the event and the stock button)            if (!eventAdded)            {                GameEvents.onGameSceneLoadRequested.Add(GameSceneLoadEvent);                //Add the VesselDestroyEvent to the listeners                GameEvents.onVesselDestroy.Add(VesselDestroyEvent);                //Add the event that listens for unloads (for removing launch clamps)                GameEvents.onVesselGoOnRails.Add(VesselUnloadEvent);                //GameEvents..Add(DecoupleEvent);                //If Blizzy\u0027s toolbar isn\u0027t available, use the stock one              //  if (!ToolbarManager.ToolbarAvailable)                GameEvents.onGUIApplicationLauncherReady.Add(Settings.instance.gui.OnGUIAppLauncherReady);                //Set the eventAdded flag to true so this code doesn\u0027t run again                eventAdded = true;            }        ....\n\nGameEvents are a bit funky data structure for exposing events. **Here\u0027s how you can determine what types you need in your event handler.**\n\nType this in Visual Studio:\n\n    GameEvents.onVesselRecoveryProcessing.Add(\n\nAnd then mouse over .Add( or hit Ctrl\u002BK\u002BP to popup parameter info, you should see the parameter type of \n\n    EventData.OnEvent\n\nIf you\u0027re familiar with Func\u003Cx,y,z\u003E generic delegates, this is essentially the same thing.\u003C/x,y,z\u003E\n\nThe above types in angle brackets \u0060\u003Cprotovessel,missionrecoverydialog,float\u003E\u0060 tells you that you need to declare a function with those three parameters:\u003C/protovessel,missionrecoverydialog,float\u003E\n\n          void OnVesselRecoveryProcessing(ProtoVessel vessel, MissionRecoveryDialog recoveryDialog, float unknown)      {      }\n\nThe parameter types are self explanitory sometimes, but a primitive type like float is a bit of a mystery. If the documentation doesn\u0027t reveal anything useful, then probably just using \u0060print(\u0060 to print to Debug window values as the event is triggered is best way to try and guess the meaning of the parameter.\n\n[https://anatid.github.io/XML-Documentation-for-the-KSP-API/class_game_events.html#a17641c8a2f9a01e61eec763737eb7b89](https://anatid.github.io/XML-Documentation-for-the-KSP-API/class_game_events.html#a17641c8a2f9a01e61eec763737eb7b89)\n\nOnce you\u0027ve declared your function, then pass the function name to .Add. When you reference a function by name without parenthesis then you are passing it as a delegate instead of executing it. If you are familiar with function pointers in other languages, this is a similar concept.\n\n**RIGHT:**\n\n    GameEvents.onVesselRecoveryProcessing.Add( OnVesselRecoveryProcessing );\n\n**WRONG:**\n\n    GameEvents.onVesselRecoveryProcessing.Add( OnVesselRecoveryProcessing() );\n\n**Edited \u003Ctime datetime=\u00222015-07-03T23:02:55Z\u0022 title=\u002207/03/2015 11:02  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 3, 2015\u003C/time\u003E by AaronLS**"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-07-03T23:28:50Z","Content":"You may not have noticed but this was specifically about VesselModule type plugins, for which there was no information unless you happened to stumble upon them in one of about 4 plugins and do your own testing to ascertain the behaviour. The only reason the other plugin types are mentioned is as a comparison, there are hundreds of examples of PartModules and MonoBehaviour/KSPAddon out there. If you look at all you can\u0027t miss them.\n\ntl;dr\n\nNice helpful post, but the context is somewhat lacking..."},{"CreatedByName":"AaronLS","CreatedById":142846,"CreatedDateTime":"2015-07-03T23:55:00Z","Content":"Yes, I did notice that, but I wanted to mention that more than anything that list was the most valuable. Yes, there may be many example of each, but if you aren\u0027t even aware of the different mod types they are very hard to find. Any google of \u0022ksp add on\u0022 turns up pages listing part modules. This is the first time I\u0027ve seen the different types all listed together and distinguished as to what their purpose is. I had seen this post when you first posted it, and today I was wanting to mod the recovery process and was asking myself \u0022Is this even possible? Is there a way to mod the entire game? I\u0027m sure I saw someone mention that somewhere.\u0022 I actually thought I remembered you refer to it as an \u0022Add On\u0022 but every google of \u0022ksp add on\u0022 turns up just generic pages dealing with any type of KSP mod, which are mostly PartModules. The entire first page of results are just pages that list mods. I began to question whether I was mistaken in what I had remembered, but I kept hunting around and googling and found this post again.\n\nMany of the getting started examples and tutorials jump right into things like \u0022Let\u0027s make an engine\u0022 that is so specific that I found them of virtually no use. I got tired of trudging through that and I\u0027ve been learning more from looking through code on github than anything else.\n\nI just thought I\u0027d build upon that and expand slightly deeper to emphasize exactly what a KSP Add on is. I realize that wasn\u0027t the original purpose of the post. But the list was the only comprehensive list I\u0027ve seen and thought I\u0027d build upon that with just a little bit more concrete information. I find that kind of detailed information is helpful in selecting what approach to take in anything programming related. Conceptual descriptions help a little bit, but seeing just a couple examples helps make it more concrete and that decision process has alot more to go on."},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2020-08-11T15:13:12Z","Content":"\u003E \n\u003E \n\u003E On 6/22/2015 at 5:45 PM, Diazo said:\n\u003E \n\u003E \n\u003E Known to NOT work: OnSave(), OnLoad()\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E This is the biggest limitation of VesselModule, there is no persistence with the .sfs file, you have to save/load data manually or hook into a PartModule to persist data.\n\u003E \n\nWhat exavtly do you mean by \u0022Known to NOT work\u0022?  OnStart and OnLoad are called durring runtime and [KSPField(isPersistant = true)] seems to save variables (KSP 1.8.1)\n\nPerhaps they fixed it?\n\n**Edited \u003Ctime datetime=\u00222020-08-11T15:34:11Z\u0022 title=\u002208/11/2020 03:34  PM\u0022 data-short=\u00223 yr\u0022\u003EAugust 11, 2020\u003C/time\u003E by FreeThinker**"}]}