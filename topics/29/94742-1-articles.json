{"TopicId":94742,"ForumId":29,"TopicTitle":"Coroutine help?","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T04:03:31Z","PageNum":1,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T04:03:31Z","Content":"\n\u003Cp\u003EI really don\u0027t know anything about coroutines. Never used them before. But I am trying to now, and having problems. I wrote this code based on the Unity docs. The coroutine starts, but only executes once, whereas it is supposed to continue indefinitely until told to stop.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSPPluginFramework;\u003Cbr\u003Eusing TestFlightAPI;\u003Cbr\u003E\u003Cbr\u003Enamespace TestFlight\u003Cbr\u003E{\u003Cbr\u003E    public class TestFlightFailure_FuelLeak : TestFlightFailureBase\u003Cbr\u003E    {\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Triggers the failure controlled by the failure module\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        public override void DoFailure()\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022TestFlightFailure_FuelLeak: Failing part\u0022);\u003Cbr\u003E            this.part.RequestResource(\u0022LiquidFuel\u0022, 50);\u003Cbr\u003E            StartCoroutine(\u0022LeakFuel\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        internal IEnumerator LeakFuel()\u003Cbr\u003E        {\u003Cbr\u003E            this.part.RequestResource(\u0022LiquidFuel\u0022, 5);\u003Cbr\u003E            yield return new WaitForSeconds(1f);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Asks the repair module if all condtions have been met for the player to attempt repair of the failure.  Here the module can verify things such as the conditions (landed, eva, splashed), parts requirements, etc\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if this instance can attempt repair; otherwise, \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;.\u0026lt;/returns\u0026gt;\u003Cbr\u003E        public override bool CanAttemptRepair()\u003Cbr\u003E        {\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Trigger a repair ATTEMPT of the module\u0027s failure.  It is the module\u0027s responsability to take care of any consumable resources, data transmission, etc required to perform the repair\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;Should return true if the failure was repaired, false otherwise\u0026lt;/returns\u0026gt;\u003Cbr\u003E        public override bool AttemptRepair()\u003Cbr\u003E        {\u003Cbr\u003E            StopCoroutine(\u0022LeakFuel\u0022);\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T04:10:43Z","Content":"\n\u003Cp\u003EOk the answer is I am just an idiot. \u003C/p\u003E\u003Cp\u003ECoroutines don\u0027t do any special magic to keep them looping. I thought they did.\u003C/p\u003E\n"}]}