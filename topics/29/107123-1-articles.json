{"TopicId":107123,"ForumId":29,"TopicTitle":"Is it possible to edit the right-click action menu?","CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-03T10:16:03Z","PageNum":1,"Articles":[{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-03T10:16:03Z","Content":"As the title says, I was wondering whether it is possible to edit the right-click action menu of parts when in the VAB and in-flight.\n\nThanks\n\nEDIT: To clarify, I want to edit one of the built-in options in the right-click menu.\n\n**Edited \u003Ctime datetime=\u00222015-05-04T16:10:34Z\u0022 title=\u002205/04/2015 04:10  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 4, 2015\u003C/time\u003E by Zarpar**\n  \nTo clarify question"},{"CreatedByName":"Kanddak","CreatedById":55380,"CreatedDateTime":"2015-05-03T13:58:39Z","Content":"Take a look at [https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs](https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs) ; that\u0027s an example of a partmodule that defines two events for the part\u0027s action menu, where each event deactivates itself and activates the other event.\n\nI\u0027m new at this myself so I don\u0027t know if there\u0027s a good way to activate and deactivate events belonging to other partmodules, so if that\u0027s what you\u0027re hoping to do, hopefully someone more experienced than me will come tell us about it."},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-04T16:09:40Z","Content":"\u003E \n\u003E Take a look at [https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs](https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs) ; that\u0027s an example of a partmodule that defines two events for the part\u0027s action menu, where each event deactivates itself and activates the other event.\n\u003E I\u0027m new at this myself so I don\u0027t know if there\u0027s a good way to activate and deactivate events belonging to other partmodules, so if that\u0027s what you\u0027re hoping to do, hopefully someone more experienced than me will come tell us about it.\n\nThis examples appears to add something to the right-click menu, whereas I want to edit a built-in option. I\u0027ll clarify it in the OP."},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-04T17:25:45Z","Content":"Edit in what way? Basically yes (the prefabs are exposed), but working with EzGUI by hand is tedious. If you had some idea of what you wanted to do it would be helpful"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-05T06:50:12Z","Content":"\u003E \n\u003E Edit in what way? Basically yes (the prefabs are exposed), but working with EzGUI by hand is tedious. If you had some idea of what you wanted to do it would be helpful\n\nI was essentially trying to research whether [this](https://forum.kerbalspaceprogram.com/threads/118636-Put-Numbers-into-the-VAB-sliders-for-easier-and-faster-tweaking-of-thrust) was possible."},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-05T17:22:15Z","Content":"\u003E \n\u003E I was essentially trying to research whether [this](https://forum.kerbalspaceprogram.com/threads/118636-Put-Numbers-into-the-VAB-sliders-for-easier-and-faster-tweaking-of-thrust) was possible.\n\nIt\u0027s a good suggestion. I spent about 20 minutes poking at it and came up with this:\n\n    [KSPAddon(KSPAddon.Startup.EditorAny, true)]public class CtrlClickEditNumber : MonoBehaviour{    private const string ControlLockId = \u0022InputValueDialogLock\u0022;    private UIPartActionFloatRange paFloatRange;    private void Start()    {        DontDestroyOnLoad(this);        paFloatRange =            UIPartActionController.Instance.fieldPrefabs.FirstOrDefault(                fi =\u003E fi.GetType() == typeof(UIPartActionFloatRange)) as UIPartActionFloatRange;        if (paFloatRange == null)        {            Debug.LogError(\u0022Failed to find a UI prefab. Post a bug report\u0022);            return;        }        paFloatRange.gameObject.PrintComponents(new DebugLog(\u0022FloatRange\u0022));        paFloatRange.gameObject.AddComponent();    }}class ControlClickEntersEditMode : MonoBehaviour{    private const string ControlLockId = \u0022FloatSliderEditModeLock\u0022;    private const float ColorChangePerSecond = 2f;    private static Color FlashColor = new Color(255f, 255f, 255f);    private static char[] ValidCharacters = {\u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027, \u0027-\u0027, \u0027,\u0027, \u0027.\u0027};    private Material _backgroundMaterial;    private Color _originalBackgroundColor;    private Gradient _gradient;    private UIPartActionFieldItem _fieldItem;    private UIProgressSlider _slider;    private UIButton _button;    private SpriteText _ourSpriteText;    private SpriteText _originalSpriteText;    private bool _editMode = false;    private string _inputString = string.Empty;    private float _initialValue = 0f;    private void Start()    {        print(\u0022ControlClickEntersEditMode instantiated\u0022);        if (!LookupComponents())        {            print(\u0022ControlClickEntersEditMode: failed to find a dependency\u0022);            Destroy(this);            return;        }        // the game sets the original sprite text every frame, overwriting any changes. Instead of         // playing LateUpdate shenanigans and fighting it, clone that component and then we can        // activate/deactive our custom text as needed        var clone = Instantiate(_originalSpriteText.gameObject, _originalSpriteText.transform.position, _originalSpriteText.transform.rotation) as GameObject;        _ourSpriteText = clone.GetComponent();        _ourSpriteText.Text = \u0022\u0022;        clone.SetActive(false);        clone.transform.parent = _originalSpriteText.transform.parent;        clone.layer = _originalSpriteText.gameObject.layer;        _gradient = new Gradient();        _gradient.SetKeys(            new[]            {                new GradientColorKey(_originalBackgroundColor, 0f),                new GradientColorKey(FlashColor, 1f)            },            new[] {new GradientAlphaKey(.5f, 0f), new GradientAlphaKey(.9f, 1f)});        _button.AddValueChangedDelegate(OnSliderClick);        _initialValue = _slider.Value;    }    private bool LookupComponents()    {        _fieldItem = gameObject.GetComponent();        if (_fieldItem == null)        {            print(\u0022ERROR: Couldn\u0027t find UIPartActionFieldItem on \u0022 \u002B gameObject.name);            return false;        }        _slider = GetComponentsInChildren(true).FirstOrDefault();        if (_slider == null)        {            print(\u0022ERROR: Couldn\u0027t find UIProgressSlider\u0022);            return false;        }        _slider.AddValueChangedDelegate(OnSliderClick);        _button = GetComponentsInChildren(true).FirstOrDefault();        if (_button == null)        {            print(\u0022ERROR: Couldn\u0027t find UIButton\u0022);            return false;        }        var background = transform.Find(\u0022Background\u0022);        if (background == null)        {            print(\u0022ERROR: Couldn\u0027t find Background transform\u0022);            return false;        }        _backgroundMaterial = background.renderer.material; // this causes the material to be clone        _originalBackgroundColor = _backgroundMaterial.color;        // the game seems to set the text value of this every frame. Instead of fighting with        // it or playing LateUpdate shenanigans, we\u0027ll just clone it and hide the original        // when needed        _originalSpriteText = GetComponentsInChildren(true).FirstOrDefault(st =\u003E st.name == \u0022amnt\u0022);        if (_originalSpriteText == null)        {            print(\u0022ERROR: couldn\u0027t find SpriteText\u0022);            return false;        }        return true;    }    private void OnDestroy()    {        print(\u0022ControlClickEntersEditMode destroying\u0022);        Destroy(_backgroundMaterial);        _slider.RemoveValueChangedDelegate(OnSliderClick);        _button.RemoveValueChangedDelegate(OnSliderClick);    }    private void OnSliderClick(IUIObject obj)    {        if (Input.GetKey(KeyCode.LeftControl))            SetEditMode(true);    }    private void SetFieldValue(float value)    {        _fieldItem.Field.SetValue(value, _fieldItem.Field.host);        _ourSpriteText.Text = value.ToString(new NumberFormatInfo());    }    private void Update()    {        if (!_editMode) return;        if (Input.GetKeyDown(KeyCode.Escape))        {            _inputString = _initialValue.ToString(\u0022F2\u0022);            SetEditMode(false);        }        else if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))        {            if (!IsNumeric(_inputString))            {                Debug.LogError(\u0022Couldn\u0027t set slider value because \u0027\u0022 \u002B _inputString \u002B \u0022\u0027 is nonnumeric\u0022);                SetFieldValue(_initialValue);            }            else SetFieldValue(float.Parse(_inputString, NumberStyles.Float));            SetEditMode(false);        } else if (Input.anyKeyDown)        {            if (ValidCharacters.Contains(Event.current.character))            {                _inputString \u002B= Event.current.character;            } else if (Input.GetKeyDown(KeyCode.Backspace))            {                if (_inputString.Length \u003E 0) _inputString = _inputString.Substring(0, _inputString.Length - 1);            }            _ourSpriteText.Text = _inputString;        }    }    private bool IsNumeric(string str)    {        float result;        return float.TryParse(str, NumberStyles.Float, new NumberFormatInfo(), out result);    }    private void SetEditMode(bool tf)    {        if (tf)        {            if (!_editMode)            {                _editMode = true;                _originalSpriteText.gameObject.SetActive(false);                _ourSpriteText.gameObject.SetActive(true);                _inputString = _fieldItem.Field.GetValue(_fieldItem.Field.host).ToString(\u0022F2\u0022);                InputLockManager.SetControlLock(ControlTypes.All, ControlLockId);                StartCoroutine(\u0022FlashySlider\u0022);            }        }        else        {            _editMode = false;            _originalSpriteText.gameObject.SetActive(true);            _ourSpriteText.gameObject.SetActive(false);            InputLockManager.RemoveControlLock(ControlLockId);        }    }    private IEnumerator FlashySlider()    {        float delta = 0f;        while (_editMode)        {            delta = UtilMath.WrapAround(delta \u002B Time.deltaTime*ColorChangePerSecond, 0f, 2f);            _backgroundMaterial.color = _gradient.Evaluate(delta \u003C 1f ? delta : 2f - delta);            yield return 0;        }        _backgroundMaterial.color = _originalBackgroundColor;    }}\n\nIt needs polish and support for the other slider types but it\u0027s a working prototype to get you started (Ctrl\u002Bclick on a slider to enter edit mode, escape cancels, enter confirms). I tested it on the engine thrust limit slider"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-06T20:59:51Z","Content":"Wow this is detailed, thanks. You ok with me building on this for a full mod, with credit to you for the prototype?\n\nEDIT: Also, what is a UIPartActionFloatRange?"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-06T21:36:38Z","Content":"\u003E \n\u003E Wow this is detailed, thanks. You ok with me building on this for a full mod, with credit to you for the prototype?\n\nYes absolutely.\n\nUIPartActionFloatRange is a component that contains the logic for the slider used for KSPFields marked with the UI\\_FloatRange attribute. When a UIPartActionWindow is created, each PartModule field is checked for attributes that determine whether or not and how that field gets displayed in the part popup menu; in this case, we\u0027re modifying the prefab that will be used for PartModule fields with the UI\\_FloatRange attribute.\n\n**Edited \u003Ctime datetime=\u00222015-05-06T21:43:05Z\u0022 title=\u002205/06/2015 09:43  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 6, 2015\u003C/time\u003E by xEvilReeperx**"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-07T17:06:33Z","Content":"\u003E \n\u003E Yes absolutely.\n\u003E UIPartActionFloatRange is a component that contains the logic for the slider used for KSPFields marked with the UI\\_FloatRange attribute. When a UIPartActionWindow is created, each PartModule field is checked for attributes that determine whether or not and how that field gets displayed in the part popup menu; in this case, we\u0027re modifying the prefab that will be used for PartModule fields with the UI\\_FloatRange attribute.\n\nI can\u0027t appear to get this code to work. I\u0027ve got all the right imports added and compiled it to a dll placed in GameData/PluginName but keep getting the error \n\n\u003E \n\u003E AssemblyLoader: Exception loading \u0027PluginName\u0027: System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded.\n\nEDIT: Fixed now, I was compiling for .NET 4.0 instead of 3.5.\n\n**Edited \u003Ctime datetime=\u00222015-05-07T17:12:43Z\u0022 title=\u002205/07/2015 05:12  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 7, 2015\u003C/time\u003E by Zarpar**"}]}