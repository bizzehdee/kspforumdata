{"TopicId":78350,"ForumId":29,"TopicTitle":"Unable to read part.cfg data when part is added to vessel","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T01:10:44Z","PageNum":1,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T01:10:44Z","Content":"\n\u003Cp\u003EHey everyone,\u003C/p\u003E\u003Cp\u003EThis is driving me absolutely crazy! I was going back and forth on this in the helper thread, but decided I was spamming that too much so i\u0027m starting a thread on it.\u003C/p\u003E\u003Cp\u003EThis is the relevant part of my part\u0027s config file:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    MODULE\u003Cbr\u003E    {\u003Cbr\u003E\tname = FlightDataRecorder\u003Cbr\u003E        testValue = 42.1\u003Cbr\u003E        BODY\u003Cbr\u003E        {\u003Cbr\u003E            name = kerbin\u003Cbr\u003E            amount = 1.0\u003Cbr\u003E        }\u003Cbr\u003E        SITUATION\u003Cbr\u003E        {\u003Cbr\u003E            name = landed\u003Cbr\u003E            value = 0.0\u003Cbr\u003E        }\u003Cbr\u003E        SITUATION\u003Cbr\u003E        {\u003Cbr\u003E            name = flying\u003Cbr\u003E            value = 1.0\u003Cbr\u003E        }\u003Cbr\u003E        SITUATION\u003Cbr\u003E        {\u003Cbr\u003E            name = prelaunch\u003Cbr\u003E            value = 0.0\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBasically through my debugs I can see that the CFG data \u003Cstrong\u003Eis\u003C/strong\u003E visible during the OnLoad() method at game start when the game is loading up and parsing all the parts. However when I go to make a vessel and add my part to the vessel, the OnLoad() being called in the FLIGHT scene \u003Cstrong\u003Edoes not\u003C/strong\u003E contain the data from the part.cfg.\u003C/p\u003E\u003Cp\u003EI\u0027ve been looking at other author\u0027s code, and I as best as I can tell i\u0027m doing the same thing they are (I looked at @HoneyFox EngineIgnitor mod and @NathanKell ModuleFuels mod), but it doesn\u0027t work for me. Every single time my OnLoad() is called when putting my part on a vessel, the data is gone.\u003C/p\u003E\u003Cp\u003EHere is all my relevant code.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EIConfigNode\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    [Serializable]\u003Cbr\u003E    public class FlightDataRecorderBody : IConfigNode\u003Cbr\u003E    {\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        public string name;\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        public float amount;\u003Cbr\u003E\u003Cbr\u003E        public float currentAmount;\u003Cbr\u003E\u003Cbr\u003E        public FlightDataRecorderBody()\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Load(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            name = node.GetValue(\u0022name\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (node.HasValue(\u0022amount\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                amount = Mathf.Max(0.0f, float.Parse(node.GetValue(\u0022amount\u0022)));\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Save(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            node.AddValue(\u0022name\u0022, name);\u003Cbr\u003E            node.AddValue(\u0022amount\u0022, Mathf.Max(0.0f, amount));\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override string ToString()\u003Cbr\u003E        {\u003Cbr\u003E            return name \u002B \u0022(\u0022 \u002B amount.ToString(\u0022F3\u0022) \u002B \u0022)\u0022;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static FlightDataRecorderBody FromString(string str)\u003Cbr\u003E        {\u003Cbr\u003E            FlightDataRecorderBody bodyConfig = new FlightDataRecorderBody();\u003Cbr\u003E            int indexL = str.LastIndexOf(\u0027(\u0027); int indexR = str.LastIndexOf(\u0027)\u0027);\u003Cbr\u003E            bodyConfig.name = str.Substring(0, indexL);\u003Cbr\u003E            bodyConfig.amount = float.Parse(str.Substring(indexL \u002B 1, indexR - indexL - 1));\u003Cbr\u003E            return bodyConfig;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EPartModule\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    public class FlightDataRecorder : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        private bool isRecordingFlightData = false;\u003Cbr\u003E        public List\u0026lt;FlightDataRecorderBody\u0026gt; bodyConfigs;\u003Cbr\u003E\u003Cbr\u003E        public override void OnAwake()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnAwake();\u003Cbr\u003E\u003Cbr\u003E            if (bodyConfigs == null)\u003Cbr\u003E                bodyConfigs = new List\u0026lt;FlightDataRecorderBody\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E            print(\u0022FlightDataRecorder: OnLoad\u0022);\u003Cbr\u003E            print(\u0022FlightDataRecorder: \u0022 \u002B node.ToString());\u003Cbr\u003E            if (bodyConfigs == null)\u003Cbr\u003E                bodyConfigs = new List\u0026lt;FlightDataRecorderBody\u0026gt;();\u003Cbr\u003E            foreach (ConfigNode bodyConfig in node.GetNodes(\u0022BODY\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022LOADING: \u0022);\u003Cbr\u003E                print(bodyConfig.ToString());\u003Cbr\u003E                FlightDataRecorderBody flightBody = new FlightDataRecorderBody();\u003Cbr\u003E                flightBody.Load(bodyConfig);\u003Cbr\u003E                bodyConfigs.Add(flightBody);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022FlightDataRecorder: onStart()\u0022);\u003Cbr\u003E            print(\u0022FlightDataRecorder: State = \u0022 \u002B state);\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022FlightDataRecorder: onUpdate\u0022);\u003Cbr\u003E            foreach (FlightDataRecorderBody body in bodyConfigs)\u003Cbr\u003E            {\u003Cbr\u003E                print(body.ToString());\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Update()\u003Cbr\u003E        {\u003Cbr\u003E            //print(\u0022FlightDataRecorder: Update\u0022);\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022FlightDataRecorder: onSave()\u0022);\u003Cbr\u003E            foreach (FlightDataRecorderBody bodyConfig in bodyConfigs)\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022SAVING:\u0022);\u003Cbr\u003E                print(bodyConfig.ToString());\u003Cbr\u003E                bodyConfig.Save(node.AddNode(\u0022BODY\u0022));\u003Cbr\u003E            }\u003Cbr\u003E            base.OnSave(node);\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHelp me internets, you\u0027re my only hope! (Seriously i\u0027m going absolutely batty here!)\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-07-19T01:33:30Z","Content":"\n\u003Cp\u003EThis would be because the only time the original part.cfg is passed to OnLoad is when the part prefab is created.\u003C/p\u003E\u003Cp\u003EEvery other time a part is instantiated (and OnLoad for its modules is called), it\u0027s reading data from persistence to modify the part from the prefab\u0027s settings (i.e. loading a craft, or loading a vessel in flight from sfs--they are the same format because they\u0027re doing the same thing, storing the only bits of data that change from the part.cfg).\u003C/p\u003E\u003Cp\u003EIf you really, really, really need to see that data again in OnLoad, flag it as persistent=true. That will make OnSave save it to .craft/.sfs, which means it will be there for OnLoad.\u003C/p\u003E\u003Cp\u003ETo go back a bit: when you load a craft (in VAB/SPH, in flight, whatever) the part objects (and their modules) aren\u0027t created de novo. Instead, only one \u0022prefab\u0022 of each object is created at KSP start: one prefab part per PART, with prefab modules per MODULE. Then, when the game actually wants to put a part \u0022into action\u0022 (loading a vessel into flight [off rails], loading a vessel in the editor) it\u0027s cloned from the prefab, and any \u0022persistent\u0022 settings are loaded to override the prefab setting. Conversely, whenever a part is saved to ConfigNode (vessel goes on rails, game is saved, craft is saved in editor, etc) then only persistent settings are written to ConfigNode; any members of your module (or any other module) that are not persistent=true KSPFields will not get saved, and will therefore return to their prefab values the next time the object is cloned.\u003C/p\u003E\u003Cp\u003EWhat makes this harder, of course, is that KSP \u003Cem\u003Eisn\u0027t very good\u003C/em\u003E about cloning data from the prefab into the instantiated partmodule. So sometimes you need to use workarounds.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T01:40:00Z","Content":"\n\u003Cp\u003EBut how can I make a complex datatype (In my case public List\u0026lt;FlightDataRecorderBody\u0026gt; bodyConfigs) persist? It isn\u0027t a simple datatype that I can just make a KSPField.\u003C/p\u003E\u003Cp\u003EI can get it to work with simple datatypes like strings and floats, but not with whole confignodes.\u003C/p\u003E\u003Cp\u003EWhat further confuses me is that this case is almost a direct plagiarism from HoneyFox\u0027s code which obviously works. And as best I can tell i\u0027m pretty much doing the same thing you are doing in ModularFuels, though less complicated.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T02:09:14Z","Content":"\n\u003Cp\u003EOk well looks like i\u0027ve managed to hack my way around it, but the odd part is I don\u0027t see how what I did even works.\u003C/p\u003E\u003Cp\u003EI\u0027ll post details after dinner. But basically the List I was storing the IConfigNode class instances in, was NOT persisting between the intial Load and the instance. But for some reason, if I store those as packed strings in another list, those DO persist, even though i\u0027m not making them a KSPField. WTF.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-07-19T02:30:42Z","Content":"\n\u003Cp\u003EThis is because of the way KSP is written: IIRC apparently unless your class\u0027s data types are explicitly whitelisted (like, say, strings) they won\u0027t be serialized.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T12:59:00Z","Content":"\n\u003Cp\u003EOk that makes sense in an odd way, but what confuses me is that I didn\u0027t tell them to be serialized. I didn\u0027t make the strings into a KSPField, so something must happen automatically to properties behind the scenes that are \u0022whitelisted\u0022. Very confusing!\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-19T13:05:38Z","Content":"\n\u003Cp\u003ESo for future posterity in case anyone else runs into the same problem, i\u0027m not going to be one of those jerks who posts a problem then says i\u0027ve solved it without posting the solution \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EBelow is the full final code that makes this work. Basically though, the solution was to add a new property to my PartModule class that is a List of strings. Then in OnLoad() when I load in my ConfigNode, I also pack the data into strings and add them to that list. Then later in OnStart() I recreated my ConfigNodes from those strings, since the strings seem to survive through where the ConfigNodes wouldnt.\u003C/p\u003E\u003Cp\u003EThe IConfigNode class doesn\u0027t change:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    [Serializable]\u003Cbr\u003E    public class FlightDataRecorderBody : IConfigNode\u003Cbr\u003E    {\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        public string name;\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        public float amount;\u003Cbr\u003E\u003Cbr\u003E        public float currentAmount;\u003Cbr\u003E\u003Cbr\u003E        public FlightDataRecorderBody()\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Load(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            name = node.GetValue(\u0022name\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (node.HasValue(\u0022amount\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                amount = Mathf.Max(0.0f, float.Parse(node.GetValue(\u0022amount\u0022)));\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Save(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            node.AddValue(\u0022name\u0022, name);\u003Cbr\u003E            node.AddValue(\u0022amount\u0022, Mathf.Max(0.0f, amount));\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override string ToString()\u003Cbr\u003E        {\u003Cbr\u003E            return name \u002B \u0022(\u0022 \u002B amount.ToString(\u0022F3\u0022) \u002B \u0022)\u0022;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static FlightDataRecorderBody FromString(string str)\u003Cbr\u003E        {\u003Cbr\u003E            FlightDataRecorderBody bodyConfig = new FlightDataRecorderBody();\u003Cbr\u003E            int indexL = str.LastIndexOf(\u0027(\u0027); int indexR = str.LastIndexOf(\u0027)\u0027);\u003Cbr\u003E            bodyConfig.name = str.Substring(0, indexL);\u003Cbr\u003E            bodyConfig.amount = float.Parse(str.Substring(indexL \u002B 1, indexR - indexL - 1));\u003Cbr\u003E            return bodyConfig;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd here is the updated PartModule class (note that I did restructure slightly from last night, moving some init code into its own method to keep it DRY):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    public class FlightDataRecorder : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        private bool isRecordingFlightData = false;\u003Cbr\u003E\u003Cbr\u003E        public List\u0026lt;string\u0026gt; bodyConfigsStr;\u003Cbr\u003E        public List\u0026lt;FlightDataRecorderBody\u0026gt; bodyConfigs;\u003Cbr\u003E\u003Cbr\u003E        public void initStorage()\u003Cbr\u003E        {\u003Cbr\u003E            if (bodyConfigs == null)\u003Cbr\u003E                bodyConfigs = new List\u0026lt;FlightDataRecorderBody\u0026gt;();\u003Cbr\u003E            if (bodyConfigsStr == null)\u003Cbr\u003E                bodyConfigsStr = new List\u0026lt;string\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnAwake()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnAwake();\u003Cbr\u003E            initStorage();\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E            print(\u0022FlightDataRecorder: OnLoad\u0022);\u003Cbr\u003E            print(\u0022FlightDataRecorder: \u0022 \u002B node.ToString());\u003Cbr\u003E            initStorage();\u003Cbr\u003E            foreach (ConfigNode bodyConfig in node.GetNodes(\u0022BODY\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022LOADING: \u0022);\u003Cbr\u003E                print(bodyConfig.ToString());\u003Cbr\u003E                FlightDataRecorderBody flightBody = new FlightDataRecorderBody();\u003Cbr\u003E                flightBody.Load(bodyConfig);\u003Cbr\u003E                bodyConfigs.Add(flightBody);\u003Cbr\u003E                bodyConfigsStr.Add(flightBody.ToString());\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022FlightDataRecorder: onStart()\u0022);\u003Cbr\u003E            print(\u0022FlightDataRecorder: State = \u0022 \u002B state);\u003Cbr\u003E            bodyConfigs.Clear();\u003Cbr\u003E            situationConfigs.Clear();\u003Cbr\u003E            foreach (string bodyStr in bodyConfigsStr)\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022BODY_STR:\u0022 \u002B bodyStr);\u003Cbr\u003E                bodyConfigs.Add(FlightDataRecorderBody.FromString(bodyStr));\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022FlightDataRecorder: onSave()\u0022);\u003Cbr\u003E            foreach (FlightDataRecorderBody bodyConfig in bodyConfigs)\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022SAVING:\u0022);\u003Cbr\u003E                print(bodyConfig.ToString());\u003Cbr\u003E                bodyConfig.Save(node.AddNode(\u0022BODY\u0022));\u003Cbr\u003E            }\u003Cbr\u003E            base.OnSave(node);\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-20T02:12:27Z","Content":"\n\u003Cp\u003EI still can\u0027t get a custom ConfigNode to persist and I don\u0027t understand why. I found the original Dev post on these features, and i\u0027ve basically copied what they did, but it just refuses to work with anything but basic values, even if I try to persist a class that implements IConfigNode.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-20T03:21:32Z","Content":"\n\u003Cp\u003EOk apparently the problem was just that the documentation is wrong. KSPField does NOT default to isPersist=true. You have to be explicit.\u003C/p\u003E\n"}]}