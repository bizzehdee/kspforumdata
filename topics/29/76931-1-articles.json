{"TopicId":76931,"ForumId":29,"TopicTitle":"How do I use a \u0026quot;PQS\u0026quot; collider to find terrain height at lat/long on body?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-08T01:12:08Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-08T01:12:08Z","Content":"\n\u003Cp\u003EI see hints that the thing called the \u0022PQS\u0022 is what you use to get the terrain height for a body when the body is too far away for its terrain polygons to be fully loaded into Unity. (That seems to be roughly near 30-40 km altitude on Kerbin).\u003C/p\u003E\u003Cp\u003ECan someone point me to the right way to use it?\u003C/p\u003E\u003Cp\u003ESay for example, I have the following givens:\u003C/p\u003E\u003Cp\u003Ea CelestialBody called \u0027b\u0027.\u003C/p\u003E\u003Cp\u003EA latitude \u0027lat\u0027.\u003C/p\u003E\u003Cp\u003EA longitude \u0027long\u0027.\u003C/p\u003E\u003Cp\u003EGiven B, lat, and long, how do I find the altitude of terrain at that position of the body?\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-07-08T01:34:30Z","Content":"\n\u003Cp\u003EYou need:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        Vector3d rad = new Vector3d (Math.Cos (lat) * Math.Cos (lon) , Math.Sin (lat) , Math.Cos (lat) * Math.Sin (lon));\u003Cbr\u003E        double elevation = b.pqsController.GetSurfaceHeight (rad) - b.pqsController.radius;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe lat and long must be converted to radians. pqsController.GetSurfaceHeight returns the elevation above the center of the planet, hence the radius subtraction.\u003C/p\u003E\u003Cp\u003EYou can see the full method here: \u003Ca href=\u0022https://github.com/S-C-A-N/SCANsat/blob/master/SCANdata.cs#L68-L76\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/S-C-A-N/SCANsat/blob/master/SCANdata.cs#L68-L76\u003C/a\u003E \u003C/p\u003E\u003Cp\u003EQuite a few mods use essentially the same method.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-07-08T02:08:51Z","Content":"\n\u003Cp\u003EOr instead of the first part you can use b.GetSurfaceNVector(lat, long, 0) to get the vector. That takes latitude and longitude in the same decimal degrees that KSP reports.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-08T02:11:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DMagic\u0022 data-cite=\u0022DMagic\u0022\u003E\u003Cdiv\u003EYou need:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        Vector3d rad = new Vector3d (Math.Cos (lat) * Math.Cos (lon) , Math.Sin (lat) , Math.Cos (lat) * Math.Sin (lon));\u003Cbr\u003E        double elevation = b.pqsController.GetSurfaceHeight (rad) - b.pqsController.radius;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, so basically pqscontroller.GetSurfaceHeight(v) gets the height above sea level at the position that vector v\u0027s ray intersects the surface, assuming the vector\u0027s tail is origined at the body\u0027s center?\u003C/p\u003E\u003Cp\u003EThe reason I ask is that getting the lat/long is actually quite indirect, while working in the world of unity 3d World coords is actually more direct and involves fewer conversions, given where I\u0027m starting from. I was assuming I\u0027d have to do the work to get it into lat/long terms. If I don\u0027t have to do that and can live entirely in the world of 3D coords that\u0027s great.\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-07-08T02:30:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EAh, so basically pqscontroller.GetSurfaceHeight(v) gets the height above sea level at the position that vector v\u0027s ray intersects the surface, assuming the vector\u0027s tail is origined at the body\u0027s center?\u003Cp\u003EThe reason I ask is that getting the lat/long is actually quite indirect, while working in the world of unity 3d World coords is actually more direct and involves fewer conversions, given where I\u0027m starting from. I was assuming I\u0027d have to do the work to get it into lat/long terms. If I don\u0027t have to do that and can live entirely in the world of 3D coords that\u0027s great.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ve never actually tried it using a world position instead of lat/long, but I assume it should work assuming you calculate the correct vector. CelestialBody has a lot of position vectors, one of which probably works.\u003C/p\u003E\u003Cp\u003EAlso note that it doesn\u0027t return height above sea level, merely height above the center of the planet. CelestialBody.pqsController.radius should give you the height of sea level (or \u0022sea level\u0022) above the center of the planet, so you can use that to figure out the actual terrain elevation.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-08T05:21:05Z","Content":"\n\u003Cp\u003EHas anyone tried using RayIntersection() ? It looks like it\u0027s almost exactly what I need, but it doesn\u0027t actually seem to work like I\u0027d expect.\u003C/p\u003E\u003Cp\u003EYou call it like this, apparently:\u003C/p\u003E\u003Cp\u003Ebody.pqsController.RayIntersection( origin, rayVec, out hitDist )\u003C/p\u003E\u003Cp\u003EBut the vectors origin and rayVec, when expressed in Unity World coords, give the exact same false hits that I\u0027m getting from Physics.RayCast, and I verified that they are where I think they are by drawing a line with LineRenderer to see if the coords are what I think they are.... they are.\u003C/p\u003E\n"}]}