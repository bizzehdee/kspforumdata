{"TopicId":123859,"ForumId":29,"TopicTitle":"PartModule - initialization sequence and order of events, interlinking modules","CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-10-27T16:15:28Z","PageNum":1,"Articles":[{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-10-27T16:15:28Z","Content":"\n\u003Cp\u003EHi all,\u003C/p\u003E\u003Cp\u003EI am attempting to find the best way to utilize order of operations to cleanly link two partModules together. Most of the time this relies on a two-pass operation; everything is created/initialized/added during the first pass, and during the second-pass things are linked together. However, in KSP, there is only a single (inconsistent) loading pass. You are never guaranteed to have both OnLoad and OnStart called on your part at all initialization places -- often only one or the other is called (or perhaps onStart is always called, and OnLoad only inconsistently), and even then they are both called consecutively rather than after all other parts have the first pass done.\u003C/p\u003E\u003Cp\u003EIt seems my problem mostly stems from the way that KSP initializes partModules. It goes through and -fully- loads each module before proceeding to the next. There is no second pass /method call to the modules once they have all been loaded -- which is exactly what I need. \u003C/p\u003E\u003Cp\u003EMy current solution is to declare controlled modules prior to the modules that control them. E.g. an externally controlled texture-switch module needs to be listed -before- the module that controls it int he part .cfg file. However this is ugly in the config (requires modules listed in very specific order), error prone, and nigh-impossible to patch properly. So, I\u0027m investigating \u0027proper\u0027 solutions.\u003C/p\u003E\u003Cp\u003EI need to know when -all- modules for a part have been loaded and fully initialized so that my various PartModules can go and look for whatever other module they are supposed to be interacting with and do their initialization/data synching. Is this information available somewhere? Are their Unity lifecycle methods that I could use? What other methods are available to know when a part has had all its modules added but is not yet started (e.g. has not yet received update ticks)?.\u003C/p\u003E\u003Cp\u003EI cannot wait until first update tick, as I need everything to be setup and fully initialized by then (as other PartModules that are not under my control will start doing their thing immediately and may be called before the first tick on my modules, I need to ensure that everything is setup -before- they start doing their things/receive their first update tick).\u003C/p\u003E\u003Cp\u003EIs anyone aware of possible solutions or have I overlooked something, or is this just not cleanly workable in KSP?\u003C/p\u003E\u003Cp\u003EReally, I just need proper order-independent loading of interlinked modules. E.g ModuleA controls ModuleB, but moduleA is defined first in the config. Currently if I try this, moduleB will be null when moduleA is doing its OnStart/OnLoad code (as the part loads them one at a time, moduleB does not exist yet), and the whole world implodes.\u003C/p\u003E\u003Cp\u003EMy last resort (and its a bit of a hack...) is to add a dummy PartModule to the end of the config file whose sole purpose is to inform all other partModules (that have a specific interface) when the loading sequence is done. However I have not yet tried this out, and it seems like it might suffer some of the same probems (order of modules determining if things explode/crash, lack of easy patchability). I am also investigating various GameEvents, and perhaps a custom solution using message passing (PartMessage? have not played with it yet...). Edit -- PartMessage is apparently a KSPAPIExtensions thing; so no-go for my purposes.\u003C/p\u003E\u003Cp\u003EOther lifecycle events -\u003C/p\u003E\u003Cp\u003EAwake - Unity lifecycle - no clue when it is called for the PartModule; but from Unity\u0027s charts it looks like it would be called -before- the OnStart/etc methods; so called too early to be useful\u003C/p\u003E\u003Cp\u003EOnAwake - KSP PartModule method. Called directly from the unity method. So, same problems.\u003C/p\u003E\u003Cp\u003EStart - Unity says it is called before the first FixedUpdate/Update call. But then it goes and tells me that no guarantees are made when instantiated during run-time. Also no idea if it is called on each script as it is instantiated or called on all \u0027uninitialized\u0027 scripts prior to FixedUpdate.\u003C/p\u003E\u003Cp\u003EMore Edit -- \u003C/p\u003E\u003Cp\u003EFurther investigation tells me that many of the stock \u0027interlinked\u0027 modules (such as ModuleSurfaceFX) load their inter-linking in the Unity derived Start() method. I have not personally investigated this to see when/how it is called (and cannot for awhile, as I\u0027m stuck at work for most of the rest of the day). So, there might be some hope there... will continue looking around.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-28T15:16:18Z\u0022 title=\u002210/28/2015 03:16  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 28, 2015\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-27T21:17:37Z","Content":"\n\u003Cp\u003EOkay, first my understanding of the Methods:\u003C/p\u003E\u003Cp\u003EAwake/OnAwake: Called upon partModule creation somewhere early in the load process. KSP actually uses one of these (Awake I think?) and overriding it causes \u003Cem\u003Eissues\u003C/em\u003E. As a rule I don\u0027t use these.\u003C/p\u003E\u003Cp\u003EStart/OnStart: Called when an instance of a partModule is created on a part. While this happens on flight scene start for the FlightGlobals.ActiveVessel, note that it can happen anytime during the flight scene when a non-focus vessel loads upon coming into physics range. My preferred place for setup type code to run.\u003C/p\u003E\u003Cp\u003ENow, the description of your issue sounds like it might be worth looking at the VesselModule class. While you can\u0027t save/load data to it easily, it sounds exactly like what you need in terms of a vessel over-arching class reference.\u003C/p\u003E\u003Cp\u003EThe bonus is that because it is not a partModule, the VesselModule will always be created before the partModules load, or always created afterwards depending on which order Squad programmed things in. (A quick test would tell you the order.)\u003C/p\u003E\u003Cp\u003EIf the VesselModule is created first, it will exist in order for the PartModules to reference it, if the partModules load first you can foreach the part.Modules list in the VesselModule OnStart() method to do your linking.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-10-28T14:58:49Z","Content":"\n\u003Cp\u003EDiazo, brilliant as always \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI had not thought about a VesselModule (in fact, I had completely forgotten these even existed).\u003C/p\u003E\u003Cp\u003EFrom a quick look at things, it appears that it might just fill the need that I was looking for. As near as I can tell they are created and added to the -vessel- after it is fully initialized (e.g. all of the parts have had their OnLoad/OnStart methods called already). So that fills the exact function I was looking for, even if it is a bit of a workaround.\u003C/p\u003E\u003Cp\u003EAs I\u0027ve never used these before, I\u0027m not quite sure how they should be registered/added to the vessel. My code-exploring though tells me that merely having the class present in the a loaded assembly should cause the VesselModuleManager to instantiate that class and add it to the vessel (as long as it derives from VesselModule). Does that seem about right?\u003C/p\u003E\u003Cp\u003ESeems kind of silly that any mod that needs this kind of callback functionality would need to add their own vesselModule for it; but I\u0027m unsure as to the best way to approach the Squad devs to get the modding API improved. Kind of seems like most of KAE should also be merged into the stock API; so much stuff there that could be useful for everyone... sadly it is limited to an external hard-dependency, which limits/prevents many mods from using it (such as mine).\u003C/p\u003E\u003Cp\u003EThanks again for the ideas and insight\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-28T15:09:10Z","Content":"\n\u003Cp\u003EYou are correct, any class that inherits from VesselModule will have a single copy of that class added to every vessel in the game.\u003C/p\u003E\u003Cp\u003EI\u0027m pretty sure it works the same as the Vessel.id, so every time a new vessel spawns (such as an undocking), a new instance of the VesselModule class is created and added to that vessel.\u003C/p\u003E\u003Cp\u003ENow, referencing that VesselModule is tricky, I\u0027ve never found a reference to a list of VesselModules on a vessel in the Vessel class so I\u0027ve had to find the GameObject directly using Unity\u0027s functions.\u003C/p\u003E\u003Cp\u003EActually, this is worth a read \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/126229-Vessel-Modules-Discussion\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/126229-Vessel-Modules-Discussion\u003C/a\u003E \u003C/p\u003E\u003Cp\u003EIt\u0027s from when VesselModules first came out and we were looking into their capabilities.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-10-28T15:23:12Z","Content":"\n\u003Cp\u003EVery nice, will certainly give that a read throughout the day. Likely some other problems I can solve with it as well.\u003C/p\u003E\u003Cp\u003EThanks again for the help. Would rep you again, but apparently I cannot yet (silly forum rules).\u003C/p\u003E\n"},{"CreatedByName":"blowfish","CreatedById":119688,"CreatedDateTime":"2015-10-28T17:11:52Z","Content":"\n\u003Cp\u003EJust for reference, here\u0027s the full life cycle of a PartModule:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E Part prefab is created and PartModule is added to it\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E OnAwake() is called upon creation\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E OnLoad() is called with data from GameDatabase\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Part prefab is instantiated to create an actual part - this is done by serializing and deserializing\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E OnAwake() is called\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E If part is being loaded from a vessel, OnLoad() is called with data from save or craft file\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E OnStart() is called on all PartModules for a particular part\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Start() is called - OnStart() is called first because it\u0027s trigged by the Start() method of the part itself\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Usual update loop happens. Unity functions Update(), FixedUpdate(), LateUpdate() are called if active=true. OnUpdate() and OnFixedUpdate() are called by the part if isEnabled=true\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Part is removed and OnDestroy() is called\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}