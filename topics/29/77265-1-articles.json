{"TopicId":77265,"ForumId":29,"TopicTitle":"Does PQS.RayIntersection actually work?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-11T04:50:15Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-11T04:50:15Z","Content":"\n\u003Cp\u003EWhat the subject says. I can\u0027t get the thing to work at all, and I suspect it\u0027s because unlike what the parameter arguments say, it\u0027s not *really* expecting me to use coordinates in in Unity world coords, but in some other system it\u0027s not telling me what it is.\u003C/p\u003E\u003Cp\u003EWhen I use the exact same coordinates that work for local raycast collisions, which are supposedly using world coords, the same coordinates don\u0027t work with the pqs controller attached to a CelestialBody. They keep finding hits where there are no hits, and failing to find hits where there are.\u003C/p\u003E\u003Cp\u003EI was wondering if there was anyone, anywhere, who had used this method before. Every place I expected I might see an example of it working, the mod in question wasn\u0027t using it but using something not quite right. Most mods that do a similar thing to what I\u0027m trying to do seem to get an intersection with the SPHERE of the planet, and then get the altitude at that location, which isn\u0027t quite right, as the diagram below shows:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/ZH7mzHa.png\u0022 alt=\u0022ZH7mzHa.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-11T14:02:58Z","Content":"\n\u003Cp\u003EI think the question can be expanded to include how the terrain and/or PQS system works when the detail is reduced for distance.\u003C/p\u003E\u003Cp\u003EThe reason I ask is that I do a raycast to terrain for my Landing Height mod (using a plain raycast, not the PQSintersection method) but I was not able to get it to work reliably outside the 2.5km physics sphere.\u003C/p\u003E\u003Cp\u003EI know there is nothing that ties the physics sphere to terrain detail, but I can see the programmer at Squad who did the terrain decide to use the same distance to start reducing terrain detail as the 2.5km limit already exists anyway.\u003C/p\u003E\u003Cp\u003EI don\u0027t know a thing about the PQS system however, I am assuming that when terrain detail gets reduced for distance, the PQS objects available to hit with a raycast change as well.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-11T14:05:20Z\u0022 title=\u002207/11/2014 02:05  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 11, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-11T23:01:46Z","Content":"\n\u003Cp\u003EThe problem I\u0027m having isn\u0027t detail level, it\u0027s aim. It\u0027s hitting kerbin when not even aimed anywhere near kerbin. I can aim the ray up 60 degrees above the horizon from an orbit of 100km and still get a \u0022hit\u0022 on kerbin, and not get any hits when aimed right at kerbin from there. This is making me think the coordinate reference frame the function call expects its arguments to be using is not really the Unity World coords they\u0027re named as if they use.\u003C/p\u003E\u003Cp\u003EThis is where Squad\u0027s insistence on not documenting their API, combined with their insistence on making it illegal to decompile the DLL, makes some mods nearly impossible to write. You have nothing to go on for what an API call does other than it\u0027s name, and the types of its arguments, and the hope that another modder has already worked out what it does through trial and error, so they might have documented it on one of the fan-made API documentation sites. In this case those clearly aren\u0027t telling me what the call actually does.\u003C/p\u003E\u003Cp\u003EI had a good search through other mod code available in github to see if anyone else is using this method and nobody seems to be.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-11T23:49:57Z","Content":"\n\u003Cp\u003EOkay, I just got home and was able to take a look at the method in the Object Browser and will admit I\u0027m not clear on what it does.\u003C/p\u003E\u003Cp\u003EMy reading of the method seems to match yours. I will list my interpretation in case it gives you some inspiration into what is going on, but I don\u0027t think I have an answer for you.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic bool RayIntersection(UnityEngine.Vector3 worldStart, UnityEngine.Vector3 worldDirection, out Vector3d intersection)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Efirst bool from left: return true if hit pqs, false otherswise\u003C/p\u003E\u003Cp\u003EVector3 worldStart: Origin point for the ray in world co-ordinates\u003C/p\u003E\u003Cp\u003EVector3 worldDirection: Direction of ray from origin point as defined by previous variable\u003C/p\u003E\u003Cp\u003Eout Vector3d intersection: the Vector3 point returned by the method of where the ray intersects the pqs layer.\u003C/p\u003E\u003Cp\u003EAssuming the method actually does what it looks like it does, I\u0027m suspicious of the world co-ordinates conversion. I have yet to find the co-ordinates I need smoothly, I\u0027ve only worked with transforms a few times but it has always been a huge pain.\u003C/p\u003E\u003Cp\u003EI realize that is not really helpful but that\u0027s the extent of my knowledge on this subject.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-12T00:30:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EOkay, I just got home and was able to take a look at the method in the Object Browser and will admit I\u0027m not clear on what it does.\u003Cp\u003EMy reading of the method seems to match yours. I will list my interpretation in case it gives you some inspiration into what is going on, but I don\u0027t think I have an answer for you.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic bool RayIntersection(UnityEngine.Vector3 worldStart, UnityEngine.Vector3 worldDirection, out Vector3d intersection)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Efirst bool from left: return true if hit pqs, false otherswise\u003C/p\u003E\u003Cp\u003EVector3 worldStart: Origin point for the ray in world co-ordinates\u003C/p\u003E\u003Cp\u003EVector3 worldDirection: Direction of ray from origin point as defined by previous variable\u003C/p\u003E\u003Cp\u003Eout Vector3d intersection: the Vector3 point returned by the method of where the ray intersects the pqs layer.\u003C/p\u003E\u003Cp\u003EAssuming the method actually does what it looks like it does, I\u0027m suspicious of the world co-ordinates conversion. I have yet to find the co-ordinates I need smoothly, I\u0027ve only worked with transforms a few times but it has always been a huge pain.\u003C/p\u003E\u003Cp\u003EI realize that is not really helpful but that\u0027s the extent of my knowledge on this subject.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe problem is that I already have proof that I have the world coordinates correctly because I\u0027m drawing a line using Unity\u0027s LineRenderer using the same coordinates so I can see on screen that my idea of the ray described by the world coordinates is matching what I think it is. Also, I\u0027m able to use those same numbers while low to the ground in a physics.raycast to find ground polygons and it works them. and Physics raycast is supposedly also using world coordinates too. That\u0027s the \u0027proof\u0027 that it\u0027s not using the same coordinates system as the one called \u0022world coordinates\u0022.\u003C/p\u003E\u003Cp\u003EI also tried scaling the coordinates to map scale using scaledspace to see if the intersection presumes it must take place in mapview space, but that doesn\u0027t seem to make any difference. The problem is *still* that the aim is in the wrong direction and finds hits that aren\u0027t hits.\u003C/p\u003E\u003Cp\u003EI wish I had an example that actually worked to go from. You can use inductive reasoning to work out what a thing is doing only if you have both examples of it working and examples of it not working to derive from.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-12T00:59:56Z","Content":"\n\u003Cp\u003EWell, I messed around a bit with this code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EPQS testPQS = FlightGlobals.ActiveVessel.mainBody.pqsController;\u003Cbr\u003E            double testing = 0;\u003Cbr\u003E            bool testhit = testPQS.RayIntersection(FlightGlobals.ActiveVessel.rootPart.transform.position, (FlightGlobals.ActiveVessel.mainBody.position - FlightGlobals.ActiveVessel.rootPart.transform.position), out testing);\u003Cbr\u003E            if (testhit)\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022Hit \u0022 \u002B testing \u002B \u0022 \u0022 \u002B FlightGlobals.ActiveVessel.altitude);\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022Miss\u0022);\u003Cbr\u003E            }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, this just fires straight down to world center of mass and I was using the distance result to monitor distance. \u003C/p\u003E\u003Cp\u003EWatching the log, it does look like my example method returns valid data as the number changed as expected with altitude.\u003C/p\u003E\u003Cp\u003EThe two caveats were that:\u003C/p\u003E\u003Cp\u003Ea) It returned a number that was about 5.7 to 5.9 times larger then my altitude as reported by FlightGlobals.ActiveVessel.altitude\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E The number returned seemed to be the distance to sea level, not the 70 meters or so higher that the pad at KSC should report.\u003C/p\u003E\u003Cp\u003ETo add to the strangeness, my first try I got my direction vector backwards and was firing the Ray straight up, it was returning a value of about 210,000, which when divided by the 5.9 from my previous example comes out to almost exactly 35k above the launchpad.\u003C/p\u003E\u003Cp\u003EAll my test were from a vessel fresh from launch, I did not put anything into orbit because I stopped my tests and I\u0027m not actually getting anywhere and I wanted to get some work in on my mod tonight.\u003C/p\u003E\u003Cp\u003EThat\u0027s what I found for what it is worth.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-14T04:14:10Z","Content":"\n\u003Cp\u003EI found the problem with a LOT of trial and error and frustration. With the function call:\u003C/p\u003E\u003Cp\u003Epublic bool RayIntersection(UnityEngine.Vector3 worldStart, UnityEngine.Vector3 worldDirection, out Vector3d intersection)\u003C/p\u003E\u003Cp\u003EThe \u0027worldStart\u0027 parameter is correct, but the \u0027worldDirection\u0027 parameter is being read utterly wrong by the function.\u003C/p\u003E\u003Cp\u003EThe problem is that it seems to be always rotating it off the wrong direction. To overcompensate for that I have to rotate it twice the correct way, to compensate for the fact that it rotates it once the wrong way, like so:\u003C/p\u003E\u003Cp\u003E Vector3d useWorldDir = pqs.transformRotation * ( pqs.transformRotation * worldDir );\u003C/p\u003E\u003Cp\u003EAnd then pass in useWorldDir as the second argument to RayIntersection.\u003C/p\u003E\u003Cp\u003EI\u0027m fairly sure this has got to be a bug. I now suspect the API call isn\u0027t being used anywhere by SQUAD themselves because there\u0027s no way they could be using it the way it is now without it being discovered to be wrong.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-15T08:51:32Z","Content":"\n\u003Cp\u003E[ addendum ]\u003C/p\u003E\u003Cp\u003EI also found out after all this work that despite the implications of the name, the RayIntersection function doesn\u0027t even calculate intersections with the terrain *anyway*. It just finds the intersection with the sea level sphere, which I could have easily done with my own math. (Making me wonder why on earth it\u0027s part of the PQScontroller when the information it needs to find the sea level sphere intersection is just position and radius of the body - surely it\u0027s got nothing to do with the PQS terrain and thus belongs just in CelestialBody....grumble.)\u003C/p\u003E\u003Cp\u003EThat was a lot of work for nothing. It turns out I\u0027ll still have to write a homemade terrain intersect solver anyway. It will be a numerical approximation by slices, which can be computationally expensive. So I\u0027ll have to find a tricky way to allow it to store the state of the partially complete numerical algorithm between Unity updates so it can take, say, 2 or 3 updates to finish the algorithm - otherwise I\u0027ll be starving other mods of CPU time.\u003C/p\u003E\n"}]}