{"TopicId":155497,"ForumId":29,"TopicTitle":"Physics.raycasts and physicsless objects","CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T12:18:11Z","PageNum":1,"Articles":[{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T12:18:11Z","Content":"\n\u003Cp\u003E\nI may have posed this question in the wrong forum before.\u003Cbr\u003E\u003Cbr\u003E\nWhat is the default behaviour of a physics.raycast with respect to parts that have physicsSignificance = 1?\u003Cbr\u003E\u003Cbr\u003E\nIt appears to me that, by default, if a raycast hits a physicless object, it will walk up the tree until it finds the first physics object, and return that object rather than the one that was actually hit. \u00A0But \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275006\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0022 rel=\u0022\u0022\u003E@NathanKell\u003C/a\u003E\u00A0was dealing with the same problem in\u00A0\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/121017-thermal-mechanics-and-physicssignificance/\u0026amp;do=findComment\u0026amp;comment=2478242\u0022 rel=\u0022\u0022\u003Ethis old thread\u003C/a\u003E\u00A0about thermo and physics significance, and it reads to me as though the original skipping the physicsless part was part of KSP\u0027s implementation, not a unity thing\u00A0\u003Cem\u003E\u003Cspan style=\u0022font-size:11px;\u0022\u003E(\u0022 \u003Cspan style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-style:normal;font-weight:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);float:none;\u0022\u003Ethe engine exhaust damage, after it raycasts and detects a hit, finds the\u00A0\u003C/span\u003E\u003Cem style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-size:14px;font-weight:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);\u0022\u003Eroot\u00A0\u003C/em\u003E\u003Cspan style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-style:normal;font-weight:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);float:none;\u0022\u003Etransform of whatever transform it hits. And physicssig=1 parts are parented to the part that has full physics. So that \u0027root\u0027 check gives the parent part, not the hit part\u003C/span\u003E \u0022)\u003C/span\u003E ,\u003C/em\u003E whereas what I see suggests that this is the default behaviour of a raycast.\u003Cbr\u003E\u003Cbr\u003E\nI\u0027ve tried looking at unity docs for help, but of course I don\u0027t \u003Cem\u003Ereally\u003C/em\u003E know what \u0022physicsSignificance=1\u0022 in a KSP part config file really means in terms of properties in the unity engine.\u003Cbr\u003E\u003Cbr\u003E\nFor reference, the code that appears to be walking up the tree to the first \u0022normal physics\u0022 options is as follows (from BD armory):\u003Cbr\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPhysics\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ERaycast\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eray\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E out hit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E dist\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E557057\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E))\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hitPart \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E   \n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etry\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\thitPart \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFromGO\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ehit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erigidbody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgameObject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ecatch\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003ENullReferenceException\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T12:36:18Z","Content":"\n\u003Cp\u003E\nRaycast does not care about the part flag. It cares about colliders and the layers they uses. Using magic number like 557057 hides the actual layers that are checked. And if the part does not have a collider it will not be hit by a raycast.\n\u003C/p\u003E\n\u003Cp\u003E\nNK comment about physicsless part is about the part where the heat is applied, not the raycast itself.\n\u003C/p\u003E\n\u003Cp\u003E\nThe only thing that could go up the tree in that code is the FromGO call, that I guess is part of BDA\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T12:49:11Z","Content":"\n\u003Cp\u003E\nFromGO appears to be a function in KSP code, not unity or BD Armory.\u003Cbr\u003E\u003Cbr\u003E\nYes, the thread in which NK posted is about where heat is applied. I started the thread reporting that heat was applied to the wrong part if a physicsless part was the initial target of the heat (in this case, engine exhaust), and NK seemed to confirm that the raycast was indeed hitting the physicless part, but that it was looking for the root transform. So, there is certainly an implication there that raycasts do indeed \u0022hit\u0022 physicsless parts - as long as they have the appropriate unity attributes (ie, like you said, a collider).\u00A0\u003Cbr\u003E\u003Cbr\u003E\nI have a feeling the original KSP code for engine exhaust raycasts was using the same code as BD armory, ie, calling the \u0022FromGO\u0022 method, and that this is why both of them initially walked up the tree to the first \u0022physical\u0022 part. However, I think the way to return the actual part that was hit (even if physicsless) might be:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E p \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ecollider\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgameObject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponentInParent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nJust a hunch based on code I see elsewhere, I am about to try it.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T12:55:34Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222932713\u0022 data-ipsquote-contentid=\u0022155497\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221485262151\u0022 data-ipsquote-userid=\u002266124\u0022 data-ipsquote-username=\u0022allmhuran\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 minutes ago, allmhuran said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI think the way to return the actual part that was hit (even if physicsless) might be:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\n\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E p \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ecollider\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgameObject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponentInParent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nJust a hunch based on code I see elsewhere, I am about to try it.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhich is exactly what FromGO does\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T12:57:56Z","Content":"\n\u003Cp\u003E\nSorry, didn\u0027t you just say you thought FromGO was part of BD Armory? Did you just go and find the actual definition of the method?\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T12:58:37Z","Content":"\n\u003Cp\u003E\nYes\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T13:01:26Z","Content":"\n\u003Cp\u003E\nWhat, so you fired up reflector and looked at the dll internals?\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T13:02:35Z","Content":"\n\u003Cp\u003E\nNo, I used my ouija board.\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T13:03:54Z","Content":"\n\u003Cp\u003E\nAre you deliberately supplying incorrect information for lulz?\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T13:06:13Z","Content":"\n\u003Cp\u003E\nI am unmasked. I spent the last 4 years on this board spreading alt fact.\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T13:12:12Z","Content":"\n\u003Cp\u003E\nIt\u0027s hard to believe, yeah. But you seem to be doing it here.\u003Cbr\u003E\u003Cbr\u003E\nhit.collider.gameObject.GetComponentInParent\u0026lt;Part\u0026gt;() is decidedly \u003Cem\u003Enot\u003C/em\u003E\u00A0\u0022exactly what FromGO does\u0022. I just commented out the FromGO call (which results in a walk\u00A0up to a physics part) and replaced it with that instead, and it returns the physicsless part. Two identical sections of code do not return different results. So I dunno man, you tell me what you\u0027re actually doing, because right now it looks like you\u0027re not just being unhelpful, you\u0027re being actively misleading.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-24T13:19:28Z","Content":"\n\u003Cp\u003E\nThat or you are just wrong and the call does what I say it does, and not what you assume it does based on a 2 year old post.\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-24T13:23:15Z","Content":"\n\u003Cp\u003E\nWell, I actually just altered the code, compiled a new version of BDA, and tested it in the game, so I think I\u0027ll stick with my actual experience running it over your assertions.\n\u003C/p\u003E\n"},{"CreatedByName":"flywlyx","CreatedById":64436,"CreatedDateTime":"2017-01-26T21:54:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222932713\u0022 data-ipsquote-contentid=\u0022155497\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221485262151\u0022 data-ipsquote-userid=\u002266124\u0022 data-ipsquote-username=\u0022allmhuran\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 1/24/2017 at 7:49 AM, allmhuran said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFromGO appears to be a function in KSP code, not unity or BD Armory.\u003Cbr\u003E\u003Cbr\u003E\nYes, the thread in which NK posted is about where heat is applied. I started the thread reporting that heat was applied to the wrong part if a physicsless part was the initial target of the heat (in this case, engine exhaust), and NK seemed to confirm that the raycast was indeed hitting the physicless part, but that it was looking for the root transform. So, there is certainly an implication there that raycasts do indeed \u0022hit\u0022 physicsless parts - as long as they have the appropriate unity attributes (ie, like you said, a collider).\u00A0\u003Cbr\u003E\u003Cbr\u003E\nI have a feeling the original KSP code for engine exhaust raycasts was using the same code as BD armory, ie, calling the \u0022FromGO\u0022 method, and that this is why both of them initially walked up the tree to the first \u0022physical\u0022 part. However, I think the way to return the actual part that was hit (even if physicsless) might be:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\n\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E p \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ecollider\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgameObject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponentInParent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EPart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nJust a hunch based on code I see elsewhere, I am about to try it.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBDA use FromGO for for heat effect only and for force reaction, he use \u0022GetComponentInParent\u0026lt;Part\u0026gt;()\u0022 and process a physicsSignificance after that. It is highly possible FromGO doesn\u0027t work with\u00A0physicsSignificance.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2017-01-27T03:37:18Z","Content":"\n\u003Cp\u003E\nNah, they\u0027re used in different spots. For example, GetComponentInParent is used for the lasers, FromGO is used for bullet hits.\u003Cbr\u003E\u003Cbr\u003E\nBut the difference is that when making the FromGO call it uses hit.rigidbody.gameobject, vs hit.collider.gameobject for the other call. So the two lines of code operate differently.\u003Cbr\u003E\u003Cbr\u003E\nSwitching everything to the hit.collider.gameobject.getcomponent version makes it all work as expected, I\u0027ve recompiled it myself and everything is fixed. I have an issue open on the BDA git site showing where to make the changes.\n\u003C/p\u003E\n"}]}