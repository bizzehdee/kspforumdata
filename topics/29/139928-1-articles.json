{"TopicId":139928,"ForumId":29,"TopicTitle":"Help getting started making my first mod, without Visual Studio","CreatedByName":"dpitch40","CreatedById":153900,"CreatedDateTime":"2016-05-17T02:18:54Z","PageNum":1,"Articles":[{"CreatedByName":"dpitch40","CreatedById":153900,"CreatedDateTime":"2016-05-17T02:18:54Z","Content":"\n\u003Cp\u003E\nI am an experienced programmer but new to C#, Unity, and the KSP modding API. The mod I am envisioning is pretty simple (a window with a few sliders that edits a .cfg file), so I found and downloaded \u003Ca href=\u0022https://github.com/evilC/TacLib\u0022 rel=\u0022external nofollow\u0022\u003Ethis example mod\u003C/a\u003E\u00A0hoping to get it running and then poke around in its code to learn how the modding system works. I\u0027m currently stuck on the \u0022get it running\u0022 step. I strongly prefer working lightweight with a text editor and the command line over IDEs, so I\u0027m trying to avoid using Visual Studio. I download the mod, put it in the directory .../Kerbal Space Program/GameData/TacWindowTest/Plugins, copy a part file into the /Parts directory and edit it per the instructions, and then attempt to build. I have my system path set to include the latest 64-bit version of csc.exe, so I type\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EC:\\Program Files (x86)\\Steam\\steamapps\\common\\Kerbal Space Program\\GameData\\TacWindowTest\\Plugins\\TacLib-master\\Source\u0026gt;csc /target:library /out:TacWindowTest.dll *.cs\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nper\u00A0\u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/mt632257.aspx\u0022 rel=\u0022external nofollow\u0022\u003Ethis documentation page\u003C/a\u003E, and get output beginning like the following:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EMicrosoft (R) Visual C# Compiler version 4.6.1038.0\nfor C# 5\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nThis compiler is provided as part of the Microsoft (R) .NET Framework, but only supports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see http://go.microsoft.com/fwlink/?LinkID=533240\n\nIcon.cs(28,7): error CS0246: The type or namespace name \u0027KSP\u0027 could not be found (are you missing a using\n        directive or an assembly reference?)\nIcon.cs(33,7): error CS0246: The type or namespace name \u0027UnityEngine\u0027 could not be found (are you missing a\n        using directive or an assembly reference?)\nPopupWindow.cs(2,7): error CS0246: The type or namespace name \u0027UnityEngine\u0027 could not be found (are you missing        a using directive or an assembly reference?)\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd so on for several hundred similar errors. Obviously I haven\u0027t told the compiler how to find the Unity/KSP-specific libraries on which the source code for this mod draws. Newbie that I am, I don\u0027t know how to do this. How should I proceed and get to a position where I can start teaching myself the coding by experimentation? Just to be sure, is developing mods even possible without Visual Studio? (All the documentation I can find seems to push towards it very heavily)\n\u003C/p\u003E\n"},{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2016-05-17T02:47:34Z","Content":"\n\u003Cp\u003E\nI\u0027ve never been even slightly tempted to try not using Visual Studio myself, so I\u0027m afraid I can\u0027t answer your question-- sorry.\n\u003C/p\u003E\n\u003Cp\u003E\nIs there a particular reason you don\u0027t want to use it?\u00A0 It\u0027s free, and it makes what you\u0027re trying to do there trivially easy, and you get syntax highlighting, and the ability to hit F12 to find the definition of what you\u0027re working with, and similar nice goodies.\n\u003C/p\u003E\n\u003Cp\u003E\nI would also add that if you don\u0027t use an IDE, you\u0027re going to run into an absolutely excruciating problem:\n\u003C/p\u003E\n\u003Cp\u003E\nThe KSP API (i.e. the assemblies you need to reference) is practically \u003Cstrong\u003Eundocumented\u003C/strong\u003E.\u00A0 So you\u0027re stumbling around in the dark.\u00A0 If you\u0027re in an IDE, and you\u0027re using some class from KSP, you can just hover over it and hit F12 and immediately see the class definition with all the methods and fields and what-not, extracted from the assembly metadata.\n\u003C/p\u003E\n\u003Cp\u003E\nFor an undocumented API, the ability to see that information is \u003Cem\u003E\u003Cu\u003Epriceless\u003C/u\u003E\u003C/em\u003E.\u00A0 I would have rapidly gone insane without such a feature.\n\u003C/p\u003E\n"},{"CreatedByName":"Aelfhe1m","CreatedById":142910,"CreatedDateTime":"2016-05-17T03:39:14Z","Content":"\n\u003Cp\u003E\nYou need to reference the appropriate KSP DLLs from \u0026lt;KSP\u0026gt;/KSP_DATA/Managed (Assembly-CSharp.dll and UnityEngine.dll at a minimum - other DLLs may be needed depending on project type). See the /reference documentation on the page you linked.\n\u003C/p\u003E\n\u003Cp\u003E\nBut it\u0027s much easier to use an IDE as \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/125662-snark/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022125662\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/125662-snark/\u0022 rel=\u0022\u0022\u003E@Snark\u003C/a\u003E\u00A0says. If you don\u0027t want to use Visual Studio for whatever reason then \u00A0\u003Ca href=\u0022https://store.xamarin.com/\u0022 rel=\u0022external nofollow\u0022\u003EXamarin Studio\u003C/a\u003E is also available in a free version.\n\u003C/p\u003E\n"},{"CreatedByName":"ShotgunNinja","CreatedById":159391,"CreatedDateTime":"2016-05-17T04:00:17Z","Content":"\n\u003Cp\u003E\nThe easiest way, by far, is to go download \u003Ca href=\u0022http://www.icsharpcode.net/OpenSource/SD/Download/GetFile.aspx?What=Setup\u0026amp;Release=Zimnitz\u0022 rel=\u0022external nofollow\u0022\u003ESharpDevelop\u003C/a\u003E\u00A0(that also include the c# compiler/assembler).\n\u003C/p\u003E\n\u003Cp\u003E\nThen create a new empty project and\u00A0add the reference assemblies for KSP and Unity:\u003Cbr\u003E\n- Assembly-CSharp\u003Cbr\u003E\n- Assembly-CSharp-firstpass\u003Cbr\u003E\n- KSPUtil\u003Cbr\u003E\n- UnityEngine\u003Cbr\u003E\n- UnityEngine.UI\n\u003C/p\u003E\n\u003Cp\u003E\nThen take the default .cs file the project comes with, remove all the content and put this in its place:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ECollections\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGeneric\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enamespace\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EYourStuff\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003EKSPAddon\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EKSPAddon\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EStartup\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EMainMenu\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMyMod\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMonoBehaviour\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// keep it alive\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EMyMod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EDontDestroyOnLoad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ethis\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// called at every simulation step\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFixedUpdate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    print\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022hello world\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMyPartModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPartModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// this is loaded from .cfg\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003EKSPField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E my_value\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// this is an event\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003EKSPEvent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EguiActive \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E guiName \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022Click me!\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E active \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EClickMe\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan\u003EMonobehaviour\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eprint\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022stop clicking me!\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// shown on the part tooltip in editor\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E override string \u003C/span\u003E\u003Cspan\u003EGetInfo\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022hello world!\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// YourStuff\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nTo get started with the UI, have a look at this simple, self-contained\u00A0\u003Ca href=\u0022https://github.com/ShotgunNinja/Kerbalism/blob/master/src/Notepad.cs\u0022 rel=\u0022external nofollow\u0022\u003ENotepad\u003C/a\u003E.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-05-17T07:51:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222585973\u0022 data-ipsquote-contentid=\u0022139928\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221463451534\u0022 data-ipsquote-userid=\u0022153900\u0022 data-ipsquote-username=\u0022dpitch40\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, dpitch40 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI am an experienced programmer but new to C#, Unity, and the KSP modding API. The mod I am envisioning is pretty simple (a window with a few sliders that edits a .cfg file), so I found and downloaded \u003Ca href=\u0022https://github.com/evilC/TacLib\u0022 rel=\u0022external nofollow\u0022\u003Ethis example mod\u003C/a\u003E\u00A0hoping to get it running and then poke around in its code to learn how the modding system works. I\u0027m currently stuck on the \u0022get it running\u0022 step. I strongly prefer working lightweight with a text editor and the command line over IDEs, so I\u0027m trying to avoid using Visual Studio. I download the mod, put it in the directory .../Kerbal Space Program/GameData/TacWindowTest/Plugins, copy a part file into the /Parts directory and edit it per the instructions, and then attempt to build. I have my system path set to include the latest 64-bit version of csc.exe, so I type\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003EC:\\Program Files (x86)\\Steam\\steamapps\\common\\Kerbal Space Program\\GameData\\TacWindowTest\\Plugins\\TacLib-master\\Source\u0026gt;csc /target:library /out:TacWindowTest.dll *.cs\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nper\u00A0\u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/mt632257.aspx\u0022 rel=\u0022external nofollow\u0022\u003Ethis documentation page\u003C/a\u003E, and get output beginning like the following:\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFirst I ll concur with the others and say that not using an ide will cripple you for KSP coding since you will miss auto-completion and you will have more problem finding what you need.\n\u003C/p\u003E\n\u003Cp\u003E\nFor your cmd line trouble you need to add a /nostdlib\u00A0 and\u00A0 /lib:\u0026lt;dir of KSP dll\u0026gt; or a list of\u00A0 /reference:\u0026lt;dll\u0026gt;.\n\u003C/p\u003E\n\u003Cp\u003E\nHere is the build line for MJ for reference (I should use /ib...) :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n/home/roslyn/csc.exe /noconfig /target:library /checked- /nowarn:1701,1702,2008 /langversion:6 /nostdlib\u002B /platform:AnyCPU /warn:4 /errorendlocation /preferreduilang:en-US /highentropyva- /optimize\u002B /debug- /filealign:512 /reference:/home/ksp/KSP_Data/Managed/Assembly-CSharp.dll /reference:/home/ksp/KSP_Data/Managed/Assembly-CSharp-firstpass.dll /reference:/home/ksp/KSP_Data/Managed/KSPUtil.dll /reference:/home/ksp/KSP_Data/Managed/mscorlib.dll /reference:/home/ksp/KSP_Data/Managed/System.Core.dll /reference:/home/ksp/KSP_Data/Managed/System.dll /reference:/home/ksp/KSP_Data/Managed/UnityEngine.dll /reference:/home/ksp/KSP_Data/Managed/UnityEngine.UI.dll /out:/home/jenkins/jobs/MechJeb2-Dev/workspace/build/MechJeb2/Plugins/MechJeb2.dll /resource:Resources.resources,MuMech.Properties.Resources.resources \u0027/recurse:*.cs\u0027\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dpitch40","CreatedById":153900,"CreatedDateTime":"2016-05-17T23:01:18Z","Content":"\n\u003Cp\u003E\nI guess I don\u0027t like the\u00A0barrier IDEs put between you, your code, and its execution. I like the simplicity,\u00A0intuitiveness, and hands-on experience of building with the command line and a (high-quality) text editor, and automating where necessary as I go. It\u0027s what I\u0027ve done in my job for four years, and I feel like anything that is easy in an IDE should still at least be possible without.\u00A0Anyway, it turns out the /lib and /reference options for csc were what I needed for my initial question. I managed to get the \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Tutorial:Creating_your_first_module\u0022 rel=\u0022external nofollow\u0022\u003Esuper-basic tutorial\u003C/a\u003E on the wiki working perfectly. For the TacWindowTest mod, I am making significant progress by building with the following batch script:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E@echo off\n\nset LIB=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Kerbal Space Program\\KSP_x64_Data\\Managed\nset PLUGINS=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Kerbal Space Program\\GameData\\TacWindowTest\\Plugins\n\ncsc /lib:\u0022%LIB%\u0022 /r:Assembly-CSharp.dll /r:UnityEngine.dll /r:UnityEngine.UI.dll /r:KSPUtil.dll /out:\u0022%PLUGINS%\\TacWindowTest.dll\u0022 /target:library Icon.cs PopupWindow.cs TacWindowTest.cs Utilities.cs Window.cs\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nFor some reason just\u00A0using the /lib argument as suggested\u00A0doesn\u0027t help; I have to include a reference to each needed library. But anyway, after updating a few usages that were outdated due to the example being written in 2013, it compiles!\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, it doesn\u0027t do anything in game, and I find the following line in the debug log on starting KSP: \u0022[Error]: Cannot find a PartModule of typename \u0027TacWindowTest\u0027\u0022. Someone has asked a \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/95211-help-with-my-first-plugin-quotcannot-find-a-partmodule-of-typename-firstmodquot/\u0022 rel=\u0022\u0022\u003Eprior question\u003C/a\u003E on this message, and the solution was to make sure the name of the MODULE added to the modded part matches the name of the main class in the compiled DLL. The name of the MODULE I added to my modded \u00A0RCS thruster in the TacWindowTest\\Parts directory\u00A0is \u0022TacWindowTest\u0022, which is also the name of the top-level class in the TacWindowTest.cs. The .dll I am compiling is getting placed in TacWindowTest\\Plugins\\TacWindowTest.dll. Where is the disconnect occurring here?\n\u003C/p\u003E\n"},{"CreatedByName":"Apollo13","CreatedById":74572,"CreatedDateTime":"2016-05-18T10:06:15Z","Content":"\n\u003Cp\u003E\nI\u0027ve been a developer for about 45 years. \u00A0When developing for Unix/Linux, I use a text editor (gVim), whether C/C\u002B\u002B or Assembler for apps or device drivers. \u00A0When creating mods, I use the MS Visual Studio. \u00A0As others have stated, it provides the functionality you need and doesn\u0027t get in the way.\n\u003C/p\u003E\n\u003Cp\u003E\nI don\u0027t know your development methods, but I prefer efficiency and expediency.\n\u003C/p\u003E\n"}]}