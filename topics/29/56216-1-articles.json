{"TopicId":56216,"ForumId":29,"TopicTitle":"Finding the height of the lowest point on my vessel","CreatedByName":"XanderTek","CreatedById":92553,"CreatedDateTime":"2013-12-15T06:50:46Z","PageNum":1,"Articles":[{"CreatedByName":"XanderTek","CreatedById":92553,"CreatedDateTime":"2013-12-15T06:50:46Z","Content":"\n\u003Cp\u003EI\u0027m working on a landing plugin. So far I\u0027ve been using vessel.heightFromTerrain and vessel.altitude to determine how high up I am. However I just noticed that those values are measured from the center of mass for my vessel. What I really care about is the distance the vessel can travel before some part of it touches the ground. So I\u0027m more concerned with the very bottom of my vessel than the CoM. Any suggestions on how I might go about getting more accurate readings? Is there some way to query the coordinates of each part?\u003C/p\u003E\u003Cp\u003EThanks!\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2013-12-15T08:24:06Z","Content":"\n\u003Cp\u003Evessel.heightFromTerrain is not something I would use. It\u0027s either deprecated or unused, because it does not return what you are looking for. vessel.altitude is also not very reliable.\u003C/p\u003E\u003Cp\u003EYou\u0027ll want to do three things: determine altitude from sea level, determine true altitude from ground as well as ground altitude, and determine what is the lowest part on your vessel and what is the altitude from there.\u003C/p\u003E\u003Cp\u003EFor the first part: ASL altitude. Probably the easiest. FlightGlobals.getAltitudeAtPos(CoM) will do that. You just need to define your CoM, which can also be made obtained by this.vessel.findWorldCenterOfMass().\u003C/p\u003E\u003Cp\u003EFor true altitude, there is no easy way to do it. There\u0027s no value that currently returns is \u003Cem\u003Eas is\u003C/em\u003E. One of the easiest way to do it in my opinion is with a RayCast. Then you just need to return the smallest distance between ASL altitude and the raycast distance, because it won\u0027t consider water as surface, or return ASL if the raycast hits nothing. Then you ca\u003C/p\u003E\u003Cp\u003EThen for the lowest part of your vessel, this gets tricky. Looking at the MechJeb source code in that case is quite useful. You\u0027ll need to loop through all the parts in the vessel. From there, you just want to find the lowest point on each part, get it\u0027s altitude from ground, and then compare it to the other part.\u003C/p\u003E\u003Cp\u003EIt should look something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E        public Vector3 CoM, up;\u003Cbr\u003E        public RaycastHit craft;\u003Cbr\u003E        public float ASL, trueAlt, surfaceAlt, bottomAlt;\u003Cbr\u003E\u003Cbr\u003E        public void Update()\u003Cbr\u003E        {\u003Cbr\u003E            CoM = this.vessel.findWorldCenterOfMass();  //Gets CoM\u003Cbr\u003E            up = FlightGlobals.getUpAxis(CoM); //Gets up axis (needed for the raycast)\u003Cbr\u003E            ASL = FlightGlobals.getAltitudeAtPos(CoM);\u003Cbr\u003E            if (Physics.Raycast(CoM, -up, out craft, ASL \u002B 10000f, 1 \u0026lt;\u0026lt; 15))\u003Cbr\u003E            {\u003Cbr\u003E                trueAlt = Mathf.Min(ASL, craft.distance); //Smallest value between ASL and distance from ground\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            else { trueAlt = ASL; }\u003Cbr\u003E\u003Cbr\u003E            surfaceAlt = ASL - trueAlt;\u003Cbr\u003E            bottomAlt = trueAlt; //Initiation to be sure the loop doesn\u0027t return a false value\u003Cbr\u003E            foreach (Part p in vessel.parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (p.collider != null) //Makes sure the part actually has a collider to touch ground\u003Cbr\u003E                {\u003Cbr\u003E                    Vector3 bottom = p.collider.ClosestPointOnBounds(vessel.mainBody.position); //Gets the bottom point\u003Cbr\u003E                    float partAlt = FlightGlobals.getAltitudeAtPos(bottom) - surfaceAlt;  //Gets the looped part alt\u003Cbr\u003E                    bottomAlt = Mathf.Max(0, Mathf.Min(bottomAlt, partAlt));  //Stores the smallest value in all the parts\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHope this helped!\u003C/p\u003E\n"},{"CreatedByName":"XanderTek","CreatedById":92553,"CreatedDateTime":"2013-12-15T14:10:55Z","Content":"\n\u003Cp\u003EThanks Chris, that\u0027s exceptionally helpful! And your example even includes a number of nice tricks that I can use to tidy up my code.\u003C/p\u003E\u003Cp\u003EI\u0027m curious though, what are vessel.heightFromTerrain and vessel.altitude failing to do correctly? I\u0027ve tested my part using those calls quite a bit, and at least close to the ground/water the results are reliable to within a meter or two. If FlightGlobals is the proper way to handle this I have no problem switching over, I\u0027d just like to better understand the reasoning.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2013-12-15T14:24:58Z","Content":"\n\u003Cp\u003EI\u0027ve had no issues with vessel.heightFromTerrain or vessel.altitude being inaccurate.\u003C/p\u003E\u003Cp\u003EI believe they report from vessel CoM though so they can\u0027t be used to land. \u003C/p\u003E\u003Cp\u003EThe other limitation is that they report directly below the vessel. If you are moving horizontally over crater edges, the numbers can change very rapidly.\u003C/p\u003E\u003Cp\u003EI also had problems with landing which led to the Velocity Control mod in my sig, but as I approached it differently then it sounds like you are I did not need to know the distance to ground you are looking for.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-15T14:48:44Z\u0022 title=\u002212/15/2013 02:48  PM\u0022 data-short=\u002210 yr\u0022\u003EDecember 15, 2013\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"XanderTek","CreatedById":92553,"CreatedDateTime":"2013-12-15T14:56:17Z","Content":"\n\u003Cp\u003EThanks Diazo, I\u0027ll take a closer look at your code if I get stuck again.\u003C/p\u003E\u003Cp\u003EThis is only somewhat related, but since you guys have already been so helpful: Is there a way to share a variable between multiple instances of a partmodule? A vessel will typically have several \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/61294-WIP-Landertron-XT-v0-02a-A-Soyuz-Inspired-Explosive-Landing-System\u0022 rel=\u0022external nofollow\u0022\u003ELandertrons\u003C/a\u003E attached, but I really shouldn\u0027t be redoing these height calculations multiple times per physics step. I\u0027d like to have the first one to load designate itself the master and then share its calculation results with the other units. To do this I think I would need something like a global variable, but I haven\u0027t been able to find any relevant examples for KSP.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-12-15T15:18:59Z","Content":"\n\u003Cp\u003EA static variable is accessible by all objects of a particular class.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2013-12-15T17:20:05Z","Content":"\n\u003Cp\u003EOff the top of my head, two variables: VesselHeight(float) and HeightCalced(bool)\u003C/p\u003E\u003Cp\u003EFirst line in the main module would have a HeightCalced=false\u003C/p\u003E\u003Cp\u003EThen the Landertron would only calculate VesselHeight if HeightCalced was false, and when it sets VesselHeight it would set HeightCalced to true.\u003C/p\u003E\u003Cp\u003EThat way only the first Landertron checked would calculate height and height would calculate once per update.\u003C/p\u003E\u003Cp\u003EAs long as those two variables are static and within the same class, that\u0027s the easiest way I know to go about it.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2013-12-15T20:15:04Z","Content":"\n\u003Cp\u003Evessel.heightFromTerrain was returning false values when working with my parachutes. I believe those are all old values from before FlightGlobals was created. They sometimes work, but most often don\u0027t. I spoke with Mu and there is no easy way to get true altitude. Sometimes it\u0027s better to gow with slightly complicated methods to get a more ac curate result than try to go the easy way that might break in some rare cases.\u003C/p\u003E\n"},{"CreatedByName":"pizzaoverhead","CreatedById":26349,"CreatedDateTime":"2013-12-20T09:55:23Z","Content":"\n\u003Cp\u003EI did some experimentation with vessel.heightFromTerrain a while back. There is some weirdness with it and the other altitude fields.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E heightFromTerrain is the height from the ground, buildings. It becomes -1 when sea depth is greater than 600m (terrainAltitude \u0026lt;= -600).\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E heightFromSurface was always -1 in my testing.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E pqsAltitude: the altitude above the planet quadtree sphere (the basic low resolution sphere) compared to sea level. It doesn\u0027t take buildings into account. It is generally within \u002B/- 1m of terrainAltitude, except when over buildings or sea with a depth of greater than 600m (terrainAltitude \u0026lt;= -600, heightFromTerrain == -1).\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E terrainAltitude is the altitude from solid ground, including buildings and the seabed. Negative values indicate areas which are underwater.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESome of these switch to -1 at orbital altitudes, but that wasn\u0027t part of the testing I was doing.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2013-12-22T21:12:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022pizzaoverhead\u0022 data-cite=\u0022pizzaoverhead\u0022\u003E\u003Cdiv\u003EI did some experimentation with vessel.heightFromTerrain a while back. There is some weirdness with it and the other altitude fields.\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E heightFromTerrain is the height from the ground, buildings. It becomes -1 when sea depth is greater than 600m (terrainAltitude \u0026lt;= -600).\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E heightFromSurface was always -1 in my testing.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E pqsAltitude: the altitude above the planet quadtree sphere (the basic low resolution sphere) compared to sea level. It doesn\u0027t take buildings into account. It is generally within \u002B/- 1m of terrainAltitude, except when over buildings or sea with a depth of greater than 600m (terrainAltitude \u0026lt;= -600, heightFromTerrain == -1).\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E terrainAltitude is the altitude from solid ground, including buildings and the seabed. Negative values indicate areas which are underwater.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESome of these switch to -1 at orbital altitudes, but that wasn\u0027t part of the testing I was doing.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI had a chat with Mu the other day, heightFromTerrain and heightFromSurface are supposed to be private variables, and are only used in very specific situations, such as landings and takeoffs, so I don\u0027t think we should use them cause they might be very unreliable.\u003C/p\u003E\u003Cp\u003EpqsAltitude however is the altitude of the surface relatively from sea level, but does not take in consideration buildings indeed.\u003C/p\u003E\u003Cp\u003EI didn\u0027t ask for terrainAltitude, but considering pqs is the value we look for, I believe that one falls in the same category as heightFromSurface and heightFromTerrain\u003C/p\u003E\n"}]}