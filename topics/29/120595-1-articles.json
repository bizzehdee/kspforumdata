{"TopicId":120595,"ForumId":29,"TopicTitle":"How to detect docking has occured on active vessel","CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-09-10T19:28:20Z","PageNum":1,"Articles":[{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-09-10T19:28:20Z","Content":"\n\u003Cp\u003EI used to think that OnStart was called after docking, but this turned out to be incorrect.\u003C/p\u003E\u003Cp\u003ENow the question is, how to detect, docking has occurred with another vessel?\u003C/p\u003E\u003Cp\u003EI need it in order to reinitialize some vessel specific variables.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-11T05:46:55Z\u0022 title=\u002209/11/2015 05:46  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 11, 2015\u003C/time\u003E by FreeThinker\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MrHappyFace","CreatedById":76365,"CreatedDateTime":"2015-09-10T20:35:48Z","Content":"\n\u003Cp\u003EThere is a docking event in the GameEvents class, it\u0027s something like GameEvents.onVesselDocked. There is probably also an undock event too, but I\u0027m not sure.\u003C/p\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-09-10T21:06:24Z","Content":"\n\u003Cp\u003EInteresting, how or where can I access this game event?\u003C/p\u003E\n"},{"CreatedByName":"EladDv","CreatedById":118368,"CreatedDateTime":"2015-09-10T21:19:56Z","Content":"\n\u003Cp\u003Egameevents.onvesseldocked() is the method\u003C/p\u003E\n"},{"CreatedByName":"MrHappyFace","CreatedById":76365,"CreatedDateTime":"2015-09-10T21:46:33Z","Content":"\n\u003Cp\u003EIt\u0027s not a method, it\u0027s a static EventData object, found in the GameEvents class. Simply call GameEvents.onVesselDocked.Add(method) to subscribe to it, and GameEvents.onVesselDocked.Remove(method) to unsubscribe.\u003C/p\u003E\u003Cp\u003EExample:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003Epublic class GameEventSubscriber : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E                void Start()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tGameEvents.onHideUI.Add (OnHideUI);\u003Cbr\u003E\t\t}\u003Cbr\u003E                void OnDestroy()\u003Cbr\u003E                {\u003Cbr\u003E                        //this part is important too!\u003Cbr\u003E                        GameEvents.onHideUI.Remove(OnHideUI);\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\tvoid OnHideUI()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tDebug.Log(\u0022OnHideUI\u0022);\u003Cbr\u003E\t\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EUnsubscribing, by calling event.Remove is important, becausde if you don\u0027t then the same method could build up, and you\u0027d have many calls of the same method for the same event.\u003C/p\u003E\n"}]}