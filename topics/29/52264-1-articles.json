{"TopicId":52264,"ForumId":29,"TopicTitle":"Persistent variables in InternalModule","CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-07T19:18:29Z","PageNum":1,"Articles":[{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-07T19:18:29Z","Content":"\n\u003Cp\u003ESo I\u0027m writing an InternalModule, and I want a variable to be persistent.\u003C/p\u003E\u003Cp\u003EIf that were a PartModule, that would not be a problem, because I\u0027d just have to [KSPField(isPersistant = true)] and it would get saved. But the state of InternalModules and internals themselves does not get natively saved in the persistence files, so that gets me nothing.\u003C/p\u003E\u003Cp\u003EThere are a lot of complicated ideas floating around in my head about getting some other component to deal with the saving for me, but I can\u0027t shake off the feeling that I\u0027m missing some simple mechanism that would let me do without other components.\u003C/p\u003E\u003Cp\u003EAny advice?\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2013-11-07T21:39:11Z","Content":"\n\u003Cp\u003EI\u0027m not sure if it is the \u0027correct\u0027 way, but on my Touchscreen mod to save my window positions and size I used the config nodes to read variables from and save them to a .cfg file in my mod directory.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOSKNode = ConfigNode.Load(KSPUtil.ApplicationRootPath \u002B \u0022GameData/Diazo/OSK/OSK.cfg\u0022); //load OSK.cfg file from my mod directory as confignode named OSKNode\u003Cbr\u003EOSKWinScale = Convert.ToInt32(OSKNode.GetValue(\u0022OSKWindowScale\u0022)); //read value \u0027OSKWindowScale\u0027 from OSK.cfg into OSKWinScale variable. Note confignodes use strings, so I\u0027m converting it from a string to integer here.\u003Cbr\u003EOSKNode.SetValue(\u0022OSKWindowScale\u0022, OSKWinScale.ToString()); //write the value of OSKWinScale variable to the OSKWindowScale value in the confignode OSKNode, coverting from type Int to Str\u003Cbr\u003EOSKNode.Save(KSPUtil.ApplicationRootPath \u002B \u0022GameData/Diazo/OSK/OSK.cfg\u0022); //save the value of OSKNode in memory to disk so that it saves when KSP closes.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis code refences file OSK.cfg which is a text file that contains:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOSKWindowScale = 2\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMore variables can be added on additional lines in the OSK.cfg file.\u003C/p\u003E\u003Cp\u003EIt is pretty straightforward. The only catch is that they have to be strings when saved to the config node so this method does (probably) require conversion of data types.\u003C/p\u003E\u003Cp\u003EThe other limitation is that this is global across all profiles.\u003C/p\u003E\u003Cp\u003EThat works for my Touchscreen mod as that will be the same across profiles, but for something like a resource mod that changes on different profiles you would have to save the file to each profile somehow.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003Cp\u003Eedit: Hmm. Just looked up InternalModule. You would have to create a new value in the confignode for each part somehow? Maybe the PartID?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-07T22:16:09Z\u0022 title=\u002211/07/2013 10:16  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 7, 2013\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-11-08T01:30:18Z","Content":"\n\u003Cp\u003EIt looks like the classes were created with the same save system in mind as PartModules use, with Save(cfgNode), OnSave(...), Fields and all that stuff, but i couldn\u0027t get OnSave to execute, so they might just haven\u0027t finished it. I think thats kinda good... since adding internal modules to a save generated by this stupid cfg-node-system would have bloated it even more. Anyway, the only reasonable way i see to get you data into the games save file is by using a PartModule for it...\u003C/p\u003E\u003Cp\u003EOfc using an external file as suggested by Diazo is also an option, though might not optimal for vessel-related status data. For example loading the correct data for each of the save files.\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-08T07:56:51Z","Content":"\n\u003Cp\u003EExternal file, as well as all the mechanics for storing data directly in the persistence file are going to totally suck for vessel related data, because then I have to care about vessels. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E The smoothest idea I had so far was to AddModule a module to the part that holds the internal and use that, but modules added with AddModule are not persistent.\u003C/p\u003E\u003Cp\u003ESo I guess I\u0027ll have to add one directly. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"pizzaoverhead","CreatedById":26349,"CreatedDateTime":"2013-11-08T10:30:39Z","Content":"\n\u003Cp\u003EIf you want to roll your own persistence handling, XmlSerializer is pretty handy (assuming it is allowed in KSP).\u003C/p\u003E\u003Cp\u003EHere\u0027s a quick example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic class PersistentRasterPropMonitor\u003Cbr\u003E{\u003Cbr\u003E\tprivate string _transformName;\u003Cbr\u003E\tprivate string _textureLayerID;\u003Cbr\u003E\tprivate Transform _fontTransform;\u003Cbr\u003E\tprivate Color _blankingColor;\u003Cbr\u003E\tprivate int _screenRows;\u003Cbr\u003E\tprivate int _screenColumns;\u003Cbr\u003E\tprivate int _screenWidth;\u003Cbr\u003E\tprivate int _screenHeight;\u003Cbr\u003E\tprivate int _fontWidth;\u003Cbr\u003E\tprivate int _fontHeight;\u003Cbr\u003E\u003Cbr\u003E\tpublic PersistentRasterPropMonitor(string transformName,\u003Cbr\u003E\t\tstring textureLayerID,\u003Cbr\u003E\t\tTransform fontTransform,\u003Cbr\u003E\t\tColor blankingColor,\u003Cbr\u003E\t\tint screenRows,\u003Cbr\u003E\t\tint screenColumns,\u003Cbr\u003E\t\tint screenWidth,\u003Cbr\u003E\t\tint screenHeight,\u003Cbr\u003E\t\tint fontWidth,\u003Cbr\u003E\t\tint fontHeight)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tthis._textureLayerID = textureLayerID;\u003Cbr\u003E\t\tthis._fontTransform = fontTransform;\u003Cbr\u003E\t\tthis._blankingColor = blankingColor;\u003Cbr\u003E\t\tthis._screenRows = screenRows;\u003Cbr\u003E\t\tthis._screenColumns = screenColumns;\u003Cbr\u003E\t\tthis._this._screenWidth = screenWidth;\u003Cbr\u003E\t\tthis._this._screenHeight = screenHeight;\u003Cbr\u003E\t\tthis._fontWidth = fontWidth;\u003Cbr\u003E\t\tthis._fontHeight = fontHeight;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic string TransformName;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _transformName; }\u003Cbr\u003E\t\tset { _transformName = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic string TextureLayerID;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _textureLayerID; }\u003Cbr\u003E\t\tset { _textureLayerID = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic Transform FontTransform;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _fontTransform; }\u003Cbr\u003E\t\tset { _fontTransform = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic Color BlankingColor;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _blankingColor; }\u003Cbr\u003E\t\tset { _blankingColor = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int ScreenRows;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _screenRows; }\u003Cbr\u003E\t\tset { _screenRows = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int ScreenColumns;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _screenColumns; }\u003Cbr\u003E\t\tset { _screenColumns = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int ScreenWidth;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _screenWidth; }\u003Cbr\u003E\t\tset { _screenWidth = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int ScreenHeight;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _screenHeight; }\u003Cbr\u003E\t\tset { _screenHeight = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int FontWidth;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _fontWidth; }\u003Cbr\u003E\t\tset { _fontWidth = value; }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic int FontHeight;\u003Cbr\u003E\t{\u003Cbr\u003E\t\tget { return _fontHeight; }\u003Cbr\u003E\t\tset { _fontHeight = value; }\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eprivate static void Serialize(List\u0026lt;PersistentRasterPropMonitor\u0026gt; monitor)\u003Cbr\u003E{\u003Cbr\u003E\tXmlSerializer serializer = new XmlSerializer(typeof(List\u0026lt;PersistentRasterPropMonitor\u0026gt;));\u003Cbr\u003E\tTextWriter textWriter = new StreamWriter(KSPUtil.ApplicationRootPath \u002B \u0022Monitor/Monitor.xml\u0022);\u003Cbr\u003E\tserializer.Serialize(textWriter, monitor);\u003Cbr\u003E\ttextWriter.Close();\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eprivate static List\u0026lt;PersistentRasterPropMonitor\u0026gt; Deserialize()\u003Cbr\u003E{\u003Cbr\u003E\tXmlSerializer deserializer = new XmlSerializer(typeof(List\u0026lt;PersistentRasterPropMonitor\u0026gt;));\u003Cbr\u003E\tList\u0026lt;PersistentRasterPropMonitor\u0026gt; monitor;\u003Cbr\u003E\tusing (TextReader textReader = new StreamReader(KSPUtil.ApplicationRootPath \u002B \u0022Monitor/Monitor.xml\u0022);\u003Cbr\u003E\t{\u003Cbr\u003E\t\tmonitor = (List\u0026lt;PersistentRasterPropMonitor\u0026gt;)deserializer.Deserialize(textReader);\u003Cbr\u003E\t\ttextReader.Close();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\treturn monitor;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMonitor.xml output:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u0026lt;?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022?\u0026gt;\u003Cbr\u003E\u0026lt;PersistentRasterPropMonitor xmlns:xsi=\u0022http://www.w3.org/2001/XMLSchema-instance\u0022 xmlns:xsd=\u0022http://www.w3.org/2001/XMLSchema\u0022\u0026gt;\u003Cbr\u003E  \u0026lt;TransformName\u0026gt;aTransformName\u0026lt;/TransformName\u0026gt;\u003Cbr\u003E  \u0026lt;TextureLayerID\u0026gt;aTextureLayerID\u0026lt;/TextureLayerID\u0026gt;\u003Cbr\u003E  \u0026lt;FontTransform\u0026gt;whateverTransform.ToString()Returns?\u0026lt;/FontTransform\u0026gt;\u003Cbr\u003E  \u0026lt;BlankingColor\u0026gt;Black\u0026lt;/BlankingColor\u0026gt;\u003Cbr\u003E  \u0026lt;ScreenRows\u0026gt;25\u0026lt;/ScreenRows\u0026gt;\u003Cbr\u003E  \u0026lt;ScreenColumns\u0026gt;80\u0026lt;/ScreenColumns\u0026gt;\u003Cbr\u003E  \u0026lt;ScreenWidth\u0026gt;800\u0026lt;/ScreenWidth\u0026gt;\u003Cbr\u003E  \u0026lt;ScreenHeight\u0026gt;600\u0026lt;/ScreenHeight\u0026gt;\u003Cbr\u003E  \u0026lt;FontWidth\u0026gt;7\u0026lt;/FontWidth\u0026gt;\u003Cbr\u003E  \u0026lt;FontHeight\u0026gt;14\u0026lt;/FontHeight\u0026gt;\u003Cbr\u003E\u0026lt;/PersistentRasterPropMonitor\u0026gt;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-08T18:54:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022pizzaoverhead\u0022 data-cite=\u0022pizzaoverhead\u0022\u003E\u003Cdiv\u003EIf you want to roll your own persistence handling, XmlSerializer is pretty handy (assuming it is allowed in KSP).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not above doing so, but I definitely don\u0027t want to deal with per-vessel (and even per-part, in this particular case) data myself, so it\u0027s more so about where to store it than how to serialize it.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2013-11-09T10:42:08Z","Content":"\n\u003Cp\u003EIf it needs to be persistent per-save (so different for quicksave/persistent.sfs), the best way I\u0027ve found is subclassing ScenarioModule and handling your business in the OnSave/OnLoad functions there. You\u0027ll still have to deal with matching the data to a vessel and part but that\u0027s easily done with the vessel\u0027s GUID (id) and part flightIDs\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-09T10:44:15Z","Content":"\n\u003Cp\u003EAre partIDs unique per part globally, or only within the flight? Do they ever change?\u003C/p\u003E\u003Cp\u003EAnd most importantly, how do I find which parts no longer exist anywhere?\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-09T13:27:35Z","Content":"\n\u003Cp\u003E...and for that matter, how exactly do you get ScenarioModule to start?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2013-11-09T13:54:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003EAre partIDs unique per part globally, or only within the flight? Do they ever change?\u003Cp\u003EAnd most importantly, how do I find which parts no longer exist anywhere?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EflightIDs don\u0027t change between loads (but constructID does). I don\u0027t know if they\u0027re globally unique or not. Probable but unconfirmed. As for finding parts which no longer exist, that might not even be necessary depending on how the game saves. But you could easily look through existing vessel guids and part flightIDs; if you don\u0027t find the one you\u0027re looking for it\u0027s gone.\u003C/p\u003E\u003Cp\u003EHere\u0027s some untested code I hacked together that might help you decide if you want to try this route. Note that I\u0027ve never worked with Internal* stuff before so it might need fixing. It it works, every time the game saves, your module\u0027s OnSave should be called. If you\u0027re really lucky, KSPFields might work as well. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003Epublic class InternalModuleSaverScenarioCreator : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public void Start()\u003Cbr\u003E    {\u003Cbr\u003E        bool scenarioExists = !HighLogic.CurrentGame.scenarios.All(scenario =\u0026gt;\u003Cbr\u003E            scenario.moduleName != typeof(InternalModuleSaver).Name\u003Cbr\u003E        );\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        if (!scenarioExists)\u003Cbr\u003E        {\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Adding InternalModule scenario to game \u0027\u0022 \u002B HighLogic.CurrentGame.Title \u002B \u0022\u0027\u0022);\u003Cbr\u003E                HighLogic.CurrentGame.AddProtoScenarioModule(typeof(InternalModuleSaver), new GameScenes[1] { GameScenes.FLIGHT });\u003Cbr\u003E                // the game will add this scenario to the appropriate persistent file on save from now on\u003Cbr\u003E            }\u003Cbr\u003E            catch (ArgumentException ae)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.LogException(ae);\u003Cbr\u003E            }\u003Cbr\u003E            catch\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Unknown failure while adding scenario.\u0022);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        Destroy(this);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// The main purpose of this module is to get our paws on the game\u0027s ConfigNode\u003Cbr\u003E/// being saved to so we can store our own data in there as well.\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003Epublic class InternalModuleSaver : ScenarioModule\u003Cbr\u003E{\u003Cbr\u003E    public override void OnSave(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnSave(node);\u003Cbr\u003E\u003Cbr\u003E        if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E        {\u003Cbr\u003E            /* Node structure (as I would envision it)\u003Cbr\u003E             * \u003Cbr\u003E             * SCENARIO\u003Cbr\u003E             * {\u003Cbr\u003E             *     name = blah // here by default\u003Cbr\u003E             *     scene = 7 // here by default\u003Cbr\u003E             *     \u003Cbr\u003E             *     VESSEL_INTERNAL // keep internal modules for each vessel organized separately\u003Cbr\u003E             *     {\u003Cbr\u003E             *          guid = vessel\u0027s guid here: if we can\u0027t find the vessel it\u0027s gone and none of these \u003Cbr\u003E             *                  inner nodes are relevant\u003Cbr\u003E             *          \u003Cbr\u003E             *          YOURINTERNALMODULE // an instance of your module that combines identification and data\u003Cbr\u003E             *          {\u003Cbr\u003E             *              flightID = part this module is attached to (may be unnecessary)\u003Cbr\u003E             *              propID = id or other way of identifying which InternalProp the module is attached to\u003Cbr\u003E             *              \u003Cbr\u003E             *              DATA\u003Cbr\u003E             *              {\u003Cbr\u003E             *                  your stuff here\u003Cbr\u003E             *              }\u003Cbr\u003E             *          }\u003Cbr\u003E             *     }\u003Cbr\u003E             *     VESSEL_INTERNAL {} etc\u003Cbr\u003E             */\u003Cbr\u003E\u003Cbr\u003E            foreach (Vessel vessel in FlightGlobals.Vessels)\u003Cbr\u003E            {\u003Cbr\u003E                ConfigNode vesselNode = node.AddNode(\u0022VESSEL_INTERNAL\u0022);\u003Cbr\u003E                vesselNode.AddValue(\u0022guid\u0022, vessel.id.ToString());\u003Cbr\u003E\u003Cbr\u003E                foreach (Part part in vessel.parts)\u003Cbr\u003E                    foreach (InternalProp iprop in part.internalModel.props)\u003Cbr\u003E                        foreach (var yourModule in iprop.internalModules.OfType\u0026lt;YourInternalModule\u0026gt;())\u003Cbr\u003E                        {\u003Cbr\u003E                            ConfigNode internalModuleNode = vesselNode.AddNode(\u0022YOURINTERNALMODULE\u0022);\u003Cbr\u003E                            internalModuleNode.AddValue(\u0022flightID\u0022, part.flightID);\u003Cbr\u003E                            internalModuleNode.AddValue(\u0022propID\u0022, iprop.propID);\u003Cbr\u003E\u003Cbr\u003E                            yourModule.Save(internalModuleNode.AddNode(\u0022DATA\u0022));\u003Cbr\u003E                            // save or OnSave?  maybe try both\u003Cbr\u003E                        }\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnLoad(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnLoad(node);\u003Cbr\u003E\u003Cbr\u003E        // reverse OnSave here\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-09T14:14:35Z","Content":"\n\u003Cp\u003EOoh, thanks. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI actually wrote a few pages of ScenarioModule that would keep the data for my InternalModules \u003Cem\u003E(A horrible way to treat C# but it should at least work)\u003C/em\u003E and then realized it\u0027s not loading and isn\u0027t even supposed to load outside a scenario. That kickstarting MonoBehaviour is the missing bit.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2013-11-09T15:54:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI actually wrote a few pages of ScenarioModule that would keep the data for my InternalModules \u003Cem\u003E(A horrible way to treat C# but it should at least work)\u003C/em\u003E \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI know, but I couldn\u0027t find any other decent way to get into the persistent file. When you say \u0022keep its data\u0022 you actually mean just resolving which ConfigNode goes with which internal module, right? You shouldn\u0027t need to keep any InternalModule data in there. Aside from writing the load function, InternalModuleSaver is complete.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-09T15:57:34Z\u0022 title=\u002211/09/2013 03:57  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 9, 2013\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-09T16:48:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EWhen you say \u0022keep its data\u0022 you actually mean just resolving which ConfigNode goes with which internal module, right? You shouldn\u0027t need to keep any InternalModule data in there. Aside from writing the load function, InternalModuleSaver is complete.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, initially I wrote a dangling data structure for general variable storage. I even got it to serialize, but now I have problems getting at the ScenarioModule to call it\u0027s getter/setter functions. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E But let me explain the situation in more detail...\u003C/p\u003E\u003Cp\u003ESo I have N InternalModules which live inside an InternalProp each, within the same InternalPart, which is hanging on a Part. Let\u0027s say they\u0027re all displays.\u003C/p\u003E\u003Cp\u003ENow, every display has a current page that it is displaying. IVAs get recreated wholesale pretty often, so whenever you come back to IVA from pretty much anywhere, the state of the entire room is a blank slate, and if you changed any current pages, they\u0027re back to the ones they got on init. I want them to remember the pages they got switched to, and since I also have a boatload of animated switches (light switches in particular) which also want the same feature, I need a general mechanism to save that somewhere -- it needs to be accessible from multiple diverse modules, just one won\u0027t do, so I\u0027d need to figure out how your code works first anyway.\u003C/p\u003E\u003Cp\u003ERegardless, I think I found something that prevents going that route at all:\u003C/p\u003E\u003Cp\u003EInternalModules actually appear to initialize after KSPAddons ...but \u003Cem\u003Ebefore\u003C/em\u003E ScenarioModules.\u003C/p\u003E\u003Cp\u003EO_o\u003C/p\u003E\n"},{"CreatedByName":"Starwaster","CreatedById":71262,"CreatedDateTime":"2013-11-09T19:42:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003EAre partIDs unique per part globally, or only within the flight? Do they ever change?\u003Cp\u003EAnd most importantly, how do I find which parts no longer exist anywhere?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPartIDs (you mean where within the PART module it says name = xxxxx right?) do not change at all. If a craft uses radiator1 on one of its parts, it\u0027s the same for every radiator1 on that craft and on every other craft ever. \u003C/p\u003E\u003Cp\u003EThere are two possible exceptions that probably don\u0027t matter to you.\u003C/p\u003E\u003Cp\u003E#1 - within a save file (*.sfs) underscores are represented by periods.\u003C/p\u003E\u003Cp\u003E#2 - within a craft file, every part name has an apparently random digit appended to it.\u003C/p\u003E\u003Cp\u003ENot sure what you mean by the second question....? Parts in the save file that you no longer have the part files for? Or do you mean something else?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2013-11-10T02:11:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003Eit needs to be accessible from multiple diverse modules, just one won\u0027t do, so I\u0027d need to figure out how your code works first anyway.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EThe example code bothers with flightIDs for exactly that reason.\u003C/span\u003E Edit: I see what you\u0027re saying now. What prevents you from making relevant InternalModules share a common interface?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EInternalModules actually appear to initialize after KSPAddons ...but before ScenarioModules.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat shouldn\u0027t matter. My understanding was that they don\u0027t receive OnLoad/OnSave at all, but even if they do and calling them again from ScenarioModule somehow screws things up, you could just move your persistent logic to a function unique to your class (CustomLoad/CustomSave) and then call those functions in ScenarioModule:OnSave instead.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-10T02:16:21Z\u0022 title=\u002211/10/2013 02:16  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 10, 2013\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-10T09:46:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starwaster\u0022 data-cite=\u0022Starwaster\u0022\u003E\u003Cdiv\u003EPartIDs (you mean where within the PART module it says name = xxxxx right?)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, I mean whatever gets saved in persistent.sfs as \u0022uid\u0022 for example. Upon further examination, it seems they\u0027re probably unique within the ship, but not globally.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EThe example code bothers with flightIDs for exactly that reason.\u003C/span\u003E Edit: I see what you\u0027re saying now. What prevents you from making relevant InternalModules share a common interface?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis being my first week with C#/.NET, mostly. I barely know where most of my usual tools are, let alone the unusual ones, and I\u0027m not really a programmer in the first place. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EIn the end I decided that this whole thing is overkill, though. Props that use InternalModules don\u0027t exist outside IVAs, whenever one is working with an IVA, they also can modify the command pod this IVA belongs to and add a PartModule to it. Scenario modules just make it easier for me to screw up, or worse, screw something else up. Using a PartModule for storage leaves me only with the problem of how to get an arbitrary dictionary of name=value pairs to store with a KSPField, because my InternalModules know better when they need to store something and when they don\u0027t.\u003C/p\u003E\u003Cp\u003EEven that proved more complicated than I expected. Trying to mimic all the available examples that use KSPField to store an arbitrary type, \u003Ca href=\u0022https://github.com/taraniselsu/TacExamples/blob/master/05-KspFields/Source/KspFieldsModule.cs\u0022 rel=\u0022external nofollow\u0022\u003Elike this one\u003C/a\u003E, for some reason failed to work at all (Load/Save of the class just don\u0027t get called and I can\u0027t see what am I doing differently that could cause this) and I couldn\u0027t find a working example among all the currently working mods with a published source that I could remember. Because OnLoad/OnSave get called after loading and saving of the regular KSPFields is done, I couldn\u0027t just pack a dictionary into a string right before it\u0027s to be saved either.\u003C/p\u003E\u003Cp\u003EI had to basically settle for unpacking that dictionary from a string every time I store a variable and packing it back immediately, which is crude beyond words, but at least works reliably.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2013-11-10T15:55:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003Ewhenever one is working with an IVA, they also can modify the command pod this IVA belongs to and add a PartModule to it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf you can make PartModule work, that\u0027s absolutely the way to go. I\u0027ve never worked with IVA stuff so I had no idea you could use PartModules there.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003E\u003Ca href=\u0022https://github.com/taraniselsu/TacExamples/blob/master/05-KspFields/Source/KspFieldsModule.cs\u0022 rel=\u0022external nofollow\u0022\u003Elike this one\u003C/a\u003E, for some reason failed to work at all (Load/Save of the class just don\u0027t get called and I can\u0027t see what am I doing differently that could cause this) and I couldn\u0027t find a working example among all the currently working mods with a published source that I could remember.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs far as I know, nobody has managed to get custom KSPField types to work sadly. I\u0027d love to be wrong.\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-10T16:01:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EIf you can make PartModule work, that\u0027s absolutely the way to go. I\u0027ve never worked with IVA stuff so I had no idea you could use PartModules there.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can\u0027t. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E An InternalModule can pretty easily find a PartModule that lives inside a specific part and make use of it\u0027s KSPField indirectly, though.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EAs far as I know, nobody has managed to get custom KSPField types to work sadly. I\u0027d love to be wrong.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGah!\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-11-10T16:51:02Z","Content":"\n\u003Cp\u003EWhat was the problem with a PartModule? Just make sure its properly added to the parts prefab on ksp startup, either by adding it to your own parts cfg, using ModuleManager or directly manipulating PartLoader.LoadedPartsList[yourPartIndex].partPrefab, and it should load its data accordingly, just like any other PartModule. Ofc there are a few drawbacks... adding modules to foreign/a lot of parts can cause corrupted save games when adding mods (since the order of modules matters when loading) or compatibility issues in general. But it should work just fine for your own part. Saving data for multiple InternalModules in a single PartModule might be a little tricky, since you might not have KSPFields for an unknown number of InternalModules, but in the worst case you can still use config nodes directly... (even if IConfigNode would work, it would be pretty much the same amount of work anyway)\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-10T16:57:30Z","Content":"\n\u003Cp\u003EThere were two problems, the first being that I wanted to avoid making the user do meaningless configuration, because I have far too much meaningful configuration for the user to do. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe second one was that IConfigNodes don\u0027t work and OnSave/OnLoad execute after Save/Load are done, so I can\u0027t use them to serialize/deserialize something that will be kept in a KSPField string, and I don\u0027t know enough about how to properly manipulate config nodes directly from those in a different way.\u003C/p\u003E\u003Cp\u003EWell, regardless, it\u0027s horrible but it works: \u003Ca href=\u0022https://github.com/Mihara/RasterPropMonitor/blob/master/JSIInternalPersistence.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Mihara/RasterPropMonitor/blob/master/JSIInternalPersistence.cs\u003C/a\u003E\u003C/p\u003E\n"}]}