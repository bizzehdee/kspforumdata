{"TopicId":83448,"ForumId":29,"TopicTitle":"PartModules, submodules and class extensions","CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-08-31T11:38:19Z","PageNum":1,"Articles":[{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-08-31T11:38:19Z","Content":"\n\u003Cp\u003EHi\u003C/p\u003E\u003Cp\u003EI\u0027ve been pondering how some of the stock modules are set out, and hoping someone can throw some light on it for me. To explain:\u003C/p\u003E\u003Cp\u003EModuleWheel is called in the part.cfg like any other PartModule:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ModuleWheel\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBut, it has what I assume is an extension called Wheel, which is called from within the PartModule parenthesis:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ModuleWheel\u003Cbr\u003E\u003Cbr\u003EWHEEL\u003Cbr\u003E{\u003Cbr\u003E//some stuff specific to Wheel here\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can call many instances of Wheel from within ModuleWheel. So my question is, how is this setup in C#? I had assumed that Wheel is simply a class extension to ModuleWheel, but trying to replicate that myself doesn\u0027t appear to work. For example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Enamespace KerbalFoundries\u003Cbr\u003E{\u003Cbr\u003E    [KSPModule(\u0022ClassTest\u0022)]\u003Cbr\u003E    class ClassTest : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public float testFloat;\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                testFloat = 2.55f;\u003Cbr\u003E                print(\u0022ClassTest called\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis works absolutely fine when called in a .cfg as normal:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ClassTest\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI also have a class extension:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace KerbalFoundries\u003Cbr\u003E{\u003Cbr\u003E    class ClassExtensionTest : ClassTest\u003Cbr\u003E    {\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        float extensionFloat;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022ClassExtensionTest called\u0022); \u003Cbr\u003E                print(testFloat);\u003Cbr\u003E                print(extensionFloat);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, assuming that\u0027s the right way to set it up (and that\u0027s a big assumption), how do you call it from the config from within ClassTest? I assume the capitalisation of WHEEL in the part.cfg is significant, but I\u0027m lost from here. Just a pointer to a mod with source that\u0027s got it figured out would be gratefully received, but if someone can explain more fully that would be brilliant.\u003C/p\u003E\u003Cp\u003EMany thanks for your continued help for a programming newbie.\u003C/p\u003E\u003Cp\u003ELo-Fi\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-08-31T14:02:08Z","Content":"\n\u003Cp\u003EOkay, extending a partModule works slightly differently then you are thinking.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Enamespace KerbalFoundries\u003Cbr\u003E{\u003Cbr\u003E    //[KSPModule(\u0022ClassTest\u0022)]   commented this line out, I don\u0027t use it in my own mods so I\u0027m not sure what it does.\u003Cbr\u003E    public class ClassTest : PartModule  //made the module public, not sure it is necessary but it makes sure calls from other places work fine\u003Cbr\u003E    {\u003Cbr\u003E        public float testFloat;\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                testFloat = 2.55f;\u003Cbr\u003E                print(\u0022ClassTest called\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003Epublic class ClassTestExtension : ClassTest  //made the module public, not sure it is necessary but it makes sure calls from other places work fine\u003Cbr\u003E    {\u003Cbr\u003E        public float testFloat;\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                testFloat = 2.55f;\u003Cbr\u003E                print(\u0022ClassTestExtension called\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis code will call both ClassTest and ClassTestExtension as follows\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ClassTest\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ClassTestExtension\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote they are on the same \u0027level\u0027 in the part.cfg. Anything that extends PartModule, no matter how many layers deep, is referred to in the part.cfg this way.\u003C/p\u003E\u003Cp\u003EThe WHEEL in ModuleWheel that you see is a sub-node. \u003C/p\u003E\u003Cp\u003EIf you have a part.cfg like so\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename = ClassTest\u003Cbr\u003ESUBNODE\u003Cbr\u003E{\u003Cbr\u003Ename = SubNode\u003Cbr\u003E}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can refer to it as follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Enamespace KerbalFoundries\u003Cbr\u003E{\u003Cbr\u003E    //[KSPModule(\u0022ClassTest\u0022)]   commented this line out, I don\u0027t use it in my own mods so I\u0027m not sure what it does.\u003Cbr\u003E    public class ClassTest : PartModule  //made the module public, not sure it is necessary but it makes sure calls from other places work fine\u003Cbr\u003E    {\u003Cbr\u003E        public float testFloat;\u003Cbr\u003Epublic SubNode ourTestNode\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                testFloat = 2.55f;\u003Cbr\u003E                print(\u0022ClassTest called\u0022);\u003Cbr\u003EourTestNode = new SubNode(); //define your SubNode class as normal, this example assumes it has a \u0022public string name;\u0022 field defined.\u003Cbr\u003E        }\u003Cbr\u003E//how do I tab over in the forum edit box anyway?\u003Cbr\u003Epublic override void OnLoad(ConfigNode node)\u003Cbr\u003E{\u003Cbr\u003EConfigNode subNodeLoad = node.GetNode(\u0022SUBNODE\u0022); //this example assumes a single SUBNODE, if you have (or may have) multiple SUBNODE, you use node.GetNodes to return a list of SUBNODE.\u003Cbr\u003EourTestNode.name = node.GetValue(\u0022name\u0022); //\u003Cbr\u003Eprint(\u0022SUBNODE loaded named: \u0022 \u002B ourTestNode.name);\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHope that clarifies things.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-08-31T19:16:18Z","Content":"\n\u003Cp\u003EAh, thanks for the detailed explanation. Gives me what I need to continue reading up, I just couldn\u0027t work out what I was looking at. Am I missing a reference, though, or did you mean ConfigNode rather than SubNode in the code?\u003C/p\u003E\u003Cp\u003EAlso, are there performance advantages of either method? By which I mean calling as a partmodule several times, rather than as nodes within a partmodule. Or is this really for programmatical convenience?\u003C/p\u003E\u003Cp\u003ENewbie programmer, sorry for what may seem like silly questions.\u003C/p\u003E\u003Cp\u003EThanks again\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-08-31T19:26:20Z","Content":"\n\u003Cp\u003EAnything inside a MODULE is simply data storage for that PartModule. If it has nodes as well as values, that just means that PartModule is set up to expect and parse certain nodes as well. For example, if there\u0027s a KSPField that\u0027s a float curve, the way data is serialized for it is as a node (of the name of the float curve, like atmosphereCurve) and inside that a series of \u0022key\u0022 values. Probably ModuleWheel has a list of wheels which it reads based off getting all WHEEL nodes in its confignode and parsing each. Same as how ModuleEngines has a List\u0026lt;Propellant\u0026gt; propellants, which is filled by finding and parsing all PROPELLANT nodes inside the MODULE node for it.\u003C/p\u003E\u003Cp\u003Etl;dr you\u0027re not \u0022calling a class\u0022 with *anything* you put inside a MODULE node; *all* that\u0027s inside the node is merely serialized data for the PartModule. If the PartModule doesn\u0027t know what to do with the nodes and values, they will have no effect.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-08-31T21:21:34Z","Content":"\n\u003Cp\u003ESo PartModules don\u0027t have a mechanism to parse and serialise the data for such an entry a .cfg in the same way as a KSPField, I would have to write that into my partmodule myself(?) Thanks, that clears things up even further. I have a working method calling partmodules that grab variables from each other, I just wondered if the \u0027stock\u0027 way (if you want to call it that) would be easier or more efficient and I was missing an obvious feature.\u003C/p\u003E\u003Cp\u003EThanks again.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-08-31T22:17:20Z","Content":"\n\u003Cp\u003EAll a KSPField is, is this:\u003C/p\u003E\u003Cp\u003EWhen a PartModule is created from cfg, all KSPField-tagged members will be set based on parsing the cfg (where simple types are just parsed, FloatCurves have Load(floatcurvenode) called, etc ) and the OnLoad method is called, where you can handle custom parsing (i.e. find all WHEEL sub-nodes in your node and do stuff with them).\u003C/p\u003E\u003Cp\u003EIf the data type you are trying to read is not handled by default by stock code, then you will have to parse it yourself in OnLoad(). For instance, if it\u0027s a double. KSP doesn\u0027t parse doubles itself (KSPField doesn\u0027t work for doubles).\u003C/p\u003E\u003Cp\u003EAlso, any KSPField with persistent=true will be *saved* to a node when OnSave is called (when a vessel goes on rails, for warp or for saving to .sfs or .craft) and if KSP doesn\u0027t handle your data itself you are responsible for saving persistent data in OnSave.\u003C/p\u003E\u003Cp\u003EAnd you\u0027re most welcome!\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-09-01T00:47:45Z","Content":"\n\u003Cp\u003EExtremely helpful, thanks for taking the time to elaborate. I\u0027ll have a look at some source that makes those calls too, it always helps to know this kind of thing in case its something I end up needing to deal with. I didn\u0027t know about the parsing of the doubles either, that may also save me a few hours in the future.\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n"}]}