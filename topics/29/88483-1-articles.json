{"TopicId":88483,"ForumId":29,"TopicTitle":"Quaternions are driving me insane!","CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-25T17:40:47Z","PageNum":1,"Articles":[{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-25T17:40:47Z","Content":"\n\u003Cp\u003EI am trying to prevent ANY roll from happening when setting up a new SAS target:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E            //get target vector(navball)\u003Cbr\u003E            Vector3 v = new Vector3(In(\u0022E/W\u0022).AsFloat(), In(\u0022U/D\u0022).AsFloat(), In(\u0022N/S\u0022).AsFloat()).normalized;\u003Cbr\u003E            //create rotation\u003Cbr\u003E            Quaternion rot = Quaternion.LookRotation(v, Vector3.up) * Quaternion.Euler(90, 0, 0);\u003Cbr\u003E            Quaternion roll = Quaternion.identity;\u003Cbr\u003E            //keep absolute roll ?\u003Cbr\u003E            if (In(\u0022Keep Roll\u0022).AsBool())\u003Cbr\u003E            {\u003Cbr\u003E                //read current rotation (navball)\u003Cbr\u003E                Quaternion relRot = Program.VesselInfo.WorldToReference(Program.VesselInfo.VesselOrientation, VesselInformation.FrameOfReference.Navball);\u003Cbr\u003E                //calculate current roll\u003Cbr\u003E                Vector3 absUp = (Vector3.forward * -1f);\u003Cbr\u003E                Vector3 dir = relRot * Vector3.up;\u003Cbr\u003E                Vector3 up = relRot * absUp;\u003Cbr\u003E                float rollC = Mathf.Atan2(\u003Cbr\u003E                    Vector3.Dot(dir, Vector3.Cross(absUp, up)),\u003Cbr\u003E                    Vector3.Dot(absUp, up)) * Mathf.Rad2Deg;\u003Cbr\u003E                //get navball horizontal angles\u003Cbr\u003E                float angleC = Mathf.Atan2(dir.z, dir.x);\u003Cbr\u003E                float angleT = Mathf.Atan2(v.z, v.x);\u003Cbr\u003E                //delta of angles\u003Cbr\u003E                float d = Mathf.DeltaAngle(angleC, angleT);\u003Cbr\u003E\u003Cbr\u003E                //add delta to current angle\u003Cbr\u003E                roll = Quaternion.AngleAxis(rollC \u002B d, v);\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                roll = Quaternion.AngleAxis(In(\u0022Roll\u0022).AsFloat(), v);\u003Cbr\u003E            }\u003Cbr\u003E            rot = roll * rot;\u003Cbr\u003E            //apply sas target\u003Cbr\u003E            Program.SASController.SASTarget = Program.VesselInfo.ReferenceToWorld(rot, VesselInformation.FrameOfReference.Navball);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EUnfortunately this does not work, and debugging quaternions without any actual debugging is a nightmare. Could anyone provide me with a way to make a quaternion but keep the roll component of another quaternion intact? By that I don\u0027t mean that the roll value should be the same, contrary, the roll value will most likely change. I want a change of HEADING only, while preventing any roll from happening relative to the navball UP.\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2014-10-25T17:51:13Z","Content":"\n\u003Cp\u003EQuaternions are a mess for humans to understand. Supposedly they\u0027re more resource-efficient, which is why Unity uses them, but they require years of study to understand enough to use. Quaternions are also immune to gimbal lock, which would make things very hard in KSP.\u003C/p\u003E\u003Cp\u003EI\u0027d recommend using \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Quaternion.Euler.html\u0022 rel=\u0022external nofollow\u0022\u003EQuaternion.Euler(Vector3 euler)\u003C/a\u003E to convert from a 3-dimensional rotation to a Quaternion and \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Quaternion-eulerAngles.html\u0022 rel=\u0022external nofollow\u0022\u003EQuaternion.eulerAngles\u003C/a\u003E to get a 3-dimensional representation of a particular quaternion. Probably the best way to deal with Rotations in Unity is to work with Vector3s when directly changing rotations and converting to Quaternions when assigning the final rotation.\u003C/p\u003E\n"},{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-25T18:02:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003EQuaternions are a mess for humans to understand. Supposedly they\u0027re more resource-efficient, which is why Unity uses them, but they require years of study to understand enough to use. Quaternions are also immune to gimbal lock, which would make things very hard in KSP.\u003Cp\u003EI\u0027d recommend using \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Quaternion.Euler.html\u0022 rel=\u0022external nofollow\u0022\u003EQuaternion.Euler(Vector3 euler)\u003C/a\u003E to convert from a 3-dimensional rotation to a Quaternion and \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Quaternion-eulerAngles.html\u0022 rel=\u0022external nofollow\u0022\u003EQuaternion.eulerAngles\u003C/a\u003E to get a 3-dimensional representation of a particular quaternion. Probably the best way to deal with Rotations in Unity is to work with Vector3s when directly changing rotations and converting to Quaternions when assigning the final rotation.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I have worked with Quaternions before, but still I would not know how to counter the roll of a transformation with euler-angles. Any idea? Is my question even understandable ? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2014-10-25T18:24:15Z","Content":"\n\u003Cp\u003EDo you mean relative to the surface of a planet? That\u0027s a bit more complicated and requires getting the normal vector of the planet\u0027s surface, \u003Ca href=\u0022http://answers.unity3d.com/questions/631836/how-i-can-converting-a-direction-vector-to-quatern.html\u0022 rel=\u0022external nofollow\u0022\u003Ethis UnityAnswers page might help\u003C/a\u003E. I\u0027m booting up Unity on my end to see if that answer is valid.\u003C/p\u003E\n"},{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-25T18:26:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003EDo you mean relative to the surface of a planet? That\u0027s a bit more complicated and requires getting the normal vector of the planet\u0027s surface, \u003Ca href=\u0022http://answers.unity3d.com/questions/631836/how-i-can-converting-a-direction-vector-to-quatern.html\u0022 rel=\u0022external nofollow\u0022\u003Ethis UnityAnswers page might help\u003C/a\u003E. I\u0027m booting up Unity on my end to see if that answer is valid.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI already convert the rotation of the vessel into the navball / surface frame of reference. Have a look at the code in my post. Also I think euler angles are not suitable to remove roll from a transformation because their values are absolute and not relative to the body. (As far as I know)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-25T18:32:46Z\u0022 title=\u002210/25/2014 06:32  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 25, 2014\u003C/time\u003E by pixartist\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2014-10-25T20:02:34Z","Content":"\n\u003Cp\u003EIn that case, relative rotations are fairly easy, you should be able to subtract the rotation on the surface from the absolute rotation to get relative rotation, for example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EQuaternion relativeRotation = transform.eulerAngles - surfaceRotation\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWith that in mind, roll canceling \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Eshould be\u003C/span\u003E as easy as setting the z-component of that rotation to 0.\u003C/p\u003E\n"},{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-25T23:11:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003EIn that case, relative rotations are fairly easy, you should be able to subtract the rotation on the surface from the absolute rotation to get relative rotation, for example:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EQuaternion relativeRotation = transform.eulerAngles - surfaceRotation\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWith that in mind, roll canceling \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Eshould be\u003C/span\u003E as easy as setting the z-component of that rotation to 0.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, that\u0027s not how euler angles work. The rotations are applied one after another. They are not simple rotations around world axis.\u003C/p\u003E\n"},{"CreatedByName":"a.g.","CreatedById":59470,"CreatedDateTime":"2014-10-26T10:08:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003EQuaternions are a mess for humans to understand. Supposedly they\u0027re more resource-efficient, which is why Unity uses them, but they require years of study to understand enough to use. Quaternions are also immune to gimbal lock, which would make things very hard in KSP.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis really makes no sense. You can use quaternions just fine by thinking about them like weirdly packaged rotation matrices and using the rules of matrix algebra.\u003C/p\u003E\u003Cp\u003EAlso there is actually a way to do \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/73586-Profiling-Debugging-Support-For-KSP-Plugins-%2822-Aug-Unity-4-5%29\u0022 rel=\u0022external nofollow\u0022\u003Ereal debugging\u003C/a\u003E, but you have to use MonoDevelop.\u003C/p\u003E\n"},{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-26T20:37:06Z","Content":"\n\u003Cp\u003EI FINALLY managed to tackle this ..... by drawing everything on paper and thinking for quite a while. It turns out there is a pretty simple solution:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003EQuaternion relRot = Program.VesselInfo.WorldToReference(Program.VesselInfo.VesselOrientation, VesselInformation.FrameOfReference.Navball);\u003Cbr\u003EVector3 forward = relRot * Vector3.up;\u003Cbr\u003Edouble roll = forward.SignedAngle((Vector3.up - forward)*-1, relRot * Vector3.forward);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E//the signed angle method:\u003Cbr\u003E\u003Cbr\u003E        public static float SignedAngle(this Vector3 normal, Vector3 a, Vector3 \u003Cbr\u003E        {\u003Cbr\u003E            return Mathf.Atan2(\u003Cbr\u003E                Vector3.Dot(normal, Vector3.Cross(a, ),\u003Cbr\u003E                Vector3.Dot(a, ) * Mathf.Rad2Deg;\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI create a vector going from UP (0,1,0) to the up vector of the vessel (which is basically the forward vector, it\u0027s the point on the navball). The I simply calculate the angle between that and the actual forward vector of the vessel along the up axis of the vessel.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-26T20:39:42Z\u0022 title=\u002210/26/2014 08:39  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 26, 2014\u003C/time\u003E by pixartist\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-10-26T20:47:39Z","Content":"\n\u003Cp\u003EThanks for posting the solution, this will come in handy for something I\u0027m working on. Who knew scalar products would be so useful?? I certainly had no idea when I was doing my maths with mechanics in college...\u003C/p\u003E\n"},{"CreatedByName":"Padishar","CreatedById":97386,"CreatedDateTime":"2014-10-26T21:45:16Z","Content":"\n\u003Cp\u003EErr, why do you do this:\u003C/p\u003E\u003Cp\u003E(Vector3.up - forward)*-1\u003C/p\u003E\u003Cp\u003E...instead of:\u003C/p\u003E\u003Cp\u003E(forward - Vector3.up)\u003C/p\u003E\u003Cp\u003E?\u003C/p\u003E\n"},{"CreatedByName":"pixartist","CreatedById":67922,"CreatedDateTime":"2014-10-27T00:32:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Padishar\u0022 data-cite=\u0022Padishar\u0022\u003E\u003Cdiv\u003EErr, why do you do this:\u003Cp\u003E(Vector3.up - forward)*-1\u003C/p\u003E\u003Cp\u003E...instead of:\u003C/p\u003E\u003Cp\u003E(forward - Vector3.up)\u003C/p\u003E\u003Cp\u003E?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ehehe, because I used Vector3.up - forward first and then inverted it, for testing purposes by adding *-1...\u003C/p\u003E\n"}]}