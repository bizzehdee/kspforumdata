{"TopicId":159026,"ForumId":29,"TopicTitle":"Resource handling for unloaded vessels","CreatedByName":"Blackline","CreatedById":159475,"CreatedDateTime":"2017-04-11T14:37:03Z","PageNum":1,"Articles":[{"CreatedByName":"Blackline","CreatedById":159475,"CreatedDateTime":"2017-04-11T14:37:03Z","Content":"\n\u003Cp\u003E\nHi everyone,\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI saw some guys\u00A0talking about how stock KSP handles mining, \u003Cabbr title=\u0022In-Situ Resource Utilization\u0022\u003Eisru\u003C/abbr\u003E etc for a vessel, which was unloaded for a while and then becomes active. Especially in the \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105198-roverdude/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022105198\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105198-roverdude/\u0022 rel=\u0022\u0022\u003E@RoverDude\u003C/a\u003E \u003Cabbr title=\u0022Umbra Space Industries (a collection of mods)\u0022\u003EUSI\u003C/abbr\u003E-LS thread, regarding supply and EC consumption. Things like 6 hour segments are processed as a catch up mechanic.\n\u003C/p\u003E\n\u003Cp\u003E\nMy question: are there any (Un)official resources or Wikis on how to work with that mechanic plugin-wise? I would like to implement that functionality to my RealBattery mod. Thanks!\n\u003C/p\u003E\n"},{"CreatedByName":"ShotgunNinja","CreatedById":159391,"CreatedDateTime":"2017-04-25T22:47:42Z","Content":"\n\u003Cp\u003E\nThere are two ways to do it.\n\u003C/p\u003E\n\u003Cp\u003E\nOne is the so-called \u0027catch-up simulation\u0027. It is very simple: you just keep track of time elapsed since the module was active the last time, and when it become active again, you \u0027catch up\u0027 with the missing time. You practically do one (or more) simulation steps when the module is loaded, using the unloaded-time (or a fraction of it) you tracked in place of the usual elapsed time of a simulation step.\u00A0You can understand how that\u0027s not going to work unless the set of producers, consumers and storage is trivially simple. But its advantage is simplicity.\n\u003C/p\u003E\n\u003Cp\u003E\nThen there is the \u0027full blown background simulation\u0027. In essence, you need to \u0027emulate\u0027 the module in question when the vessel is not loaded. This mean you will have to emulate its behaviour using only data available in the part prototype (for non-persistent data) and in the serialized structure of the module (for persistent data). You can even change the latter during the simulation if required.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, some modules are not \u0027self-contained\u0027: eg: they may interact with other systems. Some of these systems may not be available for unloaded vessels. So you\u0027ll have to \u0027roll your own\u0027 replacement for these systems. The most frequently used is obviously the \u0027KSP resource system\u0027. So in emulating a module that consume/produce resources, you will also need to emulate the KSP resource system. And so on and so forth to all systems used by the module.\n\u003C/p\u003E\n"},{"CreatedByName":"Blackline","CreatedById":159475,"CreatedDateTime":"2017-04-26T17:01:23Z","Content":"\n\u003Cp\u003E\nThank you for the info! The following code should explain the catch up mechanic pretty good :\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/ChrisAdderley/CryoTanks/blob/master/Source/ModuleSimpleBoiloff.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/ChrisAdderley/CryoTanks/blob/master/Source/ModuleSimpleBoiloff.cs\u003C/a\u003E\n\u003C/p\u003E\n"}]}