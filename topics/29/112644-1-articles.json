{"TopicId":112644,"ForumId":29,"TopicTitle":"Figuring out angle using latitude and longitude \u002B height","CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T06:00:38Z","PageNum":1,"Articles":[{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T06:00:38Z","Content":"2 objects a vessel and point on ground. We do I have both long and latitude.\n\nAnd height assuming ground point is 0 and height is current vessel altitude.\n\nHow do I figure out the math for angle between the two objects? This is a line of site type equation. I\u0027m guessing that with a keostationary orbit a good line of site is 45 degrees.\n\nLooked at the old finePrint example for stationary satellite point but it\u0027s wrong. (Assuming he fixed it when it went stock but I can\u0027t see the example)\n\nThe ground point is not an object just random point on ground using longitude and latitude.\n\nThanks thus has stopped me cold in my update since complicated math is not my thing lol."},{"CreatedByName":"Superfluous J","CreatedById":73725,"CreatedDateTime":"2015-06-11T06:20:49Z","Content":"What angle do you need? The angle between the ground at the point, and the line to the hip? The angle at the center of the planet between the point and the ship?\n\nYou want to be Googling for Spherical Coordinates. It\u0027s heady enough stuff that I don\u0027t want to figure it out, but with a bit of perseverance there\u0027s nothing that should stop you."},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2015-06-11T06:25:07Z","Content":"Take two vectors, **v** and **w**.\n\nLet v = |**v**| be the magnitude of **v**: v = sqrt(v\u003Csub\u003Ex\u003C/sub\u003E^2^ \u002B v\u003Csub\u003Ey\u003C/sub\u003E^2^ \u002B v\u003Csub\u003Ez\u003C/sub\u003E^2^).\n\nThe magnitude of the cross product is: |**v** x **w**| = v w sin(\u00C3\u017D\u00C2\u00B8), where \u00C3\u017D\u00C2\u00B8 is the angle between **v** and **w**.\n\nFirst break **v** and **w** into cartesian from spherical coordinates. Calculate:\n\nv\u003Csub\u003Ex\u003C/sub\u003E = v cos(lat) cos(lon)\n\nv\u003Csub\u003Ey\u003C/sub\u003E = v cos(lat) sin(lon)\n\nv\u003Csub\u003Ez\u003C/sub\u003E = v sin(lat)\n\nSame for **w**, but use the latitude and longitude to **w**.\n\nFor a point on the surface of Kerbin, for example, v = 600000 m \u002B altitude of the ground above sea level.\n\nFor a point above a planet, w = (radius of planet) \u002B altitude.\n\nNow I\u0027m going to assume that instead of angle \u00C3\u017D\u00C2\u00B8, the angle between v and w, you want the angle between the zenith (directly overhead) of your ground location and whatever you have in orbit. I\n\nFor that we need the vector pointing from the ground to the thing in orbit: **u** = **w** - **v**.\n\nSo calculate: u\u003Csub\u003Ex\u003C/sub\u003E = w\u003Csub\u003Ex\u003C/sub\u003E - v\u003Csub\u003Ex\u003C/sub\u003E, u\u003Csub\u003Ey\u003C/sub\u003E = w\u003Csub\u003Ey\u003C/sub\u003E - v\u003Csub\u003Ey\u003C/sub\u003E, u\u003Csub\u003Ez\u003C/sub\u003E = w\u003Csub\u003Ez\u003C/sub\u003E - v\u003Csub\u003Ez\u003C/sub\u003E, and u = sqrt(u\u003Csub\u003Ex\u003C/sub\u003E^2^ \u002B u\u003Csub\u003Ey\u003C/sub\u003E^2^ \u002B u\u003Csub\u003Ez\u003C/sub\u003E^2^)\n\nSo the angle \u00C3\u00E2\u20AC\u00A2 between the zenith and the orbiter is obtained from the cross product of **v** and **u**: sin(\u00C3\u00E2\u20AC\u00A2) = |**v** x **u**| / (v u).\n\nAll that is missing how to calculate the magnitude of the cross product:\n\n|**v** x **u**| = sqrt( (v\u003Csub\u003Ey\u003C/sub\u003E u\u003Csub\u003Ez\u003C/sub\u003E - v\u003Csub\u003Ez\u003C/sub\u003E u\u003Csub\u003Ey\u003C/sub\u003E)^2^ \u002B (v\u003Csub\u003Ez\u003C/sub\u003E u\u003Csub\u003Ex\u003C/sub\u003E - v\u003Csub\u003Ex\u003C/sub\u003E u\u003Csub\u003Ez\u003C/sub\u003E)^2^ \u002B (v\u003Csub\u003Ex\u003C/sub\u003E u\u003Csub\u003Ey\u003C/sub\u003E - v\u003Csub\u003Ey\u003C/sub\u003E u\u003Csub\u003Ex\u003C/sub\u003E)^2^ )\n\nNow just take the inverse sine: \u00C3\u00E2\u20AC\u00A2 = asin(|**v** x **u**| / (v u)).\n\nQuestions?\n\n**Edited \u003Ctime datetime=\u00222015-06-11T06:55:35Z\u0022 title=\u002206/11/2015 06:55  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by Yasmy**\n  \nMixed up latitude and co-latitude. Silly conventions."},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T07:00:21Z","Content":"\u003E \n\u003E What angle do you need? The angle between the ground at the point, and the line to the hip? The angle at the center of the planet between the point and the ship?\n\u003E You want to be Googling for Spherical Coordinates. It\u0027s heady enough stuff that I don\u0027t want to figure it out, but with a bit of perseverance there\u0027s nothing that should stop you.\n\nAngle between the ship and point on ground. Basically the same thing finePrint did with the keep station in line of sight contract that we have now. The only thing is the version of fineprint on github this contract doesn\u0027t work. Works now in game but don\u0027t have acess to that code.\n\nThis is what he used in finePrint old version\n\n    double anglediff = 180 - Math.Abs(Math.Abs(v.longitude - longitude) - 180);                             bool longitudeMatch = (anglediff \u003C= 45);\n\nIt doesn\u0027t work very well \u00C3\u00B0\u00C5\u00B8\u00CB\u0153\u00C2\u00AC all math.abs does is make negative numbers positive.\n\n- - - Updated - - -\n\n\u003E \n\u003E Take two vectors, **v** and **w**.\n\u003E Let v = |**v**| be the magnitude of **v**: v = sqrt(v\u003Csub\u003Ex\u003C/sub\u003E^2^ \u002B v\u003Csub\u003Ey\u003C/sub\u003E^2^ \u002B v\u003Csub\u003Ez\u003C/sub\u003E^2^).\n\u003E \n\u003E The magnitude of the cross product is: |**v** x **w**| = v w sin(\u00C3\u017D\u00C2\u00B8), where \u00C3\u017D\u00C2\u00B8 is the angle between **v** and **w**.\n\u003E \n\u003E First break **v** and **w** into cartesian from spherical coordinates. Calculate:\n\u003E \n\u003E v\u003Csub\u003Ex\u003C/sub\u003E = v cos(lat) cos(lon)\n\u003E \n\u003E v\u003Csub\u003Ey\u003C/sub\u003E = v cos(lat) sin(lon)\n\u003E \n\u003E v\u003Csub\u003Ez\u003C/sub\u003E = v sin(lat)\n\u003E \n\u003E Same for **w**, but use the latitude and longitude to **w**.\n\u003E \n\u003E For a point on the surface of Kerbin, for example, v = 600000 m \u002B altitude of the ground above sea level.\n\u003E \n\u003E For a point above a planet, w = (radius of planet) \u002B altitude.\n\u003E \n\u003E Now I\u0027m going to assume that instead of angle \u00C3\u017D\u00C2\u00B8, the angle between v and w, you want the angle between the zenith (directly overhead) of your ground location and whatever you have in orbit. I\n\u003E \n\u003E For that we need the vector pointing from the ground to the thing in orbit: **u** = **w** - **v**.\n\u003E \n\u003E So calculate: u\u003Csub\u003Ex\u003C/sub\u003E = w\u003Csub\u003Ex\u003C/sub\u003E - v\u003Csub\u003Ex\u003C/sub\u003E, u\u003Csub\u003Ey\u003C/sub\u003E = w\u003Csub\u003Ey\u003C/sub\u003E - v\u003Csub\u003Ey\u003C/sub\u003E, u\u003Csub\u003Ez\u003C/sub\u003E = w\u003Csub\u003Ez\u003C/sub\u003E - v\u003Csub\u003Ez\u003C/sub\u003E, and u = sqrt(u\u003Csub\u003Ex\u003C/sub\u003E^2^ \u002B u\u003Csub\u003Ey\u003C/sub\u003E^2^ \u002B u\u003Csub\u003Ez\u003C/sub\u003E^2^)\n\u003E \n\u003E So the angle \u00C3\u00E2\u20AC\u00A2 between the zenith and the orbiter is obtained from the cross product of **v** and **u**: sin(\u00C3\u00E2\u20AC\u00A2) = |**v** x **u**| / (v u).\n\u003E \n\u003E All that is missing how to calculate the magnitude of the cross product:\n\u003E \n\u003E |**v** x **u**| = sqrt( (v\u003Csub\u003Ey\u003C/sub\u003E u\u003Csub\u003Ez\u003C/sub\u003E - v\u003Csub\u003Ez\u003C/sub\u003E u\u003Csub\u003Ey\u003C/sub\u003E)^2^ \u002B (v\u003Csub\u003Ez\u003C/sub\u003E u\u003Csub\u003Ex\u003C/sub\u003E - v\u003Csub\u003Ex\u003C/sub\u003E u\u003Csub\u003Ez\u003C/sub\u003E)^2^ \u002B (v\u003Csub\u003Ex\u003C/sub\u003E u\u003Csub\u003Ey\u003C/sub\u003E - v\u003Csub\u003Ey\u003C/sub\u003E u\u003Csub\u003Ex\u003C/sub\u003E)^2^ )\n\u003E \n\u003E Now just take the inverse sine: \u00C3\u00E2\u20AC\u00A2 = asin(|**v** x **u**| / (v u)).\n\u003E \n\u003E Questions?\n\nMy head exploded but I\u0027ll try putting this into code. Lol.\n\nFirst let me get my scientific calculator out."},{"CreatedByName":"JellyCubes","CreatedById":11002,"CreatedDateTime":"2015-06-11T07:03:38Z","Content":"Couldn\u0027t you just turn your latitude, longitude and altitude into world x,y,z coordinates, get the appropriate vectors, and use Unity\u0027s built in Vector3.angle?"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T07:09:57Z","Content":"\u003E \n\u003E Couldn\u0027t you just turn your latitude, longitude and altitude into world x,y,z coordinates, get the appropriate vectors, and use Unity\u0027s built in Vector3.angle?\n\nI don\u0027t know never used unity vector3.angle.\n\nI can look it up thanks for pointing it out."},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-11T07:37:41Z","Content":"Vector3 groundUpVec = (groundPoint - vessel.mainBody.position); // ground normal at ground stationVector3 groundToVesselVec = (groundPoint - vessel.rootPart.transform.position); // direction of vessel from ground stationfloat angle = Vector3.Angle(groundUpVec, groundToVesselVec); // angle between ground normal and vessel direction\n\nIf it says ~180, switch the order of subtraction on one of the vectors around"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T08:29:58Z","Content":"\u003E \n\u003E Vector3 groundUpVec = (groundPoint - vessel.mainBody.position); // ground normal at ground stationVector3 groundToVesselVec = (groundPoint - vessel.rootPart.transform.position); // direction of vessel from ground stationfloat angle = Vector3.Angle(groundUpVec, groundToVesselVec); // angle between ground normal and vessel direction\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E If it says ~180, switch the order of subtraction on one of the vectors around\n\nThanks for this I guess it\u0027s time I finally learned about vectors with the math yasmy showed me and everything else posted should not have issues creating new vectors with longitude and lat as references. For vessel glad it\u0027s already done for me. ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\nI will post my results and code I used when I have it done, and tested.. I hope.\n\n**Edited \u003Ctime datetime=\u00222015-06-11T08:40:01Z\u0022 title=\u002206/11/2015 08:40  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T09:39:39Z","Content":"So I got this to work but something I did not think about. Have to work out at first I thought I messed up still might have. But it seems that the angle is recorded even if Vessel is behind the object (IE kerbin is between the vessel and the station) and in front of it.\n\nI take it this is because the vector3.angle converts all negatives to positives?\n\n**Welp its pretty obvious that the angle thing is not going to work for figuring out Line Of sight since angles are recorded from all areas...** \n\n**Guess Check out remote tech to see how they do the Line Of sight with kerbin KSC.**\n\nThis is the code by the way.. Does work for angles not just what I had in mind.\n\n    private float CheckVectorAngle2Objects(Vessel v, double LongT,double latT,double ratT)        {            double targetX = ratT * Math.Cos(latT) * Math.Cos(LongT);            double targetY = ratT * Math.Cos(latT) * Math.Sin(LongT);            double targetZ = ratT * Math.Sin(latT);            Vector3 groundStation = new Vector3((float)targetX, (float)targetY, (float)targetZ);            Vector3 groundStationUpVec = (groundStation - v.mainBody.position);            Vector3 groundToVesselVec = (groundStation - v.rootPart.transform.position);            float angle = Vector3.Angle(groundStationUpVec, groundToVesselVec);            [B]Vector3 cross = Vector3.Cross(groundStationUpVec, groundToVesselVec);            if (cross.y \u003C 0) angle = -angle;[/B]  //this by the way is how I fixed the negative issue.            Debug.Log(\u0022vessel info: \u0022 \u002B v.mainBody.position.ToString() \u002B \u0022 GroundStation: \u0022 \u002B groundStation.ToString() \u002B \u0022Angle: \u0022 \u002B angle);            return angle;                  }\n\nMaybe I can do it via distance from groundstation to vessel? Or maybe I just need to find out how to do the whole if vessel is occluded by body thing.\n\n**Edited \u003Ctime datetime=\u00222015-06-11T10:14:09Z\u0022 title=\u002206/11/2015 10:14  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-11T10:16:27Z","Content":"Vector3.Angle is 0-180 degrees (with 0 being up in theory), but if all you need is a 45 degree cone pointing up from the ground station it should work just fine. Is it returning the same angle for a vessel overhead as one behind the planet (that would be odd...)?\n\n**Edited \u003Ctime datetime=\u00222015-06-11T10:21:48Z\u0022 title=\u002206/11/2015 10:21  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by Crzyrndm**"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T10:22:13Z","Content":"\u003E \n\u003E Vector3.Angle is 0-180 degrees, but if all you need is a 45 degree cone pointing up from the ground station it should work just fine. Is it returning the same angle for a vessel overhead as one behind the planet (that would be odd...)?\n\nUnless the math is wrong its no where close to what its suppose to be. I\u0027m at KeoStationary orbit (little less to test out how much it moves) and the angle is still moving around like its not almost stationary.\n\nby the way this is how I\u0027m using the code above in game to check for Angle. been thinking about adding an ingame representation of groundStation to make sure the math is right. \n\n    float GroundToVesselAngle = CheckVectorAngle2Objects(FlightGlobals.ActiveVessel,longitude,latitude,targetBody.Radius);                        bool AngleCheck = (GroundToVesselAngle \u003C= 45 \u0026\u0026 GroundToVesselAngle \u003E= 0);\n\n**Edited \u003Ctime datetime=\u00222015-06-11T10:26:57Z\u0022 title=\u002206/11/2015 10:26  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-11T10:34:32Z","Content":"KSP has a method for getting world position from lat/long, that would drop one variable out.\n\n    v.mainBody.GetWorldSurfacePosition(lat,long,alt);\n\nOther than that, I\u0027m out of ideas for now"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T10:39:54Z","Content":"\u003E \n\u003E KSP has a method for getting world position from lat/long, that would drop one variable out.\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E     v.mainBody.GetWorldSurfacePosition(lat,long,alt);\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E Other than that, I\u0027m out of ideas for now\n\nDam I will try that. you can do it with anything I just found out so I I can figure out how to transform that into a vector I might be pretty golden.\n\n**Edited \u003Ctime datetime=\u00222015-06-11T10:48:22Z\u0022 title=\u002206/11/2015 10:48  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T11:36:14Z","Content":"That actually worked neat. Still have to work out numbers because they seem backwards.. But on the right track.\n\nNope don\u0027t work the angle just gets all crazy when the vessel is behind the Tracking station. Bummer. Back to the drawing board.\n\n**Edited \u003Ctime datetime=\u00222015-06-11T12:12:15Z\u0022 title=\u002206/11/2015 12:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-06-11T11:39:08Z","Content":"Backwards how? If its saying an overhead vessel is at 180 degrees, switch one of the vector subtractions around (ie. reverse the direction)"},{"CreatedByName":"malkuth","CreatedById":57414,"CreatedDateTime":"2015-06-11T12:58:37Z","Content":"\u003E \n\u003E Backwards how? If its saying an overhead vessel is at 180 degrees, switch one of the vector subtractions around (ie. reverse the direction)\n\nhard to explain whats happing. But the angle goes from 0 to 180 like its suppose to. when the vessel gets behind the object for its no longer in site in no longer goes from 0 to 180 but 0 to about 90 then goes back to 0 and rinse in repeat.. \n\nI can keep messing with it but doesn\u0027t seem like its going to work. \n\nNew code by the way.\n\n    private float CheckVectorAngle2Objects(Vessel v, double LongT,double latT)        {                       Vector3 groundStation = new Vector3();            groundStation = Planetarium.fetch.Home.GetWorldSurfacePosition(latT, LongT, 0);            Vector3 groundStationUpVec = (groundStation - v.mainBody.position);            Vector3 groundToVesselVec = (v.rootPart.transform.position - groundStation);            float angle = Vector3.Angle(groundToVesselVec, groundStationUpVec);                      Debug.Log(\u0022Angle: \u0022 \u002B angle);            return angle;                  }              }\n\n- - - Updated - - -\n\nThink your right the values are reversed. But I think I can make this work now. Thanks for the help.\n\n- - - Updated - - -\n\nAnd to show you the success of making this work. ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif) Woohoo. Final code been fixed above for current values im using.\n\n![rpXGWNY.png](http://i.imgur.com/rpXGWNY.png)\n\n- - - Updated - - -\n\nAnd finally the whole package works.. Now for in game play testing and I should be able to release the newest version of Mission Controller with its new contracts. ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\n![cvmuIxb.png](http://i.imgur.com/cvmuIxb.png)\n\n**Edited \u003Ctime datetime=\u00222015-06-11T12:24:33Z\u0022 title=\u002206/11/2015 12:24  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by malkuth**"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2015-06-11T16:38:39Z","Content":"Glad it appears to be working. As a simple test, try putting a vessel at altitude 600000 m, and behind the ground station by 60 degrees longitude. \n\nThis makes a 30-60-right triangle, and the angle reported should be 90 degrees. I.e., the satellite should be on the horizon.\n\nThen wait until the satellite is behind the ground station by 90 degrees latitude. It should have dropped below the horizon. This makes a 1-2-sqrt(5) triangle,\n\nand the angle reported should be (180-asin(2/sqrt(5)) = 116.6 degrees.\n\nIt\u0027s always good to check your code with simple test cases you can do by hand."},{"CreatedByName":"MrMcMuffin","CreatedById":145231,"CreatedDateTime":"2015-06-18T04:49:02Z","Content":"Sounds like trig, trig is in my nightmares"}]}