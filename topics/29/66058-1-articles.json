{"TopicId":66058,"ForumId":29,"TopicTitle":"How to handle dependency?","CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-17T14:40:45Z","PageNum":1,"Articles":[{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-17T14:40:45Z","Content":"\n\u003Cp\u003EAlright.\u003C/p\u003E\u003Cp\u003EI\u0027ve almost got my Additional Action Groups mod ready to go but there is one last thing I still need to deal with.\u003C/p\u003E\u003Cp\u003EHow do I expose my plugin to other plugins so they can interface with me?\u003C/p\u003E\u003Cp\u003ESo far I\u0027ve come up with 4 methods:\u003C/p\u003E\u003Cp\u003EThe simplest is to simply expose a method that other mods call. The problem with this is that makes my mod a hard dependency that requires my mod to be installed for the other mod to even run.\u003C/p\u003E\u003Cp\u003EI\u0027m going to make this option available anyway by making my internal call I use public, but I don\u0027t expect this to be popular due to the hard dependency requirement.\u003C/p\u003E\u003Cp\u003EThe second is to use the reflection that blizzy\u0027s toolbar uses. While this is a better then a hard dependency as it allows the other mod to run if my mod is not present, it does make other mod\u0027s include code from me. While not a huge issue, it can be problematic for inexperienced coders to implement. (It took me something like 2 hours to get my Vertical Velocity mod to correctly implement this.)\u003C/p\u003E\u003Cp\u003EThe third method (which I have not investigated at all yet so I don\u0027t know how valid this is) is to look into the SendMessage event. Because of how my mod works, I don\u0027t actually need to pass data back and forth, all I need is a trigger to activate an action group. So I\u0027m hoping I can set things up so that other mods do a SendMessage(\u0022AGX001\u0022) as an \u0022Activate Action Group 1\u0022 message and that my mod can then pick up on it. This would not allow another mod to see any of my data, such as which actions are in which action groups, but for something like a SimPit that does not care about that stuff, I\u0027m hopeful this will be an easy way of triggering actions.\u003C/p\u003E\u003Cp\u003EThe fourth method, and the one I like least, is to use an unused field on either the Vessel or Part class. I\u0027ve never seen Part.customData (type string) have any data in it so I think it could be used for this. So another mod would append a text string of something like \u0022AGX001\u0022 to that field. My mod would then be watching that field and parse that as the trigger to activate group 1. \u003C/p\u003E\u003Cp\u003EI don\u0027t like this method because it requires that Squad both never use that field and not delete it as unused on a future optimzation pass. It also requires that other mods not use the field either. I could append a special character in front so that any existing data in the field is preserved but that will probably still screw up any other mods using the field for something.\u003C/p\u003E\u003Cp\u003ENow, after all that I have two questions:\u003C/p\u003E\u003Cp\u003E1) Is there another method that I have not thought of for passing data between two mods? All I\u0027m after here is passing the \u0022Activate Group 1\u0022 command. Anything more complex will require a dependency or reflection.\u003C/p\u003E\u003Cp\u003E2) If you were writing a mod to use the extended action groups in my mod, what would be your preferred method?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-03-17T14:49:57Z","Content":"\n\u003Cp\u003EYou can call methods with Reflection. You really don\u0027t ever need hard dependancy.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-17T14:58:49Z","Content":"\n\u003Cp\u003ESo I could offer code as follows?\u003C/p\u003E\u003Cp\u003Epseudo-code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprivate void AGxActivateActionGroup(int group)\u003Cbr\u003E{\u003Cbr\u003Eif(Check if my mod is installed and running)\u003Cbr\u003E{\u003Cbr\u003ECall my method ActivateGroup(group) here\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E{\u003Cbr\u003EMod maker can stick code in here to run if my mod is not installed.\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E(Not on my programming computer to look up the correct code)\u003C/p\u003E\u003Cp\u003EAnd they copy-paste that method into their namespace at the same level as the Update() method and we are good to go?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-03-17T15:03:04Z","Content":"\n\u003Cp\u003EReflection is the only reasonable (and by the way highly efficient) way to go, if you can\u0027t avoid a dependency altogether and the other mod does not necessarily need your mod. I don\u0027t see the any real difficulty here, since you provide a fully functional .cs file that does all the heavy lifting and that they don\u0027t have to edit at all. Btw, best thing would be if its behavior doesn\u0027t change, regardless whether your mod is present or not. If it is, use your Code... if not, fall back to what the stock version of that method.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-03-17T16:12:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003ESo I could offer code as follows?\u003Cp\u003Epseudo-code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprivate void AGxActivateActionGroup(int group)\u003Cbr\u003E{\u003Cbr\u003Eif(Check if my mod is installed and running)\u003Cbr\u003E{\u003Cbr\u003ECall my method ActivateGroup(group) here\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E{\u003Cbr\u003EMod maker can stick code in here to run if my mod is not installed.\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E(Not on my programming computer to look up the correct code)\u003C/p\u003E\u003Cp\u003EAnd they copy-paste that method into their namespace at the same level as the Update() method and we are good to go?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s not really how I would proceed.\u003C/p\u003E\u003Cp\u003EIn your place, I would simply require modders to add methods to their code with a prefix. Basically, when a part is selected to add to an action group, you could search through all the part modules and look for methods named something like \u0022AGx_*something*\u0022 (so basically Contains(\u0022AGx_\u0022), and those would be the action groups. Then you simply need to store the part modules and string names of the methods, and invoke them when that action group is fired. All of this using reflection of course. Using a combination of Linq and Reflection should be pretty effective here.\u003C/p\u003E\u003Cp\u003EThen all modders would have to do is add Methods who begin with \u0022AGx_\u0022 in their code and that would be the action groups. The only problem I see with that is stock action groups. I /think/ you could search for methods that have a KSPAction attribute. That should work filling that gap I believe.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-03-17T16:32:20Z","Content":"\n\u003Cp\u003EAfaik isn\u0027t he really looking for that kind of dependency. AG methods are defined as usual in KSP and he can use them. But utility features like managing or firing those custom action groups will be a problem. Imo, the best approach would be to offer a .cs file doing exactly that for the users. It doesn\u0027t just offer compatibility but also provides a simplified API to do so, that way how ever wants to use it doesn\u0027t have to learn the KSP-way to do the same in the first place. Though i\u0027m not really sure what features an action group manager should expose anyway^^\u003C/p\u003E\u003Cp\u003EGuess the best solution would be to just release the mod for now and think about such stuff later \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-17T16:37:25Z\u0022 title=\u002203/17/2014 04:37  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 17, 2014\u003C/time\u003E by Faark\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-17T18:17:11Z","Content":"\n\u003Cp\u003EOkay.\u003C/p\u003E\u003Cp\u003EFirst, this is going to be a full fledged action group manager. My mod takes care of remembering which actions are in which group and triggering the action groups and everything associated with that. \u003C/p\u003E\u003Cp\u003ENote that I am building action lists dynamically. As long as an action attached to a part would show in the default ActionGroup manager, it will automatically show in mine with no extra steps required.\u003C/p\u003E\u003Cp\u003ESo I was thinking of exposing the following methods:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EActivateActionGroup(int group) //Activate action group by number, all most mods will need\u003Cbr\u003EActionGroupStatus() //Return activated action groups, what I expect to be the second most commonly used method\u003Cbr\u003EListActions() //Multiple overloads here to return all actions, actions in a group, actions on a part, etc.\u003Cbr\u003EAddAction() //Add an action to an action group\u003Cbr\u003ERemoveAction() //Remove an action from an action group\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI can\u0027t think of anything else a mod would need? I\u0027m trying to cover everything in terms of managing action groups within my mod, it\u0027s really the people doing external hardware, such as a simpit, that I expect to have to interface in code to pass actions from the physical buttons and switches.\u003C/p\u003E\u003Cp\u003EAt this point, I think I have answered my question and I\u0027ll see what people think once I can get an actual release into their hands.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-03-17T22:10:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EOkay.\u003Cp\u003EFirst, this is going to be a full fledged action group manager. My mod takes care of remembering which actions are in which group and triggering the action groups and everything associated with that. \u003C/p\u003E\u003Cp\u003ENote that I am building action lists dynamically. As long as an action attached to a part would show in the default ActionGroup manager, it will automatically show in mine with no extra steps required.\u003C/p\u003E\u003Cp\u003ESo I was thinking of exposing the following methods:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EActivateActionGroup(int group) //Activate action group by number, all most mods will need\u003Cbr\u003EActionGroupStatus() //Return activated action groups, what I expect to be the second most commonly used method\u003Cbr\u003EListActions() //Multiple overloads here to return all actions, actions in a group, actions on a part, etc.\u003Cbr\u003EAddAction() //Add an action to an action group\u003Cbr\u003ERemoveAction() //Remove an action from an action group\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI can\u0027t think of anything else a mod would need? I\u0027m trying to cover everything in terms of managing action groups within my mod, it\u0027s really the people doing external hardware, such as a simpit, that I expect to have to interface in code to pass actions from the physical buttons and switches.\u003C/p\u003E\u003Cp\u003EAt this point, I think I have answered my question and I\u0027ll see what people think once I can get an actual release into their hands.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhy would people need to add/remove and activate actions themselves?\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-17T23:53:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stupid_chris\u0022 data-cite=\u0022stupid_chris\u0022\u003E\u003Cdiv\u003EWhy would people need to add/remove and activate actions themselves?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not sure, but I have to setup the reflection for the other methods anyway, so it is more a sense that I might as well do it rather then not do it when it will take me something like 30 additional seconds to code.\u003C/p\u003E\u003Cp\u003EMaybe there will be a one-shot part of some sort that after activating can not be deactivated and so should not longer be in an action group?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-03-18T01:34:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EI\u0027m not sure, but I have to setup the reflection for the other methods anyway, so it is more a sense that I might as well do it rather then not do it when it will take me something like 30 additional seconds to code.\u003Cp\u003EMaybe there will be a one-shot part of some sort that after activating can not be deactivated and so should not longer be in an action group?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIMO you should handle everything that relates to managing the action groups. Modders should simply have to add action group methods and the rest should be done by AGx. Action groups are just void methods that are called on key presses. If modders need to start handling how the action groups are managed, it\u0027s going to be much harder on the other side of the deal.\u003C/p\u003E\n"}]}