{"TopicId":151681,"ForumId":29,"TopicTitle":"How to get elapsed physics time?","CreatedByName":"martincmartin","CreatedById":157729,"CreatedDateTime":"2016-11-07T16:10:39Z","PageNum":1,"Articles":[{"CreatedByName":"martincmartin","CreatedById":157729,"CreatedDateTime":"2016-11-07T16:10:39Z","Content":"\n\u003Cp\u003E\nI\u0027m computing some accelerations by recording velocities during every Update() call, recording elapsed time, and computing (currentV - previousV) / (previousT - currentT). \u00A0I\u0027m currently using mission time as my time, but (a) it doesn\u0027t advance while on the pad (not really a problem, but) (b) when the game is paused, it increases for the first two frames after the game is paused, but the physics isn\u0027t running, so all my accelerations are suddenly zero.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat\u0027s a good value to use for physics time? \u00A0Ideally:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nDoesn\u0027t advance when the game is paused\n\u003C/li\u003E\n\u003Cli\u003E\nTake into account warp, e.g. advances 3x as fast when warp is 3x (assuming Update() is still only called once, not 3 times?)\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nOr is there a way to get \u0022elapsed physics time since last call to Update()\u0022 directly?\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-11-07T17:47:16Z","Content":"\n\u003Cp\u003E\nFirst if you want to deal with physic you do things in FixedUpdate and not Update. Update is tied to frame rate,\u00A0FixedUpdate is not.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnd then you use\u00A0TimeWarp.fixedDeltaTime\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAlso acceleration is available in Vessel, unless you do it for something else. And if you do and use rigidbodies\u00A0velocities make sure to account for the the floating origin velocity.\n\u003C/p\u003E\n"},{"CreatedByName":"martincmartin","CreatedById":157729,"CreatedDateTime":"2016-11-07T23:55:56Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222842302\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478540836\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFirst if you want to deal with physic you do things in FixedUpdate and not Update. Update is tied to frame rate,\u00A0FixedUpdate is not.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnd then you use\u00A0TimeWarp.fixedDeltaTime\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAlso acceleration is available in Vessel, unless you do it for something else. And if you do and use rigidbodies\u00A0velocities make sure to account for the the floating origin velocity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks for the tip!\u00A0I thought physics was run once per Update(), but looking more closely I see its run once per FixedUpdate():\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://docs.unity3d.com/Manual/ExecutionOrder.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.unity3d.com/Manual/ExecutionOrder.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m actually looking for angular acceleration, I\u0027m just differentiating angularVelocityD, I\u0027m working on a kind of improved \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E. \u00A0I couldn\u0027t find that in Vessel, is it there and I\u0027m not seeing it?\n\u003C/p\u003E\n"},{"CreatedByName":"martincmartin","CreatedById":157729,"CreatedDateTime":"2016-11-08T04:36:40Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222842302\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478540836\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd then you use\u00A0TimeWarp.fixedDeltaTime\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt turns out, TimeWarp.fixedDeltaTime is the time used in the \u003Cem\u003Enext\u003C/em\u003E\u00A0physics calculation. \u00A0For my purposes, where I save the previous angularVelocity and subtract it from the current one, I want the value from the \u003Cem\u003Eprev\u003C/em\u003E\u00A0frame, which is TimeWarp.deltaTime.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222842302\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478540836\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAlso acceleration is available in Vessel, unless you do it for something else. And if you do and use rigidbodies\u00A0velocities make sure to account for the the floating origin velocity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks for the tip about floating origin, I didn\u0027t know about that so I read up about it. \u00A0Where can I find the velocity of the floating origin? \u00A0I tried computing vessel.acceleration from the various velocities in vessel (velocityD, rb_velocity, srf_velocity, obt_velocity) but couldn\u0027t get the correct answer. \u00A0Perhaps correcting for the floating point origin velocity will help?\n\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2016-11-08T06:50:31Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222843025\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478579800\u0022 data-ipsquote-userid=\u0022157729\u0022 data-ipsquote-username=\u0022martincmartin\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, martincmartin said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nTimeWarp.fixedDeltaTime is the time used in the \u003Cem\u003Enext\u003C/em\u003E\u00A0physics calculation. \u00A0For my purposes, where I save the previous angularVelocity and subtract it from the current one, I want the value from the \u003Cem\u003Eprev\u003C/em\u003E\u00A0frame, which is TimeWarp.deltaTime\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nTimewarp is basically just a wrapper on Unity\u0027s Time class with logic to handle timewarp. Details here:\u00A0\u003Ca href=\u0022https://docs.unity3d.com/ScriptReference/Time.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.unity3d.com/ScriptReference/Time.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\ndeltaTime has absolutely no relation to physics calculations outside of FixedUpdate, except as a coincidence\n\u003C/li\u003E\n\u003Cli\u003E\nBoth delta\u0027s are for the previously completed frame (gameplay / physics) and have no relation to the current or future frames.\n\u003C/li\u003E\n\u003Cli\u003E\nI\u0027m of the understanding fixedDeltaTime should be invariant with the exception of phys warp (and according to Unity docs should be identical to deltaTime inside FixedUpdate calls)\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nBy the above, recording\u00A0two \u003Cstrong\u003Efixed\u003C/strong\u003E\u00A0frames back (not just one) and calculating on the stored values in combination with fixedDeltaTime should give the correct answer (but unnecesary since fixed is invariant...)\n\u003C/p\u003E\n\u003Cp\u003E\nIf that still appears to be incorrect, I\u0027d be examining assumptions (are the axes assigned correctly, what units is the output in...) and/or computing your own angular acceleration from vessel.transform.rotation\n\u003C/p\u003E\n\u003Cp\u003E\nRE: floating origin\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Evelocity \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ERigidbody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Evelocity \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EKrakensbane\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetFrameVelocity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-08T07:03:42Z\u0022 title=\u002211/08/2016 07:03  AM\u0022 data-short=\u00227 yr\u0022\u003ENovember 8, 2016\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-11-08T09:40:15Z","Content":"\n\u003Cp\u003E\nAlso : \u003Cspan\u003Evessel.angularMomentum\u003C/span\u003E /\u00A0 \u003Cspan\u003Evessel.angularVelocity\u003C/span\u003E /\u00A0 vessel.\u003Cspan\u003EangularVelocity\u003C/span\u003ED\n\u003C/p\u003E\n"},{"CreatedByName":"martincmartin","CreatedById":157729,"CreatedDateTime":"2016-11-08T14:58:53Z","Content":"\n\u003Cp\u003E\nThanks a lot Crzyrndm, that\u0027s very helpful.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222843070\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478587831\u0022 data-ipsquote-userid=\u002292871\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, Crzyrndm said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nTimewarp is basically just a wrapper on Unity\u0027s Time class with logic to handle timewarp. Details here:\u00A0\u003Ca href=\u0022https://docs.unity3d.com/ScriptReference/Time.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.unity3d.com/ScriptReference/Time.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\ndeltaTime has absolutely no relation to physics calculations outside of FixedUpdate, except as a coincidence\n\u003C/li\u003E\n\u003Cli\u003E\nBoth delta\u0027s are for the previously completed frame (gameplay / physics) and have no relation to the current or future frames.\n\u003C/li\u003E\n\u003Cli\u003E\nI\u0027m of the understanding fixedDeltaTime should be invariant with the exception of phys warp (and according to Unity docs should be identical to deltaTime inside FixedUpdate calls)\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI put \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Eprint(\u0022fixedDT:\u00A0\u0022\u00A0\u002B\u00A0TimeWarp.fixedDeltaTime\u00A0\u002B\u00A0\u0022,\u00A0deltaT:\u00A0\u0022\u00A0\u002B\u00A0TimeWarp.deltaTime);\u003C/span\u003E in \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EFixedUpdate()\u003C/span\u003E, turned warp up, and observed that deltaTime was always exactly equal to\u00A0fixedDeltaTime from the previous print line.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222843070\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478587831\u0022 data-ipsquote-userid=\u002292871\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBy the above, recording\u00A0two \u003Cstrong\u003Efixed\u003C/strong\u003E\u00A0frames back (not just one) and calculating on the stored values in combination with fixedDeltaTime should give the correct answer (but unnecesary since fixed is invariant...)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIn \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EFixedUpdate()\u003C/span\u003E I have:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3d deltaVelocity = FlightGlobals.ActiveVessel.velocityD - prevVelocity;\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Eprint(\u0022accel: \u0022\u002Bvessel.acceleration\u002B\u0022, from fixedDT: \u0022\u002B(deltaVelocity / TimeWarp.fixedDeltaTime)\u002B\u0022, from deltaT: \u0022\u002B(deltaVelocity / TimeWarp.deltaTime));\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EprevVelocity = FlightGlobals.ActiveVessel.velocityD;\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThen I launch a vessel and have it go straight up (roughly constant acceleration), and warp time, and I get:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003EfixedDT: 0.02126373, deltaT: 0.02084686\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003Eaccel: [-3.676, 0.070, 2.229], from fixedDT: [-3.615, 0.073, 2.193], from deltaT: [-3.687, 0.074, 2.237]\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003E----------\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003EfixedDT: 0.04\u003C/span\u003E\u003Cspan\u003E007141, deltaT: 0.02126373\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003Eaccel: [-3.682, 0.071, 2.231], from fixedDT: [-1.958, 0.040, 1.187], from deltaT: [-3.690, 0.075, 2.236]\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003E-------------\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003EfixedDT: 0.04\u003C/span\u003E\u003Cspan\u003E08728, deltaT: 0.04007141\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cspan\u003Eaccel: [-3.848, 0.075, 2.329], from fixedDT: [-3.621, 0.074, 2.193], from deltaT: [-3.693, 0.075, 2.237]\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nSo, if we compute using fixedDeltaTime, our computed accel is 1/2 size for a frame during the transition, but if we used deltaT, we\u0027re within a few percent, but not exact.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ll look into the two frame back thing when I get a sec, thanks for the tip.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd thanks for the tip about the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EKrakensbane\u003C/span\u003E class, I had hear the name but didn\u0027t realize it was the name of a class! \u00A0I should have guessed.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-11-08T15:25:23Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222843377\u0022 data-ipsquote-contentid=\u0022151681\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478617133\u0022 data-ipsquote-userid=\u0022157729\u0022 data-ipsquote-username=\u0022martincmartin\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 minutes ago, martincmartin said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI put \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Eprint(\u0022fixedDT:\u00A0\u0022\u00A0\u002B\u00A0TimeWarp.fixedDeltaTime\u00A0\u002B\u00A0\u0022,\u00A0deltaT:\u00A0\u0022\u00A0\u002B\u00A0TimeWarp.deltaTime);\u003C/span\u003E in \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EFixedUpdate()\u003C/span\u003E, turned warp up, and observed that deltaTime was always exactly equal to\u00A0fixedDeltaTime from the previous print line.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDo the same with a 300 part vessel loaded now.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnd your difference most likely comes from the fact that the time between your last 2 frame was still 0.02 and will be 0.04 at the next frame.\n\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2016-11-08T20:17:01Z","Content":"\n\u003Cp\u003E\nKeep in mind that Update (Screen Refresh) and FixedUpdate (Physics Tick) are not sync\u0027d.\n\u003C/p\u003E\n\u003Cp\u003E\nI believe that Update tries to run 60 times a second and FixedUpdate runs 30 times a second. (Information from several unity versions ago, can not guarantee this is correct on the current version.)\n\u003C/p\u003E\n\u003Cp\u003E\nWhat this means is that you will get inconsistent ordering, especially when the game is under load and running slower.\n\u003C/p\u003E\n\u003Cp\u003E\nSo you will get U-FU-U-U-FU-U-FU-U-FU-U-U-U-FU order on the updates causing all sorts of weird numbers if you try to compare the two.\n\u003C/p\u003E\n\u003Cp\u003E\nThe correct number should be gotten from .fixedDeltaTime as anything physics related is supposed to happen in FixedUpdate.\n\u003C/p\u003E\n\u003Cp\u003E\nNote that I have done something vaguely similar and found I had to cache values from the last 5 fixedUpdate frames in a FIFO buffer and use the average as I found the numbers reported to be very \u0022spikey\u0022 in their values and had to smooth it out to get usable numbers.\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-08T20:17:29Z\u0022 title=\u002211/08/2016 08:17  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 8, 2016\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"}]}