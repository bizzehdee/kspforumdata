{"TopicId":151354,"ForumId":29,"TopicTitle":"Unity UI Creation Tutorial","CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2016-11-02T19:08:45Z","PageNum":1,"Articles":[{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2016-11-02T19:08:45Z","Content":"\n\u003Cp\u003E\nNewer versions of KSP support Unity\u2019s updated UI system (technically available since KSP 1.0, but only really practical since 1.1), which is a major improvement over the old OnGUI system. Rather than rebuilding the UI every frame using the esoteric GUILayout and GUI system, the new Unity UI is built using standard Unity objects and hierarchies. This significantly improves performance, reduces the garbage created, and allows for some fancy effects that weren\u2019t practical with OnGUI. The only problem is that building the new UI entirely through code is extremely tricky, to the point of being impractical in all but the simplest cases.\n\u003C/p\u003E\n\u003Cp\u003E\nSo there are basically two options for using the new UI. One is built into KSP and is perfect for creating relatively simple windows that don\u2019t require much customization. This is the \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/149324-popupdialog-and-the-dialoggui-classes/\u0022 rel=\u0022\u0022\u003EPopupDialog\u003C/a\u003E system, it uses notations similar to the old GUILayout system, but generates a new Unity UI object. There is a thread with more details on PopupDialogs and some examples.\n\u003C/p\u003E\n\u003Cp\u003E\nThe other option is to build your UI in the Unity editor, export it as an AssetBundle, and load it into KSP. There are also two options for how to handle this. You can create the UI in Unity without importing any assemblies into the Unity editor. When you load this UI into KSP you will need to manually hook up all of the elements through code. Things like the function called by a button, or the string of a text element will all have to be manually assigned. This is OK for simpler UIs, but can become prohibitively tedious for more complex UIs. \u003Ca href=\u0022https://github.com/sarbian/GCMonitor/\u0022 rel=\u0022external nofollow\u0022\u003ESarbian\u2019s GC Monitor\u003C/a\u003E is an example of this type of UI.\n\u003C/p\u003E\n\u003Cp\u003E\nFor a more complex UI it can be simpler to import an assembly directly into the Unity editor, allowing you to set button, or toggle listeners, and to store references to UI elements where needed. The only problem here is that you cannot import an assembly that refers to KSP\u2019s Assembly-CSharp.dll, the primary KSP assembly. This means that any mod using a Unity UI will need two assemblies, one to handle the KSP side of things, and another that can be imported into Unity and will handle the UI side of things. The KSP assembly can keep a reference to the UI assembly, but the UI assembly can\u2019t refer to the KSP assembly, since that will refer to Assembly-CSharp (this would create a kind of nested Unity project in the code, which Unity won\u0027t accept). This means that communication between the two assemblies will be difficult.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EIt\u0027s worth noting here, that while you can\u0027t import any references to the KSP assembly in your Unity project, nothing is preventing you from adding that reference to your code outside of Unity. If you are careful you can setup your code in such a way that only a single assembly is needed. This would require either doing all of the Unity UI work before hooking things up to KSP, or just walling off anything that refers to KSP code into separate classes that could be disabled when you need to import the assembly into Unity. This tutorial doesn\u0027t cover this option, but this is another option that you can use and could get around some of the complicated interface-based techniques discussed below.\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBut before we get to that we can go over some of the basics of Unity UI creation (generic UI creation is also broadly similar to KSPedia creation, \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/137628-kspedia-creation-tutorial/\u0022 rel=\u0022\u0022\u003Ewhich is covered in its own tutorial\u003C/a\u003E). I won\u2019t go into too much detail, since there are a number of very thorough tutorials and examples available. Check out some of these; pay particular attention to the RectTransform as that is the core positioning component of all UI elements, and it can be quite tricky to get a handle on.\n\u003C/p\u003E\n\u003Cp\u003E\nUsing Basic Orbit as an example project we\u2019ll go over several different areas of UI creation, starting with making a simple, static window, one that can\u2019t be re-sized and has a fixed amount of UI elements. I\u2019ll be using the same formatting as in the KSPedia tutorial, with Unity Editor screen elements \u003Cb\u003EBolded\u003C/b\u003E and UI objects and elements \u003Cb\u003E\u003Ci\u003EBolded and Italicized\u003C/i\u003E\u003C/b\u003E. The code for \u003Ca href=\u0022https://github.com/DMagic1/KSP_BasicOrbit\u0022 rel=\u0022external nofollow\u0022\u003EBasic Orbit is available on GitHub\u003C/a\u003E. Much of the methods used here come from Kerbal Engineer Redux (which uses the Unity UI only for its toolbar button), its source and Unity project can be found on its \u003Ca href=\u0022https://github.com/CYBUTEK/KerbalEngineer\u0022 rel=\u0022external nofollow\u0022\u003EGitHub page\u003C/a\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is the window we\u2019ll be creating and hooking up to KSP today. It controls the visibility and some options for other screen objects.\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022lA3CAIj.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/lA3CAIj.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 1:\u003Cspan\u003E\u00A0 \u003C/span\u003ESoftware and Tools:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cu\u003ERequired:\u003C/u\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Ca href=\u0022https://unity3d.com/get-unity/download/archive\u0022 rel=\u0022external nofollow\u0022\u003EUnity\u003C/a\u003E\u00A0\u2013 Current KSP version (1.9.1) is using Unity \u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003E2019.2.2f1\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/160487-parttools-updated/\u0022 rel=\u0022\u0022\u003EKSP Part Tools\u003C/a\u003E\u00A0\u2013 The current package includes what is needed for generating Asset Bundles and the legacy Part Tools files\n\u003C/li\u003E\n\u003Cli\u003E\nIt should be noted that anyone familiar with Unity who can write their own asset bundle script doesn\u0027t need to worry about the Part Tools, just write the script for building an asset bundle and you can use the version of Unity that matches KSP\n\u003Cul\u003E\u003Cli\u003E\nIf you do so make sure that any scripts you add to the project are placed in a folder called \u003Cstrong\u003EEditor\u003C/strong\u003E somewhere within your Unity project\u0027s \u003Cstrong\u003EAssets\u003C/strong\u003E folder\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022FelbuoV.png\u0022 class=\u0022ipsImage\u0022 height=\u0022576\u0022 style=\u0022width:700px;height:auto;\u0022 width=\u00221000\u0022 src=\u0022http://i.imgur.com/FelbuoV.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nTo start with we need a new Unity project (I\u2019m using Unity 5.2.4f1, since this is the version supported by the KSP Part Tools - KSP 1.4.x uses Unity 2017, but earlier versions should still work; KSP 1.8 and above uses Unity 2019.2). I would suggest making a separate project folder for each UI, you can create a new project in the Unity startup window, you can then copy the KSP Part Tools files into that project\u2019s Asset folder, or just import them into Unity in the normal way. We only need the Part Tools for the Asset Compiler function, which we\u2019ll get to later.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EUnity Project Setup:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe first step is to install Unity and add the Part Tools package.\n\u003C/p\u003E\n\u003Cp\u003E\nOnce Unity is installed open it and create a project for KSP (there are probably other tutorials that cover setting up Unity in more detail; that isn\u2019t really covered here).\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nGo to the\u00A0\u003Cb\u003EAssets Tab\u003C/b\u003E\u00A0along the top -\u0026gt;\u00A0\u003Cb\u003EImport Package\u003C/b\u003E\u00A0-\u0026gt;\u00A0\u003Cb\u003ECustom Package\u003C/b\u003E\u00A0-\u0026gt; Select the\u00A0\u003Cb\u003EPartTools_AssetBundles.unitypackage\u003C/b\u003E\u00A0file\n\u003C/li\u003E\n\u003Cli\u003E\nThis will load all of the bits necessary for KSPedia creation\n\u003C/li\u003E\n\u003Cli\u003E\nNow you want a new scene; the\u00A0\u003Cb\u003EHierarchy Window \u003C/b\u003Eshould only have the \u003Cb\u003E\u003Ci\u003ECamera\u003C/i\u003E\u003C/b\u003E, which we want because it allows us to view the UI as it will be in-game\n\u003C/li\u003E\n\u003Cli\u003E\nIn the\u00A0\u003Cb\u003EMain Window\u003C/b\u003E\u00A0you\u2019ll want to be in the\u00A0\u003Cb\u003E#Scene Tab\u003C/b\u003E, in\u00A0\u003Cb\u003E2D\u00A0\u003C/b\u003Emode, using regular\u00A0\u003Cb\u003EShaded\u003C/b\u003E\u00A0mode\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 2: Creating the UI:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAll Unity UI windows must be the child of a \u003Cb\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E element, so we\u2019ll need to add one here. In general, we don\u2019t need to export this \u003Cb\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E, since our UI can be added directly to one of KSP\u2019s \u003Cb\u003E\u003Ci\u003ECanvases\u003C/i\u003E\u003C/b\u003E, but we need it in the editor to actually see anything we create.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EAdd a Canvas: \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EGameObject Tab\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E\u00A0-\u0026gt;\u00A0\u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EUI\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E\u00A0-\u0026gt;\u00A0\u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ECanvas\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis adds the \u003Cb\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E element and the \u003Cb\u003E\u003Ci\u003EEventSystem\u003C/i\u003E\u003C/b\u003E\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe default properties should be fine, you\u2019ll want to set \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPixel Perfect\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E on, since most KSP canvas\u2019 seem to use this, it simply makes sure that all UI elements are snapped to pixel edges\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022NGcva24.png\u0022 class=\u0022ipsImage\u0022 style=\u0022width:500px;height:auto;\u0022 src=\u0022http://i.imgur.com/NGcva24.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb\u003ERender Mode\u003C/b\u003E should be on \u003Cb\u003EScreen Space \u2013 Overlay\u003C/b\u003E, this is for basic UI styles, a simple window on the screen\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETo this \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E we then add a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E: Right-click on the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ECanvas -\u0026gt; UI sub-folder -\u0026gt; Panel\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is the basic window object, this is where we add buttons, labels, images, and so on\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E has a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECanvas Renderer\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, and an \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E element\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E controls the window size and position\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECanvas Renderer\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is a required component for any UI element that will actually be drawn on-screen\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is the window background image\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EBy default, the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is the same size as the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and uses the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EStretch Anchor\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, meaning it will always stretch to the size of the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECanvas\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, we obviously don\u2019t want this\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EClick on the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAnchor\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E image (the blue arrows, or red lines) in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E element and select the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EMiddle-Center Option\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, with red lines crossing in the center\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EYou may end up wanting the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAnchor\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to be \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ETop-Left\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPivot\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to be 0, 1, but you can leave them as they are for now\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis will set the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAnchor\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to the center of the Panel, and will change the available \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ERectTransform Fields\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, we can now directly set the size of the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, and they will be fixed\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u002225YC5eX.png\u0022 class=\u0022ipsImage\u0022 height=\u0022201\u0022 width=\u00221000\u0022 src=\u0022http://i.imgur.com/25YC5eX.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nOnce we set the \u003Cb\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E size it will look like this:\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPivot\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E (blue circle) and \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EAnchor\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E (white arrows) are in the center and the borders are marked in the corners with the blue dots\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022Q0Jhr6P.png\u0022 class=\u0022ipsImage\u0022 height=\u0022592\u0022 style=\u0022width:600px;height:auto;\u0022 width=\u00221000\u0022 src=\u0022http://i.imgur.com/Q0Jhr6P.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EAdding Elements to the Window:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWe\u2019ll go over the background images used for the window, and more complex anchoring and pivot functions later, but for now, we can start adding the UI elements to this simple window.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EBasic UI elements can be added by right-clicking on any object in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EHierarchy Window\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and selecting a UI object\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAdd Component\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E button can be used to add those same elements, or any other Unity object or script\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETo start with we\u2019ll add a few \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText \u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003Elabels and some \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggles\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E that look like buttons\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EFor \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E elements just right-click the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and select a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EText object\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E under the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EUI tab\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETo position the element we can drag it to the desired location, it should snap to the center line\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003Ewidth\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003Eheight\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E can be changed by dragging the edges, or by changing their values in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E properties\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EDragging the edges will make the element un-centered, whereas editing the height and width in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E will adjust the element\u2019s size based on its pivot position (centered by default)\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ESince this window is fixed we don\u2019t need to worry about the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003Eanchor\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E position, but if you want to make sure that an element stays at the top of the window you can change the anchor to \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ETop-Center\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, or \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ETop-Right\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E if you want it stay in that corner, this can help when making a UI if you are frequently adjusting the window size\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EFor fixed \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E elements we can just type in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EText Field\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E whatever we want, for dynamic elements (which are set by something in-game) we\u2019ll cover them later\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E properties: \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003Esize, style, alignment, color\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, etc\u2026 can all be adjusted in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EText element\u2019s properties\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022HwzYJCm.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/HwzYJCm.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nA quick note about hierarchy and draw order here:\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EElements lower in the hierarchy are always drawn above higher elements\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis means that child elements are drawn over their parents, and siblings are drawn in order from last to first, with last on top\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ENow to add some \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle Buttons\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, since this a group of three related \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggles\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E we can put them all under one parent object\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ERight-Click on the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and select \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ECreate Empty\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, this will add a simple \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E with no UI elements\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe can adjust its position, size and anchor so that it can hold the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggles\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and be fixed relative to the top of the window\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ENow add a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E element directly to the new empty object (all Unity objects can be renamed by double-clicking on the in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EHierarchy window\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E)\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EUnity doesn\u2019t have native Toggle Buttons, so the element created here is a standard toggle with a label and checkbox\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe can adjust these elements to work as a Toggle Button just by changing their size and positions (and some code that we\u2019ll get to later)\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe need to go from this:\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022uacHxrh.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/uacHxrh.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nTo this (yes it looks odd, but we\u2019ll get to specifics in a bit):\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022W9dq3sS.png\u0022 class=\u0022ipsImage\u0022 style=\u0022width:480px;height:auto;\u0022 src=\u0022http://i.imgur.com/W9dq3sS.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ECreating a Toggle Button and Adjusting the RectTransform:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nTo make what we need we basically only have to adjust the \u003Cb\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E component for each UI element in the \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E element. The \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E itself is made up of a \u003Cb\u003E\u003Ci\u003EToggle Script\u003C/i\u003E\u003C/b\u003E, which controls actually activating and deactivating it, the \u003Cb\u003E\u003Ci\u003EBackground Image\u003C/i\u003E\u003C/b\u003E, which by default is the empty checkbox, the \u003Cb\u003E\u003Ci\u003ECheckmark Image\u003C/i\u003E\u003C/b\u003E, which is only shown when the \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E is put into the \u201Con\u201D state, and a \u003Cb\u003E\u003Ci\u003EText Label\u003C/i\u003E\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe want this \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to look like a standard KSP button, so the images should fill the entire object and the text should be centered\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EBackground Image\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E will be set to standard KSP button styles (the regular button, a brighter button for when the mouse is over the element, and a darker button for when the mouse is actually clicking on it) and the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECheckmark\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E will be set to the darker, pressed KSP button; since the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECheckmark Image\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is drawn over the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EBackground Image\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, it will hide the standard button images when the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is on\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETo do this we need to adjust the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EBackground\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ECheckmark Image RectTransforms\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to fill the entire object\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe set the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EAnchor\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to Stretch-Stretch (four blue arrows), this will make the element stretch to fit the size of its parent, it also replaces the size and position fields with offsets, so if we want an element to stretch with its parent, but always have 10 pixel borders around the edge, we can set each field to 10, here we want them all set to 0, the same size as its parent\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022qlrP62b.png\u0022 class=\u0022ipsImage\u0022 height=\u0022131\u0022 style=\u0022text-align:center;\u0022 width=\u00221000\u0022 src=\u0022http://i.imgur.com/qlrP62b.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nWe do the same with the \u003Cb\u003E\u003Ci\u003ECheckmark Image\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EFor the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELabel\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, we generally want some padding around the edges, and the text should be changed to centered alignment\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u00228SaCxtR.png\u0022 class=\u0022ipsImage\u0022 style=\u0022width:540px;height:auto;\u0022 src=\u0022http://i.imgur.com/8SaCxtR.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nWe\u2019ll get into actually assigning images to these elements later on, for now these are all using the default Unity UI element sprites (which can be seen in KSP in the debug window and a few other places)\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe can also replace the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText label\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E with an \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EImage element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, this will simply draw an icon over the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle Button\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E rather that a label\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nImages can be imported into Unity by simply copying them into a folder in the Unity Project\u2019s Asset folder, or by dragging them directly into the \u003Cb\u003EUnity Editor\u2019s Project Window\u003C/b\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EImages should be imported as \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ESprite (2D and UI)\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EGenerate Mip Maps\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E toggle should be off\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EFilling in the other UI elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI\u2019m not going to go over how to add all of the different UI elements. There are numerous UI tutorials that thoroughly cover different element types; sliders, standard buttons, and text labels are all fairly straightforward to add. For static windows it isn\u2019t too complicated, the RectTransform can get quite complicated, but the best way to understand it is to simply play around with it and change values to see what happens. More complicated UI layouts, and variable size windows will be covered later on.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EExporting the Asset Bundle:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nTo load anything into KSP we\u2019ll need to actually export all of our prefabs as an \u003Cb\u003E\u003Ci\u003EAssetBundle\u003C/i\u003E\u003C/b\u003E using the \u003Cb\u003EAsset Compiler\u003C/b\u003E from the \u003Cb\u003EKSP Part Tools\u003C/b\u003E. The method for this is similar to that described in the KSPedia tutorial, just without the \u003Cb\u003EKSPedia Database\u003C/b\u003E steps.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EDrag any prefabs into the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAssets\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E folder in your \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EProject Window\u00A0\u003C/b\u003E(this would be the \u003Cstrong\u003EPanel\u003C/strong\u003E that we added to the \u003Cstrong\u003ECanvas\u003C/strong\u003E\u00A0at the start for our window)\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ESet the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAssetBundle\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E name in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EProperties\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPanel\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E in the lower right\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThen open or go to the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAsset Compiler window -\u0026gt; Create (for your bundle) -\u0026gt; Update -\u0026gt; Build\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis will export a file into the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAssetBundles\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E folder in your \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EUnity Project\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, it should have the .ksp file extension\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 3: Hooking up the UI:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow to get to the fun part. By making use of the Unity Editor we can assign methods to all of the toggles and buttons, store references to text elements so they can be updated later, spawn new windows, and much more. To do this we need to make a new assembly that can be imported into the Unity Editor. Any MonoBehaviours defined in this assembly can then be added as scripts to our UI objects. These can be scripts that control specific behaviors, like switching text colors when mousing-over an element, or that control the various window functions.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u2019ll be referring to the assembly that is imported into the Unity editor as the \u003Cb\u003EUnity Assembly\u003C/b\u003E, and the assembly that uses KSP code as the \u003Cb\u003EKSP Assembly\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EUnity Assembly:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWe create our \u003Cb\u003EUnity Assembly\u003C/b\u003E the same as any other, it\u00A0should use .Net 3.5, but it should only add references to UnityEngine and UnityEngine.UI, it should not have any references to KSP assemblies. For our \u003Cb\u003EKSP Assembly\u003C/b\u003E we create that as always, and we add a reference to our new \u003Cb\u003EUnity Assembly\u003C/b\u003E. This means that the \u003Cb\u003EKSP Assembly\u003C/b\u003E can call any public methods from the \u003Cb\u003EUnity Assembly\u003C/b\u003E, modify any public fields, and implement interfaces. But the \u003Cb\u003EUnity Assembly\u003C/b\u003E can\u2019t directly communicate with the upstream \u003Cb\u003EKSP Assembly\u003C/b\u003E, or directly use any KSP code. There are a few ways around this, we could use some sort of listener and events system to trigger methods in the \u003Cb\u003EKSP Assembly\u003C/b\u003E or use interfaces in the \u003Cb\u003EUnity Assembly\u003C/b\u003E. We\u2019ll be using the interface method.\n\u003C/p\u003E\n\u003Cp\u003E\nTo simplify importing your assembly into Unity you might want to add a post-build event to your VS project that copies the assembly into the Unity folder:\n\u003C/p\u003E\n\u003Cp\u003E\ncopy /y \u0022$(TargetPath)\u0022 \u0022C:\\YourUnityProjectFolder\\Assets\\Plugins\\\u0022\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ECreating Scripts for Unity:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAny class that inherits from a Unity MonoBehaviour can be imported into Unity and added as a component to any other Unity object.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETo import an assembly into the Unity Editor just drag the .dll into your Unity project\u2019s \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAsset\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E folder, there should be a separate \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPlugins\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E folder\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EOnce it is imported you can add the script to any Unity object: \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAdd Component -\u0026gt; Scripts -\u0026gt; Your.Assembly.NameSpace -\u0026gt; YourScript\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ENow the script is added to that object and a new instance will be instantiated whenever that object, or its parent object is created\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThese scripts can accomplish several things\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThey can store references to elements of the UI that need to modified by the script\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nThey can add behaviors to elements, such as controlling text color, or for replacing standard Unity Text elements with KSP\u2019s new vector font Text Mesh Pro elements\n\u003C/li\u003E\n\u003Cli\u003E\nThey can be used to assign listeners to buttons, toggles, sliders, etc\u2026\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nFor the simple window that we\u2019ve already created we have a Text element that needs to be updated in-game (the little mod version label), and several toggles. Because we want to set the initial state of some of these toggles (one controls whether a separate window is open or closed, so if it\u2019s already open that toggle should be set to the on state), and because we want some of the toggles to affect others, we need to store references to the Toggle elements. And we need to assign listeners to the Toggle scripts.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nAny field with Primitive Types, or Unity Object Types can be set in the script then assigned to in the Unity Editor\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EStoring these fields allows for easy access in the script\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EUI\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enamespace\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EBasicOrbit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EUnity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EUnity\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ERequireComponent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etypeof\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003ERectTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E))]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EBasicOrbit_Example\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMonoBehaviour\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EToggle\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_OrbitToggle \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EToggle\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_OrbitDragToggle \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EToggle\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_OrbitSettingsToggle \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EText\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_VersionText \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cspan\u003E\u00A0\u00A0 \u00A0\u003Cimg alt=\u0022zVImC9T.png\u0022 class=\u0022ipsImage\u0022 style=\u0022width:520px;height:auto;\u0022 src=\u0022http://i.imgur.com/zVImC9T.png\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nNote the RequireComponent attribute at the top, this simply means that the specified types must also be present on the same GameObject\n\u003Cul\u003E\u003Cli\u003E\nAll UI elements that actually draw something on the screen (images, text, etc\u2026) require a CanvasRenderer, for example\n\u003C/li\u003E\n\u003Cli\u003E\nIf that component isn\u2019t present on the object it will be added when you add the script\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nPublic fields will automatically be added to the script\u2019s Inspector tab\n\u003Cul\u003E\u003Cli\u003E\nYou can set attach the [NonSerialized] attribute to public fields to prevent them from being shown in the editor or serialized\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nPrivate fields can be added by attaching the [SerializeField] attribute (unity chops off the m_ part of the field\u0027s name in the Inspector window)\n\u003C/li\u003E\n\u003Cli\u003E\nThese fields can be filled in by simply dragging the desired elements into their respective fields, or by selecting the little circle to right of the field and selecting the element from a list of all valid elements in the project, or by filling in the desired value for primitive\u00A0types\n\u003C/li\u003E\n\u003Cli\u003E\nNow we can access these fields from any instance of the script, though it is still a good idea to check if they are null, in case of errors made when setting up the UI, or exporting your prefabs\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nTo access or update these properties we just use these references\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tpublic void updateVersionText(string newText)\n\t\t{\n\t\t\tif (m_VersionText != null)\n\t\t\t\tm_VersionText.text = newText;\n\t\t}\n\n\t\tpublic void setInitialToggle(bool isOn)\n\t\t{\n\t\t\tif (m_OrbitToggle != null)\n\t\t\t\tm_OrbitToggle.isOn = isOn;\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nOne thing to note about setting \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E states like this, whenever you change a \u003Cb\u003EToggle\u2019s isOn\u003C/b\u003E field, it will trigger that \u003Cb\u003EToggle\u2019s Listener Events\u003C/b\u003E, so anything you or anyone else has attached to this \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E will be triggered. One way of getting around this is to have a \u003Cb\u003EBool\u003C/b\u003E set to \u003Cb\u003EFalse\u003C/b\u003E while you are doing the initial setup. Then set your \u003Cb\u003EToggle Listener\u003C/b\u003E to not do anything when the \u003Cb\u003ELoaded Flag\u003C/b\u003E is \u003Cb\u003EFalse\u003C/b\u003E, after the setup is complete you can set the \u003Cb\u003EFlag\u003C/b\u003E to \u003Cb\u003ETrue\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow to add listeners to Toggles and Buttons. The Unity UI attaches listeners to Unity Events triggered by a Button, Toggle, Slider, etc\u2026 Any public method that meets the requirement of that particular event can be added as a listener.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tpublic void OrbitPanelToggle(bool isOn)\n\t\t{\n\t\t\tif (!loaded)\n\t\t\t\treturn;\n\n\t\t\tif (m_OrbitToggle == null)\n\t\t\t\treturn;\n\n\t\t\t//Turn on Orbit Panel\n\t\t}\n\n\t\tpublic void OrbitDragToggle(bool isOn)\n\t\t{\n\t\t\tif (m_OrbitDragToggle == null)\n\t\t\t\treturn;\n\n\t\t\t//Turn on Orbit Panel drag state\n\t\t}\n\n\t\tpublic void OrbitSettingsToggle(bool isOn)\n\t\t{\n\t\t\tif (m_OrbitSettingsToggle == null)\n\t\t\t\treturn;\n\n\t\t\t//Spawn Orbit Panel settings window\n\t\t}\n\n\t\tpublic void myButtonListener()\n\t\t{\n\t\t\t//Methods with no arguments can be added to any button or to any other element if the argument does not need to be specified\n\t\t}\n \n\t\tpublic void mySliderAlpha(float alpha)\n\t\t{\n\t\t\tif (!loaded)\n\t\t\t\treturn;\n\n\t\t\tif (m_AlphaText != null)\n\t\t\t\tm_AlphaText.text = alpha.ToString(\u0022P0\u0022);\n\n            //Change panel background alpha\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022o3EzsXL.png\u0022 class=\u0022ipsImage\u0022 style=\u0022width:500px;height:auto;\u0022 src=\u0022http://i.imgur.com/o3EzsXL.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nInside the Inspector tab for any Unity element with a Unity Event there is a section for adding listeners, you can add more by selecting the plus button on the bottom.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nAdd a listener by first selecting an object for the little box below the \u201C\u003Cb\u003ERuntime Only\u003C/b\u003E\u201D box\n\u003Cul\u003E\u003Cli\u003E\nThis will be the object that contains the script which has your listener\n\u003C/li\u003E\n\u003Cli\u003E\nYou can either drag the object into the box, or select it from the list using the little circle\n\u003C/li\u003E\n\u003Cli\u003E\nIn this case we select the parent Panel object, which has our example script\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThe specific method is then selected in the box on the right\n\u003Cul\u003E\u003Cli\u003E\nThis box has a list of all components attached to the selected object\n\u003C/li\u003E\n\u003Cli\u003E\nSelect the Example script which will then show a list of all public methods that can be chosen\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow we can just basically repeat these steps wherever needed. If you need access to an object somewhere, just add a reference to it in your script and assign it in the editor. If you need more listeners, just add them. More complicated behaviors will be explained later.\n\u003C/p\u003E\n\u003Cp\u003E\nOne thing to note about Buttons, Toggles, etc, is the \u003Cb\u003ETransition\u003C/b\u003E and \u003Cb\u003ENavigation\u003C/b\u003E elements in their \u003Cb\u003EInspector tabs.\u003C/b\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ETransition\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E refers to how the element behaves in its different states\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb\u003ESprite Swap\u003C/b\u003E transitions mean that different sprites are used for the normal state, when the mouse is over the object, or for when the mouse is clicking on the object\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EColor Tint\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E just adjusts the color tint for the attached Image element in those same states\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EAnimation\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E uses Unity Animations to design more complex behaviors\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nThis is something that will be covered more later, but KSP generally uses \u003Cb\u003ESprite Swap\u003C/b\u003E transitions, and for this example these states will all be setup in-game\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ENavigation\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E refers to keyboard navigation and is generally something that should be deactivated\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWhen you click on an object it will become the \u201C\u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003Eactive\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E\u201D object until you click somewhere else unless \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ENavigation\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is disabled\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis means that the element will remain in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EHighlighted\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E state\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022margin-left:1in;text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 4: Assembly Communication:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow that we have our UI hooked up to the \u003Cb\u003EUnity Assembly\u003C/b\u003E we need to get it communicating with the \u003Cb\u003EKSP assembly\u003C/b\u003E. There are probably several ways of handling this, but I\u2019ve been using Interfaces in the \u003Cb\u003EUnity Assembly\u003C/b\u003E to handle it. The basic idea is to create one or more interfaces with the methods and fields needed to send information between the two assemblies, then we add those interfaces to objects in our\u003Cb\u003E KSP Assembly\u003C/b\u003E. This basically serves two purposes, the interface us used to set the initial state of the UI when it is created, using information from KSP, this could be persistent data, or just anything that can be altered at run time, like the name of a vessel. And it allows for the UI elements to make changes on the KSP side, by setting persistent data, or triggering a KSP-related function.\n\u003C/p\u003E\n\u003Cp\u003E\nIn our last example we had a window with several \u003Cb\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E elements, a \u003Cb\u003E\u003Ci\u003EText\u003C/i\u003E\u003C/b\u003E field, and a method for the alpha \u003Cb\u003E\u003Ci\u003ESlider\u003C/i\u003E\u003C/b\u003E, so the interface contains what is needed to setup those elements, and to transfer data to the \u003Cb\u003EKSP Assembly\u003C/b\u003E for persistent storage.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Enamespace BasicOrbit.Unity.Interface\n{\n\tpublic interface IExample\n\t{\n\t\tstring Version { get; }\n\n\t\tbool ShowOrbit { get; set; }\n\n\t\tfloat Alpha { get; set; }\n\t}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe \u003Cb\u003E\u003Ci\u003EVersion\u003C/i\u003E\u003C/b\u003E string is read-only, since the UI does nothing to alter it\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EShow Orbit\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E bool is read to set the initial state, but can also be set by the UI when clicking on the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EToggle\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EAlpha\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E float is also used to set the initial state, and needs to be updated when changing the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ESlider\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E value\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSo now we can set the UI\u2019s initial state by implementing our interface on an object in the \u003Cb\u003EKSP Assembly\u003C/b\u003E and calling the \u003Cb\u003ESetup\u003C/b\u003E method.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate IExample exampleInterface;\n\n\t\tpublic void setInitialState(IExample example)\n\t\t{\n\t\t\tif (example == null)\n\t\t\t\treturn;\n\n\t\t\texampleInterface = example;\n\n\t\t\tif (m_VersionText != null)\n\t\t\t\tm_VersionText.text = example.Version;\n\n\t\t\tif (m_OrbitToggle != null)\n\t\t\t\tm_OrbitToggle.isOn = example.ShowOrbit;\n\n\t\t\tif (m_AlphaSlider != null)\n\t\t\t\tm_AlphaSlider.value = example.Alpha;\n\n\t\t\tif (m_AlphaText != null)\n\t\t\t\tm_AlphaText.text = example.Alpha.ToString(\u0022P0\u0022);\n\n\t\t\tloaded = true;\n\t\t}\n\n\t\tpublic void OrbitPanelToggle(bool isOn)\n\t\t{\n\t\t\tif (!loaded)\n\t\t\t\treturn;\n\n\t\t\tif (m_OrbitToggle == null)\n\t\t\t\treturn;\n\n\t\t\tif (exampleInterface != null)\n\t\t\t\texampleInterface.ShowOrbit = isOn;\t\t\t\n\n\t\t\t//Turn on Orbit Panel\n\t\t}\n\n\t\tpublic void mySliderAlpha(float alpha)\n\t\t{\n\t\t\tif (!loaded)\n\t\t\t\treturn;\n\n\t\t\tif (exampleInterface != null)\n\t\t\t\texampleInterface.Alpha = alpha;\n\n\t\t\tif (m_AlphaText != null)\n\t\t\t\tm_AlphaText.text = alpha.ToString(\u0022P0\u0022);\n\n\t\t\t//Set panel background transparency\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nNote that we store a reference to the interface for use by the listener methods\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EMake sure to set the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ELoaded Flag\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to true if needed\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ET\u003C/span\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003Ehe code for actually turning on the separate panel, or changing the background image\u2019s alpha channel can all be handled within the\u00A0\u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EUnity Assembly\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 5: Turning it On:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow we have to be able to actually turn on the UI. To do this we need a reference to the \u003Cb\u003E\u003Ci\u003EUI Prefab\u003C/i\u003E\u003C/b\u003E and a button somewhere to trigger the UI. We can let KSP load the \u003Cb\u003E\u003Ci\u003EAssetBundle\u003C/i\u003E\u003C/b\u003E that was exported from Unity, anything with a .ksp file extension should be loaded, or we can load it ourselves (KSP won\u2019t load it twice, so there is no duplication of resources doing it this way; you can also just remove the .ksp extension to hide it from KSP\u2019s asset loader). I\u2019ve been loading it myself, it works find, and it allows me to open it immediately upon starting KSP. If we need to process or update all of the prefabs it can be useful to load in all of the prefabs, but to generate a window all you really need is the primary prefab (anything that will be created directly by the \u003Cb\u003EKSP Assembly\u003C/b\u003E). We can store prefabs as references in our Unity scripts by adding a serializable GameObject.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nA simple KSPAddon can be used to manually load and store a reference to the prefab:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t[KSPAddon(KSPAddon.Startup.Instantly, true)]\n\tpublic class BasicOrbitLoader : MonoBehaviour\n\t{\n\t\tprivate static GameObject panelPrefab;\n\n\t\tpublic static GameObject PanelPrefab\n\t\t{\n\t\t\tget { return panelPrefab; }\n\t\t}\n\n\t\tprivate void Awake()\n\t\t{\n\t\t\tstring path = KSPUtil.ApplicationRootPath \u002B \u0022GameData/YourMod/PrefabFolder\u0022;\n\n\t\t\tAssetBundle prefabs = AssetBundle.LoadFromFile(path \u002B \u0022/your_bundle_name\u0022);\n\n\t\t\tpanelPrefab = prefabs.LoadAsset(\u0022Your_Prefab_Name\u0022) as GameObject;\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThen we need an object that implements our interface; this can get its data from a persistent settings file, or a scenario module, from in-game data, or any other suitable source:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t[KSPAddon(KSPAddon.Startup.Flight, false)]\n\tpublic class BasicExample : MonoBehaviour, IExample\n\t{\n\t\tprivate string _version;\n\t\tprivate static BasicExample instance = null;\n\n\t\tpublic static BasicExample Instance\n\t\t{\n\t\t\tget { return instance; }\n\t\t}\n\n\t\tprivate void Awake()\n\t\t{\n\t\t\tinstance = this;\n\t\t\t_version = \u0022Assembly Info Version\u0022;\n\t\t}\n\t\n\t\tpublic string Version\n\t\t{\n\t\t\tget { return _version; }\n\t\t}\n\n\t\tpublic bool ShowOrbit\n\t\t{\n\t\t\tget { return BasicSettings.Instance.showOrbitPanel; }\n\t\t\tset { BasicSettings.Instance.showOrbitPanel = value; }\n\t\t}\n\n\t\tpublic float Alpha\n\t\t{\n\t\t\tget { return BasicSettings.Instance.panelAlpha; }\n\t\t\tset { BasicSettings.Instance.panelAlpha = value; }\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nTo open the window we just need to setup a toolbar button as normal and use the Open function to start the UI:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tBasicOrbit_Example window;\t\t\n\n        private void Open()\n\t\t{\n\t\t\tif (BasicOrbitLoader.PanelPrefab == null)\n\t\t\t\treturn;\n\n\t\t\tGameObject obj = Instantiate(BasicOrbitLoader.ToolbarPrefab, GetAnchor(), Quaternion.identity) as GameObject;\n\n\t\t\tif (obj == null)\n\t\t\t\treturn;\n\n\t\t\tobj.transform.SetParent(MainCanvasUtil.MainCanvas.transform);\n\n\t\t\twindow = obj.GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;BasicOrbit_Example\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (window == null)\n\t\t\t\treturn;\n\n\t\t\twindow.setInitialState(BasicExample.Instance);\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe arguments in the Instantiate method are used to set the window\u2019s position and rotation\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe rotation is set to zero\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nHere the position is set using the \u003Cb\u003EToolbar Button\u2019s\u003C/b\u003E GetAnchor method\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThere are several canvases that could be used, but in general the MainCanvas will probably be best\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe can get a reference to the UI script since it is attached to the newly instantiated object\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ET\u003C/span\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003Ehe window can be closed by either hiding it or destroying it\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EYou can hide the window by setting its gameObject.SetActive(false)\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ET\u003C/span\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003Ehis can be used if the window has a complicated initial setup and you don\u2019t want to keep repeating that\u003C/span\u003E\u00A0\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis should be enough to get a basic window into KSP. Future sections will go over dynamic UI generation and UI layouts elements, specific UI features, KSP-style UI elements, and using TextMeshPro for all text elements. They should also, hopefully, be much shorter, since they won\u2019t have to cover so much information.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want to setup your UI with the legacy Unity GUI style elements, they are available for free on the \u003Ca href=\u0022https://www.assetstore.unity3d.com/en/#!/content/5105\u0022 rel=\u0022external nofollow\u0022\u003EAsset Store\u003C/a\u003E. You will need to import them into Unity and use the Sprite Editor to set the Splicing lines properly (so that the images stretch to fit whatever size is needed). After that you can simply drag the sprites into your Image elements wherever needed.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-06-22T16:56:15Z\u0022 title=\u002206/22/2020 04:56  PM\u0022 data-short=\u00224 yr\u0022\u003EJune 22, 2020\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2016-11-21T15:38:35Z","Content":"\n\u003Cp\u003E\nIn this section we\u2019ll go over how to use layout groups, how to make your window adjust its size to the content within, and how to attach a variable number of elements using prefabs.\n\u003C/p\u003E\n\u003Cp\u003E\nIn principle Unity UI layout groups are simple, there are Horizontal and Vertical Layout groups. By adding child elements, with Layout Elements attached, to a GameObject with a Layout Group the children will be organized according to their order, with their size adjusted according to the Layout Element settings.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 1: Layout Groups and Elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBasic Orbit has two panels that use Layout Groups to create a variable-sized window. These two windows (the background image transparency is turned down very low) use the same prefab, but a different number of readout modules.\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022d4IpnII.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/d4IpnII.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThere are two components that drive windows like this; the Layout Group and the Content Size Fitter.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ELayout Groups:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Ci\u003EVertical and Horizontal Layout Groups\u003C/i\u003E\u003C/b\u003E are standard components that can be added to any UI element through the \u003Cb\u003EAdd Component\u003C/b\u003E button in the \u003Cb\u003EUnity Editor Inspector Panel\u003C/b\u003E. Only one \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E can be placed on a GameObject, but as many as is necessary can be placed on child objects. For this example we are only using \u003Cb\u003E\u003Ci\u003EVertical Layout Groups\u003C/i\u003E\u003C/b\u003E, \u003Cb\u003E\u003Ci\u003EHorizontal Layout Groups\u003C/i\u003E\u003C/b\u003E work essentially the same way.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nTo make a window like those shown above we need to create a new \u003Cb\u003E\u003Ci\u003EPanel\u003C/i\u003E\u003C/b\u003E and add a \u003Cb\u003E\u003Ci\u003EVertical Layout Group\u003C/i\u003E\u003C/b\u003E element\n\u003C/li\u003E\n\u003Cli\u003E\nThe script has several properties\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb\u003EPadding\u003C/b\u003E allows for a border to be placed around the edges of all child \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\n\u003Cul\u003E\u003Cli\u003E\nPadding is applied after all child elements are placed\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ESpacing\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E places the specified number of pixels between each child \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EChild Alignment\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E doesn\u2019t seem to do anything; I think it may be used for cases where your \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E don\u2019t fill out all of the available space\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EChild Force Expand\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E can be used to make the child elements expand to fill out available space in the window; this would usually be used for \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EWidth\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E with a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EVertical Layout Group\u003C/i\u003E\u003C/b\u003E\u00A0\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022jqw39tz.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/jqw39tz.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nBy itself the \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E won\u2019t do very much, so we need to add child \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nIn this case, each element will need an empty \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E and two child \u003Cb\u003E\u003Ci\u003EText \u003C/i\u003E\u003C/b\u003Eelements\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWe could use the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E elements as \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E (perhaps within a parent \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EHorizontal Layout Group\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E), but it is generally best to minimize the number of \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E has several fields to specify its size and flexibility\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EMin Width and Height\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E are used to set the minimum allowed size, they also set the baseline for the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred Size\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred Width and Height\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E can be used for some more advanced behavior, such as variable sized objects based on the length of the text content, which we\u2019ll get to later\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis is also used frequently used in conjunction with the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, which we\u2019ll also get to later\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EFlexible Width and Height\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E can be used to limit how much the size of the element can be changed\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EA value of 0 means no change is allowed; I believe 0 is implied if the option is unchecked\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022jLFZ0JX.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/jLFZ0JX.png\u0022\u003E\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nNote how most of the \u003Cb\u003E\u003Ci\u003ERectTransform\u003C/i\u003E\u003C/b\u003E values cannot be adjusted, since they are being controlled by the parent \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E\u00A0\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nNow we have a window with several \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E under a parent \u003Cb\u003E\u003Ci\u003EVertical Layout\u003C/i\u003E\u003C/b\u003E \u003Cb\u003E\u003Ci\u003EGroup\u003C/i\u003E\u003C/b\u003E. To get the window to adjust automatically to these, and any additional elements, we\u2019ll need to tell the window how to fit everything.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003EContent Size Fitter:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAt the very top-level \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E we need to add a \u003Cb\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E component. Only one should be added to window (which can sometimes make things tricky in Unity, since we are usually creating all the different UI elements as separate objects that will be combined later in-game) and it should be added alongside a \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E element.\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022K0ChFVy.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/K0ChFVy.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThese are the scripts attached to the top-level object in this hierarchy. It\u2019s important to note that the \u003Cb\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E element is included here; this is used as the window\u2019s background image and will be re-sized along the window according to how many \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E are present (the \u003Cb\u003E\u003Ci\u003ECanvas Group\u003C/i\u003E\u003C/b\u003E is used to control the fade in and out behavior that we will get to much later). Also, note how the \u003Cb\u003ERectTransform\u2019s Height\u003C/b\u003E field cannot be altered, since it is under the control of the \u003Cb\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nThere is a \u003Cb\u003E\u003Ci\u003EVertical Layout Group\u003C/i\u003E\u003C/b\u003E added here; this is the direct parent of the \u003Cb\u003E\u003Ci\u003EVertical Layout Group\u003C/i\u003E\u003C/b\u003E described above\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ESince this is a simple window none of its properties need to be changed, more complex windows may need adjustments to the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPadding\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E or \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ESpacing\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is added and its \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EVertical Fit\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E field is set to \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred Size\u003C/b\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EHorizontal Fit\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E does not need to be changed, since the window is intended to be fixed-width\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis will force the window to adjust its size properties to fit the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred Height\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E values of all of the child \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EIt also takes into account all of the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003ESpacing\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPadding\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E specified in any included \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Groups\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EEach time a new \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is added or removed the window will be re-sized to adjust\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis also happens when a child \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E is set to active or inactive\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022margin-left:1.5in;text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe \u003Cb\u003E\u003Ci\u003ELayout Groups\u003C/i\u003E\u003C/b\u003E and \u003Cb\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E are simple in principle, but can get quite complicated to deal with when working with, and adjusting \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ELayout Element Prefabs:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWhen we want to dynamically add \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E to a \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E it is sometimes necessary to make separate prefabs that can be instantiated multiple times depending on your needs. Basic Orbit is constructed this way, with each readout module consisting of a \u003Cb\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E and two \u003Cb\u003E\u003Ci\u003EText Elements\u003C/i\u003E\u003C/b\u003E. The prefab is then instantiated as many times as is necessary and added to the readout panel.\n\u003C/p\u003E\n\u003Cp\u003E\nFor the parent panel we just need to store a reference to the \u003Cb\u003E\u003Ci\u003EPrefab GameObject\u003C/i\u003E\u003C/b\u003E, and to the \u003Cb\u003E\u003Ci\u003ETransform\u003C/i\u003E\u003C/b\u003E where we want to add the prefabs, this transform should have a \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E that will control the size and positioning of the elements. The picture with the \u003Cb\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E above demonstrates this in its \u003Cb\u003E\u003Ci\u003EBasic Orbit_Panel script\u003C/i\u003E\u003C/b\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 2: Adding Prefab Elements to a Layout Group:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow that we have our \u003Cb\u003E\u003Ci\u003ELayout Groups\u003C/i\u003E\u003C/b\u003E and \u003Cb\u003E\u003Ci\u003EPrefabs\u003C/i\u003E\u003C/b\u003E setup we need to actually add them to our window in-game. First off we need a script attached to the window with references to the \u003Cb\u003E\u003Ci\u003EPrefabs\u003C/i\u003E\u003C/b\u003E and to the \u003Cb\u003E\u003Ci\u003ETransform\u003C/i\u003E\u003C/b\u003E where they will be added (see part I for how to generate these scripts; prefabs can be dragged into a \u003Cb\u003ESerializable GameObject\u003C/b\u003E field the same as any other object).\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nGenerate a list of all the elements that need to be added to the window\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EFor Basic Orbit these are readout modules defined in the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EKSP Assembly\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThis could be anything, for instance, a list of vessels with their names and locations\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EEnumerate through the list and instantiate a new instance of the prefab for each element\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ET\u003C/span\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003Ehis process is generally the same as that defined in part I\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe only difference is that the new \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EUI Element\u2019s Transform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E parent is set to the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EWindow Transform\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E described above\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EYou can hide the new element, or use some logic for dynamically turning elements on and off if necessary\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EUsing gameObject.SetActive(true/false) will change the visibility of the element, and make the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E readjust the window to compensate\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EIn general, you should try to limit SetActive calls\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EUse gameObject.activeSelf or activeInHierarchy to check if an element is active or not before using SetActive\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022margin-left:1in;text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nUsing a list of the layout elements from the \u003Cb\u003EKSP Assembly\u003C/b\u003E (using the interface method described in part I) we can instantiate and add our new objects to the \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E one at a time. Since not all elements will necessarily be active when they are first added we set their active status based on information from the \u003Cb\u003EKSP Assembly\u003C/b\u003E. It is sometimes useful to keep references to the UI elements that we are adding, that way they can be updated, removed, or monitored in some other way whenever we need them.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\t\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_ModulePrefab \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003ESerializeField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_ModuleTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EBasicOrbit_Module\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EModules\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EBasicOrbit_Module\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EIBasicPanel\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E panelInterface\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E setPanel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EIBasicPanel\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E panel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Epanel \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\tpanelInterface \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E panel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan\u003ECreateModules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Epanel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetModules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ECreateModules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EIList\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EIBasicModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E modules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodules \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Em_ModulePrefab \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E||\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_ModuleTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Efor\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E modules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ECount\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E--)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan\u003EIBasicModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E module \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E modules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E];\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodule \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econtinue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\t\u003C/span\u003E\u003Cspan\u003ECreateModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ECreateModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EIBasicModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E module\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E mod \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInstantiate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Em_ModulePrefab\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emod \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\tmod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ESetParent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Em_ModuleTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Efalse\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan\u003EBasicOrbit_Module\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E bMod \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E mod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EBasicOrbit_Module\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EbMod \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\tbMod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EsetModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\tbMod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgameObject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ESetActive\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EIsVisible\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E||\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E module\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAlwaysShow\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\t\t\u003C/span\u003E\u003Cspan\u003EModules\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EbMod\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 3: Text Content-Based Layout Element Size:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThere is a special case when dealing with \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E where you may want an object to fit the size of its text content, for instance, you have a button that might have a long text string. \u003Cb\u003E\u003Ci\u003ELayout Elements\u003C/i\u003E\u003C/b\u003E and \u003Cb\u003E\u003Ci\u003ELayout Groups \u003C/i\u003E\u003C/b\u003Ecan be used to handle this. There is also a section in the \u003Ca href=\u0022https://docs.unity3d.com/Manual/HOWTO-UIFitContentSize.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity tutorials\u003C/a\u003E that deals specifically with this.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EA specific setup is required for this\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E should be a direct child of the element that needs its size to be adjusted\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EFor instance, you have a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EButton Script\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E with an \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E on the same \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, then the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E should be a child of that \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe parent object (the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EButton\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E) should have a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Group Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E (either Vertical or Horizontal should work)\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E should have a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EDefine a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EMin Width\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E and \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EHeight\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E, but leave the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E values unchecked\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EThe \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EPivot\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E point (the blue circle, not to be confused with the anchor point) for the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EText Element\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E should be put at the origin of where you want it to expand from\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ETop-center if you want the \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EButton\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E to have a fixed width, variable height and fixed top position\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003ESomewhere upstream needs to be a \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003E\u003Ci\u003EContent Size Fitter\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E with its \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EVertical Fit\u003C/b\u003E\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003E set to \u003C/span\u003E\u003Cb style=\u0022text-indent:-.25in;\u0022\u003EPreferred Size\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\u0022text-indent:-.25in;\u0022\u003EWhen all of these requirements are met the UI element should adjust its size based on the length of the text content\u003C/span\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp style=\u0022text-indent:-.25in;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNote here the \u003Cb\u003E\u003Ci\u003ELayout Element\u003C/i\u003E\u003C/b\u003E on the \u003Cb\u003E\u003Ci\u003EText Element\u003C/i\u003E\u003C/b\u003E (left), with its \u003Cb\u003EPreferred Height\u003C/b\u003E field left blank, the \u003Cb\u003EPivot\u003C/b\u003E position, and the \u003Cb\u003E\u003Ci\u003ELayout Group\u003C/i\u003E\u003C/b\u003E on the parent object (right) with the \u003Cb\u003E\u003Ci\u003EToggle Script \u003C/i\u003E\u003C/b\u003Eand\u003Cb\u003E\u003Ci\u003E Image\u003C/i\u003E\u003C/b\u003E. The Contracts Window \u002B source and Unity project files are also available on \u003Ca href=\u0022https://github.com/DMagic1/KSP_Contract_Window\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E, though in general I would recommend not using it as a reference, it is an extremely complicated UI and has many elements that are adapted specifically to its needs.\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022szZEg8E.png\u0022 class=\u0022ipsImage\u0022 height=\u0022750\u0022 src=\u0022http://i.imgur.com/szZEg8E.png\u0022 width=\u0022941\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn the next section we\u2019ll go over how to apply KSP style UI elements to our creations.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-21T15:39:52Z\u0022 title=\u002211/21/2016 03:39  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 21, 2016\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2016-11-29T15:21:09Z","Content":"\n\u003Cp\u003E\nIn this section we\u2019ll go over how to implement style elements for your UI so that your windows, buttons, sliders, etc\u2026 can match the KSP style.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP defines a UISkinDef that contains all of the sprites used for the different states of all the common UI elements. Using this we can assign those sprites to our UI. You could also, theoretically define your own UISkinDef, using the old Unity Smoke UI elements, for instance, and possibly\u00A0allow for switching between the two styles (if you only want to use the Unity UI style it would probably be easier to just assign all of the sprites within Unity.\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic method used here, like much of the material covered in this tutorial comes from \u003Ca href=\u0022https://github.com/CYBUTEK/KerbalEngineer/blob/master/KerbalEngineer.Unity/UI/StyleApplicator.cs\u0022 rel=\u0022external nofollow\u0022\u003EKerbal Engineer Redux\u003C/a\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022SSHDzVC.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/SSHDzVC.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 1: Tagging UI Elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe first step is to create some kind of tag for all of the different UI elements that we are using, this will be used to identify those elements and to determine which KSP style to apply to them.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCreate a simple script in your \u003Cb\u003EUnity Assembly\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nDefine an \u003Cb style=\u0022text-indent:.5in;\u0022\u003E\u003Ci\u003EEnum\u003C/i\u003E\u003C/b\u003E\u003Cspan style=\u0022text-indent:.5in;\u0022\u003E with options for each type of UI element\u003C/span\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb\u003EWindow, box, slider, button, toggle button, regular toggle\u003C/b\u003E, etc\u2026\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb\u003EText\u003C/b\u003E will be covered in a later section\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nAdd a serializable field for that \u003Cb\u003E\u003Ci\u003EEnum\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nAdd the script to each \u003Cb\u003E\u003Ci\u003EUI Element\u003C/i\u003E\u003C/b\u003E in your Unity project and choose the matching option for the \u003Cb\u003EEnum\u003C/b\u003E \u003Cb\u003EField\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nYou want the script to be attached to the same \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E that needs styling applied\n\u003Cul\u003E\u003Cli\u003E\nThe window or box option should be added to a \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E with an \u003Cb\u003E\u003Ci\u003EImage\u003C/i\u003E\u003C/b\u003E element\n\u003C/li\u003E\n\u003Cli\u003E\nThe button should be added to a \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E with the \u003Cb\u003E\u003Ci\u003EButton\u003C/i\u003E\u003C/b\u003E script, etc\u2026\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf you add in new \u003Cb\u003E\u003Ci\u003EEnum\u003C/i\u003E\u003C/b\u003E options later on make sure to them to the end of the list, otherwise you will need to update the selection for each existing \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E that the script has been added to\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\tpublic class BasicStyle : MonoBehaviour\n\t{\n\t\tpublic enum ElementTypes\n\t\t{\n\t\t\tNone,\n\t\t\tWindow,\n\t\t\tBox,\n\t\t\tButton,\n\t\t\tToggle,\n\t\t\tSlider\n\t\t}\n\n\t\t[SerializeField]\n\t\tprivate ElementTypes m_ElementType = ElementTypes.None;\n\n\t\tpublic ElementTypes ElementType\n\t\t{\n\t\t\tget { return m_ElementType; }\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cimg alt=\u0022N2O5HOE.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/N2O5HOE.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 2: Finding the Tags:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nOnce you\u2019ve added the script to each \u003Cb\u003E\u003Ci\u003EUI Element\u003C/i\u003E\u003C/b\u003E that needs styling you\u2019ll need to create a method for processing each \u003Cb\u003E\u003Ci\u003EUI Element\u003C/i\u003E\u003C/b\u003E from in-game. Engineer processes each element whenever it is created, but I think it\u2019s better to work at the prefab level, loading and processing each prefab as soon as possible so that it only needs to be done once.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCreate a script in your \u003Cb\u003EKSP Assembly\u003C/b\u003E for loading and processing the prefabs\n\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cb\u003EUISkinDefs\u003C/b\u003E can be accessed through \u003Cb\u003EUISkinManager\u003C/b\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cb\u003EdefaultSkin\u003C/b\u003E contains the definitions that will be of interest in most cases\n\u003C/li\u003E\n\u003Cli\u003E\nThese are only available once the Main Menu has been loaded, so prefab processing can\u2019t occur during the initial\u00A0loading scene\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nI\u2019ve been manually loading the \u003Cb\u003Eassetbundles\u003C/b\u003E and then loading the prefabs from there\n\u003Cul\u003E\u003Cli\u003E\nIt\u2019s also possible to keep the .ksp file extension on the \u003Cb\u003Eassetbundle\u003C/b\u003E and let KSP load it\n\u003C/li\u003E\n\u003Cli\u003E\nMake sure that all prefabs in your \u003Cb\u003Eassetbundle\u003C/b\u003E use the same tag name\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nStore a reference to the list of all prefabs so they can be processed when ready\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t[KSPAddon(KSPAddon.Startup.MainMenu, false)]\n\tpublic class BasicOrbitLoader : MonoBehaviour\n\t{\n\n\t\tprivate static GameObject[] loadedPrefabs;\n\n\t\tprivate void Awake()\n\t\t{\n\t\t\tif (loadedPrefabs == null)\n\t\t\t{\n\t\t\t\tstring path = KSPUtil.ApplicationRootPath \u002B \u0022GameData/BasicOrbit/Resources\u0022;\n\n\t\t\t\tAssetBundle prefabs = AssetBundle.LoadFromFile(path \u002B \u0022/basic_orbit_prefabs\u0022);\n\n\t\t\t\tif (prefabs != null)\n\t\t\t\t\tloadedPrefabs = prefabs.LoadAllAssets\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;GameObject\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\t\t\n\t\t\t}\n\n\t\t\tif (loadedPrefabs != null)\n\t\t\t{\n\t\t\t\tif (UISkinManager.defaultSkin != null)\n\t\t\t\t\tprocessUIPrefabs();\n\t\t\t}\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nOnce the prefabs are loaded we can use the \u003Cb\u003E\u003Ci\u003EStyle\u003C/i\u003E\u003C/b\u003E script as a tag for finding which elements need to be processed\n\u003C/li\u003E\n\u003Cli\u003E\nEnumerate through each prefab, selecting the Style object from every child of that prefab\n\u003C/li\u003E\n\u003Cli\u003E\nUse the \u003Cb\u003EUISkinDef\u003C/b\u003E elements and the \u003Cb\u003E\u003Ci\u003EStyle Enum\u003C/i\u003E\u003C/b\u003E to process each element according to its needs\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate void processUIPrefabs()\n\t\t{\n\t\t\tfor (int i = loadedPrefabs.Length - 1; i \u0026gt;= 0; i--)\n\t\t\t{\n\t\t\t\tGameObject o = loadedPrefabs[i];\n\n\t\t\t\tif (o != null)\n\t\t\t\t\tprocessUIComponents(o);\n\t\t\t}\n\t\t}\n\t\tprivate void processUIComponents(GameObject obj)\n\t\t{\n\t\t\tBasicStyle[] styles = obj.GetComponentsInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;BasicStyle\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(true);\n\n\t\t\tif (styles == null)\n\t\t\t\treturn;\n\n\t\t\tfor (int i = 0; i \u0026lt; styles.Length; i\u002B\u002B)\n\t\t\t\tprocessComponents(styles[i]);\n\t\t}\n\n\t\tprivate void processComponents(BasicStyle style)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t\treturn;\n\n\t\t\tUISkinDef skin = UISkinManager.defaultSkin;\n\n\t\t\tif (skin == null)\n\t\t\t\treturn;\n\n\t\t\tswitch (style.ElementType)\n\t\t\t{\n\t\t\t\tcase BasicStyle.ElementTypes.Window:\n\t\t\t\t\tstyle.setImage(skin.window.normal.background, Image.Type.Sliced);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BasicStyle.ElementTypes.Box:\n\t\t\t\t\tstyle.setImage(skin.box.normal.background, Image.Type.Sliced);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BasicStyle.ElementTypes.Button:\n\t\t\t\t\tstyle.setButton(skin.button.normal.background, skin.button.highlight.background, skin.button.active.background, skin.button.disabled.background);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BasicStyle.ElementTypes.Toggle:\n\t\t\t\t\tstyle.setToggle(skin.button.normal.background, skin.button.highlight.background, skin.button.active.background, skin.button.disabled.background);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BasicStyle.ElementTypes.Slider:\n\t\t\t\t\tstyle.setSlider(skin.horizontalSlider.normal.background, skin.horizontalSliderThumb.normal.background, skin.horizontalSliderThumb.highlight.background, skin.horizontalSliderThumb.active.background, skin.horizontalSliderThumb.disabled.background);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nHere we can see how each component of the \u003Cb\u003EUISkinDef\u003C/b\u003E has multiple \u003Cb\u003EUIStyleStates\u003C/b\u003E, each with a corresponding sprite\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 3: Applying the Style:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow that we have the KSP style elements we can apply those to our\u00A0\u003Cb\u003E\u003Ci\u003EUI elements\u003C/i\u003E\u003C/b\u003E. Since the \u003Cb\u003E\u003Ci\u003EStyle\u003C/i\u003E\u003C/b\u003E script is attached to the same \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E as the \u003Cb\u003E\u003Ci\u003EUI Element\u003C/i\u003E\u003C/b\u003E that needs processing the method is simple.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCreate a method for each different \u003Cem\u003E\u003Cstrong\u003EUI element\u003C/strong\u003E\u003C/em\u003E type\n\u003C/li\u003E\n\u003Cli\u003E\nUse the sprites from the \u003Cb\u003EKSP Assembly\u003C/b\u003E to make your \u003Cb\u003E\u003Ci\u003EUI elements\u003C/i\u003E\u003C/b\u003E look how you want them to\n\u003C/li\u003E\n\u003Cli\u003E\nMost interactable \u003Cb\u003E\u003Ci\u003EUI Elements\u003C/i\u003E\u003C/b\u003E share a common base, \u003Cb\u003ESelectable\u003C/b\u003E, which is what we actually want to access to apply our new style\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate void setSelectable(Sprite normal, Sprite highlight, Sprite active, Sprite inactive)\n\t\t{\n\t\t\tSelectable select = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Selectable\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (select == null)\n\t\t\t\treturn;\n\n\t\t\tselect.image.sprite = normal;\n\t\t\tselect.image.type = Image.Type.Sliced;\n\t\t\tselect.transition = Selectable.Transition.SpriteSwap;\n\n\t\t\tSpriteState spriteState = select.spriteState;\n\t\t\tspriteState.highlightedSprite = highlight;\n\t\t\tspriteState.pressedSprite = active;\n\t\t\tspriteState.disabledSprite = inactive;\n\t\t\tselect.spriteState = spriteState;\n\t\t}\n\n\t\tpublic void setImage(Sprite sprite, Image.Type type)\n\t\t{\n\t\t\tImage image = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Image\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (image == null)\n\t\t\t\treturn;\n\n\t\t\timage.sprite = sprite;\n\t\t\timage.type = type;\n\t\t}\n\n\t\tpublic void setButton(Sprite normal, Sprite highlight, Sprite active, Sprite inactive)\n\t\t{\n\t\t\tsetSelectable(normal, highlight, active, inactive);\n\t\t}\n\n\t\tpublic void setToggle(Sprite normal, Sprite highlight, Sprite active, Sprite inactive)\n\t\t{\n\t\t\tsetSelectable(normal, highlight, active, inactive);\n\n\t\t\tToggle toggle = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Toggle\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (toggle == null)\n\t\t\t\treturn;\n\n\t\t\t//The \u0022checkmark\u0022 sprite is replaced with the \u0022active\u0022 sprite; this is only displayed when the toggle is in the true state\n\t\t\tImage toggleImage = toggle.graphic as Image;\n\n\t\t\tif (toggleImage == null)\n\t\t\t\treturn;\n\n\t\t\ttoggleImage.sprite = active;\n\t\t\ttoggleImage.type = Image.Type.Sliced;\n\t\t}\n\n\t\tpublic void setSlider(Sprite background, Sprite thumb, Sprite thumbHighlight, Sprite thumbActive, Sprite thumbInactive)\n\t\t{\n\t\t\t//The slider thumb is the selectable component\n\t\t\tsetSelectable(thumb, thumbHighlight, thumbActive, thumbInactive);\n\n\t\t\tif (background == null)\n\t\t\t\treturn;\n\n\t\t\tSlider slider = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Slider\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (slider == null)\n\t\t\t\treturn;\n\n\t\t\tImage back = slider.GetComponentInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Image\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (back == null)\n\t\t\t\treturn;\n\n\t\t\tback.sprite = background;\n\t\t\tback.type = Image.Type.Sliced;\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nSimple \u003Cb\u003E\u003Ci\u003EUI Elements\u003C/i\u003E\u003C/b\u003E like the \u003Cb\u003E\u003Ci\u003EWindow\u003C/i\u003E\u003C/b\u003E background, or the content \u003Cb\u003E\u003Ci\u003EBox\u003C/i\u003E\u003C/b\u003E are only an\u00A0Image\n\u003Cul\u003E\u003Cli\u003E\nOnly the sprite, and possibly the sprite color and Image.Type need to be accessed\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cb\u003EImage.Type\u003C/b\u003E is an \u003Cb\u003E\u003Ci\u003EEnum\u003C/i\u003E\u003C/b\u003E that defines the different Sprite types possible, in most cases UI elements use \u003Cb\u003ESliced\u003C/b\u003E sprites, where the edges are defined and the center is stretched to fill in the space\n\u003C/li\u003E\n\u003Cli\u003E\nMany \u003Cb\u003E\u003Ci\u003EKSP UI elements\u003C/i\u003E\u003C/b\u003E (though not generally the ones found in the default \u003Cb\u003EUISkinDef\u003C/b\u003E) are actually white and use a color overlay to give the final result\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nFor \u003Cb\u003ESelectable UI Elements\u003C/b\u003E we need the sprites for the different states, normal, highlight (mouse over the element) active or pressed (mouse clicking on the element), inactive or disabled (when the element can\u2019t be interacted with)\n\u003Cul\u003E\u003Cli\u003E\nThe \u003Cb\u003ESelectable\u2019s Image Component\u003C/b\u003E is used to define the normal state\n\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cb\u003ESpriteState\u003C/b\u003E component is used to define the transition style (\u003Cb\u003ESpriteSwap\u003C/b\u003E) for standard \u003Cb\u003E\u003Ci\u003EKSP UI Elements\u003C/i\u003E\u003C/b\u003E and the sprites for each state\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cb\u003EToggle UI Elements\u003C/b\u003E have an additional component, the \u003Cb\u003ECheckmark Image\u003C/b\u003E, which is activated only when the Toggle is in the On state\n\u003Cul\u003E\u003Cli\u003E\nThis could be an actual check mark, or a circle to fill in the Toggle radio button, or a Toggle Button sprite\n\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cb\u003EToggle.graphic\u003C/b\u003E component is the \u003Cb\u003ECheckmark Image\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nFor \u003Cb\u003E\u003Ci\u003EToggle Buttons\u003C/i\u003E\u003C/b\u003E we can use the pressed/active sprite so that it appears as a button that has been pressed down when active, this basically draws the pressed sprite over the standard sprite\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nOther components can be handled in the same manner\n\u003Cul\u003E\u003Cli\u003E\nSome don\u2019t directly store their image components, so you\u2019ll need to make note of how the UI Element is arranged in Unity and manually find each Image\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThe same process can applied to non-standard UI components by picking apart their prefab\n\u003Cul\u003E\u003Cli\u003E\n\u003Ca href=\u0022https://github.com/CobaltWolf/Surface-Experiment-Pack/blob/master/Source/SEPScience/SEP_UI/SEP_UI_Loader.cs#L96-L112\u0022 rel=\u0022external nofollow\u0022\u003ESurface Experiment Pack\u003C/a\u003E uses the sliders from the experiment results dialog\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Ca href=\u0022https://github.com/DMagic1/KSP_Better_Maneuvering/blob/master/Source/BetterManeuvering/ManeuverLoader.cs#L333-L386\u0022 rel=\u0022external nofollow\u0022\u003EManeuver Node Evolved\u003C/a\u003E uses most of the components from the part context menus\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn the next section we\u2019ll go over how to use TextMeshPro elements in your UI. These are the new vector font text elements used by KSP that make text much cleaner and more readable. The overall method is similar to how UI style elements are applied, but there are some special concerns that need to be covered to make it work properly.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-29T15:36:11Z\u0022 title=\u002211/29/2016 03:36  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 29, 2016\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2016-12-15T17:07:18Z","Content":"\n\u003Cp\u003E\nThis section will cover how to replace the standard Unity Text elements with the fancy new TextMeshPro elements included with the latest version of KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nSince we can\u2019t add the KSP assemblies to Unity we won\u2019t be able to directly add TMP elements to out Unity project, unless you happen to own the $95 \u003Ca href=\u0022https://www.assetstore.unity3d.com/en/#!/content/17662\u0022 rel=\u0022external nofollow\u0022\u003ETMP Asset\u003C/a\u003E. So instead we\u2019ll have to use standard Text elements as placeholders then do all of the replacements from in-game. This turns out to be fairly simple, the only real issue is that we need some method for dynamically updating the text, or other properties from in-game.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 1: Tagging Text Elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMuch like in the last part of the tutorial, the first step is to create a simple script that can be used to tag all of the Text elements that we wish to replace.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCreate a script in your \u003Cb\u003EUnity Assembly\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nThis script will also be used for updating the \u003Cb\u003EText Field\u003C/b\u003E of the element whenever it needs changing\n\u003Cul\u003E\u003Cli\u003E\nA simple \u003Cb\u003E\u003Ci\u003EUnityEvent\u003C/i\u003E\u003C/b\u003E can be used to trigger then text change when needed\n\u003C/li\u003E\n\u003Cli\u003E\nListeners can be added to this event to watch for text changes and update the \u003Cb\u003EText Field\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\tpublic class TextHandler : MonoBehaviour\n\t{\n\t\tpublic class OnTextEvent : UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\n\t\tprivate OnTextEvent _onTextUpdate = new OnTextEvent();\n\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnTextUpdate\n\t\t{\n\t\t\tget { return _onTextUpdate; }\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 2: Listening for Updates:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nTo handle text updates the simplest method is to create an extension of the standard \u003Cb\u003ETMP Text Element\u003C/b\u003E with a few added methods.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCreate an extension class from the \u003Cb\u003ETextMeshProUGUI\u003C/b\u003E, this is the UI element used for text in KSP\n\u003C/li\u003E\n\u003Cli\u003E\nThis element will be added to the same \u003Cb\u003E\u003Ci\u003EGameObject\u003C/i\u003E\u003C/b\u003E that our script is attached to\n\u003C/li\u003E\n\u003Cli\u003E\nWe can grab a reference to our script and add a listener to its \u003Cb\u003E\u003Ci\u003EUnityEvent\u003C/i\u003E\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nA simple method takes the argument from that \u003Cb\u003E\u003Ci\u003EUnityEvent\u003C/i\u003E\u003C/b\u003E and uses it to update the \u003Cb\u003EText Field\u003C/b\u003E of the \u003Cb\u003ETMP Element\u003C/b\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\tpublic class BasicOrbitTextMeshProHolder : TextMeshProUGUI\n\t{\n\t\tprivate TextHandler _handler;\n\n\t\tnew private void Awake()\n\t\t{\n\t\t\tbase.Awake();\n\n\t\t\t_handler = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;TextHandler\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (_handler == null)\n\t\t\t\treturn;\n\n\t\t\t_handler.OnTextUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateText));\n\t\t}\n\n\t\tprivate void UpdateText(string t)\n\t\t{\n\t\t\ttext = t;\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nStore a reference to the \u003Cb\u003ETextHandler\u003C/b\u003E script in the \u003Cb\u003EUnity Assembly\u003C/b\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nInvoke the \u003Cb\u003E\u003Ci\u003EUnityEvent\u003C/i\u003E\u003C/b\u003E whenever needed\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\tpublic class BasicOrbit_Module : MonoBehaviour\n\t{\n\t\t[SerializeField]\n\t\tprivate TextHandler m_Title = null;\n\n\t\tprivate IBasicModule moduleInterface;\n\n\t\tpublic void setModule(IBasicModule module)\n\t\t{\n\t\t\tif (module == null || m_Title == null)\n\t\t\t\treturn;\n\n\t\t\tmoduleInterface = module;\n\n\t\t\tm_Title.OnTextUpdate.Invoke(module.ModuleTitle \u002B \u0022:\u0022);\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cb\u003E\u003Cu\u003ESection 3: Replacing Text Elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe only tricky part to all of this is how we take the placeholder \u003Cb\u003EText Element\u003C/b\u003E and replace it with the \u003Cb\u003EText Mesh Pro Element\u003C/b\u003E. The method for this works similar to assigning style elements, covered in the last part.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nSee the last part for how to load the \u003Cstrong\u003EAsset Bundle\u003C/strong\u003E and process the prefabs during loading\n\u003C/li\u003E\n\u003Cli\u003E\nOnce we have the prefabs we use the \u003Cstrong\u003ETextHandler \u003C/strong\u003Etag to search for all of the \u003Cstrong\u003EText Elements\u003C/strong\u003E that need replacing\n\u003C/li\u003E\n\u003Cli\u003E\nWe cache the properties from the placeholder \u003Cstrong\u003EText Element\u003C/strong\u003E to be used for creating the \u003Cstrong\u003ETMP Element\u003C/strong\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nSince a \u003Cstrong\u003EGameObject \u003C/strong\u003Ecan only contain one UI element at a time we need to immediately destroy the \u003Cstrong\u003EText Element\u003C/strong\u003E after caching its properties\n\u003C/li\u003E\n\u003Cli\u003E\nThen create the new \u003Cstrong\u003ETMP Element\u003C/strong\u003E and add it to the \u003Cstrong\u003EGameObject\u003C/strong\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate void processTMP(GameObject obj)\n\t\t{\n\t\t\tTextHandler[] handlers = obj.GetComponentsInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;TextHandler\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(true);\n\n\t\t\tif (handlers == null)\n\t\t\t\treturn;\n\n\t\t\tfor (int i = 0; i \u0026lt; handlers.Length; i\u002B\u002B)\n\t\t\t\tTMProFromText(handlers[i]);\n\t\t}\n\n\t\tprivate void TMProFromText(TextHandler handler)\n\t\t{\n\t\t\tif (handler == null)\n\t\t\t\treturn;\n\n\t\t\t//The TextHandler element should be attached only to objects with a Unity Text element\n\t\t\t//Note that the \u0022[RequireComponent(typeof(Text))]\u0022 attribute cannot be attached to TextHandler since Unity will not allow the Text element to be removed\n\t\t\tText text = handler.GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Text\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (text == null)\n\t\t\t\treturn;\n\n\t\t\t//Cache all of the relevent information from the Text element\n\t\t\tstring t = text.text;\n\t\t\tColor c = text.color;\n\t\t\tint i = text.fontSize;\n\t\t\tbool r = text.raycastTarget;\n\t\t\tFontStyles sty = getStyle(text.fontStyle);\n\t\t\tTextAlignmentOptions align = getAnchor(text.alignment);\n\t\t\tfloat spacing = text.lineSpacing;\n\t\t\tGameObject obj = text.gameObject;\n\n\t\t\t//The existing Text element must by destroyed since Unity will not allow two UI elements to be placed on the same GameObject\n\t\t\tMonoBehaviour.DestroyImmediate(text);\n\n\t\t\tBasicOrbitTextMeshProHolder tmp = obj.AddComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;BasicOrbitTextMeshProHolder\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\t//Populate the TextMeshPro fields with the cached data from the old Text element\n\t\t\ttmp.text = t;\n\t\t\ttmp.color = c;\n\t\t\ttmp.fontSize = i;\n\t\t\ttmp.raycastTarget = r;\n\t\t\ttmp.alignment = align;\n\t\t\ttmp.fontStyle = sty;\n\t\t\ttmp.lineSpacing = spacing;\n\n\t\t\t//Load the TMP Font from disk\n\t\t\ttmp.font = Resources.Load(\u0022Fonts/Calibri SDF\u0022, typeof(TMP_FontAsset)) as TMP_FontAsset;\n\t\t\ttmp.fontSharedMaterial = Resources.Load(\u0022Fonts/Materials/Calibri Dropshadow\u0022, typeof(Material)) as Material;\n\n\t\t\ttmp.enableWordWrapping = true;\n\t\t\ttmp.isOverlay = false;\n\t\t\ttmp.richText = true;\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nDifferent fonts are available and there is a \u003Cstrong\u003ETMP Font\u003C/strong\u003E defined in the \u003Cstrong\u003EUISkinManager \u003C/strong\u003Edescribed in the last part\n\u003C/li\u003E\n\u003Cli\u003E\nThere are two properties of the \u003Cstrong\u003EText Element\u003C/strong\u003E that don\u2019t translate directly to \u003Cstrong\u003EText Mesh Pro\u003C/strong\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cstrong\u003EFont Style\u003C/strong\u003E and \u003Cstrong\u003EText Alignment\u003C/strong\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cstrong\u003ETMP \u003C/strong\u003Edoes not have the bold - italic style and has more alignment options\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nFor these there are simple methods to convert to \u003Cstrong\u003ETMP\u003C/strong\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate FontStyles getStyle(FontStyle style)\n\t\t{\n\t\t\tswitch (style)\n\t\t\t{\n\t\t\t\tcase FontStyle.Normal:\n\t\t\t\t\treturn FontStyles.Normal;\n\t\t\t\tcase FontStyle.Bold:\n\t\t\t\t\treturn FontStyles.Bold;\n\t\t\t\tcase FontStyle.Italic:\n\t\t\t\t\treturn FontStyles.Italic;\n\t\t\t\tcase FontStyle.BoldAndItalic:\n\t\t\t\t\treturn FontStyles.Bold;\n\t\t\t\tdefault:\n\t\t\t\t\treturn FontStyles.Normal;\n\t\t\t}\n\t\t}\n\n\t\tprivate TextAlignmentOptions getAnchor(TextAnchor anchor)\n\t\t{\n\t\t\tswitch (anchor)\n\t\t\t{\n\t\t\t\tcase TextAnchor.UpperLeft:\n\t\t\t\t\treturn TextAlignmentOptions.TopLeft;\n\t\t\t\tcase TextAnchor.UpperCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Top;\n\t\t\t\tcase TextAnchor.UpperRight:\n\t\t\t\t\treturn TextAlignmentOptions.TopRight;\n\t\t\t\tcase TextAnchor.MiddleLeft:\n\t\t\t\t\treturn TextAlignmentOptions.MidlineLeft;\n\t\t\t\tcase TextAnchor.MiddleCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Midline;\n\t\t\t\tcase TextAnchor.MiddleRight:\n\t\t\t\t\treturn TextAlignmentOptions.MidlineRight;\n\t\t\t\tcase TextAnchor.LowerLeft:\n\t\t\t\t\treturn TextAlignmentOptions.BottomLeft;\n\t\t\t\tcase TextAnchor.LowerCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Bottom;\n\t\t\t\tcase TextAnchor.LowerRight:\n\t\t\t\t\treturn TextAlignmentOptions.BottomRight;\n\t\t\t\tdefault:\n\t\t\t\t\treturn TextAlignmentOptions.Center;\n\t\t\t}\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThat\u2019s basically all there is to it. The result is much cleaner looking text that scales well and is readable in much smaller fonts. The only real problem areas are UI elements that require a standard \u003Cstrong\u003EText Element\u003C/strong\u003E, such as a \u003Cstrong\u003EText Input Field\u003C/strong\u003E. A custom input field will be required to handle these, or you can just leave them as standard Text, since they generally aren\u2019t used as much.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe full source code for the most complete version of the \u003Cstrong\u003ETextHandler \u003C/strong\u003Eand \u003Cstrong\u003EText Mesh Pro\u003C/strong\u003E extension (from Contracts Window \u002B) are included below. Feel free to use the code directly.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nTMP Source Code:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nText Handler:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Eusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.Events;\n\nnamespace ContractsWindow.Unity\n{\n\tpublic class TextHandler : MonoBehaviour\n\t{\n\t\tpublic class OnTextEvent : UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\n\t\tpublic class OnColorEvent : UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\n\t\tpublic class OnFontEvent : UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\n\t\tprivate OnTextEvent _onTextUpdate = new OnTextEvent();\n\t\tprivate OnColorEvent _onColorUpdate = new OnColorEvent();\n\t\tprivate OnFontEvent _onFontChange = new OnFontEvent();\n\n\t\tprivate Vector2 _preferredSize = new Vector2();\n\n\t\tpublic Vector2 PreferredSize\n\t\t{\n\t\t\tget { return _preferredSize; }\n\t\t\tset { _preferredSize = value; }\n\t\t}\n\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnTextUpdate\n\t\t{\n\t\t\tget { return _onTextUpdate; }\n\t\t}\n\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnColorUpdate\n\t\t{\n\t\t\tget { return _onColorUpdate; }\n\t\t}\n\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnFontChange\n\t\t{\n\t\t\tget { return _onFontChange; }\n\t\t}\n\t}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nText Mesh Pro Extension Class:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Eusing ContractsWindow.Unity;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.Events;\nusing TMPro;\n\nnamespace ContractsWindow\n{\n\tpublic class CWTextMeshProHolder : TextMeshProUGUI\n\t{\n\t\tprivate TextHandler _handler;\n\n\t\tnew private void Awake()\n\t\t{\n\t\t\tbase.Awake();\n\n\t\t\t_handler = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;TextHandler\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (_handler == null)\n\t\t\t\treturn;\n\n\t\t\t_handler.OnColorUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateColor));\n\t\t\t_handler.OnTextUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateText));\n\t\t\t_handler.OnFontChange.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateFontSize));\n\t\t}\n\n\t\tpublic void Setup(TextHandler h)\n\t\t{\n\t\t\t_handler = h;\n\n\t\t\t_handler.OnColorUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateColor));\n\t\t\t_handler.OnTextUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateText));\n\t\t\t_handler.OnFontChange.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateFontSize));\n\t\t}\n\n\t\tprivate void UpdateColor(Color c)\n\t\t{\n\t\t\tcolor = c;\n\t\t}\n\n\t\tprivate void UpdateText(string t)\n\t\t{\n\t\t\ttext = t;\n\n\t\t\t_handler.PreferredSize = new Vector2(preferredWidth, preferredHeight);\n\t\t}\n\n\t\tprivate void UpdateFontSize(int i)\n\t\t{\n\t\t\tfontSize \u002B= i;\n\t\t}\n\t}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nReplacement Code:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate void processPrefab(GameObject obj)\n\t\t{\n\t\t\tif (obj == null)\n\t\t\t\treturn;\n\n\t\t\tTextHandler[] handlers = obj.GetComponentsInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;TextHandler\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(true);\n\n\t\t\tif (handlers == null)\n\t\t\t\treturn;\n\n\t\t\tfor (int i = 0; i \u0026lt; handlers.Length; i\u002B\u002B)\n\t\t\t\tTMProFromText(handlers[i]);\n\t\t}\n\n\t\tprivate void TMProFromText(TextHandler handler)\n\t\t{\n\t\t\tif (handler == null)\n\t\t\t\treturn;\n\n\t\t\tText text = handler.GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Text\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (text == null)\n\t\t\t\treturn;\n\n\t\t\tstring t = text.text;\n\t\t\tColor c = text.color;\n\t\t\tint i = text.fontSize;\n\t\t\tbool r = text.raycastTarget;\n\t\t\tFontStyles sty = getStyle(text.fontStyle);\n\t\t\tTextAlignmentOptions align = getAnchor(text.alignment);\n\t\t\tfloat spacing = text.lineSpacing;\n\t\t\tGameObject obj = text.gameObject;\n\n\t\t\tMonoBehaviour.DestroyImmediate(text);\n\n\t\t\tCWTextMeshProHolder tmp = obj.AddComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;CWTextMeshProHolder\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\ttmp.text = t;\n\t\t\ttmp.color = c;\n\t\t\ttmp.fontSize = i;\n\t\t\ttmp.raycastTarget = r;\n\t\t\ttmp.alignment = align;\n\t\t\ttmp.fontStyle = sty;\n\t\t\ttmp.lineSpacing = spacing;\n\n\t\t\ttmp.font = Resources.Load(\u0022Fonts/Calibri SDF\u0022, typeof(TMP_FontAsset)) as TMP_FontAsset;\n\t\t\ttmp.fontSharedMaterial = Resources.Load(\u0022Fonts/Materials/Calibri Dropshadow\u0022, typeof(Material)) as Material;\n\n\t\t\ttmp.enableWordWrapping = true;\n\t\t\ttmp.isOverlay = false;\n\t\t\ttmp.richText = true;\n\n\t\t\ttmp.Setup(handler);\n\t\t}\n\n\t\tprivate FontStyles getStyle(FontStyle style)\n\t\t{\n\t\t\tswitch (style)\n\t\t\t{\n\t\t\t\tcase FontStyle.Normal:\n\t\t\t\t\treturn FontStyles.Normal;\n\t\t\t\tcase FontStyle.Bold:\n\t\t\t\t\treturn FontStyles.Bold;\n\t\t\t\tcase FontStyle.Italic:\n\t\t\t\t\treturn FontStyles.Italic;\n\t\t\t\tcase FontStyle.BoldAndItalic:\n\t\t\t\t\treturn FontStyles.Bold;\n\t\t\t\tdefault:\n\t\t\t\t\treturn FontStyles.Normal;\n\t\t\t}\n\t\t}\n\n\t\tprivate TextAlignmentOptions getAnchor(TextAnchor anchor)\n\t\t{\n\t\t\tswitch (anchor)\n\t\t\t{\n\t\t\t\tcase TextAnchor.UpperLeft:\n\t\t\t\t\treturn TextAlignmentOptions.TopLeft;\n\t\t\t\tcase TextAnchor.UpperCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Top;\n\t\t\t\tcase TextAnchor.UpperRight:\n\t\t\t\t\treturn TextAlignmentOptions.TopRight;\n\t\t\t\tcase TextAnchor.MiddleLeft:\n\t\t\t\t\treturn TextAlignmentOptions.MidlineLeft;\n\t\t\t\tcase TextAnchor.MiddleCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Midline;\n\t\t\t\tcase TextAnchor.MiddleRight:\n\t\t\t\t\treturn TextAlignmentOptions.MidlineRight;\n\t\t\t\tcase TextAnchor.LowerLeft:\n\t\t\t\t\treturn TextAlignmentOptions.BottomLeft;\n\t\t\t\tcase TextAnchor.LowerCenter:\n\t\t\t\t\treturn TextAlignmentOptions.Bottom;\n\t\t\t\tcase TextAnchor.LowerRight:\n\t\t\t\t\treturn TextAlignmentOptions.BottomRight;\n\t\t\t\tdefault:\n\t\t\t\t\treturn TextAlignmentOptions.Center;\n\t\t\t}\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-12-15T17:09:51Z\u0022 title=\u002212/15/2016 05:09  PM\u0022 data-short=\u00227 yr\u0022\u003EDecember 15, 2016\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DuoDex","CreatedById":107061,"CreatedDateTime":"2016-12-16T03:28:32Z","Content":"\n\u003Cp\u003E\nA most excellent topic. Pinned for the foreseeable future.\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2017-03-31T19:34:16Z","Content":"\n\u003Cp\u003E\nI have several updates made for SCANsat that I\u0027ll add here eventually, but for now I\u0027ll just add a section on how to get a Text Mesh Pro Input Field into KSP using a method similar to that used for the\u00A0\u003Cstrong\u003ETextMeshProUGUI\u003C/strong\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nThis method follows the same basic idea as the previous entry: tag any standard Unity \u003Cstrong\u003EInput Fields \u003C/strong\u003Ethat you want to replace with a small script, create a \u003Cstrong\u003ETMP_InputField \u003C/strong\u003Eextension class in the \u003Cstrong\u003EKSP Assembly\u003C/strong\u003E, then convert the Unity \u003Cstrong\u003EInput Field\u003C/strong\u003E into a \u003Cstrong\u003ETMP_InputField \u003C/strong\u003Ewhen processing the UI components.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\n\u003Cb\u003E\u003Cu\u003ESection 1: Tagging Input Fields:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\nMake a script for tagging of the Unity Input Fields that need replacing and to handle a few things.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Epublic class InputHandler : MonoBehaviour\n\t{\t\t\n\t\tprivate string _text;\n\t\tprivate bool _isFocused;\n\n\t\tpublic class OnTextEvent : UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\t\tpublic class OnValueChanged: UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E { }\n\n\t\tprivate OnTextEvent _onTextUpdate = new OnTextEvent();\n\t\tprivate OnValueChanged _onValueChanged = new OnValueChanged();\n\n\t\tpublic string Text\n\t\t{\n\t\t\tget { return _text; }\n\t\t\tset { _text = value; }\n\t\t}\n\n\t\tpublic bool IsFocused\n\t\t{\n\t\t\tget { return _isFocused; }\n\t\t\tset { _isFocused = value; }\n\t\t}\n\t\t\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnTextUpdate\n\t\t{\n\t\t\tget { return _onTextUpdate; }\n\t\t}\n\n\t\tpublic UnityEvent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E OnValueChange\n\t\t{\n\t\t\tget { return _onValueChanged; }\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThis script has two \u003Cem\u003E\u003Cstrong\u003EUnityEvents \u003C/strong\u003E\u003C/em\u003Eand a few fields.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe \u003Cstrong\u003EOnTextEvent \u003C/strong\u003Ecan be used to update the text for the input field; this is separate from the \u003Cem\u003E\u003Cstrong\u003EPlaceHolder \u003C/strong\u003E\u003C/em\u003Etext, which could, if needed, be updated from another similar event.\n\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cstrong\u003EOnValueChanged \u003C/strong\u003Eevent is fired whenever anything is typed into the input field\n\u003Cul\u003E\u003Cli\u003E\nYou could add a listener to this event to perform some action as the text is typed in\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cstrong\u003E_text \u003C/strong\u003Estring is used to store the current text entered into the input field\n\u003Cul\u003E\u003Cli\u003E\nThis would be used when you have a separate button to perform an action after text is entered\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThe \u003Cstrong\u003E_isFocused \u003C/strong\u003Efield is used to indicate when the input field is active and can be typed in\n\u003Cul\u003E\u003Cli\u003E\nThis is used when locking out other KSP controls\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\n\u003Cb\u003E\u003Cu\u003ESection 2: Listening for Input Updates:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\nA \u003Cstrong\u003ETMP_InputField \u003C/strong\u003Eextension class is used to listen for text input and a few other things.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Epublic class SCAN_TMP_InputField : TMP_InputField\n\t{\n\t\tprivate InputHandler _handler;\n\n\t\tnew private void Awake()\n\t\t{\n\t\t\tbase.Awake();\n\n\t\t\t_handler = GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;InputHandler\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tonValueChanged.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(valueChanged));\n\n\t\t\t_handler.OnTextUpdate.AddListener(new UnityAction\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(UpdateText));\n\t\t}\n\n\t\tprivate void Update()\n\t\t{\n\t\t\tif (_handler != null)\n\t\t\t\t_handler.IsFocused = isFocused;\n\t\t}\n\n\t\tprivate void valueChanged(string s)\n\t\t{\n\t\t\tif (_handler == null)\n\t\t\t\treturn;\n\n\t\t\t_handler.Text = s;\n\n\t\t\t_handler.OnValueChange.Invoke(s);\n\t\t}\n\n\t\tprivate void UpdateText(string t)\n\t\t{\n\t\t\ttext = t;\n\t\t}\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe standard \u003Cstrong\u003ETMP_InputField onValueChanged \u003C/strong\u003Eevent is used to update the text in the \u003Cstrong\u003EInputHandler \u003C/strong\u003Eand to trigger its \u003Cstrong\u003EonValueChanged \u003C/strong\u003Eevent\n\u003C/li\u003E\n\u003Cli\u003E\nIt also updates the \u003Cstrong\u003EInputHandler IsFocused \u003C/strong\u003Efield\n\u003C/li\u003E\n\u003Cli\u003E\nIt adds a small method to the \u003Cstrong\u003EInputHandler\u0027s OnTextUpdate \u003C/strong\u003Eevent to update the input field\u0027s text value.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cu\u003E\u003Cstrong\u003ESection 3: Unity setup:\u003C/strong\u003E\u003C/u\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe Input Field needs to be setup in Unity in a certain way to properly replace it with a TMP_InputField.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u00A0First we have to make sure to add\u00A0the \u003Cstrong\u003EText-\u003C/strong\u003Eto-\u003Cstrong\u003ETextMeshProUGUI\u00A0\u003C/strong\u003Etag to the \u003Cem\u003E\u003Cstrong\u003EText \u003C/strong\u003E\u003C/em\u003Eand the \u003Cem\u003E\u003Cstrong\u003EPlaceholder \u003C/strong\u003E\u003C/em\u003Etext components\n\u003Cul\u003E\u003Cli\u003E\nAnd make sure to process the \u003Cstrong\u003EText \u003C/strong\u003Efields before processing any Input Fields; the \u003Cstrong\u003ETMP_InputField \u003C/strong\u003Ewill only work with\u00A0\u003Cstrong\u003ETMP_Text \u003C/strong\u003Ecomponents\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nText Mesh Pro uses a \u003Cstrong\u003ERect Mask\u003C/strong\u003E to handle masking text that overflows the text box, rather than the string methods used by the standard Unity \u003Cstrong\u003EInput Field\u003C/strong\u003E\n\u003Cul\u003E\u003Cli\u003E\nAdd a \u003Cstrong\u003ERect Mask 2D\u003C/strong\u003E\u003Cem\u003E\u003Cstrong\u003E \u003C/strong\u003E\u003C/em\u003Eas a direct child of the \u003Cstrong\u003EInput Field\u003C/strong\u003E, then add the two \u003Cstrong\u003EText \u003C/strong\u003Ecomponents to that object\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022wUdmjl9.png\u0022 class=\u0022ipsImage\u0022 height=\u0022768\u0022 src=\u0022http://i.imgur.com/wUdmjl9.png\u0022 width=\u0022792\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m using an \u003Cstrong\u003EEvent Trigger\u003C/strong\u003E and the \u003Cstrong\u003EOnInputClick \u003C/strong\u003Eevent to handle control locks whenever an \u003Cstrong\u003EInput Field \u003C/strong\u003Eis clicked on, as you can see in the bottom of the \u003Cstrong\u003EInspector Tab\u003C/strong\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\n\u003Cb\u003E\u003Cu\u003ESection 4: Replacing Input Field\u00A0Elements:\u003C/u\u003E\u003C/b\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022color:#272a34;\u0022\u003E\nAs before, we process the \u003Cstrong\u003ETMP_InputField \u003C/strong\u003Eduring loading to replace all standard \u003Cstrong\u003EInput Fields\u003C/strong\u003E. We do this by caching a few values, generating a new \u003Cstrong\u003ETMP_InputField\u003C/strong\u003E, and assigning the required values, and assigning the \u003Cstrong\u003ETextMeshProUGUI \u003C/strong\u003Ecomponents.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\t\tprivate static void TMPInputFromInput(InputHandler handler)\n\t\t{\n\t\t\tif (handler == null)\n\t\t\t\treturn;\n\n\t\t\tInputField input = handler.GetComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;InputField\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\tif (input == null)\n\t\t\t\treturn;\n\n\t\t\tint limit = input.characterLimit;\n\t\t\tTMP_InputField.ContentType content = GetTMPContentType(input.contentType);\n\t\t\tfloat caretBlinkRate = input.caretBlinkRate;\n\t\t\tint caretWidth = input.caretWidth;\n\t\t\tColor selectionColor = input.selectionColor;\n\t\t\tGameObject obj = input.gameObject;\n\n\t\t\tRectTransform viewport = handler.GetComponentInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;RectMask2D\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E().rectTransform;\n\t\t\tSCAN_TextMeshPro placholder = handler.GetComponentsInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;SCAN_TextMeshPro\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E()[0];\n\t\t\tSCAN_TextMeshPro textComponent = handler.GetComponentsInChildren\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;SCAN_TextMeshPro\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E()[1];\n\n\t\t\tif (viewport == null || placholder == null || textComponent == null)\n\t\t\t\treturn;\n\n\t\t\tMonoBehaviour.DestroyImmediate(input);\n\n\t\t\tSCAN_TMP_InputField tmp = obj.AddComponent\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;SCAN_TMP_InputField\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\n\t\t\ttmp.textViewport = viewport;\n\t\t\ttmp.placeholder = placholder;\n\t\t\ttmp.textComponent = textComponent;\n\n\t\t\ttmp.characterLimit = limit;\n\t\t\ttmp.contentType = content;\n\t\t\ttmp.caretBlinkRate = caretBlinkRate;\n\t\t\ttmp.caretWidth = caretWidth;\n\t\t\ttmp.selectionColor = selectionColor;\n\n\t\t\ttmp.readOnly = false;\n\t\t\ttmp.shouldHideMobileInput = false;\n\n\t\t\ttmp.fontAsset = UISkinManager.TMPFont;\n\t\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe first section handles caching a few values\n\u003Cul\u003E\u003Cli\u003E\nA conversion method is required for the \u003Cstrong\u003EContentType \u003C/strong\u003Efield, but the available types for \u003Cstrong\u003EInput Fields\u003C/strong\u003E and \u003Cstrong\u003ETMP_InputFields \u003C/strong\u003Eare the same\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nThen we have to find the \u003Cstrong\u003ERect Mask\u003C/strong\u003E and the two \u003Cstrong\u003ETextMeshProUGUI \u003C/strong\u003Ecomponents and cache these\n\u003C/li\u003E\n\u003Cli\u003E\nThen we Destroy the old \u003Cstrong\u003EInput Field\u003C/strong\u003E and create a new \u003Cstrong\u003ETMP_InputField\u003C/strong\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nThen assign the cached values\n\u003Cul\u003E\u003Cli\u003E\nIt is important to assign the\u00A0\u003Cstrong\u003ETextMeshProUGUI \u003C/strong\u003Ecomponents first, since assigning some of the others values relies on these\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAfter all of this you\u0027ll end up with Input Fields that use the much nicer Text Mesh Pro text, providing better scaling and better support for other input languages. I\u0027ll add links to the full code for this once it is online.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-03-31T19:46:23Z\u0022 title=\u002203/31/2017 07:46  PM\u0022 data-short=\u00227 yr\u0022\u003EMarch 31, 2017\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2017-04-27T16:06:03Z","Content":"\n\u003Cp\u003E\nApparently this managed to slide by without notice. It would seem the Text Mesh Pro is now free and will eventually be integrated into Unity:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedOther ipsEmbeddedOther_limited\u0022\u003E\n\u003Ciframe data-controller=\u0022core.front.core.autosizeiframe\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?app=core\u0026amp;module=system\u0026amp;controller=embed\u0026amp;url=https://twitter.com/unity3d/status/836625140054179842\u0022 style=\u0022height:492px;\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nYou can download it from the \u003Ca href=\u0022https://www.assetstore.unity3d.com/en/#!/content/84126\u0022 rel=\u0022external nofollow\u0022\u003EAsset Store\u003C/a\u003E for free, so I guess my tedious workarounds for not having access to TMP in Unity are no longer necessary.\n\u003C/p\u003E\n"},{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2017-04-27T19:05:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223036557\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493309163\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents ipsClearfix\u0022\u003E\n\u003Cp\u003E\nApparently this managed to slide by without notice. It would seem the Text Mesh Pro is now free and will eventually be integrated into Unity:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedOther ipsEmbeddedOther_limited\u0022\u003E\n\u003Ciframe data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedid=\u0022embed941956560.35276811\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?app=core\u0026amp;module=system\u0026amp;controller=embed\u0026amp;url=https://twitter.com/unity3d/status/836625140054179842\u0022 style=\u0022height: 493px; overflow: hidden;\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nYou can download it from the \u003Ca href=\u0022https://www.assetstore.unity3d.com/en/#!/content/84126\u0022 rel=\u0022external nofollow\u0022 target=\u0022_blank\u0022\u003EAsset Store\u003C/a\u003E for free, so I guess my tedious workarounds for not having access to TMP in Unity are no longer necessary.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDifferent versions though until KSP is upgraded to the version of Unity that has the free TMPro embedded in it. Just for you to be aware of.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-04-27T19:36:12Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223036557\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493309163\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nApparently this managed to slide by without notice. It would seem the Text Mesh Pro is now free and will eventually be integrated into Unity\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI did not mention it for one simple reason: the free version does not uses the same script id as the paid one. So you should not be able to import Asset made with the free version in KSP (feel free to prove me wrong, it would be better for the modding community). And this will be a mess to migrate into when it is integrated (unless they add a tool later, or the KSP\u0027s dev\u00A0write a script to do it)\n\u003C/p\u003E\n"},{"CreatedByName":"EricL","CreatedById":169181,"CreatedDateTime":"2017-09-13T23:06:18Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57416-dmagic/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257416\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57416-dmagic/\u0022 rel=\u0022\u0022\u003E@DMagic\u003C/a\u003E\u00A0Nice tutorial, but it\u0027s a little confusing. For example, how do you make the scripts? Do you make them in one big cs file or create them separately? (in either situation, Unity complains about not being able to find the IExample interface)\n\u003C/p\u003E\n\u003Cp\u003E\nAnd some feedback: I prefer the tutorials that provide base code, which you can modify later to your needs\u00A0\u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2017-09-16T01:06:26Z","Content":"\n\u003Cp\u003E\nNice tutorial. \u00A0Definitely. \u00A0And I got 90 percent of the way through setting up a GUI and decided my forehead couldn\u0027t take one more smash against my desk.\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2017-09-16T06:01:13Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223173409\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221505523986\u0022 data-ipsquote-userid=\u002278435\u0022 data-ipsquote-username=\u0022Fengist\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, Fengist said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd I got 90 percent of the way through setting up a GUI and decided my forehead couldn\u0027t take one more smash against my desk.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPersonally, I made it to the first screenshot of Unity. Have you seen the other API?\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed6417193409\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/149324-popupdialog-and-the-dialoggui-classes/\u0026amp;do=embed\u0022 style=\u0022height:211px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-09-16T06:02:25Z\u0022 title=\u002209/16/2017 06:02  AM\u0022 data-short=\u00226 yr\u0022\u003ESeptember 16, 2017\u003C/time\u003E by HebaruSan\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2017-09-16T13:10:18Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223173503\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221505541673\u0022 data-ipsquote-userid=\u0022156657\u0022 data-ipsquote-username=\u0022HebaruSan\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, HebaruSan said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPersonally, I made it to the first screenshot of Unity. Have you seen the other API?\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed1775154527\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/149324-popupdialog-and-the-dialoggui-classes/\u0026amp;do=embed\u0022 style=\u0022height:211px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYes, thanks,\u00A0that\u0027s exactly what I did. \u00A0It\u0027s not what I wanted but in 10 lines of code I achieved what was taking me hours and costing me money in pain killers. I was hoping for a set of 4 buttons with arrow icons\u00A0to direct movement. \u00A0After seeing exactly what it was going to take to achieve that... I mean I honestly tried. \u00A0I got to the point I was adding the code into the KSP Asset as he calls it, and ended up throwing my hands up in disgust because it made no sense... all the references and callbacks. \u00A0All this work for 4 buttons with arrows? \u00A0It should not be this difficult. \u00A0My end users will get stupid looking text buttons.\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2017-09-18T14:37:49Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/169181-ericl/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022169181\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/169181-ericl/\u0022 rel=\u0022\u0022\u003E@EricL\u003C/a\u003E\u00A0A comprehensive tutorial would be nice, but it would take far more time than I\u0027m willing to put into it. This tutorial assumes some experience with C# (you \u003Cem\u003Ecan\u003C/em\u003E put all of your classes and scripts into a single file, I think, maybe Unity requires separate files, but in general that just makes it very difficult to keep track of things), and Unity. There are a million resources, tutorials and answers to specific questions available for both C# and Unity (in particular Unity has some really good video series available for UI content), so there\u0027s no need to go over all of that here.\n\u003C/p\u003E\n\u003Cp\u003E\nFor complete code you can check the source for \u003Ca href=\u0022https://github.com/DMagic1/KSP_BasicOrbit/tree/master/Source/BasicOrbit.Unity\u0022 rel=\u0022external nofollow\u0022\u003EBasic Orbit\u003C/a\u003E (it has changed a bit since this tutorial has been made, but most of the added complexity is in picking apart the stock KSP UI assets to make a matching style). There is also some more complex code for \u003Ca href=\u0022https://github.com/S-C-A-N/SCANsat/tree/release/SCANsat.Unity\u0022 rel=\u0022external nofollow\u0022\u003ESCANsat\u0027s UI\u003C/a\u003E, and some simpler code for \u003Ca href=\u0022https://github.com/DMagic1/KSP_Better_Maneuvering/tree/master/Source/BetterManeuvering.Unity\u0022 rel=\u0022external nofollow\u0022\u003EManeuver Node Evolved\u003C/a\u003E.\u00A0 The Unity project files are also included in those GitHub repos.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOverall I don\u0027t think the Unity UI system is that complicated. It is based on standard Unity objects, so most of the UI related work also relates to how most things work in Unity. The Rect Transform and Layout Elements are probably the trickiest aspects to figure out, there are lots of tutorials covering them, but the best thing to do is probably just play around with different values and see what they do, being able to work within the Unity Editor makes this simple since you don\u0027t have to launch KSP to test things.\n\u003C/p\u003E\n\u003Cp\u003E\nHooking things up with KSP is tedious, but not really difficult. You either have to just manually assign functions and listeners, or go through interfaces or some kind of event system. It takes some time to get your head around how to set things up, but once you manage that it just becomes tedious.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-09-18T14:44:42Z\u0022 title=\u002209/18/2017 02:44  PM\u0022 data-short=\u00226 yr\u0022\u003ESeptember 18, 2017\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"nightstalker101s","CreatedById":171555,"CreatedDateTime":"2018-03-14T17:05:35Z","Content":"\n\u003Cp\u003E\n\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EI\u0027m having difficulties understanding how the two assemblies are speaking with each other. I\u0027m missing something in the initial post and its confusing me. I assume that we have the KSP assembly and the Unity assembly. \u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EThe Unity assembly does not need to discuss jack with the KSP assembly. The KSP assembly has \u003C/span\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Ean\u003C/span\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003E include of the Unity assembly? Which allows it to access the classes and variables? If this is so, then are we dealing with .dll assemblies or simply .cs files contained within the same project or folder? If the Unity assembly is turning into a .dll assembly... how is that possible?\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nPlease ignore me. I found the exact line which says exactly what I was asking. Sorry.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-03-14T17:20:37Z\u0022 title=\u002203/14/2018 05:20  PM\u0022 data-short=\u00226 yr\u0022\u003EMarch 14, 2018\u003C/time\u003E by nightstalker101s\u003C/strong\u003E\n\u003Cbr\u003ERevision\n\u003C/span\u003E\n"},{"CreatedByName":"nightstalker101s","CreatedById":171555,"CreatedDateTime":"2018-03-15T19:28:17Z","Content":"\n\u003Cp\u003E\nI\u0027m working on designing a UI and when I update and build using the part tool assembly compiler I can\u0027t find A) Asset Bundle file or B) anything with a .ksp extension. I know I\u0027m doing something wrong, but I don\u0027t know what it is.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m running Unity3D 2017.3.1f1\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-03-15T19:28:58Z\u0022 title=\u002203/15/2018 07:28  PM\u0022 data-short=\u00226 yr\u0022\u003EMarch 15, 2018\u003C/time\u003E by nightstalker101s\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2018-03-16T00:13:10Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/171555-nightstalker101s/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022171555\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/171555-nightstalker101s/\u0022 rel=\u0022\u0022\u003E@nightstalker101s\u003C/a\u003E\u00A0KSP uses Unity 2017.1. It might not matter, but it\u0027s usually a good idea to stick to the same version.\n\u003C/p\u003E\n\u003Cp\u003E\nI don\u0027t know what\u0027s going on with Part Tools, maybe we\u0027ll get an update soon. But you don\u0027t need them unless you are doing KSPedia or parts.\n\u003C/p\u003E\n\u003Cp\u003E\nFor these simple asset bundles I just write my own script:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eusing UnityEditor;\n\npublic class Bundler\n{\n\tconst string dir = \u0022AssetBundles\u0022;\n\tconst string extension = \u0022.btk\u0022;\n\n    [MenuItem(\u0022BetterTracking/Build Bundles\u0022)]\n    static void BuildAllAssetBundles()\n    {\n\t\tBuildPipeline.BuildAssetBundles(dir, BuildAssetBundleOptions.ChunkBasedCompression | BuildAssetBundleOptions.ForceRebuildAssetBundle, BuildTarget.StandaloneWindows);\n\n\t\tFileUtil.ReplaceFile(dir \u002B \u0022/better_tracking_prefabs\u0022, dir \u002B \u0022/better_tracking_prefabs\u0022 \u002B extension);\n\n\t\tFileUtil.DeleteFileOrDirectory(dir \u002B \u0022/better_tracking_prefabs\u0022);\n\t}\n\n\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nYou can make a C# script in Unity (this is not something to add to your plugin, it is just for the Unity editor), you just have to make sure it\u0027s in a folder called \u0022Editor\u0022 (so Unity project folder/Assets/Editor/script.cs).\n\u003C/p\u003E\n\u003Cp\u003E\nThis adds a toolbar button along the top row in the editor, then it builds any asset bundles you have defined, and\u00A0in this\u00A0case, attaches a custom file extension. The target directory appears alongside your Assets folder.\n\u003C/p\u003E\n\u003Cp\u003E\n.ksp files will be loaded automatically by KSP during loading. But I just handle the asset loading myself, so you can use any extension, or none, for that:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\u003Ca href=\u0022https://github.com/DMagic1/KSP_BetterTracking/blob/master/Source/BetterTracking/Util/Tracking_Loader.cs#L84-L91\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/DMagic1/KSP_BetterTracking/blob/master/Source/BetterTracking/Util/Tracking_Loader.cs#L84-L91\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"nightstalker101s","CreatedById":171555,"CreatedDateTime":"2018-03-16T01:00:47Z","Content":"\n\u003Cp\u003E\nI understand your example code. I\u0027m not tracking how\u00A0 you are loading them yourself into KSP. I\u0027m assuming KSP loads all it\u0027s assets, goes to main menu, then when appropriate your plugin starts calling on the private asset bundle? I really don\u0027t \u0022need\u0022 to know this, but it is very interesting as I may decide to use this later for some unknown reason.\u003Cbr\u003E\u003Cbr\u003E\nThe newest Unity made several functions obsolete which are used by the parts tool. I installed the version you listed in your \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E and had no problems building the bundle. It took me a minute to understand that literally I am building a UI bundle (I don\u0027t even need textures or anything actually in the Unity project) and then using Visual Studio to build two separate libraries (.dll). I had a serious oh duh moment when I realized what you meant in the \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E. You did a great job at explaining it, but it really doesn\u0027t make sense (no fault of yours) until you are actually doing it. Even worse, if someone isn\u0027t familiar with Unity or other game engines it makes it even more difficult to understand. It seems silly to have to build a library (I understand why) in VS instead of just having the part tool asset bundler compile a .dll for any scripts attached to the asset bundle, but again I get why. Thank you for your assistance.\n\u003C/p\u003E\n\u003Cp\u003E\nSide Note: I am working on what I\u0027m calling K.O.P.C.O. (\u0022K.A.S.A. Operation Chief Campaign Overhaul\u0022). I\u0027m going to try to build more of a story line or story line feel without causing restrictions to gameplay into KSP. The player starts out being selected as the Operational Chief Director by 11 chairmen of the Kerbal Aeronautics and Space Administration. This was step one because the player will need to participate in interviews later and I needed a UI which is easier than trying to figure out how to program and animate a whole scene (maybe some day). Thank\u00A0 you again.\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2018-03-16T13:21:16Z","Content":"\n\u003Cp\u003E\nKSP\u0027s loading system loads all of its own resources first (I assume before it even gets to the loading screen) then goes through the GameData folder looking for certain file types. .ksp files are treated as asset bundles. I only use .ksp for KSPedia entries, because I don\u0027t really know what KSP does with them and I\u0027ve never really needed to find out.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nFor most of my mods I just wait until the main menu screen then manually load the asset bundle (which is really just a collection of GameObjects) and doing whatever needs to be done from there, in most cases that is either adding stock KSP UI style sprites to the UI, saving prefabs for use later on, or replacing standard Unity Text components with TextMeshPro components.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd yes, you don\u0027t really have to group things together for export in Unity, just label the objects you want with the asset bundle name and it will package together any sprites, textures, or whatever that those objects refer to. Which reminds me, now that KSP is using Unity 2017 I need to add another section here about using the new sprite atlas system.\n\u003C/p\u003E\n"},{"CreatedByName":"stelarfox","CreatedById":152367,"CreatedDateTime":"2018-08-20T16:26:22Z","Content":"\n\u003Cp\u003E\nI am sorry but I am following by the letter your instructions and it just does not work.\n\u003C/p\u003E\n\u003Cp\u003E\nYou are explaining it as if everyone here knows exactly what it should do, and thats not the case, I am an expert on c# and know my deal in Unity, but was unable to follow all you said, even reading it 10 times and doing it at the same time.\n\u003C/p\u003E\n\u003Cp\u003E\nMostly because some stuff is totally out of context. And some parts are not explained at all.\n\u003C/p\u003E\n\u003Cp\u003E\nof course this is my first mod so i do not know much of ksp, and thats mostly the problem.\n\u003C/p\u003E\n\u003Cp\u003E\nIs there any truly basic UI to see this?, or can you say in which file to set each step\n\u003C/p\u003E\n\u003Cp\u003E\nMy main problem is, after have done the Unity part, doing the rest (the hook).\n\u003C/p\u003E\n\u003Cp\u003E\nbecause from the ksp section It is unable to see what it should.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, I need this as soon as possible. will be really gratefull for a fast answer.\n\u003C/p\u003E\n"},{"CreatedByName":"stelarfox","CreatedById":152367,"CreatedDateTime":"2018-08-20T17:01:28Z","Content":"\n\u003Cp\u003E\nmy main issue is, how do you do that, if you are in ksp and m_versionText.text, does not exist there. And if you are not in ksp, how you reference it?\n\u003C/p\u003E\n\u003Cp\u003E\ntruly this has no head or tail.\n\u003C/p\u003E\n\u003Cpre style=\u0022border:1px solid #888888;color:#353c41;font-size:14px;padding:2px;\u0022\u003E\n\u003Cspan style=\u0022color:#000000;\u0022\u003Eif (m_VersionText != null)\n\t\t\t\tm_VersionText.text = example.Version;\u003C/span\u003E\u003C/pre\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2018-08-20T20:53:07Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223437083\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534782382\u0022 data-ipsquote-userid=\u0022152367\u0022 data-ipsquote-username=\u0022stelarfox\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, stelarfox said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nbecause from the ksp section It is unable to see what it should.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223437096\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534784488\u0022 data-ipsquote-userid=\u0022152367\u0022 data-ipsquote-username=\u0022stelarfox\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, stelarfox said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nmy main issue is, how do you do that, if you are in ksp and m_versionText.text, does not exist there. And if you are not in ksp, how you reference it?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis is the relevant section covering what I think is the problem. Your KSP Assembly needs to have a reference to your Unity Assembly. Then your KSP Assembly\u00A0can call any method and use any interface defined in the Unity Assembly.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reverse isn\u0027t true because you wouldn\u0027t be able to import your Unity Assembly into Unity if it had a reference to any KSP code.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222835301\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478113725\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 11/2/2016 at 3:08 PM, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFor our \u003Cb\u003EKSP Assembly\u003C/b\u003E we create that as always, and we add a reference to our new \u003Cb\u003EUnity Assembly\u003C/b\u003E.\u003Cspan\u003E\uFEFF\u003C/span\u003E This means that the \u003Cb\u003EKSP Assembly\u003C/b\u003E can call any public methods from the \u003Cb\u003EUnity Assembly\u003C/b\u003E, modify any public fields, and implement interfaces. But the \u003Cb\u003EUnity Assembly\u003C/b\u003E can\u2019t directly communicate with the upstream \u003Cb\u003EKSP Assembly\u003C/b\u003E, or directly use any KSP code.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2018-10-12T09:30:55Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223437232\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534798387\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 8/20/2018 at 4:53 PM, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003EYour KSP Assembly needs to have a reference to your Unity Assembly. Then your KSP Assembly\u00A0can call any method and use any interface defined in the Unity Assembly.\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m currently taking a look at this too and also had some confusion at this part. Should I reference the generated Asembly-CSharp generated by the Unity project? Do I also need to bundle this with my mode afterwards? Or should I force all this code into an external .csproj to the Unity generated project and bundle this?\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2018-10-12T19:52:51Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223466411\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221539336655\u0022 data-ipsquote-userid=\u002262017\u0022 data-ipsquote-username=\u0022stupid_chris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 hours ago, stupid_chris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m currently taking a look at this too and also had some confusion at this part. Should I reference the generated Asembly-CSharp generated by the Unity project? Do I also need to bundle this with my mode afterwards? Or should I force all this code into an external .csproj to the Unity generated project and bundle this?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nTo be clear, the Unity Assembly is one that can be \u003Cem\u003Eimported\u00A0\u003C/em\u003Einto a Unity project and used by assets within that project. It only required references to the UnityEngine.dll and (probably) the UnityEngine.UI.dll. This is imported into Unity as a compiled dll, not as un-compiled .cs files, then all of its classes are accessible by Game Objects within Unity.\n\u003C/p\u003E\n\u003Cp\u003E\nWhenever you create a Unity project it also generates an Assembly-CSharp.dll (and several others). This is not related to KSP\u0027s Assembly-CSharp.dll (well, technically this is how KSP\u0027s .dll is generated, through Squad\u0027s original KSP Unity Project).\n\u003C/p\u003E\n\u003Cp\u003E\nThe new Assembly-CSharp.dll is the default assembly file where any code added \u003Cem\u003Ethrough\u003C/em\u003E Unity is compiled. This happens when you create a new .cs script somewhere in your project\u0027s Asset folder. That code will be compiled into the Assembly-CSharp.dll.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general you should never have to do anything or worry about the Assembly-CSharp.dll generated by \u003Cem\u003Eyour \u003C/em\u003EUnity project. The Unity Assembly that you create is an already compiled .dll file that you import directly into Unity.\n\u003C/p\u003E\n\u003Cp\u003E\nSo the answer is no, you should not reference the Assembly-CSharp.dll generated by the Unity project, and you should not include that file with your mod.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWhen you make the KSP Assembly you do so basically the same way as you would for any other mod. You add references to the UnityEngine.dll and UnityEngine.UI.dll, and to \u003Cem\u003EKSP\u0027s\u003C/em\u003E Assembly-CSharp.dll. Then, in this case, you would also add a reference to your Unity Assembly .dll, so that it can be accessed directly from the KSP Assembly.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EUnityUIAssembly.dll -\u0026gt; this is the Unity Assembly that is imported into Unity\n|\n|\n---\u0026gt; UnityEngine.dll\n---\u0026gt; UnityEngine.UI.dll\n\n\nKSPAssembly.dll -\u0026gt; this is the KSP Assembly\n|\n|\n---\u0026gt; Assembly-CSharp.dll  -\u0026gt; this is from the KSP folder, not from your Unity project folder\n---\u0026gt; UnityEngine.dll\n---\u0026gt; UnityEngine.UI.dll\n---\u0026gt; UnityUIAssembly.dll  -\u0026gt; this is your Unity Assembly file\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nBoth the UnityUIAssembly.dll and the KSPAssembly.dll files are placed in a folder in KSP\u0027s GameData folder and loaded into KSP.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic problem, and the reason for this whole run-around method, is that you can\u0027t import an assembly into Unity that has a reference to KSP\u0027s Assembly-CSharp.dll. Unity gets confused, or thinks there is some loop of references, or something, and it will fail to import. So if you want code that you can access from within the Unity Editor, then you have to make a separate assembly and go through some indirect method of tying that back into KSP\u0027s code.\n\u003C/p\u003E\n\u003Cp\u003E\nIt isn\u0027t absolutely necessary to do this, Fengist has a great tutorial for how to make a UI with a single, standard KSP Assembly. It works well for simpler UI\u0027s, but I would have a hard time doing many of the things that I have in my UI\u0027s without having code that is directly accessible from within Unity. You can also use this same method for doing other interesting things, like adding \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/137628-kspedia-creation-tutorial/\u0026amp;do=findComment\u0026amp;comment=3394976\u0022 rel=\u0022\u0022\u003Ecustom behavior into KSPedia entries\u003C/a\u003E.\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed3797699942\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/177908-the-lazy-coders-guide-to-ksp-ui-design-a-tutorial/\u0026amp;do=embed\u0022 style=\u0022height:227px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2018-10-13T03:16:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223466645\u0022 data-ipsquote-contentid=\u0022151354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221539373971\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nTo be clear, the Unity Assembly is one that can be \u003Cem\u003Eimported\u00A0\u003C/em\u003Einto a Unity project and used by assets within that project. It only required references to the UnityEngine.dll and (probably) the UnityEngine.UI.dll. This is imported into Unity as a compiled dll, not as un-compiled .cs files, then all of its classes are accessible by Game Objects within Unity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOkay, that\u0027s the part I wasn\u0027t too clear about. That makes a lot more sense actually. I\u0027ve been working a lot with the new object based UI lately on personal projects and yeah I do agree it\u0027s probably gonna be a lot more handy to have an assembly directly into Unity. Thanks!\n\u003C/p\u003E\n\u003Cp\u003E\nOther than that, is there any particular reason it seems to be recommended to anchor in the top left? Just as a convenience or does KSP handle it\u0027s Canvas in a specific way that makes this more convenient?\n\u003C/p\u003E\n"}]}