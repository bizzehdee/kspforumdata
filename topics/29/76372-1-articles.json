{"TopicId":76372,"ForumId":29,"TopicTitle":"Determine ships orientation relative to flight path","CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2014-06-30T23:32:39Z","PageNum":1,"Articles":[{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2014-06-30T23:32:39Z","Content":"\n\u003Cp\u003EI am looking for a way to measure angle of attack, angle of yaw and angle of side slip all relative to the ships flight path vector. So far, I\u0027ve found almost nothing on the flight path vector. Also, angle of roll relative to the planet\u0027s surface would be nice too. \u003C/p\u003E\u003Cp\u003EThanks\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-06-30T23:49:23Z","Content":"\n\u003Cp\u003EIt is not that simple unfortunately. \u003C/p\u003E\u003Cp\u003EI\u0027m going to point you at the source code for either MechJeb or kOS which I assume does that so you can take a look.\u003C/p\u003E\u003Cp\u003EIt is what I did when I needed to get a vessel\u0027s angle off vertical for my velocity mod, ended up looking at mechjeb to walk me through the quanterion\u0027s to get the information needed.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-01T00:31:10Z","Content":"\n\u003Cp\u003EThe reason it\u0027s hard to find is that it\u0027s technically NOT part of the KSP API.\u003C/p\u003E\u003Cp\u003EIt\u0027s part of the Unity API.\u003C/p\u003E\u003Cp\u003EFirst, ask KSP for the vessel\u0027s Transform (i.e. GetTransform() or ReferenceTransform(), I don\u0027t remember which).\u003C/p\u003E\u003Cp\u003EThen you can ask Unity for the data about that Transform: \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Transform.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/ScriptReference/Transform.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBUT, and this is the mess, it will be the transform relative to the worldspace KSP creates which is not rotated to match the planet surface at all.\u003C/p\u003E\u003Cp\u003ESo the next thing you have to do is work out the transform of the SOI body you are around, and work out that relative to to your rotation.\u003C/p\u003E\u003Cp\u003EYou can do that with Vessel.srfRelRotation. It gives you a quaternion of the surface rotation where your vessel is - by comparing that to your vessel\u0027s rotation you can get the data you\u0027re looking for if you delve into the Unity API for how to do that.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-01T00:41:17Z\u0022 title=\u002207/01/2014 12:41  AM\u0022 data-short=\u002210 yr\u0022\u003EJuly 1, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2014-07-01T01:08:20Z","Content":"\n\u003Cp\u003EI\u0027ll give that a try. But first, I\u0027ll need to do some research on vector math with quaternions. \u003C/p\u003E\u003Cp\u003EThanks,\u003C/p\u003E\u003Cp\u003EEDIT: I\u0027m having a really hard time figuring out which way vectors are pointing. Is there any debug option to draw a vector?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-12T21:31:23Z\u0022 title=\u002207/12/2014 09:31  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 12, 2014\u003C/time\u003E by wizzlebippi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2014-07-12T21:54:33Z","Content":"\n\u003Cp\u003EBump for previous post\u0027s edit\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-13T23:16:20Z","Content":"\n\u003Cp\u003EUse the unity primitive called LineRenderer to draw a line.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    GameObject lineObj = new GameObject(\u0022laser line\u0022);\u003Cbr\u003E    bool isOnMap = MapView.MapIsEnabled;\u003Cbr\u003E    lineObj.layer = isOnMap ? 10 : 1;  // 10 is the map layer, 1 is the transparent effect on flight cam layer.\u003Cbr\u003E\u003Cbr\u003E    LineRenderer line = lineObj.AddComponent\u0026lt;LineRenderer\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E    line.material = new Material(Shader.Find(\u0022Particles/Additive\u0022) ); // generic flat texture\u003Cbr\u003E    Color c1 = new Color( 1.0f,0.0f,0.0f,0.5f); // red, semi-transparent.\u003Cbr\u003E    Color c2 = new Color( 1.0f,1.0f,0.0f,0.2f); // yellow, even more transparent.\u003Cbr\u003E    line.SetColors( c1, c2 ); // color of start/end of line drawing - Unity will make a fade effect between the two colors\u003Cbr\u003E    line.SetVertexCount(2); // Despite the name, LineRenderer actually renders a path of lines, not a single line, so to just render one segment limit it to 2 vertices.\u003Cbr\u003E    line.SetWidth( 0.5f, 0.5f ); // width of start/end of line. might need it wider on map view.\u003Cbr\u003E    line.SetPosition( 0, __put_some_poistion_vector_here___) ; // start point\u003Cbr\u003E    line.SetPosition( 1, __put_some_poistion_vector_here___) ; // end point\u003Cbr\u003E    line.enabled = true;  // line is invisible until you do this.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2014-07-15T22:51:43Z","Content":"\n\u003Cp\u003EThat helped immensely. I can now calculate angle of attack relative to the ships flight path, but everything seems to break down at 22,000m. Is there some magical transition that occurs here?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-16T08:30:37Z","Content":"\n\u003Cp\u003EAbove a certain altitude, the game switches modes from:\u003C/p\u003E\u003Cp\u003E- Planet stays fixed in space, and the universe rotates around it.\u003C/p\u003E\u003Cp\u003Eto\u003C/p\u003E\u003Cp\u003E- Planet rotates in space, and the universe stays still.\u003C/p\u003E\u003Cp\u003EAt low altitudes it keeps the planet stationary so that the terrain polygons don\u0027t have to be constantly repositioned as the planet rotates, which would lag animation to a standstill.\u003C/p\u003E\u003Cp\u003ESo I suspect you might be seeing something happen at the transition between those two modes, but it\u0027s hard to tell for sure.\u003C/p\u003E\n"}]}