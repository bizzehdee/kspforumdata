{"TopicId":119091,"ForumId":29,"TopicTitle":"Wanted: C# Camera code","CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-08-22T20:49:26Z","PageNum":1,"Articles":[{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-08-22T20:49:26Z","Content":"\n\u003Cp\u003EWould anyone happen to have a chunk of code lying about that frees the rotation of the camera when a vessel is splashed. Normally, the deeper you go underwater, the more vertical the camera becomes. I\u0027m looking for a way to remove that.\u003C/p\u003E\u003Cp\u003EThanks.\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-08-25T17:06:16Z","Content":"\n\u003Cp\u003EOk, apparently no one has any such code lying around. So... I, a complete C# ijut who does program in Pascal and PHP, decided to attempt this myself. And, I have partially succeeded. I found the source for the old Hooligan Labs submarines, which is under the MIT license so it\u0027s fully reusable. It contained code to take control of the camera and I have bastardized it and have it mostly working.\u003C/p\u003E\u003Cp\u003EHere\u0027s the issues I\u0027m having and I hope someone can help me with this.\u003C/p\u003E\u003Cp\u003EHere\u0027s how it basically works, from what I understand:\u003C/p\u003E\u003Cp\u003EIf the altitude of the vessel is \u0026lt; 5 meters it either creates a new camera or an instance of a camera, attaches it to the active vessel, and takes control of that camera, removing control of the active flight camera. And it works.\u003C/p\u003E\u003Cp\u003EIf the altitude \u0026gt; 5 meters, it restores the active flight camera. And that works.\u003C/p\u003E\u003Cp\u003EHere\u0027s the issues I\u0027m having:\u003C/p\u003E\u003Cp\u003E1: When the cameras switch (when the vessel goes above or below the 5m mark), they don\u0027t \u0027remember\u0027 the view of the previous camera. I.E., the camera will often instantly rotate 180 degrees. I assume I need to store the camera position when I switch and then assign that position to the one I\u0027m switching to, but no idea how that\u0027s done.\u003C/p\u003E\u003Cp\u003E2: I\u0027d really like to be able to designate which part the camera is assigned to via the part\u0027s config. I.E.\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name=underwatercamera\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EAs it stands now, the code doesn\u0027t care what vessel is above or below 5m, it could be a splashed stock aircraft, the camera will switch and take control (which is rather rude). I don\u0027t want the camera to be replaced if it\u0027s not a part with the specific module in the config... and I have no earthly clue how to do that either.\u003C/p\u003E\u003Cp\u003EI\u0027d also like to be able, in a separate config, to pre-load and change settings, like the 5m mark where the cameras switch and again, I have no clue how to do that.\u003C/p\u003E\u003Cp\u003EHere\u0027s the code I have so far:\u003C/p\u003E\u003Cp\u003EThis is run in the FixedUpdate:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        if (FlightGlobals.ActiveVessel.altitude \u0026lt;= 5.0)\u003Cbr\u003E        {\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                if (UnderwaterCamera.ManualControl \u0026amp;\u0026amp; (CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.IVA || CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.Internal)) // Exit when IVA too\u003Cbr\u003E                {\u003Cbr\u003E                    UnderwaterCamera.RestoreCameraParent();\u003Cbr\u003E                    return;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            catch (Exception ex)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022[Maritime Pack]RestoreCameraParent Exception!\u0022);\u003Cbr\u003E                return;\u003Cbr\u003E            }\u003Cbr\u003E            if (!UnderwaterCamera.ManualControl)\u003Cbr\u003E            {\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E                    UnderwaterCamera.SetCameraParent();\u003Cbr\u003E                    Debug.Log(\u0022[Maritime Pack]Setting Camera Parent\u0022);\u003Cbr\u003E\u003Cbr\u003E                }\u003Cbr\u003E                catch (Exception ex)\u003Cbr\u003E                {\u003Cbr\u003E                    print(\u0022[Maritime Pack]Set Camera Exception!\u0022); print(ex.Message);\u003Cbr\u003E                }\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E                    UnderwaterCamera.ManualControl = true;\u003Cbr\u003E                    cameraManualControl();\u003Cbr\u003E                    Debug.Log(\u0022[Maritime Pack]Camera Manual Control Activated\u0022);\u003Cbr\u003E                }\u003Cbr\u003E                catch (Exception ex)\u003Cbr\u003E                {\u003Cbr\u003E                    print(\u0022[Maritime Pack]Camera Manual Control Exception!\u0022); print(ex.Message);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                cameraManualControl();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            if (UnderwaterCamera.ManualControl)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022[Maritime Pack]Vessel Above 5.0M\u0022);\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E                    UnderwaterCamera.RestoreCameraParent();\u003Cbr\u003E                }\u003Cbr\u003E                catch (Exception ex)\u003Cbr\u003E                {\u003Cbr\u003E                    Debug.Log(\u0022[Maritime Pack]Restore Camera Parent Exception!\u0022); print(ex.Message);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd this is the rest of the code.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    private void cameraManualControl()\u003Cbr\u003E    {\u003Cbr\u003E        if (!UnderwaterCamera.ManualControl)\u003Cbr\u003E            return;\u003Cbr\u003E        Debug.Log(\u0022[Maritime Pack]Manually Controlling\u0022);\u003Cbr\u003E        _cameraX = 0;\u003Cbr\u003E        _cameraY = 0;\u003Cbr\u003E\u003Cbr\u003E        if (Input.GetMouseButton(1))    // RMB\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022[Maritime Pack]RMB Clicked\u0022);\u003Cbr\u003E            _cameraX = Input.GetAxis(\u0022Mouse X\u0022) * UnderwaterCamera.CameraSpeed;  // Horizontal\u003Cbr\u003E            _cameraY = Input.GetAxis(\u0022Mouse Y\u0022) * UnderwaterCamera.CameraSpeed;  // Vertical\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (GameSettings.AXIS_MOUSEWHEEL.GetAxis() != 0f)   // MMB\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022[Maritime Pack]Middle Mouse Wheel Scrolled\u0022);\u003Cbr\u003E            CameraDistance =\u003Cbr\u003E                Mathf.Clamp(\u003Cbr\u003E                    CameraDistance *\u003Cbr\u003E                    (1f - (GameSettings.AXIS_MOUSEWHEEL.GetAxis() * UnderwaterCamera.ActiveFlightCamera.zoomScaleFactor)),\u003Cbr\u003E                    UnderwaterCamera.ActiveFlightCamera.minDistance, UnderwaterCamera.ActiveFlightCamera.maxDistance);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        UnderwaterCamera.ActiveCameraPivot.transform.RotateAround(UnderwaterCamera.ActiveCameraPivot.transform.position, -1 * FlightGlobals.getGeeForceAtPosition(UnderwaterCamera.ActiveCameraPivot.transform.position).normalized, _cameraX);\u003Cbr\u003E        UnderwaterCamera.ActiveCameraPivot.transform.RotateAround(UnderwaterCamera.ActiveCameraPivot.transform.position, -1 * UnderwaterCamera.ActiveFlightCamera.transform.right, _cameraY);\u003Cbr\u003E\u003Cbr\u003E        UnderwaterCamera.ActiveCameraPivot.transform.position = FlightGlobals.ActiveVessel.transform.position;\u003Cbr\u003E\u003Cbr\u003E        UnderwaterCamera.ActiveFlightCamera.transform.LookAt(UnderwaterCamera.ActiveCameraPivot.transform.position, -1 * FlightGlobals.getGeeForceAtPosition(UnderwaterCamera.ActiveFlightCamera.transform.position).normalized);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private static double findAltitude(Transform aLocation)  //not used at the moment\u003Cbr\u003E    {\u003Cbr\u003E        if (FlightGlobals.ActiveVessel == null) return 0;\u003Cbr\u003E        return Vector3.Distance(aLocation.position, FlightGlobals.ActiveVessel.mainBody.position) - (FlightGlobals.ActiveVessel.mainBody.Radius);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Epublic static class UnderwaterCamera\u003Cbr\u003E{\u003Cbr\u003E    private static Transform _originalParentTransform;\u003Cbr\u003E    private static bool _manualControl;\u003Cbr\u003E\u003Cbr\u003E    public static FlightCamera ActiveFlightCamera;\u003Cbr\u003E    public static GameObject ActiveCameraPivot;\u003Cbr\u003E\u003Cbr\u003E    public static float CameraSpeed = 0f;\u003Cbr\u003E    public static float CameraSpeedMulti = 20f;\u003Cbr\u003E\u003Cbr\u003E    public static bool ManualControl\u003Cbr\u003E    {\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            if (value \u0026amp;\u0026amp; ActiveFlightCamera == null)\u003Cbr\u003E            {\u003Cbr\u003E                _manualControl = false;\u003Cbr\u003E                Debug.Log(\u0022[Maritime Pack]Tried to set manual camera control while FlightCamera.fetch was null.\u0022);\u003Cbr\u003E                return;\u003Cbr\u003E            }\u003Cbr\u003E            _manualControl = value;\u003Cbr\u003E        }\u003Cbr\u003E        get { return _manualControl; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public static void SetCameraParent()\u003Cbr\u003E    {\u003Cbr\u003E        // Assign FlightCamera instance to public var.\u003Cbr\u003E        ActiveFlightCamera = FlightCamera.fetch;\u003Cbr\u003E\u003Cbr\u003E        // For replacing the camera when done editing.\u003Cbr\u003E        if (_originalParentTransform == null)\u003Cbr\u003E            _originalParentTransform = ActiveFlightCamera.transform.parent;\u003Cbr\u003E\u003Cbr\u003E        // For translating the camera\u003Cbr\u003E        if (ActiveCameraPivot != null) GameObject.Destroy(ActiveCameraPivot);\u003Cbr\u003E        ActiveCameraPivot = new GameObject(\u0022FSCamPivot\u0022);\u003Cbr\u003E        ActiveCameraPivot.transform.position = FlightGlobals.ActiveVessel.transform.position;\u003Cbr\u003E\u003Cbr\u003E        ActiveFlightCamera.transform.position = FlightCamera.fetch.transform.position;\u003Cbr\u003E        ActiveCameraPivot.transform.LookAt(ActiveFlightCamera.transform.position, -1 * FlightGlobals.getGeeForceAtPosition(UnderwaterCamera.ActiveFlightCamera.transform.position).normalized);\u003Cbr\u003E        ActiveFlightCamera.transform.LookAt(ActiveCameraPivot.transform.position, -1 * FlightGlobals.getGeeForceAtPosition(UnderwaterCamera.ActiveFlightCamera.transform.position).normalized);\u003Cbr\u003E\u003Cbr\u003E        // Switch to active object.\u003Cbr\u003E        ActiveFlightCamera.transform.parent = ActiveCameraPivot.transform;\u003Cbr\u003E\u003Cbr\u003E        // Use the FlightCamera sensitivity for the speed.\u003Cbr\u003E        CameraSpeed = ActiveFlightCamera.orbitSensitivity * CameraSpeedMulti;\u003Cbr\u003E\u003Cbr\u003E        // Set the fact that we\u0027re controlling the camera manually now.\u003Cbr\u003E        ManualControl = true;\u003Cbr\u003E\u003Cbr\u003E        // Say something.\u003Cbr\u003E        Debug.Log(\u0022[Maritime Pack]FlightCamera switched to: \u0022 \u002B FlightGlobals.ActiveVessel.name);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public static void RestoreCameraParent()\u003Cbr\u003E    {\u003Cbr\u003E        // Restore camera control to vessel.\u003Cbr\u003E        FlightCamera.fetch.transform.parent = _originalParentTransform;\u003Cbr\u003E        _originalParentTransform = null;\u003Cbr\u003E\u003Cbr\u003E        //Remove the fact that we\u0027re controlling the camera.\u003Cbr\u003E        ManualControl = false;\u003Cbr\u003E\u003Cbr\u003E        // Say something.\u003Cbr\u003E        Debug.Log(\u0022[Maritime Pack]FlightCamera restored to vessel.\u0022);\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThanks for taking a look.\u003C/p\u003E\u003Cp\u003EOh, and obviously if you see any glaing screw-ups in this code, please let me know.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-25T17:36:01Z\u0022 title=\u002208/25/2015 05:36  PM\u0022 data-short=\u00228 yr\u0022\u003EAugust 25, 2015\u003C/time\u003E by Fengist\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-08-26T17:14:12Z","Content":"\n\u003Cp\u003EWell, it appears that I\u0027m asking the wrong questions. It seems everyone who\u0027s read this post is either unwilling or unable to answer.\u003C/p\u003E\u003Cp\u003ESo, I\u0027ve finally figured out enough code to determine if a MODULE is present in a .cfg. I\u0027m still fighting with the camera flopping around when it switches though.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-27T01:29:15Z","Content":"\n\u003Cp\u003EThe issue is that you are messing around in an area of KSP that hardly anyone has done anything with.\u003C/p\u003E\u003Cp\u003EThis is only the second time I have even heard of someone trying to manipulate the camera like this, I\u0027ve never though about looking at it myself.\u003C/p\u003E\u003Cp\u003EAs for your other questions, there is actually a lack of details needed, notably how is the code running?\u003C/p\u003E\u003Cp\u003EYou\u0027ve posted the code for manipulating the camera, but is it on a partModule, a KSPAddon, something else?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"yerdnadm","CreatedById":150141,"CreatedDateTime":"2015-08-27T07:33:34Z","Content":"\n\u003Cp\u003EI\u0027m interested in this too. Mainly, I\u0027d like to figure out some way to click on a part and set it as the camera origin point. Looking around large stations is a pain.\u003C/p\u003E\u003Cp\u003ESo far, the only code I\u0027ve found is the source for the Camera Tools plugin from KerbalStuff.\u003C/p\u003E\u003Cp\u003EThe other thing that you can do is run it in a debugger and descend into the KSP assembly, and try to figure things out from there.\u003C/p\u003E\u003Cp\u003EThough for the camera, it seems as if it should be possible to just go off from the Unity documentation and examples.\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-08-27T23:58:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EThe issue is that you are messing around in an area of KSP that hardly anyone has done anything with.\u003Cp\u003EThis is only the second time I have even heard of someone trying to manipulate the camera like this, I\u0027ve never though about looking at it myself.\u003C/p\u003E\u003Cp\u003EAs for your other questions, there is actually a lack of details needed, notably how is the code running?\u003C/p\u003E\u003Cp\u003EYou\u0027ve posted the code for manipulating the camera, but is it on a partModule, a KSPAddon, something else?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYea, I was pretty sure I was jumping into the deep end on this one. I only know of a very few mods that do use code like this, Hooligan being one.\u003C/p\u003E\u003Cp\u003EWhat I eventually figured out (which took 1 line of code) was to create a partmodule in the .cfg and then detect if that partmodule was on the active ship. If so, run the camera code. I tried storing the flightcamera pitch and heading like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EFCheading = FlightCamera.CamHdg;\u003Cbr\u003EFCpitch = FlightCamera.CamPitch;\u003Cbr\u003EActiveFlightCamera = FlightCamera.fetch;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand then assigning the pitch and heading to the activeflightcamera. Of course, that didn\u0027t work but spammed the log with errors.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022yerdnadm\u0022 data-cite=\u0022yerdnadm\u0022\u003E\u003Cdiv\u003EI\u0027m interested in this too. Mainly, I\u0027d like to figure out some way to click on a part and set it as the camera origin point. Looking around large stations is a pain.\u003Cp\u003ESo far, the only code I\u0027ve found is the source for the Camera Tools plugin from KerbalStuff.\u003C/p\u003E\u003Cp\u003EThe other thing that you can do is run it in a debugger and descend into the KSP assembly, and try to figure things out from there.\u003C/p\u003E\u003Cp\u003EThough for the camera, it seems as if it should be possible to just go off from the Unity documentation and examples.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe code there does work. If you drop below 5m, it does create a camera and when you go back above 5m, it restores the old one. But, it seems to flip the heading 180 degrees and it points the camera at the root part, unlike the normal camera which is COM.\u003C/p\u003E\u003Cp\u003EThe big problem, while I can kinda follow C#, it\u0027s not a language I know, nor do I know the Unity API or the KSP API. Not exactly a great way for a C# total noob to cut his teeth.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-28T00:03:10Z\u0022 title=\u002208/28/2015 12:03  AM\u0022 data-short=\u00228 yr\u0022\u003EAugust 28, 2015\u003C/time\u003E by Fengist\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-09-05T19:21:38Z","Content":"\n\u003Cp\u003EOverall it looks promising. Controlling whether or not it happens from a part module is also something I could see working rather well. How I would do it, however, would be to create two modules (technically anyway) where the first would be a part module containing KSPField variables for the varying settings that could be applied to this new camera. That would allow you to define the module in the part.cfg (or whatever it\u0027s called for that specific part) and apply any part-specific settings, or add some context menu sliders. This would also make it easier to make the camera override-able from an action group, in case you were using this part on a craft that was exploring a non-atmospheric and/or non-oceanic body with landmasses that dipped more than 5m below what would be called \u0022sea level\u0022 for that body. The fact that such things could be detectable in code later is irrelevant here since we want to leave control in the hands of the user when selecting how they want to view their craft. This first module would also be in charge of monitoring the current situation and whether or not the camera should be in underwater mode. Finally, you would need to add a detector for the current body which finds out if the planet \u003Cem\u003Ehas\u003C/em\u003E oceans and, if that returns false, to remove the second module from the root part dynamically to eliminate it from taking up system resources constantly checking that the camera is being properly manipulated.\u003C/p\u003E\u003Cp\u003EThe second part module would be one that is added dynamically to the root part of the vessel, if the body checks out to be oceanic, by the previous part module and will then call forth the settings from its creator module and apply them to the camera, including whether or not to make the switch to or from itself based on whether or not the override action group is active. I \u003Cem\u003Emight\u003C/em\u003E also add the override action group to this module as well, just in case the controller module/part is detached from the ship in flight. This second module will handle all the actual camera work and the maintaining of the camera angles. Looking at the stock KSP code (using something like ILSpy to decompile it into a C# format and doing some digging) you should be able to find out how they calculate the Center of Mass, but I believe KSP probably already provides a method somewhere that would do that for you. If neither of those searches reveal anything, you could always look at the source for other mods that deal with CoM, such as mechjeb or RCS Build Aid (I butchered that name I think). You should then be able to make the camera look at that target with \u0022\u003Cem\u003Ecameraname\u003C/em\u003E.transform.LookAt(vector3 lookat_target)\u0022 where \u0022lookat_target\u0022 is then the vector3 of the center of mass for the current vessel. In fact, looking at the code just now, I discovered a stock vessel CoM detector in \u0022GetComponent\u0026lt;Vessel\u0026gt;().CoM\u0022 which returns a vector3 for the current vessel\u0027s center of mass.\u003C/p\u003E\u003Cp\u003EIt\u0027s all quite complicated, but also rather powerful if you just do some digging around in the stock DLLs.\u003C/p\u003E\u003Cp\u003EThat\u0027s just the approach I would take. You could also use a vesselmodule instead of a partmodule for the camera code, but vesselmodule objects are then added to every craft no matter what, so you\u0027d still want some form of controller part module on a part, or added to control parts/command pods/Kerbals (when sitting in a command chair) to set an active/not-active field somewhere.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EIf\u003C/em\u003E you managed to get everything stable enough with the code to auto detect if we are indeed under \u0022water\u0022 and not simply below the reference body\u0027s \u0022water level\u0022 then you might be able to simply eliminate the part module and run it as a vessel module, added to every craft from the get go, and make it more or less seamless. For end-user options you could then either use a GUI like we do in Kerbal Foundries, coupled with a config file in our mod\u0027s root directory (and an entire Persistence class that was ingeniously built by *Aqua* (the asterisks are part of his name, not punctuation)), or you could re-add a part module that could optionally override default settings in the vessel module if the part is detected on the craft at startup.\u003C/p\u003E\u003Cp\u003EEventually you\u0027d want to see about making it compatible with any other camera manipulating mods, the easiest of which would be to simply set an override to disable your mod\u0027s camera modification if any other camera modifications are currently active, but still monitor the vessel situation so you can re-active when the custom camera is toggled back to the standard camera.\u003C/p\u003E\u003Cp\u003EYou have been the victim of one of my famous \u0022walls of text.\u0022 It\u0027s an honor, really... if you survive it.\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-09-06T03:02:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIt\u0027s all quite complicated\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPardon, but I see the part of your WOT that\u0027s relevant to me.\u003C/p\u003E\n"},{"CreatedByName":"pizzaoverhead","CreatedById":26349,"CreatedDateTime":"2015-09-08T16:33:05Z","Content":"\n\u003Cp\u003EIt sounds like you\u0027ve made some progress on this. What issues are you still having? With regards to example code for dealing with cameras, you can check out KerbTrack. You can see assigning the heading and pitch of the camera working \u003Ca href=\u0022https://github.com/pizzaoverhead/KerbTrack/blob/master/KerbTrack/KerbTrack.cs#L411-L412\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E. What issues did you run into trying to do the same?\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-09-09T03:39:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022pizzaoverhead\u0022 data-cite=\u0022pizzaoverhead\u0022\u003E\u003Cdiv\u003EIt sounds like you\u0027ve made some progress on this. What issues are you still having? With regards to example code for dealing with cameras, you can check out KerbTrack. You can see assigning the heading and pitch of the camera working \u003Ca href=\u0022https://github.com/pizzaoverhead/KerbTrack/blob/master/KerbTrack/KerbTrack.cs#L411-L412\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E. What issues did you run into trying to do the same?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have made some progress yes. I have code working and working underwater well with one rather big exception. It passes right through the terrain.\u003C/p\u003E\u003Cp\u003EI\u0027ve attempted raycasting downward from the camera and that sorta works and I can get the cameral altitude (which is a negative underwater). I\u0027m pretty sure I can get the heading and pitch but really don\u0027t need them. But so far, my attempts to keep it above the terrain... well, the bottle of aspirin beside me is a bit lighter.\u003C/p\u003E\u003Cp\u003EHere\u0027s the code I\u0027m using to find the terrain, the problem is, in the code above, he\u0027s trapping the mouse wheel and the right mouse button and adjusting the camera position when that happens. So far, using either update or fixedupdate, it\u0027s not casting the ray faster than the mouse can move so it ends up under the terrain.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        if (Physics.Raycast(UnderwaterCamera.ActiveFlightCamera.transform.position, Vector3.down, out hit, 5000))\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(new ScreenMessage(\u0022Camera Hit: \u0022 \u002B hit.transform.name \u002B \u0022 Distance: \u0022 \u002B hit.distance \u002B \u0022 Altitude: \u0022 \u002B cameraAltitude \u002B \u0022 Y: \u0022 \u002B _cameraY, 3f, ScreenMessageStyle.UPPER_LEFT));\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            hit.distance = 20f;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E//and before the camera is adjusted... this is my last failed attempt.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        if (hit.distance \u0026lt; 20f || cameraAltitude \u0026lt; -998)\u003Cbr\u003E            _cameraY = -0.1f;\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve also been told that the \u0027false bottom\u0027 of the ocean at 1,000m is a problem but I can get around that. Squad obviously does this with their code but I\u0027m sure it\u0027s nothing like the code I have to work with.\u003C/p\u003E\n"}]}