{"TopicId":175520,"ForumId":29,"TopicTitle":"Modders Notes for Making History Expansion","CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2018-06-01T06:03:05Z","PageNum":1,"Articles":[{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2018-06-01T06:03:05Z","Content":"\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EMaking History Modders Doc.\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EOverview and Basic starting Info\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nMaking History adds the Mission Builder and Missions game mode to KSP.\u003Cbr\u003E\nThere are two new game modes: MISSION and MISSION_BUILDER.\u003Cbr\u003E\nBoth of these game modes can only be used and will only run if the Making History expansion is installed.\u003Cbr\u003E\nThe mission builder is a new scene which is used to create missions which then can be shared and played.\u003Cbr\u003E\nThis document gives some basic information for how to mod Making History.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003ELocalizing a Mission\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nPreparations\u003Cbr\u003E\nBefore you begin your localization efforts, there are a few definitions that you have to plan. You need to define your auto-localization key format and create your dictionary files.\u003Cbr\u003E\n1. Auto-localization format: Making good auto-localization keys requires for them to be unique.\n\u003C/p\u003E\n\u003Cp\u003E\nWithin the scope of the Missions Editor, we recommend a naming convention of #\u0026lt;Name\u0026gt; \u0026lt;Mission\u0026gt; \u0026lt;purpose_or_number\u0026gt;, where \u0022Name\u0022 is your name or alias, \u0022Mission\u0022 is a short name for your mission and the third component is an identifier, it can be a number or description of where the text is used.\u003Cbr\u003E\nExamples: #Me_MyAwesomeMission_0000 ; or #JohnDoe_JohnsAwesomeMission_beginTest;\u003Cbr\u003E\nor anything of the sort.\u003Cbr\u003E\nNote! This is just a suggestion, remember, as long as your keys are unique and they begin with \u0022#\u0022 you can define whatever format you like.\n\u003C/p\u003E\n\u003Cp\u003E\n2. Dictionary file: Create a text file inside your mission folder (\u0026lt;KSPRoot\u0026gt;/Missions/\u0026lt;yourMissionName\u0026gt;/Localization), if the directory doesn\u2019t exist you can create it yourself. The file must be have a .cfg extension. In\u003Cbr\u003E\nthat file, copy the following text:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022 id=\u0022ips_uid_7860_5\u0022 style=\u0022\u0022\u003E\n\u003Cspan class=\u0022typ\u0022\u003ELocalization\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    en\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eus\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E#Me_MyAwesomeMission_0000 = Cool Mission\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E#JohnDoe_JohnsAwesomeMission_beginTest = Do awesome Kerbal stuff\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    es\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ees\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E#Me_MyAwesomeMission_0000 = Mision Genial\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E#JohnDoe_JohnsAwesomeMission_beginTest = Haz grandiosas cosas Kerbal\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//all the other languages you want to support\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nWarning! Remember to substitute the id with your mission\u2019s and the text with some relevant lines that you are going to localize in your mission.\u003Cbr\u003E\nNote that the auto-localization key for the equivalent line in all the languages is the same. You\u003Cbr\u003E\nalso begin the section with the language id of the language to localize, these are the languages supported in KSP and their id\u2019s:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nenglish en-us\n\u003C/li\u003E\n\u003Cli\u003E\nGerman de-de\n\u003C/li\u003E\n\u003Cli\u003E\nFrench fr-fr\n\u003C/li\u003E\n\u003Cli\u003E\nItalian it-it\n\u003C/li\u003E\n\u003Cli\u003E\nSpanish es-es\n\u003C/li\u003E\n\u003Cli\u003E\nRussian ru\n\u003C/li\u003E\n\u003Cli\u003E\nJapanese ja\n\u003C/li\u003E\n\u003Cli\u003E\nSimplified Chinese zh-cn\n\u003C/li\u003E\n\u003Cli\u003E\nPortuguese pt-br\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\nOn another note, if for whatever reason you need more than one dictionary file, you can create as many as you like, as long as they are in the Localization subdirectory of your mission, have a .cfg file extension and follow the format, they will be picked up by KSP.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003ELocalizing your Mission\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nPlay your mission thoroughly and identify all the text that\u2019s presented to the player, this is the only text that we recommend you localize. Define your autoLOC format and dictionary file as per the instructions in the previous section and you\u2019re all set to start!\n\u003C/p\u003E\n\u003Cp\u003E\nWe present a very simple example with just a few nodes, but it\u2019s enough to illustrate the concept.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-ff169c9a-bd05-04b5-d2a4-5eb431ab5e97\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022EenwTgAnW37UYEZ48UArCPVZJAjUxXdnqjO7ppd7\u0022 height=\u0022307\u0022 src=\u0022https://lh6.googleusercontent.com/EenwTgAnW37UYEZ48UArCPVZJAjUxXdnqjO7ppd72TKcA4WZHbsJf00v7UbAgmoYYoyoAuQoxrfDI2TkB-mgZxAOQaooIJviR8mn8ggiG4OgghYq3OYrquEsIjybLW8GMONND63Y\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022600\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nIn this example the only nodes that require localization are the Dialog Messages and, very important, the briefing. Open the dictionary.cfg file and assign auto localization keys to the strings you need to localize. After that, create the language nodes that you want and are able to support. It may be a good idea to ask around in the community if anyone is able to help you with languages that you don\u2019t speak yourself. Save your file when you\u2019re done.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nWhen you have the auto-localization keys and the strings matched, all you have to do is input\u003Cbr\u003E\nthem in the appropriate text field in the Mission Editor (ME). If your dictionary file was already saved before you opened the ME, the keys will be translated into text instantly. Otherwise, you can reload the ME and they will show.\u003Cbr\u003E\nYou will also notice that a text field is blocked after you use an auto-localization key in it. You used the wrong key and can\u2019t correct it because the field is locked? No problem, open the Debug Menu (Left Alt\u002BF12) and navigate to Mission Tools. You will see a checkbox that says \u0022Override Mission Editor auto-localization lock\u0022, activate it, and the field will be open for editing again.\n\u003C/p\u003E\n\u003Cp\u003E\nAuto-localization string showing in the text field.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-1ac7894f-bd05-9ac7-1409-9c658c3d6f4e\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022Nnkna_1YhvSRmUxK4pfCiJC-qvesnW0GiP-29J5H\u0022 height=\u002299\u0022 src=\u0022https://lh4.googleusercontent.com/Nnkna_1YhvSRmUxK4pfCiJC-qvesnW0GiP-29J5Hk5AyY-W5XG39OI0GgJbU-N16TV2Ih5wO4Jrzb_Ey1FgWy3tqgEl7xABhJkXrn13Nj-GVREDIU-tyAyQih2lDtMPQKIoE-gYa\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022285\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nLocked field showing the localized text.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-901e1b6b-bd05-aaf6-db4c-042cc93c0d0e\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022MRV2TEt-04LkTCg0o0dYWnfYijklUW2-reaapfCD\u0022 height=\u002274\u0022 src=\u0022https://lh6.googleusercontent.com/MRV2TEt-04LkTCg0o0dYWnfYijklUW2-reaapfCD4-F3_az6yBJ3Bl0vW0Rs-XJ_lPsOir5ugG3hEgnKbcQsuPdXZ6bUVaif9FSiyMLgFni_ZAnTiONWT_OZfyvOhIpt1JQzElIn\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022276\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nDebug Menu override.\u003Cbr\u003E\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-a1fb7db9-bd05-c612-c8dc-d84b1d898d5b\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022c12A5PErNM9pJSXZ2-eCqfFCq6kWYUbwscYK8asg\u0022 height=\u0022236\u0022 src=\u0022https://lh4.googleusercontent.com/c12A5PErNM9pJSXZ2-eCqfFCq6kWYUbwscYK8asgtJIrmb-25Imv9HWqRjiT2FRnQMHDFxEp0BXnY1x0szm0XKka6-SfRI1Mo4BnegtB4yJUIufgEg6giffqSSo7_W0PPO1CdjOE\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022316\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nOnce you\u2019re done editing, you can save your file and it\u2019s ready to be shared. If you start the mission when KSP is set to a language defined in your dictionary, the mission will just be translated, no further intervention will be needed.\n\u003C/p\u003E\n\u003Cp\u003E\nSpanish nodes translated like magic.\u003Cbr\u003E\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-cac9e002-bd06-1db2-94b1-c8137f9a42ed\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022DZTtKvnHzESD8bMdcdzoGn1-jNoUCDKqvYH1fOA3\u0022 height=\u0022103\u0022 src=\u0022https://lh3.googleusercontent.com/DZTtKvnHzESD8bMdcdzoGn1-jNoUCDKqvYH1fOA3CGWNQQDgEBvgw9nsRGrmHErLl76mScOKtKYpelsmN2bBGaGdtqvlOlnRKx2oKWYMhuXgO4HKZcEEha0Kc31TclykXMcZnEFB\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022286\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EFile Persistence\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMissions consist of a number of files for each mission.\u003Cbr\u003E\npersistent.mission - The actual mission file itself.\u003Cbr\u003E\nPersistent.loadmeta - Meta data used in the in-game dialogs.\n\u003C/p\u003E\n\u003Cp\u003E\nYou will also see a number of other files in the saves folders for missions (when missions are played or tested).\u003Cbr\u003E\nThese include .loadmeta files and .missionsfs files.\u003Cbr\u003E\nThe .missionsfs files are copies of the .sfs file during mission playthrough that are created at various checkpoints in the mission (currently - at the very start and when vessels are created).\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EPath Structures\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\n\\KSP\\Missions\\* contains all user created missions. One folder for each mission.\u003Cbr\u003E\nInside these folders you will find a .mission file which is the actual mission file itself that is generated in the Mission Builder.\u003Cbr\u003E\nThere will also be a Banners sub-folder which is where you can place your own banners for mission fail, success, and mission play dialog.\u003Cbr\u003E\nThe Ships sub-folder will contain \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E and \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E folders with .craft files. These are where the creator defined craft files are stored for the mission.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen a player plays a mission from the main menu the .mission file is read and a Game save is generated into a .sfs save file which is then saved into the \\KSP\\saves\\missions\\* folder.\u003Cbr\u003E\nWhen a player tests a mission from within the mission builder the .mission file is saved and then re-read and a Game save is generated into a .sfs save file which is then saved into the \\KSP\\saves\\test_missions\\* folder.\n\u003C/p\u003E\n\u003Cp\u003E\nThe saves folders will also contain copies of any craft files that are either creator defined or player defined during the mission playback. These are automatically copied by the mission system when a mission playthrough is started or a mission test session is started.\n\u003C/p\u003E\n\u003Cp\u003E\nEach Mission referenced via the MissionSystem contains a reference to it\u2019s MissionInfo (MissionFileInfo) file.\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EMissionFileInfo Class\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nSimpleMission - returns a copy of the Mission (.mission file) without craft files.\u003Cbr\u003E\nMetaMission - the meta file (.loadmeta) info for the mission.\u003Cbr\u003E\nsavedMission - the saved (.sfs) file for the mission, or null if there isn\u2019t one.\u003Cbr\u003E\nMetaSavedMission - meta file (.loadmeta) for the saved mission if it exists.\n\u003C/p\u003E\n\u003Cp\u003E\nStatic:\u003Cbr\u003E\nCreateFromPath - will create and return a MissionFileInfo instance for any mission found at the supplied input file path.\n\u003C/p\u003E\n\u003Cp\u003E\nThere are a number of other helper methods and properties.\u003Cbr\u003E\nRefer to the API docs on this class for further info.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EDefining Mod nodes.\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nThe mission Builder loads and builds a list of what\u2019s called Basic Node\u2019s (templates populated into MEBasicNode class) for each node available in the mission builder on startup.\u003Cbr\u003E\nThese nodes are the ones listed in the toolbar on the left side of the mission builder.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen creating your own Mod node you need to not only define your mod node in a class/code and compile to a plug-in DLL but you also need to define the Basic Node for the mission builder to make it available to players.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is done by defining a cfg text file that you can place anywhere in GameData.\u003Cbr\u003E\nFor the stock nodes supplied in the Making History expansion these are stored in \\GameData\\SquadExpansion\\MakingHistory\\Nodes folder if you want to refer to some examples.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003EMEBASICNODE fields\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nname - the internal name of the node.\n\u003C/li\u003E\n\u003Cli\u003E\ndisplayName - the localization tag/text that is displayed in the UI to the user for the node.\n\u003C/li\u003E\n\u003Cli\u003E\ndescription - the localization tag/text that is displayed in the UI to the user for the node.\n\u003C/li\u003E\n\u003Cli\u003E\ntooltipDescription - the localization tag/text that is displayed in the UI to the user as a tooltip when hovering over the node in the toolbar.\n\u003C/li\u003E\n\u003Cli\u003E\nisObjective - if true this node is treated by default as an objective node in missions. Mission creators can change a node to be an objective in the SAP. But this defines the default value for the node.\n\u003C/li\u003E\n\u003Cli\u003E\nCategory - this is the category (group) this node belongs to and used to categorize them in the toolbar within the mission builder.\n\u003C/li\u003E\n\u003Cli\u003E\ncategoryDisplayName - The localization tag/text for the category.\n\u003C/li\u003E\n\u003Cli\u003E\niconURL - The URL for the icon for the node that is displayed in the UI.\n\u003C/li\u003E\n\u003Cli\u003E\nactions - the name of an ActionModule (class) attached to this node. You can specify multiple actions = parameters inside the node.\n\u003C/li\u003E\n\u003Cli\u003E\ntests - the name of a TestModule (class) attached to this node. You can specify multiple tests = parameters inside the node.\n\u003C/li\u003E\n\u003Cli\u003E\nSAP_PARAMETERS - this group will have a sub-node (MODULE_PARAMETER) for each parameter that is to be displayed from the module code in the SAP to the mission creator.\n\u003Cul\u003E\n\u003Cli\u003E\nEach MODULE_PARAMETER will have:\n\u003Cul\u003E\n\u003Cli\u003E\nmodule - the class name of the module.\n\u003C/li\u003E\n\u003Cli\u003E\nparameter - the parameter field name (the name of the field in the C# class) of the parameter.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nNODEBODY_PARAMETERS - this group works the same as SAP_PARAMETERS but defines which fields are available/will display in the node body for the node on the misison builder canvas.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EAdding Test Modules\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\n\u00A0\u003Cbr\u003E\nThe Test modules are one of two types of modules that can be attached to a node in the Making History expansion, these modules are used to test certain conditions are true or not and if true the mission system will activate the node that the test module is connected to.\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003ECreating and implementing a basic TestModule\u003C/span\u003E\u003C/strong\u003E\u003Cbr\u003E\nThe following steps will guide us to how to create and implement a custom test module in one of our tests.\u003Cbr\u003E\nThe first step is to create a custom test module class, in our example we are going to create a test module that tests if the active vessel has 2 or more kerbals on-board.\u003Cbr\u003E\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003E1 Create our ActionModule class\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003Cbr\u003E\nTypically when creating custom test modules we need to override the following methods from the TestModule base class:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nAwake: This is the entry point of the TestModule think of this as the constructor is used to set default values and initialize variables.\n\u003C/li\u003E\n\u003Cli\u003E\nInitialize: This method is called when the node is initialized and is used to set up things that may need the MENode (the node this module is a part of) prior to Awake. But always remember to call the base.Initialize first.\n\u003C/li\u003E\n\u003Cli\u003E\nTest: This method is called when the actual node is being tested by the Mission System. If the Test returns true the Mission System will make the node this Test is attached to the active node in the mission.GetInfo: This method returns the description of this node to be displayed in the UI.\n\u003C/li\u003E\n\u003Cli\u003E\nGetAppObjectiveInfo: This method returns a string that is displayed for the test to the mission player in the Missions App when playing the mission.\n\u003C/li\u003E\n\u003Cli\u003E\nGetNodeBodyParameterString: This method receives the field that is going to be displayed in the node body and returns a formatted string with useful information about that field.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-b26de521-bd09-5fc2-fb57-db036d2b94b7\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022r6r4uHeexi6llC7nI5uwje0aPfinS2hbrEtTpe6E\u0022 height=\u0022415\u0022 src=\u0022https://lh4.googleusercontent.com/r6r4uHeexi6llC7nI5uwje0aPfinS2hbrEtTpe6ErLMpdjcJ8dRo_e4IMjqljGTlVcYPZ1J2C4f4-ZmFfhvsSjEnAXjZtJuDY6xmJmDNBezrKAUD62mi4uKGi3c3uxFINNH8A9Oc\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003C/p\u003E\n\u003Ch4 dir=\u0022ltr\u0022 id=\u0022docs-internal-guid-37b934cd-bd09-f37f-0650-36e2ea5fc26e\u0022 style=\u0022line-height:1.714284;margin-top:15pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cem\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003E\u003Cspan style=\u0022font-family: Roboto; color: rgb(102, 102, 102); background-color: transparent; font-weight: 700; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\u0022\u003E2 Add the custom logic to the test\u003C/span\u003E\u003C/span\u003E\u003C/strong\u003E\u003C/em\u003E\n\u003C/h4\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cspan style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003EAfter the class has been created we need to input our new logic into the override methods, so we start with the main functionality and override the Test method to something like this.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cspan style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022eQh5X1sphRARQ9lrI2bxdpUeRMF87KG6wzk5Pfln\u0022 height=\u0022188\u0022 src=\u0022https://lh5.googleusercontent.com/eQh5X1sphRARQ9lrI2bxdpUeRMF87KG6wzk5PflnURI-wV1UgEjP47LmU03-44Y99BRB1Xovt8JM6Z-2jjetGUT93l44PPraoGFKcgMGfE9aQFsKIjU9G71S75qNtgHSEg2Y1oFe\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cspan style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003EThen we modify the other methods to set all the UI for our score system as follows\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-cddbc4f7-bd0a-b61b-e3b5-902c55c32742\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022dnBFuIYUAqGxTGThrGcUwWKIhmY3CIQWsQ3s0cGw\u0022 height=\u0022328\u0022 src=\u0022https://lh6.googleusercontent.com/dnBFuIYUAqGxTGThrGcUwWKIhmY3CIQWsQ3s0cGwNccwclnhyEb0FeftO7ui1XFIj2IzuEhmqUjLTgIlI2-H6ONTmsnjKuOhl5szIV6-krBvqnDR17WxHb1a4gF8SmAq-uObVGfL\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003C/p\u003E\n\u003Ch4 dir=\u0022ltr\u0022 id=\u0022docs-internal-guid-603f4e75-bd0a-ddb3-af6f-33cb2482bd2c\u0022 style=\u0022line-height:1.714284;margin-top:15pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cspan style=\u0022font-size:10.5pt;font-family:Roboto;color:#666666;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E3 Make our custom values persistent in the mission\u003C/span\u003E\n\u003C/h4\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cspan style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003EAs all the other module classes in the expansion this class needs to save and load its values from the mission or savegame cfg file for them to be persistent, so we need to override the Save and Load methods from the IConfigNode interface.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-fff85def-bd0b-0e22-c6ca-bf39a1015823\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022Ch-QjwdSPjkFgXtPd1qzZCTaE4schJ09OHX70OMg\u0022 height=\u0022319\u0022 src=\u0022https://lh4.googleusercontent.com/Ch-QjwdSPjkFgXtPd1qzZCTaE4schJ09OHX70OMgwrxXesg_mqMf3UcApv6ULs9dL-FYZ4knR1jKySWFwMZt0PLxB5TMnnEzG-lpnTBhuCU-ovJ-le9cMeL8Vsg4yKrW9nCUnKF-\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022462\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EAdding Action Modules\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe Action modules are one of two types of modules that can be attached to a node in the Making History expansion, these modules are used to perform actions when the node is executed.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003ECreating and implementing a basic ActionModule\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe following steps will guide us to how to create and implement a custom action module in one of our tests.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003E1 Create our ActionModule class\u003C/span\u003E\u003C/strong\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe first step is to create a custom action module class, in our example we are going to create an action module that send a debug message when triggered.\u003Cbr\u003E\nTypically when creating custom action modules we need to override the following methods from the ActionModule base class:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nAwake: This is the entry point of the ActionModule think of this as the constructor and is used to set default values and initialize variables.\n\u003C/li\u003E\n\u003Cli\u003E\nInitialize: This method is called when the node is initialized and is used to set up things that can only be set when the node is active or that may need the MENode (the node this module is a part of) prior to Awake. \u00A0But always remember to call the base.Initialize first.\n\u003C/li\u003E\n\u003Cli\u003E\nFire: This method is called when the actual node is triggered and the action is going to be performed.\n\u003C/li\u003E\n\u003Cli\u003E\nGetInfo: This method returns the description of this node to be displayed in the UI.\n\u003C/li\u003E\n\u003Cli\u003E\nGetAppObjectiveInfo: This method returns a string that is displayed for the test to the mission player in the Missions App when playing the mission.\n\u003C/li\u003E\n\u003Cli\u003E\nGetNodeBodyParameterString: This method receives the field that is going to be displayed in the node body and returns a formatted string with useful information about that field.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-9d35a093-bd0c-9f8d-ec49-0769570234a6\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022NJt6RAmIFiMqV719p35GdkpQoUJKxS8HyR0wbU1h\u0022 height=\u0022565\u0022 src=\u0022https://lh3.googleusercontent.com/NJt6RAmIFiMqV719p35GdkpQoUJKxS8HyR0wbU1hgrxfOM0EsrOdClLA4_NIPQ73mO_HUEORm0eemDkaBRJCzA8jAlIUPFp2DM4qwznnYhaiAnVmOb_7Wdncm9CzETQ2lyZyDOfS\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003E2 Add the custom logic to the action\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAfter the class was created we need to input our new logic into the override methods, so we start with the main functionality and override the Fire method to something like this.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-94766636-bd0c-c64a-fe7d-4ddd4d09edea\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022VCRumCF8VH0TtJiLEoq1y9QvNgDOySyAYZKd1b8P\u0022 height=\u0022141\u0022 src=\u0022https://lh3.googleusercontent.com/VCRumCF8VH0TtJiLEoq1y9QvNgDOySyAYZKd1b8PtJjg1CarOGtDeSv0wI3pBwZl4w3Km4kvolNfqms95vPoX5QwEWSfd_G_Nyjn4Dl4f2OaYuV6CopyB048arnY57JOuqzpk3YI\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022464\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThen we modify the other methods to set all the UI for our score system as follows\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-cf232da0-bd0c-dffd-ce3f-cccda0368e72\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022bfdcsGqXw5iOK4y6B_d3515UF_tyakzS9ZtvUn8L\u0022 height=\u0022611\u0022 src=\u0022https://lh4.googleusercontent.com/bfdcsGqXw5iOK4y6B_d3515UF_tyakzS9ZtvUn8Lv22wvUXkDaTrjF_bNEw3YTEvdIeIsws8O2LCRT0Zd14tj0hDmotSS50ZI7DH8k0Z9Db-KR12pXDZ54kwQPdcuPxeBMIn236i\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003E3 Make our custom values persistent in the mission\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAs all the other module classes in the expansion this class needs to save and loads its values from the mission or savegame cfg file for them to be persistent, so we need to override the Save and Load methods from the IConfigNode interface.\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-126d7f26-bd0d-1e44-067a-884eb967e232\u0022 style=\u0022font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg alt=\u0022XTAZb6VF8LVma1-fTgm2kjkQtg5k2wOJobNl3a9m\u0022 height=\u0022386\u0022 src=\u0022https://lh5.googleusercontent.com/XTAZb6VF8LVma1-fTgm2kjkQtg5k2wOJobNl3a9mr4VV6s10Jn5by1HIcNkZiwsC95v3Ugk39PRFoW641JyXgWkhDSi1ViiyFp1a8mvq2THJ_PeoNpZ3T8y_jpyeJ8vBGeefpbXY\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022442\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EModding - Part adjusters / failures / repairs\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nPart adjusters can be added/modded and used in all game modes in KSP as long as the Making History expansion is installed. If it is not installed they won\u2019t break KSP but they also will not function (will do nothing).\u003Cbr\u003E\nAdjusters tweak the parameters on a part module. Failures are just more drastic adjusters that break some of the part module functionality. They both use the same framework, so the term adjusters will be used for both in this document.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003ECreating an adjuster or failure\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nA list of all adjusters and failures that we\u2019ve implemented can be found here:\u003Cbr\u003E\u003Ca href=\u0022https://kerbalspaceprogram.com/api/namespace_expansions_1_1_missions_1_1_adjusters.html\u0022 rel=\u0022\u0022\u003Ehttps://kerbalspaceprogram.com/api/namespace_expansions_1_1_missions_1_1_adjusters.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nSubclass the appropriate base class if there is one, such as AdjusterEnginesBase if you\u2019re creating an engine adjuster, otherwise subclass AdjusterPartModuleBase.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you don\u2019t want your adjuster to be added to the list visible in the mission builder (because it\u2019s the parent class for a bunch of other adjusters for example), make it abstract. The list is populated automatically and will skip abstract classes.\n\u003C/p\u003E\n\u003Cp\u003E\nTo control the data that\u2019s displayed in the SAP that allows users of the mission builder to customise the adjuster, you can use attributes on your fields. Look at the child classes of MEGUI_Control for the ones that will work for adjusters. They are listed here:\u003Cbr\u003E\u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_expansions_1_1_missions_1_1_editor_1_1_m_e_g_u_i___control.html\u0022 rel=\u0022\u0022\u003Ehttps://kerbalspaceprogram.com/api/class_expansions_1_1_missions_1_1_editor_1_1_m_e_g_u_i___control.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe fields disableKSPActions, disableKSPEvents, disableKSPFields will disable each of those display types in the Parts Action Window when the adjuster/failure is activated. Set them in the constructor.\u003Cbr\u003E\nThe field canBeRepaired is used to allow the player to repair the failure with a kerbal. If it\u2019s set to false, then only the mission creator can repair the failure with a repair action node. Set the default in the constructor.\u003Cbr\u003E\nOverride the GetTargetPartModule() method and return the type of the class that will work with the failure. So for example, return typeof(ModuleEngines) if the adjuster modifies the engines. (If you\u2019re subclassing one of our base classes apart from AdjusterPartModuleBase, then you can ignore this because they do this already.)\u003Cbr\u003E\nUse the Activate() method to perform any one-time processing that must be done when the adjuster is added to the part module. Also, make sure to call UpdateStatusMessage() to set the status message that will appear in the Parts Action Window. It will appear even if you\u0027ve turned off the rest of the PAW displays.\u003Cbr\u003E\nIf you want to modify some part parameters every frame, please keep in mind that adjusters can stack. Implementing a type of update that will allow several adjusters to operate together at the same time is highly recommended, so multiply numbers instead of setting them to specific numbers for example.\u003Cbr\u003E\nDon\u2019t forget to override the Save() and Load() functions!\u003Cbr\u003E\nIf you\u2019re implementing adjusters for your PartModules, OnModuleAdjusterAdded() will be called when an adjuster is added and OnModuleAdjusterRemoved() will be called when one is removed.\u003Cbr\u003E\nAdjusters will be added to part modules through the part failure node, but to manually add an adjuster to a part module, call PartModule.AddPartModuleAdjuster().\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003ERepairs\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nRepairs work by removing the adjuster from the list of adjusters acting on the part module.\u003Cbr\u003E\nAdjusters will be removed from part modules through the part repair node, but to manually remove an adjuster from a part module, call PartModule.RemovePartModuleAdjuster().\u003Cbr\u003E\nThe Deactivate() method will be called on the adjuster when it is removed. Use this to fix all of the failures that you caused when it was added!\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003EScoring and Objectives\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe score system allows the mission to implement multiple criteria and customization to how the score awarded during the mission.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003EHow does it work?\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe MissionScore class is the main class of the score system, it handles how many score systems are available and which ones are currently active in the active node.\n\u003C/p\u003E\n\u003Cp\u003E\nEach score module inherits from the ScoreModule class, this class is similar to the TestModule or ActionModule classes and contains default methods to interface the system, the principal method is AwardScore this method receives the current mission score and then returns the modified value, this method is called on each of the active score systems by the MissionSystem when the action is executed.\n\u003C/p\u003E\n\u003Cp\u003E\nTo add new score modules we need to create our own ScoreModule classes that will handle how the score is awarded and add them to the global score systems. These are defined as an static list in the MissionScore class and can be expanded by mods.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003ECreating and implementing a basic ScoreModule\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E1 Create our ScoreModule class\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe first step is to create a custom score module class, in our example we are going to create a score module that awards you a higher score based on how many parts your vessel has..\u003Cbr\u003E\nTypically when creating custom score modules we need to override the following methods from the ScoreModule base class:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nGetDisplaName: Returns the UI display name of the ScoreModule this is value is displayed in the SAP control.\n\u003C/li\u003E\n\u003Cli\u003E\nAwardScore: This method receives the current mission score and returns the new mission score to be applied.\n\u003C/li\u003E\n\u003Cli\u003E\nScoreDescription: This method returns a string with the description of what this score module does to be displayed at the end mission summary or the score summary in the mission briefing dialog.\n\u003C/li\u003E\n\u003Cli\u003E\nGetDefaultPinnedParameters: This method returns a list of field names within this class that want to be pinnable in the SAP to be displayed in the node body.\n\u003C/li\u003E\n\u003Cli\u003E\nGetNodeBodyParameterString: This method receives the field that is going to be displayed in the node body and returns a formatted string with useful information about that field.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-e6bc52c5-bd10-c157-61b6-ddd6365aa1d4\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022492\u0022 src=\u0022https://lh5.googleusercontent.com/WZv7qT5MnR0PTvpCZi647C6tMWGCpKmodNRDU-PzjbENCn7OdKJ2yv-l_Zxrx-KHQIp1M7Vz2JIPYV5xYxRObO_e2zA8cRYDQEA2pQ8NHAkn2vgHfx_yvxH04ZvZ9hmnUoIznlJ0\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022561\u0022 alt=\u0022WZv7qT5MnR0PTvpCZi647C6tMWGCpKmodNRDU-Pz\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E2 Add the custom logic to change the score\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAfter the class is created we need to input our new logic into the override methods, so we start with the main functionality and override the AwardScore method to something like this.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-b41db586-bd11-25d2-0a11-108921c3df01\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022131\u0022 src=\u0022https://lh4.googleusercontent.com/cqkJjVKQ7YUa1cr4hxKNXhz5i5_IBNSEZ6xreXE1seMNRxBZFhWOxObFJV4WzBvqj0gnz1vadj5jp4JpqeXro7g7xKjffJz6VpauEqyMZ8bLdgqOg9Iq6566Ieb9j9YnhqIvTnb4\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022 alt=\u0022cqkJjVKQ7YUa1cr4hxKNXhz5i5_IBNSEZ6xreXE1\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThen we modify the other methods to set all the UI for our score system as follows\n\u003C/p\u003E\n\u003Cp dir=\u0022ltr\u0022 style=\u0022line-height:1.38;margin-top:8pt;margin-bottom:0pt;background-color:#ffffff;\u0022\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-82002197-bd11-6482-23bf-5d6a7c1bc6c1\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022465\u0022 src=\u0022https://lh3.googleusercontent.com/VbcWklRz5fLOfayh7rSyYysg__QhDv5Xpkd-rmolQE8qKQ8UbmL1dRrquAiVXOi-UdNFxVWxUFNfDzqNx_NT5MwoxpYxc87zoFIohe3E_1Nr2Rae0W7OYwhhdKOX6723BOnl3r5k\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022 alt=\u0022VbcWklRz5fLOfayh7rSyYysg__QhDv5Xpkd-rmol\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E3 Make our custom values persistent in the mission\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAs all the other modules class in the expansion this class needs to save and loads its values from the mission or savegame cfg file for them to be persistent, so we need to override the Save and Load methods from the IConfigNode interface.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-4e152f42-bd11-b572-6f8f-bea1bc19c829\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022283\u0022 src=\u0022https://lh4.googleusercontent.com/Zd7f7pJa9SJKU-0RhWVYf_Mb09xNBLFdvfIElA2v2uNZM7e0l0JnrPvsrTwGoCg-pCdmYL-_c9oNiWRep3Xb1buOUl3k5DfwO68n3xz6T2Oa8UuO7dwET-YuLEpPybr9PrcIphBn\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022451\u0022 alt=\u0022Zd7f7pJa9SJKU-0RhWVYf_Mb09xNBLFdvfIElA2v\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E4 Register the new ScoreModule\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow as a final step we need to register the new score module to the list of global score modules, to do that we need to call the static method of the MissionScore class AwardedScoreDescription.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-a7b00b9c-bd12-0ba9-5e35-a443141e63a3\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u002247\u0022 src=\u0022https://lh6.googleusercontent.com/JMqhuw8uI4xpov9G8S7Dof_hnwCauHVPx6F-TMq-0C20JwAa-zwUJRRYAxTRXhjJ1D89PSElhac_0rh6ovi9aNrjc_IZvSNvTqSO1qJaHDfLNdTRR3x02lx-YdLB1Z7WBg_jWTKT\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022463\u0022 alt=\u0022JMqhuw8uI4xpov9G8S7Dof_hnwCauHVPx6F-TMq-\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003EUse it in game\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow the score module should be visible in game like this in any of the score nodes\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-9f05fe69-bd12-6791-211f-50e941a070fc\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022253\u0022 src=\u0022https://lh4.googleusercontent.com/1djREiIasa8W7oNObJjqZbpzisorJ66AtDloxya50zujd0StK5waeAidW89ZYo_lqGKdMRU3NLxo-BVEKoUizfLmHYTAFVWLuNlx_RnkHEoKtrWhGmy5Nw6As1-cobYFqvdC0PIu\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022 alt=\u00221djREiIasa8W7oNObJjqZbpzisorJ66AtDloxya5\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cmeta charset=\u0022utf-8\u0022\u003E\u003Cspan id=\u0022docs-internal-guid-e50d6bc4-bd12-7960-dc99-18b75743efd4\u0022 style=\u0022font-size:10.5pt;font-family:Roboto;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\u0022\u003E\u003Cimg height=\u0022212\u0022 src=\u0022https://lh3.googleusercontent.com/2lXqoEtDnj2e9BCWcENwdHfGIa8GAltZCLOcL3B3L95nF4qpyYoEjPa_DwcK0WXe4M90lAVsZQf9CE5UTweiD5Gm9aew6SZyYkjxyMB2XXxzFkhwjRyM0RX24qNmr4frn4IIia3g\u0022 style=\u0022border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\u0022 width=\u0022602\u0022 alt=\u00222lXqoEtDnj2e9BCWcENwdHfGIa8GAltZCLOcL3B3\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:20px;\u0022\u003ELaunchsites\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWith the Making History DLC it is possible to add launchsites into the stock game.\u003Cbr\u003E\nMaking History adds several new stock launchsites to the base game and these launchsites are available in all game modes as long as the Making History Expansion is installed.\u003Cbr\u003E\nMods are also able to add launchsites to the game that will function in all game modes\u003Cstrong\u003E as long as the Making History Expansion is installed (if it is not installed, they will not be availlable or functional).\u003C/strong\u003E\u003Cbr\u003E\nIt is also possible to add mod launchsites to missions as well by defining a launchsite and adding a basic node configuration to the game.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is all controlled via the PSystemSetup class. Once you have met the prerequisites and written a plug-in to add your launchsite into the game it will automatically appear in the list of launchsites in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E/\u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E and the vessel launch dialogs when clicking the Runway and LaunchPad in the \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E scene.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-size:16px;\u0022\u003EPSystemSetup class\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nProperties:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nStockLaunchSites - an array of the stock launchsites available in any game mode. Mods cannot add to this list.\n\u003C/li\u003E\n\u003Cli\u003E\nNonStockLaunchSites - an array of non stock launchsites - this includes mission placeable launchsites during mission play, but also contains mod launchsites added in any game mode. \u003Cem\u003ENB: You cannot change this array directly, rather you add launchsites using the methods below.\u003C/em\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nLaunchSites - a list of all LaunchSites currently in the game.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\nMethods:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nIsStockLaunchSite - can be called to determine if a launchsite (by name) is stock or non stock.\n\u003C/li\u003E\n\u003Cli\u003E\nRemoveNonStockLaunchSites - as the name implies - it will remove ALL non stock launchsites.\n\u003C/li\u003E\n\u003Cli\u003E\nGetLaunchSite - find and return a launchsite by name.\n\u003C/li\u003E\n\u003Cli\u003E\nGetLaunchSiteBody - return the CelestialBody a launchsite is situated on (by name).\n\u003C/li\u003E\n\u003Cli\u003E\nGetLaunchSiteBodyName - return the CelestialBody name a launchsite is situated on (by name).\n\u003C/li\u003E\n\u003Cli\u003E\nGetLaunchSiteBodyDisplayName - return the CelestialBody display name (localized) a launchsite is situated on (by name).\n\u003C/li\u003E\n\u003Cli\u003E\nAddLaunchSite - Add a launchsite into the game. (See below on what is required before you can call this).\n\u003C/li\u003E\n\u003Cli\u003E\nRemoveLaunchSite - Remove a launchsite from the game.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-size:16px;\u0022\u003EHow to add a LaunchSite into KSP with Making History Expansion installed.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nPre-requisites:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nA launchsite model. This document will not go into the details of how to get your model into the game. But this is possible to do (not as a part) using asset bundles or you can create a mu file for your model which the GameDatabase will load as a model (no cfg file) and you can then get the model from GameDatabase and instantiate an instance.\n\u003C/li\u003E\n\u003Cli\u003E\nThe model instance must have a PQSCity2 component. - you will have to add this component using plug-in code and define the necessary variables for this class. See the API docs for this class.\n\u003C/li\u003E\n\u003Cli\u003E\nThe model must have spawn point reference transform/s. (At least one). This is a transform where launched vessels will be spawned on the model.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\nAdding:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nOnce you have your model and it\u0027s instance setup you need to define the LaunchSite class by creating a new LaunchSite instance using it\u0027s constructor and then passing it into PsystemSetup.Instance.AddLaunchSite method.\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\nTo construct a LaunchSite class you need the following variables:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nThe internal Name of the LaunchSite, should contain no special characters or spaces.\n\u003C/li\u003E\n\u003Cli\u003E\nThe PQS Name the LaunchSite is on.\n\u003C/li\u003E\n\u003Cli\u003E\nThe Name of the LaunchSite (displayed/localized name).\n\u003C/li\u003E\n\u003Cli\u003E\nThe SpawnPoints array for the LaunchSite - you will need to create an array of LaunchSite.SpawnPoints[] that have been setup appropriately. See the API docs for the LaunchSite class.\n\u003C/li\u003E\n\u003Cli\u003E\nThe URL for the launch Site transform from the PQS down it\u0027s children path.\n\u003C/li\u003E\n\u003Cli\u003E\nThe Editor Facility the launch site is associated with.\n\u003C/li\u003E\n\u003C/ul\u003E\n"}]}