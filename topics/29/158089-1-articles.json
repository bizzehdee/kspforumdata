{"TopicId":158089,"ForumId":29,"TopicTitle":"Setting a Landing Location Marker OR ~TeLePoRtAtIoN~","CreatedByName":"Tompete Kerman","CreatedById":157671,"CreatedDateTime":"2017-03-23T02:26:23Z","PageNum":1,"Articles":[{"CreatedByName":"Tompete Kerman","CreatedById":157671,"CreatedDateTime":"2017-03-23T02:26:23Z","Content":"\n\u003Cp\u003E\nHey ebrybody, I was wondering if anyone could help enlighten me as to how to go about being able to select/set a location on a body you\u0027re orbiting, akin to how MechJeb handles it\u0027s landing autopilot. I guess the crux of the issue I\u0027m having is that I don\u0027t understand how to translate the cursors position on the screen into a position on a planet in the game? Maybe if I explain what I\u0027ve got planned, it might spur someone to comment. My goal is to make a Star-Trek-esque Transporter system, for close-range inter-craft crew/resource\u00A0transfers without docking, but also to be able to beam people down and up from a planets surface to a ship waiting overhead in orbit. I\u0027ve got a few ideas on how to potentially handle a lot of the tricks involved in that, except for setting a target on the planets surface. I could, in theory, just make a part that\u0027s a \u0022Transporter Beacon\u0022 or make a 1.25m \u0022Transporter Pod\u0022 but I kind of like the idea and challenge of making it so that I can put Kerbals down anywhere and pick them up anywhere. I\u0027m considering making two variants of the system, as well. One would work as long as the kerbal and the craft have line of sight and are within a certain distance, yet would be larger, heavier, and potentially take more time to transfer, while the other would be a smaller \u0022directional\u0022 model that would use a system akin to ScanSat in order to project a cone down to it\u0027s orbiting body, and would only be able to beam up/down from within that cone. That could be useful to build a small \u0022orbital collector\u0022 satellite that passes over automated mining platforms and beams up the ore so that a vessel can come by and pick it up without having to descend into orbit. But anyways, enough about what I plan to do with it, if anyone can point me in the right direction on how to get to the bottom of this, I\u0027d be extremely grateful.\n\u003C/p\u003E\n"},{"CreatedByName":"steedcrugeon","CreatedById":168050,"CreatedDateTime":"2017-03-31T13:34:49Z","Content":"\n\u003Cp\u003E\nI would imagine it is conceivable to \u0027teleport\u0027 kerbals between two crew capable parts within physics range. You should look at manipulating how the standard crew transfer works (ie; it relies on the existing parts being connected or docked).\n\u003C/p\u003E\n\u003Cp\u003E\nIf you were to make your own custom module for a part to have it could go something like this:\n\u003C/p\u003E\n\u003Cp\u003E\nMun Base Alpha has part; \u0022teleportal station\u0022\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EPART \n{ \n \t// --- general parameters --- \n \tname = teleportalStation \n \tmodule = Part \n \tauthor = Tompete Kerman \n \n \t// --- asset parameters --- \n\tmodel = model.mu \n \trescaleFactor = 1 \n \n \t// --- node definitions --- \n \tnode_stack_top = 0.0, 1.3275, 0.0, 0.0, 1.0, 0.0, 0 \n \tnode_stack_bottom = 0.0, -0.7425, 0.0, 0.0, -1.0, 0.0, 0 \n \tnode_stack_door = 0.0, 0.41, 0.35, 0.0, 0.0, 1.0, 0 \n \tnode_attach = 0.0, 0.2, 0.32, 0.0, 0.0, -1.0, 0 \n\n\t// --- gameplay tweak ---\n \n \tCoLOffset = 0.0, -0.35, 0.0 \n \tCoPOffset = 0.0, 0.5, 0.0 \n \t \n \tbuoyancy = 1.59 \n \n \t// --- editor parameters --- \n \tCrewCapacity = 4\n \tTechRequired = SuperCleverStuff\n \tentryCost = 90000 \n\tcost = 24500 \n \tcategory = Utility \n \tsubcategory = 0 \n \ttitle = Teleportal Station \n \tmanufacturer = The Really Klever Works Group\n \tdescription = The teleportal station allows for the transmission and receiving of kerbals via the Kur Band of the KRF Spektrum\n \t \n \t// --- attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision \n \tattachRules = 1,1,1,1,0 \n \n \n \t// --- standard part parameters --- \n \tmass = 2 \n \tdragModelType = default \n \tmaximum_drag = 0.2 \n \tminimum_drag = 0.3 \n \tangularDrag = 2 \n \tcrashTolerance = 8 \n \tbreakingForce = 200 \n \tbreakingTorque = 200 \n \tmaxTemp = 1100 \n \tfuelCrossFeed = true \n \tskinMaxTemp = 1500 \n \t \n \tbulkheadProfiles = size2 \n \ttags = base cabin (can outpost passenger statio tour tuna \n \n// --- Part Modules ---\n\nINTERNAL \n{ \n\tname = teleportStationInt \n} \n\nMODULE\n{\n\tname = ModuleTeleportal\t\t\t// the custom model name\n\ttransmitMethod = duplex\t\t\t// the ability of the transporter to send and received (duplex send both ways, txOnly send only, rxOnly recieve only)\n\tchargeRequired = 1500\t\t\t// the amount of EC rquired to process the teleporting of one kerbal\n\tteleportCycleTime = 15\t\t\t// time (in seconds) required for teleportal to be in range\n}\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nMun Transport Vessel Echo has part; \u0022teleportal bay\u0022\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EPART \n{ \n \t// --- general parameters --- \n \tname = teleportalBay1\n \tmodule = Part \n \tauthor = Tompete Kerman \n \n \t// --- asset parameters --- \n\tmodel = model.mu \n \trescaleFactor = 1 \n \n \t// --- node definitions --- \n \tnode_stack_top = 0.0, 1.3275, 0.0, 0.0, 1.0, 0.0, 0 \n \tnode_stack_bottom = 0.0, -0.7425, 0.0, 0.0, -1.0, 0.0, 0 \n \tnode_stack_door = 0.0, 0.41, 0.35, 0.0, 0.0, 1.0, 0 \n \tnode_attach = 0.0, 0.2, 0.32, 0.0, 0.0, -1.0, 0 \n\n\t// --- gameplay tweak ---\n \n \tCoLOffset = 0.0, -0.35, 0.0 \n \tCoPOffset = 0.0, 0.5, 0.0 \n \t \n \tbuoyancy = 1.59 \n \n \t// --- editor parameters --- \n \tCrewCapacity = 1\n \tTechRequired = SuperCleverStuff\n \tentryCost = 45000 \n\tcost = 10500 \n \tcategory = Utility \n \tsubcategory = 0 \n \ttitle = Teleportal Test Bay \n \tmanufacturer = The Really Klever Works Group\n \tdescription = The Teleportal Test Bay allows for the transmission one kerbal at a time via the Kur Band of the KRF Spektrum.\n \t \n \t// --- attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision \n \tattachRules = 1,1,1,1,0 \n \n \n \t// --- standard part parameters --- \n \tmass = 0.875 \n \tdragModelType = default \n \tmaximum_drag = 0.2 \n \tminimum_drag = 0.3 \n \tangularDrag = 2 \n \tcrashTolerance = 8 \n \tbreakingForce = 200 \n \tbreakingTorque = 200 \n \tmaxTemp = 1100 \n \tfuelCrossFeed = true \n \tskinMaxTemp = 1500 \n \t \n \tbulkheadProfiles = size1 \n \ttags = base cabin (can outpost passenger statio tour tuna \n \n// --- Part Modules ---\n\nINTERNAL \n{ \n\tname = teleportBay1Int\n} \n\nMODULE\n{\n\tname = ModuleTeleportal\t\t\t// the custom model name\n\ttransmitMethod = txOnly\t\t\t// the ability of the transporter to send and received (duplex send and recieve, txOnly send only, rxOnly recieve only)\n\tchargeRequired = 1500\t\t\t// the amount of EC required to teleport one kerbal to the recieving part\n\tteleportCycleTime = 15\t\t\t// time (in seconds) required for teleportal to be in range\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nNot sure how you would go about coding this but how I would see it being done is that both parts need to be in the active physics bubble. The receiving part needs to be in side this bubble for the duration of the \u0027teleportCycleTime\u0027 [the rationale behind this is the earlier on the tech tree parts need to be in range for longer and as the technology increases the ability for the teleporters to transmit kerbals increases, so the time on the part goes down]. You could either write it so that if the part does not stay in range for the duration of the required time then the teleport fails and the kerbals doesn\u0027t go or the teleport fails and the kerbal is lost. The same could be done for the EC requirement.\n\u003C/p\u003E\n\u003Cp\u003E\nThe \u0027transmitMethod\u0027 is what determines whether your part is send, receive or both. That way bases or larger vessels can have teleporters that can go to and from locations, and you could have smaller purpose made parts like receiving pads (imagine dumping a tiny probe on the surface and then beaming down from the passing vessel). Earlier parts I the tech tree (size1 bits for stations or vessels) may only be capable of doing one thing so you could end up with a teleport only part on a vessel (ideal for one way trips or drop-off when going onwards to another location) or perhaps have a receiving pad on one of of the station and the transmitting pad at the other.\n\u003C/p\u003E\n\u003Cp\u003E\nUltimately these are just ideas and unfortunately I am still not conversant enough with writing plugins to be able to help with that. The physics range limit is not particularly helpful I admit but I\u00A0do not know of a clever way to magic the kerbals to a \u0027limbo area\u0027 while you swap between the orbital vessel and the surface base. either way I feel that despite the futuristicness of this idea there should be some sort of range limitation. If I was clever enough I would suggest that the connectivity of the two parts would be driven by whether or not you can actually make a\u00A0CommNet style connection with the target vessel/base but that is way beyond me.\n\u003C/p\u003E\n"},{"CreatedByName":"ShotgunNinja","CreatedById":159391,"CreatedDateTime":"2017-04-28T22:41:53Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222994351\u0022 data-ipsquote-contentid=\u0022158089\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221490235983\u0022 data-ipsquote-userid=\u0022157671\u0022 data-ipsquote-username=\u0022Tompete Kerman\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 3/23/2017 at 3:26 AM, Tompete Kerman said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nhow to translate the cursors position on the screen into a position on a planet in the game\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFirst, you determine the NEAR PLANE properties.\u003Cbr\u003E\nThen convert pixel coordinates of clicked point to a specific point on the NEAR PLANE (and by extension, its coordinate in world-space).\u003Cbr\u003E\nLet\u0027s call this point Q.\n\u003C/p\u003E\n\u003Cp\u003E\nThen you create a normalized vector from EYE (camera pos) to Q. This is the LOOK vector at clicked position.\n\u003C/p\u003E\n\u003Cp\u003E\nTaking EYE, and the LOOK vector previously determined, raytrace the sphere representing the celestial body\u003Cbr\u003E\nand determine the HIT POINT on its surface. Some code follow (in GLSL, but you can port it easily):\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022com\u0022\u003E// calculate hit point of the ray indicated by origin \u002B direction * t with the sphere centered at 0,0,0 and with radius \u0027radius\u0027\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// operate in sphere object space, so the origin must be translated by -sphere_pos\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// if there is no hit the result in start-end is undefined and the function return false\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// it there is an hit the result in start-end contain distance from origin to the hit points\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E raytrace_sphere\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econst\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vec3 origin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econst\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vec3 direction\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econst\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E radius\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E out \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E start\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E out \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E end\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E A \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E dot\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Edirection\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E direction\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E B \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2.0\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E dot\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Edirection\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E origin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E C \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E dot\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eorigin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E origin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E radius \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E radius\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E discriminant \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E B \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E B \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E4.0\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E A \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E C\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// ray missed the sphere (we consider single hits as misses)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ediscriminant \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Efalse\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E q \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EB \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sign\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EB\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sqrt\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ediscriminant\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E))\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.5\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t0 \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E q \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E/\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E A\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t1 \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E C \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E/\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E q\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  start \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E min\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Et0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  end \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E max\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Et0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  start \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E max\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E start\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  end \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E max\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E end\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nThe function above return the distance from EYE to the hit point.\u00A0Let\u0027s call this value DIST.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, finally, the world-space position of the point on the body surface under the clicked mouse position is:\u003Cbr\u003E\n\u00A0 \u003Cstrong\u003EEYE \u002B LOOK * DIST\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThat point can be converted to lat/long using the utility functions in CelestialBody.\n\u003C/p\u003E\n\u003Cp\u003E\nHave fun.\n\u003C/p\u003E\n"}]}