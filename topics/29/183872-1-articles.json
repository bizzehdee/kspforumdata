{"TopicId":183872,"ForumId":29,"TopicTitle":"Is System.Reflection.Assembly.GetTypes() failing for other modders in KSP 1.7?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-04-20T10:17:14Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-04-20T10:17:15Z","Content":"\n\u003Cp\u003E\nHere\u0027s the long github issue I wrote about this: \u003Ca href=\u0022https://github.com/KSP-KOS/KOS/issues/2491\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KSP-KOS/KOS/issues/2491\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWhat I\u0027m basically asking is this - do\u00A0 any other plugin writers out there use the System.Reflection.Assembly.GetTypes() call, and are you having it barf on you with an exception just like I am, starting in KSP 1.7 when it didn\u0027t happen in KSP 1.6?\u003Cbr\u003E\u003Cbr\u003E\nThe issue linked to above gives the long winded details of the issue.\u00A0 I just wanted to see if others have the same problem, because I am noticing other mods in the output_log also throwing exceptions trying to call GetTypes().\u00A0 It\u0027s as if when the problem happens, then it fails for everyone else too.\u00A0 (Or at least a lot of other people not just me).\n\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2019-04-20T13:27:26Z","Content":"\n\u003Cp\u003E\nThis kind of error can be a real PITA to debug, but in this case it\u0027s correct. The specific problem (at least, in my test bench of just downloading \u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E 1.2 \u002B current version of KOS) is that SaveUpgradePipeline.\u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E.PatchFilesProcessor fails to load. This happens because it doesn\u0027t implement an abstract method. Between 1.6 and 1.7, UpgradeScript.OnUpgrade\u0027s signature changed.\n\u003C/p\u003E\n\u003Cp\u003E\nI didn\u0027t check that other mod you mentioned but I imagine something similar is going on. I don\u0027t think there\u0027s a 1.7 version of \u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E yet or else this would be caught already\n\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-04-20T18:44:02Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223587048\u0022 data-ipsquote-contentid=\u0022183872\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555766846\u0022 data-ipsquote-userid=\u002275857\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, xEvilReeperx said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis kind of error can be a real PITA to debug, but in this case it\u0027s correct. The specific problem (at least, in my test bench of just downloading \u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E 1.2 \u002B current version of KOS) is that SaveUpgradePipeline.\u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E.PatchFilesProcessor fails to load. This happens because it doesn\u0027t implement an abstract method. Between 1.6 and 1.7, UpgradeScript.OnUpgrade\u0027s signature changed.\n\u003C/p\u003E\n\u003Cp\u003E\nI didn\u0027t check that other mod you mentioned but I imagine something similar is going on. I don\u0027t think there\u0027s a 1.7 version of \u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E yet or else this would be caught already\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s as if the system is contradicting itself, by saying, \u0022that class is doesn\u0027t exist, so I can\u0027t include it in GetTypes()\u0022 and \u0022that class exists, so I will include it in GetTypes()\u0022 at the same time.\u00A0 If it doesn\u0027t exist, then why is GetTypes() including it and therefore bombing out?\n\u003C/p\u003E\n\u003Cp\u003E\nIs there any set of flags, or another call I can use, that tells the system, \u0022When I say GetTypes(), what I meant was the ones that are really there.\u00A0 Get me the Types that you actually loaded.\u00A0 If 1000 classes were attempted to be loaded, but 1 of them failed to load, then fine, at least let me see the other 999 of them.\u0022\u003Cbr\u003E\u003Cbr\u003E\nI feel like I\u0027m still going to want to protect myself from this in the future, even if \u003Cabbr title=\u0022Kerbal Attachment System (mod)\u0022\u003EKAS\u003C/abbr\u003E and Wind Tunnel get a 1.7 upgrade to fix this one instance of the problem.\u00A0 I wasted a lot of my own time debugging a problem that wasn\u0027t \u0022mine\u0022 to fix, it turns out.\u00A0 If I cannot find a better version of what GetTypes() does that actually executes it safely, then I\u0027ll just have to trap the exception and issue a message to the user along the lines of \u0022Some Mod, which might be kOS or might be some other mod, I can\u0027t tell which, has tried to load a class and it failed.\u00A0 This is going to break kOS, but kOS can\u0027t fix it - check your error log for the first exception that looks like this: ....... and remove the mod it\u0027s talking about.\u0022\u003Cbr\u003E\u003Cbr\u003E\nThe bettter solution (but much uglier) would be to have a safe way to query all the type names that GetTypes() *wants* to return, in a fashion that won\u0027t break, and then try accessing them one at a time with a try/catch wrapper around each attempt, so that when the attempt fails I can at least report which class it is that\u0027s causing it, rather than just having GetTypes() in general fail overall.\n\u003C/p\u003E\n"},{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-20T18:54:38Z","Content":"\n\u003Cp\u003E\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.gettypes?view=netframework-4.8\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.gettypes?view=netframework-3.5\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nYou could just catch \u003Cspan\u003E\u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.reflection.reflectiontypeloadexception?view=netframework-4.8\u0022 rel=\u0022external nofollow\u0022\u003EReflectionTypeLoadException\u003C/a\u003E\u003C/span\u003E\u00A0 and loop trough its Types property ignoring null values to get all loaded Types.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-04-20T18:58:53Z\u0022 title=\u002204/20/2019 06:58  PM\u0022 data-short=\u00225 yr\u0022\u003EApril 20, 2019\u003C/time\u003E by dkavolis\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-04-20T19:07:29Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223587150\u0022 data-ipsquote-contentid=\u0022183872\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555786478\u0022 data-ipsquote-userid=\u0022192697\u0022 data-ipsquote-username=\u0022dkavolis\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 minutes ago, dkavolis said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.gettypes?view=netframework-4.8\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.gettypes?view=netframework-3.5\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nYou could just catch \u003Cspan\u003E\u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.reflection.reflectiontypeloadexception?view=netframework-4.8\u0022 rel=\u0022external nofollow\u0022\u003EReflectionTypeLoadException\u003C/a\u003E\u003C/span\u003E\u00A0 and loop trough its Types property ignoring null values to get all loaded assemblies.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOkay I\u0027ve *never* seen an exception work that way before, ever.\u00A0 So basically, its saying the exception didn\u0027t interrupt the program flow at all, and GetTypes() continued doing the rest of its work on the other classes before it finished.\u00A0 It still built the rest of the list.\u00A0 You just have to look inside the exception to find it, since it didn\u0027t return in the normal fashion.\u00A0 That\u0027s utterly bizarre way to use an exception but at least it\u0027s a workaround.\u00A0 (It\u0027s weird to me because it\u0027s basically using an exception for something that\u0027s a mere warning, rather than using it for an error that actually broke program flow.)\n\u003C/p\u003E\n"},{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-20T19:11:46Z","Content":"\n\u003Cp\u003E\nIt\u0027s probably done to get the developers attention in case there were any errors during loading, otherwise you might not even notice and assume everything works as it should. And later you get an error in another place due to some types not loaded and wonder what went wrong. I\u0027m sure Microsoft had good reasons to do it this way.\n\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-04-20T19:42:50Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223587160\u0022 data-ipsquote-contentid=\u0022183872\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555787506\u0022 data-ipsquote-userid=\u0022192697\u0022 data-ipsquote-username=\u0022dkavolis\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 minutes ago, dkavolis said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt\u0027s probably done to get the developers attention in case there were any errors during loading, otherwise you might not even notice and assume everything works as it should. And later you get an error in another place due to some types not loaded and wonder what went wrong. I\u0027m sure Microsoft had good reasons to do it this way.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nMicrosoft has bizarre alien ways of thinking.\u00A0 I find their techniques a weird random hodgepodge.\u00A0 It would seem more intuitive that if the actual error occurs at the time the DLL is loaded, then that\u0027s when to have an exception to get a developer\u0027s attention, and if that exception is caught and ignored by the dev, then from then on make GetTypes() just return the classes that really exist, or have it be considered normal for it to be populated with some incomplete Types that have some kind of \u0022loaded = false\u0022 flag on them that you have to protect around (or a bitflag set of options to GetTypes, as is common in other reflection calls, one of which explicitly says \u0022only get the ones that are loaded, please\u0022.)\u00A0\u00A0 There\u0027s other ways to do it that wouldn\u0027t have had this weird \u0022If there\u0027s a warning it still works anyway but you have to retrieve the return value from\u00A0 *over there* instead of where it belongs.\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nAnyway, thanks for the information.\u00A0 It makes the problem fixable.\n\u003C/p\u003E\n"}]}