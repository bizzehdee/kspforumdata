{"TopicId":75196,"ForumId":29,"TopicTitle":"Position Vessel loaded from ProtoVessel","CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-16T09:45:09Z","PageNum":1,"Articles":[{"CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-16T09:45:09Z","Content":"\n\u003Cp\u003EI\u0027m working on a plugin in which I need to \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Espawn a Vessel from a previously saved ProtoVessel\u003C/span\u003E, but \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Ewith the new orbit position and rotation\u003C/span\u003E.\u003C/p\u003E\u003Cp\u003EI\u0027ve tired to change these parameters on a spawned vessel with no effect: position and rotation stay the same as they were in the protovessel, no matter what.\u003C/p\u003E\u003Cp\u003EIf I try to set them on the protovessel itself, position is set correctly, but rotation, when I load the protovessel, changes again in a pattern I cannot understand.\u003C/p\u003E\u003Cp\u003ECould anyone explain to me how to correctly set the precise position-rotation-orbit of a vessel? Any help is highly appreciated!\u003C/p\u003E\n"},{"CreatedByName":"Yilmas","CreatedById":83246,"CreatedDateTime":"2014-06-20T20:01:12Z","Content":"\n\u003Cp\u003EYou shouldn\u0027t need to set the rotation directly... Have a look at Orbit and OrbitDriver... \u003C/p\u003E\u003Cp\u003ESet the orbit and use:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Evessel.orbitDriver.pos = vessel.orbit.pos.xzy;\u003Cbr\u003Evessel.orbitDriver.vel = vessel.orbit.vel;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-20T21:58:44Z","Content":"\n\u003Cp\u003EThanks, I\u0027ll look into it.\u003C/p\u003E\u003Cp\u003EYet, this sets the position and velocity, not the rotation. But I also need to tell the vessel where is FRONT and where is UP.\u003C/p\u003E\n"},{"CreatedByName":"Yilmas","CreatedById":83246,"CreatedDateTime":"2014-06-21T07:55:38Z","Content":"\n\u003Cp\u003ERather than telling it directly where to look, I recommend you to mess around with the orbit of the vessel, when setting an orbit for a vessel, you automatically set its position and rotation...\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Orbital_inclination#mediaviewer/File:Orbit1.svg\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Orbital_inclination#mediaviewer/File:Orbit1.svg\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-21T10:13:53Z","Content":"\n\u003Cp\u003EI\u0027ll do as you recommend.\u003C/p\u003E\u003Cp\u003EBut I still can\u0027t understand how the orbit describing the movement of a \u003Cstrong\u003Epoint object\u003C/strong\u003E which does not have a direction, may describe directions of the axes of the 3d-object which this point represents. I mean, the vessel\u0027s head may be directed anywhere, and the orbit will stay the same. Thus you cannot derive this direction from the given orbit. Am I missing something obvious?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-06-22T10:16:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022allista\u0022 data-cite=\u0022allista\u0022\u003E\u003Cdiv\u003EBut I still can\u0027t understand how the orbit describing the movement of a \u003Cstrong\u003Epoint object\u003C/strong\u003E which does not have a direction, may describe directions of the axes of the 3d-object which this point represents. I mean, the vessel\u0027s head may be directed anywhere, and the orbit will stay the same. Thus you cannot derive this direction from the given orbit. Am I missing something obvious?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, you\u0027re right: the vessel\u0027s orbit doesn\u0027t have any meaning to the vessel\u0027s actual orientation. You can use Vessel.SetRotation to orient it in a particular way. Can you show a snippet of code demonstrating what you\u0027re trying to do and describing how it\u0027s wrong?\u003C/p\u003E\n"},{"CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-22T10:43:39Z","Content":"\n\u003Cp\u003EOK, I\u0027ve kinda \u0022figured\u0022 out the orientation part.\u003C/p\u003E\u003Cp\u003EThe thing is: \u003Cem\u003Evessel.vesselTransform.rotation\u003C/em\u003E and \u003Cem\u003Evessel.protoVessel.rotation\u003C/em\u003E \u003Cstrong\u003Eare not the same\u003C/strong\u003E; orientation of a vessel is stored in its protoVessel with respect to some other reference frame. So, in order to set a correct orientation of a vessel upon its loading from protoVessel, one needs to combine the desired rotation with the rotation between reference frames:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//these values are predefined\u003Cbr\u003EConfigNode config_node;\u003Cbr\u003EQuaternion desired_rotation;\u003Cbr\u003E\u003Cbr\u003E//get needed rotation quaternions\u003Cbr\u003EQuaternion vessel_rot = this.vessel.vesselTransform.rotation;\u003Cbr\u003E[B]//it is essential to use BackupVessel() instead of vessel.protoVessel, because in general the latter does not store the current flight state of the vessel[/B]\u003Cbr\u003EQuaternion proto_rot = this.vessel.BackupVessel().rotation; \u003Cbr\u003E\u003Cbr\u003E//recreate a protovessel from a config node\u003Cbr\u003EProtoVessel pv = new ProtoVessel(config_node, FlightDriver.FlightStateCache);\u003Cbr\u003E\u003Cbr\u003E//set protovessel rotation\u003Cbr\u003E[B]pv.rotation = proto_rot*vessel_rot.Inverse()*desired_rotation;[/B]\u003Cbr\u003E\u003Cbr\u003E//load the vessel from protovessel\u003Cbr\u003Epv.Load(FlightDriver.FlightStateCache.flightState);\u003Cbr\u003E\u003Cbr\u003E//check the rotation\u003Cbr\u003EDebug.Log(string.Format(\u0022desired rotation: {0}\u0022, desired_rotation.eulerAngles));\u003Cbr\u003EDebug.Log(string.Format(\u0022actual rotation: {0}\u0022, pv.vesselRef.vesselTransform.rotation.eulerAngles));\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI still can\u0027t position the loaded vessel correctly with respect to the given orbit though. But the reason seems the same, so I\u0027ll dig more...\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ExEvilReeperx\u003C/strong\u003E, unfortunately, I can\u0027t SetPosition() or SetRotation() of the pv.refVessel until it is fully loaded with FlightGlobals.ForceSetActiveVessel(pv.refVessel). And then it could be done only with a waiting coroutine, but this fails for an unknown reason: the coroutine just hangs after the first yield.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-22T11:31:58Z\u0022 title=\u002206/22/2014 11:31  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 22, 2014\u003C/time\u003E by allista\u003C/strong\u003E\n\u003Cbr\u003EBug fix in the code snippet =^_^=\n\u003C/span\u003E\n"},{"CreatedByName":"allista","CreatedById":99885,"CreatedDateTime":"2014-06-22T11:26:34Z","Content":"\n\u003Cp\u003EAnd the trick with positioning was to (shame on me) carefully read the API docs for Orbit class:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ENOTE: All Vector3d\u0027s returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESwitching the y and z components of the vector difference between the vessel.findWorldCenterOfMass() and the desired_position gave me the correct position of the spawned vessel:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOrbit this_orb = vessel.orbit;\u003Cbr\u003EOrbit new_orb = new Orbit();\u003Cbr\u003E\u003Cbr\u003EVector3 d_pos = desired_position-vessel.findWorldCenterOfMass();\u003Cbr\u003EVector3d new_orb_pos = this_orb.pos\u002Bnew Vector3d(d_pos.x, d_pos.z, d_pos.y);\u003Cbr\u003E\u003Cbr\u003Enew_orb.UpdateFromStateVectors(new_orb_pos, this_orb.vel, this_orb.referenceBody, Planetarium.GetUniversalTime());\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}