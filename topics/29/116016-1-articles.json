{"TopicId":116016,"ForumId":29,"TopicTitle":"IPartSizeModifier","CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-07-15T23:44:13Z","PageNum":1,"Articles":[{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-07-15T23:44:13Z","Content":"Evening!\n\nWe\u0027ve had various issues with skinned meshes - such as get used on tracks - and detected bounds sizes in KSP. For some reason it generates bonkers numbers for the part sizes if parts contain a skinned mesh. This causes two issues:\n\n1) The editor icons were always tiny. xEvilReeperx kindly addressed this with PartIconFixer.\n\n2) Reported vessel sizes in the editors are way out of whack, leading to problems with the low end buildings in career mode. I\u0027ve never been able to address this.\n\nI came across a few posts, the most helpful of which being this one: [http://forum.kerbalspaceprogram.com/threads/103152-What-s-new-in-0-90](https://forum.kerbalspaceprogram.com/threads/103152-What-s-new-in-0-90). Having messed about with the GetModuleSize method, I can\u0027t seem to figure out what on earth it\u0027s supposed to do. It gets called three times when a part implementing it is added, some Vector3\u0027s get flung about and that\u0027s about all I can figure out. I was hoping it would get passed the vessel size before the part was added in the first pass, but that doesn\u0027t seem to be the case.\n\nUsing:\n\n    public Vector3 GetModuleSize(Vector3 defaultSize)        {            print(defaultSize);            return defaultSize;        }\n\nI get:\n\n    KF.TrackLong added to ship - part count: 3(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)(5.9, 9.5, 50.9)(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)(11.9, 19.0, 101.8)(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)(5.9, 9.5, 50.9)(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\n\nThe reported size of the vessel is H 1.0m, W 2.8m, L 5.2m before adding the track. Any pointers on how we\u0027re supposed to be using this interface?\n\nMany thanks"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-07-16T02:21:02Z","Content":"If it\u0027s like the others, it\u0027ll store the bounds of the part when the part is first loaded (and turned into a prefab), and then if the bounds change later you need to return the offset between your current bounds and part.partInfo.partPrefab\u0027s bounds."},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-07-16T03:44:52Z","Content":"\u003E \n\u003E If it\u0027s like the others, it\u0027ll store the bounds of the part when the part is first loaded (and turned into a prefab), and then if the bounds change later you need to return the offset between your current bounds and part.partInfo.partPrefab\u0027s bounds.\n\nI was messing round with this for PWings, IIRC the offsets returned from GetModuleSize were not accounting for part occlusion in any way. That meant any non-zero modifier returned was added/subtracted from the vessel size even if that part had no effect on the vessel boundaries. I ended up just leaving it as Vector3.zero because of this issue (I really didn\u0027t want to have to make a bunch of raycasts to work out what lengths weren\u0027t occluded...). This was pre-1.0 and I wasn\u0027t particularly thorough so take that with a grain of salt"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-07-16T11:33:06Z","Content":"OK, thanks. I noticed you\u0027d returned vector3.zero in pwings, but it didn\u0027t seem to help in my case. We may end up resorting to passing negative values, but these will have to be manually calculated for each part, I suspect."}]}