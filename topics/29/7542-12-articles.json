{"TopicId":7542,"ForumId":29,"TopicTitle":"The official unoffical \u0026quot;help a fellow plugin developer\u0026quot; thread","CreatedByName":"Cephei","CreatedById":2555,"CreatedDateTime":"2012-03-04T10:02:40Z","PageNum":12,"Articles":[{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-27T23:20:10Z","Content":"\n\u003Cp\u003EI\u0027ve been having some issues with FlightCtrlState, specifically I can\u0027t get my script to compile because there\u0027s no apparent way for me to define a variable (flightControls) as the FlightCtrlState (is there some gameObject I need to find?). I also can\u0027t use GetComponent since there is no FlightCtrlState component, yet it requires a reference for me to be able to get the throttle level... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\u003Cp\u003EHere\u0027s the compile error I get:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EError CS0120: An object reference is required to access non-static member \u0060FlightCtrlState.mainThrottle\u0027 (CS0120) (PuffinTech)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs there any way for me to actually assign FlightCtrlState to a variable?\u003C/p\u003E\u003Cp\u003E-------------------------------------------------------------------------------------------------\u003C/p\u003E\u003Cp\u003EOne way to solve the issue of non-moving attached parts is to add a section to the plugin that moves the joint anchor points to the correct position relative to the pusher plate.\u003C/p\u003E\u003Cp\u003EHere\u0027s the Unity reference for joints in general. All you need to do is a foreach(Joint eachJoint in Joints) and then change the y-position of the joint anchor to be the correct position as the part animates.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Joint.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Documentation/ScriptReference/Joint.html\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-28T02:39:20Z\u0022 title=\u002205/28/2013 02:39  AM\u0022 data-short=\u002211 yr\u0022\u003EMay 28, 2013\u003C/time\u003E by OrbitusII\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-28T14:07:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003Eyet it requires a reference for me to be able to get the throttle level... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Evessel.ctrlState or FlightInputHandler.state \u003C/p\u003E\u003Cp\u003EThat\u0027s a C# compiler error, it refers to an Object in the C# sense (an instantiated class) rather than a unity GameObject. FlightCtrlState doesn\u0027t extend Component or one of it\u0027s children (Monobehaviour) so it wouldn\u0027t be possible to attach it as a component even if you wanted to. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EOne way to solve the issue of non-moving attached parts is to add a section to the plugin that moves the joint anchor points to the correct position relative to the pusher plate.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, I did consider that but I was thinking you\u0027d end up with offset rigidbodies with wierd centres of mass and whatnot but actually you can move the whole part (part.transform) first so if you do that before changing the joint attach point then it may work ok.\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-28T15:29:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003Evessel.ctrlState or FlightInputHandler.state\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAlright, I can try those, thanks. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-05-28T16:20:53Z","Content":"\n\u003Cp\u003EHi, stupid newbie with the Orion here.\u003C/p\u003E\u003Cp\u003EI\u0027m having a problem with the jolt of the nuclear bombs exceeding the structure of the vessel.\u003C/p\u003E\u003Cp\u003EThe \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/28428-Orion-aka-Ol-Boom-boom\u0022 rel=\u0022external nofollow\u0022\u003Emod \u003C/a\u003E models the \u003Ca href=\u0022http://www.projectrho.com/public_html/rocket/enginelist.php#id--Pulse--Orion\u0022 rel=\u0022external nofollow\u0022\u003EProject Orion\u003C/a\u003E nuclear pulse rocket. Due to its nature, the plugin bypasses the standard KSP propulsion module. Instead, the bomb impulse is directly applied to the vessel.\u003C/p\u003E\u003Cp\u003EI am building on a code fragment graciously supplied by NovaSilisko. The delta V is gently and magically applied to the vessel by \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ethis.vessel.ChangeWorldVelocity(base.transform.up * (aNukeRound.bombImpulse / totalVesselMass));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe kick-in-the-pants is brutally applied to the vessel by\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ebase.rigidbody.AddRelativeForce(new Vector3(0f, aNukeRound.bombImpulse, 0f), ForceMode.Force);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhere \u0022base\u0022 is the Orion engine part. The idea is that poorly constructed vessels with get shaken apart.\u003C/p\u003E\u003Cp\u003EThis works fine with the smaller bombs, where aNukeRound.bombImpulse equals 2000 or 3500 kiloNewtons. But it does not work very well with the larger bombs, of 80,000 or 400,000 kiloNewtons. On the launch pad, the first bomb makes the test cockpit and ASA placed on top of the engine shoot off like an atomic powered champagne cork. Even though I tied them down with 16 struts. They made an altitude of 5,000 meters before they fell back.\u003C/p\u003E\u003Cp\u003ETrying to cool things down, I mistakenly tried using this code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ebase.rigidbody.AddRelativeForce(new Vector3(0f, aNukeRound.bombImpulse, 0f), ForceMode.Impulse);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBad move. The cockpit detached and made the jump to lightspeed. Apogee of 92,000 freaking meters. I\u0027ve never seen a ship develop a plasma sheath in the atmosphere while moving \u003Cstrong\u003Eup\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003EI\u0027m not sure what my best options are, and I\u0027d enjoy any input the forum would care to offer.\u003C/p\u003E\u003Cp\u003EI could just remove the impulse kick, but that\u0027s no fun.\u003C/p\u003E\u003Cp\u003EI could tone down the amount of impulse, though with the largest bomb I\u0027d have to divide it by 100 or so.\u003C/p\u003E\u003Cp\u003EI could make the engine grab anything stacked on it in a manner similar to a Quantum Strut. Trouble with that is I figure the part directly touching the engine will stay connected, but all the remaining parts will still be kicked off.\u003C/p\u003E\u003Cp\u003EOr maybe there are other options I have not learned about yet.\u003C/p\u003E\u003Cp\u003EThanks!\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-28T18:38:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nyrath\u0022 data-cite=\u0022nyrath\u0022\u003E\u003Cdiv\u003Ewhere \u0022base\u0022 is the Orion engine part.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ebase is a reserved keyword in the C# language that refers to the superclass of the object running the code. In this case probably either PartModule.\u003C/p\u003E\u003Cp\u003EGiven they\u0027ve all got aliases to the correct thing it generally doesn\u0027t matter from a functionality perspective. I\u0027d usually use part.rigidbody to make it clear where the rigidbody was located but base.rigidbody, this.rigidbody or simply rigidbody will all refer to the same thing.\u003C/p\u003E\u003Cp\u003EAnyway, back to the question. Firstly I\u0027d remove the ChangeWorldVelocity call when testing forces. If it\u0027s perfectly smooth I\u0027d guess it\u0027s adding acceleration outside the physics system which may be causing the funny results you\u0027re seeing (i.e. stuff not exploding). I don\u0027t know how much experimenting Nova did or his knowledge of the game when he wrote it but I\u0027d personally attempt to propel the vessel purely through physics forces first and only resort to changing velocity if I couldn\u0027t get it smooth enough.\u003C/p\u003E\u003Cp\u003EIt always helps to define what you\u0027d consider to be correct behaviour. What should happen if you apply massive forces to a lightweight vessel? I don\u0027t know if unity/KSP simulates explosions from excessive force or whether it\u0027s just the joints breaking and the colliders colliding.\u003C/p\u003E\u003Cp\u003Ep.s. Have you had a play around with \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Rigidbody.AddExplosionForce.html\u0022 rel=\u0022external nofollow\u0022\u003ERigidBody.AddExplosionForce\u003C/a\u003E?\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-05-28T22:34:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003Ebase is a reserved keyword in the C# language that refers to the superclass of the object running the code. In this case probably either PartModule.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I was trying to make it clear that this was in the nuclear engine code, and not somewhere else\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003EAnyway, back to the question. Firstly I\u0027d remove the ChangeWorldVelocity call when testing forces. If it\u0027s perfectly smooth I\u0027d guess it\u0027s adding acceleration outside the physics system which may be causing the funny results you\u0027re seeing (i.e. stuff not exploding). I don\u0027t know how much experimenting Nova did or his knowledge of the game when he wrote it but I\u0027d personally attempt to propel the vessel purely through physics forces first and only resort to changing velocity if I couldn\u0027t get it smooth enough.\u003Cp\u003EIt always helps to define what you\u0027d consider to be correct behaviour. What should happen if you apply massive forces to a lightweight vessel? I don\u0027t know if unity/KSP simulates explosions from excessive force or whether it\u0027s just the joints breaking and the colliders colliding.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m sorry, I did not make myself clear. The problem is that stuff \u003Cem\u003Eis\u003C/em\u003E exploding, proper behavior is \u003Cem\u003Enot \u003C/em\u003Eexploding.\u003C/p\u003E\u003Cp\u003ECurrently the code works perfectly with a 3500 kiloNewton bomb. The bomb goes off, the pusher plate moves, the entire vessel undergoes acceleration, and the various parts composing the ship might rattle a bit. The acceleration is from ChangeWorldVelocity, the rattling is from AddRelativeForce.\u003C/p\u003E\u003Cp\u003EThe incorrect behavior occurs with the 80,000 kN and the 400,000 kN bombs. The bomb goes off, the pusher plate moves, the entire ship undergoes acceleration, the cockpit detaches from the Orion engine and shoots for the sky like a bat out of hell, reaching an altitude of 92,000 meters before plummeting to the ground, the Orion engine makes it to about 500 meters before falling to the ground.\u003C/p\u003E\u003Cp\u003EApparently the AddRelativeForce is adding so much force to the engine that it impacts on the base of the cockpit perched on its nose with enough force to snap the connection and send the cockpit into the sky.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003Ep.s. Have you had a play around with \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Rigidbody.AddExplosionForce.html\u0022 rel=\u0022external nofollow\u0022\u003ERigidBody.AddExplosionForce\u003C/a\u003E?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I have. I use it for the collateral damage the bombs inflict on other vessels in the vicinity. Works well, other ships on the grounds around the launch site reacted as expected. Ones that are far away are shoved around. Ones that are near the explosion get blown over the horizon.\u003C/p\u003E\u003Cp\u003EHowever, this is not suited for the bomb propulsion proper. The pulse units are not so much bomb as they are \u003Ca href=\u0022http://www.projectrho.com/public_html/rocket/enginelist.php#id--Pulse--Orion\u0022 rel=\u0022external nofollow\u0022\u003Enuclear shaped charges\u003C/a\u003E. They really do not inflict force in a bomb-like fashion, they are focused enough so that the reduction due to distance does not really happen.\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-05-28T23:41:08Z","Content":"\n\u003Cp\u003EDoes anyone know how to add an fx_exhaustFlame_yellow effect to a part at run-time?\u003C/p\u003E\u003Cp\u003Ei.e., when a part reaches 90% of its maximum temperature, I\u0027d like for it to start spewing flames.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-29T00:23:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ialdabaoth\u0022 data-cite=\u0022ialdabaoth\u0022\u003E\u003Cdiv\u003EDoes anyone know how to add an fx_exhaustFlame_yellow effect to a part at run-time?\u003Cp\u003Ei.e., when a part reaches 90% of its maximum temperature, I\u0027d like for it to start spewing flames.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGameObject flame = (GameObject)UnityEngine.Object.Instantiate(UnityEngine.Resources.Load(\u0022Effects/fx_exhaustFlame_yellow));\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-05-29T04:21:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003EGameObject flame = (GameObject)UnityEngine.Object.Instantiate(UnityEngine.Resources.Load(\u0022Effects/fx_exhaustFlame_yellow));\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EROCKIN\u0027. Thank you so much.\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-05-29T07:35:35Z","Content":"\n\u003Cp\u003EALMOST THERE! One last question: once the effect\u0027s transform is parented to the part\u0027s, how do I get the effect to point in the direction of the part\u0027s velocity?\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-29T09:10:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ialdabaoth\u0022 data-cite=\u0022ialdabaoth\u0022\u003E\u003Cdiv\u003EALMOST THERE! One last question: once the effect\u0027s transform is parented to the part\u0027s, how do I get the effect to point in the direction of the part\u0027s velocity?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESomething like part.rigidbody.velocity may work but you\u0027re running into krakensbane territory there so I\u0027m not sure what the correct velocity is.\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-05-29T16:43:42Z","Content":"\n\u003Cp\u003EI believe the correct velocity is (part.Rigidbody.GetPointVelocity(part.transform.position) \u002B Krakensbane.GetFrameVelocityV3f() - Krakensbane.GetLastCorrection() * TimeWarp.fixedDeltaTime), but can I just do myFX.lookAt(velocity)?;\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-29T17:13:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ialdabaoth\u0022 data-cite=\u0022ialdabaoth\u0022\u003E\u003Cdiv\u003Ecan I just do myFX.lookAt(velocity)?;\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh sorry, velocity is a directional vector while LookAt requires a world position so you\u0027d do something like:\u003C/p\u003E\u003Cp\u003EmyFX.LookAt(myFX.transform.position \u002B velocityVector)\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-05-29T18:49:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003EOh sorry, velocity is a directional vector while LookAt requires a world position so you\u0027d do something like:\u003Cp\u003EmyFX.LookAt(myFX.transform.position \u002B velocityVector)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAwesome! As it turns out, the fx is 90 degrees rotated from that, so the actual code is:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Evelocity = (part.Rigidbody.GetPointVelocity(part.transform.po sition) \u002B Krakensbane.GetFrameVelocityV3f() - Krakensbane.GetLastCorrection() * TimeWarp.fixedDeltaTime);\u003Cbr\u003Efx.transform.LookAt (part.transform.position \u002B velocity);\u003Cbr\u003Efx.transform.Rotate (90, 0, 0);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhew. Two more questions (hopefully):\u003C/p\u003E\u003Cp\u003E1. I try to do: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Enew EventReport (FlightEvents.CUSTOM, part, part.partInfo.title, \u0022g-force\u0022, 0, \u0022 exceeded g-force tolerance.\u0022));\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ebut instead, it just says \u0022\u0026lt;Part\u0026gt; crashed into g-force\u0022. If I don\u0027t include the second string, it just says \u0022\u0026lt;Part\u0026gt; crashed into unknown object.\u0022\u003C/p\u003E\u003Cp\u003EHow do I add a custom line to the event log that says \u0022\u0026lt;Part\u0026gt; exceeded g-force tolerance.\u0022?\u003C/p\u003E\u003Cp\u003E2. I need to know whether a parachute is deployed or packed, or whether a shielded docking clamp is open or closed. How do I determine this from the ModuleAnimateGeneric or ModuleParachute?\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-29T20:27:09Z","Content":"\n\u003Cp\u003EModuleParachute is deploymentState, I don\u0027t know about the others.\u003C/p\u003E\n"},{"CreatedByName":"Kethevin","CreatedById":64466,"CreatedDateTime":"2013-05-29T21:07:31Z","Content":"\n\u003Cp\u003EIs there an easy fix to modules that don\u0027t save when you focus on another craft?\u003C/p\u003E\u003Cp\u003EFor example, a module with an animated door. You open it, it stays open. You go to a satellite you have to alter its course or whatever and when you return to the module the door is closed...only if you right click on the module, it claims it\u0027s open so you have to close and open it again. \u003C/p\u003E\u003Cp\u003EI hope that made sense. :-)\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-30T10:59:26Z","Content":"\n\u003Cp\u003EAssuming the Module in question exposes both it\u0027s state and functions for changing it then you should be able to save it yourself easily enough. The modules on a part are listed in part.Modules.\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-06-03T00:35:35Z","Content":"\n\u003Cp\u003EStupid newbie here again with another silly question.\u003C/p\u003E\u003Cp\u003EPlugins like MechJeb can calculate mission trajectories because it can discover the maxThrust and the specific impulse from atmosphereCurve from the vessel\u0027s parts that include ModuleEngines. The MechJeb FuelFlowSimulation.cs module does this in its FuelNode constructor.\u003C/p\u003E\u003Cp\u003EMechJeb and other plugins will not work with my Orion Drive mod, because it is not a ModuleEngines. The rocket fuel system used in KSP does not work very well with the nuclear bomb \u0022fuel\u0022 used by Orion. Therefore MechJeb will examine an Orion equipped vessel and fail to find any ModuleEngines.\u003C/p\u003E\u003Cp\u003EBut I do not want to add to the Orion\u0027s part.cfg file a fake entry like \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ModuleEngines\u003Cbr\u003E\tminThrust = 0\u003Cbr\u003E\tmaxThrust = 60\u003Cbr\u003E\tatmosphereCurve\u003Cbr\u003E \t{\u003Cbr\u003E   \t key = 0 800\u003Cbr\u003E  \t key = 1 220\u003Cbr\u003E \t}\u003Cbr\u003E\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ejust to feed the proper values to MechJeb. As far as I know, if you include the module, all of its code comes along with it. I\u0027m sure it will interfere with the Orion code.\u003C/p\u003E\u003Cp\u003ESo my question is: how can I spoof MechJeb and other similar plugins?\u003C/p\u003E\u003Cp\u003EThe only way I can see is to include the ModuleEngines module, stuff my Orion values into its variables, and somehow permanently disable the ModuleEngines code. But I have no idea how to do that.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-03T00:38:41Z\u0022 title=\u002206/03/2013 12:38  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 3, 2013\u003C/time\u003E by nyrath\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2013-06-03T04:55:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nyrath\u0022 data-cite=\u0022nyrath\u0022\u003E\u003Cdiv\u003EStupid newbie here again with another silly question.\u003Cp\u003EPlugins like MechJeb can calculate mission trajectories because it can discover the maxThrust and the specific impulse from atmosphereCurve from the vessel\u0027s parts that include ModuleEngines. The MechJeb FuelFlowSimulation.cs module does this in its FuelNode constructor.\u003C/p\u003E\u003Cp\u003EMechJeb and other plugins will not work with my Orion Drive mod, because it is not a ModuleEngines. The rocket fuel system used in KSP does not work very well with the nuclear bomb \u0022fuel\u0022 used by Orion. Therefore MechJeb will examine an Orion equipped vessel and fail to find any ModuleEngines.\u003C/p\u003E\u003Cp\u003EBut I do not want to add to the Orion\u0027s part.cfg file a fake entry like \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ModuleEngines\u003Cbr\u003E\tminThrust = 0\u003Cbr\u003E\tmaxThrust = 60\u003Cbr\u003E\tatmosphereCurve\u003Cbr\u003E \t{\u003Cbr\u003E   \t key = 0 800\u003Cbr\u003E  \t key = 1 220\u003Cbr\u003E \t}\u003Cbr\u003E\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ejust to feed the proper values to MechJeb. As far as I know, if you include the module, all of its code comes along with it. I\u0027m sure it will interfere with the Orion code.\u003C/p\u003E\u003Cp\u003ESo my question is: how can I spoof MechJeb and other similar plugins?\u003C/p\u003E\u003Cp\u003EThe only way I can see is to include the ModuleEngines module, stuff my Orion values into its variables, and somehow permanently disable the ModuleEngines code. But I have no idea how to do that.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEasy!\u003C/p\u003E\u003Cp\u003EOn the launchpad, when you do OnStart, do the following check:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif(part.Modules.Contains(\u0022ModuleEngines\u0022))\u003Cbr\u003E  part.Modules.Remove(part.Modules[\u0022ModuleEngines\u0022]);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBam! ModuleEngines is gone on the launchpad, but still exists in the VAB.\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-06-03T15:18:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ialdabaoth\u0022 data-cite=\u0022ialdabaoth\u0022\u003E\u003Cdiv\u003EEasy!\u003Cp\u003EOn the launchpad, when you do OnStart, do the following check:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif(part.Modules.Contains(\u0022ModuleEngines\u0022))\u003Cbr\u003E  part.Modules.Remove(part.Modules[\u0022ModuleEngines\u0022]);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBam! ModuleEngines is gone on the launchpad, but still exists in the VAB.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUmmmm, but during the mission will my module still show up when MechJeb goes looking for ModuleEngines?\u003C/p\u003E\u003Cp\u003EIf so, that will be a most elegant solution.\u003C/p\u003E\n"},{"CreatedByName":"BlackNecro","CreatedById":7728,"CreatedDateTime":"2013-06-05T09:02:07Z","Content":"\n\u003Cp\u003EDoes anyone know whether it is possible via GameDB, PartLoader or any other way to actually get the mod folder in /GameData/ (the name of the mod) of certain part name not having an instanced part available?\u003C/p\u003E\u003Cp\u003ETried digging through the API for some hours now but I can\u0027t find any way to get even close to those folder paths as all properties of the AvailablePart in the PartLoader are useless for this purpose.\u003C/p\u003E\u003Cp\u003EHardcoding stock part names etc would be kinda annoying.\u003C/p\u003E\u003Cp\u003EMany thanks in advance!\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-06-05T10:20:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BlackNecro\u0022 data-cite=\u0022BlackNecro\u0022\u003E\u003Cdiv\u003EDoes anyone know whether it is possible via GameDB, PartLoader or any other way to actually get the mod folder in /GameData/ (the name of the mod) of certain part name not having an instanced part available?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAvailablePart.partUrl or partPath don\u0027t contain the path?\u003C/p\u003E\n"},{"CreatedByName":"BlackNecro","CreatedById":7728,"CreatedDateTime":"2013-06-05T10:58:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003EAvailablePart.partUrl or partPath don\u0027t contain the path?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESadly neither the available parts list in the PartLoader nor getting the parts by name through the PartLoader fills any fields beside the name. I\u0027m doing this in the editor scene btw.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-06-05T11:38:32Z","Content":"\n\u003Cp\u003EHave you tried EditorPartList.Instance.limitedParts?\u003C/p\u003E\n"},{"CreatedByName":"Mr Shifty","CreatedById":68146,"CreatedDateTime":"2013-06-05T13:00:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022skyline131313\u0022 data-cite=\u0022skyline131313\u0022\u003E\u003Cdiv\u003EOverride is just a way to ensure the virtual function you are trying to override exists. C/C\u002B\u002B doesn\\\u0027t have this declaration as it\\\u0027s more to for \u0027safety\u0027 reasons than anything else (there\\\u0027s been some modifications in C\u002B\u002B11, only thing that comes to top of my head is \u0027final\u0027 to ensure a virutal function doesn\\\u0027t get overridden after that class). Although C# still needs the override key word otherwise you might get a warning or error?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOverride has specific functionality with regard to polymorphism. You can only override virtual functions in the base class. An overridden function will be called on any instance of the derived class despite the type of the instance variable. If you don\u0027t override (and you\u0027re supposed to use the keyword \u0022new\u0022 if you don\u0027t), the type of the instance variable will used to determine which version of the method you call:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=\u0022#0000FF\u0022]class[/COLOR] Base\u003Cbr\u003E{\u003Cbr\u003E   [COLOR=\u0022#0000FF\u0022]public virtual void[/COLOR] F() {}\u003Cbr\u003E}\u003Cbr\u003E[COLOR=\u0022#0000FF\u0022]class[/COLOR] DeriveAndHide: Base\u003Cbr\u003E{\u003Cbr\u003E   [COLOR=\u0022#0000FF\u0022]public new void[/COLOR] F() {}         \u003Cbr\u003E}\u003Cbr\u003E[COLOR=\u0022#0000FF\u0022]class[/COLOR] DeriveAndOverride: Base\u003Cbr\u003E{\u003Cbr\u003E   [COLOR=\u0022#0000FF\u0022]public override void[/COLOR] F() {}  \u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E[COLOR=\u0022#0000FF\u0022]class[/COLOR] Tester\u003Cbr\u003E{\u003Cbr\u003E   [COLOR=\u0022#0000FF\u0022]public void[/COLOR] Main()\u003Cbr\u003E   {\u003Cbr\u003E      [COLOR=\u0022#0000FF\u0022]public[/COLOR] Base Test1 = [COLOR=\u0022#0000FF\u0022]new[/COLOR] DeriveAndHide();\u003Cbr\u003E      [COLOR=\u0022#0000FF\u0022]public[/COLOR] DeriveAndHide Test2 = [COLOR=\u0022#0000FF\u0022]new[/COLOR] DeriveAndHide();\u003Cbr\u003E      [COLOR=\u0022#0000FF\u0022]public[/COLOR] Base Test3 = [COLOR=\u0022#0000FF\u0022]new[/COLOR] DeriveAndOverride();\u003Cbr\u003E      Test1.F(); [COLOR=\u0022#008000\u0022]// calls Base.F()[/COLOR]\u003Cbr\u003E      Test2.F(); [COLOR=\u0022#008000\u0022]// calls DeriveAndHide.F()[/COLOR]\u003Cbr\u003E      Test3.F(); [COLOR=\u0022#008000\u0022]// calls DeriveAndOverride.F(;[/COLOR]\u003Cbr\u003E   }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-05T13:57:41Z\u0022 title=\u002206/05/2013 01:57  PM\u0022 data-short=\u002211 yr\u0022\u003EJune 5, 2013\u003C/time\u003E by Mr Shifty\u003C/strong\u003E\n\u003C/span\u003E\n"}]}