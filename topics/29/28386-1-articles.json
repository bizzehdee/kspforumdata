{"TopicId":28386,"ForumId":29,"TopicTitle":"Using sound effects in the new system [MOSTLY SOLVED]","CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-23T09:29:05Z","PageNum":1,"Articles":[{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-23T09:29:05Z","Content":"\n\u003Cp\u003ESince custom engine sounds don\u0027t seem to work in 0.20, I thought I\u0027d just get started writing my own sound handling code, but I\u0027m not sure what\u0027s the correct way to acces the sound files that have already been loaded in KSP.\u003C/p\u003E\u003Cp\u003EThe sound files in my mods Sounds folder show up in the sound list in KSPs debug menu along side the KSP \u0022bleep and bloop\u0022 sounds (but the stock jet engine sounds are elsewhere it seems).\u003C/p\u003E\u003Cp\u003EI see the sounds are called for instance \u0022Firespitter/Sounds/sound_propidle\u0022. This is good, as it means I don\u0027t have to handle loading the files from disk yourself.\u003C/p\u003E\u003Cp\u003EWhat do you do to play these effects in this new system?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-23T18:11:12Z\u0022 title=\u002205/23/2013 06:11  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 23, 2013\u003C/time\u003E by Snjo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"KospY","CreatedById":33868,"CreatedDateTime":"2013-05-23T15:45:33Z","Content":"\n\u003Cp\u003EAlso pretty interested about this. I have lot of sounds to use and I hope there is something nice to handle them easly.\u003C/p\u003E\u003Cp\u003EHelp from a Squad developer would be welcome \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-23T18:10:42Z","Content":"\n\u003Cp\u003EFound out some stuff. This module will let you type in a sound name and test to see if it exist, and play it via a GUI button.\u003C/p\u003E\u003Cp\u003EIt loads the sound from the game database, so no messing around with the file structure, just doing it how it\u0027s intended to be done.\u003C/p\u003E\u003Cp\u003EIn my case i type in \u0022Firespitter/Sounds/sound_fspropidle\u0022 in the field, hit play, and hear my pretty sound.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing System.Threading.Tasks;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class FSsoundLoader : PartModule\u003Cbr\u003E{\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string soundName;\u003Cbr\u003E\u003Cbr\u003E    public string doesExist = \u0022...\u0022;\u003Cbr\u003E\u003Cbr\u003E    public FXGroup powerGroup;\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(PartModule.StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E        powerGroup.audio = gameObject.AddComponent\u0026lt;AudioSource\u0026gt;();\u003Cbr\u003E        powerGroup.audio.volume = 1;\u003Cbr\u003E        powerGroup.audio.Stop();\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public void OnGUI()\u003Cbr\u003E    {\u003Cbr\u003E        Rect menuItemRect = new Rect(250f, 200f, 300f, 150f);\u003Cbr\u003E        Vector2 buttonSize = new Vector2(30f, 30f);\u003Cbr\u003E        Vector2 menuItemSize = new Vector2(200f, 35f);\u003Cbr\u003E        if (GUI.Button(new Rect(menuItemRect.x, menuItemRect.y, buttonSize.x, buttonSize.y), \u0022OK\u0022))\u003Cbr\u003E        {\u003Cbr\u003E            doesExist = \u0022\u0022 \u002B GameDatabase.Instance.ExistsAudioClip(soundName);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (GUI.Button(new Rect(menuItemRect.x \u002B buttonSize.x \u002B 10f, menuItemRect.y, buttonSize.x, buttonSize.y), \u0022C\u0022))\u003Cbr\u003E        {\u003Cbr\u003E            doesExist = \u0022clear\u0022;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (GUI.Button(new Rect(menuItemRect.x \u002B ((buttonSize.x \u002B 10f)*2), menuItemRect.y, buttonSize.x, buttonSize.y), \u0022\u0026gt;\u0022))\u003Cbr\u003E        {\u003Cbr\u003E           powerGroup.audio.clip = GameDatabase.Instance.GetAudioClip(soundName);\u003Cbr\u003E           powerGroup.audio.Play();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        GUI.Label(new Rect(menuItemRect.x \u002B ((buttonSize.x \u002B 10f) * 3), menuItemRect.y, menuItemSize.x - buttonSize.x - 10f, buttonSize.y),\u003Cbr\u003E                \u0022exists: \u0022 \u002B doesExist);\u003Cbr\u003E        menuItemRect.y \u002B= 30;\u003Cbr\u003E       soundName = GUI.TextField(new Rect(menuItemRect.x \u002B buttonSize.x \u002B 10f, menuItemRect.y, menuItemSize.x - buttonSize.x - 10f, buttonSize.y), soundName);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/Ui4vuoY.png\u0022 alt=\u0022Ui4vuoY.png\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-23T18:16:13Z\u0022 title=\u002205/23/2013 06:16  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 23, 2013\u003C/time\u003E by Snjo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"KospY","CreatedById":33868,"CreatedDateTime":"2013-05-24T14:15:59Z","Content":"\n\u003Cp\u003EI get an error at the line \u0022powerGroup.audio = gameObject.AddComponent\u0026lt;AudioSource\u0026gt;();\u0022 in the onstart method.\u003C/p\u003E\u003Cp\u003EI don\u0027t know what I\u0027m doing wrong ?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-24T14:25:34Z\u0022 title=\u002205/24/2013 02:25  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 24, 2013\u003C/time\u003E by KospY\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-24T15:36:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KospY\u0022 data-cite=\u0022KospY\u0022\u003E\u003Cdiv\u003EI get an error at the line \u0022powerGroup.audio = gameObject.AddComponent\u0026lt;AudioSource\u0026gt;();\u0022 in the onstart method.\u003Cp\u003EI don\u0027t know what I\u0027m doing wrong ?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWith the exact same code?\u003C/p\u003E\u003Cp\u003EIf not, post your code.\u003C/p\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-24T15:37:36Z","Content":"\n\u003Cp\u003EAlso \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/30559-20-And-mods?p=385095\u0026amp;viewfull=1#post385095\u0022 rel=\u0022external nofollow\u0022\u003Echeck this\u003C/a\u003E for a more complete implementation\u003C/p\u003E\n"},{"CreatedByName":"KospY","CreatedById":33868,"CreatedDateTime":"2013-05-24T19:09:43Z","Content":"\n\u003Cp\u003EFow now, I only added this in my module : \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003EFXGroup powerGroup;\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(PartModule.StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E        powerGroup.audio = gameObject.AddComponent\u0026lt;AudioSource\u0026gt;(); //Error here : [Exception]: NullReferenceException: Object reference not set to an instance of an object\u003Cbr\u003E        powerGroup.audio.volume = 1;\u003Cbr\u003E        powerGroup.audio.Stop();      \u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEdit : Sorry, I forget to add \u0022public\u0022 before \u0022FXGroup powerGroup\u0022... For an unknow reason, it seem to be important to use \u0022public\u0022 and not \u0022private\u0022.\u003C/p\u003E\u003Cp\u003EThanks for your help, sounds is working again \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-24T19:21:11Z\u0022 title=\u002205/24/2013 07:21  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 24, 2013\u003C/time\u003E by KospY\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"KospY","CreatedById":33868,"CreatedDateTime":"2013-05-28T20:26:27Z","Content":"\n\u003Cp\u003EI\u0027m trying to change powerGroup.audio.maxdistance to reduce the sound distance, but so far the parameter didn\u0027t seem to do any effect...\u003C/p\u003E\u003Cp\u003EBy default sounds can be heared from kilometers. That can be good for rocket engine but for some others things that really not realistic :-p\u003C/p\u003E\u003Cp\u003EHas anyone found a way to do this ?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-28T20:30:33Z\u0022 title=\u002205/28/2013 08:30  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 28, 2013\u003C/time\u003E by KospY\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2013-05-28T21:45:59Z","Content":"\n\u003Cp\u003EI\u0027m guessing audioRollOffMode will make a difference, but I don\u0027t know if Linear is better or worse than Logarithmic\u003C/p\u003E\u003Cp\u003Eedit: Linear is PERFECT! All it needs is an adjustment to the bass at further distance to sound more realistic.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/AudioRolloffMode.htm\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Documentation/ScriptReference/AudioRolloffMode.htm\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBTW, here\u0027s the current state of my own sound module with lots more features. It\u0027s not done yet, but getting there:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing System.Threading.Tasks;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// Engine sound handler. Allows for engines that have power sound even at minimum throttle, and engage sound that fires more consistently.\u003Cbr\u003E/// Will play a warning sound when overheating.\u003Cbr\u003E/// Any unnamed sound will be disabled, so just comment out the lines for the sounds you don\u0027t use in the cfg.\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003Epublic class FSengineSounds : PartModule\u003Cbr\u003E{\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// the engine start sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string engage;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// the constant thrust independent background hum of an engine\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string running;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// the thrust based pitched main engine sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string power;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// the engine shut down sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string disengage;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// loss of fuel flameout sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string flameout;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// engine overheat warning sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public string warning;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// how quickly the engine power sound volume ramps up from silent when started. set to 1 for immediate full volume. This value is added to the volume every 0.2 seconds until it reaches 1.\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float powerFadeInSpeed = 0.02f;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// how long the volume is off after starting the engine, to allow the engage sound to be heard\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float powerFadeInDelay = 0.0f;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// thrust values below this level will yield a silent engine sound\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float powerLowerThreshold = 0.0f; //add functionality\u003Cbr\u003E\t[KSPField]\u003Cbr\u003E    public float powerVolume = 1.0f;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float engageVolume = 1.0f;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// random start delay for the power sound, to make several engines not play in sync. makes for a better soundscape.\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float randomStartDelay = 0.0f;\u003Cbr\u003E\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// normalized engine heat value at which the warning sound chimes. set above 1 to disable (or don\u0027t name the sound of course)\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float warningSoundThreshold = 0.8f;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// how often the warning sound can play in seconds\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float warningCooldownTime = 2f;\u003Cbr\u003E\u003Cbr\u003E    private float warningCountDown = 0f;\u003Cbr\u003E\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// the default pitch of the engine power sound. 1 is the same pitch as the original sound file.\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float powerPitchBase = 0.8f;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// how much above the default pitch the power goes based on thrust. final pitch = powerPitchBase \u002B (thrust * thrustAddedToPitch). Based on maxThrust at launch.\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public float thrustAddedToPitch = 0.3f;\u003Cbr\u003E\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public bool useDebug = false;\u003Cbr\u003E    [KSPField]\u003Cbr\u003E    public bool showVolumeDebug = false;\u003Cbr\u003E\u003Cbr\u003E    private ModuleEngines engine;\u003Cbr\u003E    private bool oldIgnitionState;\u003Cbr\u003E    private bool oldFlameOutState;\u003Cbr\u003E    private float currentPowerFadeIn;\u003Cbr\u003E    private float currentPowerDelay;\u003Cbr\u003E\u003Cbr\u003E    private float smoothedPowerPitch = 0f;\u003Cbr\u003E    private float maxThrust;\u003Cbr\u003E\u003Cbr\u003E    private bool paused = false;\u003Cbr\u003E    private System.Random rand = new System.Random();\u003Cbr\u003E\u003Cbr\u003E    private string doesExist = \u0022...\u0022;\u003Cbr\u003E\u003Cbr\u003E    public FXGroup engageGroup;\u003Cbr\u003E    public bool engageAssigned;\u003Cbr\u003E    public FXGroup runningGroup;\u003Cbr\u003E    public bool runningAssigned;\u003Cbr\u003E    public FXGroup powerGroup;\u003Cbr\u003E    public bool powerAssigned;\u003Cbr\u003E    public FXGroup disengageGroup;\u003Cbr\u003E    public bool disengageAssigned;\u003Cbr\u003E    public FXGroup flameoutGroup;\u003Cbr\u003E    public bool flameoutAssigned;\u003Cbr\u003E    public FXGroup warningGroup;\u003Cbr\u003E    public bool warningAssigned;\u003Cbr\u003E\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// Fills an FXGroup with sound values\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    /// \u0026lt;param name=\u0022group\u0022\u0026gt;The group that will receive a new sound\u0026lt;/param\u0026gt;\u003Cbr\u003E    /// \u0026lt;param name=\u0022name\u0022\u0026gt;The name of the sound in the game database. No file extensions. e.g. Firespitter\\Sounds\\sound_fspropidle\u0026lt;/param\u0026gt;\u003Cbr\u003E    /// \u0026lt;param name=\u0022loop\u0022\u0026gt;Does the sound loop by default?\u0026lt;/param\u0026gt;\u003Cbr\u003E    /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;\u003Cbr\u003E    public bool createGroup(FXGroup group, string name, bool loop)\u003Cbr\u003E    {\u003Cbr\u003E        if (name != string.Empty)\u003Cbr\u003E        {\u003Cbr\u003E            if (!GameDatabase.Instance.ExistsAudioClip(name))\u003Cbr\u003E                return false;\u003Cbr\u003E            group.audio = gameObject.AddComponent\u0026lt;AudioSource\u0026gt;();\u003Cbr\u003E            group.audio.volume = GameSettings.SHIP_VOLUME;\u003Cbr\u003E            group.audio.rolloffMode = AudioRolloffMode.Logarithmic;            \u003Cbr\u003E            group.audio.dopplerLevel = 0f;\u003Cbr\u003E            group.audio.panLevel = 1f;\u003Cbr\u003E            group.audio.clip = GameDatabase.Instance.GetAudioClip(name);\u003Cbr\u003E            group.audio.loop = loop;\u003Cbr\u003E            group.audio.playOnAwake = false;             \u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E        return false;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    //private void OnDestroy()\u003Cbr\u003E    //{\u003Cbr\u003E    //    GameEvents.onGamePause.Remove(new EventVoid.OnEvent(OnPause));\u003Cbr\u003E    //    GameEvents.onGameUnpause.Remove(new EventVoid.OnEvent(OnResume));        \u003Cbr\u003E    //}\u003Cbr\u003E\u003Cbr\u003E    public void OnPause()\u003Cbr\u003E    {\u003Cbr\u003E        powerGroup.audio.volume = 0f;\u003Cbr\u003E        paused = true;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public void OnResume()\u003Cbr\u003E    {\u003Cbr\u003E        powerGroup.audio.volume = GameSettings.SHIP_VOLUME;\u003Cbr\u003E        paused = false;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(PartModule.StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E        engageAssigned = createGroup(engageGroup, engage, false);\u003Cbr\u003E        runningAssigned = createGroup(runningGroup, running, true);\u003Cbr\u003E        powerAssigned = createGroup(powerGroup, power, true);\u003Cbr\u003E        disengageAssigned = createGroup(disengageGroup, disengage, true);\u003Cbr\u003E        flameoutAssigned = createGroup(flameoutGroup, flameout, false);\u003Cbr\u003E        warningAssigned = createGroup(warningGroup, warning, false);\u003Cbr\u003E\u003Cbr\u003E        engine = part.GetComponent\u0026lt;ModuleEngines\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E        if (engine != null)\u003Cbr\u003E        {\u003Cbr\u003E            maxThrust = engine.maxThrust;\u003Cbr\u003E        }\u003Cbr\u003E        //GameEvents.onGamePause.Add(new EventVoid.OnEvent(OnPause));\u003Cbr\u003E        //GameEvents.onGameUnpause.Add(new EventVoid.OnEvent(OnResume));              \u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    void Update()\u003Cbr\u003E    {\u003Cbr\u003E        if (FlightDriver.Pause != paused)\u003Cbr\u003E        {\u003Cbr\u003E            if (FlightDriver.Pause)\u003Cbr\u003E                OnPause();\u003Cbr\u003E            else\u003Cbr\u003E                OnResume();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public void FixedUpdate()\u003Cbr\u003E    {\u003Cbr\u003E \t    base.OnFixedUpdate();\u003Cbr\u003E        if (!HighLogic.LoadedSceneIsFlight) return;\u003Cbr\u003E\u003Cbr\u003E        if (engine != null)\u003Cbr\u003E        {\u003Cbr\u003E            if (TimeWarp.WarpMode == TimeWarp.Modes.HIGH \u0026amp;\u0026amp; TimeWarp.CurrentRate \u0026gt; 1.1f)\u003Cbr\u003E            {\u003Cbr\u003E                if (powerAssigned)\u003Cbr\u003E                    powerGroup.audio.volume = 0f;                            \u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {                     \u003Cbr\u003E                // power/running sound                  \u003Cbr\u003E                if (engine.getIgnitionState \u0026amp;\u0026amp; !engine.getFlameoutState)\u003Cbr\u003E                {\u003Cbr\u003E                    if (powerAssigned)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (currentPowerDelay \u0026gt; 0f)\u003Cbr\u003E                            currentPowerDelay -= Time.deltaTime;\u003Cbr\u003E\u003Cbr\u003E                        float adjustedThrustPitch = ((engine.finalThrust / maxThrust) * thrustAddedToPitch) \u002B powerPitchBase;\u003Cbr\u003E                        smoothedPowerPitch = Mathf.Lerp(smoothedPowerPitch, adjustedThrustPitch, 0.1f);\u003Cbr\u003E                        if (currentPowerDelay \u0026lt;= 0f)\u003Cbr\u003E                        {\u003Cbr\u003E                            if (currentPowerFadeIn \u0026lt; 1f)\u003Cbr\u003E                            {\u003Cbr\u003E                                currentPowerFadeIn \u002B= powerFadeInSpeed;\u003Cbr\u003E                                if (currentPowerFadeIn \u0026gt; 1f)\u003Cbr\u003E                                    currentPowerFadeIn = 1f;\u003Cbr\u003E                            }\u003Cbr\u003E                            powerGroup.audio.volume = GameSettings.SHIP_VOLUME * currentPowerFadeIn * powerVolume;\u003Cbr\u003E                            if (!powerGroup.audio.isPlaying)\u003Cbr\u003E                                powerGroup.audio.Play();\u003Cbr\u003E                            powerGroup.audio.pitch = smoothedPowerPitch;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    if (powerAssigned)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (powerGroup.audio.isPlaying)\u003Cbr\u003E                            powerGroup.audio.Stop();\u003Cbr\u003E                        currentPowerFadeIn = 0f;\u003Cbr\u003E                        currentPowerDelay = powerFadeInDelay \u002B ((float)(rand.NextDouble()) * randomStartDelay);\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                // engage sound\u003Cbr\u003E                if (engageAssigned)\u003Cbr\u003E                {\u003Cbr\u003E                    if (engine.getIgnitionState \u0026amp;\u0026amp; !oldIgnitionState)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (!engine.getFlameoutState)\u003Cbr\u003E                        {\u003Cbr\u003E                            engageGroup.audio.volume = GameSettings.SHIP_VOLUME * engageVolume;\u003Cbr\u003E                            engageGroup.audio.Play();\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    oldIgnitionState = engine.getIgnitionState;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (warningAssigned)\u003Cbr\u003E            {\u003Cbr\u003E                if (warningCountDown \u0026gt; 0f)\u003Cbr\u003E                    warningCountDown -= Time.deltaTime;\u003Cbr\u003E\u003Cbr\u003E                if (part.temperature \u0026gt; part.maxTemp * warningSoundThreshold)\u003Cbr\u003E                {\u003Cbr\u003E                    if (warningCountDown \u0026lt;= 0)\u003Cbr\u003E                    {\u003Cbr\u003E                        warningGroup.audio.Play();\u003Cbr\u003E                        warningCountDown = warningCooldownTime;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }    \u003Cbr\u003E\u003Cbr\u003E    public void OnGUI()\u003Cbr\u003E    {\u003Cbr\u003E        if (showVolumeDebug)\u003Cbr\u003E            GUI.Label(new Rect(250f, 300f, 200f, 30f), \u0022engine volume: \u0022 \u002B currentPowerFadeIn);\u003Cbr\u003E        if (useDebug)\u003Cbr\u003E        {\u003Cbr\u003E            if (!HighLogic.LoadedSceneIsEditor)\u003Cbr\u003E                return;\u003Cbr\u003E            Rect menuItemRect = new Rect(250f, 200f, 300f, 150f);\u003Cbr\u003E            Vector2 buttonSize = new Vector2(30f, 30f);\u003Cbr\u003E            Vector2 menuItemSize = new Vector2(200f, 35f);\u003Cbr\u003E            if (GUI.Button(new Rect(menuItemRect.x, menuItemRect.y, buttonSize.x, buttonSize.y), \u0022OK\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                if (GameDatabase.Instance.ExistsAudioClip(warning))\u003Cbr\u003E                {\u003Cbr\u003E                    doesExist = \u0022Yes\u0022;\u003Cbr\u003E                    createGroup(warningGroup, warning, false);\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    doesExist = \u0022No\u0022;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (GUI.Button(new Rect(menuItemRect.x \u002B buttonSize.x \u002B 10f, menuItemRect.y, buttonSize.x, buttonSize.y), \u0022C\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                doesExist = \u0022clear\u0022;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (GUI.Button(new Rect(menuItemRect.x \u002B ((buttonSize.x \u002B 10f) * 2), menuItemRect.y, buttonSize.x, buttonSize.y), \u0022\u0026gt;\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                if (warningAssigned)\u003Cbr\u003E                    warningGroup.audio.Play();\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            GUI.Label(new Rect(menuItemRect.x \u002B ((buttonSize.x \u002B 10f) * 3), menuItemRect.y, menuItemSize.x - buttonSize.x - 10f, buttonSize.y),\u003Cbr\u003E                    \u0022exists: \u0022 \u002B doesExist);\u003Cbr\u003E            menuItemRect.y \u002B= 30;\u003Cbr\u003E            warning = GUI.TextField(new Rect(menuItemRect.x \u002B buttonSize.x \u002B 10f, menuItemRect.y, menuItemSize.x - buttonSize.x - 10f, buttonSize.y), warning);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-28T21:53:03Z\u0022 title=\u002205/28/2013 09:53  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 28, 2013\u003C/time\u003E by Snjo\u003C/strong\u003E\n\u003C/span\u003E\n"}]}