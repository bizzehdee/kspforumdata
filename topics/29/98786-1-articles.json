{"TopicId":98786,"ForumId":29,"TopicTitle":"Find textures from an InternalPart?","CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-04T23:39:13Z","PageNum":1,"Articles":[{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-04T23:39:13Z","Content":"\n\u003Cp\u003EEDIT original post:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EHello everyone!\u003Cp\u003EI\u0027m currently looking for a way to find the name of a bunch of textures at runtime (from editor and flight scene, in this case), starting from part\u0027s informations.\u003C/p\u003E\u003Cp\u003ERight now, I\u0027ve found how to access the part\u0027s materials and retrieve the main texture and normals, but in some case the part use an emissive texture (mostly used for cockpit lights and reactor heating effects). Can\u0027t find this one anywhere.\u003C/p\u003E\u003Cp\u003EAlso, I\u0027m looking for a way to find textures in an IVA space, if there\u0027s one attached to a part.\u003C/p\u003E\u003Cp\u003EIt seems like the emissive texture is part of an animation, but I\u0027ve no idea where to look...\u003C/p\u003E\u003Cp\u003EI\u0027m currently messing with a plugin forking DDSLoader and ATM, resizing textures to a ridiculous size to reload them at runtime. The first results are interesting enough to keep working on it, but if those textures are not reloaded, \u003Ca href=\u0022http://i.imgur.com/AE1Bge7.jpg\u0022 rel=\u0022external nofollow\u0022\u003Eit does not\u003C/a\u003E\u003Ca href=\u0022http://i.imgur.com/EbQVhN3.jpg\u0022 rel=\u0022external nofollow\u0022\u003E looks right...\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThanks in advance!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E I\u0027ve finally figured how to get the emissive texture (I should have look for documentation here instead of Unity\u0027s website...), turns out \u0022material.GetTexture(\u0022_Emissive\u0022)\u0022 is just what I needed. \u003C/p\u003E\u003Cp\u003EI\u0027m still looking for a way to get InternalParts materials, though.\u003C/p\u003E\u003Cp\u003EEdit 2: modified the title for visibility. Still didn\u0027t find anything that could be useful regarding InternalParts.\u003C/p\u003E\u003Cp\u003EThe only way I have to access InternalPart infos are a \u0022foreach (InternalPart ip in Resources.FindObjectsOfType(typeof(InternalPart)){}\u0022, but in this case all objects are considered as enabled, and I can\u0027t find a way to determine if this particular part is needed by the current vessel.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-05T13:12:49Z\u0022 title=\u002202/05/2015 01:12  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 5, 2015\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-05T22:16:54Z","Content":"\n\u003Cp\u003EIn fact, just being able to access the \u0022INTERNAL\u0022 node of a part would be a great help. At this point, I\u0027m thinking of re-parsing all cfg files with a home-made function to acces it... There\u0027s probably a better way do to that?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-02-06T01:43:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lilleman\u0022 data-cite=\u0022Lilleman\u0022\u003E\u003Cdiv\u003EIn fact, just being able to access the \u0022INTERNAL\u0022 node of a part would be a great help.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot much to that:\u003C/p\u003E\u003Cp\u003EAll parts\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EPartLoader.LoadedPartsList.ForEach(ap =\u0026gt;\u003Cbr\u003E{\u003Cbr\u003E    if (!ap.internalConfig.HasData) return;\u003Cbr\u003E\u003Cbr\u003E    _log.Normal(\u0022{0} has the following INTERNAL:\u0022, ap.name);\u003Cbr\u003E    _log.Normal(\u0022{0}\u0022, ap.internalConfig.ToString());\u003Cbr\u003E});\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELive parts from vessel:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EFlightGlobals.ActiveVessel.parts\u003Cbr\u003E    .Where(p =\u0026gt; p.internalModel != null)\u003Cbr\u003E    .ToList()\u003Cbr\u003E    .ForEach(\u003Cbr\u003E        p =\u0026gt;\u003Cbr\u003E            print(string.Format(\u0022{0} has INTERNAL of:\\n{1}\u0022, p.partInfo.name,\u003Cbr\u003E                p.internalModel.internalConfig.ToString())));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you\u0027re looking for a list of all textures needed for InternalModels on the current vessel, that should be easy enough as well:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evar internals = new HashSet\u0026lt;InternalModel\u0026gt;();\u003Cbr\u003E\u003Cbr\u003EFlightGlobals.ActiveVessel.parts.ForEach(part =\u0026gt;\u003Cbr\u003E{\u003Cbr\u003E    if (part.internalModel != null)\u003Cbr\u003E        internals.Add(part.internalModel);\u003Cbr\u003E});\u003Cbr\u003E\u003Cbr\u003Einternals.ToList().ForEach(imodel =\u0026gt;\u003Cbr\u003E{\u003Cbr\u003E    _log.Normal(\u0022Listing internals for \u0022 \u002B imodel.internalName);\u003Cbr\u003E\u003Cbr\u003E    imodel.FindModelComponents\u0026lt;Renderer\u0026gt;()\u003Cbr\u003E        .Where(r =\u0026gt; r.sharedMaterial.mainTexture != null)\u003Cbr\u003E        .Select(r =\u0026gt; r.sharedMaterial.mainTexture.name)\u003Cbr\u003E        .Distinct()\u003Cbr\u003E        .OrderBy(url =\u0026gt; url)\u003Cbr\u003E        .ToList().ForEach(textureUrl =\u0026gt;\u003Cbr\u003E            _log.Normal(\u0022  Texture: \u0022 \u002B textureUrl));\u003Cbr\u003E});\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you want to access InternalModels which don\u0027t exist or outside of flight, you\u0027ll want to get them with PartLoader.GetInternalPart and looking at the name key in the INTERNAL ConfigNode from above\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T01:56:55Z\u0022 title=\u002202/06/2015 01:56  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-06T13:12:20Z","Content":"\n\u003Cp\u003EI finally found a workaround, but this is a way better way to proceed, thanks a lot!\u003C/p\u003E\u003Cp\u003EUntil now my solution was to add an internal module to each internal part, who send the name of the textures currently in use to an external object, on each OnAwake and OnDestroy method.\u003C/p\u003E\u003Cp\u003EThis is gonna make things much cleaner.\u003C/p\u003E\u003Cp\u003EThis is taking shape, for now the plugin seems to work with every part converted to DDS. Next step is to make it compatible with most RAM-consuming mods (I have to find a way to determine if EVE need high-res textures in a given SOI), but that\u0027s another story.\u003C/p\u003E\u003Cp\u003EOf course, I didn\u0027t mention it, but if someone is interested in such a plugin, I can PM the sources. It looks a lot like LoadOnDemand, the main benefit being that DDS loading is fast enough to keep a smooth framerate.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T14:46:33Z\u0022 title=\u002202/06/2015 02:46  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-02-06T14:25:23Z","Content":"\n\u003Cp\u003ESo you load/unload the full texture by checking if the part/internal is currently loaded ? Neat \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-06T14:42:27Z","Content":"\n\u003Cp\u003EYep, firsts results are quite good, it saves about 600MB of RAM while using OpenGL (about 1.2GB with DX9), while using full-res textures (on an install hitting \u002B3GB of RAM usage with DX9). This is only for parts, though, I don\u0027t expect textures from other mods to be unloaded that easily.\u003C/p\u003E\u003Cp\u003EAlso, the memory consumption is slowly raising every time when reverting a flight, and I can\u0027t figure if it\u0027s a \u0022natural KSP memory leak\u0022 or just textures not destroyed correctly...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T14:53:03Z\u0022 title=\u002202/06/2015 02:53  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-02-06T14:50:22Z","Content":"\n\u003Cp\u003EDo you use \u0022Destroy(texture)\u0022 on the texture ? The texture are kept outside the c# part of Unity, so you need to call destroy on them to make sure they are unloaded.\u003C/p\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-02-06T15:10:37Z","Content":"\n\u003Cp\u003EIt seems to do the trick, thanks! \u003C/p\u003E\u003Cp\u003EThe memory is still raising from 15-20MB each launch,though, I\u0027ll have to test without mods to see if the game do it naturally.\u003C/p\u003E\u003Cp\u003EUpdate (no need to up the post, it isn\u0027t that important at this point): The memory leak happen with Kerbal X on a stock install: it will raise the RAM usage each launch. The stock shuttle (I forgot his name) isn\u0027t affected by this...\u003C/p\u003E\u003Cp\u003EIt leads me to the conclusion the memory leak is related to parts, and not something from assets. This might need more investigations, though. At least, now I know my code destroy unused objects correctly.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-07T19:29:29Z\u0022 title=\u002202/07/2015 07:29  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 7, 2015\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"}]}