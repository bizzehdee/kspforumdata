{"TopicId":110338,"ForumId":29,"TopicTitle":"How to tell if a part will be visible in the editor","CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-22T04:44:18Z","PageNum":1,"Articles":[{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-22T04:44:18Z","Content":"Before you say \u0022category = none\u0022, the issue is at hand is that the category is no longer a reliable method of determining visibility with the proliferation of custom subcategories, hence my issue.\n\nStock parts are no problem, I can easily filter those out by name. However, I know in the past there has been some mods which have used dummy parts for various reasons that also shouldn\u0027t be visible in the editor. I was wondering if the existing dummy parts share a common attribute that I can check to prevent them being visible in the editor categories.\n\n1) What mods make use of these dummy parts?\n\n2) What common attributes are likely to set them apart from parts that should be visible?"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-22T05:53:53Z","Content":"I\u0027m fairly sure you\u0027re going to have to loop through all the subcategory filters and idewntify the parts that never show up. You could optimize that by simply keeping the list of parts that didn\u0027t show up yet from the whole list of known parts. Beucase there\u0027s no flag for an invisible parts. There are only filters for the parts :/"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-22T06:23:20Z","Content":"That is the method of last resort which is looking increasingly likely the more I look into this. Optimising it isn\u0027t really an issue, it\u0027s just a really awkward way to do things (and prone to issues when people do something unexpected)"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-23T04:32:10Z","Content":"Well the fact is that the available parts in each category are not kept anywhere (public), they\u0027re filtered out, and as you mentioned, the availability of custom made filters kinda prevents relying on the part category."},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-24T02:22:13Z","Content":"Incase anyone else ever needs this\n\n    public static HashSet blackListedParts;void Init() {    ///    if (blackListedParts == null)        findPartsToBlock();    ///}void findPartsToBlock(){[COLOR=#008000]    // all parts that may not be visible[/COLOR]    List partsToCheck = PartLoader.Instance.parts.FindAll(ap =\u003E ap.category == PartCategories.none); [COLOR=#008000]    // Only checking the category which should be Filter by Function[/COLOR]    PartCategorizer.Category mainCat = PartCategorizer.Instance.filters[0]; [COLOR=#008000]    // has a reference to all the subcats that FE added to the category[/COLOR]    customCategory customMainCat = Core.Instance.Categories.Find(C =\u003E C.categoryName == mainCat.button.categoryName); [COLOR=#008000]    // loop through the subcategories. Mark FE ones as seen incase of duplication and check the parts in mod categories for visibility[/COLOR]    HashSet subCatsSeen = new HashSet();    for (int i = 0; i \u003C mainCat.subcategories.Count; i\u002B\u002B)    {        PartCategorizer.Category subCat = mainCat.subcategories[i]; [COLOR=#008000]        // if the name is an FE subcat and the category should have that FE subcat and it\u0027s not the duplicate of one already seen created by another mod, mark it seen and move on[/COLOR]        if (Core.Instance.subCategoriesDict.ContainsKey(subCat.button.categoryName) \u0026\u0026 customMainCat.subCategories.Contains(subCat.button.categoryName) \u0026\u0026 !subCatsSeen.Contains(subCat.button.categoryName))            subCatsSeen.Add(subCat.button.categoryName);        else[COLOR=#008000] // subcat created by another mod[/COLOR]        { [COLOR=#008000]            // can\u0027t remove parts from a collection being looped over, need to remember the visible parts[/COLOR]            List visibleParts = new List();            for (int j = 0; j \u003C partsToCheck.Count; j\u002B\u002B)            {                AvailablePart AP = partsToCheck[j];                if (subCat.exclusionFilter.FilterCriteria.Invoke(AP)) // if visible                    visibleParts.Add(AP); // add to visible list            } [COLOR=#008000]            // remove all visible parts from the list to block[/COLOR]            foreach (AvailablePart ap in visibleParts)                partsToCheck.Remove(ap);        }    }    [COLOR=#008000] // add the blocked parts to a hashset for later lookup[/COLOR]    blackListedParts = new HashSet();    foreach (AvailablePart ap in partsToCheck)        blackListedParts.Add(ap.name);}\n\nparts that are not visible can then be filtered out by\n\n    if (part.category == PartCategories.none \u0026\u0026 blackListedParts.Contains(part.name))\n\nThe faults I see in the above method would be that it assumes all parts will show up in the first category (Filter by Function by default) if they should be visible, or if they create a subcat before FE that duplicates the name of the FE subcat to be added it will assume the mod one to be the FE subcat and break horribly on the FE subcat.\n\nNOTE: findPartsToBlock has to be delayed significantly to ensure all categories are created. FE creates categories between 1 and 4 frames after the categorizer is initialised, the event used by most mods fires somewhere between 5 and 8 frames after categorizer init. The search needs to be delayed atleast that much\n\n**Edited \u003Ctime datetime=\u00222015-05-24T12:35:51Z\u0022 title=\u002205/24/2015 12:35  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 24, 2015\u003C/time\u003E by Crzyrndm**"}]}