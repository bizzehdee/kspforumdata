{"TopicId":185190,"ForumId":29,"TopicTitle":"The KSPField \u0026quot;Current Extension\u0026quot; is populated when the player looks at it, but empty when C# code looks at it. I\u0026#039;m confused.","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-06-06T07:10:51Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-06-06T07:10:51Z","Content":"\n\u003Cp\u003E\nSo, the new piston parts in the Breaking Ground DLC have this string KSPField on the Part Action Window called \u0022Current Extension\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nThis code is returning an empty string for the value shown in the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E window even when the player sees a value there:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E            \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// GetField() is explained below in the next Forum CODE box.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// SuffixName is \u0022Current Extension\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan\u003EBaseField\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E field \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EGetField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EsuffixName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efield \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ethrow\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EKOSLookupFailException\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022FIELD\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E suffixName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ethis\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(!\u003C/span\u003E\u003Cspan\u003EFieldIsVisible\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efield\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E))\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ethrow\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EKOSLookupFailException\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022FIELD\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E suffixName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ethis\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan\u003EObject\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E obj \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E field\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetValue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EpartModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E obj\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nWhen the above is run, the Type of \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Eobj \u003C/span\u003Eis \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EString\u003C/span\u003E, as expected, but its value is the empty string, even though this particular field on the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E shows a value like \u00221.00021301m\u0022.\u00A0 The exceptions shown above are *not* being thrown, so it\u0027s not that.\n\u003C/p\u003E\n\u003Cp\u003E\nFor reference, field.GetValue(PartModule m) is a built-in KSP API call - not something I wrote.\u003Cbr\u003E\nGetField(suffixName) is something I wrote, and it looks like this:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/// \u0026lt;summary\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/// Return the field itself that goes with the name (the BaseField, not the value).\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/// \u0026lt;/summary\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/// \u0026lt;param name=\u0022cookedGuiName\u0022\u0026gt;The case-insensitive guiName (or name if guiname is empty) of the field.\u0026lt;/param\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/// \u0026lt;returns\u0026gt;a BaseField - a KSP type that can be used to get the value, or its GUI name or its reflection info.\u0026lt;/returns\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprotected\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EBaseField\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EGetField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring cookedGuiName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E partModule\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFields\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ECast\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EBaseField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;().\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                \u003C/span\u003E\u003Cspan\u003EFirstOrDefault\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efield \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E string\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEquals\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EGetFieldName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efield\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E),\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E cookedGuiName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EStringComparison\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ECurrentCultureIgnoreCase\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nI doubt that GetField() is failing, given that if it failed I should have thrown one of the two exceptions shown above.\u00A0 It *does* find the KSPField who\u0027s gui name is \u0022Current Extension\u0022, and it *is* reported as currently visible to the user, yet the value the user sees is \u00221.000511m\u0022 while the value the C# code sees when using GetValue() is \u0022\u0022 (empty string).\u003Cbr\u003E\u003Cbr\u003E\nIs there something new about how these fields on the DLC parts work?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-06-06T07:11:26Z\u0022 title=\u002206/06/2019 07:11  AM\u0022 data-short=\u00225 yr\u0022\u003EJune 6, 2019\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-06-06T08:09:05Z","Content":"\n\u003Cp\u003E\nAh -Hah!\u00A0 I found out the key:\n\u003C/p\u003E\n\u003Cp\u003E\nThe value remains empty string UNTIL you open the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E, and THEN it populates.\n\u003C/p\u003E\n\u003Cp\u003E\nOnce you\u0027ve opened the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E once, then it keeps populating after that even if you close the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E, but if you never opened the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E yet during the current loaded scene, then the string is blank until you do.\n\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2019-06-14T02:10:34Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223613166\u0022 data-ipsquote-contentid=\u0022185190\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221559808545\u0022 data-ipsquote-userid=\u002263481\u0022 data-ipsquote-username=\u0022Steven Mading\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 6/6/2019 at 3:09 AM, Steven Mading said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAh -Hah!\u00A0 I found out the key:\n\u003C/p\u003E\n\u003Cp\u003E\nThe value remains empty string UNTIL you open the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E, and THEN it populates.\n\u003C/p\u003E\n\u003Cp\u003E\nOnce you\u0027ve opened the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E once, then it keeps populating after that even if you close the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E, but if you never opened the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E yet during the current loaded scene, then the string is blank until you do.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSigh\u00A0 - Nope.\u00A0 it keeps populating *for a while* with the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E closed after it\u0027s opened.\u00A0 But after some time it goes back to being frozen again until you open the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E.\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2021-08-07T04:19:36Z","Content":"\n\u003Cp\u003E\nSorry to Necro you,\u00A0 but not sorry enough not to do it.\u00A0 \u00A0\u003Cbr\u003E\u003Cbr\u003E\nDid you ever get C# control of the pistons?\u00A0 \u00A0I\u0027ve got control of the hinges and rotational servos (but not the rotor hubs...\u00A0 sigh) directly by setting targetangle values...\u00A0 \u00A0but setting target extension gets me nowhere!\u00A0 I see the new value pop up the next time I open the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E, but the piston ONLY moves if I drag the slider in the \u003Cabbr title=\u0022Part Action Window\u0022\u003EPAW\u003C/abbr\u003E with the mouse!\n\u003C/p\u003E\n"}]}