{"TopicId":129527,"ForumId":29,"TopicTitle":"[Workaround Found] Re-initialize part highlighting in editor after model changes","CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-01-08T16:19:38Z","PageNum":1,"Articles":[{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-01-08T16:19:38Z","Content":"\n\u003Cp\u003E\nHi all,\n\u003C/p\u003E\n\u003Cp\u003E\nWhile working with some of my partModules that deal with procedural models (and/or model-swapping), I\u0027ve found a bit of a bug with the stock highlighting code, and not sure how best to work around it.\n\u003C/p\u003E\n\u003Cp\u003E\nAnytime I change the model components of a part after it has been first initialized (e.g. if I swap models in the editor, or recreate a procedural model in the editor, or just add a new additional model to the part) the mouse-over and stage highlighting for the part stop working for the newly added/changed parts of the model. If I somehow keep the same mesh-renderer for the entire lifetime, and merely swap meshes, the highlighting continues to work.\u00A0 However, there is no easy/clean way to fully replace a complex hierarchical model while re-using existing mesh-renderers.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSo, I suppose the question is this -- how do I tell the stock code to re-initialize the highlighter for a part / tell it to update its list of mesh-renderers that it should highlight?\u00A0 I\u0027ve tried part.highlighter.ReInitMaterials(), with no effect.\u00A0 I\u0027ve tried deleting the existing highlighter component and adding a new one; still did not work.\n\u003C/p\u003E\n\u003Cp\u003E\nThe only other information I could find regarding highlighting on the forums was a snippet from the 0.2.x-0.9 upgrade thread (\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/93010-whats-new-in-090/\u0026amp;page=2#comment-1615674\u0022\u003Ehttp://forum.kerbalspaceprogram.com/index.php?/topic/93010-whats-new-in-090/\u0026amp;page=2#comment-1615674)\u003C/a\u003E but that did not seem to have any new information in it.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThanks in advance for any information,\n\u003C/p\u003E\n\u003Cp\u003E\nShadowmage\n\u003C/p\u003E\n\u003Cp\u003E\nEdit:\n\u003C/p\u003E\n\u003Cp\u003E\nWorkaround code is below:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003Eusing\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003Eusing\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ECollections\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGeneric\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n\u003C/span\u003E\u003Cspan\u003Enamespace\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUTools\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n    \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eclass\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUHighlightFix\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E:\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EPartModule\u003C/span\u003E\u003Cspan\u003E\n    \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003EKSPField\u003C/span\u003E\u003Cspan\u003E]\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E string transformName \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E\u0022HighlightingHackObject\u0022\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E[]\u003C/span\u003E\u003Cspan\u003E cachedRenderList\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EMaterialPropertyBlock\u003C/span\u003E\u003Cspan\u003E mpb\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Estatic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E colorID\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Estatic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E falloffID\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E override \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EOnStart\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EStartState\u003C/span\u003E\u003Cspan\u003E state\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            base\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EOnStart\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Estate\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003EMonoBehaviour\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Eprint\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003E\u0022Starting highlighting fixer for part: \u0022\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E\u002B\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ename\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            dummyTransform \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EFindRecursive\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EtransformName\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EdummyTransform \u003C/span\u003E\u003Cspan\u003E==\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E//should only be null on the prefab part\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan\u003E newObj \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EtransformName\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ename \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E transformName\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ENestToParent\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Epart\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EFindRecursive\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003E\u0022model\u0022\u003C/span\u003E\u003Cspan\u003E));\u003C/span\u003E\u003Cspan\u003E\n\n                \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E render \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAddComponent\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EMeshRenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;();\u003C/span\u003E\u003Cspan\u003E//add a new render\u003C/span\u003E\u003Cspan\u003E\n                render\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUUtils\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EloadMaterial\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Enull\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E//with an empty dummy material, also it doesn\u0027t actually have any mesh\u003C/span\u003E\u003Cspan\u003E\n                dummyTransform \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E//cache reference to it for use for updating\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EGameEvents\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EonEditorShipModified\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EEventData\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EShipConstruct\u003C/span\u003E\u003Cspan\u003E\u0026gt;.\u003C/span\u003E\u003Cspan\u003EOnEvent\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EonEditorVesselModified\u003C/span\u003E\u003Cspan\u003E));\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EStart\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            colorID \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EShaderPropertyID_RimColor\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            falloffID \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EShaderPropertyID_RimFalloff\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            mpb \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EMaterialPropertyBlock\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n            updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;summary\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// Event callback for when vessel is modified in the editor.  Used in this case to update the cached render list (my modular parts always call onEditorVesselModified when their models are changed, so this is a good enough catch for them)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;/summary\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;param name=\u0022ship\u0022\u0026gt;\u0026lt;/param\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E onEditorVesselModified\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EShipConstruct\u003C/span\u003E\u003Cspan\u003E ship\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(!\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Ereturn\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ELateUpdate\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EColor\u003C/span\u003E\u003Cspan\u003E color \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Erenderer\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetColor\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcolorID\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan\u003E falloff \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Erenderer\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetFloat\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EfalloffID\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n\n                mpb\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ESetColor\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcolorID\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E color\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                mpb\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ESetFloat\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EfalloffID\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E falloff\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Ebool\u003C/span\u003E\u003Cspan\u003E updateCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Efalse\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E len \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E cachedRenderList\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELength\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Efor\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E0\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003E len\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i\u003C/span\u003E\u003Cspan\u003E\u002B\u002B)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E//somehow we got a nulled out render, object was likely deleted -- update the cached list, will be correct for the next tick/update cycle\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcachedRenderList\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E]\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E==\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                        updateCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Etrue\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                        \u003C/span\u003E\u003Cspan\u003Econtinue\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n                    cachedRenderList\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E].\u003C/span\u003E\u003Cspan\u003ESetPropertyBlock\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Empb\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EupdateCache\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E updateRenderCache\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            cachedRenderList \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E[]\u003C/span\u003E\u003Cspan\u003E renders \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponentsInChildren\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;(\u003C/span\u003E\u003Cspan\u003Etrue\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;\u003C/span\u003E\u003Cspan\u003E rendersToCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;();\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E len \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E renders\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELength\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Efor\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E0\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003E len\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i\u003C/span\u003E\u003Cspan\u003E\u002B\u002B)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E//skip the dummy renderer; though it honestly should not matter if it is in the list or not, as we are pulling the current vals from it before setting anything\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Erenders\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E].\u003C/span\u003E\u003Cspan\u003Etransform \u003C/span\u003E\u003Cspan\u003E!=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    rendersToCache\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Erenders\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E]);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            cachedRenderList \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E rendersToCache\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EToArray\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n    \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-03-10T23:45:49Z\u0022 title=\u002203/10/2016 11:45  PM\u0022 data-short=\u00228 yr\u0022\u003EMarch 10, 2016\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-08T15:58:00Z","Content":"\n\u003Cp\u003E\nHave found how to potentially solve this problem.\u00A0 The real problem?\u00A0 It is all private fields that need to be manipulated, without any proper access available:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nHere is the hacky solution -- null out the renderer list and the part will re-initialize it next time it attempts to be highlighted:\n\u003C/p\u003E\n\u003Cp\u003E\n(Disclaimer, don\u0027t actually do this / use this code...for various reasons)\u003Cbr\u003E\u003Cbr\u003E\nMonoBehaviour.print(\u0022updating part highlighter for: \u0022 \u002B part);\u003Cbr\u003E\nFieldInfo[] fi = typeof(Part).GetFields(BindingFlags.NonPublic | BindingFlags.Instance);\u003Cbr\u003E\nforeach (FieldInfo f in fi)\u003Cbr\u003E\n{\u003Cbr\u003E\n\u00A0\u00A0\u00A0 if (f.FieldType == typeof(List\u0026lt;Renderer\u0026gt;)) // somewhere Part has a list of renderers that it uses as a cache for the renderers that should be highlighted.\u003Cbr\u003E\n\u00A0\u00A0\u00A0 {\u003Cbr\u003E\n\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 f.SetValue(part, null);\u003Cbr\u003E\n\u00A0\u00A0\u00A0 }\u003Cbr\u003E\n}\n\u003C/p\u003E\n\u003Cp\u003E\n(No, I will not be publishing my mod with the above code; merely posting it as an academic example of the solution and the problems with the solution)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275006\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0022\u003E@NathanKell\u003C/a\u003E\u00A0 Any chance of getting proper access to the part cached renderer list, in order to clear it to re-initialize the part highlighting properly?\u00A0 (even just a method to re-initialize the list, or even some internal code that auto-re-initializes the list when the render changes).\u00A0 (Again, sorry to bug you, but unsure where else to turn that has any chance of getting things fixed; and again, feel free to ignore me or just tell me no \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E).\u003Cbr\u003E\u003Cbr\u003E\n90% of my modular parts have problems with the current highlighting code while in the editer -- as they change models after the part is initialized (by instantiating entirely new models), these new models never get re-cached/added to the cached render list, and are thus never highlighted.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2016-03-08T20:25:26Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/138730-shadowmage/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022138730\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/138730-shadowmage/\u0022\u003E@Shadowmage\u003C/a\u003E ok. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-08T20:41:18Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222448054\u0022 data-ipsquote-contentid=\u0022129527\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221457468726\u0022 data-ipsquote-userid=\u002275006\u0022 data-ipsquote-username=\u0022NathanKell\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 minutes ago, NathanKell said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/138730-shadowmage/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022138730\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/138730-shadowmage/\u0022\u003E@Shadowmage\u003C/a\u003E ok. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThat \u0027bug\u0027 is the longest-standing issue ticket in my repo, would be nice to finally get it cleared out (though obviously not until 1.1).\n\u003C/p\u003E\n\u003Cp\u003E\nSeriously, thanks again, and I promise to stop bugging you \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-03-09T08:47:26Z","Content":"\n\u003Cp\u003E\nDo you try to set part.hasHeiarchyModel to true ?\n\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-09T15:31:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222448898\u0022 data-ipsquote-contentid=\u0022129527\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221457513246\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDo you try to set part.hasHeiarchyModel to true ?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI have not messed with that variable at all (assumed it was auto set from when the models were added to the part, and used for some other internal use).\n\u003C/p\u003E\n\u003Cp\u003E\nWill investigate tonight to see if it has any effect.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2016-03-09T15:38:17Z","Content":"\n\u003Cp\u003E\nnot sure it will change much but try it.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-09T23:30:11Z","Content":"\n\u003Cp\u003E\nApparently the parts are already set with \u0027hasHierarchyModel = true\u0027 (or at least that is what it prints while debugging).\n\u003C/p\u003E\n\u003Cp\u003E\nToggling that flag between true/false had no effect on highlighting though.\n\u003C/p\u003E\n\u003Cp\u003E\nOhwell, thanks, was at least worth a try \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-03-10T10:23:57Z","Content":"\n\u003Cp\u003E\nWell ... you could add a fake renderer that will be controlled by the stock highlighting code in Part, then copy its material properties to all your other renderers with a strategically placed MonoBehaviour. That\u0027s the best I could come up with that will cover all the edge cases (such as when the editor logic changes highlight colors or freezes Parts). Proof of concept:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n    [KSPAddon(KSPAddon.Startup.MainMenu, true)]\n    class AddHighlightingFix : MonoBehaviour\n    {\n        public const string DummyTransformName = \u0022dummy_highlighter_dont_delete\u0022;\n\n        private void Start()\n        {\n            DontDestroyOnLoad(this);\n\n            GetAllPartModelTransforms()\n                .ToList()\n                .ForEach(AddHighlightCopierAndDummyRenderer);\n        }\n\n\n        // note: it\u0027s important to avoid adding our MonoBehaviour directly to the Part\u0027s GO! The game will strip it out\n        // on root parts if it isn\u0027t one of the allowed types (PartModule in particular but there are some others)\n        private static IEnumerable\u0026lt;Transform\u0026gt; GetAllPartModelTransforms()\n        {\n            return PartLoader.LoadedPartsList.Where(ap =\u0026gt; ap.partPrefab.transform.Find(\u0022model\u0022) != null)\n                .Select(ap =\u0026gt; ap.partPrefab.transform.Find(\u0022model\u0022));\n        }\n\n\n        private static void AddHighlightCopierAndDummyRenderer(Transform partModelTransform)\n        {\n            partModelTransform.gameObject.AddComponent\u0026lt;CopyHighlightFromDummyRenderer\u0026gt;();\n\n            var dummyContainer = new GameObject(DummyTransformName);\n            dummyContainer.transform.parent = partModelTransform;\n            DontDestroyOnLoad(dummyContainer);\n\n            dummyContainer.AddComponent\u0026lt;MeshRenderer\u0026gt;();\n        }\n    }\n\n\n    class CopyHighlightFromDummyRenderer : MonoBehaviour\n    {\n        private Renderer _dummyRenderer;\n        private readonly MaterialPropertyBlock _propertyBlock = new MaterialPropertyBlock();\n\n        private List\u0026lt;Renderer\u0026gt; _allOtherRenderers = new List\u0026lt;Renderer\u0026gt;();\n \n        private void Awake()\n        {\n            var dummyTransform = transform.Find(AddHighlightingFix.DummyTransformName);\n\n            if (!HighLogic.LoadedSceneIsEditor || dummyTransform == null || dummyTransform.renderer == null)\n            {\n                Destroy(this);\n                return;\n            }\n\n            _dummyRenderer = dummyTransform.renderer;\n        }\n\n\n        private void Start()\n        {\n            OnTransformChildrenChanged();\n        }\n\n\n        private void OnTransformChildrenChanged()\n        {\n            _allOtherRenderers = GetComponentsInChildren\u0026lt;Renderer\u0026gt;(true).Except(new[] { _dummyRenderer }).ToList();\n        }\n\n\n        private void LateUpdate()\n        {\n            // grab current highlight colors\n            _propertyBlock.SetColor(HighLogic.ShaderPropertyID_RimColor,\n                _dummyRenderer.material.GetColor(HighLogic.ShaderPropertyID_RimColor));\n\n            _propertyBlock.SetFloat(HighLogic.ShaderPropertyID_RimFalloff,\n                _dummyRenderer.material.GetFloat(HighLogic.ShaderPropertyID_RimFalloff));\n\n            // apply to all other renderers\n            bool refreshChildren = false;\n\n            foreach (var r in _allOtherRenderers)\n            {\n                if (r == null) // if somebody destroyed a Renderer, we\u0027ll want to refresh the list\n                {\n                    refreshChildren = true;\n                    continue;\n                }\n\n                r.SetPropertyBlock(_propertyBlock);\n            }\n\n            if (refreshChildren) OnTransformChildrenChanged();\n        }\n    }\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-10T15:25:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222450505\u0022 data-ipsquote-contentid=\u0022129527\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221457605437\u0022 data-ipsquote-userid=\u002275857\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, xEvilReeperx said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell ... you could add a fake renderer that will be controlled by the stock highlighting code in Part, then copy its material properties to all your other renderers with a strategically placed MonoBehaviour. That\u0027s the best I could come up with that will cover all the edge cases (such as when the editor logic changes highlight colors or freezes Parts). Proof of concept:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI must admit that I would not have thought about doing it that way, and I believe what you are proposing -would- work.\u00A0 So... kudos, have a cookie \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nI would probably do it a bit differently though, by actually using a custom PartModule and.\u00A0 That partModule would add its own GameObject w/renderer (and an empty mesh) to the model during prefab creation (this GO will be copied to the live parts by standard Unity copy/instantiation mechanics); could then easily query this (non-changing/never rem\u0060oved) game-object for its material highlighter/color stats and re-seat them onto the actual models.\u00A0 Keeps the code nice and contained within the part, and could easily be added/removed from specific parts as needed.\n\u003C/p\u003E\n\u003Cp\u003E\nProbably will use this as a workaround until/if other solutions become available.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-03-10T15:25:40Z\u0022 title=\u002203/10/2016 03:25  PM\u0022 data-short=\u00228 yr\u0022\u003EMarch 10, 2016\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-03-10T15:34:16Z","Content":"\n\u003Cp\u003E\nThat\u0027s essentially what the above does. I avoided using a PartModule because it has no advantages over a MonoBehaviour in this case while costing memory and performance. Up to you though \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2016-03-10T17:51:00Z","Content":"\n\u003Cp\u003E\n(untested) PartModule version, using the same basic methods as EvilReeper had posted above (won\u0027t be able to test it for another several hours unfortunately):\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003Eusing\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003Eusing\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ECollections\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGeneric\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n\u003C/span\u003E\u003Cspan\u003Enamespace\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUTools\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n    \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eclass\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUHighlightFix\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E:\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EPartModule\u003C/span\u003E\u003Cspan\u003E\n    \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003EKSPField\u003C/span\u003E\u003Cspan\u003E]\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E string transformName \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E\u0022HighlightingHackObject\u0022\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E[]\u003C/span\u003E\u003Cspan\u003E cachedRenderList\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EMaterialPropertyBlock\u003C/span\u003E\u003Cspan\u003E mpb\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Estatic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E colorID\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Estatic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E falloffID\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E override \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EOnStart\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EStartState\u003C/span\u003E\u003Cspan\u003E state\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            base\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EOnStart\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Estate\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003EMonoBehaviour\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Eprint\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003E\u0022Starting highlighting fixer for part: \u0022\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E\u002B\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ename\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            dummyTransform \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EFindRecursive\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EtransformName\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EdummyTransform \u003C/span\u003E\u003Cspan\u003E==\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E//should only be null on the prefab part\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan\u003E newObj \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EGameObject\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EtransformName\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ename \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E transformName\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ENestToParent\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Epart\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EFindRecursive\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003E\u0022model\u0022\u003C/span\u003E\u003Cspan\u003E));\u003C/span\u003E\u003Cspan\u003E\n\n                \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E render \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAddComponent\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EMeshRenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;();\u003C/span\u003E\u003Cspan\u003E//add a new render\u003C/span\u003E\u003Cspan\u003E\n                render\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ESSTUUtils\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EloadMaterial\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Enull\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E//with an empty dummy material, also it doesn\u0027t actually have any mesh\u003C/span\u003E\u003Cspan\u003E\n                dummyTransform \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E newObj\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E//cache reference to it for use for updating\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EGameEvents\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EonEditorShipModified\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EEventData\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003EShipConstruct\u003C/span\u003E\u003Cspan\u003E\u0026gt;.\u003C/span\u003E\u003Cspan\u003EOnEvent\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EonEditorVesselModified\u003C/span\u003E\u003Cspan\u003E));\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EStart\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            colorID \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EShaderPropertyID_RimColor\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            falloffID \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EShaderPropertyID_RimFalloff\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            mpb \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EMaterialPropertyBlock\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n            updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;summary\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// Event callback for when vessel is modified in the editor.  Used in this case to update the cached render list (my modular parts always call onEditorVesselModified when their models are changed, so this is a good enough catch for them)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;/summary\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E/// \u0026lt;param name=\u0022ship\u0022\u0026gt;\u0026lt;/param\u0026gt;\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E onEditorVesselModified\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EShipConstruct\u003C/span\u003E\u003Cspan\u003E ship\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(!\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Ereturn\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Epublic\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003ELateUpdate\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EHighLogic\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELoadedSceneIsEditor\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003EColor\u003C/span\u003E\u003Cspan\u003E color \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Erenderer\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetColor\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcolorID\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan\u003E falloff \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Erenderer\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Ematerial\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetFloat\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EfalloffID\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n\n                mpb\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ESetColor\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcolorID\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E color\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                mpb\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ESetFloat\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EfalloffID\u003C/span\u003E\u003Cspan\u003E,\u003C/span\u003E\u003Cspan\u003E falloff\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Ebool\u003C/span\u003E\u003Cspan\u003E updateCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Efalse\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E len \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E cachedRenderList\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELength\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Efor\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E0\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003E len\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i\u003C/span\u003E\u003Cspan\u003E\u002B\u002B)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E//somehow we got a nulled out render, object was likely deleted -- update the cached list, will be correct for the next tick/update cycle\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EcachedRenderList\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E]\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E==\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                        updateCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Etrue\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                        \u003C/span\u003E\u003Cspan\u003Econtinue\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n                    \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n                    cachedRenderList\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E].\u003C/span\u003E\u003Cspan\u003ESetPropertyBlock\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Empb\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003EupdateCache\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    updateRenderCache\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n        \u003C/span\u003E\u003Cspan\u003Eprivate\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Evoid\u003C/span\u003E\u003Cspan\u003E updateRenderCache\u003C/span\u003E\u003Cspan\u003E()\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n            cachedRenderList \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E null\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E[]\u003C/span\u003E\u003Cspan\u003E renders \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E part\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003Etransform\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EGetComponentsInChildren\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;(\u003C/span\u003E\u003Cspan\u003Etrue\u003C/span\u003E\u003Cspan\u003E);\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;\u003C/span\u003E\u003Cspan\u003E rendersToCache \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003Enew\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003ERenderer\u003C/span\u003E\u003Cspan\u003E\u0026gt;();\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E len \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E renders\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003ELength\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003Efor\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E0\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i \u003C/span\u003E\u003Cspan\u003E\u0026lt;\u003C/span\u003E\u003Cspan\u003E len\u003C/span\u003E\u003Cspan\u003E;\u003C/span\u003E\u003Cspan\u003E i\u003C/span\u003E\u003Cspan\u003E\u002B\u002B)\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E//skip the dummy renderer; though it honestly should not matter if it is in the list or not, as we are pulling the current vals from it before setting anything\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003Eif\u003C/span\u003E\u003Cspan\u003E \u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Erenders\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E].\u003C/span\u003E\u003Cspan\u003Etransform \u003C/span\u003E\u003Cspan\u003E!=\u003C/span\u003E\u003Cspan\u003E dummyTransform\u003C/span\u003E\u003Cspan\u003E)\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E{\u003C/span\u003E\u003Cspan\u003E\n                    rendersToCache\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan\u003E(\u003C/span\u003E\u003Cspan\u003Erenders\u003C/span\u003E\u003Cspan\u003E[\u003C/span\u003E\u003Cspan\u003Ei\u003C/span\u003E\u003Cspan\u003E]);\u003C/span\u003E\u003Cspan\u003E\n                \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n            cachedRenderList \u003C/span\u003E\u003Cspan\u003E=\u003C/span\u003E\u003Cspan\u003E rendersToCache\u003C/span\u003E\u003Cspan\u003E.\u003C/span\u003E\u003Cspan\u003EToArray\u003C/span\u003E\u003Cspan\u003E();\u003C/span\u003E\u003Cspan\u003E\n        \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\n    \u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003Cspan\u003E\n\u003C/span\u003E\u003Cspan\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nMight just merge this code into the existing effected PartModules... or might leave it as a stand-alone fix (as that is much less copy/pasting/editing of existing code).\n\u003C/p\u003E\n\u003Cp\u003E\nWill update this post if I find the above code needs changed/edited/fixed/updated.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnd thanks for the help and ideas on how to solve/work around this one -- have been banging my head on it for literally months with no other progress \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: Updated with fixed/tested/working code\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-03-10T23:46:37Z\u0022 title=\u002203/10/2016 11:46  PM\u0022 data-short=\u00228 yr\u0022\u003EMarch 10, 2016\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"}]}