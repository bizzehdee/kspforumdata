{"TopicId":181228,"ForumId":29,"TopicTitle":"How to read custom config in a PartModule?","CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T02:00:55Z","PageNum":1,"Articles":[{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T02:00:55Z","Content":"\n\u003Cp\u003E\nApologies if this seems like a silly question, but I\u0027ve been going around in circles and haven\u0027t been able to find any documentation that answers my question:\n\u003C/p\u003E\n\u003Cp\u003E\nDetails below, but what it boils down to is \u0022I\u0027m implementing a new PartModule, which needs to load custom config data at OnLoad time, and needs to access that data at OnStart time.\u00A0 How do I access the data?\u0022\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EWhat I\u0027m trying to do\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m writing my own PartModule, and it needs to have a data structure in it that\u0027s complex enough that the usual [KSPField] stuff won\u0027t do.\u00A0 What I really need is to have some custom config in it, i.e. the config would look like like this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nMODULE {\n    name = MySuperCoolPartModule\n    \n    SOME_CUSTOM_CONFIG {\n        key1 = value1\n        key2 = value2\n    }\n    \n    // maybe some more SOME_CUSTOM_CONFIG blocks\n}\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow I\u0027ve been trying to do it\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWell, I see that PartModule has a handy overrideable OnLoad() method that receives a ConfigNode as input, so that seems to fit the bill!\u00A0 I want to have code that will read the SOME_CUSTOM_CONFIG nodes (and their nested structure therein) and store that to some data member on the PartModule.\u00A0 Seems pretty straightforward:\u00A0 I override OnLoad, then take the ConfigNode that\u0027s passed in and call rootNode.nodes.GetNodes(\u0022SOME_CUSTOM_CONFIG\u0022) on\u00A0 it to get those config nodes, then write whatever code I need to set things.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EWhat\u0027s working\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI see that my OnLoad code is getting called \u003Cem\u003E\u003Cu\u003Eduring KSP startup\u003C/u\u003E\u003C/em\u003E, i.e. before I actually load a game and go into the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E and start placing parts.\u00A0 I\u0027ve added some log lines to my OnLoad processing, and I can see that it\u0027s doing everything that I want, exactly the way I want it to work.\u00A0 Since it\u0027s being called on KSP startup, I assume that the place that my constructed data structures are going are onto some prefab version of the part where the PartModule lives.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EWhat\u0027s \u003Cem\u003E\u003Cu\u003Enot\u003C/u\u003E\u003C/em\u003E working\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nHowever... when I\u0027m in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E and I actually create an instance of the part... OnStart gets called on the PartModule that\u0027s on the newly created instance of the part.\u00A0 But the data members that get set at OnLoad time... aren\u0027t there.\u00A0 It\u0027s as if OnLoad never happened.\u00A0 (Certainly OnLoad doesn\u0027t get called when the player instantiates a part in the vehicle editor.)\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMySuperCoolPartModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPartModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n    \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eprivate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESomeSpecialDataStructure\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E stuff \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n    \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E override \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EOnLoad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E node\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Code here that initializes stuff based on the contents\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// of node. Upon completion, stuff is no longer null.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n    \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E override \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EOnStart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EStartState\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E state\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// I find that stuff is null.  Now what?\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nI find that OnLoad is called once at \u003Cem\u003E\u003Cu\u003EKSP startup\u003C/u\u003E\u003C/em\u003E time, I assume on the part prefab.\u00A0 And OnStart is called at \u003Cem\u003E\u003Cu\u003Epart instantiation\u003C/u\u003E\u003C/em\u003E time, on the particular instance of the part.\n\u003C/p\u003E\n\u003Cp\u003E\nBut if that\u0027s the case... what do I do?\u00A0 How do I get at the data at OnStart time, which is when I need it so that I can do stuff with it?\n\u003C/p\u003E\n\u003Cp\u003E\n(I\u0027ve implemented plenty of mods before, and usually just use [KSPField] for the data on my parts that I need to read from config, and that works great-- the field values get copied across to the instance of the PartModule, just the way I\u0027d expect.\u00A0 So really what I\u0027m trying to figure out is how to accomplish the same thing when the data is coming from custom config nodes instead of by using [KSPField].)\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2019-01-08T02:53:52Z","Content":"\n\u003Cp\u003E\nOn phone, so I can\u0027t be too detailed. But you are right that OnLoad does not get called when you spawn a part in the editor. It will be called when a vessel is loaded in flight (and I think when a vessel is rolled out to the launchpad), and also when you load a vessel in the editor. And I think OnStart does not get called when a vessel is loaded in the editor, but I\u0027m not sure about that.\n\u003C/p\u003E\n\u003Cp\u003E\nI know, it\u0027s very irritating.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou are right about the data being loaded into the prefab during startup, OnLoad is also called there.\n\u003C/p\u003E\n\u003Cp\u003E\nYou might be able to process all of the data that you need at that point, so that it is stored in the part prefab and carried over to newly instatiated copies of the part.\n\u003C/p\u003E\n"},{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T17:12:21Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223518269\u0022 data-ipsquote-contentid=\u0022181228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221546916032\u0022 data-ipsquote-userid=\u002257416\u0022 data-ipsquote-username=\u0022DMagic\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, DMagic said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYou might be able to process all of the data that you need at that point, so that it is stored in the part prefab and carried over to newly instatiated copies of the part.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks!\n\u003C/p\u003E\n\u003Cp\u003E\nMy problem is that it doesn\u0027t seem to be making the leap from the part prefab to the instantiated copies.\u00A0 Not sure what the \u0022right\u0022 answer is, but I\u0027ve found a (somewhat clunky) workaround that works well enough.\u00A0 I just have a static Dictionary\u0026lt;string, MyCustomDataStructure\u0026gt; that maps from part name to the thing I want.\u00A0 That way, instantiated copies of the module can get at the data since my part module knows what part it\u0027s on.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2019-01-08T17:16:49Z","Content":"\n\u003Cp\u003E\nYou could also populate a list/dictionary in the prefab, then read from that list when a part\u0027s OnStart is called through the part\u0027s partInfo.partPrefab, or whatever the AvailablePart reference is called.\n\u003C/p\u003E\n\u003Cp\u003E\nYou should be able to propagate data from the prefab to the instantiated copy, as long as the data is serializable, and you would have to make sure the data collection is either public or marked with the SerializeField attribute. But that kind of thing can be tricky sometimes.\n\u003C/p\u003E\n"},{"CreatedByName":"MOARdV","CreatedById":60950,"CreatedDateTime":"2019-01-16T14:55:24Z","Content":"\n\u003Cp\u003E\nSorry I didn\u0027t see this earlier.\u00A0You\u0027ve probably already got something working.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat I do is fetch the ConfigNode for the PartModule:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E myNode \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUtility\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetPartModuleConfigNode\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Epart\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etypeof\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EMASFlightComputer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003EName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nwith GetPartModuleConfigNode defined over here:\u00A0\u003Ca href=\u0022https://github.com/MOARdV/AvionicsSystems/blob/6a6d41612236451078eaa1109426bae24ff4a962/Source/Utility.cs#L551-L575\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/MOARdV/AvionicsSystems/blob/6a6d41612236451078eaa1109426bae24ff4a962/Source/Utility.cs#L551-L575\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThen it\u0027s a case of reading through a ConfigNode.\n\u003C/p\u003E\n"},{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-16T20:38:21Z","Content":"\n\u003Cp\u003E\nThanks, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/60950-moardv/\u0026amp;do=hovercard\u0022 data-mentionid=\u002260950\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/60950-moardv/\u0022 rel=\u0022\u0022\u003E@MOARdV\u003C/a\u003E.\u00A0 \u003Cspan\u003E\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EI\u0027ll bear that in mind for future reference.\u00A0 In this case, I already coded a workaround that serves well enough for my current purpose, so I\u0027m good.\u003C/span\u003E\n\u003C/p\u003E\n"}]}