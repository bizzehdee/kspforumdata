{"TopicId":122636,"ForumId":29,"TopicTitle":"Trying to replace ModuleLandingLeg","CreatedByName":"civilwargeeky","CreatedById":69008,"CreatedDateTime":"2015-10-09T01:54:07Z","PageNum":1,"Articles":[{"CreatedByName":"civilwargeeky","CreatedById":69008,"CreatedDateTime":"2015-10-09T01:54:07Z","Content":"\n\u003Cp\u003EHi! Basically I\u0027m trying to replace the stock ModuleLandingLeg to be my \u0022ModuleFixedLeg\u0022 with everything exactly the same, except that I replace the repair functionality with my own (where I can change the engineer level required to fix it).\u003C/p\u003E\u003Cp\u003EBasically, to start off I made\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class ModuleFixedLeg: ModuleLandingLeg\u003Cbr\u003E    {\u003Cbr\u003E\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand in my module manager config, I have\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E@PART[*]:HAS[@MODULE[ModuleLandingLeg]]:AFTER[EngineerLevelFixer]\u003Cbr\u003E{\u003Cbr\u003E  @MODULE[ModuleLandingLeg]\u003Cbr\u003E  {\u003Cbr\u003E    @name=ModuleFixedLeg\u003Cbr\u003E  }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo when I load the code, I go into the VAB, and try to select a Landing Leg, I get the following error in the KSP.log\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[EXC 20:42:18.764] NullReferenceException: Object reference not set to an instance of an object\u003Cbr\u003E\tModuleLandingLeg.AnimationInitialState ()\u003Cbr\u003E\tModuleLandingLeg.InitialSetup ()\u003Cbr\u003E\tModuleLandingLeg.OnInitialize ()\u003Cbr\u003E\tPart.InitializeModules ()\u003Cbr\u003E\tEditorLogic.SpawnPart (.AvailablePart partInfo)\u003Cbr\u003E\tEditorLogic.OnPartListIconTap (.AvailablePart p)\u003Cbr\u003E\tEditorPartList.TapIcon (.AvailablePart part)\u003Cbr\u003E\tEditorPartIcon.OnTap ()\u003Cbr\u003E\tEditorPartIcon.MouseInput (.POINTER_INFO\u0026amp; ptr)\u003Cbr\u003E\tUIButton.OnInput (.POINTER_INFO\u0026amp; ptr)\u003Cbr\u003E\tAutoSpriteControlBase.OnInput (POINTER_INFO ptr)\u003Cbr\u003E\tUIManager.DispatchHelper (.POINTER_INFO\u0026amp; curPtr, Int32 camIndex)\u003Cbr\u003E\tUIManager.DispatchInput ()\u003Cbr\u003E\tUIManager.Update ()\u003Cbr\u003E\tUIManager.DidAnyPointerHitUI ()\u003Cbr\u003E\tVABCamera.Update ()\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd that\u0027s it... I didn\u0027t change anything else. This method worked fine when I tried it with wheels. What do I need to change to make my code work/where can I look for an example of this working properly?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-09T09:30:30Z","Content":"\n\u003Cp\u003EThe problem is that your module is missing three Events that are apparently accessed inside ModuleLandingLeg.AnimationInitialState(): RepairLegs, LockSuspension and UnLockSuspension. They\u0027re associated with private methods that your class doesn\u0027t inherit. \u003C/p\u003E\u003Cp\u003EYou can implement them yourself but you might have to reimplement any logic they have. I got around having to use reflection to access private stuff (bad) by renaming my custom events to impersonate the missing ones and then using abusing Unity\u0027s message broadcast to call the originals. It\u0027s pretty ugly but you can try it out if you\u0027d like. Not well tested\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class ModuleFixedLeg : ModuleLandingLeg\u003Cbr\u003E{\u003Cbr\u003E    private bool _eventsInitialized = false;\u003Cbr\u003E\u003Cbr\u003E    private KSPEvent GetCustomEventMethodInfo(string methodName)\u003Cbr\u003E    {\u003Cbr\u003E        return (KSPEvent)GetType()\u003Cbr\u003E            .GetMethod(methodName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)\u003Cbr\u003E            .GetCustomAttributes(typeof(KSPEvent), true)\u003Cbr\u003E            .Single();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private BaseEvent CreateEvent(string originalMethod, string customMethodName)\u003Cbr\u003E    {\u003Cbr\u003E        return new BaseEvent(Events, originalMethod,\u003Cbr\u003E            (BaseEventDelegate)\u003Cbr\u003E                Delegate.CreateDelegate(typeof (BaseEventDelegate), this, customMethodName),\u003Cbr\u003E                    GetCustomEventMethodInfo(customMethodName));\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void InitializeEvents()\u003Cbr\u003E    {\u003Cbr\u003E        if (_eventsInitialized) return;\u003Cbr\u003E        _eventsInitialized = true;\u003Cbr\u003E\u003Cbr\u003E        Events.Remove(Events[\u0022CustomLockSuspension\u0022]);\u003Cbr\u003E        Events.Remove(Events[\u0022CustomUnLockSuspension\u0022]);\u003Cbr\u003E\u003Cbr\u003E        Events.Add(CreateEvent(\u0022LockSuspension\u0022, \u0022CustomLockSuspension\u0022));\u003Cbr\u003E        Events.Add(CreateEvent(\u0022UnLockSuspension\u0022, \u0022CustomUnLockSuspension\u0022));\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public override void OnInitialize()\u003Cbr\u003E    {\u003Cbr\u003E        InitializeEvents();\u003Cbr\u003E        base.OnInitialize();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        InitializeEvents();\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiName = \u0022Repair Leg\u0022, guiActiveUnfocused = true, externalToEVAOnly = true, guiActive = false, unfocusedRange = 4f)]\u003Cbr\u003E    private void RepairLeg()\u003Cbr\u003E    {\u003Cbr\u003E        // only jeb can repair these legs\u003Cbr\u003E        if (FlightGlobals.ActiveVessel.isEVA \u0026amp;\u0026amp;\u003Cbr\u003E            FlightGlobals.ActiveVessel.parts.First().protoModuleCrew.Any(pcm =\u0026gt; pcm.name.StartsWith(\u0022Jeb\u0022)))\u003Cbr\u003E        {\u003Cbr\u003E            legState = LegStates.DEPLOYED;\u003Cbr\u003E            SendMessage(\u0022DecompressSuspension\u0022, SendMessageOptions.RequireReceiver);\u003Cbr\u003E            Events[\u0022TestBreak\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E        else ScreenMessages.PostScreenMessage(\u0022Only Jeb can fix this\u0022, 5f);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiName = \u0022Lock Suspension\u0022, guiActiveEditor = true, guiActiveUnfocused = true,\u003Cbr\u003E        externalToEVAOnly = true, guiActive = true, unfocusedRange = 4f)]\u003Cbr\u003E    private void CustomLockSuspension()\u003Cbr\u003E    {\u003Cbr\u003E        SendMessage(\u0022LockSuspension\u0022, SendMessageOptions.RequireReceiver);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiName = \u0022UnLock Suspension\u0022, guiActiveEditor = true, guiActiveUnfocused = true,\u003Cbr\u003E        externalToEVAOnly = true, guiActive = true, unfocusedRange = 4f)]\u003Cbr\u003E    private void CustomUnLockSuspension()\u003Cbr\u003E    {\u003Cbr\u003E        SendMessage(\u0022UnLockSuspension\u0022, SendMessageOptions.RequireReceiver);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiName = \u0022Test Break\u0022, guiActiveEditor = false, guiActiveUnfocused = true, guiActive = true)]\u003Cbr\u003E    private void TestBreak()\u003Cbr\u003E    {\u003Cbr\u003E        SendMessage(\u0022BreakLeg\u0022, SendMessageOptions.RequireReceiver);\u003Cbr\u003E        Events[\u0022TestBreak\u0022].active = false;\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"civilwargeeky","CreatedById":69008,"CreatedDateTime":"2015-10-10T04:41:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003E-snip-\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks so much! After a bit of messing around, I got your messing about I got my code to work properly. I don\u0027t really understand the reflection very well, so I just copied your first two methods wholesale. They do work fine though \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI discovered that I couldn\u0027t just have an object field for \u0022hasInitialized\u0022 because apparently the object is copied on symmetry (or something?) because I got NREs when I used symmetry on the parts. And I couldn\u0027t not check because the game added the fields twice more on ship launch. Instead I just checked if the field was null before adding it.\u003C/p\u003E\u003Cp\u003EThen I used my own logic for the repair leg \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EI had a couple of questions though. First, how did you know what methods I needed to implement? Those methods weren\u0027t in the generated declaration in Visual Studio, nor were they in the error message I got originally.\u003C/p\u003E\u003Cp\u003ESecond, how do you know what messages to call in \u0022SendMessage\u0022? Is there a list somewhere? Also along with this , what does RequireReceiver/DontRequireReceiver do in the SendMessage?\u003C/p\u003E\u003Cp\u003EAnyways, thanks for all the help!\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-10T05:13:44Z","Content":"\n\u003Cp\u003EI had a sneaking suspicion which I confirmed by printing all events on the derived object and compared with the original PartModule. The names of the events themselves will give away the original method name (you can see how I don\u0027t even bother checking if \u0022CustomLockSuspension\u0022 exists in the event list, I know it\u0027s there because I defined a method with that name). You can also use a decompiler which is probably the worst kept secret of modding.\u003C/p\u003E\u003Cp\u003EAs for the \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/GameObject.SendMessage.html\u0022 rel=\u0022external nofollow\u0022\u003ESendMessage\u003C/a\u003E calls, that\u0027s a Unity thing. RequireReceiver is just used to prevent the message broadcast from silently failing in case a name is mistyped or changes in the future\u003C/p\u003E\n"}]}