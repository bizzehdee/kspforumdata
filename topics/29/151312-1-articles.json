{"TopicId":151312,"ForumId":29,"TopicTitle":"Preventing keystroke fallthrough on text field usage between different mods(InputLockManager)","CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2016-11-02T04:38:28Z","PageNum":1,"Articles":[{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2016-11-02T04:38:28Z","Content":"\n\u003Cp\u003E\nAlright, due to a conflict in how my mod (Action Groups Express) and another mod (Camera Focus Changer) handle the InputLockManager class, I\u0027ve spent the evening digging into it and for discovered that for all our mods to play nicely together we as a community are going to need to come to a consensus about how we are going to handle the InputLockManager class.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, InputLockManager works on the ControlTypes enum which causes some wierdness as things don\u0027t quite behave as expected. A perfect example is the conflict between the two mods above that caused me to start looking into this.\n\u003C/p\u003E\n\u003Cp\u003E\nFirst, Action Group Extended replaces the stock custom action groups so it applies a lock of ControlTypes.Custom_Actions to prevent KSP from activating those actions.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, Camera Focus Changer was checking the InputLockManager.IsLocked(ControlTypes.All_Ship_Actions) to see if another mod had locked out commands due to a text entry field having focus.\n\u003C/p\u003E\n\u003Cp\u003E\nThis caused the conflict because ControlTypes.All_Ship_Actions is a complex enum with multiple values set to 1, one of which was ControlTypes.Custom_Actions as set by AGX. Therefore when Camera Focus Changer checked the InputLockManager class on the All_Ship_Actions control type, InputLockManager was telling it yes, All_Ship_Actions is indeed locked, even though Custom_Actions was the only control type actually locked. So Camera Focus Changer thought another mod had focus on a text box and ignored the keypress when it shouldn\u0027t have resulting in Camera_Focus_Changer appearing to be broken.\n\u003C/p\u003E\n\u003Cp\u003E\nTo keep this from happening again, we as a community need to do is decide which ControlType value we are going to use when we want to lock inputs due to a text entry field having focus so other mods know where to look when you set this control lock.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nMy suggestion after having done all this digging is the KeyboardInput control type.\n\u003C/p\u003E\n\u003Cp\u003E\nIf your mod has a text box, use the KeyboardInput controltype and execute \u0022InputLockManager.SetControlLock(ControlTypes.KeyboardInput, \u0022YourModName\u0022)\u0022 when the textbox gains focus, then remove the control lock with the .RemoveControlLock command when your text box loses focus.\n\u003C/p\u003E\n\u003Cp\u003E\nIf your mod accepts keystrokes for commands to control something, check to see if another mod has focus on a text box with the above lockout with \u0022if(!InputLockManager.IsAllLocked(ControlTypes.KeyboardInput))\u0022. Note the !, you only want to execute if the check returns false. Also note that you are using the .IsAllLocked method, not the .IsLocked method.\n\u003C/p\u003E\n\u003Cp\u003E\nMy reasoning for this is that this is the ControlType Squad has given us to enable to ignore keyboard commands, that is exactly what we want other mods to do when our text box has focus for text entry. By locking this control type you only ignore keyboard commands, you don\u0027t lockout the onscreen buttons and commands that you can execute with the mouse.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, this only works is everyone actually uses the InputLockManager class this way so everyone would have to buy in for this to be effective.\n\u003C/p\u003E\n\u003Cp\u003E\nThoughts? Any issues you see?\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-02T04:41:08Z\u0022 title=\u002211/02/2016 04:41  AM\u0022 data-short=\u00227 yr\u0022\u003ENovember 2, 2016\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"zentarul","CreatedById":151841,"CreatedDateTime":"2016-11-05T18:14:19Z","Content":"\n\u003Cp\u003E\nI have to agree all the way. After checking the combinations of flag values for the ControlTypes, what makes the most sene is indeed to check that all parts of the control group you are insterested in are locked and that the only group which makes sense for generic text fields is ControlTypes.KeyboardInput.\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2021-02-15T18:26:39Z","Content":"\n\u003Cp\u003E\nI have to say, if you were going to design an API that makes \u0022let the user edit in this text box without messing up anything else\u0022 into a frustrating, intractable puzzle, you could hardly do a better job than how InputLockManager works.\n\u003C/p\u003E\n"}]}