{"TopicId":142128,"ForumId":29,"TopicTitle":"UI_FloatRange.minValue and maxValue acting like they\u0026#039;re static?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2016-06-20T10:59:14Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2016-06-20T10:59:14Z","Content":"\n\u003Cp\u003E\nAs far as I can tell, it seems to be impossible to make two different instances of the same PartModule class end up having two different min/max ranges for the same UI slider on the right-click context menu.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s acting for all the world as if all instances of the PartModule must share the same min/max values and whichever instance happens to have altered them most recently, those values get used from then on by all the other instances too.\u00A0 (in other words, it\u0027s behaving exactly like static member fields on a class would).\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s an example of how I\u0027m trying to dynamically change the min/max range values at runtime per-instance:\u00A0 It does this by reading the values from the part.cfg file (so instances of this PartModule for different parts can have different settings for the range allowed on the slider), and applying the value to the slider, like so:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n            BaseField field;\n\n            DebugMsg(\u0022LaserDist is trying to config GUI panel fields from settings:\u0022);\n            DebugMsg(String.Format(\u0022Part name = {0}, MaxBendX = {1}, MaxBendY = {2}\u0022, part.name, MaxBendX, MaxBendY));\n            \n            field = Fields[\u0022BendX\u0022];\n            ((UI_FloatRange)field.uiControlEditor).minValue = -MaxBendX;\n            ((UI_FloatRange)field.uiControlEditor).maxValue = MaxBendX;\n            if( MaxBendX == 0f )\n            {   field.guiActive = false;\n                field.guiActiveEditor = false;\n            }\n            else\n            {   field.guiActive = true;\n                field.guiActiveEditor = true;\n            }\n            \u003C/pre\u003E\n\u003Cp\u003E\nI verified that it is indeed seeing a different value for MaxBendX for two different parts, and is indeed running the code above two different times once for each part, and that it is indeed storing two different values for the *other* properties of the field \u0022BendX\u0022 just fine - i.e. the guiActive and guiActiveEditor boolean flags *are* indeed behaving differently for the two different instances.\u00A0 If I set one of them to have a MaxBendX of 0 and the other to have a MaxBendX of 15, then it *does* hide the one with a value of 0 just like the above code shows it trying to do.\n\u003C/p\u003E\n\u003Cp\u003E\nBut when I try to make them both have a nonzero value for MaxBendX, but a different nonzero value from each other, I just can\u0027t seem to force them to have different settings for max and min.\u00A0 If I set one partA\u0027s MaxBendX to 15 in the part.cfg file, and set partB\u0027s MaxBendX to 20 in its part.cfg file, then either *both* end up having ranges from -15 to \u002B15 on their sliders, or *both* end up having ranges from -20 to \u002B20 on their sliders.\u00A0 Which one I end up with seems to depend on which part KSP loads last.\u00A0 I proved this by changing the names of the parts to make them get sorted differently, and thus get KSP to load them in the opposite order.\u00A0 If partA loads last, then both partA and partB have a range of -15 to \u002B15.\u00A0 If partB loads last, then both partA and PartB have a range of -20 to \u002B20.\n\u003C/p\u003E\n\u003Cp\u003E\nI can\u0027t get partA to go from -15 to \u002B15 and make partB go from -20 to \u002B20.\n\u003C/p\u003E\n\u003Cp\u003E\nIs there a way for me to break out of this static-like behavior of the minValue and MaxValue so I can make them differ or am I just stuck?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-06-21T01:05:40Z","Content":"\n\u003Cp\u003E\nHmmm I\u0027m not seeing this behaviour in a simple test case. This works as expected:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nclass FloatSliderActingLikeMaxValueStatic : PartModule\n{\n    [KSPField(guiName = \u0022Test Field\u0022, isPersistant = true, guiActive = true, guiActiveEditor = true), UI_FloatRange(stepIncrement = 0.5f, maxValue = 100f, minValue = 0f)]\n    public float someField = 100f;\n\n    public override void OnStart(StartState state)\n    {\n        base.OnStart(state);\n        if (part.partInfo.name == \u0022mk1pod\u0022)\n        {\n            Log.Warning(\u0022Setting values for pod\u0022);\n\n            ((UI_FloatRange) Fields[\u0022someField\u0022].uiControlEditor).minValue = 20f;\n            ((UI_FloatRange)Fields[\u0022someField\u0022].uiControlEditor).maxValue = 220f;\n        }\n        else\n        {\n            Log.Warning(\u0022Setting values for can\u0022);\n\n            ((UI_FloatRange)Fields[\u0022someField\u0022].uiControlEditor).minValue = 10f;\n            ((UI_FloatRange)Fields[\u0022someField\u0022].uiControlEditor).maxValue = 110f;\n        }\n    }\n}\n\n\n[KSPAddon(KSPAddon.Startup.SpaceCentre, true)]\nclass FloatSliderTestInstaller : MonoBehaviour\n{\n    private void Start()\n    {\n        DontDestroyOnLoad(this);\n\n        var pod = PartLoader.getPartInfoByName(\u0022mk1pod\u0022).partPrefab;\n        var can = PartLoader.getPartInfoByName(\u0022landerCabinSmall\u0022).partPrefab;\n            \n        pod.gameObject.AddComponent\u0026lt;FloatSliderActingLikeMaxValueStatic\u0026gt;();\n        can.gameObject.AddComponent\u0026lt;FloatSliderActingLikeMaxValueStatic\u0026gt;();\n    }\n}\u003C/pre\u003E\n\u003Cp\u003E\nIs there any more code in there? The only gotcha I can think of is that having the UI_Control affect sym counterparts could possibly overwrite minValue and maxValue (didn\u0027t check) but you mentioned two distinct parts so I wouldn\u0027t think that was your problem\n\u003C/p\u003E\n"},{"CreatedByName":"Lisias","CreatedById":187168,"CreatedDateTime":"2020-05-30T07:16:33Z","Content":"\n\u003Cp\u003E\n4 Years later, and another one bites the dust. \u003Cspan\u003E\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EI\u0027m facing this exact problem - but I had found that what\u0027s happening is the prefab data being shoved back regularly on the ui_control.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EBy changing the value using Reflection, I managed to get the new Min and Max values working for some time - but as soon as you change scenario, the values are reset again and, curiously, they become imune to the new changes from the code (i.e., trying to restore the data using OnStart, OnCopy or even Update is useless).\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nCuriously, this appears to do not affect the Resources controls - i.e., I can mangle the Min and Max values for a Resource control.\n\u003C/p\u003E\n"}]}