{"TopicId":108406,"ForumId":29,"TopicTitle":"Reflection help to interface with FARAPI","CreatedByName":"atomicfury","CreatedById":120037,"CreatedDateTime":"2015-05-09T15:09:06Z","PageNum":1,"Articles":[{"CreatedByName":"atomicfury","CreatedById":120037,"CreatedDateTime":"2015-05-09T15:09:06Z","Content":"Help! I\u0027m trying to interface with the FARAPI via reflection. I\u0027m new to C#, but I found several examples that seemed to work in other mods. The code snip below finds FARAPI, gets the method, then crashes out on creating the delegate. It looks like the method arguments are wrong. I\u0027ve been struggling with it, maybe someone here can give me a few pointers. I\u0027m probably missing something obvious.\n\n**FARAPI definition in FARAPI.cs**\n\npublic static void CalculateVesselAeroForces(Vessel vessel, out Vector3 aeroForce, out Vector3 aeroTorque, Vector3 velocityWorldVector, double altitude)\n\n**The exception:**\n\nArgumentException: method arguments are incompatible\n\n at System.Delegate.CreateDelegate (System.Type type, System.Object firstArgument, System.Reflection.MethodInfo method, Boolean throwOnBindFailure) [0x00000] in \u003Cfilename unknown=\u0022\u0022\u003E:0 \u003C/filename\u003E\n\n at System.Delegate.CreateDelegate (System.Type type, System.Reflection.MethodInfo method, Boolean throwOnBindFailure) [0x00000] in \u003Cfilename unknown=\u0022\u0022\u003E:0 \u003C/filename\u003E\n\n at System.Delegate.CreateDelegate (System.Type type, System.Reflection.MethodInfo method) [0x00000] in \u003Cfilename unknown=\u0022\u0022\u003E:0 \u003C/filename\u003E\n\n**Code snip:**\n\n        // FARAPI Hookups        private delegate void CalculateVesselAeroForcesDelegate(Vessel vessel, Vector3 aeroForce, Vector3 aeroTorque, Vector3 velocityWorldVector, double altitude);    private CalculateVesselAeroForcesDelegate _CalculateVesselAeroForcesDelegate;    private void initFARModel()    {        bool farInstalled = false;        Debug.Log(\u0022Trying to detect FARAPI.\u0022);        var farapi = AssemblyLoader.loadedAssemblies.SelectMany(x =\u003E x.assembly.GetExportedTypes())                    .FirstOrDefault(x =\u003E x.FullName == \u0022FerramAerospaceResearch.FARAPI\u0022);        if (farapi != null)        {            Debug.Log(\u0022Found FARAPI.  Attempting Reflection...\u0022);            var method = farapi.GetMethod(\u0022CalculateVesselAeroForces\u0022);            if (method != null)            {                Debug.Log(\u0022FARAPI method valid.  Creating delegate...\u0022);                _CalculateVesselAeroForcesDelegate = (CalculateVesselAeroForcesDelegate)Delegate.CreateDelegate(typeof(CalculateVesselAeroForcesDelegate), method);            }            if (_CalculateVesselAeroForcesDelegate != null)            {                farInstalled = true;                Debug.Log(\u0022Loaded FARAPI\u0022);            }            else            {                Debug.Log(\u0022FARAPI found but could not delegate API.\u0022);            }        }    }"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-09T16:45:38Z","Content":"I\u0027d try something like this:\n\n                AssemblyLoader.LoadedAssembly FAR = AssemblyLoader.loadedAssemblies.SingleOrDefault(a =\u003E a.dllName == \u0022FerramAerospaceResearch\u0022);            if (FAR != null)            {                MethodInfo method = null;                try                {                    method = FAR.assembly.GetTypes().SingleOrDefault(t =\u003E t.Name == \u0022FARAPI\u0022).GetMethod(\u0022CalculateVesselAeroForces\u0022);                }                catch (Exception e)                {                    UnityEngine.Debug.LogError(\u0022Error finding the method definition\\n\u0022 \u002B e.StackTrace);                }                try                {                    Vector3 force = new Vector3(), torque = new Vector3();                    method.Invoke(null, new object[] { FlightGlobals.ActiveVessel, force, torque, Vector3.up, 0d });                }                catch (Exception e)                {                    UnityEngine.Debug.LogError(\u0022Error invoking method\\n\u0022 \u002B e.StackTrace);                }            }\n\nI\u0027d start with this. I remember having myself problems when I dealt with reflection and delegates, and somehow delegates just never really worked, and I ended up sticking with just infoking the MethodInfo. So yeah I suggest taking it down bit by bit this way to find what exactly is going wrong."},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2015-05-09T17:30:22Z","Content":"Your MethodInfo needs to be created with the all of the arguments that the original method uses.\n\nThis:\n\n            var method = farapi.GetMethod(\u0022CalculateVesselAeroForces\u0022, new Type[] { typeof(Vessel), typeof(Vector3), typeof(Vector3), typeof(Vector3), typeof(double) });\n\ninstead of this:\n\n           var method = farapi.GetMethod(\u0022CalculateVesselAeroForces\u0022);\n\nI suspect that something special is needed for the first two, out Vector3\u0027s."},{"CreatedByName":"atomicfury","CreatedById":120037,"CreatedDateTime":"2015-05-09T18:05:58Z","Content":"\u003E \n\u003E I\u0027d try something like this:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E       snipped code \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E I\u0027d start with this. I remember having myself problems when I dealt with reflection and delegates, and somehow delegates just never really worked, and I ended up sticking with just infoking the MethodInfo. So yeah I suggest taking it down bit by bit this way to find what exactly is going wrong.\n\n**@stupid\\_chris**, Thanks! I had tried an invoke earlier and messed that up somehow and fell back to delegates. I read somewhere that delegates are faster but that may not matter here. This looks cleaner so I\u0027ll give it a try. In the meantime though DMagic gave me a clue on what else I was doing wrong.\n\n\u003E \n\u003E Your MethodInfo needs to be created with the all of the arguments that the original method uses.\n\u003E This:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E             var method = farapi.GetMethod(\u0022CalculateVesselAeroForces\u0022, new Type[] { typeof(Vessel), typeof(Vector3), typeof(Vector3), typeof(Vector3), typeof(double) });\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E instead of this:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E            var method = farapi.GetMethod(\u0022CalculateVesselAeroForces\u0022);\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E I suspect that something special is needed for the first two, out Vector3\u0027s.\n\n**@DMagic**, Since the method isn\u0027t overloaded it appears the method gets reflected correctly without the type. One your second point, your suspicions are correct - the **out** is significant on the force and torque and it needs to be specified. Also, when I put the out on the arguments, I found out that you have to pass a Vector3 instead of a Vector3d. After some more googling I found I also needed to specify some Bindingflags which seemed to help.\n\nSo now I have two working reflection options. It compiles and, well, there is something else wrong. But not this. Thanks! After I clean the code up I\u0027ll post something for future reference."}]}