{"TopicId":199303,"ForumId":29,"TopicTitle":"Collision detection using Vector3d","CreatedByName":"TotallyNotHuman","CreatedById":157240,"CreatedDateTime":"2021-01-04T10:46:20Z","PageNum":1,"Articles":[{"CreatedByName":"TotallyNotHuman","CreatedById":157240,"CreatedDateTime":"2021-01-04T10:46:20Z","Content":"\n\u003Cp\u003E\nIs it possible to detect whether a ray intersects with Colliders using worldspace coordinates stored in \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3d\u003C/span\u003Es? Both\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E RayCast(All)\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003ESphereCast(All)\u003C/span\u003E take \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3\u003C/span\u003Es as their argument(s), and I\u0027d like to avoid the precision loss from switching between double- and single-precision types, since I also intend to convert between orbital elements and worldspace.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT: After some testing I noticed that \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3d\u003C/span\u003Es can be casted implicitly to \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3\u003C/span\u003Es, and vice versa. Is this, then, the only way to detect collisions?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-01-04T13:29:57Z\u0022 title=\u002201/04/2021 01:29  PM\u0022 data-short=\u00223 yr\u0022\u003EJanuary 4, 2021\u003C/time\u003E by TotallyNotHuman\u003C/strong\u003E\n\u003Cbr\u003EAdditional findings\n\u003C/span\u003E\n"},{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2021-01-12T22:04:45Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-gramm=\u0022false\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223903438\u0022 data-ipsquote-contentid=\u0022199303\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221609757180\u0022 data-ipsquote-userid=\u0022157240\u0022 data-ipsquote-username=\u0022TotallyNotHuman\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 1/4/2021 at 8:46 PM, TotallyNotHuman said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents ipsClearfix\u0022 data-gramm=\u0022false\u0022\u003E\n\u003Cp\u003E\nIs it possible to detect whether a ray intersects with Colliders using worldspace coordinates stored in \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3d\u003C/span\u003Es? Both\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E RayCast(All)\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003ESphereCast(All)\u003C/span\u003E take \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3\u003C/span\u003Es as their argument(s), and I\u0027d like to avoid the precision loss from switching between double- and single-precision types, since I also intend to convert between orbital elements and worldspace.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT: After some testing I noticed that \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3d\u003C/span\u003Es can be casted implicitly to \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EVector3\u003C/span\u003Es, and vice versa. Is this, then, the only way to detect collisions?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCorrect. Unity only uses Vector3. Vector3d is a construct used in KSP - but is outside of Unity.\n\u003C/p\u003E\n\u003Cp\u003E\nRaycasts are a functionality of Unity, and as such only work with Vector3.\n\u003C/p\u003E\n"}]}