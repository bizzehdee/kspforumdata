{"TopicId":52644,"ForumId":29,"TopicTitle":"Referencing assemblies and plugin loading oder","CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-10T20:58:07Z","PageNum":1,"Articles":[{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-10T20:58:07Z","Content":"\n\u003Cp\u003EI have found a workaround the first time I bumped into this problem, but the workaround is cumbersome to use and I anticipate bumping into a much more severe case in the near future, so I\u0027d rather know if a more sensible solution exists:\u003C/p\u003E\u003Cp\u003EAssume that you wish to access methods and variables of a \u003Cem\u003Edifferent\u003C/em\u003E KSP plugin.\u003C/p\u003E\u003Cp\u003EThe obvious way to do it, referencing the assembly at build time, and just creating new instances of it\u0027s classes and/or locating them within KSP hierarchy and using them as objects of known types works... but only in one case: If the plugin you\u0027re referencing is already loaded by the assembly loader by the time your plugin starts up. If it isn\u0027t, your assembly will fail to load.\u003C/p\u003E\u003Cp\u003EThe plugin loader apparently goes through all the assembly DLLs in alphabetical order, so there is \u003Cem\u003Esort of\u003C/em\u003E a way to ensure it loads, you just name your assembly DLL starting with Z and it will be guaranteed to load late. However, you might also want to continue working if the plugin you\u0027re referencing is not present in the system, which will in that case always fail.\u003C/p\u003E\u003Cp\u003EWith my very limited understanding of C# I\u0027ve been able to cook up a way of referencing these objects by reflection, kind of like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EtargetPlugin = aValueOfaKSPclassWeFoundTheInterestingPluginAs;\u003Cbr\u003EFieldInfo thatBloodyField = targetPlugin.GetType ().GetField (\u0022FieldName\u0022);\u003Cbr\u003E\u003Cbr\u003E//...and then,\u003Cbr\u003E\u003Cbr\u003EthatBloodyField.SetValue (targetPlugin, ourNewValue);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat works, but I\u0027d much rather find a way of getting loaded anyway instead. \u003C/p\u003E\u003Cp\u003ECan anyone advise?\u003C/p\u003E\n"},{"CreatedByName":"damny","CreatedById":78621,"CreatedDateTime":"2013-11-11T09:12:10Z","Content":"\n\u003Cp\u003EDo something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EType targetPlugin = Type.GetType(\u0022PluginNamespace.PluginClass, PluginAssembly\u0022);\u003Cbr\u003Eif(targetPlugin != null) {\u003Cbr\u003E    // do stuff with the class reference\u003Cbr\u003E} else {\u003Cbr\u003E    // plugin isn\u0027t loaded\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEdit: Forgot the assembly name, that\u0027s the part I added after the comma. For KSP plugins I\u0027d assume you know the name, it\u0027s just the name of the DLL. If you don\u0027t know the assembly name, you can also just try to get a reference from every assembly that\u0027s currently loaded:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eforeach(Assembly a in AppDomain.CurrentDomain.GetAssemblies()) {\u003Cbr\u003E    type = a.GetType(\u0022PluginNamespace.PluginClass\u0022);\u003Cbr\u003E    if(type != null) {\u003Cbr\u003E        // here we go...\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis gives you access to classes and their static members. You can instantiate classes like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eobject pluginObject = Activator.CreateInstance(type);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd then the fields and members stuff works just like it works for static fields and members, just pass that object reference instead of the class reference to GetValue()/SetValue() etc.\u003C/p\u003E\u003Cp\u003EYou might get this error at runtime:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMethod not found: \u0027System.Type.op_Equality\u0027\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis means your project is set to build for .Net 4.0 or higher as the target platform (likely if you\u0027re using Visual Studio or Xamarin Studio instead of the MonoDevelop that ships with Unity). You need to set it to .Net 3.5.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-11T09:40:59Z\u0022 title=\u002211/11/2013 09:40  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 11, 2013\u003C/time\u003E by damny\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-11-11T11:21:15Z","Content":"\n\u003Cp\u003ESurely this is only a problem if you absolutely have to run the code as soon as possible after your assembly loads, is it not possible to run it slightly later after all of the other assemblies have loaded?\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-11T12:44:27Z","Content":"\n\u003Cp\u003EActually, the problem is not deciding whether to run the code related to a particular foreign plugin or not -- if you found an instance of it in the hierarchy, you access the fields on it and/or call it\u0027s methods, otherwise, well, just don\u0027t. The problem is the fact that as far as I can tell, KSP\u0027s plugin loading mechanism will simply refuse to load your assembly if it directly references a type that is not in any assembly loaded up to that point. You can ensure your assembly loads late, but then, if that assembly you reference is never loaded because it\u0027s not present, that won\u0027t help you because your assembly will fail to load for the same reason. As far as I can see, even just having a variable to hold a reference to a missing type is enough for this to happen, and if I\u0027m wrong, I\u0027d prefer to see a live example that refutes it. \u003C/p\u003E\u003Cp\u003EI\u0027m not sure that having an object that might be a reference to an instance of a foreign class that I\u0027m not allowed to name will be enough to convince the compiler to let me directly use it\u0027s methods. The bypass mechanism cited above works for public fields, but to call methods on that instance I think I\u0027ll have to work out a much more syntactically complex mess of creating a delegate to hold a reference to particular methods...\u003C/p\u003E\u003Cp\u003EWell, at least encapsulating it in a class of your own takes some of the pain away.\u003C/p\u003E\n"},{"CreatedByName":"damny","CreatedById":78621,"CreatedDateTime":"2013-11-11T14:53:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003EThe bypass mechanism cited above works for public fields, but to call methods on that instance I think I\u0027ll have to work out a much more syntactically complex mess of creating a delegate to hold a reference to particular methods...\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re making this sound so complicated...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EType pluginClass = Type.getType(\u0022Namespace.Class, Assembly\u0022);\u003Cbr\u003Eif(pluginClass != null) {\u003Cbr\u003E    pluginInstance = Activator.CreateInstance(pluginClass);\u003Cbr\u003E    pluginMethod = pluginClass.GetMethod(\u0022methodName\u0022);\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E...\u003Cbr\u003E\u003Cbr\u003Eif(pluginMethod != null) {\u003Cbr\u003E    pluginMethod.Invoke(pluginInstance, new object[] { 1, 2, 3, 4 });\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOf course you can encapsulate everything to make it look more tidy, but I don\u0027t see how any of this is particularly painful. I\u0027d only bother with a full proxy class if you\u0027re calling many different methods...\u003C/p\u003E\u003Cp\u003EYou can also make a simple helper method like this\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprivate static object call(object obj, string method, params object[] args) {\u003Cbr\u003E\treturn obj.GetType().GetMethod(method).Invoke(obj, args);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd then call it like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ecall(pluginInstance, \u0022methodName\u0022, 1, 2, 3, 4);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EPerformance is only going to be important if you\u0027re going to call this every frame...\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-11T15:26:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022damny\u0022 data-cite=\u0022damny\u0022\u003E\u003Cdiv\u003EYou\u0027re making this sound so complicated...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFirst week into C#, it kind of is, I\u0027m more comfortable with holding seven levels of parentheses in my head than an object hierarchy. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m still writing an encapsulating class for my own plugin just for practice and because it makes use of method overloading, so locating a specific method is not quite so intuitive. This way, at least if anyone else wants to do the same I have a clear example how.\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-11T16:10:12Z","Content":"\n\u003Cp\u003EThere we go, for posterity.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://gist.github.com/Mihara/7677256\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://gist.github.com/Mihara/7677256\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-27T15:15:10Z\u0022 title=\u002211/27/2013 03:15  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 27, 2013\u003C/time\u003E by Mihara\u003C/strong\u003E\n\u003Cbr\u003EMoved the file, sorry. :)\n\u003C/span\u003E\n"}]}