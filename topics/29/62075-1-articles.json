{"TopicId":62075,"ForumId":29,"TopicTitle":"Help with rotating part?","CreatedByName":"Tochas","CreatedById":92786,"CreatedDateTime":"2014-02-03T20:39:55Z","PageNum":1,"Articles":[{"CreatedByName":"Tochas","CreatedById":92786,"CreatedDateTime":"2014-02-03T20:39:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tiberion\u0022 data-cite=\u0022Tiberion\u0022\u003E\u003Cdiv\u003EAlso the default behavior doesn\\\u0027t let you attach anything to the secondary collider node that moves with the leg, only the main node which is in the \u0027anchor\u0027 or hinge, which you use to attach the leg to something else.\u003Cp\u003EIt will take a custom part for sure, and I am not sure whether someone can code a function that allows the VAB to recognize custom collider nodes to accept part connctions.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHi, \u003C/p\u003E\u003Cp\u003EI am trying to build a custom part that allows to be stacked (and stack things to it) but everything that is attached radially (surface) to be rotated at a fixed angle rate. to make it easier to build artificial gravity stuff, etc. (and maybe with tweekables change the angle rate)\u003C/p\u003E\u003Cp\u003EI have been looking at infernal robotcs code and I got a basic part object (a cylinder) and a part subclass. The mesh does rotate but the things attached to the surface does not.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/72963294/KSPPlugins/2014-02-03%2014_23_07-Unity%20-%20CentrifugeRotor.unity%20-%20KSPPlugins.png\u0022 alt=\u00222014-02-03%2014_23_07-Unity%20-%20CentrifugeRotor.unity%20-%20KSPPlugins.png\u0022\u003E\u003C/p\u003E\u003Cp\u003Ethe test vessel\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/72963294/KSPPlugins/2014-02-03%2014_37_21-Kerbal%20Space%20Program.png\u0022 alt=\u00222014-02-03%2014_37_21-Kerbal%20Space%20Program.png\u0022\u003E\u003C/p\u003E\u003Cp\u003Ethe part code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class ContinuousRotation : Part\u003Cbr\u003E{\u003Cbr\u003E\tpublic float Ammount = 1.0f;\u003Cbr\u003E\tpublic bool rotorActive = false;\u003Cbr\u003E\tprivate Transform rotor;\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Toggle Centrifuge\u0022)]\u003Cbr\u003E\tpublic void LockToggle(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tthis.rotorActive= !this.rotorActive;\u003Cbr\u003E\t\tprint(string.Format(\u0022ContinuousRotation rotorActive: {0}\u0022, this.rotorActive));\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprotected override void onPartLoad()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tbase.onPartLoad();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate void LogChilds(Transform parent){\u003Cbr\u003E\t\tprint(string.Format(\u0022ContinuousRotation part is {0} and has {1} childs\u0022, parent.name, parent.childCount));\u003Cbr\u003E\t\tfor(int i=0; i\u0026lt; parent.childCount; i\u002B\u002B)\u003Cbr\u003E\t\t\t//print(string.Format(\u0022ContinuousRotation child {0} is {1} and has {2} childs\u0022, i, transform.GetChild(i).name, transform.GetChild(i).childCount));\t\u003Cbr\u003E\t\t\tthis.LogChilds(parent.GetChild(i));\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprotected override void onPartStart(){\u003Cbr\u003E\t\tbase.onPartStart();\u003Cbr\u003E\t\tif (vessel == null)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\treturn;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tthis.LogChilds(transform);\u003Cbr\u003E\u003Cbr\u003E\t\trotor = transform.FindChild(\u0022model\u0022).FindChild(\u0022rotor\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\tif(rotor==null)\u003Cbr\u003E\t\t\tprint(string.Format(\u0022ContinuousRotation rotor is NULL\u0022));\u003Cbr\u003E\t\telse\u003Cbr\u003E\t\t\tprint(string.Format(\u0022ContinuousRotation rotor: {0}\u0022, this.rotor.name));\u003Cbr\u003E\u003Cbr\u003E\t\tfor(int i=0; i\u0026lt; this.children.Count; i\u002B\u002B){\u003Cbr\u003E\t\t\tprint(string.Format(\u0022ContinuousRotation part {0} attachMode: {1}\u0022, this.children[i].name, this.children[i].attachMode));\u003Cbr\u003E\t\t\tif(this.children[i].attachMode == AttachModes.SRF_ATTACH){\u003Cbr\u003E\t\t\t\tprint(string.Format(\u0022ContinuousRotation changing parentohood of {0} to {1}\u0022, this.children[i].name, this.rotor.name));\u003Cbr\u003E\t\t\t\tthis.children[i].transform.parent = rotor;\u003Cbr\u003E\t\t\t\tthis.children[i].attachMethod = AttachNodeMethod.HINGE_JOINT;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tthis.LogChilds(rotor);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprotected override void onPartFixedUpdate(){\u003Cbr\u003E\t\tif(rotor == null)\u003Cbr\u003E\t\t\treturn;\u003Cbr\u003E\t\tif(this.rotorActive){\u003Cbr\u003E\t\t\tif(this.rotor.childCount == 1){\u003Cbr\u003E\t\t\t\tfor(int i=0; i\u0026lt; this.children.Count; i\u002B\u002B){\u003Cbr\u003E\t\t\t\t\t//print(string.Format(\u0022ContinuousRotation part {0} attachMode: {1}\u0022, this.children[i].name, this.children[i].attachMode));\u003Cbr\u003E\t\t\t\t\tif(this.children[i].attachMode == AttachModes.SRF_ATTACH){\u003Cbr\u003E\t\t\t\t\t\t//print(string.Format(\u0022ContinuousRotation changing parentohood of {0} to {1}\u0022, this.children[i].name, this.rotor.name));\u003Cbr\u003E\t\t\t\t\t\tthis.children[i].transform.parent = rotor;\u003Cbr\u003E\t\t\t\t\t\tthis.children[i].attachMethod = AttachNodeMethod.HINGE_JOINT;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\trotor.Rotate(Vector3.up * Ammount * TimeWarp.fixedDeltaTime, Space.Self); \u003Cbr\u003E\t\t\tprint(string.Format(\u0022ContinuousRotation rotor.rotation: {0}, childs: {1}\u0022, rotor.localRotation.eulerAngles, rotor.childCount));\u003Cbr\u003E\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ethe part cfg (I borrowed, SAS cfg file)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPART\u003Cbr\u003E{\u003Cbr\u003E// this is a sample config file, for determining a good file format for defining part parameters\u003Cbr\u003E// comment line - ignored by cfg parser\u003Cbr\u003E// empty lines, or lines without a \u0027=\u0027 sign are also ignored\u003Cbr\u003E// all other lines are split at the \u0027=\u0027 sign, and the left operand is used to know what parameter we are setting\u003Cbr\u003E// diferent parameters require data in different formats (see docs), and each module has it\u0027s own parameters (again, see docs)\u003Cbr\u003E// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)\u003Cbr\u003E// each keyword here relates to an existing variable in the assigned module. If the keyword isn\u0027t found, it is ignored.\u003Cbr\u003E// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it\u0027s default value\u003Cbr\u003E// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it\u0027s value can be parsed)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// --- general parameters ---\u003Cbr\u003Ename = TCentrifugeRotor\u003Cbr\u003Emodule = ContinuousRotation\u003Cbr\u003Eauthor = Tochas\u003Cbr\u003E\u003Cbr\u003E// --- asset parameters ---\u003Cbr\u003Emesh = CentrifugeRotor.mu\u003Cbr\u003Escale = 1\u003Cbr\u003ErescaleFactor = 1\u003Cbr\u003E\u003Cbr\u003E// --- node definitions ---\u003Cbr\u003E// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z\u003Cbr\u003Enode_stack_bottom = 0.0, -0.5, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003Enode_stack_top = 0.0, 0.5, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003E\u003Cbr\u003E// --- FX definitions ---\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// --- editor parameters ---\u003Cbr\u003ETechRequired = flightControl\u003Cbr\u003EentryCost = 3200\u003Cbr\u003Ecost = 600\u003Cbr\u003Ecategory = Control\u003Cbr\u003Esubcategory = 0\u003Cbr\u003Etitle = Centrifuge Rotor\u003Cbr\u003Emanufacturer = Tochas Space Voyages\u003Cbr\u003Edescription = For your artificial gravity needs.\u003Cbr\u003E\u003Cbr\u003E// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision\u003Cbr\u003EattachRules = 1,0,1,1,0\u003Cbr\u003E\u003Cbr\u003E// --- standard part parameters ---\u003Cbr\u003Emass = 0.3\u003Cbr\u003EdragModelType = default\u003Cbr\u003Emaximum_drag = 0.2\u003Cbr\u003Eminimum_drag = 0.2\u003Cbr\u003EangularDrag = 2\u003Cbr\u003EcrashTolerance = 9\u003Cbr\u003EmaxTemp = 3400\u003Cbr\u003E\u003Cbr\u003E//MODULE\u003Cbr\u003E//{\u003Cbr\u003E//\tname = ModuleReactionWheel\u003Cbr\u003E\u003Cbr\u003E//\tPitchTorque = 20\u003Cbr\u003E//\tYawTorque = 20\u003Cbr\u003E//\tRollTorque = 20\u003Cbr\u003E\u003Cbr\u003E//\tRESOURCE\u003Cbr\u003E//\t{\u003Cbr\u003E//\t\tname = ElectricCharge\u003Cbr\u003E//\t\trate = 0.3\u003Cbr\u003E//\t}\u003Cbr\u003E//}\u003Cbr\u003E\u003Cbr\u003E//MODULE\u003Cbr\u003E//{\u003Cbr\u003E//\tname = ModuleSAS\u003Cbr\u003E//}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhat am I missing?\u003C/p\u003E\u003Cp\u003EThanks in advance for your help and guidance\u003C/p\u003E\u003Cp\u003Esource \u003Ca href=\u0022https://dl.dropboxusercontent.com/u/72963294/KSPPlugins/Assets.zip\u0022 rel=\u0022external nofollow\u0022\u003Efiles\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"sal_vager","CreatedById":16426,"CreatedDateTime":"2014-02-03T21:49:14Z","Content":"\n\u003Cp\u003EWelcome to the community Tochas \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI had to pop your post into it\u0027s own thread as the one you posed in originally was well over a year old, this way you should get the notice you need and no one complaining of necro posting.\u003C/p\u003E\u003Cp\u003EGood luck with your part, it\u0027d be really useful for space stations and similar and I look forwards to seeing it complete \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"}]}