{"TopicId":177609,"ForumId":44,"TopicTitle":"Best C Library for 2D Games?","CreatedByName":"MDZhB","CreatedById":99243,"CreatedDateTime":"2018-08-16T20:26:02Z","PageNum":1,"Articles":[{"CreatedByName":"MDZhB","CreatedById":99243,"CreatedDateTime":"2018-08-16T20:26:02Z","Content":"\n\u003Cp\u003E\nI\u0027m not super experienced in C, so I\u0027ve decided to write a project I\u0027ve been wanting to do for a while in C. It\u0027s going to be a bullet shooter engine, which can interpret different scripts to make any number of unique games. Think RPG maker but for bullet shooters. Anyway, I want the finished product to look something like this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022484680-ms_7.jpg\u0022 class=\u0022ipsImage\u0022 height=\u0022399\u0022 src=\u0022https://static.giantbomb.com/uploads/original/0/1679/484680-ms_7.jpg\u0022 width=\u0022638\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nNothing too fancy, just a bunch of \u003Cspan\u003E2D \u003C/span\u003Esprites, animations, and hitboxes, as well as some info on the side somewhere. I\u0027ve figured out the logic of the main game loop, and it\u0027s all stuff I\u0027ve done before, so the only challenge with that will be C syntax itself.\n\u003C/p\u003E\n\u003Cp\u003E\nUnfortunately, I have almost no experience in graphics programming. I want it to be cross-platform, so I\u0027ve done some research, and it looks like OpenGL and SDL are good candidates. I\u0027m leaning towards SDL, because I have no need for 3D and I don\u0027t mind working at a lower level.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, I wanted to see if anyone has any experience or recommendations on these two or anything else. So, in general, what is a good C library for creating 2D games?\n\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-16T21:15:04Z","Content":"\n\u003Cp\u003E\nsdl just gives you a put pixel function iirc. but it gives you everything else you need to make a game (sound, input, etc). id go with opengl and sdl (you kind of have to since sdl provides you a gl canvas that opengl can render to).\u00A0 i used both libs in my c\u002B\u002B game engine that never really got past the line draw phase and a lua version that has textures. map your sprites to polys and you can render them in any orientation and use the z axis to handle sprite render order, you also have access to fast alpha blending for weapon effects (its actually how i handle my 2d elements). of course my knowledge of opengl doesn\u0027t really go past old legacy versions where you dont even have shaders (like my lua engine only uses opengl 1.3 and i get my rendering context from iup rather than sdl).\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nyou might also want a bitmap library, but i like to use tga bitmaps since the format is just an 18 byte header and the rest is pixels. you just load the file, read the first 18 bytes to get the bbp and image size and load the pixels into a dynamic\u00A0array (malloc). if you use opengl compressed textures become an option but i think for a 2d game id want uncompressed images.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-16T21:28:45Z\u0022 title=\u002208/16/2018 09:28  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 16, 2018\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-16T21:41:10Z","Content":"\n\u003Cp\u003E\nYou mean for the graphics (1) or for the event handling (2) ?\n\u003C/p\u003E\n\u003Cp\u003E\nFor (1) there are OpenGL, Vulkan and DirectX. The first two are \u003Cs\u003Eplatform independent\u003C/s\u003E Windows and Linux/Unix.\n\u003C/p\u003E\n\u003Cp\u003E\nFor (2), to make the event handling platform independent, there is sdl (overpowered imo) or glfw3 (i like it, lean and yet encompassing everything), glut or its successor freeglut (outdated) and many others. I think boost and qt offer these tings too, but i do not know. If you combine glfw and opengl you even have a default framebuffer for the first tries until it gets to more sophisticated applications, like multipass rendering, transform feedback, etc ....\n\u003C/p\u003E\n\u003Cp\u003E\nIf you are planning only for one platform, then i\u0027d use the functionality of that. For linux that\u0027ll be xcb or xlib and probably others. For mobile, have a look at Vulkan examples e.g. from Pavel Lapinsky or Sascha Willems.\n\u003C/p\u003E\n\u003Cp\u003E\nDo you know gamedev.net ?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-16T21:43:38Z\u0022 title=\u002208/16/2018 09:43  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 16, 2018\u003C/time\u003E by Green Baron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-16T23:21:14Z","Content":"\n\u003Cp\u003E\nI must say, i am only doing this since a year or so, learned and learning C\u002B\u002B, graphics programming, made the mistake of trying to get behind Vulkan (well, i dug the basics) or analyzing other peoples code, which doesn\u0027t help me at all. And i have other things to do. What i want to say is that i am not a knowledgeable person. That\u0027s why i mentioned to gamedev.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E:-)\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"YNM","CreatedById":98447,"CreatedDateTime":"2018-08-17T00:02:33Z","Content":"\n\u003Cp\u003E\nAFAIK you should only use libraries that contains what you want to use. (you can even write your own library, C\u002B\u002B allows this.)\n\u003C/p\u003E\n\u003Cp\u003E\nFor\u00A0what functions that should be there... well, I never managed to have a windowed GUI on my programs... and I\u0027ve only read stuff off \u003Ca href=\u0022http://www.cplusplus.com\u0022 rel=\u0022external nofollow\u0022\u003Ethis site\u003C/a\u003E !\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-08-17T00:16:30Z","Content":"\n\u003Cp\u003E\nIf you want to do C, just do OpenGL, honestly. It has C bindings, and while it can do fancy stuff with extensions, you don\u0027t have to dive head-deep.\u00A0You can do easy 2D stuff with minimal setup.\n\u003C/p\u003E\n\u003Cp\u003E\nC\u002B\u002B\u003Cs\u003E20\u003C/s\u003E\u00A0\u003Cem\u003Emight\u003C/em\u003E\u00A0get standardized 2D graphics via io2d library. There is a \u003Ca href=\u0022http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0267r8.pdf\u0022 rel=\u0022external nofollow\u0022\u003Eproposal for it\u003C/a\u003E, but it\u0027s in a very uncertain state at the moment. That said, if you want to take a deep dive into the world of modern C\u002B\u002B, three is a\u00A0\u003Ca href=\u0022https://github.com/cpp-io2d/P0267_RefImpl\u0022 rel=\u0022external nofollow\u0022\u003Ereference implementation of io2d\u003C/a\u003E\u00A0that you can use in your engine and replace with standard C\u002B\u002B if and when that gets released.\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: Looks like graphics TS has been deferred, meaning definitely not C\u002B\u002B20. They\u0027re still working on it, so it still has a chance of being a C\u002B\u002B23 or later feature. The reference implementation is still maintained, however, so the option of using it in your project is open.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-17T00:32:13Z\u0022 title=\u002208/17/2018 12:32  AM\u0022 data-short=\u00225 yr\u0022\u003EAugust 17, 2018\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-17T01:46:27Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223435051\u0022 data-ipsquote-contentid=\u0022177609\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534464153\u0022 data-ipsquote-userid=\u002298447\u0022 data-ipsquote-username=\u0022YNM\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, YNM said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAFAIK you should only use libraries that contains what you want to use. (you can even write your own library, C\u002B\u002B allows this.)\n\u003C/p\u003E\n\u003Cp\u003E\nFor\u00A0what functions that should be there... well, I never managed to have a windowed GUI on my programs... and I\u0027ve only read stuff off \u003Ca href=\u0022http://www.cplusplus.com\u0022 rel=\u0022external nofollow\u0022\u003Ethis site\u003C/a\u003E !\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nthe only gui library ive ever been able to use is iup. its mostly for lua but i do believe you can use it in c/\u002B\u002B.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-17T12:39:26Z","Content":"\n\u003Cp\u003E\nI can recommend \u003Ca href=\u0022https://github.com/ocornut/imgui\u0022 rel=\u0022external nofollow\u0022\u003EDear Imgui\u003C/a\u003E for guis. It is not hard to understand and fast as lightning, there are wrappers for Vulkan, OpenGL and DirectX that come with it. But it is C\u002B\u002B. Which you will, one C gets boring in a few months, switch to anyway because it makes some things so much easier.\n\u003C/p\u003E\n\u003Cp\u003E\nThe look is like this:\u003Cbr\u003E\u003Ca href=\u0022https://i.imgur.com/mCzy4ka.png\u0022 rel=\u0022external nofollow\u0022\u003E\u00A0 \u003C/a\u003E\u003Ca href=\u0022https://i.imgur.com/mCzy4ka.png\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg alt=\u0022mCzy4kal.png\u0022 class=\u0022ipsImage\u0022 src=\u0022https://imgur.com/mCzy4kal.png\u0022\u003E\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-17T12:41:25Z\u0022 title=\u002208/17/2018 12:41  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 17, 2018\u003C/time\u003E by Green Baron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MDZhB","CreatedById":99243,"CreatedDateTime":"2018-08-17T12:59:59Z","Content":"\n\u003Cp\u003E\nOk, so I\u0027ve done some more research (taking cues from your replies \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E) and it looks like I was a bit confused about what I need. I\u0027ll use OpenGL for graphics, and SDL for window handling and input/output. So far I\u0027ve actually got the beginning of the game logic running in python with plain ASCII, and it looks good so far:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u00225ine84.PNG\u0022 class=\u0022ipsImage\u0022 height=\u0022540\u0022 src=\u0022https://files.catbox.moe/5ine84.PNG\u0022 width=\u0022802\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n(It\u0027s shooting three sets of concentric circles, one slow dense set in the center, and two faster, sparser sets on the sides.)\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223435313\u0022 data-ipsquote-contentid=\u0022177609\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534509566\u0022 data-ipsquote-userid=\u0022107381\u0022 data-ipsquote-username=\u0022Green Baron\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, Green Baron said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhich you will, one C gets boring in a few months, switch to anyway because it makes some things so m\u003Cspan\u003E\uFEFF\u003C/span\u003Euch easi\u003Cspan\u003E\uFEFF\u003C/span\u003Eer\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003Cspan\u003E\uFEFF\u003C/span\u003E. \u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOne of my primary interests is low level programming. One of the most fun things I\u0027ve ever written was an ATAPI driver in 32 bit assembly, running on raw hardware. Trust me, I don\u0027t need it to be easy. \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022:wink:\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nAnyway, I\u0027m going to go make myself an egg for brainfood, and then I\u0027m going to start reading through documentation.\n\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-17T13:11:28Z","Content":"\n\u003Cp\u003E\nif you want to get really low level get you an arduino and one of those\u00A0ili9341 lcd screens. you have all kinds of bandwidth constraints do to the spi interface so you have to do a lot of sprite swapping with the background to keep things fluid. not to mention a lot less memory, a lot less storage, and a rather sluggish cpu.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-17T13:21:40Z","Content":"\n\u003Cp\u003E\nHehe, understood :-)\n\u003C/p\u003E\n\u003Cp\u003E\nOr retro style \u0022graphics\u0022 via character sets, could even be played in a terminal.\n\u003C/p\u003E\n\u003Cp\u003E\nThe library for that would be \u003Ca href=\u0022https://www.gnu.org/software/ncurses/ncurses.html\u0022 rel=\u0022external nofollow\u0022\u003Encurses\u003C/a\u003E which you probably know.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-17T13:23:27Z\u0022 title=\u002208/17/2018 01:23  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 17, 2018\u003C/time\u003E by Green Baron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-08-18T12:00:59Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223435330\u0022 data-ipsquote-contentid=\u0022177609\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534510799\u0022 data-ipsquote-userid=\u002299243\u0022 data-ipsquote-username=\u0022MDZhB\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n23 hours ago, MDZhB said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOne of my primary interests is low level programming. One of the most fun things I\u0027ve ever written was an ATAPI driver in 32 bit assembly, running on raw hardware. Trust me, I don\u0027t need it to be easy.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOn smaller projects, it\u0027s sometimes fun to do things the most challenging way. But it rarely pays off on larger ones. Just because you can make headway with the wrong tool, doesn\u0027t mean you should if you can get more done with less time spent.\n\u003C/p\u003E\n\u003Cp\u003E\nIn this particular case, you can probably write the whole thing in C and not have to sacrifice much. Although, you will probably already be writing hacks. I used to work in a game studio that had an in-house C engine. One of the things that stuck in my mind is the way UI widgets worked. There was a struct Widget. And then a UI component that was also a widget, would include it.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Estruct Button\n{\n\tstruct Widget widget;\n\t// ...\n};\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nNow you can pass pointer to Button to a generic function that handles any Widget by simply type-casting the pointer. Yes, that is basically an inherited member function call implemented entirely in C. (Indeed, that\u0027s how inheritance actually works in C\u002B\u002B) The peak of insanity was character movement code, however, which had something not entirely unlike virtual functions implemented for different movement types.\n\u003C/p\u003E\n\u003Cp\u003E\nBack when that code base was started, about 15 years ago, there was a very good reason to stick with C. C\u002B\u002B03 was a new thing back then, and even with these improvements, it was a clunky language that took forever to compile and brought loss of performance with it. If you wanted a high performance engine that was easy to work with, you wrote it in C. At least, the heavily used portions. But C\u002B\u002B isn\u0027t the same anymore. Compilers and optimizers got a lot better, and the standard enforces many good practices. Today, if you are finding yourself hacking in inheritance, virtuals, lambdas, or templates into C code, it\u0027s a sure sign that you should be writing in C\u002B\u002B.\n\u003C/p\u003E\n\u003Cp\u003E\nBig part of working with the write language is not whether it makes it easier to solve problems or not. Where it really counts is when you have to revisit code you wrote months back. C code gets really hard to follow once it gets sufficiently complex. C\u002B\u002B can get worse if you write bad code, but it gives you many opportunities to make it very easy to follow if you do it right.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-18T12:01:58Z\u0022 title=\u002208/18/2018 12:01  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 18, 2018\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"}]}