{"TopicId":64981,"ForumId":36,"TopicTitle":"[Plugin] Auto Create Persistence File Backup - Prevent File Loss From Missing Parts","CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-05T20:47:42Z","PageNum":1,"Articles":[{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-05T20:47:42Z","Content":"\n\u003Cp\u003E\u003Ca href=\u0022http://kerbal.curseforge.com/plugins/220804-autosave-backup-generator\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ECurseForge Link\u003C/span\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EMediafire link:\u003Ca href=\u0022http://www./download/98wkt28ke25gsxn/DMagic_AutoSave_V3.1.zip\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/98wkt28ke25gsxn/DMagic_AutoSave_V3.1.zip\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EVersion 3.1 is compiled against .net 3.5 and won\u0027t cause ModStatistics to throw debug log errors \u003C/p\u003E\u003Cp\u003E-----\u003C/p\u003E\u003Cp\u003ESo after looking at \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/71560-Please-remove-automatic-deletion-of-craft-when-part%28s%29-are-missing\u0022 rel=\u0022external nofollow\u0022\u003Eone of the threads\u003C/a\u003E over in the suggestion forum I realized that a simple plugin should be able to create a backup persistence file to prevent the old \u0022Missing Part-now a dozen vessels are deleted\u0022 thing from happening. \u003C/p\u003E\u003Cp\u003EYes, the best way to prevent this is to make your own backups and immediately quit after getting the \u0022Missing Parts\u0022 message, but that doesn\u0027t always happen.\u003C/p\u003E\u003Cp\u003EThe plugin generates a new backup file every time you restart KSP, it only does so once per game, but resets when you back out to the main menu. The included settings.cfg file can be used to specify the number of backups to generate before the plugin begins overwriting old files.\u003C/p\u003E\u003Cp\u003EAnd here\u0027s the code if anyone wants to check for some boneheaded mistake, or any potentially catastrophic errors waiting to happen:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace AutoSave\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddonImproved(KSPAddonImproved.Startup.SpaceCenter | KSPAddonImproved.Startup.Flight | KSPAddonImproved.Startup.EditorAny | KSPAddonImproved.Startup.TrackingStation | KSPAddonImproved.Startup.MainMenu, false)]\u003Cbr\u003E    public class AutoSave : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private int max = 3;\u003Cbr\u003E        private ConfigNode node = null;\u003Cbr\u003E        private string path = null;\u003Cbr\u003E        private static bool Saved;\u003Cbr\u003E\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            if (HighLogic.LoadedScene == GameScenes.MAINMENU)\u003Cbr\u003E                Saved = false;\u003Cbr\u003E            else if (Saved == false)\u003Cbr\u003E                saveBackup();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void saveBackup()\u003Cbr\u003E        {\u003Cbr\u003E            DateTime oldestFile = new DateTime(2050, 1, 1);\u003Cbr\u003E            string replaceBackup = null;\u003Cbr\u003E            string activeDirectory = Path.Combine(Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022saves\u0022), HighLogic.fetch.GameSaveFolder);\u003Cbr\u003E            path = Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022GameData/AutoSave/Settings.cfg\u0022).Replace(\u0022\\\\\u0022, \u0022/\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (File.Exists(path))       //Load Settings.cfg to check for change in max number of saves\u003Cbr\u003E            {\u003Cbr\u003E                max = getMaxSave(\u0022MaxSaves\u0022);\u003Cbr\u003E                print(\u0022Changing max saves value to \u0022 \u002B max.ToString());\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            for (int i = 0; i \u0026lt; max; i\u002B\u002B)\u003Cbr\u003E            {\u003Cbr\u003E                string filepath = Path.Combine(activeDirectory, \u0022persistent Backup \u0022 \u002B i.ToString() \u002B \u0022.sfs\u0022);\u003Cbr\u003E                if (!File.Exists(filepath))\u003Cbr\u003E                {\u003Cbr\u003E                    replaceBackup = \u0022persistent Backup \u0022 \u002B i.ToString() \u002B \u0022.sfs\u0022;\u003Cbr\u003E                    break;\u003Cbr\u003E                }\u003Cbr\u003E                else                   //If all backups have been written, check for the oldest file and rewrite that one\u003Cbr\u003E                {\u003Cbr\u003E                    DateTime modified = File.GetLastWriteTime(filepath);\u003Cbr\u003E                    if (modified \u0026lt; oldestFile)\u003Cbr\u003E                    {\u003Cbr\u003E                        replaceBackup = \u0022persistent Backup \u0022 \u002B i.ToString() \u002B \u0022.sfs\u0022;\u003Cbr\u003E                        oldestFile = modified;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            File.Copy(Path.Combine(activeDirectory, \u0022persistent.sfs\u0022), Path.Combine(activeDirectory, replaceBackup), true);\u003Cbr\u003E            print(\u0022Backup saved as \u0022 \u002B replaceBackup);\u003Cbr\u003E            Saved = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public int getMaxSave(string entry) //Make sure that no amount of screwing up the Settings file will break the plugin\u003Cbr\u003E        {\u003Cbr\u003E            int number = 3;\u003Cbr\u003E            node = ConfigNode.Load(path);\u003Cbr\u003E            if (node != null)\u003Cbr\u003E            {                \u003Cbr\u003E                string value = node.GetValue(entry);\u003Cbr\u003E                if (value == null) return number;\u003Cbr\u003E                else if (Int32.TryParse(value, out number))\u003Cbr\u003E                    return number;\u003Cbr\u003E                else return 3;\u003Cbr\u003E            }\u003Cbr\u003E            else return number;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf anyone spots any issues, has any suggestions, or thinks this is a dumb idea, let me know.\u003C/p\u003E\u003Cp\u003ELicense for plugin software: \u003Ca href=\u0022http://www.rebol.com/docs/bsd-mit-license.html\u0022 rel=\u0022external nofollow\u0022\u003EBSD License\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-12T00:14:36Z\u0022 title=\u002206/12/2014 12:14  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 12, 2014\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003Cbr\u003EUpdate to version 3.1\n\u003C/span\u003E\n"},{"CreatedByName":"GavinZac","CreatedById":68719,"CreatedDateTime":"2014-03-06T01:33:45Z","Content":"\n\u003Cp\u003EThank you! Usually I just Ctrl\u002BAlt\u002BDel out, and it won\u0027t have saved yet. Nice to have a bit of extra confidence.\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-06T01:40:42Z","Content":"\n\u003Cp\u003EYeah, I usually catch it too, but I really hate it when I\u0027m not thinking click through to some other scene. \u003C/p\u003E\u003Cp\u003EThis might also be useful for development. I have run into issues a number of times where some error while loading a plugin has nuked all of my parts (not just the mod parts, everything), so not only do you lose the crafts, but you have to repurchase everything in the R\u0026amp;D center. A backup would be nice then.\u003C/p\u003E\u003Cp\u003EIf you\u0027re using some kind of quickload plugin to skip the spacecenter scene this plugin might not work, but it can probably be easily modified to fix that. The key part is creating the save file while still in the MainMenu scene, that way nothing can get corrupted by errors after loading.\u003C/p\u003E\u003Cp\u003EEdit: Just realized the time stamp was a bad idea. You\u0027d get an ever-growing list of backups, better to create one and overwrite it. I updated the link and source.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-06T02:48:36Z\u0022 title=\u002203/06/2014 02:48  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 6, 2014\u003C/time\u003E by DMagic\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sidfu","CreatedById":70409,"CreatedDateTime":"2014-03-06T09:11:07Z","Content":"\n\u003Cp\u003Ejust have it make say 3 backups each wtih just a name of backup1-3 wouldnt that be better or if u cn have it limit the number of back ups then have a name based on time and date.\u003C/p\u003E\n"},{"CreatedByName":"GavinZac","CreatedById":68719,"CreatedDateTime":"2014-03-06T10:23:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DMagic\u0022 data-cite=\u0022DMagic\u0022\u003E\u003Cdiv\u003EEdit: Just realized the time stamp was a bad idea. You\u0027d get an ever-growing list of backups, better to create one and overwrite it. I updated the link and source.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGood catch. Would\u0027ve gotten big, soon!\u003C/p\u003E\n"},{"CreatedByName":"Horus","CreatedById":99705,"CreatedDateTime":"2014-03-06T10:51:05Z","Content":"\n\u003Cp\u003EThinking of possibility to auto-commit the persistent file to repository (svn/git/...else).\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-06T16:14:23Z","Content":"\n\u003Cp\u003EI threw out the bool, so now the plugin runs every time you go back to the main menu. This way you can load several save games and it will make a backup each time, but only when you back out to the main menu. This seems like the best way to do it, if your save file was working the last time you quit, then the backup should also work (as long as you fix whatever broke your main persistent file in the first place).\u003C/p\u003E\u003Cp\u003EI changed the code in the preview above, though I haven\u0027t actually uploaded a new version. I think what\u0027s shown above is about as simple as it\u0027s going to get.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sidfu\u0022 data-cite=\u0022sidfu\u0022\u003E\u003Cdiv\u003Ejust have it make say 3 backups each wtih just a name of backup1-3 wouldnt that be better or if u cn have it limit the number of back ups then have a name based on time and date.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is probably a good idea, I\u0027ll try to find a way to do this.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Horus\u0022 data-cite=\u0022Horus\u0022\u003E\u003Cdiv\u003EThinking of possibility to auto-commit the persistent file to repository (svn/git/...else).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis might also be a good idea, but it seems like it might run afoul of the rule about not altering or creating files outside of the KSP directory.\u003C/p\u003E\n"},{"CreatedByName":"Amaroq","CreatedById":57607,"CreatedDateTime":"2014-03-06T18:49:04Z","Content":"\n\u003Cp\u003EDMagic - you rock! From \u0022I\u0027ll run with that\u0022 to \u0022I\u0027ll release that\u0022 in ... 2.5 hours?? \u003C/p\u003E\u003Cp\u003EYour username is \u003Cstrong\u003Ewell\u003C/strong\u003E deserved!\u003C/p\u003E\u003Cp\u003ERegarding N auto-saves, maybe N is configurable by mod .cfg?\u003C/p\u003E\n"},{"CreatedByName":"Trann","CreatedById":83801,"CreatedDateTime":"2014-03-06T18:55:14Z","Content":"\n\u003Cp\u003EThis makes my external drive and automatic backups obsolete! ;-)\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-07T00:18:00Z","Content":"\n\u003Cp\u003EEver get the feeling that your parents dropped you on your head when you were little? like, repeatedly? I knew that checking existing backups would require knowing the current savefile directory. Getting the main KSP directory is easy enough, then just append \u0027saves\u0027 to the end. But it took me forever to figure out how to get the name of the directory for the current savefile, only to realize that it was \u003Cstrong\u003Estaring right at me\u003C/strong\u003E, in the code I had \u003Cem\u003Ealready\u003C/em\u003E written and posted, just above this post; HighLogic.fetch.GameSaveFolder. \u003C/p\u003E\u003Cp\u003ESo anyway, this code makes two backups. It checks for existing backups, then takes the \u0027recent\u0027 backup and copies it over the old backup before creating a new \u0027recent\u0027 file.\u003C/p\u003E\u003Cp\u003EUnfortunately, it\u0027s not scalable. I need a different way to make three, or preferably one that makes three by default but allows an easy way to specify however many you want. I think I just need to make a loop that checks for the LastModifiedTime and returns the oldest file. I\u0027ll see what I can come up with.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace AutoSave\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.MainMenu, false)]\u003Cbr\u003E    public class AutoSave : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onGameSceneLoadRequested.Add(saveBackup);\u003Cbr\u003E        }        \u003Cbr\u003E\u003Cbr\u003E        public void saveBackup(GameScenes scene)\u003Cbr\u003E        {\u003Cbr\u003E            scene = HighLogic.LoadedScene;\u003Cbr\u003E            if (scene == GameScenes.MAINMENU)\u003Cbr\u003E            {\u003Cbr\u003E                //This doesn\u0027t seem to like combining three strings into one path for some reason, so I combine two strings twice, I\u0027m guessing the \u0022saves\u0022 string needs some kind of / \\.\u003Cbr\u003E                string activeDirectory = Path.Combine(Path.Combine(new System.IO.DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022saves\u0022), HighLogic.fetch.GameSaveFolder);\u003Cbr\u003E                System.IO.FileInfo oldBackup = new System.IO.FileInfo(Path.Combine(activeDirectory, \u0022Persistent Backup.sfs\u0022));\u003Cbr\u003E                if (oldBackup.Exists)\u003Cbr\u003E                {\u003Cbr\u003E                    System.IO.FileInfo newBackup = new System.IO.FileInfo(Path.Combine(activeDirectory, \u0022Persistent Backup Most Recent.sfs\u0022));\u003Cbr\u003E                    if (newBackup.Exists) newBackup.Replace(Path.Combine(activeDirectory, \u0022Persistent Backup.sfs\u0022), Path.Combine(activeDirectory, \u0022Persistent Backup Most Recent.sfs\u0022));\u003Cbr\u003E                    var save = GamePersistence.SaveGame(\u0022Persistent Backup Most Recent\u0022, HighLogic.fetch.GameSaveFolder, 0);\u003Cbr\u003E                    GameEvents.onGameSceneLoadRequested.Remove(saveBackup);\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    var save = GamePersistence.SaveGame(\u0022Persistent Backup\u0022, HighLogic.fetch.GameSaveFolder, 0);\u003Cbr\u003E                    GameEvents.onGameSceneLoadRequested.Remove(saveBackup);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-07T18:53:54Z","Content":"\n\u003Cp\u003EStick a fork in it, I think it\u0027s done.\u003C/p\u003E\u003Cp\u003EThis sets a default value of three backups and it can be changed using the included Settings.cfg file. I should probably test it a little more to make sure it works and doesn\u0027t break if you screw up the .cfg file, but otherwise I think it\u0027s good. I\u0027ll upload the plugin later.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace AutoSave\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.MainMenu, false)]\u003Cbr\u003E    public class AutoSave : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public int max = 3;\u003Cbr\u003E        protected ConfigNode node = null;\u003Cbr\u003E        string path = null;\u003Cbr\u003E\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onGameSceneLoadRequested.Add(saveBackup);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void saveBackup(GameScenes scene)\u003Cbr\u003E        {\u003Cbr\u003E            scene = HighLogic.LoadedScene;\u003Cbr\u003E            if (scene == GameScenes.MAINMENU)\u003Cbr\u003E            {\u003Cbr\u003E                DateTime oldestFile = new DateTime(2050,1,1);\u003Cbr\u003E                string replaceBackup = null;\u003Cbr\u003E                string activeDirectory = Path.Combine(Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022saves\u0022), HighLogic.fetch.GameSaveFolder);\u003Cbr\u003E\u003Cbr\u003E                path = Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022GameData/AutoSave/Settings.cfg\u0022).Replace(\u0022\\\\\u0022,\u0022/\u0022);\u003Cbr\u003E                FileInfo settings = new FileInfo(path);\u003Cbr\u003E\u003Cbr\u003E                if (settings.Exists)\u003Cbr\u003E                {\u003Cbr\u003E                    max = getMaxSave(\u0022MaxSaves\u0022);\u003Cbr\u003E                    print(\u0022Changing max saves value to \u0022 \u002B max.ToString());\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                for (int i = 0; i \u0026lt; max; i\u002B\u002B)\u003Cbr\u003E                {\u003Cbr\u003E                    FileInfo backup = new FileInfo(Path.Combine(activeDirectory, \u0022Persistent Backup \u0022 \u002B i.ToString() \u002B \u0022.sfs\u0022));\u003Cbr\u003E                    if (!backup.Exists)\u003Cbr\u003E                    {\u003Cbr\u003E                        replaceBackup = \u0022Persistent Backup \u0022 \u002B i.ToString();\u003Cbr\u003E                        break;\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        DateTime modified = backup.LastAccessTime;\u003Cbr\u003E                        if (modified \u0026lt; oldestFile)\u003Cbr\u003E                        {\u003Cbr\u003E                            replaceBackup = \u0022Persistent Backup \u0022 \u002B i.ToString();\u003Cbr\u003E                            oldestFile = modified;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                var save = GamePersistence.SaveGame(replaceBackup, HighLogic.fetch.GameSaveFolder, 0);\u003Cbr\u003E                GameEvents.onGameSceneLoadRequested.Remove(saveBackup);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public int getMaxSave(string max)\u003Cbr\u003E        {\u003Cbr\u003E            node = ConfigNode.Load(path);\u003Cbr\u003E            if (node != null)\u003Cbr\u003E            {\u003Cbr\u003E                string value = node.GetValue(max);\u003Cbr\u003E                return Convert.ToInt32(value);\u003Cbr\u003E            }\u003Cbr\u003E            else return 3;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Trann","CreatedById":83801,"CreatedDateTime":"2014-03-07T20:02:14Z","Content":"\n\u003Cp\u003ENice work! My only suggestion/thought: you can bypass the number of backups altogether if you append a timestamp (YYYYMMDD.HHMMSS) to make the filename unique each time.\u003C/p\u003E\u003Cp\u003ECertainly, these files will build up over time (if it crashes/fails to load constantly, that is) but they\u0027re trivially small and can be manually tossed.\u003C/p\u003E\n"},{"CreatedByName":"GavinZac","CreatedById":68719,"CreatedDateTime":"2014-03-08T07:54:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Trann\u0022 data-cite=\u0022Trann\u0022\u003E\u003Cdiv\u003ENice work! My only suggestion/thought: you can bypass the number of backups altogether if you append a timestamp (YYYYMMDD.HHMMSS) to make the filename unique each time.\u003Cp\u003ECertainly, these files will build up over time (if it crashes/fails to load constantly, that is) but they\u0027re trivially small and can be manually tossed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat was how it originally worked, and was removed. It\u0027s \u003Cem\u003Eprobably\u003C/em\u003E not going to kill your hard drive but is there really any benefit to keeping every persistent.sfs ever? Better to remove it for those who might not even realise what\u0027s going on.\u003C/p\u003E\n"},{"CreatedByName":"zakyggaps","CreatedById":105233,"CreatedDateTime":"2014-03-08T10:49:01Z","Content":"\n\u003Cp\u003EGreat job!\u003C/p\u003E\u003Cp\u003EI triied the same thing a few months ago and I\u0027d never know it could be done so nicely with GameScenes.onGameSceneLoadRequested() and GamePersistence.SaveGame().\u003C/p\u003E\u003Cp\u003EHere is my code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Reflection;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Text.RegularExpressions;\u003Cbr\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace Zaky_Inc\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddonFixed(KSPAddon.Startup.MainMenu, true, typeof(SaveBackup))]\u003Cbr\u003E    class SaveBackup : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private static string saveFileName = @\u0022persistent.sfs\u0022;\u003Cbr\u003E        private static string savePath = KSPUtil.ApplicationRootPath \u002B @\u0022saves/\u0022;\u003Cbr\u003E        private static int backupNum = getBackupNum(Assembly.GetExecutingAssembly().Location);\u003Cbr\u003E        private static List\u0026lt;string\u0026gt; gameList = new List\u0026lt;string\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E        // get the maximum number of backups, by reading the first number appeared in the name of the dll file, which defined this class\u003Cbr\u003E        // the number of backups is restricted to [5,20], with a default value = 5\u003Cbr\u003E        private static int getBackupNum(string assemblyPath)\u003Cbr\u003E        {\u003Cbr\u003E            const int minBackupNum = 5;\u003Cbr\u003E            const int maxBackupNum = 20;\u003Cbr\u003E            string fileName = Path.GetFileName(assemblyPath);\u003Cbr\u003E            var numPattern = new Regex(@\u0022\\d\u002B\u0022);\u003Cbr\u003E            int backupNum = 5;\u003Cbr\u003E            Match match;\u003Cbr\u003E\u003Cbr\u003E            if ((match = numPattern.Match(fileName)).Success)\u003Cbr\u003E                backupNum = Convert.ToInt32(match.Value);\u003Cbr\u003E\u003Cbr\u003E            if (backupNum \u0026lt; minBackupNum)\u003Cbr\u003E                backupNum = minBackupNum;\u003Cbr\u003E            if (backupNum \u0026gt; maxBackupNum)\u003Cbr\u003E                backupNum = maxBackupNum;\u003Cbr\u003E\u003Cbr\u003E            return backupNum;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private static string[] getOldBackups(string[] paths)\u003Cbr\u003E        {\u003Cbr\u003E            string[] oldBackups;\u003Cbr\u003E\u003Cbr\u003E            if (paths.Length \u0026gt; backupNum)\u003Cbr\u003E                oldBackups = paths.OrderBy(p =\u0026gt; File.GetCreationTime(p)).Take(paths.Length - backupNum).ToArray();\u003Cbr\u003E            else \u003Cbr\u003E                oldBackups = new string[] {};\u003Cbr\u003E\u003Cbr\u003E            return oldBackups;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private static string toProperString(DateTime time)\u003Cbr\u003E        {\u003Cbr\u003E            return time.ToString(\u0022yyyy-MM-dd_HH-mm-ss-ff\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        void Awake()\u003Cbr\u003E        {\u003Cbr\u003E            MonoBehaviour.DontDestroyOnLoad(this);\u003Cbr\u003E            Debug.Log(\u0022[\u0022 \u002B this.name \u002B \u0022] No.\u0022 \u002B this.GetInstanceID() \u002B \u0022 is successfully launched.\\n\u0022 \u002B \u003Cbr\u003E                        \u0022Current maximum number of backups is \u0022 \u002B backupNum \u002B \u0022.\\n\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        void OnLevelWasLoaded(int scene)\u003Cbr\u003E        {\u003Cbr\u003E            if (scene == (int)GameScenes.SPACECENTER \u0026amp;\u0026amp; !gameList.Contains(HighLogic.CurrentGame.Title))\u003Cbr\u003E            {\u003Cbr\u003E                gameList.Add(String.Copy(HighLogic.CurrentGame.Title));\u003Cbr\u003E                backUpSaveFile();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        void backUpSaveFile()\u003Cbr\u003E        {\u003Cbr\u003E            string saveFolder = HighLogic.SaveFolder;\u003Cbr\u003E            string currentSaveDir = savePath \u002B saveFolder \u002B \u0022/\u0022;\u003Cbr\u003E            string[] existingBackups;\u003Cbr\u003E            string currentBackup = \u0022\u0022;\u003Cbr\u003E            Debug.Log(\u0022[\u0022 \u002B this.name \u002B \u0022] No.\u0022 \u002B this.GetInstanceID() \u002B \u0022 is copying save files...\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (File.Exists(currentSaveDir \u002B saveFileName))\u003Cbr\u003E            {\u003Cbr\u003E                currentBackup = currentSaveDir \u002B saveFileName \u002B \u0022.backup.\u0022 \u002B toProperString(DateTime.Now);\u003Cbr\u003E\u003Cbr\u003E                if (!File.Exists(currentBackup))\u003Cbr\u003E                    File.Copy(currentSaveDir \u002B saveFileName, currentBackup);\u003Cbr\u003E\u003Cbr\u003E                existingBackups = Directory.GetFiles(currentSaveDir, \u0022*.backup.*\u0022);\u003Cbr\u003E                foreach (string oldBackup in getOldBackups(existingBackups))\u003Cbr\u003E                {\u003Cbr\u003E                    File.Delete(oldBackup);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            Debug.Log(\u0022[\u0022 \u002B this.name \u002B \u0022] No.\u0022 \u002B this.GetInstanceID() \u002B \u0022: backup accomplished.\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-08T10:56:07Z\u0022 title=\u002203/08/2014 10:56  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 8, 2014\u003C/time\u003E by zakyggaps\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-08T18:50:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Trann\u0022 data-cite=\u0022Trann\u0022\u003E\u003Cdiv\u003ENice work! My only suggestion/thought: you can bypass the number of backups altogether if you append a timestamp (YYYYMMDD.HHMMSS) to make the filename unique each time.\u003Cp\u003ECertainly, these files will build up over time (if it crashes/fails to load constantly, that is) but they\u0027re trivially small and can be manually tossed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, what GavinZac said. I\u0027m not really concerned about disk space either, it\u0027s more that you could end up with hundreds of files doing nothing in your save folder, and there\u0027s really no need for that.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zakyggaps\u0022 data-cite=\u0022zakyggaps\u0022\u003E\u003Cdiv\u003EGreat job!\u003Cp\u003EI triied the same thing a few months ago and I\u0027d never know it could be done so nicely with GameScenes.onGameSceneLoadRequested() and GamePersistence.SaveGame().\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI mostly made it by working backwards from an autoload plugin that skips right to an active vessel. You can see how simple the basic version is, it\u0027s about 10 lines. All of the complexity comes from checking existing backups to create a variable amount, but even still, it\u0027s pretty simple.\u003C/p\u003E\u003Cp\u003EI think this update is about final. It actually does what I intend it to and locates the oldest file, instead of just pretending to like the last version. I also added a bunch of checks to make sure that no one can screw up the Settings.cfg file enough to break it.\u003C/p\u003E\u003Cp\u003EI put it up on Spaceport if anyone\u0027s interested: \u003Ca href=\u0022http://kerbalspaceprogram.com/dmagic_autosave/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kerbalspaceprogram.com/dmagic_autosave/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe only issue is that it doesn\u0027t seem to work when used in conjunction with autoload plugins that bypass the main menu. It just saves a \u0022just started\u0022 persistent file with almost nothing in it. Some of these plugins might work (there are a lot of different versions floating around), but the one I\u0027m using doesn\u0027t.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace AutoSave\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.MainMenu, false)]\u003Cbr\u003E    public class AutoSave : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private int max = 3;\u003Cbr\u003E        protected ConfigNode node = null;\u003Cbr\u003E        private string path = null;\u003Cbr\u003E\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onGameSceneLoadRequested.Add(saveBackup);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void saveBackup(GameScenes scene)\u003Cbr\u003E        {            \u003Cbr\u003E            if (HighLogic.LoadedScene == GameScenes.MAINMENU)\u003Cbr\u003E            {\u003Cbr\u003E                DateTime oldestFile = new DateTime(2050,1,1);\u003Cbr\u003E                string replaceBackup = null;\u003Cbr\u003E                string activeDirectory = Path.Combine(Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022saves\u0022), HighLogic.fetch.GameSaveFolder);                \u003Cbr\u003E                path = Path.Combine(new DirectoryInfo(KSPUtil.ApplicationRootPath).FullName, \u0022GameData/AutoSave/Settings.cfg\u0022).Replace(\u0022\\\\\u0022,\u0022/\u0022);\u003Cbr\u003E\u003Cbr\u003E                if (File.Exists(path))       //Load Settings.cfg to check for change in max number of saves\u003Cbr\u003E                {\u003Cbr\u003E                    max = getMaxSave(\u0022MaxSaves\u0022);\u003Cbr\u003E                    print(\u0022Changing max saves value to \u0022 \u002B max.ToString());\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                for (int i = 0; i \u0026lt; max; i\u002B\u002B)\u003Cbr\u003E                {\u003Cbr\u003E                    string filepath = Path.Combine(activeDirectory, \u0022persistent Backup \u0022 \u002B i.ToString() \u002B \u0022.sfs\u0022);\u003Cbr\u003E                    if (!File.Exists(filepath))\u003Cbr\u003E                    {\u003Cbr\u003E                        replaceBackup = \u0022persistent Backup \u0022 \u002B i.ToString();\u003Cbr\u003E                        break;\u003Cbr\u003E                    }\u003Cbr\u003E                    else                   //If all backups have been written, check for the oldest file and rewrite that one\u003Cbr\u003E                    {\u003Cbr\u003E                        DateTime modified = File.GetLastWriteTime(filepath);\u003Cbr\u003E                        if (modified \u0026lt; oldestFile)\u003Cbr\u003E                        {\u003Cbr\u003E                            replaceBackup = \u0022persistent Backup \u0022 \u002B i.ToString();\u003Cbr\u003E                            oldestFile = modified;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                var save = GamePersistence.SaveGame(replaceBackup, HighLogic.fetch.GameSaveFolder, 0);\u003Cbr\u003E                GameEvents.onGameSceneLoadRequested.Remove(saveBackup);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public int getMaxSave(string entry) //Make sure that no amount of screwing up the Settings file will break the plugin.\u003Cbr\u003E        {\u003Cbr\u003E            int number = 3;\u003Cbr\u003E            node = ConfigNode.Load(path);\u003Cbr\u003E            if (node != null)\u003Cbr\u003E            {                \u003Cbr\u003E                string value = node.GetValue(entry);\u003Cbr\u003E                if (value == null) return number;\u003Cbr\u003E                else if (Int32.TryParse(value, out number))\u003Cbr\u003E                    return number;\u003Cbr\u003E                else return 3;\u003Cbr\u003E            }\u003Cbr\u003E            else return number;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"zakyggaps","CreatedById":105233,"CreatedDateTime":"2014-03-09T13:07:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DMagic\u0022 data-cite=\u0022DMagic\u0022\u003E\u003Cdiv\u003EThe only issue is that it doesn\u0027t seem to work when used in conjunction with autoload plugins that bypass the main menu. It just saves a \u0022just started\u0022 persistent file with almost nothing in it. Some of these plugins might work (there are a lot of different versions floating around), but the one I\u0027m using doesn\u0027t.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe you could try directly copying the existing persistent.sfs (using the methods of System.IO.File), it\u0027s quite simple if HighLogic.fetch.GameSaveFolder returns a proper path.\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-03-20T00:29:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zakyggaps\u0022 data-cite=\u0022zakyggaps\u0022\u003E\u003Cdiv\u003EMaybe you could try directly copying the existing persistent.sfs (using the methods of System.IO.File), it\u0027s quite simple if HighLogic.fetch.GameSaveFolder returns a proper path.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGood idea. It only took about two weeks, but I switched out one line and used File to create or overwrite a backup file with a copy of the existing persistent.sfs file. It seems to work fine with autoload plugins, everything else is the same. I updated the links on the first post.\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-05-26T16:46:50Z","Content":"\n\u003Cp\u003EI updated this again. It should finally work better with different quick-load plugins. Previously it seemed to work with some but not others. It uses xEvilReeperx\u0027s KSPAddonImproved to allow it to start in multiple different scenes. \u003C/p\u003E\u003Cp\u003EIt still only generates a backup once per game, but can be reset by going back to the main menu scene.\u003C/p\u003E\n"}]}