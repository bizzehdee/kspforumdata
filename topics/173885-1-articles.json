{"TopicId":173885,"ForumId":29,"TopicTitle":"Packed vessels position isn\u0026#039;t reliable from FixedUpdate !","CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2018-04-14T13:39:06Z","PageNum":1,"Articles":[{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2018-04-14T13:39:06Z","Content":"\n\u003Cp\u003E\nSo, I\u0027ve been struggling with something for many hours, so maybe someone over here can help me :\n\u003C/p\u003E\n\u003Cp\u003E\nI need to get the direction vector of my vessel target, which is another vessel that implement ITargetable. To do so, I use this :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\ntarget.GetTransform().position - myvessel.transform.position\u003C/pre\u003E\n\u003Cp\u003E\nIt works fine in the following situations :\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nBoth vessels are in the scene and NOT packed (they are close enough to each other and I\u0027m not timewarping)\n\u003C/li\u003E\n\u003Cli\u003E\nBoth vessels are in the scene and packed (happens when I\u0027m timewarping)\n\u003C/li\u003E\n\u003Cli\u003E\nMy vessel if either packed or not and the target vessel is unloaded (not in the scene)\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nBut in the situation where both vessels are in the scene, my vessel is not packed and the target vessel is packed (when the distance is greater than the physics-load distance, I believe this is set to 200 m by default), the direction vector I get is slightly offset, and the offset seems to gets worse the further my vessel is from the target vessel. I noted that the offset error seems to depend on the distance to the mainbody (or is it the orbital velocity ?) : it is barely noticeable in \u003Cabbr title=\u0022Low Kerbin Orbit\u0022\u003ELKO\u003C/abbr\u003E but I get a 30-40\u00B0 error when orbiting the sun.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat is strange to me is that every stock value that I could find (including FlightGlobals.fetch.vesselTargetDirection, GetWorldPos3D, Orbit...) are giving me the same wrong result, but somehow the navball target marker isn\u0027t affected by the issue and is correctly updated with a consistent target direction. I guess there is some shifting reference frame correction to do, but I can\u0027t pinpoint it. Does someone have a clue at what may be happening ?\n\u003C/p\u003E\n\u003Cp\u003E\nEdit : \u003Cspan\u003E\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257146\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0022 rel=\u0022\u0022\u003E@sarbian\u003C/a\u003E MechJeb is experiencing the exact same issue when using SmartASS. To reproduce, using the stock vessel mover cheat, rendez-vous a first vessel with an asteroid in sun orbit, then rendez-vous a second vessel with the first, this will place the two vessels 150m apart. Activate SmartAss and target the other vessel, everything should be fine. Then burn a bit to get further from the other vessel. As soon as the other vessel become packed, watch your attitude suddenly experience a 30-40\u00B0 offset from the stock target navball marker.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nEdit2 : Okay I think I found why : it seems that for On Rails vessels, the vessels state is updated in Update(), not in FixedUpdate() (!?!#%!), so \u003Cstrong\u003E\u003Cu\u003Eif you try to acquire another vessel position from a vessel FixedUpdate, you may be reading the values FROM THE LAST FRAME...\u003C/u\u003E\u003C/strong\u003E I need to do some more testing, but the TCA autopilot is not affected by the issue and happens to be updating its autopilot directions in Update().\n\u003C/p\u003E\n\u003Cp\u003E\nMoreover, if I substract the orbital velocity of the target to the direction (essentially computing were will be the target in the next frame), I get the correct direction :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\ntarget.GetTransform().position - vessel.transform.position - (target.GetObtVelocity() * TimeWarp.fixedDeltaTime)\u003C/pre\u003E\n\u003Cp\u003E\nAlso, this description of the\u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_vessel_precalculate.html\u0022 rel=\u0022\u0022\u003E VesselPrecalculate Class\u003C/a\u003E from the API docs seems to confirm that packed and non packed vessels may not get their position update at the same time, but I have trouble understanding the exact implications :\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is the counterpart to \u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_flight_integrator.html\u0022 rel=\u0022\u0022 title=\u0022This script adds all external forces to the ship parts.\u0022\u003EFlightIntegrator\u003C/a\u003E. As FI runs after most other FixedUpdate things run and finally applies all physics changes for the frame prior to passing off to the integrator, this runs at the start of the frame and precalculates the values for the fixed frame, like \u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E, vessel velocity and angular velocity, the force of gravity (and any drift compensation), vessel acceleration/G forces, and the like. It also will set position and rotation when on rails, or if off rails recompute the orbit based on those stats calculated. It handles being off rails specially: it will do its final update for any given UT in \u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_vessel_precalculate.html#abbf9ea5f60fa657f8398d3570723bcfa\u0022 rel=\u0022\u0022 title=\u0022Used for loaded/unpacked vessels so display matches physics. Runs most of what FixedUpdate does...\u0022\u003EUpdate()\u003C/a\u003E rather than \u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_vessel_precalculate.html#a1cb04b0160682ef049f0657841772141\u0022 rel=\u0022\u0022\u003EFixedUpdate()\u003C/a\u003E so the calculated pos/vel/etc stats for the vessel are correct for visual display. When on rails, nothing changes in PhysX integration so there is no need to run later. Note that so long as this is running, it tells the vessel\u0027s \u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_orbit_driver.html\u0022 rel=\u0022\u0022\u003EOrbitDriver\u003C/a\u003E not to do anything, and instead directly calls \u003Ca href=\u0022https://kerbalspaceprogram.com/api/class_orbit_driver.html\u0022 rel=\u0022\u0022\u003EOrbitDriver\u003C/a\u003E\u0027s Update methods. This is because when off rails, orbit updating needs to occur after we determine vessel \u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E and velocity, whereas when on rails, we need to update from the orbit before we calculate \u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E and velocity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-14T19:57:25Z\u0022 title=\u002204/14/2018 07:57  PM\u0022 data-short=\u00226 yr\u0022\u003EApril 14, 2018\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"}]}