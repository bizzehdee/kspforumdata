{"TopicId":151935,"ForumId":29,"TopicTitle":"[SOLVED] Upwards rotation on planet, knowing only latitude and longitude?","CreatedByName":"Rahjital","CreatedById":171470,"CreatedDateTime":"2016-11-12T20:31:10Z","PageNum":1,"Articles":[{"CreatedByName":"Rahjital","CreatedById":171470,"CreatedDateTime":"2016-11-12T20:31:10Z","Content":"\n\u003Cp\u003E\nI\u0027m creating a new ship through ProtoVessel.CreateVesselNode. I managed to place it correctly on the ground and got rotation to work properly, which I tested by using data from vessels saved in persistent.sfs.\n\u003C/p\u003E\n\u003Cp\u003E\nThe next step is to get this working for any point on the planet, and that\u0027s where I got stuck. No matter how I try, I can\u0027t get the ship to point upwards like a proper rocket should. How can I calculate the rotation quaternion to point the ship upwards for any latitude and longitude on a celestial body?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-13T12:46:15Z\u0022 title=\u002211/13/2016 12:46  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 13, 2016\u003C/time\u003E by Rahjital\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2016-11-12T22:05:41Z","Content":"\n\u003Cp\u003E\n\u003Ca href=\u0022https://docs.unity3d.com/ScriptReference/Quaternion.SetLookRotation.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.unity3d.com/ScriptReference/Quaternion.SetLookRotation.html\u003C/a\u003E\u003Cbr\u003E\u003Cbr\u003E\ncurrent position - planet position = up vector\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:rgb(69,84,99);font-family:\u0027Open Sans\u0027, sans-serif;font-size:14px;font-style:normal;font-weight:bold;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(248,248,248);float:none;\u0022\u003Eview\u003C/span\u003E vector doesn\u0027t really matter for rocket case, pick any orthogonal to up vector.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-12T22:06:45Z\u0022 title=\u002211/12/2016 10:06  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 12, 2016\u003C/time\u003E by Boris-Barboris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Rahjital","CreatedById":171470,"CreatedDateTime":"2016-11-13T00:10:23Z","Content":"\n\u003Cp\u003E\nThanks! I\u0027ve already tried that, among other things. This is how it looked:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EVector3d upAxis = FlightGlobals.getUpAxis(planet, planet.GetWorldSurfacePosition(latitude, longitude, altitude));\nQuaternion rotation = Quaternion.LookRotation(upAxis);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n(FlightGlobals.getUpAxis does exactly what you said, and then normalizes the vector.)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nAnd this is the result ingame:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022CoD1mUf.png\u0022 class=\u0022ipsImage\u0022 height=\u0022586\u0022 src=\u0022http://i.imgur.com/CoD1mUf.png\u0022 width=\u00221000\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nI suppose the vector could be somehow manipulated to yield the correct rotation, but I\u0027m at a loss how to do that correctly...\n\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2016-11-13T07:32:10Z","Content":"\n\u003Cp\u003E\nThat\u0027s KSP\u0027s vessel rotations at work. Always remember that vessel.transform.up\u00A0is the direction your vessel is pointing in (lets call it vessel.forward)\u00A0. On the other hand, the default \u0022no rotation\u0022 quaternion indicates vessel.transform.forward (vessel.up * -1, aka vessel.down)\n\u003C/p\u003E\n\u003Cp\u003E\nAny time you\u0027re dealing with vessel rotations, the following transform becomes very handy\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022com\u0022\u003E// NOTE: Quaternion maths is not commutative. You can\u0027t change the order of operations and get the same result!!! (x * y != y * x)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan\u003EQuat\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselrot \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E upRot \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EQuaternion\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEuler\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E90\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// rotate the direction 90 degrees about the x (right) axis. May be 90 or -90, I haven\u0027t checked\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-13T07:35:14Z\u0022 title=\u002211/13/2016 07:35  AM\u0022 data-short=\u00227 yr\u0022\u003ENovember 13, 2016\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2016-11-13T08:38:53Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222848517\u0022 data-ipsquote-contentid=\u0022151935\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221478995823\u0022 data-ipsquote-userid=\u0022171470\u0022 data-ipsquote-username=\u0022Rahjital\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n13 hours ago, Rahjital said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd this is the result ingame:\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf you would examine the function prototype, you would see that the way you do it assigns upVector to view. It is not\u00A0what you need.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-13T13:23:18Z\u0022 title=\u002211/13/2016 01:23  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 13, 2016\u003C/time\u003E by Boris-Barboris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Rahjital","CreatedById":171470,"CreatedDateTime":"2016-11-13T12:45:19Z","Content":"\n\u003Cp\u003E\nGot it to work, thank you both! Turns out that apart from having to fix the LookRotation, rotation for landed vessels is relative to the planet\u0027s transform, rather than global. The solution ended up being this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EQuaternion rotation = Quaternion.Inverse(planet.bodyTransform.rotation) * Quaternion.LookRotation(northAxis, upAxis);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-11-13T12:47:39Z\u0022 title=\u002211/13/2016 12:47  PM\u0022 data-short=\u00227 yr\u0022\u003ENovember 13, 2016\u003C/time\u003E by Rahjital\u003C/strong\u003E\n\u003C/span\u003E\n"}]}