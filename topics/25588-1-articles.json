{"TopicId":25588,"ForumId":15,"TopicTitle":"Kerbin\u0026#039;s Texture","CreatedByName":"dandirk","CreatedById":64044,"CreatedDateTime":"2013-05-05T17:38:32Z","PageNum":1,"Articles":[{"CreatedByName":"dandirk","CreatedById":64044,"CreatedDateTime":"2013-05-05T17:38:32Z","Content":"\n\u003Cp\u003EHello, I\u0027m looking to create an addon/mod that includes changing Kerbin\u0027s planet texture to a more hi-resolution file. Where in the game files can I find the planet texture? I can imagine I would have to do some Hex editing, which is no problem. \u003C/p\u003E\u003Cp\u003EI would also like to change the Space background as well... Let me know, and any help would be appreciated, Thanks!!!! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-05T19:00:12Z","Content":"\n\u003Cp\u003EAssuming there is one and it\u0027s not specified some other way then it\u0027s likely to be in the asset files in the KSP_data directory.\u003C/p\u003E\n"},{"CreatedByName":"dandirk","CreatedById":64044,"CreatedDateTime":"2013-05-05T20:26:04Z","Content":"\n\u003Cp\u003EHello and thanks for the reply! There are 12 different files with the extension .assets ... is there a tool I can use to open / compress those files to view their contents? Thanks!\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-05T21:05:51Z","Content":"\n\u003Cp\u003EAs far as I know nobody has tinkered with them yet, so there is no tool.\u003C/p\u003E\u003Cp\u003EYou might be able to change it in-game through a plugin, I think Kerbin\u0027s surface is defined by some of these objects (all subclasses of PQSMod that are children of Kerbin):\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/QuadMeshColliders (PQSMod_QuadMeshColliders)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_CelestialBody (PQSMod_CelestialBodyTransform)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_CoastlineLOD (PQSMod_QuadEnhanceCoast)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_Height (PQSMod_VertexHeightMap)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_HeightNoise (PQSMod_VertexHeightNoiseVertHeight)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_HeightNoise (PQSMod_VertexHeightNoiseVertHeight)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_HeightNoise (PQSMod_VertexSimplexHeightAbsolute)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_LandClassOcean (PQSLandControl)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_Material_AerialPerspective (PQSMod_AerialPerspectiveMaterial)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_Material_ModProjection (PQSMod_AltitudeAlpha)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_Material_SunLight (PQSMod_MaterialSetDirection)\u003C/p\u003E\u003Cp\u003EKerbin/Kerbin/_Material_SurfaceQuads (PQSMod_UVPlanetRelativePosition)\u003C/p\u003E\u003Cp\u003EKerbin/KerbinOcean/CelestialBodyBlockActivation (PQSMod_BlockActivation)\u003C/p\u003E\u003Cp\u003EKerbin/KerbinOcean/OceanFX (PQSMod_OceanFX)\u003C/p\u003E\u003Cp\u003EKerbin/KerbinOcean/QuadRemoveMap (PQSMod_RemoveQuadMap)\u003C/p\u003E\u003Cp\u003EKerbin/KerbinOcean/SurfaceQuadUV (PQSMod_UVPlanetRelativePosition)\u003C/p\u003E\u003Cp\u003EKerbin/KerbinOcean/_Material_AerialPerspective (PQSMod_AerialPerspectiveMaterial)\u003C/p\u003E\u003Cp\u003EBut again, it\u0027s not really an area where a anyone has much enough exploring/documenting.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-05T21:08:21Z\u0022 title=\u002205/05/2013 09:08  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 5, 2013\u003C/time\u003E by EndlessWaves\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"dandirk","CreatedById":64044,"CreatedDateTime":"2013-05-05T21:32:01Z","Content":"\n\u003Cp\u003EThanks!, Yeah i figured no one has tinkered yet because of the lack of mods. But, none the less I\u0027m determined to do this since I am a huge graphics guru and I love this game so damn much.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-05T21:42:10Z","Content":"\n\u003Cp\u003EA couple of bits of code you might find useful then, I had a poke at it when helping Saik0 with his mapping project but I\u0027ve been busy with other projects so haven\u0027t looked further.\u003C/p\u003E\u003Cp\u003EGet all objects of classes that are subclasses of PQSMod (with exceptions for the classes that mainly handle structures and easter eggs):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\t\tPQSMod[] PQSMods = FindObjectsOfType(typeof(PQSMod)) as PQSMod[];\u003Cbr\u003E\t\tforeach(PQSMod eachObject in PQSMods)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif(eachObject is PQSCity == false \u0026amp;\u0026amp; eachObject is PQSMod_MapDecal == false \u0026amp;\u0026amp; eachObject is PQSMod_FlattenArea == false)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tprint(eachObject.transform.parent.parent.name \u002B \u0022/\u0022 \u002B eachObject.transform.parent.name \u002B \u0022/\u0022 \u002B eachObject.name \u002B \u0022 (\u0022 \u002B eachObject.GetType() \u002B \u0022)\u0022);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGrab all the images I could find in the various PQSMod classes and dump them to the PluginData folder (replace MapGrapper with the name of your class):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\t\tprint(\u0022PQSMod_VertexColorMap\u0022);\u003Cbr\u003E\t\tPQSMod_VertexColorMap[] VertexColourMaps = FindObjectsOfType(typeof(PQSMod_VertexColorMap)) as PQSMod_VertexColorMap[];\u003Cbr\u003E\u003Cbr\u003E\t\tint count = 0;\u003Cbr\u003E\t\tforeach(PQSMod_VertexColorMap eachObject in VertexColourMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.vertexColorMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\tif(eachObject.vertexColorMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.vertexColorMap.width, eachObject.vertexColorMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.vertexColorMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse if(eachObject.vertexColorMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.vertexColorMap.width, eachObject.vertexColorMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.vertexColorMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t\ttextureToWrite = eachObject.vertexColorMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\tBinaryWriter PNGWriter = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tPNGWriter.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\tPNGWriter.Close();\u003Cbr\u003E\u003Cbr\u003E\t\t}\t\t\u003Cbr\u003E\u003Cbr\u003E\t\tprint(\u0022PQSMod_VertexSimplexHeightMap\u0022);\u003Cbr\u003E\t\tPQSMod_VertexSimplexHeightMap[] VertexSimplexHeightMaps = FindObjectsOfType(typeof(PQSMod_VertexSimplexHeightMap)) as PQSMod_VertexSimplexHeightMap[];\u003Cbr\u003E\u003Cbr\u003E\t\tforeach(PQSMod_VertexSimplexHeightMap eachObject in VertexSimplexHeightMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.heightMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\tif(eachObject.heightMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse if(eachObject.heightMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t\ttextureToWrite = eachObject.heightMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\tBinaryWriter PNGWriter = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tPNGWriter.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\tPNGWriter.Close();\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tprint(\u0022PQSMod_VertexHeightMap\u0022);\u003Cbr\u003E\t\tPQSMod_VertexHeightMap[] VertexHeightMaps = FindObjectsOfType(typeof(PQSMod_VertexHeightMap)) as PQSMod_VertexHeightMap[];\u003Cbr\u003E\u003Cbr\u003E\t\tforeach(PQSMod_VertexHeightMap eachObject in VertexHeightMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.heightMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\tif(eachObject.heightMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse if(eachObject.heightMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t\ttextureToWrite = eachObject.heightMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\tBinaryWriter PNGWriter = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tPNGWriter.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\tPNGWriter.Close();\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tprint(\u0022PQSMod_VertexColorMapBlend\u0022);\t\t\u003Cbr\u003E\t\tPQSMod_VertexColorMapBlend[] VertexColourBlendMaps = FindObjectsOfType(typeof(PQSMod_VertexColorMapBlend)) as PQSMod_VertexColorMapBlend[];\u003Cbr\u003E\u003Cbr\u003E\t\tforeach(PQSMod_VertexColorMapBlend eachObject in VertexColourBlendMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.vertexColorMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\tif(eachObject.vertexColorMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.vertexColorMap.width, eachObject.vertexColorMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.vertexColorMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse if(eachObject.vertexColorMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\ttextureToWrite = new Texture2D(eachObject.vertexColorMap.width, eachObject.vertexColorMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\ttextureToWrite.SetPixels(eachObject.vertexColorMap.GetPixels());\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t\ttextureToWrite = eachObject.vertexColorMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\tBinaryWriter PNGWriter = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\tPNGWriter.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\tPNGWriter.Close();\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t/*print(\u0022PQSMod_MapDecal\u0022);\u003Cbr\u003E\t\tPQSMod_MapDecal[] decalMaps = FindObjectsOfType(typeof(PQSMod_MapDecal)) as PQSMod_MapDecal[];\u003Cbr\u003E\u003Cbr\u003E\t\tforeach(PQSMod_MapDecal eachObject in decalMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif(eachObject.colorMap != null \u0026amp;\u0026amp; eachObject.heightMap != null)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.colorMap.format \u002B \u0022 \u0022 \u002B eachObject.heightMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\t\tif(eachObject.colorMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.colorMap.width, eachObject.colorMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.colorMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse if(eachObject.colorMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.colorMap.width, eachObject.colorMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.colorMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse\u003Cbr\u003E\t\t\t\t\ttextureToWrite = eachObject.colorMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tBinaryWriter PNGWriter1 = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B \u0022Colour\u0022 \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\t\tPNGWriter1.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\t\tPNGWriter1.Close();\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tif(eachObject.heightMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse if(eachObject.heightMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse\u003Cbr\u003E\t\t\t\t\ttextureToWrite = eachObject.heightMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tBinaryWriter PNGWriter2 = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B \u0022Height\u0022 \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\t\tPNGWriter2.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\t\tPNGWriter2.Close();\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}*/\u003Cbr\u003E\u003Cbr\u003E\t\tprint(\u0022PQSLandControl\u0022);\u003Cbr\u003E\t\tPQSLandControl[] LandControlMaps = FindObjectsOfType(typeof(PQSLandControl)) as PQSLandControl[];\u003Cbr\u003E\u003Cbr\u003E\t\tforeach(PQSLandControl eachObject in LandControlMaps)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif(eachObject.heightMap != null)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tcount\u002B\u002B;\u003Cbr\u003E\t\t\t\tprint(eachObject.transform.parent.name \u002B \u0022 \u0022 \u002B eachObject.heightMap.format \u002B \u0022 \u0022 \u002B eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\t\tTexture2D textureToWrite;\u003Cbr\u003E\t\t\t\tif(eachObject.heightMap.format != TextureFormat.DXT1)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.RGB24, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse if(eachObject.heightMap.format != TextureFormat.DXT5)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\ttextureToWrite = new Texture2D(eachObject.heightMap.width, eachObject.heightMap.height, TextureFormat.ARGB32, false);\u003Cbr\u003E\t\t\t\t\ttextureToWrite.SetPixels(eachObject.heightMap.GetPixels());\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\telse\u003Cbr\u003E\t\t\t\t\ttextureToWrite = eachObject.heightMap;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tBinaryWriter PNGWriter = BinaryWriter.CreateForType\u0026lt;MapGrabber\u0026gt;(eachObject.transform.parent.name \u002B count \u002B \u0022.png\u0022);\u003Cbr\u003E\t\t\t\tPNGWriter.Write(textureToWrite.EncodeToPNG());\u003Cbr\u003E\t\t\t\tPNGWriter.Close();\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"dandirk","CreatedById":64044,"CreatedDateTime":"2013-05-05T21:44:58Z","Content":"\n\u003Cp\u003EWow this is great, ill take a crack at this and let you know how it goes!\u003C/p\u003E\n"}]}