{"TopicId":95046,"ForumId":44,"TopicTitle":"Numerical Diff Eq problems.","CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-12-30T20:45:08Z","PageNum":1,"Articles":[{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-12-30T20:45:08Z","Content":"\n\u003Cp\u003ESoo, I ve been trying to add orientation to my model of the flight dynamics of a rocket but I ve been running into a lot of problems. I didn\u0027t bother actually doing the math for the moments of inertia and everything because I guess it really doesnt have that much of an effect on the general behaviour of the rocket,but rather simple specifics of its movement. \u003C/p\u003E\u003Cp\u003EThe problem is the following, when the rocket is offset from a perfect 90 degree angle at launch, it gains horizontal velocity faster than vertical (due to gravity) and therefore acquires another offset form the launch angle (say it was 89 degrees). The fins of the rocket should stabilize it by using the lift gained from the small angle of attack and point it back towards the velocity vector, this is what produces the gravity turn we all know and love (I think, I might be wrong though). In my model though, the rocket fails to stabilize properly and starts rotating uncontrollably after a certain amount of time. \u003C/p\u003E\u003Cp\u003EAt first it oscillates as a pendulum would,but deviating just a bit more with each period and gaining more and more angular velocity. Is this something that naturally arises when using euler\u0027s method to analyse this type of motion or would it also happen if I were to use Runge-Kutta\u0027s? I was thinking it may be something that naturally happens when using discrete time to analyse something that would be continous. By reducing the time step I was able to increase the time it would take for the deadly rotation to take place, but im running out of memory on excel (Its waay easier than using matlab or anything else, at least for me).\u003C/p\u003E\u003Cp\u003EAnyways, please tell me what you think, tell me if you want the sheet to see if there\u0027s anything wrong, and if you need i ll draw some pictures on paint to better illustrate the problem.\u003C/p\u003E\u003Cp\u003EThank you very much!\u003C/p\u003E\n"},{"CreatedByName":"UmbralRaptor","CreatedById":2767,"CreatedDateTime":"2014-12-30T20:53:12Z","Content":"\n\u003Cp\u003ERandom thought: is there any damping force in the oscillation?\u003C/p\u003E\u003Cp\u003EThat said, pictures and equations are likely to help immensely.\u003C/p\u003E\n"},{"CreatedByName":"PakledHostage","CreatedById":8059,"CreatedDateTime":"2014-12-30T21:23:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022UmbralRaptor\u0022 data-cite=\u0022UmbralRaptor\u0022\u003E\u003Cdiv\u003ERandom thought: is there any damping force in the oscillation?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think this is a good guess. You\u0027re probably using the geometric angle of attack of the tail fins to impart a restoring moment, but in reality the fin\u0027s angle of attack would vary with the rotational speed and the angular displacement (i.e. aerodynamic angle of attack != geometric angle of attack). \u003C/p\u003E\u003Cp\u003EYou might also want to double check how you\u0027ve formulated your equations to make sure you\u0027re not aggravating the problem due to a loss of precision. A good read is \u0022\u003Ca href=\u0022http://www.stewartcalculus.com/data/default/upfiles/LiesCalcAndCompTold.pdf\u0022 rel=\u0022external nofollow\u0022\u003ELies My Computer and Calculator Told Me\u003C/a\u003E\u0022.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-12-30T22:53:35Z","Content":"\n\u003Cp\u003E\u003Ca href=\u0022http://latex.codecogs.com/gif.latex?%5Chuge%20x%27%27_%7Bj%7D%28t%29%3D%5Cfrac%7B-%5Cfrac%7B1%7D%7B2%7D*A*C_%7Bd%7D*1%2C225*e%5E%7B-x_%7Bj%7D*10%5E%7B-4%7D%7D*x%27_%7Bj%7D%5E2\u0026amp;plus;F*sin%28%5Ctheta%20%29-g*%28M_%7B0%7D-M_%7Br%7D*t%29%7D%7BM_%7B0%7D-M_%7Br%7D*t%7D\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://latex.codecogs.com/gif.latex?%5Chuge%20x%27%27_%7Bj%7D%28t%29%3D%5Cfrac%7B-%5Cfrac%7B1%7D%7B2%7D*A*C_%7Bd%7D*1%2C225*e%5E%7B-x_%7Bj%7D*10%5E%7B-4%7D%7D*x%27_%7Bj%7D%5E2\u0026amp;plus;F*sin%28%5Ctheta%20%29-g*%28M_%7B0%7D-M_%7Br%7D*t%29%7D%7BM_%7B0%7D-M_%7Br%7D*t%7D\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://latex.codecogs.com/gif.latex?%5Chuge%20x%27%27_%7Bi%7D%28t%29%3D%5Cfrac%7B-%5Cfrac%7B1%7D%7B2%7D*A*C_%7Bd%7D*1%2C225*e%5E%7B-x_%7Bj%7D*10%5E%7B-4%7D%7D*x%27_%7Bi%7D%5E2\u0026amp;plus;F*cos%28%5Ctheta%20%29%7D%7BM_%7B0%7D-M_%7Br%7D*t%7D\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://latex.codecogs.com/gif.latex?%5Chuge%20x%27%27_%7Bi%7D%28t%29%3D%5Cfrac%7B-%5Cfrac%7B1%7D%7B2%7D*A*C_%7Bd%7D*1%2C225*e%5E%7B-x_%7Bj%7D*10%5E%7B-4%7D%7D*x%27_%7Bi%7D%5E2\u0026amp;plus;F*cos%28%5Ctheta%20%29%7D%7BM_%7B0%7D-M_%7Br%7D*t%7D\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI ll be posting a the rest in a few minutes\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-31T01:44:05Z","Content":"\n\u003Cp\u003EHave not had a chance to take a proper look at it, but from previous experience with aerodynamics sims, my first guess goes along with PackledHostages. Taking into account rotational velocity usually takes care of damping. Just compute relative wind vector for each fin, then use thin air foil theory as approximation.\u003C/p\u003E\u003Cp\u003EOscillations building up into tumbling could be due to integration errors. You should use at least 2nd order method for problems approximating harmonic oscillator.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-12-31T02:23:49Z","Content":"\n\u003Cp\u003EThats what I did, \u003Ca href=\u0022http://i.imgur.com/bXkdEyH.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/bXkdEyH.jpg\u003C/a\u003E I used thin airfoil theory to estimate the lift coefficient. By making the change in time smaller I was able to get almost rid of the osicllation but it is still there (\u002B- 1 degreee isnt that bad IMO). \u003Ca href=\u0022https://cdn.fbsbx.com/hphotos-xpa1/v/t59.2708-21/10740687_10203439585645884_287536767_n.xlsx?oh=223ccd3ae4dae86deba3711280b4af32\u0026amp;oe=54A5B90E\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://cdn.fbsbx.com/hphotos-xpa1/v/t59.2708-21/10740687_10203439585645884_287536767_n.xlsx?oh=223ccd3ae4dae86deba3711280b4af32\u0026amp;oe=54A5B90E\u003C/a\u003E This is the excel file, sorry for the weird colours and ....ty colour coding, im terrible at making things look pretty (or work at all). Getting a 3rd or 4th degree runge kutta will take me a lot of time, but it may be worth it.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-31T02:24:14Z\u0022 title=\u002212/31/2014 02:24  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 31, 2014\u003C/time\u003E by mardlamock\u003C/strong\u003E\n\u003Cbr\u003Eadded file\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-31T03:32:12Z","Content":"\n\u003Cp\u003ELittle advantage of higher order RK here. Should work with 2nd. Have you tried linearizing your diff eq? Ideally you want to see it turn into critically damped harmonic oscillator. But anything close should be stable.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-12-31T03:59:10Z","Content":"\n\u003Cp\u003ECool, less work to do if I only need 2nd order RK. I havent tried linearizing it but i will have to learn what the hell that is and try it out (still in junior hs, any good resources you might recommend). The problem seems to become apparent when the velocity reaches speeds below 50m-s (that is it is launched somewhere close to a 90 degree angle), the rocket then has to do a pretty large turn to start facing the velocity vector and it just fails and flops all over the place. Changing the moments of inertia to something realistic could help, but I dont have any flight data to compare it with. Tomorrow I\u00C3\u201A\u00C2\u00B4ll try doing the 2nd order RK and see if it is any better, thanks a lot man!\u003C/p\u003E\n"},{"CreatedByName":"Three1415","CreatedById":85754,"CreatedDateTime":"2015-01-02T05:09:30Z","Content":"\n\u003Cp\u003Emardlamock, I think I found your problem(s). First though less significantly, your units are kind of broken (acceleration != Force/(mass*time) -g), but more problematic is that you did the same thing that I did when I was trying to model drag forces: You used Newton drag and broke it down into velocity components, which cannot be done. This is because breaking the velocity vector into components and then squaring them individually does not give you a drag-force vector at the angle opposite to motion [arctan(x_j/x_i)] but rather a much different one [arctan(x_j^2/x_i^2)], which means that in your model, drag is applying a torque to your craft, thus the wobbling. \u003C/p\u003E\u003Cp\u003EThe correct form is counterintuitive: drag force in two dimensions looks like this: F_x = C * (v_total) * (v_y) and F_y = C * (v_total) * (v_x). Since you are already doing this numerically, correction is probably not that hard, though you may have to use higher-order numerical approximations like Runge-Kutta to account for this. I do not have much experience with numerical models, however, and thus I will defer to K^2 or other people with more.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-02T05:11:32Z\u0022 title=\u002201/02/2015 05:11  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 2, 2015\u003C/time\u003E by Three1415\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-02T05:32:56Z","Content":"\n\u003Cp\u003EI dont think adding in moment of inertia terms will help, since although it will take longer for the oscillations to form, they will also be harder to stop, since they will have much more inertia..\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Three1415\u0022 data-cite=\u0022Three1415\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThe correct form is counterintuitive: drag force in two dimensions looks like this: F_x = C * (v_total) * (v_y) and F_y = C * (v_total) * (v_x). Since you are already doing this numerically, correction is probably not that hard, though you may have to use higher-order numerical approximations like Runge-Kutta to account for this. I do not have much experience with numerical models, however, and thus I will defer to K^2 or other people with more.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhy is F_x = C*v_total*V_y and not: F_x = C*v_total^2 * cos(theta) and F_y = C*V_total^2 * sin(theta)?\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-02T05:52:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Three1415\u0022 data-cite=\u0022Three1415\u0022\u003E\u003Cdiv\u003Emardlamock, I think I found your problem(s). First though less significantly, your units are kind of broken (acceleration != Force/(mass*time) -g), but more problematic is that you did the same thing that I did when I was trying to model drag forces: You used Newton drag and broke it down into velocity components, which cannot be done. This is because breaking the velocity vector into components and then squaring them individually does not give you a drag-force vector at the angle opposite to motion [arctan(x_j/x_i)] but rather a much different one [arctan(x_j^2/x_i^2)], which means that in your model, drag is applying a torque to your craft, thus the wobbling. \u003Cp\u003EThe correct form is counterintuitive: drag force in two dimensions looks like this: F_x = C * (v_total) * (v_y) and F_y = C * (v_total) * (v_x). Since you are already doing this numerically, correction is probably not that hard, though you may have to use higher-order numerical approximations like Runge-Kutta to account for this. I do not have much experience with numerical models, however, and thus I will defer to K^2 or other people with more.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECrap, I had no idea you couldnt separate the components like I did, it just seemed like a reasonable thing to do. Could you draw something for me to illustrate what you mean by saying the drag force is applying a torque on the craft? What I understood in your comment is that when there is a horizontal drag force being applied to the craft, it will always generate a torque and no translation due to a missplacement from the center of mass, therefore doing what I did and breaking the translational motion taking into account sideways drag is wrong, because the drag wont generate any translational movement. What I fail to understand though is how, without me having done it, that torque is being taken into account in the equations I formulated. \u003Ca href=\u0022http://i.imgur.com/4I3cFUB.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/4I3cFUB.png\u003C/a\u003E Here is a pic with a bit of explaining of what I thought. I will change the model and see if it removes the oscillation, but I still dont see quite how. Oh and btw, the units arent broken, its Force/(initialmass-massflowrate*t)-g. If you dont mind me asking, what where you building a drag force model for? Anyways, thanks a lot man, you ve been extremely helpful!\u003C/p\u003E\n"},{"CreatedByName":"Three1415","CreatedById":85754,"CreatedDateTime":"2015-01-02T09:06:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003EWhy is F_x = C*v_total*V_y and not: F_x = C*v_total^2 * cos(theta) and F_y = C*V_total^2 * sin(theta)? \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBlast--I switched v_x and v_y for some reason. But otherwise the descriptions are equivalent:\u003C/p\u003E\u003Cp\u003Etheta = arctan(v_y/v_x)\u003C/p\u003E\u003Cp\u003Esin(theta) = sin(arctan(v_y/v_x)) = v_y/sqrt(v_x^2\u002Bv_y^2) = v_y/v_total\u003C/p\u003E\u003Cp\u003EF_y = C*v_total^2*v_y/v_total = C * v_total * v_y\u003C/p\u003E\u003Cp\u003Ecos(theta) = v_x/v_total\u003C/p\u003E\u003Cp\u003EF_x = C*v_total^2*v_x/v_total = C * v_total * v_x\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003ECrap, I had no idea you couldnt separate the components like I did, it just seemed like a reasonable thing to do. Could you draw something for me to illustrate what you mean by saying the drag force is applying a torque on the craft? What I understood in your comment is that when there is a horizontal drag force being applied to the craft, it will always generate a torque and no translation due to a missplacement from the center of mass, therefore doing what I did and breaking the translational motion taking into account sideways drag is wrong, because the drag wont generate any translational movement.\u003C/div\u003E\u003C/blockquote\u003E \u003Cp\u003EWell, it is not \u003Cem\u003Eactually\u003C/em\u003E torque; it just changes the direction of velocity, rather than the orientation of the rocket, but this has disastrous consequences due to the lifting force of your aerofoils.\u003C/p\u003E\u003Cp\u003EBut first, a demonstration of why one cannot break Newton (F_drag = C*v^2) into components like one would think.\u003C/p\u003E\u003Cp\u003EPrepare for poorly illustrated MS Paint diagrams!\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/BkZrczn.png\u0022 alt=\u0022BkZrczn.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis shows what happens when you try to square the components rather than the total velocity: Not only is the magnitude incorrect, but for theta = arctan(v_y/v_x), the direction of this \u0022component drag\u0022 is instead arctan([v_y/v_x]^2), which is not the same angle. This property has been annoying physicists (and probably engineers too) for centuries, as now one must resort to the v_total * v_x or v_total * v_y equations, which are coupled and thus unsolvable. Like I said before, you are doing this numerically, so it is not much of a problem for you, but it is unfortunate nonetheless. It is also worthwhile to note that the disparity between \u0022real\u0022 and component drag decreases exponentially as one approaches a forty-five-degree angle--this, too, wreaks havoc upon things, as you shall see shortly. \u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/0gtOUhl.png\u0022 alt=\u00220gtOUhl.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis image shows the effect of the \u0022pseudo-torque\u0022 I was talking about earlier on the path of a projectile launched at some initial velocity \u003Cem\u003Ev\u003C/em\u003E. With component drag, it will exhibit \u0022path-bending\u0022 and arc \u003Cem\u003Eupwards\u003C/em\u003E rather than downwards for high initial \u003Cem\u003Ev\u003C/em\u003E, as well as weird behavior approaching what would otherwise be terminal velocity. Obviously, this is not what happens in reality, but blame it for causing your model to oscillate and flail about uncontrollably. \u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/lBaQh98.png\u0022 alt=\u0022lBaQh98.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EFinally, this image illustrates the effects that lead to oscillation with component drag. These effects become more noticeable at high launch angles for the rocket (due to the large disparity between real and component drag as well as the effect of angle of attack on aerofoils), which explains the behavior that you are seeing. In the first stage of the oscillation, the component drag generates force far closer to a ninety-degree angle than the rocket\u0027s actual direction of motion, which compounds with the effect of gravity to cause the rocket to accelerate much more in the horizontal direction, forcing its velocity vector towards the x-axis. However, the disparity between real and component drag decreases vastly as the rocket\u0027s direction of motion nears forty-five degrees, while the lift generated by the aerofoils increases greatly. This results in the \u0022failed normalization\u0022 characteristic of stage two of the oscillation--these rapidly changing forces cause the rocket\u0027s direction of motion to, instead of be dampened, \u0022rebound\u0022 to an even higher angle than it started with, making this a positive feedback loop exacerbated even further by the fact that the rocket is still accelerating, and the magnitudes of both lift and drag forces grow quickly as speed increases. Thus, this creates the pseudo-resonance that eventually causes the model breakdown: The rocket is \u0022pushed downwards\u0022 by component drag, then rebounded to an even greater angle by lift, then pushed down even further, etc. This effect also explains why smaller time-steps prolong failure: Large time-steps will not account for the exponentially-decreasing disparity between real and component drag as well, allowing the rocket to go even closer to the horizontal and thus making it bounce up even higher and so fail faster. \u003C/p\u003E\u003Cp\u003EI assumed in these images that the center of lift was not precisely aligned with the center of mass and so could generate torque to, in ideal circumstances, \u0022force\u0022 the rocket into a gravity turn like you stated in the OP. However, even if lift cannot provide torque, oscillatory effects will only be suppressed, not removed, and failure will merely be delayed rather than stopped entirely. So correct your drag model! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003EOh and btw, the units arent broken, its Force/(initialmass-massflowrate*t)-g.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, at least that is something that you do not have to deal with--I did not realize that M_r was mass flow-rate. But now you are stuck with coupled unsolvable differential equations. What fun! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003EIf you dont mind me asking, what where you building a drag force model for?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I represent my high school\u0027s FRC team\u0027s only non-engineering-type person (I am far more a physicist at heart) and so last year I created a set of equations that would determine what impulse would send the ball into the goal as well as the optimal launch angle to do so. As this model did not include drag, however, and I hate ignoring possibly significant factors in modelling, I resolved that I would expand it this year to include drag forces (on the assumption that we would again be launching projectiles this season) and use that data to program a targeting computer into the robot\u0027s cRio. But I made the same assumption that you did--that Newton drag could be split into components. And so, after several weeks of terrible integrals (hyperbolic arctangent, anyone?), horrifying substitutions for velocity, and shoehorning the model into a form that could be used in a C\u002B\u002B framework, I finally realized my error, of course just as I thought I was finished. *POOF* went about fifteen pages of algebra, two MATLAB scripts, an Excel spreadsheet, and some C\u002B\u002B pseudocode. And now I have been relegated to using Stokes drag (F_drag = C * v_total)...So inaccurate at higher Reynold\u0027s numbers...\u003Cspan style=\u0022font-size:8px;\u0022\u003ESo inaccurate...\u003C/span\u003E *eye twitches involuntarily*\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003EAnyways, thanks a lot man, you ve been extremely helpful! \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re very welcome. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EBut honestly, as much as I really hate drag now, I enjoy physics too much not to still like doing things such as this. And I certainly do not want other people to have to suffer what I went through and more or less lose all of their work.\u003C/p\u003E\u003Cp\u003E...Wow. As usual, I A: Took a lot longer than I expected to; and B: Wrote far more than was probably necessary...Whatever.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-02T09:17:23Z\u0022 title=\u002201/02/2015 09:17  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 2, 2015\u003C/time\u003E by Three1415\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-04T17:35:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Three1415\u0022 data-cite=\u0022Three1415\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWell, I represent my high school\u0027s FRC team\u0027s only non-engineering-type person (I am far more a physicist at heart) and so last year I created a set of equations that would determine what impulse would send the ball into the goal as well as the optimal launch angle to do so. As this model did not include drag, however, and I hate ignoring possibly significant factors in modelling, I resolved that I would expand it this year to include drag forces (on the assumption that we would again be launching projectiles this season) and use that data to program a targeting computer into the robot\u0027s cRio. But I made the same assumption that you did--that Newton drag could be split into components. And so, after several weeks of terrible integrals (hyperbolic arctangent, anyone?), horrifying substitutions for velocity, and shoehorning the model into a form that could be used in a C\u002B\u002B framework, I finally realized my error, of course just as I thought I was finished. *POOF* went about fifteen pages of algebra, two MATLAB scripts, an Excel spreadsheet, and some C\u002B\u002B pseudocode. And now I have been relegated to using Stokes drag (F_drag = C * v_total)...So inaccurate at higher Reynold\u0027s numbers...\u003Cspan style=\u0022font-size:8px;\u0022\u003ESo inaccurate...\u003C/span\u003E *eye twitches involuntarily*\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat is FRC? Why are you relegated to using stokes drag (rules of the competition or giving up)? \u003C/p\u003E\u003Cp\u003EEither way, I\u0027d say doing all that in high school is quite impressive...\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003ESoo, I ve been trying to add orientation to my model of the flight dynamics of a rocket but I ve been running into a lot of problems. I didn\u0027t bother actually doing the math for the moments of inertia and everything because I guess it really doesnt have that much of an effect on the general behaviour of the rocket,but rather simple specifics of its movement. \u003Cp\u003EThe problem is the following, when the rocket is offset from a perfect 90 degree angle at launch, it gains horizontal velocity faster than vertical (due to gravity) and therefore acquires another offset form the launch angle (say it was 89 degrees). The fins of the rocket should stabilize it by using the lift gained from the small angle of attack and point it back towards the velocity vector, this is what produces the gravity turn we all know and love (I think, I might be wrong though). In my model though, the rocket fails to stabilize properly and starts rotating uncontrollably after a certain amount of time. \u003C/p\u003E\u003Cp\u003EAt first it oscillates as a pendulum would,but deviating just a bit more with each period and gaining more and more angular velocity. Is this something that naturally arises when using euler\u0027s method to analyse this type of motion or would it also happen if I were to use Runge-Kutta\u0027s? I was thinking it may be something that naturally happens when using discrete time to analyse something that would be continous. By reducing the time step I was able to increase the time it would take for the deadly rotation to take place, but im running out of memory on excel (Its waay easier than using matlab or anything else, at least for me).\u003C/p\u003E\u003Cp\u003EAnyways, please tell me what you think, tell me if you want the sheet to see if there\u0027s anything wrong, and if you need i ll draw some pictures on paint to better illustrate the problem.\u003C/p\u003E\u003Cp\u003EThank you very much!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhen you say you didnt add math for moment of inertia, you mean you assume moment of inertia is zero, or moment of inertia is some small, but finite number, because if its zero, the rocket will never be stable numerically, since any torque will produce infinite angular acceleration...\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-04T19:57:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003EWhat is FRC? Why are you relegated to using stokes drag (rules of the competition or giving up)? \u003Cp\u003EEither way, I\u0027d say doing all that in high school is quite impressive...\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EWhen you say you didnt add math for moment of inertia, you mean you assume moment of inertia is zero, or moment of inertia is some small, but finite number, because if its zero, the rocket will never be stable numerically, since any torque will produce infinite angular acceleration...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI never said that, I just arbitrarily added a 1/12 moment of inertia constant and then used that. No matter what the moment of inertia is the rocket will tend to stablity if the model is correct, only the time it takes will change.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EIm not seeing any of the behaviour you described, and im sorry if this sounds rude, but even though the drag breakdown makes sense, the oscillations you talked about dont (at least tome=. I sent you a message to see if you want to talk about this in a much more dynamic fashion and maybe see if I can help you with your model and you with mine.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-04T21:15:02Z\u0022 title=\u002201/04/2015 09:15  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 4, 2015\u003C/time\u003E by mardlamock\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-04T21:44:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EI never said that, I just arbitrarily added a 1/12 moment of inertia constant and then used that. No matter what the moment of inertia is the rocket will tend to stablity if the model is correct, only the time it takes will change.\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EIm not seeing any of the behaviour you described, and im sorry if this sounds rude, but even though the drag breakdown makes sense, the oscillations you talked about dont (at least tome=. I sent you a message to see if you want to talk about this in a much more dynamic fashion and maybe see if I can help you with your model and you with mine.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo clarify, you said: \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003ESoo, I ve been trying to add orientation to my model of the flight dynamics of a rocket but I ve been running into a lot of problems.\u003Cstrong\u003E I didn\u0027t bother actually doing the math\u003C/strong\u003E for the moments of inertia and everything because I guess it really doesnt have that much of an effect on the general behaviour of the rocket,but rather simple specifics of its movement. \u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEmphasis mine.\u003C/p\u003E\u003Cp\u003ESo by doing the math you mean calculating the actual moment of inertia, as opposed to just adding in a constant, but non-zero moment of inertia term, which is what you did, and will prevent oscillations from going to infinity.\u003C/p\u003E\u003Cp\u003EAnd which behavior are you not seeing/who are you responding to?\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-04T22:19:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003ETo clarify, you said: \u003Cp\u003EEmphasis mine.\u003C/p\u003E\u003Cp\u003ESo by doing the math you mean calculating the actual moment of inertia, as opposed to just adding in a constant, but non-zero moment of inertia term, which is what you did, and will prevent oscillations from going to infinity.\u003C/p\u003E\u003Cp\u003EAnd which behavior are you not seeing/who are you responding to?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExactly, I figured that determining the moment of inertia would be better done with real life measurements as opposed to doing it analytically. The behaviour I am not seeing is the \u00C3\u201A\u00C2\u00A8Path-Bending\u00C3\u201A\u00C2\u00A8. I understand why it would happen if the lift force exerted translational acceleration on the body, but that is not the case with a rocket, therefore, the oscillations are not the result of that. Having changed the drag and lift to be dependant on the total velocity and component velocity, the oscillations are still there. Im doing switching to a 3rd order Runge Kutta but its taking been taking me some time. I still believe it is a problem inherent to the use of euler\u00C3\u201A\u00C2\u00B4s method to approximate harmonic motion.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-05T03:38:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EExactly, I figured that determining the moment of inertia would be better done with real life measurements as opposed to doing it analytically. The behaviour I am not seeing is the \u00C3\u201A\u00C2\u00A8Path-Bending\u00C3\u201A\u00C2\u00A8. I understand why it would happen if the lift force exerted translational acceleration on the body, but that is not the case with a rocket, therefore, the oscillations are not the result of that. Having changed the drag and lift to be dependant on the total velocity and component velocity, the oscillations are still there. Im doing switching to a 3rd order Runge Kutta but its taking been taking me some time. I still believe it is a problem inherent to the use of euler\u00C3\u201A\u00C2\u00B4s method to approximate harmonic motion.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E3rd order runge-kutta? I\u0027ve heard of 4th, but not third.\u003C/p\u003E\u003Cp\u003EI\u0027m not convinced its due to integration order or lack of \u0022component\u0022 drag. I\u0027ve modeled component drag, and i still get oscillations.\u003C/p\u003E\u003Cp\u003EHow do you model drag and/or lift?\u003C/p\u003E\u003Cp\u003EDo you account for area difference when off 0 degree AoA? Do you account for fulcrum distance changing with changing angle?\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-05T05:41:13Z","Content":"\n\u003Cp\u003EThis is what I did. \u003Ca href=\u0022http://imgur.com/4I3cFUB\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://imgur.com/4I3cFUB\u003C/a\u003E. Im using Newton drag, an exponential model for atmospheric density, thin airfoil theory to estimate the coefficient of lift as a function of the angle of attack. I do account for area difference, the area being an orthogonal projection. \u003Ca href=\u0022http://www./download/led0x2ubszo7avv/10740687_10203439585645884_287536767_n.xlsx\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/led0x2ubszo7avv/10740687_10203439585645884_287536767_n.xlsx\u003C/a\u003E This is the older excel spreadsheet I used, I know changed it for component drag and on the side im doing Runge kutta, and yes you can do 3rd order, 4th is more common though. As this particular equation is a stiff equation I might need to use a higher order Rk, but It doesnt hurt to try with 3rd first. As you may see on the side, the whole idea of this is to then detach the fin orientation from the rocket orientation and test dead reckoning and active stabilization systems.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-05T05:43:47Z\u0022 title=\u002201/05/2015 05:43  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 5, 2015\u003C/time\u003E by mardlamock\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-05T06:21:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EThis is what I did. \u003Ca href=\u0022http://imgur.com/4I3cFUB\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://imgur.com/4I3cFUB\u003C/a\u003E. Im using Newton drag, an exponential model for atmospheric density, thin airfoil theory to estimate the coefficient of lift as a function of the angle of attack. I do account for area difference, the area being an orthogonal projection. \u003Ca href=\u0022http://www./download/led0x2ubszo7avv/10740687_10203439585645884_287536767_n.xlsx\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/led0x2ubszo7avv/10740687_10203439585645884_287536767_n.xlsx\u003C/a\u003E This is the older excel spreadsheet I used, I know changed it for component drag and on the side im doing Runge kutta, and yes you can do 3rd order, 4th is more common though. As this particular equation is a stiff equation I might need to use a higher order Rk, but It doesnt hurt to try with 3rd first. As you may see on the side, the whole idea of this is to then detach the fin orientation from the rocket orientation and test dead reckoning and active stabilization systems.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAngle of attack formula is incorrect as written (might just be a typo); should be x\u0027j/x\u0027i not xj/xi\u003C/p\u003E\u003Cp\u003E(Same problem with projected area formula)\u003C/p\u003E\u003Cp\u003Ealso, an easy way to get around the changing sign of drag if velocity is negative part is to use:\u003C/p\u003E\u003Cp\u003Eabs(v)*v instead of v^2 i.e. F_drag = -C*abs(v)*v (since drag starts out negative)\u003C/p\u003E\u003Cp\u003EFor components, this isnt necessary since v=sqrt(vx^2\u002Bvy^2) \u0026gt;=0\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-05T06:29:32Z\u0022 title=\u002201/05/2015 06:29  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 5, 2015\u003C/time\u003E by arkie87\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-05T06:31:28Z","Content":"\n\u003Cp\u003EYeah thats a typo, same with the projected area. Funny thing you say that, I had just done that sign change in excel when I was getting positive drag all the time.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-06T01:02:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EYeah thats a typo, same with the projected area. Funny thing you say that, I had just done that sign change in excel when I was getting positive drag all the time.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo you said before that 1st order euler is unstable for harmonic motion.\u003C/p\u003E\u003Cp\u003EIt seems like you are right, and it is known to not conserve energy. However, according to \u003Ca href=\u0022http://physics.gmu.edu/~amin/phys251/Topics/NumAnalysis/Odes/harmonicMotion.html\u0022 rel=\u0022external nofollow\u0022\u003E this \u003C/a\u003E reference, you can used a modified version of euler, which will conserve energy.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-06T01:11:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003ESo you said before that 1st order euler is unstable for harmonic motion.\u003Cp\u003EIt seems like you are right, and it is known to not conserve energy. However, according to \u003Ca href=\u0022http://physics.gmu.edu/~amin/phys251/Topics/NumAnalysis/Odes/harmonicMotion.html\u0022 rel=\u0022external nofollow\u0022\u003E this \u003C/a\u003E reference, you can used a modified version of euler, which will conserve energy.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou have confirmed my suspicions, the only problem is that I dont think adding an energy constraint is possible, maybe making it so that it doesnt increase after MECO could solve it, but if it is harmonic then I am still going to get oscillations. I need some sort of damping but I dont know what force might act as such. Ideas?\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-06T01:19:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EYou have confirmed my suspicions, the only problem is that I dont think adding an energy constraint is possible, maybe making it so that it doesnt increase after MECO could solve it, but if it is harmonic then I am still going to get oscillations. I need some sort of damping but I dont know what force might act as such. Ideas?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E(1) You misunderstand: if you click on the reference, there is a slightly modified algorithm (Euler-Cromer\u0027s Method) \u003Cstrong\u003Ewhich is formulated\u003C/strong\u003E to conserve energy. You do not have to add this in as a constraint. (all you have to do is use euler, but use x = x \u002B v(k\u002B1)*dt instead of v(k)*dt ) EDIT: it conserves energy to tolerance based on step used. I have tested regular Euler, Euler-Cromer and 4th order runge-kutta, and while regular Euler is unstable and diverges after only a few iterations, Euler-Cromer (and obviously Runge-Kutta) are stable even after thousands of periods.\u003C/p\u003E\u003Cp\u003E(2) I think if with 4th order or Euler-Cromer method you conserve energy, then you are solving the physics itself. If the system oscillates, it oscillates... (though in real life, this oscillation is damped by pilot/autopilot using control surfaces).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-06T01:25:18Z\u0022 title=\u002201/06/2015 01:25  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 6, 2015\u003C/time\u003E by arkie87\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2015-01-06T02:01:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003E(1) You misunderstand: if you click on the reference, there is a slightly modified algorithm (Euler-Cromer\u0027s Method) \u003Cstrong\u003Ewhich is formulated\u003C/strong\u003E to conserve energy. You do not have to add this in as a constraint. (all you have to do is use euler, but use x = x \u002B v(k\u002B1)*dt instead of v(k)*dt ) EDIT: it conserves energy to tolerance based on step used. I have tested regular Euler, Euler-Cromer and 4th order runge-kutta, and while regular Euler is unstable and diverges after only a few iterations, Euler-Cromer (and obviously Runge-Kutta) are stable even after thousands of periods.\u003Cp\u003E(2) I think if with 4th order or Euler-Cromer method you conserve energy, then you are solving the physics itself. If the system oscillates, it oscillates... (though in real life, this oscillation is damped by pilot/autopilot using control surfaces).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh I see now, looks cool! Maybe I will try it out, im feeling particularly lazy today so dont count on seeing it today, but maybe further down the week I will compare it to Rk. Im testing the old euler method against some flight data from \u003Ca href=\u0022http://www.altduino.de/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.altduino.de/\u003C/a\u003E this guy, Its holding up pretty well, but I still want to do the orientation and stability analysis. What did you compare the different approximation methods for? I remember you saying something about having a model for drag as well, would you mind explaining what you used it for? Anyways, thanks man, ill update you when I get Rk working and compare it to Euler Cromer.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-01-06T06:24:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EOh I see now, looks cool! Maybe I will try it out, im feeling particularly lazy today so dont count on seeing it today, but maybe further down the week I will compare it to Rk. Im testing the old euler method against some flight data from \u003Ca href=\u0022http://www.altduino.de/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.altduino.de/\u003C/a\u003E this guy, Its holding up pretty well, but I still want to do the orientation and stability analysis. What did you compare the different approximation methods for? I remember you saying something about having a model for drag as well, would you mind explaining what you used it for? Anyways, thanks man, ill update you when I get Rk working and compare it to Euler Cromer.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo compare euler, euler-cromer, and RK, i used simple mass-on-spring system, since the point was to show that euler eventually diverges regardless of time step, while euler-cromer and RK are unconditionally stable (regardless of timestep). \u003C/p\u003E\u003Cp\u003EI have created a few flight models (in excel and Matlab), but am having trouble deciding what the correct form of the equations should be... perhaps i should just bother ferram...\u003C/p\u003E\n"}]}