{"TopicId":171091,"ForumId":39,"TopicTitle":"KOS: Scripted panels, parachutes and remote tech","CreatedByName":"inoculator","CreatedById":141432,"CreatedDateTime":"2018-02-19T12:44:14Z","PageNum":1,"Articles":[{"CreatedByName":"inoculator","CreatedById":141432,"CreatedDateTime":"2018-02-19T12:44:14Z","Content":"\n\u003Cp\u003E\nHi all,\n\u003C/p\u003E\n\u003Cp\u003E\njust a short link to a functional script I wrote.\n\u003C/p\u003E\n\u003Cp\u003E\nHope it helps anybody.\n\u003C/p\u003E\n\u003Cp\u003E\nHave fun to use it.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://drive.google.com/file/d/1HYVjI_sNvVdbnFuCrrL6N2fx6aAO8piR/view?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://drive.google.com/file/d/1HYVjI_sNvVdbnFuCrrL6N2fx6aAO8piR/view?usp=sharing\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\njust put it as loader in the head of your script:\u003Cbr\u003E\ne.g.: runpath(\u00220:/functions/check_special_parts.ks\u0022).\n\u003C/p\u003E\n\u003Cp\u003E\nThe script consists of 4\u00A0functions, that are similar in their concept:\n\u003C/p\u003E\n\u003Cp\u003E\nIf You call the function, it will return a value depending on the parts it scans and finds.\u003Cbr\u003E\nYou can call the function with parameter \u0022arm\u0022 to trigger the parts in question.\u003Cbr\u003E\nThe idea of the script is for helping on automated launches with dynamicaly activate parts and no need of a seperate script for each.\u003Cbr\u003E\nThe script is written with \u0022remote tech\u0022 installed and active.\n\u003C/p\u003E\n\u003Cp\u003E\nHere a short walkthough:\n\u003C/p\u003E\n\u003Cp\u003E\n\u0022check_chutes\u0022\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eset test to check_chutes().\nprint \u0022found \u0022 \u002B test[0] \u002B \u0022 drogue and \u0022 \u002B test[1] \u002B \u0022 regular parachutes\u0022.\n//deploy all safe to deploy chutes\nset test to check_chutes(\u0022arm\u0022).\nprint \u0022found \u0022 \u002B test[0] \u002B \u0022 drogue and \u0022 \u002B test[1] \u002B \u0022 regular parachutes remaining for deploy\u0022.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nMy usage (as a snipplet of my launch script):\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[.....a lot of other code ....]\n\n//pre flight check\nset THIS_CHUTES to CHECK_CHUTES().\nif THIS_CHUTES[1] = 0 {  //We have no chutes for landing\n\tclearscreen.\n\tprint \u0022W A R N I N G\u0022 at(5,6).\n\tprint \u0022We have no Parachutes for Landing !\u0022 at (2,8).\n\tprint \u0022I will disable deorbiting in any case.\u0022 at (2,10).\n\tprint \u0022Are You sure to continue ?\u0022 at (2,12).\n\tprint \u0022Press CRS UP to continue or CRS DWN to cancel\u0022 at(2,14).\n\tset PAR_DEORBIT to 0.\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022cancel\u0022 {\n\t\tset core:bootfilename to \u0022\u0022.\n\t\treboot.\n\t}\t\n}\n\n[.....a lot of other code ....]\n\n// landing runmode\nif RUNMODE=9 {//reentry the last stage parachutes\n\tif RUNMODEINIT=0 {\n\t\tset RUNMODEINIT to 1.\n\t\tset RUNMODESTATUS to \u0022Waiting for Parachutes\u0022.\n\t}\n\tif alt:radar\u0026lt;10000 {\n\t\tset THIS_CHUTES to CHECK_CHUTES(\u0022arm\u0022).\n\t\tif THIS_CHUTES[0] = 0 and THIS_CHUTES[1]=0 {\n\t\t\tset RUNMODE to 99.\n\t\t}\n\t}\n}\n\n[.....a lot of other code ....]\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u0022CHECK_HULLS\u0022 -a protective shell must be tagged with \u0022HULL\u0022 to be recognized here.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eset test to check_hulls().\nprint \u0022Found \u0022 \u002B test \u002B \u0022 protective shells marked for deployment.\u0022\nset test to check_hulls(\u0022arm\u0022).\nprint \u0022Found \u0022 \u002B test \u002B \u0022 protective shells remaining marked for deployment.\u0022\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd my usage:\u003Cbr\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[.... a lot of code ....]\n\nset THIS_HULLS to CHECK_HULLS().\nif THIS_HULLS\u0026gt;0 {\n\tclearscreen.\n\tprint \u0022A T T E N T I O N\u0022 at(5,6).\n\tprint \u0022Found \u0022 \u002B THIS_HULLS \u002B \u0022 protective shells\u0022 at(2,8).\n\tPrint \u0022For shell deployment at 70000m press\u0022 at(2,10).\n\tprint \u0022CRS UP otherwise CRSDWN\u0022 at(2,12).\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022ok\u0022 {\n\t\twhen altitude \u0026gt; 70000 THEN {CHECK_HULLS(\u0022arm\u0022).}\n\t}\t\n}\n\n[... a lot of other code ...]\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd now Solar panels and Remote Antennas.\u003Cbr\u003E\nHere I introduce the tag \u0022noauto\u0022. If You tag a solar panel or an antenna with \u0022noauto\u0022 it will not be set to automatic deployment.\u003Cbr\u003E\nThis protects objects from being deployed at the wrong time (e.g. covered satellites in protective shells not deployed during launch).\n\u003C/p\u003E\n\u003Cp\u003E\n\u0022CHECK_SOLARS\u0022\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eset test to CHECK_SOLARS().\nprint \u0022Found \u0022 \u002B test[0] \u002B \u0022 static, \u0022 \u002B test[1] \u002B \u0022 deployable and \u0022 \u002B test[2] \u002B \u0022 panels set to \u0027noauto\u0027\u0022.\nset test to CHECK_SOLARS(\u0022arm\u0022).\nprint \u0022Found \u0022 \u002B test[0] \u002B \u0022 static, \u0022 \u002B test[1] \u002B \u0022 deployable and \u0022 \u002B test[2] \u002B \u0022 panels set to \u0027noauto\u0027\u0022.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nand here my usage:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[... again a lot of code ...]\n\nset THIS_SOLARS to CHECK_SOLARS().\nif THIS_SOLARS[0]=0 and THIS_SOLARS[1]=0 and THIS_SOLARS[2]=0 {\n\tclearscreen.\n\tprint \u0022W A R N I N G\u0022 at(5,6).\n\tprint \u0022No Solar Panels found !\u0022 at (2,8).\n\tprint \u0022Are You sure to continue ?\u0022 at (2,12).\n\tprint \u0022Press CRS UP to continue or CRS DWN to cancel\u0022 at(2,14).\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022cancel\u0022 {\n\t\tset core:bootfilename to \u0022\u0022.\n\t\treboot.\n\t} \n}\n\nif THIS_SOLARS[1] \u0026gt; 0 {\n\tclearscreen.\n\tprint \u0022A T T E N T I O N\u0022 at(5,6).\n\tprint \u0022Found \u0022 \u002B THIS_SOLARS[1] \u002B \u0022 solar panels to deploy.\u0022 at(2,8).\n\tPrint \u0022For deployment at 70000m press\u0022 at(2,10).\n\tprint \u0022CRS UP otherwise CRSDWN\u0022 at(2,12).\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022ok\u0022 {\n\t\twhen altitude \u0026gt; 70000 THEN {CHECK_SOLARS(\u0022arm\u0022).}\n\t}\t\n}\n\n[... and guess what.. just more code...]\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd to make a long story short, here is the adopted version for antennas (just usage):\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[... yes again previously there is code...]\n\nset THIS_REMOTE to CHECK_REMOTE().\nif THIS_REMOTE[0]=0 and THIS_REMOTE[1]=0 and THIS_REMOTE[2]=0 {\n\tclearscreen.\n\tprint \u0022W A R N I N G\u0022 at(5,6).\n\tprint \u0022No Antennas found !\u0022 at (2,8).\n\tprint \u0022Are You sure to continue ?\u0022 at (2,12).\n\tprint \u0022Press CRS UP to continue or CRS DWN to cancel\u0022 at(2,14).\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022cancel\u0022 {\n\t\tset core:bootfilename to \u0022\u0022.\n\t\treboot.\n\t} \n}\n\nif THIS_REMOTE[1] \u0026gt; 0 {\n\tclearscreen.\n\tprint \u0022A T T E N T I O N\u0022 at(5,6).\n\tprint \u0022Found \u0022 \u002B THIS_REMOTE[1] \u002B \u0022 Antennas to deploy.\u0022 at(2,8).\n\tPrint \u0022For deployment at 70000m press\u0022 at(2,10).\n\tprint \u0022CRS UP otherwise CRSDWN\u0022 at(2,12).\n\tset THIS_GETKEY to 0.\n\tUntil THIS_GETKEY\u0026lt;\u0026gt;0 {set THIS_GETKEY to GET_KEY(). wait 0.1.}\n\tif THIS_GETKEY = \u0022ok\u0022 {\n\t\twhen altitude \u0026gt; 70000 THEN {CHECK_REMOTE(\u0022arm\u0022).}\n\t}\t\n}\n\n[... code, you know...]\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nas allready said: have fun with it.\u003Cbr\u003E\u003Cbr\u003E\nbr\n\u003C/p\u003E\n\u003Cp\u003E\nCarsten\n\u003C/p\u003E\n"}]}