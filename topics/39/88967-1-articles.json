{"TopicId":88967,"ForumId":39,"TopicTitle":"Jeb Kerman Drawing!","CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2014-10-30T21:51:13Z","PageNum":1,"Articles":[{"CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2014-10-30T21:51:13Z","Content":"\n\u003Cp\u003EJust drew this in Calculus BC today, colored it at home. It really looks awesome, this is the first time i\u0027ve managed to draw a kerbal without his head looking WRONG.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/4q86zCy.jpg\u0022 alt=\u00224q86zCy.jpg\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Thomas988","CreatedById":92699,"CreatedDateTime":"2014-10-31T00:06:19Z","Content":"\n\u003Cp\u003EAmazing work! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Starwhip","CreatedById":83990,"CreatedDateTime":"2014-10-31T00:20:56Z","Content":"\n\u003Cp\u003EI didn\u0027t realize that it was Zekes until I realized that it was Zekes... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003ELooks good. Better than what I could do, probably.\u003C/p\u003E\n"},{"CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2014-10-31T00:25:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starwhip\u0022 data-cite=\u0022Starwhip\u0022\u003E\u003Cdiv\u003EI didn\u0027t realize that it was Zekes until I realized that it was Zekes... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003Cp\u003ELooks good. Better than what I could do, probably.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Elol, thanks, I was just freehanding a picture i found of Jeb on the KSPwiki, but it still turned out great.\u003C/p\u003E\n"},{"CreatedByName":"Starwhip","CreatedById":83990,"CreatedDateTime":"2014-10-31T00:34:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zekes\u0022 data-cite=\u0022zekes\u0022\u003E\u003Cdiv\u003EJust drew this in Calculus BC today....\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah... I can relate to that.\u003C/p\u003E\u003Cp\u003EIf I could, I would be playing KSP or doing whatever in a few of my classes, namely Spanish and Honors Physics, the first because we hardly do anything and the second because... well, it\u0027s physics, and besides heat transfer and stuff like that I\u0027ve already been introduced to or looked up out of self interest.\u003C/p\u003E\n"},{"CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2014-10-31T00:40:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starwhip\u0022 data-cite=\u0022Starwhip\u0022\u003E\u003Cdiv\u003EYeah... I can relate to that.\u003Cp\u003EIf I could, I would be playing KSP or doing whatever in a few of my classes, namely Spanish and Honors Physics, the first because we hardly do anything and the second because... well, it\u0027s physics, and besides heat transfer and stuff like that I\u0027ve already been introduced to or looked up out of self interest.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ewe just took a test on heat transfer \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Starwhip","CreatedById":83990,"CreatedDateTime":"2014-10-31T00:46:07Z","Content":"\n\u003Cp\u003EWould you like a time dilation calculator?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E#Time Dilation Calculator\u003Cbr\u003E\u003Cbr\u003Eimport math\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Ec = 299792458 #Speed of light (m/s)\u003Cbr\u003E\u003Cbr\u003EvelMessage = \u0022Input Ship Velocity (Percent of c): \u0022\u003Cbr\u003EdisMessage = \u0022Input Distance (Light-Years): \u0022\u003Cbr\u003EtimeMessage = \u0022Observer Time: \u0022\u003Cbr\u003EshipMessage = \u0022Ship Time: \u0022\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Ewhile True:\u003Cbr\u003E\u003Cbr\u003E    print(velMessage,end = \u0022\u0022)\u003Cbr\u003E    v = float(input())/100\u003Cbr\u003E\u003Cbr\u003E    print(disMessage,end = \u0022\u0022)\u003Cbr\u003E    d = float(input())\u003Cbr\u003E\u003Cbr\u003E    sTime = d / v\u003Cbr\u003E    oTime = sTime * ((1-(((v*c)**2)/(c**2)))**(1/2))\u003Cbr\u003E\u003Cbr\u003E    print(timeMessage \u002B str(sTime))\u003Cbr\u003E    print(shipMessage \u002B str(oTime))\u003Cbr\u003E\u003Cbr\u003E    ifQuit = input().lower()\u003Cbr\u003E    if ifQuit == \u0022q\u0022:\u003Cbr\u003E        break\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EI might try one of these things sometime. (Drawings, I mean.)\u003C/p\u003E\u003Cp\u003EProbably going to be something like a plane or a rocket, rather than a Kerbal, because I \u003Cem\u003Esuck\u003C/em\u003E at anything humanoid.\u003C/p\u003E\u003Cp\u003EPerhaps based of of this? (It\u0027s from Nassault\u0027s new movie, \u003Cem\u003EOperation Emerald Sunrise\u003C/em\u003E [Which is an Eve mission \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_huh.gif\u0022 alt=\u0022:confused:\u0022\u003E but makes more sense when you see it.])\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/6JHHJz2.png\u0022 alt=\u00226JHHJz2.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EReally, though, how do you get shots like this with \u003Cem\u003EKerbal Space Program\u003C/em\u003E?!?! (Probably a better processor than my laptop has \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E)\u003C/p\u003E\n"},{"CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2014-10-31T00:51:20Z","Content":"\n\u003Cp\u003Elol, all right thanks \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E also, yeah, I want to learn how to do this kind of thing in KSP.\u003C/p\u003E\u003Cp\u003EEDIT: How do i use this calculator?\u003C/p\u003E\n"},{"CreatedByName":"Starwhip","CreatedById":83990,"CreatedDateTime":"2014-10-31T01:08:04Z","Content":"\n\u003Cp\u003EIt\u0027s programmed in Python. ATM, I have no clue how or if it is possible to convert something like this to a .exe file... but at the time being...\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.python.org/downloads/release/python-342/\u0022 rel=\u0022external nofollow\u0022\u003EPython Download\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EJust copy-paste into a new window once you\u0027ve got the IDLE GUI open.\u003C/p\u003E\u003Cp\u003EWhen you run it it looks like this. Bold areas are inputs.\u003C/p\u003E\u003Cp\u003EInput Ship Velocity (Percent of c): \u003Cstrong\u003E99\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EInput Distance (Light-Years):\u003Cstrong\u003E 42\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EObserver Time: 42.42424242424242\u003C/p\u003E\u003Cp\u003EShip Time: 5.984675870161271\u003C/p\u003E\u003Cp\u003EI \u003Cem\u003Ealso\u003C/em\u003E don\u0027t know how to set decimal precision \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003EYou can get real complicated with Python. Let me present a version of Asteroids:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eimport pygame, sys, time, math, random\u003Cbr\u003Efrom pygame.locals import *\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Epygame.init()\u003Cbr\u003E\u003Cbr\u003EwindowWidth = 500\u003Cbr\u003EwindowHeight = 500\u003Cbr\u003E\u003Cbr\u003EwindowCenter = int(windowWidth/2),int(windowHeight/2)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##COLORS\u003Cbr\u003EBLACK = (0,0,0)\u003Cbr\u003EGRAY = (125,125,125)\u003Cbr\u003EWHITE = (255,255,255)\u003Cbr\u003E\u003Cbr\u003ERED = (255,0,0)\u003Cbr\u003EGREEN = (0,255,0)\u003Cbr\u003EBLUE = (0,0,255)\u003Cbr\u003E\u003Cbr\u003EPURPLE = (255,0,255)\u003Cbr\u003ETEAL = (0,255,255)\u003Cbr\u003EYELLOW = (255,255,0)\u003Cbr\u003E\u003Cbr\u003ELIGHTGREEN = (128,255,128)\u003Cbr\u003Efont = pygame.font.SysFont(\u0027papyrus\u0027,20)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##CREATE WINDOW\u003Cbr\u003Edef makeWindow(Fullscreen,Width,Height):\u003Cbr\u003E    \u0027\u0027\u0027Makes a window\u0027\u0027\u0027\u003Cbr\u003E    global Window1\u003Cbr\u003E    if Fullscreen == 0:\u003Cbr\u003E        Window1 = pygame.display.set_mode((Width,Height),0,32)\u003Cbr\u003E\u003Cbr\u003E    else:\u003Cbr\u003E        Window1 = pygame.display.set_mode((Width,Height),pygame.FULLSCREEN)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##UPDATE DISPLAY   \u003Cbr\u003Edef update():\u003Cbr\u003E    pygame.display.update()\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##SURFACE FILL\u003Cbr\u003Edef fill(Surface,Color):\u003Cbr\u003E    \u0027\u0027\u0027Fills SURFACE with COLOR\u0027\u0027\u0027\u003Cbr\u003E    Surface.fill(Color)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##TEXT DRAW FUNCTION\u003Cbr\u003Edef drawText(text,font,color,surface,x,y):\u003Cbr\u003E    textobj=font.render(text,1,color)\u003Cbr\u003E    textrect=textobj.get_rect()\u003Cbr\u003E    textrect.topleft=(x,y)\u003Cbr\u003E    surface.blit(textobj,textrect)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##MOUSE CHECKS/SETS\u003Cbr\u003Edef get_mousePos():\u003Cbr\u003E    \u0027\u0027\u0027Returns XY Coordinates of the Mouse Cursor\u0027\u0027\u0027\u003Cbr\u003E    x,y = pygame.mouse.get_pos()\u003Cbr\u003E    return x,y\u003Cbr\u003E\u003Cbr\u003Edef set_mousePos(x,y):\u003Cbr\u003E    \u0027\u0027\u0027Sets mouse at XY coordinates\u0027\u0027\u0027\u003Cbr\u003E    pygame.mouse.set_pos(x,y)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##CHECK KEYBOARD/MOUSE\u003Cbr\u003Edef checkEvents():\u003Cbr\u003E    global rotating,thrusting,antiThrusting,firing,shipVelocity,rotatingType\u003Cbr\u003E    for event in pygame.event.get():\u003Cbr\u003E        if event.type == QUIT:\u003Cbr\u003E            terminate()\u003Cbr\u003E        if event.type == KEYUP:\u003Cbr\u003E            if event.key == K_ESCAPE:\u003Cbr\u003E                terminate()\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_UP:\u003Cbr\u003E                thrusting = False\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_DOWN:\u003Cbr\u003E                rotatingType = not rotatingType\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_LEFT and rotating != -1:\u003Cbr\u003E                rotating = 2\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_RIGHT and rotating != 1:\u003Cbr\u003E                rotating = 2\u003Cbr\u003E\u003Cbr\u003E        if event.type == KEYDOWN:\u003Cbr\u003E            if event.key == K_LEFT:\u003Cbr\u003E                rotating = 1\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_RIGHT:\u003Cbr\u003E                rotating = -1              \u003Cbr\u003E\u003Cbr\u003E            if event.key == K_UP:\u003Cbr\u003E                thrusting = True\u003Cbr\u003E\u003Cbr\u003E            if event.key == K_SPACE:\u003Cbr\u003E                makeShot(shipVerts,shipCenter,shipRotation,shipVelocity)\u003Cbr\u003E                #makeNewAsteroid(2,0,shipVerts[0],shipVelocity)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##DELAY FUNCTIONS\u003Cbr\u003Edef delayS(seconds):\u003Cbr\u003E    \u0027\u0027\u0027Stops program for x seconds\u0027\u0027\u0027\u003Cbr\u003E    time.sleep(seconds)\u003Cbr\u003E\u003Cbr\u003Edef delayMS(milliSeconds):\u003Cbr\u003E    \u0027\u0027\u0027Stops program for x milliseconds\u0027\u0027\u0027\u003Cbr\u003E    time.sleep(milliSeconds/1000)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##PYTHON/PYGAME TERMINATION   \u003Cbr\u003Edef terminate():\u003Cbr\u003E    print(\u0022Terminating Pygame and SYS\u0022)\u003Cbr\u003E    pygame.quit()\u003Cbr\u003E    sys.exit()\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##LINE FUNCTIONS\u003Cbr\u003Edef drawLines(Surface,lineColor,closed,pointlist,thickness):\u003Cbr\u003E    pygame.draw.lines(Surface,lineColor,closed,pointlist,thickness)\u003Cbr\u003E\u003Cbr\u003Edef drawLine(Surface,lineColor,startPoint,endPoint,thickness):\u003Cbr\u003E    pygame.draw.line(Surface,lineColor,startPoint,endPoint,thickness)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##POLYGON FUNCTION\u003Cbr\u003Edef drawPolygon(Surface,color,pointlist,width):\u003Cbr\u003E    pygame.draw.polygon(Surface,color,pointlist,width)\u003Cbr\u003E\u003Cbr\u003Edef drawCircle(Surface,color,point,radius,width):\u003Cbr\u003E    pygame.draw.circle(Surface,color,point,radius,width)\u003Cbr\u003E\u003Cbr\u003E##TRIGONOMETRIC COORDINATES\u003Cbr\u003Edef trigCoords(centerPoint,angle,radius):\u003Cbr\u003E    angle *= (math.pi / 180)\u003Cbr\u003E    XCoord = (centerPoint[0] \u002B (radius*math.cos(angle)))\u003Cbr\u003E    YCoord = (centerPoint[1] \u002B (radius*math.sin(angle)))\u003Cbr\u003E    return XCoord,YCoord\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##VECTOR FUNCTIONS\u003Cbr\u003Edef findAngle(vector):\u003Cbr\u003E    mag = findMag(vector)\u003Cbr\u003E    if mag \u0026gt; 0:\u003Cbr\u003E        angle = math.acos(vector[1]/mag)\u003Cbr\u003E        angle = math.degrees(angle)\u003Cbr\u003E        return angle\u003Cbr\u003E    else:\u003Cbr\u003E        return 0\u003Cbr\u003E\u003Cbr\u003Edef findMag(vector):\u003Cbr\u003E    mag = math.sqrt((vector[0]**2\u002Bvector[1]**2))\u003Cbr\u003E    return mag\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##MATRIX FUNCTIONS\u003Cbr\u003Edef movePoints(pointList,pos):\u003Cbr\u003E    pointList2 = []\u003Cbr\u003E    for point in pointList:\u003Cbr\u003E        point = point[0]\u002Bpos[0],point[1]\u002Bpos[1]\u003Cbr\u003E        point = int(point[0]),int(point[1])\u003Cbr\u003E        pointList2.append(point)\u003Cbr\u003E\u003Cbr\u003E    return pointList2\u003Cbr\u003E\u003Cbr\u003Edef scalePoints(pointList,scale):\u003Cbr\u003E    pointList2 = []\u003Cbr\u003E    for point in pointList:\u003Cbr\u003E        point = point[0]*scale,point[1]*scale\u003Cbr\u003E        point = int(point[0]),int(point[1])\u003Cbr\u003E        pointList2.append(point)\u003Cbr\u003E\u003Cbr\u003E    return pointList2\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef rotatePoints(pointList,centerPoint,rotation):\u003Cbr\u003E    pointList2 = []\u003Cbr\u003E    for point in pointList:\u003Cbr\u003E        mag = findMag(point)\u003Cbr\u003E        angle = findAngle(point)\u003Cbr\u003E\u003Cbr\u003E        print(point)\u003Cbr\u003E        print(mag)\u003Cbr\u003E        print(angle)\u003Cbr\u003E        print()\u003Cbr\u003E\u003Cbr\u003E        newPoint = trigCoords(centerPoint,angle,mag)\u003Cbr\u003E        print(newPoint)\u003Cbr\u003E        print()\u003Cbr\u003E    return pointList2\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##ASTEROID DECLARATIONS/FUNCTIONS\u003Cbr\u003EasteroidList = []\u003Cbr\u003Easteroid_Large00 = [(0,0),(9,-5),(4,-6),(3,-7),(-5,3),(-2,5)]\u003Cbr\u003E\u003Cbr\u003Edef makeNewAsteroid(size,ID,pos,vector):\u003Cbr\u003E    if size == 0:  ##Small Asteroids\u003Cbr\u003E        if ID == 0:\u003Cbr\u003E            pass\u003Cbr\u003E        elif ID == 1:\u003Cbr\u003E            pass\u003Cbr\u003E        elif ID == 2:\u003Cbr\u003E            pass\u003Cbr\u003E\u003Cbr\u003E    if size == 1: ##Medium Asteroids\u003Cbr\u003E        if ID == 0:\u003Cbr\u003E            pass\u003Cbr\u003E        elif ID == 1:\u003Cbr\u003E            pass\u003Cbr\u003E        elif ID == 2:\u003Cbr\u003E            pass\u003Cbr\u003E\u003Cbr\u003E    if size == 2: ##Large Asteroids\u003Cbr\u003E        if ID == 0:\u003Cbr\u003E            pointList = asteroid_Large00\u003Cbr\u003E        elif ID == 1:\u003Cbr\u003E            pass\u003Cbr\u003E        elif ID == 2:\u003Cbr\u003E            pass        \u003Cbr\u003E\u003Cbr\u003E    newAsteroid = {\u0027Point\u0027 : pos,\u003Cbr\u003E                   \u0027Vector\u0027 : vector,\u003Cbr\u003E                   \u0027Verts\u0027 : pointList\u003Cbr\u003E                   }\u003Cbr\u003E    asteroidList.append(newAsteroid)\u003Cbr\u003E\u003Cbr\u003E##SHIP DECLARATIONS/FUNCTIONS\u003Cbr\u003EshipPoints = [(0,6),(5,-9),(4,-6),(-4,-6),(-5,-9)]\u003Cbr\u003EshipCenter = windowCenter\u003Cbr\u003EshipRotation = 90\u003Cbr\u003EshipRotationRate = 0\u003Cbr\u003EshipSize = 15\u003Cbr\u003E\u003Cbr\u003EshipThickness = 2\u003Cbr\u003EshipVelocity = 0,0\u003Cbr\u003ESHIPCOLOR = WHITE\u003Cbr\u003EmaxAccel = 0.06\u003Cbr\u003EvectorScale = 10 ##FOR DISPLAYING VECTORS!!\u003Cbr\u003Ethrusting = False\u003Cbr\u003Efiring = False\u003Cbr\u003Erotating = 0\u003Cbr\u003ErotatingType = True\u003Cbr\u003ErotationRate = 0.075\u003Cbr\u003EsecondaryRotRate = 3\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef findShipVerts(Center,shipRotation,Velocity):\u003Cbr\u003E    global shipVelocity,shipCenter,shipVerts\u003Cbr\u003E    if thrusting == True:\u003Cbr\u003E        makeExaust(shipVerts,shipCenter,shipRotation,0,0)\u003Cbr\u003E        newVelocity = trigCoords((0,0),shipRotation,maxAccel)\u003Cbr\u003E        shipVelocity = newVelocity[0]\u002BVelocity[0],Velocity[1]\u002BnewVelocity[1]\u003Cbr\u003E    else:\u003Cbr\u003E        shipVelocity = Velocity\u003Cbr\u003E    shipCenter = Center[0] \u002B shipVelocity[0],Center[1]\u002BshipVelocity[1]\u003Cbr\u003E\u003Cbr\u003E    shipPoint = trigCoords(shipCenter,shipRotation,shipSize)\u003Cbr\u003E    shipRight = trigCoords(shipCenter,shipRotation\u002B135,shipSize)\u003Cbr\u003E    shipLeft = trigCoords(shipCenter,shipRotation\u002B225,shipSize)\u003Cbr\u003E\u003Cbr\u003E    shipVerts = [shipPoint,shipRight,shipLeft]\u003Cbr\u003E    return shipVerts\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##PROJECTILE DECLARATIONS/FUNCTIONS\u003Cbr\u003EshotList = []\u003Cbr\u003EshotSize = 2\u003Cbr\u003EshotLife = 90\u003Cbr\u003EshotSpeed = 5\u003Cbr\u003EshotColor = WHITE\u003Cbr\u003E\u003Cbr\u003EexaustList = []\u003Cbr\u003EexaustLife = 7.5\u003Cbr\u003EexaustScaleRate = 0.9\u003Cbr\u003EexaustSize = 6\u003Cbr\u003EexaustSpeed = 1\u003Cbr\u003EexaustColor1 = GRAY\u003Cbr\u003EexaustInnerColor = WHITE\u003Cbr\u003E\u003Cbr\u003Edef makeShot(shipVerts,shipCenter,shipRotation,Velocity):\u003Cbr\u003E    global shipVelocity\u003Cbr\u003E    shipPoint = shipVerts[0]\u003Cbr\u003E    shipPoint = int(shipPoint[0]),int(shipPoint[1])\u003Cbr\u003E    vector = trigCoords(shipCenter,shipRotation,shotSpeed)\u003Cbr\u003E    vector = vector[0]-shipCenter[0],vector[1]-shipCenter[1]\u003Cbr\u003E    newShot = {\u003Cbr\u003E    \u0027Point\u0027: shipPoint,\u003Cbr\u003E    \u0027Vector\u0027: vector,\u003Cbr\u003E    \u0027Size\u0027: shotSize,\u003Cbr\u003E    \u0027Color\u0027: shotColor,\u003Cbr\u003E    \u0027Life\u0027: shotLife\u003Cbr\u003E    }\u003Cbr\u003E    shotList.append(newShot)\u003Cbr\u003E\u003Cbr\u003E    #shipVelocity = Velocity[0]-(vector[0]/20),Velocity[1]-(vector[1]/20)\u003Cbr\u003E\u003Cbr\u003Edef makeExaust(shipVerts,shipCenter,shipRotation,Noise,Type):\u003Cbr\u003E    exaustPoint = ((shipVerts[1][0]\u002BshipVerts[2][0])/2,(shipVerts[1][1]\u002BshipVerts[2][1])/2)\u003Cbr\u003E    exaustPoint = int(exaustPoint[0]),int(exaustPoint[1])\u003Cbr\u003E\u003Cbr\u003E    vector = trigCoords(shipCenter,180\u002BshipRotation,exaustSpeed)\u003Cbr\u003E    vector = vector[0]-shipCenter[0]\u002Brandom.randint(-Noise,Noise),vector[1]-shipCenter[1]\u002Brandom.randint(-Noise,Noise)\u003Cbr\u003E\u003Cbr\u003E    vector1 = trigCoords(shipCenter,90\u002BshipRotation,exaustSpeed)\u003Cbr\u003E    vector1 = vector1[0]-shipCenter[0]\u002Brandom.randint(-Noise,Noise),vector1[1]-shipCenter[1]\u002Brandom.randint(-Noise,Noise)\u003Cbr\u003E    vector2 = trigCoords(shipCenter,270\u002BshipRotation,exaustSpeed)\u003Cbr\u003E    vector2 = vector2[0]-shipCenter[0]\u002Brandom.randint(-Noise,Noise),vector2[1]-shipCenter[1]\u002Brandom.randint(-Noise,Noise)\u003Cbr\u003E\u003Cbr\u003E    if Type == 0:\u003Cbr\u003E        newShot = {\u003Cbr\u003E        \u0027Point\u0027: exaustPoint,\u003Cbr\u003E        \u0027Vector\u0027: vector,\u003Cbr\u003E        \u0027Size\u0027: exaustSize,\u003Cbr\u003E        \u0027Color\u0027: exaustColor1,\u003Cbr\u003E        \u0027Color2\u0027: exaustInnerColor,\u003Cbr\u003E        \u0027Life\u0027: exaustLife,\u003Cbr\u003E        \u0027ScaleRate\u0027: exaustScaleRate\u003Cbr\u003E        }\u003Cbr\u003E    elif Type == 1:\u003Cbr\u003E        newShot = {\u003Cbr\u003E        \u0027Point\u0027: shipVerts[1],\u003Cbr\u003E        \u0027Vector\u0027: vector1,\u003Cbr\u003E        \u0027Size\u0027: exaustSize/2,\u003Cbr\u003E        \u0027Color\u0027: exaustColor1,\u003Cbr\u003E        \u0027Color2\u0027: exaustInnerColor,\u003Cbr\u003E        \u0027Life\u0027: exaustLife,\u003Cbr\u003E        \u0027ScaleRate\u0027: exaustScaleRate\u003Cbr\u003E        }\u003Cbr\u003E    elif Type == 2:\u003Cbr\u003E        newShot = {\u003Cbr\u003E        \u0027Point\u0027: shipVerts[2],\u003Cbr\u003E        \u0027Vector\u0027: vector2,\u003Cbr\u003E        \u0027Size\u0027: exaustSize/2,\u003Cbr\u003E        \u0027Color\u0027: exaustColor1,\u003Cbr\u003E        \u0027Color2\u0027: exaustInnerColor,\u003Cbr\u003E        \u0027Life\u0027: exaustLife,\u003Cbr\u003E        \u0027ScaleRate\u0027: exaustScaleRate\u003Cbr\u003E        }        \u003Cbr\u003E    exaustList.append(newShot)\u003Cbr\u003E\u003Cbr\u003Edef shipRotate(shipRotationRate,rotatingType,rotating,rotationRate,secondaryRotRate):\u003Cbr\u003E    if rotatingType == False:\u003Cbr\u003E        if rotating == 1:\u003Cbr\u003E            makeExaust(shipVerts,shipCenter,shipRotation,1,2)\u003Cbr\u003E            shipRotationRate -= rotationRate\u003Cbr\u003E\u003Cbr\u003E        elif rotating == -1:\u003Cbr\u003E            shipRotationRate \u002B= rotationRate\u003Cbr\u003E            makeExaust(shipVerts,shipCenter,shipRotation,1,1)\u003Cbr\u003E\u003Cbr\u003E        else:\u003Cbr\u003E            shipRotationRate /= 1.05\u003Cbr\u003E\u003Cbr\u003E    elif rotatingType == True:\u003Cbr\u003E        if rotating == 1:\u003Cbr\u003E            shipRotationRate = -secondaryRotRate\u003Cbr\u003E            makeExaust(shipVerts,shipCenter,shipRotation,1,2)\u003Cbr\u003E        elif rotating == -1:\u003Cbr\u003E            shipRotationRate = secondaryRotRate\u003Cbr\u003E            makeExaust(shipVerts,shipCenter,shipRotation,1,1)\u003Cbr\u003E        else:\u003Cbr\u003E            shipRotationRate = 0\u003Cbr\u003E\u003Cbr\u003E    return shipRotationRate\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef ship_StayWithinBounds(shipCenter):\u003Cbr\u003E    if shipCenter[0] \u0026gt;= windowWidth:\u003Cbr\u003E        shipCenter = 5,shipCenter[1]\u003Cbr\u003E\u003Cbr\u003E    if shipCenter[0] \u0026lt;= 0:\u003Cbr\u003E        shipCenter = windowWidth-5,shipCenter[1]\u003Cbr\u003E\u003Cbr\u003E    if shipCenter[1] \u0026gt;= windowHeight:\u003Cbr\u003E        shipCenter = shipCenter[0],5\u003Cbr\u003E\u003Cbr\u003E    if shipCenter[1] \u0026lt;= 0:\u003Cbr\u003E        shipCenter = shipCenter[0],windowHeight-5\u003Cbr\u003E\u003Cbr\u003E    return shipCenter\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef doShots(shotList):\u003Cbr\u003E    for shot in shotList:\u003Cbr\u003E        shot[\u0027Life\u0027] -= 1\u003Cbr\u003E        point = shot[\u0027Point\u0027]\u003Cbr\u003E        vector = shot[\u0027Vector\u0027]\u003Cbr\u003E        point = point[0]\u002Bvector[0],point[1]\u002Bvector[1]\u003Cbr\u003E        point2 = point[0]\u002Bvector[0],point[1]\u002Bvector[1]\u003Cbr\u003E        shot[\u0027Point\u0027] = point\u003Cbr\u003E\u003Cbr\u003E        if shot[\u0027Point\u0027][0] \u0026gt;= windowWidth:\u003Cbr\u003E            shot[\u0027Point\u0027] = 5,shot[\u0027Point\u0027][1]\u003Cbr\u003E\u003Cbr\u003E        if shot[\u0027Point\u0027][0] \u0026lt;= 0:\u003Cbr\u003E            shot[\u0027Point\u0027] = windowWidth-5,shot[\u0027Point\u0027][1]\u003Cbr\u003E\u003Cbr\u003E        if shot[\u0027Point\u0027][1] \u0026gt;= windowWidth:\u003Cbr\u003E            shot[\u0027Point\u0027] = shot[\u0027Point\u0027][0],5\u003Cbr\u003E\u003Cbr\u003E        if shot[\u0027Point\u0027][1] \u0026lt;= 0:\u003Cbr\u003E            shot[\u0027Point\u0027] =shot[\u0027Point\u0027][0],windowWidth-5\u003Cbr\u003E\u003Cbr\u003E        if shot[\u0027Life\u0027] \u0026lt;= 0:\u003Cbr\u003E            shotList.remove(shot)\u003Cbr\u003E        drawCircle(Window1,shot[\u0027Color\u0027],(int(shot[\u0027Point\u0027][0]),int(shot[\u0027Point\u0027][1])),shot[\u0027Size\u0027],shot[\u0027Size\u0027])\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef doExaust(exaustList):\u003Cbr\u003E    for part in exaustList:\u003Cbr\u003E        part[\u0027Size\u0027] *= part[\u0027ScaleRate\u0027]\u003Cbr\u003E        if part[\u0027Size\u0027] \u0026lt;= 1:\u003Cbr\u003E            part[\u0027Size\u0027] = 1\u003Cbr\u003E        part[\u0027Life\u0027] -= 1\u003Cbr\u003E\u003Cbr\u003E        point = part[\u0027Point\u0027]\u003Cbr\u003E        vector = part[\u0027Vector\u0027]\u003Cbr\u003E        point = point[0]\u002Bvector[0],point[1]\u002Bvector[1]\u003Cbr\u003E        part[\u0027Point\u0027] = point\u003Cbr\u003E\u003Cbr\u003E        if part[\u0027Point\u0027][0] \u0026gt; windowWidth or part[\u0027Point\u0027][0] \u0026lt; 0 or part[\u0027Point\u0027][1] \u0026lt; 0 or part[\u0027Point\u0027][1] \u0026gt; windowWidth or part[\u0027Life\u0027] \u0026lt;= 0:\u003Cbr\u003E            exaustList.remove(part)        \u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        drawCircle(Window1,part[\u0027Color\u0027],(int(part[\u0027Point\u0027][0]),int(part[\u0027Point\u0027][1])),int(part[\u0027Size\u0027]),int(part[\u0027Size\u0027]))\u003Cbr\u003E        drawCircle(Window1,part[\u0027Color2\u0027],(int(part[\u0027Point\u0027][0]),int(part[\u0027Point\u0027][1])),int(part[\u0027Size\u0027]-1),int(part[\u0027Size\u0027])-1)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003EmakeWindow(0,windowWidth,windowHeight)\u003Cbr\u003Efill(Window1,BLACK)\u003Cbr\u003E\u003Cbr\u003EshipPoints2 = scalePoints(shipPoints,3)\u003Cbr\u003Eprint(shipPoints2)\u003Cbr\u003EshipPoints3 = rotatePoints(shipPoints2,(0,0),0)\u003Cbr\u003Eprint(shipPoints2)\u003Cbr\u003EshipPoints2 = movePoints(shipPoints2,windowCenter)\u003Cbr\u003E\u003Cbr\u003Eprint(shipPoints2)\u003Cbr\u003Ewhile True:\u003Cbr\u003E    fill(Window1,BLACK)\u003Cbr\u003E    checkEvents()\u003Cbr\u003E\u003Cbr\u003E    shipVelocity = shipVelocity[0] / 1.01, shipVelocity[1] / 1.01\u003Cbr\u003E    shipRotationRate = shipRotate(shipRotationRate,rotatingType,rotating,rotationRate,secondaryRotRate)\u003Cbr\u003E    shipRotation \u002B= shipRotationRate\u003Cbr\u003E\u003Cbr\u003E    shipVerts = findShipVerts(shipCenter,shipRotation,shipVelocity)\u003Cbr\u003E\u003Cbr\u003E    shipCenter = ship_StayWithinBounds(shipCenter)\u003Cbr\u003E    doShots(shotList)\u003Cbr\u003E    doExaust(exaustList)\u003Cbr\u003E\u003Cbr\u003E    drawLines(Window1,SHIPCOLOR,1,shipVerts,shipThickness) ##Draw SHIP\u003Cbr\u003E    ##drawLines(Window1,SHIPCOLOR,1,shipPoints2,shipThickness) ##Draw SHIP\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E##    drawLine(Window1,GREEN,shipCenter,(shipCenter[0]\u002BshipVelocity[0]*vectorScale,shipCenter[1]\u002BshipVelocity[1]*vectorScale),2)\u003Cbr\u003E##    drawLine(Window1,RED,shipCenter,(shipCenter[0]-shipVelocity[0]*vectorScale,shipCenter[1]-shipVelocity[1]*vectorScale),2)\u003Cbr\u003E##    thrustVector = trigCoords(shipCenter,shipRotation,shipSize)\u003Cbr\u003E##    drawLine(Window1,BLUE,shipCenter,thrustVector,2)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    delayMS(10)\u003Cbr\u003E    update()\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s still a big WIP, but I\u0027ve got the vector logic down, and it behaves just like the ship in Asteroids does. Half of the functions don\u0027t even work. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_sleep.png\u0022 alt=\u0022-_-\u0022\u003E\u003C/p\u003E\u003Cp\u003E(It requires Pygame, which is a graphics library for Python.)\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/S5myHiq.png\u0022 alt=\u0022S5myHiq.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EAdded some code to \u0022pause\u0022 (Really a half-arsed solution which when activated simply stopped updating the screen \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E) the display so I could get this screenshot.\u003C/p\u003E\n"},{"CreatedByName":"RocketscientistV","CreatedById":80703,"CreatedDateTime":"2014-10-31T21:14:11Z","Content":"\n\u003Cp\u003EI\u0027m doing orbits and space in physics at the moment so this would be very appropriate for me.\u003C/p\u003E\n"},{"CreatedByName":"Starwhip","CreatedById":83990,"CreatedDateTime":"2014-10-31T22:18:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022RocketscientistV\u0022 data-cite=\u0022RocketscientistV\u0022\u003E\u003Cdiv\u003EI\u0027m doing orbits and space in physics at the moment so this would be very appropriate for me.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHohmann transfer calculator for ju?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eimport math\u003Cbr\u003EgParam = (3.5316000) * (10**12)\u003Cbr\u003EbodyRadius = 600000\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef findDeltaV1(periapsis,apoapsis):\u003Cbr\u003E    periapsis \u002B= bodyRadius\u003Cbr\u003E    apoapsis \u002B= bodyRadius\u003Cbr\u003E    deltaV = math.sqrt( (gParam) / (periapsis) ) * (math.sqrt( (2 * apoapsis) / (periapsis \u002B apoapsis) )-1)\u003Cbr\u003E    return deltaV\u003Cbr\u003E\u003Cbr\u003Edef findDeltaV2(periapsis,apoapsis):\u003Cbr\u003E    periapsis \u002B= bodyRadius\u003Cbr\u003E    apoapsis \u002B= bodyRadius\u003Cbr\u003E    deltaV = math.sqrt( (gParam) / (apoapsis) ) * (1 - math.sqrt( (2 * periapsis) / (periapsis \u002B apoapsis) ))\u003Cbr\u003E    return deltaV\u003Cbr\u003E\u003Cbr\u003Edef findVelocity(altitude,periapsis,apoapsis):\u003Cbr\u003E    altitude \u002B= bodyRadius\u003Cbr\u003E    periapsis \u002B= bodyRadius\u003Cbr\u003E    apoapsis \u002B= bodyRadius\u003Cbr\u003E    velocity = math.sqrt(gParam*((2/altitude)-(1/((periapsis\u002Bapoapsis)/2))))\u003Cbr\u003E    return velocity\u003Cbr\u003E\u003Cbr\u003Edef calculateHohmannTransfer(initOrbit,finOrbit):\u003Cbr\u003E    r1 = initOrbit \u002B bodyRadius\u003Cbr\u003E    r2 = finOrbit \u002B bodyRadius\u003Cbr\u003E\u003Cbr\u003E    deltaV = findDeltaV1(r1,r2) \u002B findDeltaV2(r1,r2)\u003Cbr\u003E    return deltaV\u003Cbr\u003E\u003Cbr\u003Eprint(calculateHohmannTransfer(-200000,85000))\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Eprint(calculateHohmannTransfer(-\u003C/strong\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003E200000,85000\u003C/strong\u003E\u003C/span\u003E\u003Cstrong\u003E))\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe first parameter is the altitude of your initial orbit, the second is, well, the second altitude.\u003C/p\u003E\u003Cp\u003ERight now it is tuned for Kerbin. Just adjust the bodyRadius and gParam variables to Earth\u0027s.\u003C/p\u003E\u003Cp\u003EI never finished this one, but it works as-is good enough. Only the User Interface would need work. (In fact, it is literally nonexistent. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E)\u003C/p\u003E\n"}]}