{"TopicId":138310,"ForumId":39,"TopicTitle":"KSP Gegi - a custom status and control panel \u002B plea for ideas","CreatedByName":"ytmytm","CreatedById":162944,"CreatedDateTime":"2016-04-27T23:45:05Z","PageNum":1,"Articles":[{"CreatedByName":"ytmytm","CreatedById":162944,"CreatedDateTime":"2016-04-27T23:45:05Z","Content":"\n\u003Cp\u003E\nThis is a control panel that I constructed for KSP.\u00A0It is a prototype and I still learn what works and what doesn\u0027t. On the bottom of this post there is a plea for help and\u00A0ideas.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is the project\u0027s page with build log, more pictures and some extra information how it was built,\u00A0what I learned over the time and how the very first prototype on a cardboard looked like:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://hackaday.io/project/8891-ksp-gegi\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://hackaday.io/project/8891-ksp-gegi\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThis is the project\u0027s source code repository:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/ytmytm/ksp-gegi\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/ytmytm/ksp-gegi\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThis project wouldn\u0027t be possible without kRPC mod:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022http://krpc.github.io/krpc/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://krpc.github.io/krpc/\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg class=\u0022ipsImage\u0022 src=\u0022https://cdn.hackaday.io/images/7284391453075626111.JPG\u0022 alt=\u00227284391453075626111.JPG\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThe enclosure is made out of gutted IKEA LACK shelf and inside there are two Arduinos: one Arduino Micro Pro for USB Serial communication and HID joystick emulation and one Arduino Mini Pro for handling\u00A0extra I/O. The knobs on joysticks are just wooden pegs. Throttle\u00A0potentiometer\u00A0was\u00A0salvaged from a broken humidifier.\n\u003C/p\u003E\n\u003Cp\u003E\nJoysticks work\u00A0without any extra software support - simply as USB joysticks.\n\u003C/p\u003E\n\u003Cp\u003E\nThe status indicators and\u00A0display data\u00A0are transmitted over serial port and parsed by\u00A0Python program\u00A0that talks through \u003Ca href=\u0022http://krpc.github.io/krpc/\u0022 rel=\u0022external nofollow\u0022\u003EkRPC \u003C/a\u003Ewith the game.\n\u003C/p\u003E\n\u003Cp\u003E\nHere is an\u00A0overview of the schematic and connections. There is no proper schematic as it evolved as it was built.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg class=\u0022ipsImage\u0022 src=\u0022https://cdn.hackaday.io/images/7597931451565415217.png\u0022 alt=\u00227597931451565415217.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003EFeatures\u003C/strong\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cstrong\u003EStatus display\u003C/strong\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nAnalog display of remaining electrical power\n\u003C/li\u003E\n\u003Cli\u003E\nAnalog display of\u00A0current G-force acceleration felt onboard\n\u003C/li\u003E\n\u003Cli\u003E\nWarning LED for low fuel condition;\u00A0will be on if less\u00A020% of fuel remains and blink if less than 10% of fuel remains\n\u003C/li\u003E\n\u003Cli\u003E\nWarning LED for low power condition (as above)\n\u003C/li\u003E\n\u003Cli\u003E\nWarning LED for overheat condition; will be on if any part of the ship is heated to at least 60% of its max temperature and blink if it is heated to at least 80% of maxiumum temperature\n\u003C/li\u003E\n\u003Cli\u003E\nStatus indicator LEDs\u00A0for vessel lights / gears / rcs / sas; green is ON, red is OFF and if the status of the switch doesn\u0027t match status in the game then the relevant indicator blinks (for example if I have sas switch ON but in the game it is OFF the green sas indicator will blink)\n\u003C/li\u003E\n\u003Cli\u003E\n16x2 LCD display with three modes of action (first one doesn\u0027t match the label\u00A0on the picture):\n\u003Col\u003E\u003Cli\u003E\nEccentricity and inclination of vessel\u0027s orbit\n\u003C/li\u003E\n\u003Cli\u003E\nApoapis \u002B time to apoapsis, periapsis \u002B time to periapsis (orbit\u00A0mode)\n\u003C/li\u003E\n\u003Cli\u003E\nSpeed and\u00A0horizontal/vertical surface speed (surface\u00A0mode)\n\u003C/li\u003E\n\u003C/ol\u003E\u003C/li\u003E\n\u003Cli\u003E\n128x64\u00A0OLED display with uncertain mode of action (the switch below has three positions)\n\u003Col\u003E\u003Cli\u003E\nCurrent orbit data: horizontal line is major axis, vertical line is minor axis, if the eccentricity is not too high then also\u00A0an ellipse with proper eccentricity; an additional line shows orbit inclination\u00A0(like a hand on a\u00A0clock between hours 12 and 3)\n\u003C/li\u003E\n\u003Cli\u003E\nI don\u0027t have idea for two remaining modes yet, so the switch remained unlabeled\n\u003C/li\u003E\n\u003C/ol\u003E\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\n\u003Cem\u003E\u003Cstrong\u003EControls\u003C/strong\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nTwo 2-axis joysticks are presented to the host as one 3-axis joystick with 3 rotation axes, a throttle, a rudder and some 32 buttons. Those analog joysticks have\u00A0buttons under them but if you push such\u00A0button then you can\u0027t make any accurate moves anymore. So I configured the microcontroller to enable extra axes if button on the opposite joystick is pressed. For example the joystick on the left works as\u00A0X/Y axis mode if button on the joystick on the right is released\u00A0or\u00A0X/Y rotation if it is pressed.\n\u003C/li\u003E\n\u003Cli\u003E\nKnob for time warp control\n\u003C/li\u003E\n\u003Cli\u003E\nKnob for throttle control\n\u003C/li\u003E\n\u003Cli\u003E\nAbort / Stage mode switch for EMERGENCY push button (in a very Kerbal way - make sure that you are in the right mode before panicking to enable parachutes instead of next stage boosters)\n\u003C/li\u003E\n\u003Cli\u003E\nMode switch for LCD display with 3 positions\n\u003C/li\u003E\n\u003Cli\u003E\nMode switch for OLED display with 3 positions\n\u003C/li\u003E\n\u003Cli\u003E\nToggle switches for lights / gears / rcs / sas\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nWhen not connected to Python interface/kRPC this control panel works like a toy for my 3-year old son. The red/green\u00A0indicators will turn on and off as expected with toggle switches. The analog displays will move their hands if you turn time warp and throttle controls. And OLED screen will show the position\u00A0of both joysticks (two dots in two circles, like goggly eyes). It is enough to just connect it to a powerbank.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong style=\u0022line-height:1.6;\u0022\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EStatus\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cstrong\u003EWhat is very nice\u003C/strong\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nSwitches and indicators are very useful for the game. With two joysticks I can finally do EVA with intuitive control\u00A0and the RCS control for docking (translation\u002Brotation) is also easy. LCD display with orbit parameters is very useful too, but I should mount it slight angled (it\u0027s not very well visible if I don\u0027t look straight on it).\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cstrong\u003EWhat is not nice\u003C/strong\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMy woodwork is ugly, The labels are temporary. I had no idea how to mount joysticks (this is why one hole is round and the other rectangular)\u00A0and the wires inside are a mess.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#FF0000;\u0022\u003E\u003Cem\u003E\u003Cstrong\u003EWhat doesn\u0027t work (HELP!)\u003C/strong\u003E\u003C/em\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#FF0000;\u0022\u003EThat OLED display has 128x64 pixels, the top 16 rows are yellow, remaining 48 rows are cyan. In my code I wrote a simple graphics interpreter so I can send from Python interface commands like \u0022draw line from here to there; put pixel here; draw a frame from here to there\u0022 etc. There is also possibility to put text on OLED, but it works too slowly and I would avoid it.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#FF0000;\u0022\u003EAt the moment I simply have no idea what kind of information to put there. The information must be useful for space flight, should be graphical in nature and must fit on a tiny 128x64 (16\u002B48) screen. I put a 3-position switch under this display so there are three modes of display possible.\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Freshmeat","CreatedById":111048,"CreatedDateTime":"2016-04-28T11:46:18Z","Content":"\n\u003Cp\u003E\n\u003Cbr\u003E\nFirst of all, a very warm welcome to the forums.\n\u003C/p\u003E\n\u003Cp\u003E\nI like your controller a lot, you have gotten what I feel is the really important stuff sorted first. You probably feel a world of difference between flying keyboard and your own setup, not the least because you get to choose what to put where.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want suggestions, I would add a landing mode to the 16 x 2 display. It would need to display radar altitude, and horizontal and vertical speed (you would have to be a bit creative there with placement). Or you could put Radar Alt on one of your analogue gauges, as G-force is not that critical to your flight. Personally, I have Radar Alt, Fuel, Charge and Mono on gauges (when I get around to install the panel, I am in the process of rebuilding).\n\u003C/p\u003E\n\u003Cp\u003E\nThe 128 x 64 is interesting, I bought one myself but have still not decided. The most probable outcome is an indicator of the ships deviation from prograde, as I tend to look a lot more on my AP/alt/velocity indicator than my screen during ascent, and often the rocket then drifts a bit.\n\u003C/p\u003E\n\u003Cp\u003E\nFinally, I can recommend the other hardware threads around. A lot of arduino coding gets tossed around in \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/60281-hardware-plugin-arduino-based-physical-display-serial-port-io-tutorial-22-april/\u0022 rel=\u0022\u0022\u003Ezitronens plugin thread\u003C/a\u003E, and lots of inspiration can be gotten from\u00A0\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/60620-custom-hardware-simpit-repository-for-people-who-take-ksp-a-little-too-far/\u0026amp;page=1\u0022 rel=\u0022\u0022\u003EMulbins hardware thread\u003C/a\u003E, and the other threads linked from there. Feel free to ask questions anywhere, people love to share their knowledge.\n\u003C/p\u003E\n"},{"CreatedByName":"ytmytm","CreatedById":162944,"CreatedDateTime":"2016-04-28T23:44:10Z","Content":"\n\u003Cp\u003E\nThank you for warm welcome and suggestions!\n\u003C/p\u003E\n\u003Cp\u003E\nI have visited those threads and I took a lot of inspiration from there.\n\u003C/p\u003E\n\u003Cp\u003E\nI didn\u0027t do many landings yet, but it\u0027s clear that a landing mode with this key information\u00A0will be much more useful than what I already have.\n\u003C/p\u003E\n\u003Cp\u003E\nYour hint about putting on OLED display deviation from prograde points me in some direction. kRPC exposes a lot of information about vessel position, orientation with respect to various frames of reference. So that would be one mode. Now I\u0027m thinking that second mode would be for docking. I would need some indication about relative speed and\u00A0if my vessel is parallel to the target.\n\u003C/p\u003E\n\u003Cp\u003E\nFor the next revision I would go with four analog gauges too for\u00A0power/fuel/mono and\u00A0G-force. The last one is\u00A0not necessary\u00A0for flight at all, but it\u0027s nice to have for extra immersion effect. It gives me instant\u00A0feedback\u00A0of engine power once I move\u00A0the throttle up.\n\u003C/p\u003E\n"}]}