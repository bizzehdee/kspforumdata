{"TopicId":107632,"ForumId":29,"TopicTitle":"TypeLoadException referencing System class","CreatedByName":"uberk","CreatedById":142500,"CreatedDateTime":"2015-05-05T12:00:06Z","PageNum":1,"Articles":[{"CreatedByName":"uberk","CreatedById":142500,"CreatedDateTime":"2015-05-05T12:00:06Z","Content":"\n\u003Cp\u003EI\u0027m trying to use a System.IO.Pipes.NamedPipeServerStream to do some interprocess communication between my KSP plugin and another application running on my box. Doing that, I\u0027m getting this error:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[Exception]: TypeLoadException: Could not load type \u0027System.IO.Pipes.NamedPipeServerStream\u0027 from assembly \u0027System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\u0027.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn Visual Studio, I\u0027ve tried targeting both versions of .NET Framework 3.5 (vanilla and Client Profile) to no avail. System.IO.Pipes.NamedPipeServerStream was new in .NET 3.5, so it should be supported OK. Am I failing to set up my plugin properly? I can\u0027t imagine having to do anything special to include standard System libraries. Could this evidence of more forbidden namespaces? (I know, I know, jumping right to the worst possible conclusion...)\u003C/p\u003E\u003Cp\u003EHere\u0027s my plugin in its entirety, there\u0027s absolutely nothing special going on besides the pipe:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;using System.IO;\u003Cbr\u003Eusing System.IO.Pipes;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace KSPSBC\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.MainMenu, false)]\u003Cbr\u003E    public class KSPSBC : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public void Awake() { }\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022Attempting to create NamedPipeServerStream object...\u0022);\u003Cbr\u003E            using (NamedPipeServerStream pipeServer = new NamedPipeServerStream(\u0022testpipe\u0022, PipeDirection.Out))\u003Cbr\u003E            {\u003Cbr\u003E                print(\u0022Success!\u0022);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EHmm, this might be a Unity issue... According to \u003Ca href=\u0022http://answers.unity3d.com/questions/234109/using-systemiopipes-error.html\u0022 rel=\u0022external nofollow\u0022\u003Ethis help reques\u003C/a\u003Et, \u0022\u003Cspan style=\u0022font-family:\u0027helvetica neue\u0027;\u0022\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EUnity deliberately removes some of the less commonly-used classes from the Mono library to reduce the memory and storage requirements of the game. In the Player Settings (menu: Edit \u0026gt; Project Settings \u0026gt; Player) you will find a setting called API Compatibility Level in the Other Settings panel. If you set this to .NET 2.0 instead of .NET 2.0 Subset, you will get all the Mono classes that Unity implements. The Pipes class is implemented in Unity, so you should be OK after you change this setting.\u0022\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027helvetica neue\u0027;\u0022\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EIs there any way to figure out what compatibility level KSP was compiled with?\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-05T22:00:03Z","Content":"\n\u003Cp\u003EI\u0027m fairly sure KSP compiles to .NET 2.0 Unity.\u003C/p\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-05T23:19:02Z","Content":"\n\u003Cp\u003EYou mean we should target .NET 2.0 ?!\u003C/p\u003E\u003Cp\u003EEvery guide I\u0027ve read so far seems to suggest 3.5.\u003C/p\u003E\u003Cp\u003EUnity is using some version (2.xx) of Mono which does not directly correlate to the .NET framework version.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-06T00:58:34Z","Content":"\n\u003Cp\u003ENo. KSP is built on 3.5, so target that.\u003C/p\u003E\u003Cp\u003EEDIT: Yep, does seem like the Unity KSP uses is .NET 2.0, so if that somehow causes issues with what you\u0027re using, that might be trouble\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-06T01:00:38Z\u0022 title=\u002205/06/2015 01:00  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 6, 2015\u003C/time\u003E by stupid_chris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"uberk","CreatedById":142500,"CreatedDateTime":"2015-05-06T10:53:07Z","Content":"\n\u003Cp\u003ESorry, I don\u0027t want to confuse the issue, so here\u0027s how (I\u0027m pretty sure) everything works. Unity uses Mono, which is a .NET \u003Cem\u003Ecompatible\u003C/em\u003E library developed by Xamarin, not strictly tied to Microsoft\u0027s .NET framework. Xamarin has chosen what features of .NET to recreate and implement. Any code you write will look and feel like .NET, but under the hood it\u0027s Mono. All the library linking happens at runtime, so even if you think you\u0027re using Microsoft\u0027s libraries, Mono\u0027s are being swapped in instead.\u003C/p\u003E\u003Cp\u003EMeanwhile, Unity has various compatibility levels. Basically, they decided on a subset of Mono classes that most games will want to use, and made the rest optional. They did this cut down on load time and size. The core functions are (confusingly) called \u0022.NET 2.0 Subset\u0022, while the extended functions are called \u0022.NET 2.0\u0022. \u003Cem\u003EThe version numbers don\u0027t really mean anything\u003C/em\u003E, it\u0027s just the name they went with when they built the editor. Games use the core subset by default, unless you specifically configure Unity to use the full suite.\u003C/p\u003E\u003Cp\u003EMono itself implements various different .NET functions, but not all of the features from either .NET 4.0 or .NET 3.5, which is why there\u0027s so much confusion about what library version to target. As far as I can tell, it doesn\u0027t matter what you choose, so long as you\u0027re only using classes that exist in the version of Mono used by KSP. The full list of Mono classes used by Unity, and the API compatibility level that exposes them, can be found here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://docs.unity3d.com/410/Documentation/ScriptReference/MonoCompatibility.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/410/Documentation/ScriptReference/MonoCompatibility.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESo, my actual problem: I don\u0027t know how to tell what compatibility level KSP was compiled with. If it uses the \u0022.NET 2.0 Subset\u0022 suite, I\u0027m totally out of luck, because named pipes are not included in that level. There\u0027s an ApiCompatibilityLevel enumeration under UnityEditor, but I can\u0027t find any reference to the compatibility level that I can query at runtime.\u003C/p\u003E\u003Cp\u003EPlease correct me if I\u0027ve made an mistakes, I\u0027d hate to muddy the waters even more, and I\u0027ve only been at this for two days.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-05-06T12:37:06Z","Content":"\n\u003Cp\u003EPlayerSettings.apiCompatibilityLevel ?\u003C/p\u003E\n"},{"CreatedByName":"uberk","CreatedById":142500,"CreatedDateTime":"2015-05-07T00:09:55Z","Content":"\n\u003Cp\u003EClose, but nope. \u003Cspan style=\u0022color:#333333;\u0022\u003EPlayerSettings.apiCompatibilityLevel is a component of UnityEditor, which is only accessible in the actual Unity editor mode. You can\u0027t access it after compilation.\u003C/span\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-07T02:42:33Z\u0022 title=\u002205/07/2015 02:42  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 7, 2015\u003C/time\u003E by uberk\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-08T20:00:50Z","Content":"\n\u003Cp\u003EI used a decompiler to have a look at the contents of the System.Core.dll that comes with KSP and I can confirm that there are no pipes to be found.\u003C/p\u003E\u003Cp\u003EThe one I found under Unity\\Editor\\Data\\Mono\\lib\\mono\\2.0 does have them.\u003C/p\u003E\u003Cp\u003EThat means KSP is using the Mono Subset?\u003C/p\u003E\u003Cp\u003EShouldn\u0027t it be possible to force loading of the other assembly? (You would have to ship that assembly with your addon then, of course.)\u003C/p\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-08T20:58:17Z","Content":"\n\u003Cp\u003EReplacing Kerbals System.Core.dll with the one I mentioned works. The pipe is successfully opened.\u003C/p\u003E\u003Cp\u003EOverwriting Kerbal assemblies is not very nice though, maybe even against the rules, I don\u0027t know.\u003C/p\u003E\u003Cp\u003EIt should be possible to do the same thing with some dynamic assembly loading magic and/or reflection instead of overwriting the original assembly.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-08T21:26:12Z","Content":"\n\u003Cp\u003EYou\u0027re not allowed to go modify those .dll. However, you can include the needed System.Core.dll in your mod folder and reference it.\u003C/p\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-08T21:40:10Z","Content":"\n\u003Cp\u003EOk, but the problem is that System.Core.dll is already loaded and it won\u0027t be loaded again automatically. Thats what I meant with dynamic assembly loading magic ;-)\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-08T21:47:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Slother\u0022 data-cite=\u0022Slother\u0022\u003E\u003Cdiv\u003EOk, but the problem is that System.Core.dll is already loaded and it won\u0027t be loaded again automatically. Thats what I meant with dynamic assembly loading magic ;-)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m fairly sure that KSP will load all .dll\u0027s present in the GameData folder\u003C/p\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-08T23:07:22Z","Content":"\n\u003Cp\u003EYes and no. It doesn\u0027t work in this case because the runtime thinks it has already loaded the correct assembly and won\u0027t load the same assembly twice. I just tested it that for this case to be sure \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-09T00:25:22Z","Content":"\n\u003Cp\u003EAre you on a non-windows platform? Just dropping the System.Core into the same directory as the assembly with code from the OP worked fine for me on Windows 7 but there might not be an equivalent of named pipes on other platforms\u003C/p\u003E\n"},{"CreatedByName":"uberk","CreatedById":142500,"CreatedDateTime":"2015-05-09T00:38:29Z","Content":"\n\u003Cp\u003EHuh, interesting, I wouldn\u0027t have thought to try that. Still, I\u0027d like this to be easily distributable, so I went with hacky-but-standard file-based IPC instead of named pipes. Thanks for digging into the DLL, it\u0027s very helpful to understand how everything works.\u003C/p\u003E\n"},{"CreatedByName":"Slother","CreatedById":142925,"CreatedDateTime":"2015-05-09T01:40:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EAre you on a non-windows platform? Just dropping the System.Core into the same directory as the assembly with code from the OP worked fine for me on Windows 7 but there might not be an equivalent of named pipes on other platforms\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWeird, I\u0027m on Windows 8.1.\u003C/p\u003E\n"}]}