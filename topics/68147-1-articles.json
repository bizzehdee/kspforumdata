{"TopicId":68147,"ForumId":32,"TopicTitle":"How do I make sense of category enumerations in part.cfg files?","CreatedByName":"neamerjell","CreatedById":86054,"CreatedDateTime":"2014-04-05T02:56:43Z","PageNum":1,"Articles":[{"CreatedByName":"neamerjell","CreatedById":86054,"CreatedDateTime":"2014-04-05T02:56:43Z","Content":"\n\u003Cp\u003EI made a Python 3.3 script to go through the \\GameData folder, open all the part.cfg files, get the name =, title =, category =, and path of the file and put them into a CSV file. However, B9 Aerospace and KW Rocketry don\u0027t follow the normal standard in the \u0022category =\u0022 line; they use \u0022category = 0\u0022 or \u0022category = 2\u0022!\u003C/p\u003E\u003Cp\u003EI am guessing that 0 is likely \u0022Propulsion\u0022 and 2 is likely \u0022Structural\u0022. Am I right? Is there another meaning for the numbers? Is it a holdover from a previous version that just happens to be backwards compatible?\u003C/p\u003E\u003Cp\u003EHere is the script code in case you are interested:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eimport os\u003Cbr\u003E\u003Cbr\u003Estartpath = \u0027C:\\Program Files (x86)\\Steam\\SteamApps\\common\\Kerbal Space Program\\GameData\u0027\u003Cbr\u003Elinein = \u0027\u0027\u003Cbr\u003Einternalname = \u0027\u0027\u003Cbr\u003Etitle = \u0027\u0027\u003Cbr\u003Ecategory = \u0027\u0027\u003Cbr\u003Efullpath = \u0027\u0027\u003Cbr\u003Epartpath = \u0027\u0027\u003Cbr\u003Eidx = 0\u003Cbr\u003Ehavename = False\u003Cbr\u003E\u003Cbr\u003Ef = open(\u0022C:\\\\partlist.csv\u0022, \u0027w\u0027)\u003Cbr\u003E\u003Cbr\u003E#Write column headers\u003Cbr\u003Ef.write(\u0027NAME,TITLE,CATEGORY,PATH\\n\u0027)\u003Cbr\u003E\u003Cbr\u003E#Apparently a funtion that automatically handles the recursion through the file system, found it using Google\u003Cbr\u003Efor root, dirs, files in os.walk(startpath):\u003Cbr\u003E\u003Cbr\u003E    #If the filename is \u0022part.cfg\u0022 then open it and print the path to the console\u003Cbr\u003E    for name in files:\u003Cbr\u003E        if name.find(\u0022part.cfg\u0022) != -1:\u003Cbr\u003E            fullpath = os.path.join(root, name)\u003Cbr\u003E            print(fullpath)\u003Cbr\u003E            i = open(fullpath, \u0027r\u0027)\u003Cbr\u003E\u003Cbr\u003E            for eachline in i:\u003Cbr\u003E                linein = str(eachline)\u003Cbr\u003E\u003Cbr\u003E                #since outputting to a CSV, commas will screw everthing up, replace them with underscores\u003Cbr\u003E                #Prime example: \u0022Advanced S.A.S Module, Large\u0022\u003Cbr\u003E                linein = linein.replace(\u0022,\u0022, \u0022_\u0022) \u003Cbr\u003E\u003Cbr\u003E                #only want to get the first occurance of \u0022name =\u0022, discard all subsequent occurances\u003Cbr\u003E                # \u0022name =\u0022 also appears with in MODULE {} and RESOURCE {} blocks\u003Cbr\u003E                if havename == False:\u003Cbr\u003E                    idx = linein.find(\u0027name = \u0027)\u003Cbr\u003E                    if idx != -1:\u003Cbr\u003E                        internalname = linein[idx \u002B 7:len(str(linein)) - 1]\u003Cbr\u003E                        havename = True\u003Cbr\u003E\u003Cbr\u003E                idx = linein.find(\u0027title = \u0027)\u003Cbr\u003E\u003Cbr\u003E                if idx != -1:\u003Cbr\u003E                    title = linein[idx \u002B 8:len(str(linein)) - 1]\u003Cbr\u003E\u003Cbr\u003E                idx = linein.find(\u0027category = \u0027)\u003Cbr\u003E\u003Cbr\u003E                if idx != -1 and linein.find(\u0027sub\u0027) == -1:\u003Cbr\u003E                    category = linein[idx \u002B 11:len(str(linein)) - 1]\u003Cbr\u003E\u003Cbr\u003E            i.close\u003Cbr\u003E\u003Cbr\u003E            #reset havename flag for next file\u003Cbr\u003E            havename = False\u003Cbr\u003E\u003Cbr\u003E            #Create a path starting at \u0022GameData\\...\u0022\u003Cbr\u003E            partpath = fullpath[67:len(fullpath) - 1]\u003Cbr\u003E\u003Cbr\u003E            f.write(internalname \u002B \u0027,\u0027 \u002B title \u002B \u0027,\u0027 \u002B category \u002B \u0027,\u0027 \u002B partpath \u002B \u0027\\n\u0027)\u003Cbr\u003E\u003Cbr\u003Ef.close\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-05T03:10:24Z\u0022 title=\u002204/05/2014 03:10  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 5, 2014\u003C/time\u003E by neamerjell\u003C/strong\u003E\n\u003Cbr\u003EAdded code listing\n\u003C/span\u003E\n"},{"CreatedByName":"neamerjell","CreatedById":86054,"CreatedDateTime":"2014-04-29T18:10:51Z","Content":"\n\u003Cp\u003EUpdated code! This may turn into a full blown project before long...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eimport os\u003Cbr\u003E\u003Cbr\u003Estartpath = \u0027C:\\Program Files (x86)\\Steam\\SteamApps\\common\\Kerbal Space Program\\GameData\u0027\u003Cbr\u003E\u003Cbr\u003Efullpath = \u0027\u0027\u003Cbr\u003Eidx = 0\u003Cbr\u003Epropulsion = False\u003Cbr\u003Eaero = False\u003Cbr\u003Econtrol = False\u003Cbr\u003Estructural = False\u003Cbr\u003E\u003Cbr\u003E#Funtion that automatically handles the recursion through the file system, found it using Google\u003Cbr\u003Efor root, dirs, files in os.walk(startpath):\u003Cbr\u003E\u003Cbr\u003E    #If the filename is \u0022part.cfg\u0022 then open it and print the path to the console\u003Cbr\u003E    for name in files:\u003Cbr\u003E        if name.find(\u0022.cfg\u0022) != -1:\u003Cbr\u003E            fullpath = os.path.join(root, name)\u003Cbr\u003E\u003Cbr\u003E            newdata = None\u003Cbr\u003E            i = open(fullpath, \u0027r\u0027)\u003Cbr\u003E            newdata = i.read()\u003Cbr\u003E            i.close\u003Cbr\u003E\u003Cbr\u003E            #Fix categories (specifically because of B9 Aerospace)\u003Cbr\u003E            newdata = newdata.replace(\u0022category = 0\u0022, \u0022category = Propulsion\u0022)\u003Cbr\u003E            newdata = newdata.replace(\u0022subcategory = Propulsion\u0022,\u0022subcategory = 0\u0022)                \u003Cbr\u003E            newdata = newdata.replace(\u0022category = 2\u0022, \u0022category = Structural\u0022)\u003Cbr\u003E\u003Cbr\u003E            #Fix parts missing from career mode that are available in sandbox\u003Cbr\u003E            idx = newdata.find(\u0022TechRequired\u0022)\u003Cbr\u003E            if idx == -1:\u003Cbr\u003E                newdata = newdata.replace(\u0022cost\u0022,\u0022TechRequired = start\\nentryCost = 0\\ncost\u0022)\u003Cbr\u003E\u003Cbr\u003E            #Fix fuel tanks being listed under \u0027Structural\u0027, etc (again, B9 is bad for this)\u003Cbr\u003E            idx = newdata.find(\u0022RESOURCE\u0022)\u003Cbr\u003E            if idx != -1:\u003Cbr\u003E                idx = newdata.find(\u0022LiquidFuel\u0022)\u003Cbr\u003E                if idx != -1:\u003Cbr\u003E                    propulsion = True\u003Cbr\u003E\u003Cbr\u003E                idx = newdata.find(\u0022Oxidizer\u0022)\u003Cbr\u003E                if idx != -1:\u003Cbr\u003E                    propulsion = True\u003Cbr\u003E\u003Cbr\u003E                idx = newdata.find(\u0022MonoPropellant\u0022)\u003Cbr\u003E                if idx != -1:\u003Cbr\u003E                    newdata = newdata.replace(\u0022category = Structural\u0022, \u0022category = Control\u0022)\u003Cbr\u003E\u003Cbr\u003E                if propulsion == True:\u003Cbr\u003E                    newdata = newdata.replace(\u0022category = Structural\u0022, \u0022category = Propulsion\u0022)\u003Cbr\u003E\u003Cbr\u003E            print(fullpath)            \u003Cbr\u003E\u003Cbr\u003E            f = open(fullpath, \u0027w\u0027)\u003Cbr\u003E            f.write(newdata)\u003Cbr\u003E            f.close\u003Cbr\u003E\u003Cbr\u003E            propulsion = False\u003Cbr\u003E            aero = False\u003Cbr\u003E            control = False\u003Cbr\u003E            structural = False\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Amaroq","CreatedById":57607,"CreatedDateTime":"2014-04-29T18:20:59Z","Content":"\n\u003Cp\u003EHi - you might ask a moderator to move you over into one of the \u0022Add-ons\u0022 sections; you\u0027re more likely to get responses from experienced modders there. You may also try the KSP wiki, which has an intro-to-modding section.\u003C/p\u003E\u003Cp\u003ETo answer your quick question, \u0022category=0\u0022 is a holdover from a long while ago, yes. \u003C/p\u003E\u003Cp\u003EAnd if you\u0027re getting into re-categorizing parts (personally, I like my Docking Ports to be \u0022structural\u0022 elements), you might be interested in the ModuleManager mod, which lets you specify changes to the .cfg files (as deltas) which mean you can bring the deltas with you when you download the next version of KW, or KSP 0.24.0, or what have you.\u003C/p\u003E\n"}]}