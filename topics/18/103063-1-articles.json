{"TopicId":103063,"ForumId":18,"TopicTitle":"[Programming] C\u002B\u002B - looking for a \u0022cin \u003E\u003E ...\u0022 alternative","CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T20:17:11Z","PageNum":1,"Articles":[{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T20:17:11Z","Content":"Hi guys, probably this is the wrong forum, sorry, I didn\u0027t know where to post it otherwise. :|\n\nSo, I am trying to make a little console game with C\u002B\u002B, I have Windows 7 installed on my PC. To make the game work, the player needs to press a key (Let\u0027s say the key to press is \u0027W\u0027). When pressing that key, the speed increases by one. This would work (more or less) with the following code:\n\n    cin \u003E\u003E Input;if (Input == W){    Speed = Speed \u002B 1;}\n\nYou just press W on your keyboard and confirm with enter. But I want it so that if I press the \u0027W\u0027 key the speed increases automatically by one, without confirming. \n\nIsn\u0027t there something like \n\n    On \u0027 1 \u0027{     Speed = Speed \u002B1;}\n\n? \n\nIf so, please let me know! I\u0027d really appreciate any help! ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"TheCanadianVendingMachine","CreatedById":59684,"CreatedDateTime":"2015-03-31T20:20:13Z","Content":"You would need to check for a keyboard input, and if there isn\u0027t one don\u0027t pause the program. I don\u0027t believe there\u0027s any way to do this with base C\u002B\u002B, so you may have to make a function to do so.\n\nExample:\n\n    if (keyboard.input())  {     if (keyboard.key == \u0027W\u0027)         move.forward()  }\n\nNow, a way to get any key pressed without calling std::cin would get \\_getch()\n\nYou would implement it as such:\n\n    #include #include int main() {while (1){  int c;  std::cout \u003C\u003C \u0022Press Key: \u0022;  c = _getch();  if (c)  {     std::cout \u003C\u003C \u0022key pressed: \u0022 \u003C\u003C c \u003C\u003C std::endl;  }  else    std::cout \u003C\u003C \u0022An error has occured\u0022;}}\n\nThis, however, will still pause the program. But it is a step forward in order to get what you want.\n\nThis gets the current key press, but still pauses the program. I believe it\u0027s what you want\n\n**Edited \u003Ctime datetime=\u00222015-03-31T20:32:18Z\u0022 title=\u002203/31/2015 08:32  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 31, 2015\u003C/time\u003E by TheCanadianVendingMachine**"},{"CreatedByName":"Master Tao","CreatedById":110410,"CreatedDateTime":"2015-03-31T21:04:11Z","Content":"\u003Cmoderation\u003EMoved to The Space Lounge, where things other than KSP are discussed.\u003C/moderation\u003E"},{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T21:13:35Z","Content":"Thanks TheCanadianVendingMachine, that all looks promising! ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif) I\u0027ll try it out and report how it worked."},{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-04-01T12:06:35Z","Content":"Hey, so that with the keyboard input function didn\u0027t work, and the \\_getch function worked, at least more or less, but it doesn\u0027t mind which key I press, if I press a it moves on and if I press c or so it also moves on, that doesn\u0027t make any difference. \n\nAlso, I probably didn\u0027t say all what I would like the program to be. So here\u0027s the full source code:\n\n    #include using namespace std;int main (){    cout \u003C\u003C \u0022\\t\\t\\t\\t\\t\u0022 \u003C\u003C \u0022Airplane Landing\u0022 \u003C\u003C endl;    cout \u003C\u003C \u0022\\n\\n\\n\\t\u0022 \u003C\u003C \u0022   Task: Land the Airplane on the runway.\u0022 \u003C\u003C endl;    _sleep(5000);    system(\u0022cls\u0022);    // Start of the *real* program    int Level = 1;    // Level 1    if (Level == 1)    {        cout \u003C\u003C \u0022\\t\\t\\t\\t\\t\u0022 \u003C\u003C \u0022LEVEL 1\u0022 \u003C\u003C endl;        // Startparameter        double Altitude = 2000;                    // in Meter (m)        float Speed = 82;                        // in Meter pro Sekunde (m/s)        float Sinkrate = -5;                    // Sinkrate in Meter pro Sekunde (m/s)        float Throttle = 0;                    // In Prozent (1 = Max. Schub | 0 = kein Schub)        int Gear = 1;                            // Zwei M\u00C3\u0192\u00C2\u00B6glichkeiten: 1 (Extended) | 0 (Retracted)        double DistancetoAirport = 8000;        // Entfernung zum Flughafen in Metern (m)        double Drag = 1;                        // Luftwiederstand        int Speedbrake = 1;                        // Luftbremse (0 = deaktiviert | 1 = aktiviert        // Anzeigen der Startparameter        cout \u003C\u003C \u0022Altitude: \u0022 \u003C\u003C Altitude \u003C\u003C \u0022m\u0022 \u003C\u003C endl;        cout \u003C\u003C \u0022Speed: \u0022 \u003C\u003C Speed \u003C\u003C \u0022m/s\u0022 \u003C\u003C endl;        cout \u003C\u003C \u0022Sinkrate: \u0022 \u003C\u003C Sinkrate \u003C\u003C \u0022m/s\u0022 \u003C\u003C endl;        cout \u003C\u003C \u0022Throttle: \u0022 \u003C\u003C Throttle \u003C\u003C endl;        if (Gear == 0)        {            cout \u003C\u003C \u0022Gear: \u0022 \u003C\u003C \u0022Retracted\u0022 \u003C\u003C endl;        }        else        {            cout \u003C\u003C \u0022Gear: \u0022 \u003C\u003C \u0022Extended\u0022 \u003C\u003C endl;        }        if (Speedbrake == 0)        {            cout \u003C\u003C \u0022Speedbrake: \u0022 \u003C\u003C \u0022Deactivated\u0022 \u003C\u003C endl;        }        else        {            cout \u003C\u003C \u0022Speedbrake: \u0022 \u003C\u003C \u0022Activated\u0022 \u003C\u003C endl;        }        _sleep(5000);        // Jetzt geht\u0027s los...         int Levelcomplete = 0; // 0 = Level nicht geschafft, 1 = Level geschafft        while (DistancetoAirport \u003E 0)        {            system(\u0022cls\u0022);            // Anzeigen der Flugdaten            cout \u003C\u003C \u0022Altitude: \u0022 \u003C\u003C Altitude \u003C\u003C \u0022m\u0022 \u003C\u003C endl;            cout \u003C\u003C \u0022Speed: \u0022 \u003C\u003C Speed \u003C\u003C \u0022m/s\u0022 \u003C\u003C endl;            cout \u003C\u003C \u0022Sinkrate: \u0022 \u003C\u003C Sinkrate \u003C\u003C \u0022m/s\u0022 \u003C\u003C endl;            cout \u003C\u003C \u0022Throttle: \u0022 \u003C\u003C Throttle \u003C\u003C endl;            if (Gear == 0) { cout \u003C\u003C \u0022Gear: \u0022 \u003C\u003C \u0022Retracted\u0022 \u003C\u003C endl;}            else { cout \u003C\u003C \u0022Gear: \u0022 \u003C\u003C \u0022Extended\u0022 \u003C\u003C endl;}            if (Speedbrake == 0) { cout \u003C\u003C \u0022Speedbrake: \u0022 \u003C\u003C \u0022Deactivated\u0022 \u003C\u003C endl;}            else { cout \u003C\u003C \u0022Speedbrake: \u0022 \u003C\u003C \u0022Activated\u0022 \u003C\u003C endl;}            // Geschwindigkeit            Speed = Speed \u002B (Throttle*2.5);                Speed = Speed - (Gear*0.25);            Speed = Speed - (Sinkrate/25);            Speed = Speed - (Drag/2);            Speed = Speed - (Speedbrake);            // Geschwindigkeit zu niedrig            if (Speed \u003C 60)            {                cout \u003C\u003C \u0022\\a\\n\\n\\n\\t\\t\u0022 \u003C\u003C \u0022WARNUNG: GESCHWINDIGKEIT ZU NIEDRIG\u0022 \u003C\u003C endl;                if (Speed \u003C 50)                {                     cout \u003C\u003C \u0022\\a\\a\\\\t\u0022 \u003C\u003C \u0022MELDUNG: SCHUB WURDE AUTOMATISCH AUF VOLLE LEISTUNG GESTELLT\u0022 \u003C\u003C endl;                    Throttle = 1;                    Speedbrake = 0;                }            }            // Geschwindigkeit zu hoch            if (Speed \u003E 120)            {                cout \u003C\u003C \u0022\\a\\n\\n\\n\\t\\t\u0022 \u003C\u003C \u0022WARNUNG: GESCHWINDIGKEIT ZU HOCH\u0022 \u003C\u003C endl;                if (Speed \u003E 140)                {                     cout \u003C\u003C \u0022\\a\\a\\\\t\u0022 \u003C\u003C \u0022MELDUNG: SCHUB WURDE AUTOMATISCH AUF LEERLAUF GESTELLT\u0022 \u003C\u003C endl;                    Throttle = 0;                    Speedbrake = 1;                }            }            // Simulationsgeschwindigkeit            _sleep(500);        }    }}\n\nYeah, sorry, there are a few german comments in it, but I hope you understand the code anyway. ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif) So the program is a little console game. You must land an imagined airplane on the runway. You have a few elements to control the airplane, and you can see the speed, altitutde, gear state, speedbrakes and sinkrate. I\u0027m currently just working on the speed. Everything which is in the \u0027while\u0022-loop repeats. This is the real game. Inside this loop, there are the following elements:\n\nThe flight data, like altitude, speed, gear state (extended/retracted), speedbrakes and throttle\n\nUnderneath, I calculate the speed, with gear, speedbrakes and throttle in mind\n\nThen there are two if elements, these lower or rise the throttle if you are too slow or too fast, something like the real \u0022auto-throttle\u0022 ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\nThe last thing is the simulation speed. The \\_sleep(500) command says how long the program waits before the loop starts again\n\nYou can configure the configuration of the airplane at the start of \u0022Level 1\u0022, where all the variables are created and defined. \n\nMy problem is now: You must be of course able to control the ships throttle. So if I just add a cin \u003E\u003E command, the loop doesn\u0027t work at all. And you\u0027d have to confirm with enter key. So I am looking for a solution allowing me to make input with the keyboard, while the loop is running. \n\nSorry if I didn\u0027t clarify this, I hope it is clear now. Is there something like this? It\u0027s funny to make a small program like this, but it\u0027s pretty much useless if you can\u0027t interact with it, hehe:D"},{"CreatedByName":"TheCanadianVendingMachine","CreatedById":59684,"CreatedDateTime":"2015-04-01T19:02:37Z","Content":"Quick question - what compiler are you using, and what C\u002B\u002B version?\n\nAnd to your question of where you don\u0027t want the loop to stop, that\u0027s a harder problem. Because in order to do that, you need to have an If statement that checks if there\u0027s input from the keyboard. And if there isn\u0027t, don\u0027t pause the loop.\n\nThere isn\u0027t anyway to check this in the base C\u002B\u002B library. You would be better off downloading another library that does this for you, such as [SFML,](http://www.sfml-dev.org/) or [SDL](https://www.libsdl.org/) and use their input function.\n\n**Edited \u003Ctime datetime=\u00222015-04-01T19:15:06Z\u0022 title=\u002204/01/2015 07:15  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 1, 2015\u003C/time\u003E by TheCanadianVendingMachine**"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2015-04-01T22:26:26Z","Content":"you can always use the cstrings library. though i perfer doing all my string manip the c\u002B\u002B way. its great for writing file parsers and the like. \n\n\u003E \n\u003E \u003Cmoderation\u003EMoved to The Space Lounge, where things other than KSP are discussed.\u003C/moderation\u003E\n\nactually this falls under the tag [Computer Science] and would be better off in the science labs. might get more programmers eyes on it."},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2015-04-01T23:10:00Z","Content":"Err... he\u0027s just talking about reading the input stream, isn\u0027t he?\n\nI mean, yes, you would have to program a fair bit, but...\n\n\\*goes to read up on reading the stream\\*\n\nOkay, I\u0027ve come to believe this *is* compiler specific behavior; I recall dealing with \u0022garbage\u0022 on the input stream in the past (which means that functions like std::cin.get() could read a character and exit. But g\u002B\u002B seems to just dump keyboard info into the output buffer (I guess expecting people to clear the buffer was too much effort)... and also treat get like \u0022getline\u0022, expecting a carriage return for who knows what reason.\n\nIn theory, what should have happened is you could check if the stream was std::cin.eof which would indicate there was nothing on the stream, or if there was read a single character (which, given an input is available, wouldn\u0027t pause the program)\n\n\\*Technically speaking, the console / terminal that you\u0027re working in has a fully operational keyboard buffer; istream is suppose to read this. You can directly read it using Microsoft Windows Libraries ( [https://msdn.microsoft.com/en-us/library/windows/desktop/ms683175(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683175%28v=vs.85%29.aspx) ) but you really shouldn\u0027t need to go that far JUST to read the exact same buffer that istream is interfacing with.\n\n**Edited \u003Ctime datetime=\u00222015-04-02T00:42:57Z\u0022 title=\u002204/02/2015 12:42  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 2, 2015\u003C/time\u003E by Fel**"}]}