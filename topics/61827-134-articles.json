{"TopicId":61827,"ForumId":34,"TopicTitle":"[1.3] kOS Scriptable Autopilot System v1.1.3.0","CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-02-01T16:40:58Z","PageNum":134,"Articles":[{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-12T09:27:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TDW\u0022 data-cite=\u0022TDW\u0022\u003E\u003Cdiv\u003EThere is a way to get a combined value for drag and lift. \u003Cp\u003EYou use:\u003C/p\u003E\u003Cp\u003E \u003Cstrong\u003Etotal force = mass * acceleration\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Etotal force = engine thrust \u002B force due to gravity \u002B lift\u0026amp;drag\u003C/p\u003E\u003Cp\u003Ethis gives\u003C/p\u003E\u003Cp\u003Elift\u0026amp;drag = mass * (acceleration - gravity) - thrust\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is actually an approximation and is only valid when mass is constant. The actual definition is \u003Cstrong\u003E\u00C3\u017D\u00C2\u00A3F\u003C/strong\u003E = d\u003Cstrong\u003Ep\u003C/strong\u003E/dt. In a situation with varying mass such as a rocket, d\u003Cstrong\u003Ep\u003C/strong\u003E/dt = m(d\u003Cstrong\u003Ev\u003C/strong\u003E/dt) \u002B (dm/dt)\u003Cstrong\u003Ev\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003EThus \u003Cstrong\u003E\u00C3\u017D\u00C2\u00A3F\u003C/strong\u003E = (instantaneous mass)\u003Cstrong\u003E(acceleration)\u003C/strong\u003E \u002B (mass flow rate)\u003Cstrong\u003E(instantaneous velocity)\u003C/strong\u003E = (engine thrust) \u002B (instantaneous mass)\u003Cstrong\u003E(gravity)\u003C/strong\u003E \u002B \u003Cstrong\u003E(lift)\u003C/strong\u003E \u002B \u003Cstrong\u003E(drag)\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003EThus \u003Cstrong\u003E(Lift)\u003C/strong\u003E \u002B \u003Cstrong\u003E(Drag)\u003C/strong\u003E = (instantaneous mass)\u003Cstrong\u003E(acceleration)\u003C/strong\u003E \u002B (mass flow rate)\u003Cstrong\u003E(velocity)\u003C/strong\u003E - (engine thrust) - (instantaneous mass)\u003Cstrong\u003E(Gravity)\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003EOne can assume lift to be \u003Cstrong\u003E0\u003C/strong\u003E, since rockets are typically fly without wings and with no sideslip angle to generate body lift.\u003C/p\u003E\u003Cp\u003EThus \u003Cstrong\u003E(Drag)\u003C/strong\u003E = (instantaneous mass)\u003Cstrong\u003E(acceleration)\u003C/strong\u003E \u002B (mass flow rate)\u003Cstrong\u003E(velocity)\u003C/strong\u003E - \u003Cstrong\u003E(engine thrust)\u003C/strong\u003E - (instantaneous mass)\u003Cstrong\u003E(Gravity)\u003C/strong\u003E. \u003C/p\u003E\u003Cp\u003EAnd Thus \u003Cstrong\u003E(Drag)\u003C/strong\u003E = (instantaneous mass)\u003Cstrong\u003E(acceleration - gravity)\u003C/strong\u003E - \u003Cstrong\u003E(engine thrust)\u003C/strong\u003E \u002B (mass flow rate)\u003Cstrong\u003E(velocity)\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003E(Bolded values are vectors, just for my own bookkeeping. Might also be helpful for anyone who needs to calculate vector drag.)\u003C/p\u003E\u003Cp\u003EThankfully, since the aero update, mass flow rate through an engine is constant for any given throttle value, so that simplifies things a little bit. Mass flow rate = (Thrust)/(Specific Impulse)(g), where g = 9.802m/s^2 \u003Cstrong\u003Ealways.\u003C/strong\u003E The ratio of thrust to specific impulse is constant, so you can just plug in the sea level thrust and ISP numbers to calculate this. Or the vaccum numbers, those will work too. Thus to calculate this, we get something like:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003EISP = \u0026lt;someValue\u0026gt; //You\u0027ll need to specify this yourself unless you want to grab engines from the list() function and pull the ISP from that. (Hint: it\u0027s easier to just plug this one in.)\u003Cbr\u003E\u003Cbr\u003EmDot is vessel:maxthrustat(1)/(ISP*9.802) //Note that thrust used is sea level thrust. Use corresponding ISP value.\u003Cbr\u003E\u003Cbr\u003Efunction drag\u003Cbr\u003E{\u003Cbr\u003E    local drag is ship:mass*(ship:acc:mag - ship:grav:mag/9.802) - vessel:maxthrustat(vessel:pres) \u002B mDot*ship:velocity:mag. //Drag calculated is scalar and not vector since drag /should/ always be oriented opposite ship:up. If you need vector drag you can do that yourself.\u003Cbr\u003E    return drag.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd you can call the drag() function as needed.\u003C/p\u003E\u003Cp\u003EAnd to answer your question Qigon; yes, thrust is technically a vector, though it is usually convenient to treat it like a scalar since it is (almost) always pointing through the center of mass of the rocket.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-12T09:32:30Z\u0022 title=\u002207/12/2015 09:32  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 12, 2015\u003C/time\u003E by VFB1210\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Snillum101","CreatedById":34419,"CreatedDateTime":"2015-07-12T10:40:21Z","Content":"\n\u003Cp\u003EI\u0027ve been having a lot of fun writing my own launch script for this plugin \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EMy goal has been to be able to write a script that works for all rockets of all shapes and sizes without having to input different numbers to the code. I want to be able to just run the launch program and go.\u003C/p\u003E\u003Cp\u003EEverything works well. I even managed to get it to detect solid fuel boosters and stage accordingly (see script below). Full disclosure, this is heavily based off of the first tutorial script on the KOS documentation site as well as a few other scripts I found on the web.\u003C/p\u003E\u003Cp\u003EMy problem is that no matter what I try I can\u0027t figure out how to get the script to recognise if the ship has any liquid fuelled boosters. I thought I could write something to work out when the first stage lost some thrust but I could not get it to work. Bearing in mind I would have liked to make this a one size fits all script \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003ECheers.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E//My First Launch Script\u003C/p\u003E\u003Cp\u003E//Initialise variables.\u003C/p\u003E\u003Cp\u003Eset targetApoapsis to 100000.\u003C/p\u003E\u003Cp\u003Eset targetPeriapsis to 100000.\u003C/p\u003E\u003Cp\u003Eset TVAL to 1.0.\u003C/p\u003E\u003Cp\u003Eset stageLF to 0.\u003C/p\u003E\u003Cp\u003Eset stageLFBoost to 0.\u003C/p\u003E\u003Cp\u003Eset actionInt to 0.\u003C/p\u003E\u003Cp\u003Eset messageInt to 0.\u003C/p\u003E\u003Cp\u003Eif SHIP:SOLIDFUEL \u0026gt; 1000 {\u003C/p\u003E\u003Cp\u003E set stageSF to 1.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003Eelse {\u003C/p\u003E\u003Cp\u003E set stageSF to 0.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003Eif ship:altitude \u0026gt; 70000 { //Abort script if run in orbit/out of atmo.\u003C/p\u003E\u003Cp\u003E set runMode to 10.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E//Prep ship for launch.\u003C/p\u003E\u003Cp\u003EclearScreen.\u003C/p\u003E\u003Cp\u003Ewait 1.\u003C/p\u003E\u003Cp\u003Eprint \u0022Launch sequence initialised, beginning systems check...\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Ewait 1.5.\u003C/p\u003E\u003Cp\u003ESAS on.\u003C/p\u003E\u003Cp\u003Ewait 1.5.\u003C/p\u003E\u003Cp\u003ESAS off.\u003C/p\u003E\u003Cp\u003Eprint \u0022Guidance - GO.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Ewait 1.5.\u003C/p\u003E\u003Cp\u003Elock throttle to 0.0.\u003C/p\u003E\u003Cp\u003Eprint \u0022LF Booster - GO.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Eif stageSF = 1 {\u003C/p\u003E\u003Cp\u003E wait 1.5.\u003C/p\u003E\u003Cp\u003E print \u0022SF Booster - GO.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003Ewait 1.5.\u003C/p\u003E\u003Cp\u003EGEAR off.\u003C/p\u003E\u003Cp\u003Eprint \u0022Landing - GO.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Ewait 1.5.\u003C/p\u003E\u003Cp\u003Elights on.\u003C/p\u003E\u003Cp\u003Eprint \u0022Recovery - GO.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Ewait 2.\u003C/p\u003E\u003Cp\u003Eprint \u0022We are GO for launch.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Ewait 3.\u003C/p\u003E\u003Cp\u003EclearScreen.\u003C/p\u003E\u003Cp\u003Eprint \u0022T minus 10 seconds.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003EFROM {local countdown is 10.} UNTIL countdown = 3 STEP {SET countdown to countdown -1.} DO {PRINT \u0022- \u0022 \u002B countdown.\u003C/p\u003E\u003Cp\u003Ewait 1. //Pauses the script here for 1 second\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Eprint \u0022- 3\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003EPRINT \u0022Engine Ignition Sequence.\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003EWAIT 1.\u003C/p\u003E\u003Cp\u003EPRINT \u0022- 2\u0022.\u003C/p\u003E\u003Cp\u003ELOCK THROTTLE TO TVAL. //1.0 is the max, 0.0 is idle.\u003C/p\u003E\u003Cp\u003ELOCK STEERING TO HEADING (0,90).\u003C/p\u003E\u003Cp\u003EWAIT 1.\u003C/p\u003E\u003Cp\u003EPRINT \u0022- 1\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003EWAIT 1. //Give throttle time to adjust.\u003C/p\u003E\u003Cp\u003ESTAGE.\u003C/p\u003E\u003Cp\u003EWAIT 1.5.\u003C/p\u003E\u003Cp\u003EPRINT \u0022Lift-off!\u0022.\u003C/p\u003E\u003Cp\u003Eprint \u0022 \u0022.\u003C/p\u003E\u003Cp\u003Eset runMode to 1.\u003C/p\u003E\u003Cp\u003Eset mecoInt to 0.\u003C/p\u003E\u003Cp\u003Euntil runMode = 0 {\u003C/p\u003E\u003Cp\u003E if runMode = 1 AND ship:altitude \u0026gt;= 500 { //Initial ascent \u0026amp; roll program.\u003C/p\u003E\u003Cp\u003E print \u0022Beginning roll program.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E lock steering to heading (90,90).\u003C/p\u003E\u003Cp\u003E set runMode to 2.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if runMode = 2 { //start of gravity turn\u003C/p\u003E\u003Cp\u003E if SHIP:ALTITUDE \u0026gt;= 1500 {\u003C/p\u003E\u003Cp\u003E print \u0022Beginning gravity turn.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set runMode to 3.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if runMode = 3 {\u003C/p\u003E\u003Cp\u003E set targetPitch to max(5, 90 * (1 - SHIP:ALTITUDE / 42000)).\u003C/p\u003E\u003Cp\u003E lock steering to heading (90,targetPitch). \u003C/p\u003E\u003Cp\u003E if SHIP:ALTITUDE \u0026gt;= 5000 AND stageLF = 0 {\u003C/p\u003E\u003Cp\u003E set TVAL to max(0.75, 1 * (1 - SHIP:ALTITUDE / 60000)).\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if SHIP:ALTITUDE \u0026gt; 20000 AND stageLF = 0 {\u003C/p\u003E\u003Cp\u003E set TVAL to 0.75.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if SHIP:ALTITUDE \u0026gt; 32000 AND actionInt = 0 {\u003C/p\u003E\u003Cp\u003E AG1 on.\u003C/p\u003E\u003Cp\u003E print \u0022Tower check!\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set actionInt to 1.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if SHIP:APOAPSIS \u0026gt;= targetApoapsis {\u003C/p\u003E\u003Cp\u003E set runMode to 4.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if runMode = 4 {\u003C/p\u003E\u003Cp\u003E lock steering to heading (90,3).\u003C/p\u003E\u003Cp\u003E set TVAL to 0.\u003C/p\u003E\u003Cp\u003E if (SHIP:ALTITUDE \u0026gt; 70100) AND (ETA:APOAPSIS \u0026gt; 60) AND (VERTICALSPEED \u0026gt; 0) {\u003C/p\u003E\u003Cp\u003E if WARP = 0 {\u003C/p\u003E\u003Cp\u003E unlock steering.\u003C/p\u003E\u003Cp\u003E SAS on.\u003C/p\u003E\u003Cp\u003E wait 1.5.\u003C/p\u003E\u003Cp\u003E set WARPMODE to \u0022RAILS\u0022.\u003C/p\u003E\u003Cp\u003E wait 0.5.\u003C/p\u003E\u003Cp\u003E set WARP to 3.\u003C/p\u003E\u003Cp\u003E set messageInt to 1.\u003C/p\u003E\u003Cp\u003E if messageInt = 1 {\u003C/p\u003E\u003Cp\u003E print \u0022Warping to apoapsis.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set messageInt to 0.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if ETA:APOAPSIS \u0026lt; 60 {\u003C/p\u003E\u003Cp\u003E set WARP to 0.\u003C/p\u003E\u003Cp\u003E SAS off.\u003C/p\u003E\u003Cp\u003E wait 0.5.\u003C/p\u003E\u003Cp\u003E lock steering to heading (90,3).\u003C/p\u003E\u003Cp\u003E set runMode to 5.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if runMode = 5 {\u003C/p\u003E\u003Cp\u003E if (ETA:APOAPSIS \u0026lt; 5) OR (VERTICALSPEED \u0026lt; 0) {\u003C/p\u003E\u003Cp\u003E set TVAL to 1.\u003C/p\u003E\u003Cp\u003E if messageInt = 2 {\u003C/p\u003E\u003Cp\u003E print \u0022Beginning CIRC manoeuvre.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if (SHIP:PERIAPSIS \u0026gt; targetPeriapsis) OR (SHIP:PERIAPSIS \u0026gt; targetApoapsis * 0.95) {\u003C/p\u003E\u003Cp\u003E set TVAL to 0.\u003C/p\u003E\u003Cp\u003E set runMode to 10.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E else if runMode = 10 {\u003C/p\u003E\u003Cp\u003E set TVAL to 0.\u003C/p\u003E\u003Cp\u003E SAS on.\u003C/p\u003E\u003Cp\u003E unlock steering.\u003C/p\u003E\u003Cp\u003E wait 2.\u003C/p\u003E\u003Cp\u003E clearScreen.\u003C/p\u003E\u003Cp\u003E print \u0022Orbit complete, systems released, manual control restored.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set runMode to 0.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E //Staging \u0026amp; Throttle control.\u003C/p\u003E\u003Cp\u003E if stage:kerosene \u0026lt; 1.0 AND stageLF = 0 {\u003C/p\u003E\u003Cp\u003E wait 0.5.\u003C/p\u003E\u003Cp\u003E stage.\u003C/p\u003E\u003Cp\u003E print \u0022First stage separation confirmed.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set TVAL to 1.\u003C/p\u003E\u003Cp\u003E wait 2.5.\u003C/p\u003E\u003Cp\u003E stage.\u003C/p\u003E\u003Cp\u003E set stageLF to 1.\u003C/p\u003E\u003Cp\u003E print \u0022Second stage ignition.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E } \u003C/p\u003E\u003Cp\u003E if stage:SOLIDFUEL \u0026lt; 1.0 and stageSF = 1 {\u003C/p\u003E\u003Cp\u003E wait 0.5.\u003C/p\u003E\u003Cp\u003E stage.\u003C/p\u003E\u003Cp\u003E print \u0022Solid booster separation confirmed.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set stageSF to 2.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if TVAL = 0 AND mecoInt = 0 {\u003C/p\u003E\u003Cp\u003E PRINT \u0022M.E.C.O.\u0022.\u003C/p\u003E\u003Cp\u003E print \u0022 \u0022.\u003C/p\u003E\u003Cp\u003E set mecoInt to 1.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if TVAL \u0026gt; 0 AND mecoInt = 1 {\u003C/p\u003E\u003Cp\u003E set mecoInt to 0.\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E set finalTVAL to TVAL.\u003C/p\u003E\u003Cp\u003E lock throttle to finalTVAL.\u003C/p\u003E\u003Cp\u003E //wait 0.1.\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"TDW","CreatedById":120346,"CreatedDateTime":"2015-07-12T12:16:34Z","Content":"\n\u003Cp\u003E@VFB1210\u003C/p\u003E\u003Cp\u003EWas not sure if ksp took into account mass loss during a physics tick or just assumed constant mass during a tick (for optimization as it was doing the calculation so frequently). I always seem to lose out (dV wise) under phys-warp, I assumed this was because i was carrying the mass for longer.\u003C/p\u003E\u003Cp\u003EIf it doesn\u0027t then assuming this as this is being done live (hopefully during a single physics tick) then mass is constant, otherwise yes you are right it could do with taking it into account.\u003C/p\u003E\u003Cp\u003EOn the subject of the lift always being 0. I was planing to provide a combined vector (or a list of the 2) as the result so that people using it for planes (or vessels with significant body lift) would not have to run 2 separate (but almost identical) functions for the vectors, since the calculation only differs in the final stage.\u003C/p\u003E\u003Cp\u003EEdit:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Snillum101\u0022 data-cite=\u0022Snillum101\u0022\u003E\u003Cdiv\u003EMy problem is that no matter what I try I can\u0027t figure out how to get the script to recognise if the ship has any liquid fuelled boosters.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are a number of ways to do it.\u003C/p\u003E\u003Cp\u003EYou can look at stage:liquidfuel in the same way that you are using stage:solidfuel . but this wont work for asparagus staging.\u003C/p\u003E\u003Cp\u003EYou can also look at drops in maxthrust. (this means that an engine has shut down) so\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//at the start of the script.\u003Cbr\u003Eset old_maxthrust to 0.\u003Cbr\u003E\u003Cbr\u003E// staging logic\u003Cbr\u003EIf round(ship:maxthrust,2) \u0026gt; old_maxthrust {           // The rounding is done to prevent accidental staging due to floating point errors / tiny differences in maxthrust\u003Cbr\u003E set old_maxthrust to round(ship:maxthrust,2).\u003Cbr\u003E} else if round(ship:maxthrust,2) \u0026lt; old_maxthrust{\u003Cbr\u003E stage.\u003Cbr\u003E wait 0.1.\u003Cbr\u003E set old_maxthrust to round(ship:maxthrust,2).\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOne advantage of this is that it does not need to differentiate between liquid or solid engines and it works for asparagus staiging. In the above form it requires the engines to be in the same stage as the decouplers, this can be changed but the code becomes more complex.\u003C/p\u003E\u003Cp\u003EOne major thing this cant handle is drop tanks (eg the big orange tank on the space shuttle).\u003C/p\u003E\u003Cp\u003EAn older method I used for this was to repeatedly re-list the engines and check for flame-outs but that has the same disadvantages as the maxthrust method and requires constant refreshing of a list.\u003C/p\u003E\u003Cp\u003EIf you need to handle drop tanks. it is possible to have kOS navigate the part tree and look at the state of fuel tanks on the other side of decouplers, activating the decoupler if all the fuel is gone.\u003C/p\u003E\u003Cp\u003EEdit 3: (someone else post please so I don\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t have to keep doing this with edits)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022VFB1210\u0022 data-cite=\u0022VFB1210\u0022\u003E\u003Cdiv\u003EDrag calculated is scalar and not vector since drag /should/ always be oriented opposite ship:up.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDrag would always be opposite the direction of travel (prograde) if you calculate it using ship:facing then it would show less drag when pancaking :-P\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-12T14:22:22Z\u0022 title=\u002207/12/2015 02:22  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 12, 2015\u003C/time\u003E by TDW\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-12T13:05:10Z","Content":"\n\u003Cp\u003E^The only issue I see with that is that it would be extremely difficult to calculate lift from wings. Body lift is easy enough, as it is essentially just the component of drag working opposite the direction of gravity.\u003C/p\u003E\u003Cp\u003EIn fact, looking back at the code now, getting vector drag is literally as simple as dropping the :mag tags and multiplying the thrust by the unit vector along ship:up. For some reason I decided it would be more complicated than that and got lazy.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EISP is \u0026lt;someValue\u0026gt; //You\u0027ll need to specify this yourself unless you want to grab engines from the list() function and pull the ISP from that. (Hint: it\u0027s easier to just plug this one in.)\u003Cbr\u003E\u003Cbr\u003EmDot is vessel:maxthrustat(1)/(ISP*9.802) //Note that thrust used is sea level thrust. Use corresponding ISP value.\u003Cbr\u003E\u003Cbr\u003Efunction drag\u003Cbr\u003E{\u003Cbr\u003E    local drag is ship:mass*(ship:acc - ship:grav/9.802) - vessel:maxthrustat(vessel:pres)*ship:up \u002B mDot*ship:velocity.\u003Cbr\u003E    return drag.\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efunction bodyLift\u003Cbr\u003E{\u003Cbr\u003E    local localUp is -kerbin:position:normalized. //Kerbin:position returns a vector from the ship to the center of Kerbin, constituting the local \u0022down\u0022 direction. Opposite of this is the local \u0022up.\u0022 Key here is that it points in the exact opposite direction of gravity.\u003Cbr\u003E    local bodyLift is vdot(drag(),localUp). //Calculate component of of drag working against gravity-aka body lift.\u003Cbr\u003E\u003Cbr\u003E    return localUp*bodyLift. //Project onto localUp.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOf course, this wouldn\u0027t \u003Cem\u003Equite\u003C/em\u003E work in a situation where the body is generating significant amounts of lift via the bernoulli effect, but it should be at least somewhat useful.\u003C/p\u003E\n"},{"CreatedByName":"TDW","CreatedById":120346,"CreatedDateTime":"2015-07-12T18:12:38Z","Content":"\n\u003Cp\u003E@VFB1210\u003C/p\u003E\u003Cp\u003EOk I think i am missing something here. I have:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u00C3\u017D\u00C2\u00A3F = F[SUB]1[/SUB] \u002B F[SUB]2[/SUB] \u002B F[SUB]3[/SUB]\u003Cbr\u003E\u00C3\u017D\u00C2\u00A3F = M * a \u002B (dm/dt)v\u003Cbr\u003E\u003Cbr\u003EWhere:\u003Cbr\u003EF[SUB]1 [/SUB]= Thrust\u003Cbr\u003EF[SUB]2[/SUB] = force due to gravity = M * grav \u002B (dm/dt)v[SUB]vertical[/SUB] // don\u0027t the changing mass apply to the force due to gravity too.\u003Cbr\u003EF[SUB]3[/SUB] = Drag and lift\u003Cbr\u003E\u003Cbr\u003ERearranged to:\u003Cbr\u003EF[SUB]3[/SUB] = M * a \u002B (dm/dt)v - F[SUB]1[/SUB] - M * grav - (dm/dt)v[SUB]vertical  [/SUB]|  (dm/dt)v - (dm/dt)v[SUB]vertical[/SUB] = (dm/dt)v[SUB]horizontal\u003Cbr\u003E[/SUB]F[SUB]3[/SUB] = M(a-grav) \u002B (dm/dt)v[SUB]horizontal[/SUB] - F[SUB]1[/SUB]\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn code this gives\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efunction lift_drag {\u003Cbr\u003E local M is ship:mass.\u003Cbr\u003E local a is ship:sensors:acc.\u003Cbr\u003E local grav is -(body:mu/(body:radius\u002Bship:altitude)^2)*up:vector. // negavive magnitude to up vector is down.\u003Cbr\u003E local thrust is 0.     // calculated by queriying the engines\u003Cbr\u003E local fuel_flow is 0.// calculated by queriying the engines\u003Cbr\u003E local eng_list is list().\u003Cbr\u003E list engines in eng_list.\u003Cbr\u003E for eng in eng_list {\u003Cbr\u003E  set thrust to thrust\u002Beng:thrust.\u003Cbr\u003E  set fuel_flow to fuel_flow \u002B eng:fuelflow.\u003Cbr\u003E }.\u003Cbr\u003E local resultant is M * ( a - grav ) \u002B fuel_flow * ship:vleocity:surface - thrust * ship:facing:vector.\u003Cbr\u003E return resultant.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ebut I am getting some odd reasults\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-12T20:17:04Z\u0022 title=\u002207/12/2015 08:17  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 12, 2015\u003C/time\u003E by TDW\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-12T21:35:17Z","Content":"\n\u003Cp\u003EWhat exactly are odd results? I haven\u0027t had a chance to play with either of our scripts myself.\u003C/p\u003E\n"},{"CreatedByName":"TDW","CreatedById":120346,"CreatedDateTime":"2015-07-12T22:08:56Z","Content":"\n\u003Cp\u003EI was getting readings for drag in space, that turned out to be due to the rocket flexing and the accelerometer being on the command pod (distant from the COM).\u003C/p\u003E\u003Cp\u003EBut i have also been getting long periods of time (not just blips caused by staging engines) where the drag is reading as pulling the rocket upwards.\u003C/p\u003E\n"},{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-12T23:04:11Z","Content":"\n\u003Cp\u003EHow strange. I\u0027ll have to look over the math once again and do a couple of test flights once I get home from work. Also, if I\u0027m not mistaken, the ship:acceleration tag is actually a thing in kOS, so you should be able to use that rather than relying on an accelerometer.\u003C/p\u003E\u003Cp\u003EEdit: A very preliminary guess without having the chance to look anything over would be that there may be a unit mismatch somewhere, an overlooked conversion factor or something.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-12T23:12:05Z\u0022 title=\u002207/12/2015 11:12  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 12, 2015\u003C/time\u003E by VFB1210\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"TDW","CreatedById":120346,"CreatedDateTime":"2015-07-13T00:05:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022VFB1210\u0022 data-cite=\u0022VFB1210\u0022\u003E\u003Cdiv\u003EA very preliminary guess without having the chance to look anything over would be that there may be a unit mismatch somewhere, an overlooked conversion factor or something.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat was my initial thought too but it would have to be on something very small at constant speed (or there are 2 mismatched units that cancel) as i took a plane out and flew it up to max speed. It gave the same value for drag (in kN) as the engine thrust (kN) when at level flight and constant speed.\u003C/p\u003E\n"},{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-13T00:14:26Z","Content":"\n\u003Cp\u003EIf you are flying level at a constant speed, the net force on the plane should be zero, and drag should be equal to thrust. That makes sense. Similarly, thrust will be greater than drag when speeding up, and less than drag when slowing down.\u003C/p\u003E\n"},{"CreatedByName":"SSMI","CreatedById":146486,"CreatedDateTime":"2015-07-13T00:15:14Z","Content":"\n\u003Cp\u003EDoes KOS control ships in the background? \u003C/p\u003E\u003Cp\u003EThe reason I ask is because I would like to automate ore trips from minmus to orbit.\u003C/p\u003E\n"},{"CreatedByName":"VFB1210","CreatedById":54159,"CreatedDateTime":"2015-07-13T00:25:04Z","Content":"\n\u003Cp\u003EI\u0027ve seen other people do it, (e.g. F9 flyback booster) but I could never get it to work, and the ship has to be within physics range. So an ore ship to Minmus would probably be out of the qurstion.\u003C/p\u003E\n"},{"CreatedByName":"SSMI","CreatedById":146486,"CreatedDateTime":"2015-07-13T00:41:18Z","Content":"\n\u003Cp\u003EThat\u0027s what I figured but thought I would ask.\u003C/p\u003E\n"},{"CreatedByName":"Lookerksy","CreatedById":117170,"CreatedDateTime":"2015-07-13T05:16:20Z","Content":"\n\u003Cp\u003EHi. I start to study kOS.\u003C/p\u003E\u003Cp\u003EI try to use kOS_0.17.3 with KSP_1.0.4 at Windows7x64, but I meet some problem.\u003C/p\u003E\u003Cp\u003ETigger Commands, like WHEN/THEN and ON. They don\u0027t work.\u003C/p\u003E\u003Cp\u003EBut other commands seems to work well.\u003C/p\u003E\u003Cp\u003EFor explame, I code:\u003C/p\u003E\u003Cp\u003Eset a to 1.\u003C/p\u003E\u003Cp\u003Euntil FALSE {\u003C/p\u003E\u003Cp\u003E set a to a\u002B1.\u003C/p\u003E\u003Cp\u003E print \u0022normal\u0022.}\u003C/p\u003E\u003Cp\u003Ewhen a\u0026gt;5 then{\u003C/p\u003E\u003Cp\u003E print \u0022TIGGER\u0022.}\u003C/p\u003E\u003Cp\u003EI only get \u0022normal\u0022 without \u0022TIGGER\u0022.\u003C/p\u003E\u003Cp\u003EI even copy sample code from \u003Ca href=\u0022http://ksp-kos.github.io/KOS_DOC/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ksp-kos.github.io/KOS_DOC/\u003C/a\u003E and RUN it. \u003C/p\u003E\u003Cp\u003EBut it still didn\u0027t work.\u003C/p\u003E\u003Cp\u003EChould you tell me what shall I do?\u003C/p\u003E\n"},{"CreatedByName":"Snillum101","CreatedById":34419,"CreatedDateTime":"2015-07-13T09:21:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TDW\u0022 data-cite=\u0022TDW\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThere are a number of ways to do it.\u003C/p\u003E\u003Cp\u003EYou can look at stage:liquidfuel in the same way that you are using stage:solidfuel . but this wont work for asparagus staging.\u003C/p\u003E\u003Cp\u003EYou can also look at drops in maxthrust. (this means that an engine has shut down) so\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//at the start of the script.\u003Cbr\u003Eset old_maxthrust to 0.\u003Cbr\u003E\u003Cbr\u003E// staging logic\u003Cbr\u003EIf round(ship:maxthrust,2) \u0026gt; old_maxthrust {           // The rounding is done to prevent accidental staging due to floating point errors / tiny differences in maxthrust\u003Cbr\u003E set old_maxthrust to round(ship:maxthrust,2).\u003Cbr\u003E} else if round(ship:maxthrust,2) \u0026lt; old_maxthrust{\u003Cbr\u003E stage.\u003Cbr\u003E wait 0.1.\u003Cbr\u003E set old_maxthrust to round(ship:maxthrust,2).\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOne advantage of this is that it does not need to differentiate between liquid or solid engines and it works for asparagus staiging. In the above form it requires the engines to be in the same stage as the decouplers, this can be changed but the code becomes more complex.\u003C/p\u003E\u003Cp\u003EOne major thing this cant handle is drop tanks (eg the big orange tank on the space shuttle).\u003C/p\u003E\u003Cp\u003EAn older method I used for this was to repeatedly re-list the engines and check for flame-outs but that has the same disadvantages as the maxthrust method and requires constant refreshing of a list.\u003C/p\u003E\u003Cp\u003EIf you need to handle drop tanks. it is possible to have kOS navigate the part tree and look at the state of fuel tanks on the other side of decouplers, activating the decoupler if all the fuel is gone.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks! worked like a charm. that method is definitely going to come in handy.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-13T09:24:58Z\u0022 title=\u002207/13/2015 09:24  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 13, 2015\u003C/time\u003E by Snillum101\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"TDW","CreatedById":120346,"CreatedDateTime":"2015-07-13T12:18:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lookerksy\u0022 data-cite=\u0022Lookerksy\u0022\u003E\u003Cdiv\u003ETigger Commands, like WHEN/THEN and ON. They don\u0027t work.\u003Cp\u003EBut other commands seems to work well.\u003C/p\u003E\u003Cp\u003EFor explame, I code:\u003C/p\u003E\u003Cp\u003Eset a to 1.\u003C/p\u003E\u003Cp\u003Euntil FALSE {\u003C/p\u003E\u003Cp\u003E set a to a\u002B1.\u003C/p\u003E\u003Cp\u003E print \u0022normal\u0022.}\u003C/p\u003E\u003Cp\u003Ewhen a\u0026gt;5 then{\u003C/p\u003E\u003Cp\u003E print \u0022TIGGER\u0022.}\u003C/p\u003E\u003Cp\u003EI only get \u0022normal\u0022 without \u0022TIGGER\u0022.\u003C/p\u003E\u003Cp\u003EI even copy sample code from \u003Ca href=\u0022http://ksp-kos.github.io/KOS_DOC/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ksp-kos.github.io/KOS_DOC/\u003C/a\u003E and RUN it. \u003C/p\u003E\u003Cp\u003EBut it still didn\u0027t work.\u003C/p\u003E\u003Cp\u003EChould you tell me what shall I do?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EkOS runs the code from top to bottom. Until false { } is an infinite loop as such the trigger is never created as in your script it would do that after completing the loop.\u003C/p\u003E\u003Cp\u003EMove the when trigger above the loop and it should work\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-07-13T13:01:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TDW\u0022 data-cite=\u0022TDW\u0022\u003E\u003Cdiv\u003EkOS runs the code from top to bottom. Until false { } is an infinite loop as such the trigger is never created as in your script it would do that after completing the loop.\u003Cp\u003EMove the when trigger above the loop and it should work\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo add to this: triggers don\u0027t actually get turned on until they\u0027re mentioned in the code.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset x to 1.\u003Cbr\u003Eprint \u0022one\u0022.\u003Cbr\u003Ewait 1.\u003Cbr\u003Eprint \u0022two\u0022.\u003Cbr\u003Ewait 1.\u003Cbr\u003Ewhen x = 1 then {\u003Cbr\u003E  print \u0022x is one\u0022. \u003Cbr\u003E}\u003Cbr\u003Eprint \u0022three\u0022.\u003Cbr\u003Ewait 1.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWill print something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eone\u003Cbr\u003Etwo\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ethree\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003Ex is one\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe trigger that prints \u0027x is one\u0027 doesn\u0027t really become active until the point in the program where it was mentioned.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-07-13T13:34:08Z","Content":"\n\u003Cp\u003EI finally decided to fix a time for my first episode of twitch kOS demos and stop putting it off.\u003C/p\u003E\u003Cp\u003E(This is what I first talked about here: \u003Ca href=\u0022https://www.reddit.com/r/Kos/comments/39qgjn/any_interest_in_a_regularly_scheduled_kos_live/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.reddit.com/r/Kos/comments/39qgjn/any_interest_in_a_regularly_scheduled_kos_live/\u003C/a\u003E )\u003C/p\u003E\u003Cp\u003ETIME IS GIVEN IN TIMEZONE \u003Cstrong\u003EUTC-5\u003C/strong\u003E (US CDT, UTC-6, \u002B1 for Daylight Savings). Please adjust accordingly for your location.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EBROADCAST DETAILS:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E \u003Cstrong\u003Etwitch channel to watch\u003C/strong\u003E: \u003Ca href=\u0022http://www.twitch.tv/dunbaratu/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.twitch.tv/dunbaratu/\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003Estart time\u003C/strong\u003E: UTC-5 (US CDT: UTC-6 \u002B 1 for daylight savings): 7PM on Tuesday night, 14 July 2015\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003Eduration\u003C/strong\u003E: between 2 and 3 hours, depending on how fast we go thought it*\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBe gentle. I\u0027ve not done twitch much before.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESubject\u003C/strong\u003E: Rescue a stranded orbiting Kerbal with kOS. (Like the career mode mission, but demo\u0027ed in sandbox for debugging reasons.).\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESub-steps\u003C/strong\u003E: Focus on inclination matching and rendezvous prediction. Less focus on the initial ascent and final re-entry. (Those topics are often covered well by others. I may start from already being in orbit.)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFormat\u003C/strong\u003E: I am already solving the problem in my own code ahead of time, but intend to re-type it all in and explain as the stream goes on. You can stop me as I do so if you need a thing explained better, or have a better idea. The stream will be a mixture of code typing and crude hand-drawn math formula derivation, and running the code.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-13T19:38:32Z\u0022 title=\u002207/13/2015 07:38  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 13, 2015\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"kcs123","CreatedById":127158,"CreatedDateTime":"2015-07-13T16:29:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI finally decided to fix a time for my first episode of twitch kOS demos and stop putting it off.\u003Cp\u003E(This is what I first talked about here: \u003Ca href=\u0022https://www.reddit.com/r/Kos/comments/39qgjn/any_interest_in_a_regularly_scheduled_kos_live/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.reddit.com/r/Kos/comments/39qgjn/any_interest_in_a_regularly_scheduled_kos_live/\u003C/a\u003E )\u003C/p\u003E\u003Cp\u003ETIME IS GIVEN IN TIMEZONE \u003Cstrong\u003EUTC-6\u003C/strong\u003E (US Central Time Zone). Please adjust accordingly for your location.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EBROADCAST DETAILS:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E \u003Cstrong\u003Etwitch channel to watch\u003C/strong\u003E: \u003Ca href=\u0022http://www.twitch.tv/dunbaratu/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.twitch.tv/dunbaratu/\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003Estart time\u003C/strong\u003E: UTC-6: 7PM on Tuesday night, 14 July 2015\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003Eduration\u003C/strong\u003E: between 2 and 3 hours, depending on how fast we go thought it*\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBe gentle. I\u0027ve not done twitch much before.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESubject\u003C/strong\u003E: Rescue a stranded orbiting Kerbal with kOS. (Like the career mode mission, but demo\u0027ed in sandbox for debugging reasons.).\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESub-steps\u003C/strong\u003E: Focus on inclination matching and rendezvous prediction. Less focus on the initial ascent and final re-entry. (Those topics are often covered well by others. I may start from already being in orbit.)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFormat\u003C/strong\u003E: I am already solving the problem in my own code ahead of time, but intend to re-type it all in and explain as the stream goes on. You can stop me as I do so if you need a thing explained better, or have a better idea. The stream will be a mixture of code typing and crude hand-drawn math formula derivation, and running the code.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EJust double check that you have pressed \u0022record\u0022 button. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EFor us who can\u0027t watch live channel due to time zone difference. Thanks.\u003C/p\u003E\n"},{"CreatedByName":"ColKlonk","CreatedById":137078,"CreatedDateTime":"2015-07-13T19:16:32Z","Content":"\n\u003Cp\u003ESee what happens when you program it like that telescope,,,\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue2.gif\u0022 alt=\u0022:sticktongue:\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/DWAztJM.jpg\u0022 alt=\u0022DWAztJM.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m curious to why the SHIP:SURFACESPEED and SHIP:VERTICALSPEED are the same here, as the documentation says different ?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E CLEARSCREEN.\u003Cp\u003E PRINT \u0022H-SPEED:\u0022 \u002B SHIP:SURFACESPEED.\u003C/p\u003E\u003Cp\u003E PRINT \u0022V-SPEED:\u0022 \u002B SHIP:VERTICALSPEED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/wOBtz0x.jpg\u0022 alt=\u0022wOBtz0x.jpg\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-07-13T19:39:46Z","Content":"\n\u003Cp\u003EClarified timezone info on stream feed announcement. My timezone is listed as UTC-6 on most websites, but they failed to mention it\u0027s UTC-5 during daylight savings.\u003C/p\u003E\n"},{"CreatedByName":"ABZB","CreatedById":98947,"CreatedDateTime":"2015-07-13T20:53:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ColKlonk\u0022 data-cite=\u0022ColKlonk\u0022\u003E\u003Cdiv\u003ESee what happens when you program it like that telescope,,,\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue2.gif\u0022 alt=\u0022:sticktongue:\u0022\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/DWAztJM.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/DWAztJM.jpg\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m curious to why the SHIP:SURFACESPEED and SHIP:VERTICALSPEED are the same here, as the documentation says different ?\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/wOBtz0x.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/wOBtz0x.jpg\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThey are very slightly different there - the closeness makes sense. At the moment of your screencap, you are basically pointed (and moving) straight up - so your surface speed \u003Cem\u003Eis\u003C/em\u003E [mostly] your vertical speed - your horizontal velocity component is almost 0.\u003C/p\u003E\n"},{"CreatedByName":"Qigon","CreatedById":141819,"CreatedDateTime":"2015-07-14T01:58:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022VFB1210\u0022 data-cite=\u0022VFB1210\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThus \u003Cstrong\u003E\u00C3\u017D\u00C2\u00A3F\u003C/strong\u003E = (instantaneous mass)\u003Cstrong\u003E(acceleration)\u003C/strong\u003E \u002B (mass flow rate)\u003Cstrong\u003E(instantaneous velocity)\u003C/strong\u003E = (engine thrust) \u002B (instantaneous mass)\u003Cstrong\u003E(gravity)\u003C/strong\u003E \u002B \u003Cstrong\u003E(lift)\u003C/strong\u003E \u002B \u003Cstrong\u003E(drag)\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003E....\u003C/p\u003E\u003Cp\u003E where g = 9.802m/s^2 \u003Cstrong\u003Ealways.\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E...\u003C/p\u003E\u003Cp\u003EAnd to answer your question Qigon; yes, thrust is technically a vector, though it is usually convenient to treat it like a scalar since it is (almost) always pointing through the center of mass of the rocket.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENice piece of math here, thanks for the step by step. \u003C/p\u003E\u003Cp\u003EI never could imagine that mass flow would play here, but hey this is rocket science, where anything can happen in equations. Out of curiosity, what values did you get while flying? \u003C/p\u003E\u003Cp\u003ESilly question, doesn\u0027t g decrease with distance? or is it too small a difference? \u003C/p\u003E\u003Cp\u003EAbout thrust, my concern is whether kos thrust is a vector. Because of gimballing. From the too of my head, there\u0027s no engine with more than3 degrees in stock, no idea in other mods.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022VFB1210\u0022 data-cite=\u0022VFB1210\u0022\u003E\u003Cdiv\u003E^The only issue I see with that is that it would be extremely difficult to calculate lift from wings. Body lift is easy enough, as it is essentially just the component of drag working opposite the direction of gravity.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWould it make sense to compute lift as the component along vessel:top and real drag as the component along surface velocity? That way you\u0027ll be more accurate in Aero breaking and high g turns.\u003C/p\u003E\u003Cp\u003EI\u0027m too slow to keep up with you guys on this. Taking advantage of the momentum and steering the question in another direction, would you guys agree that terminal velocity is reached when the magnitude of drag equals mass times g, if we apply the above formulas?\u003C/p\u003E\n"},{"CreatedByName":"Lookerksy","CreatedById":117170,"CreatedDateTime":"2015-07-14T02:57:26Z","Content":"\n\u003Cp\u003EWow~~ These triggers are more useful than I thought. Thx!\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThanks for your reply! In the past, I thought triggers start to work at the beginning of program. So its position can be anywhere. But it\u0027s wrong! Now I realize triggers can do more than I thought~\u003C/p\u003E\n"},{"CreatedByName":"ColKlonk","CreatedById":137078,"CreatedDateTime":"2015-07-14T05:47:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ABZB\u0022 data-cite=\u0022ABZB\u0022\u003E\u003Cdiv\u003EThey are very slightly different there - the closeness makes sense. At the moment of your screencap, you are basically pointed (and moving) straight up - so your surface speed \u003Cem\u003Eis\u003C/em\u003E [mostly] your vertical speed - your horizontal velocity component is almost 0.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAccording to this.. that speed is not right - the horizontal speed should be close to Zero from the start, relative to the SOI body (Earth), and should remain close to zero until the rocket pitches over from the vertical.\u003C/p\u003E\u003Cp\u003EThe two speeds are almost identical up to a few x1000m ?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EVessel:SURFACESPEED[TABLE=class: docutils field-list]\u003Cp\u003E[TR=class: field-odd field]\u003C/p\u003E\u003Cp\u003E[TH=class: field-name]Type:[/TH]\u003C/p\u003E\u003Cp\u003E[TD=class: field-body]scalar (m/s)[/TD]\u003C/p\u003E\u003Cp\u003E[/TR]\u003C/p\u003E\u003Cp\u003E[TR=class: field-even field]\u003C/p\u003E\u003Cp\u003E[TH=class: field-name]Access:[/TH]\u003C/p\u003E\u003Cp\u003E[TD=class: field-body]Get only[/TD]\u003C/p\u003E\u003Cp\u003E[/TR]\u003C/p\u003E\u003Cp\u003E[/TABLE]\u003C/p\u003E\u003Cp\u003E How fast the ship is moving in the plane horizontal to the SOI body\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s sea level surface.\u003C/p\u003E\u003Cp\u003E \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-14T05:50:33Z\u0022 title=\u002207/14/2015 05:50  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 14, 2015\u003C/time\u003E by ColKlonk\u003C/strong\u003E\n\u003C/span\u003E\n"}]}