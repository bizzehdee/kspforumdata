{"TopicId":8070,"ForumId":15,"TopicTitle":"Cart Modelling Guidelines v1.34 \u002B Inter-Plugin Communication","CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-03-13T08:55:01Z","PageNum":1,"Articles":[{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-03-13T08:55:01Z","Content":"\n\u003Cp\u003EYou\u0027ve already seen [thread=7854]\u003Cstrong\u003E\u003Cem\u003EThe Cart\u003C/em\u003E\u003C/strong\u003E[/thread] addon, haven\u0027t you? Wanna make \u003Cem\u003Eyour own\u003C/em\u003E cart? There you go.\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_1\u0026gt;1. Basic Considerations\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_2\u0026gt;2. Importing into PartTools\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_3\u0026gt;3. Car Body\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_4\u0026gt;4. Wheels and Anchors\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_5\u0026gt;5. Suspension and Wheel Deploying\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_6\u0026gt;6. Lights\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_7\u0026gt;7. Glass and Metal Parts\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8\u0026gt;8. PART.CFG Reference\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_1\u0026gt;8.1. Engine Parameters\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_2\u0026gt;8.2. Steering Parameters\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_3\u0026gt;8.3. Suspension Parameters\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_4\u0026gt;8.4. Compensation Parameters\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_5\u0026gt;8.5. Light Parameters\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_6\u0026gt;8.6. Keys and Axes Bindings\u0026lt;/a\u0026gt;\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_9\u0026gt;9. Cart Programming Interface\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_10\u0026gt;10. On Modifying and Distributing\u0026lt;/a\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_1\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E1. Basic Considerations\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u0026lt;div style=\u0022float:right; padding-left:1em; padding-bottom:1em\u0022\u0026gt;\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/attachment.php?attachmentid=20519\u0022 alt=\u0022attachment.php?attachmentid=20519\u0022\u003E\u0026lt;/div\u0026gt;When modelling in \u003Cem\u003EBlender,\u003C/em\u003E \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003E axis (blue arrow)\u003C/span\u003E is \u0027up\u0027. \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003E axis (green)\u003C/span\u003E is \u0027forward\u0027. \u003Cstrong\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003EX\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003E axis (red)\u003C/span\u003E is \u0027right\u0027. Note that \u003Cem\u003EUnity \u003C/em\u003Eengine uses other conventions: in the game \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E is \u0027forward\u0027 and \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E is \u0027up\u0027; and it may give you a real headache if you plan using \u003Cem\u003EPartTools \u003C/em\u003Eto export your model (see below). \u003C/p\u003E\u003Cp\u003EScale is \u003Cem\u003Ealways\u003C/em\u003E 1; that concerns global scale in scene setup, \u003Cem\u003Escale\u003C/em\u003E value in PART.CFG file and each specific object\u0027s scale. In Blender you may press \u003Cem\u003EObject/Apply/Scale\u003C/em\u003E to reset scale to 1.\u003C/p\u003E\u003Cp\u003EObject rotation is \u003Cem\u003Ealways\u003C/em\u003E (0, 0, 0), if no other value is explicitly specified. Use \u003Cem\u003EObject/Apply/Rotation\u003C/em\u003E to reset.\u003C/p\u003E\u003Cp\u003EOn the right is the picture showing how \u003Cem\u003ETransform \u003C/em\u003Epanel should look like:\u003C/p\u003E\u003Cp\u003EAlso remember that all the objects in the scene must have \u003Cem\u003Ethe same \u003C/em\u003Ematerial assigned (ofc unless you assign materials in PartTools).\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_2\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E2. Importing into PartTools\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E \u003C/p\u003E\u003Cp\u003EIn addition to\u003Cem\u003E .DAE\u003C/em\u003E models exported with \u003Cem\u003EBlender, \u003C/em\u003ECart plugin supports\u003Cem\u003E .MU \u003C/em\u003Emodels created in [thread=15998]PartTools[/thread] utility, with all these fancy normal-mapped textures, ladders/airlocks, animation and stuff. \u003C/p\u003E\u003Cp\u003EFollowing should be considered when importing you model into \u003Cem\u003EUnity:\u003C/em\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EObjects hierarchy is \u003Cem\u003Enot \u003C/em\u003Esupported. All the objects listed below (lights, wheels, anchors etc..) must be parented to the main \u003Cem\u003EPartTools \u003C/em\u003Eobject, and should \u003Cem\u003Enot \u003C/em\u003Econtain children.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EWhat\u0027s \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E in Blender becomes \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E in Unity, and vice versa. I.e. lights (see \u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_6\u0026gt;Section 6\u0026lt;/a\u0026gt;) shine along their local \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E, wheels (\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_4\u0026gt;Section 4\u0026lt;/a\u0026gt;) steer around their anchor\u0027s local \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E, rotating levers (\u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_5\u0026gt;Section 5\u0026lt;/a\u0026gt;) look towards their wheels with their local \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E axes, and so on.\u003Cbr\u003EIn the following text, when mentioning some axes, I will mean \u003Cem\u003EBlender\u0027s\u003C/em\u003E axes, not\u003Cem\u003E Unity\u0027s\u003C/em\u003E ones.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003EYes, I know it\u0027s pain in the butt. But that\u0027s the thing we gotta deal with \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_3\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E3. Car Body\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EModel car body and its \u003Cem\u003Enode_collider\u003C/em\u003E as usual; see [thread=3730]Blender tutorial[/thread] for an explanation. Place the car at (0, 0, 0) point facing forward (along an \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E axis) and with roof up (along \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E). \u003C/p\u003E\u003Cp\u003EStarting from \u003Cstrong\u003Ev1.34,\u003C/strong\u003E body orientation is not much of importance; you may even create carts riding along their negative \u003Cstrong\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003EX\u003C/span\u003E\u003C/strong\u003E. Just remember to double-check \u003Cem\u003Eanchors \u003C/em\u003Eand \u003Cem\u003Ewheels \u003C/em\u003Eorientations (see \u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_4\u0026gt;Section 4\u0026lt;/a\u0026gt;), as they fully determine cart\u0027s behavior. And as for the scale -- it \u003Cem\u003Emust \u003C/em\u003Ebe set to (1, 1, 1).\u003C/p\u003E\u003Cp\u003ENote that at launch the cart stands on the ground with \u003Cem\u003Eits bare node_collider\u003C/em\u003E (as no wheels are created yet), so basic collider requirements apply: scene origin (point 0, 0, 0) must be \u003Cem\u003Ewell above the ground. \u003C/em\u003EGenerally making \u003Cem\u003Enode_collider\u003C/em\u003E more than 20 centimeters high and placing it around (0, 0, 0) point does the trick. Anyways, \u003Cem\u003Enode_collider\u0027s \u003C/em\u003Eorigin point \u003Cem\u003Emust \u003C/em\u003Ebe at (0, 0, 0) as the plugin code assumes that it \u003Cem\u003Eis \u003C/em\u003Ethere.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_4\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E4. Wheels and Anchors\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EWheel rolls around its local \u003Cstrong\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003EX\u003C/span\u003E\u003C/strong\u003E axis (red), goes towards its local \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E (green), and steers around local \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E (blue); its maximum dimension in \u003Cspan style=\u0022color:#008000;\u0022\u003E\u003Cstrong\u003EY\u003C/strong\u003E\u003C/span\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003E\u003Cstrong\u003EZ\u003C/strong\u003E\u003C/span\u003E plane is used by plugin as a wheel radius. So create a cylinder facing right, with an origin point exactly in its center. Now orient the wheel appropriately; to do so, switch Blender to \u003Cem\u003ELocal Transform Orientation\u003C/em\u003E (find a switch in \u003Cem\u003E3D View\u003C/em\u003E toolbar) and rotate a wheel until its \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E axis points \u003Cem\u003E\u0022forward\u0022 \u003C/em\u003Eand \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E axis points \u003Cem\u003E\u0022up\u0022. \u003C/em\u003EThen set wheel\u0027s position; its origin defines the lowest suspension point (fully expanded suspension spring). \u003C/p\u003E\u003Cp\u003EScale (1, 1, 1). \u003C/p\u003E\u003Cp\u003EName the wheel object as follows: \u003Cem\u003E\u0027wheel\u0026lt;wheel-ID\u0026gt;{wheel-type}\u0027,\u003C/em\u003E where \u003Cem\u003E\u0027wheel-ID\u0027\u003C/em\u003E being a unique wheel idenifier, and \u003Cem\u003E\u0027wheel-type\u0027\u003C/em\u003E may be empty (no motor, no steering), \u003Cem\u003E\u0027_m\u0027\u003C/em\u003E (motor), \u003Cem\u003E\u0027_s\u0027\u003C/em\u003E (steering) or \u003Cem\u003E\u0027_ms\u0027.\u003C/em\u003E For example, \u003Cem\u003E\u0027wheel1_ms\u0027.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003ENow create \u003Cem\u003Ewheel anchor.\u003C/em\u003E Anchor is a small object to which the wheel is attached; as the anchor is not visible in the game it may be just a small cube. \u003C/p\u003E\u003Cp\u003EAnchor\u0027s orientation is \u003Cem\u003Eextremely \u003C/em\u003Eimportant too, as it determines where the cart gonna ride and where to steer. To recap once again: anchor\u0027s local \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E is \u003Cem\u003E\u0022forward\u0022, \u003C/em\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E is\u003Cem\u003E \u0022up\u0022, \u003C/em\u003Eand \u003Cstrong\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003EX\u003C/span\u003E\u003C/strong\u003E is \u003Cem\u003E\u0022right\u0022.\u003C/em\u003E Period. Use \u003Cem\u003ELocal Transform Orientation\u003C/em\u003E to rotate an anchor as necessary.\u003C/p\u003E\u003Cp\u003EAs anchor\u0027s origin point determines the highest wheel position (suspension spring fully compressed), it should be placed somewhere above the corresponding wheel. A good idea would be to put anchors slightly \u003Cem\u003Ewider \u003C/em\u003Ethan visible wheels models; that makes the cart more stable at slopes. Be reasonable though as moving anchors too far from visible wheels makes the cart behave funny \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003EGive an anchor a name \u003Cem\u003E\u0027anchor\u0026lt;wheel-ID\u0026gt;\u0027\u003C/em\u003E where \u003Cem\u003E\u0027wheel-ID\u0027\u003C/em\u003E being the same as for corresponding wheel (\u003Cem\u003E\u0027anchor1\u0027,\u003C/em\u003E for example). \u003C/p\u003E\u003Cp\u003EScale (1, 1, 1).\u003C/p\u003E\u003Cp\u003EThe car may have any number of wheels, each one with its anchor.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_5\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E5. Suspension and Wheel Deploying\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOptionally you may create suspension levers for each wheel. There are two type of levers supported: \u003Cem\u003Eshifting lever \u003C/em\u003Eand \u003Cem\u003Erotating lever\u003C/em\u003E (though each specific wheel may have \u003Cem\u003Eonly one \u003C/em\u003Eof them).\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EShifting lever \u003C/em\u003Emoves up and down along with the wheel. Its origin point must be placed exactly at the wheel\u0027s position; its name is \u003Cem\u003E\u0027lever\u0026lt;wheel-ID\u0026gt;\u0027\u003C/em\u003E (e.g. \u003Cem\u003E\u0027lever1\u0027\u003C/em\u003E), \u003Cem\u003E\u0027wheel-ID\u0027\u003C/em\u003E being the same as for corresponding wheel. Scale (1, 1, 1), rotation does not matter.\u003C/p\u003E\u003Cp\u003EShown in the picture below are the wheel, its shifting lever (black) and an anchor (red) which defines suspension\u0027s topmost position. Note that wheel\u0027s and lever\u0027s origin points \u003Cem\u003Ecoincide.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/attachment.php?attachmentid=21124\u0022 alt=\u0022attachment.php?attachmentid=21124\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ERotating levers \u003C/em\u003Eswing to look towards the wheel, retracting into car\u0027s body as necessary. Rotating lever\u0027s origin is the \u003Cem\u003Epivot point \u003C/em\u003Earound which lever swings; and lever\u0027s rotation should be set so that it looks towards the corresponding wheel. So switch Blender to \u003Cem\u003ELocal Transform Orientation\u003C/em\u003E and rotate a lever until its \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E axis points in desired direction: \u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/attachment.php?attachmentid=21125\u0022 alt=\u0022attachment.php?attachmentid=21125\u0022\u003E\u003C/p\u003E\u003Cp\u003ERotating levers have the names like \u003Cem\u003E\u0027rotatingLever\u0026lt;wheel-ID\u0026gt;\u0027\u003C/em\u003E (e.g. \u003Cem\u003E\u0027rotatingLever1\u0027\u003C/em\u003E). \u003C/p\u003E\u003Cp\u003EScale (1, 1, 1). \u003C/p\u003E\u003Cp\u003EIn the picture above you might have noted the orange \u0027ghosts\u0027: those are the positions where wheel and lever move in \u003Cem\u003Eretracted \u003C/em\u003Estate. This means the following:\u003C/p\u003E\u003Cp\u003EFrom the \u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_3\u0026gt;Section 8.3\u0026lt;/a\u0026gt; you\u0027ll learn that a cart may have \u003Cem\u003E\u0027deployable\u0027 \u003C/em\u003Ewheels. In that case, when user presses \u003Cem\u003E\u0027Landing Gear\u0027\u003C/em\u003E button, the wheels are deployed from or retracted into cart\u0027s hull. Anchor\u0027s \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E and \u003Cstrong\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EZ\u003C/span\u003E\u003C/strong\u003E positions show where to place a fully retracted wheel; and the lever (a) still looks towards its wheel, and (\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E is retracted into cart\u0027s hull.\u003C/p\u003E\u003Cp\u003EOf course the cart with \u003Cem\u003Eshifting\u003C/em\u003E levers (or with \u003Cem\u003Eno levers at all!\u003C/em\u003E) may have deployable wheels too; though in case of shifting levers, as the wheel\u0027s intended to move \u003Cem\u003Eonly vertically, \u003C/em\u003Ewheel and corresponding anchor should be placed \u003Cem\u003Eat the same \u003C/em\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003E\u003Cem\u003EY\u003C/em\u003E\u003C/span\u003E\u003C/strong\u003E\u003Cem\u003E.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EAlso keep in mind that fully retracted wheels must be \u003Cem\u003Ewell inside\u003C/em\u003E cart\u0027s \u003Cem\u003Enode_collider\u003C/em\u003E (at least, higher than its bottom plane). Otherwise the cart will jump like crazy when the wheels are deployed.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_6\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E6. Lights\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThere are three types of lights in the plugin: \u003Cem\u003Eheadlights\u003C/em\u003E (white, toggled by player), \u003Cem\u003Eparking lights\u003C/em\u003E (yellow, toggled) and \u003Cem\u003Estoplights\u003C/em\u003E (red, lit automatically when the car brakes). Their objects should have \u003Cem\u003E\u0027light_head\u0026lt;light-ID\u0026gt;\u0027, \u0027light_parking\u0026lt;light-ID\u0026gt;\u0027\u003C/em\u003E and \u003Cem\u003E\u0027light-stop\u0026lt;light-ID\u0026gt;\u0027\u003C/em\u003E names correspondingly, \u003Cem\u003E\u0027light-ID\u0027\u003C/em\u003E being any string (e.g. \u003Cem\u003E\u0027light_head1\u0027, \u0027light_stopLeft\u0027\u003C/em\u003E).\u003C/p\u003E\u003Cp\u003ENote that lights colors may be changed in PART.CFG (see \u0026lt;a href=http://kerbalspaceprogram.com/forum/showthread.php/8072#cart_sect_8_5\u0026gt;Section 8.5\u0026lt;/a\u0026gt;). \u003C/p\u003E\u003Cp\u003EAs each light object is given a \u003Cem\u003ESelf-Illuminating/Specular\u003C/em\u003E shader it must contain only \u003Cem\u003Ea lamp lens\u003C/em\u003E without a case (lamp cases may be parts of car body object). Lens origin defines light source position, and \u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EY\u003C/span\u003E\u003C/strong\u003E axis defines direction of the light spot. For example, stoplights (generally located in the rear) should point backwards, to (0, 0, 180), while headlights point forward and down, to (-10, 0, 0).\u003C/p\u003E\u003Cp\u003EAlso it may be a good idea to place headlight\u0027s origin well above the car, so that it lights up a ground before the car, not only the distant hills. So this is the case when object origin doesn\u0027t need to coincide with its geometry. Below is an the example of correctly set headlight (on the right) and stoplight (on the left):\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/attachment.php?attachmentid=19901\u0022 alt=\u0022attachment.php?attachmentid=19901\u0022\u003E\u003C/p\u003E\u003Cp\u003EBTW if you set some light\u0027s \u003Cem\u003ESpotAngle \u003C/em\u003Eparameter to zero, this light becomes a \u003Cem\u003Epoint light \u003C/em\u003Ewhich shines uniformly in all directions. \u003C/p\u003E\u003Cp\u003EAlso remember to set object scale to (1, 1, 1).\u003C/p\u003E\u003Cp\u003EThe texture for lamp lens should be colored the same as the corresponding light source. I.e. a stoplight should be red, parking light should be yellow and headlight should be white (or whatever the colors you\u0027ve set it in the PART.CFG file). If you color a stoplight lens green it won\u0027t shine in the game (though light source will still work).\u003C/p\u003E\u003Cp\u003ETexture alpha channel determines the brightness of light that illuminates lamp lens (not the brightness of the light source shining on the ground!). You may adjust texture transparency by switching Blender to \u003Cem\u003EAlpha Draw Mode\u003C/em\u003E (a button in the \u003Cem\u003EUV/Image Editor\u003C/em\u003E toolbar) and setting brush \u003Cem\u003EBlend Mode\u003C/em\u003E to \u003Cem\u003EAdd Alpha\u003C/em\u003E or \u003Cem\u003EErase Alpha\u003C/em\u003E in the \u003Cem\u003EProperties\u003C/em\u003E tab (\u0026lt;N\u0026gt; key).\u003C/p\u003E\u003Cp\u003ENote that spotlights are \u003Cem\u003Every \u003C/em\u003Eexpensive to draw; just a dozen of them shining at the same time may drop frame rates significantly. Also note that \u003Cem\u003E\u0027a dozen of lights\u0027 \u003C/em\u003Esituation can be quite possible if several carts gather together in one location. So try to make it with \u003Cem\u003Eas few lights as possible \u003C/em\u003Ewhen modelling a single cart. You may use an [thread=9990]FPS pod[/thread] plugin to measure in-game performance.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_7\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E7. Glass and Metal Parts\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EIf you give some object a name beginning with \u003Cem\u003E\u0027glass\u0027\u003C/em\u003E word then plugin will assign a \u003Cem\u003ETransparent/Specular\u003C/em\u003E shader to it making an object partially transparent which is useful for creating car windows. A level of transparency is also determined by texture alpha channel.\u003C/p\u003E\u003Cp\u003EObjects with names beginning with \u003Cem\u003E\u0027metal\u0027\u003C/em\u003E are given \u003Cem\u003ESpecular\u003C/em\u003E shader which is useful to create glossy metal parts. Texture alpha channel defines level of glossiness (opaque areas are glossy, transparent ones are not). Of course this shall not concern you if you\u0027re using \u003Cem\u003EPartTools \u003C/em\u003Eto export your model, as this utility has built-in support for \u003Cem\u003Eany\u003C/em\u003E shader (except for transparent ones).\u003C/p\u003E\u003Cp\u003EAs both these shaders are slightly more expensive to draw than KSP\u0027s default \u003Cem\u003EDiffuse\u003C/em\u003E shader you ought to be reasonable when adding glass or metal parts. See \u003Ca href=\u0022http://unity3d.com/support/documentation/Manual/Materials.html\u0022 rel=\u0022external nofollow\u0022\u003EMaterials and Shaders\u003C/a\u003E article for more details.\u003C/p\u003E\u003Cp\u003ESee also [thread=18063]ShaderReplacer[/thread] plugin.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E8. PART.CFG Reference\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThere are 6 sections of CFG parameters specific to Cart Plugin -- \u003Cem\u003EEngine, Steering, Suspension, Compensation, Lights\u003C/em\u003E and \u003Cem\u003EKey bindings.\u003C/em\u003E Remember that all these parameters are \u003Cem\u003Eoptional;\u003C/em\u003E if none is set then plugin uses its default values suitable for a light 4-wheel car.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_1\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.1. Engine Parameters\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EforwardTorque\u003C/em\u003E and \u003Cem\u003EbackwardTorque\u003C/em\u003E determine how fast the car accelerates (the higher is the faster). \u003Cem\u003EbrakeTorque\u003C/em\u003E is obviously braking intensity; be careful as the high brake torque causes a \u003Cem\u003E\u0027stoppie\u0027\u003C/em\u003E and may topple the cart. \u003C/p\u003E\u003Cp\u003EThe \u003Cem\u003EfrictionTorque\u003C/em\u003E is very important parameter as the friction in the plugin is made \u003Cem\u003Eproportional to speed.\u003C/em\u003E So it\u0027s the \u003Cem\u003EfrictionTorque\u003C/em\u003E that limits cart\u0027s top speed as well as its coasting distance.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_2\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.2. Steering Parameters\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAt low speed maximum steering angle is constant and equal to \u003Cem\u003EmaxSteerAngle\u003C/em\u003E parameter (in degrees). Starting from \u003Cem\u003EsteerLimitSpeed\u003C/em\u003E (in m/s) steering angle begins to decrease with the speed, \u003Cem\u003EsteerSpeedFalloff\u003C/em\u003E being the coefficient. You may adjust these parameters to prevent a car from toppling over when turning at high speed.\u003C/p\u003E\u003Cp\u003EAnd \u003Cem\u003EsteerVisibility\u003C/em\u003E parameter is simply a multiplier for visible model animation.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_3\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.3. Suspension Parameters\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EwheelMass\u003C/em\u003E is, eh, the wheel mass in tonnes. Wheels add up to the part\u0027s mass. \u003Cem\u003EsuspensionSpring\u003C/em\u003E defines how strong the spring is, and \u003Cem\u003EsuspensionDamper\u003C/em\u003E is the damping force. See \u003Ca href=\u0022http://unity3d.com/support/documentation/ScriptReference/WheelCollider.html\u0022 rel=\u0022external nofollow\u0022\u003EWheelCollider\u003C/a\u003E article for more details.\u003C/p\u003E\u003Cp\u003ENext, \u003Cem\u003Edeployable\u003C/em\u003E parameter determines whether the wheels should be deployed/retracted when user presses \u003Cem\u003E\u0027Landing Gear\u0027\u003C/em\u003E key. \u003Cem\u003EdeployTime\u003C/em\u003E is the process duration, in seconds.\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_4\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.4. Compensation Parameters\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThese parameters define the force pushing cart to the ground. \u003Cem\u003EcompensationLowGee\u003C/em\u003E is applied at the Mun to make the cart controllable even at low gravity. Value of 1 makes the cart behave exactly as it does at Kerbin (which is unrealistic but playable) and value of 0 turns this force off.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EcompensationSpeed\u003C/em\u003E is applied when cart goes at high speed to make it more stable. Consider setting this parameter to 0 if you want your cart to takeoff (or topple over when going too fast).\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_5\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.5. Light Parameters\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ElightIntensity\u003C/em\u003E and \u003Cem\u003EheadLightIntensity\u003C/em\u003E define the brightness of light sources (the former one for stoplights and parking lights, and the latter one for headlights). Allowed values are from 0 to 8. Next, \u003Cem\u003ElightRange\u003C/em\u003E and \u003Cem\u003EheadLightRange\u003C/em\u003E define the light range, in meters; and \u003Cem\u003ElightSpotAngle/headLightSpotAngle\u003C/em\u003E are the angles of the light cones in degrees. Setting these angles to 0 turn corresponding lights into \u003Cem\u003Epoint lights \u003C/em\u003Ewhich shine uniformly in all directions.\u003C/p\u003E\u003Cp\u003EThen go \u003Cem\u003EheadLightColor, parkingLightColor\u003C/em\u003E and \u003Cem\u003EstopLightColor\u003C/em\u003E parameters, each containing three digits for \u003Cem\u003ERed, Green \u003C/em\u003Eand \u003Cem\u003EBlue \u003C/em\u003Echannel correspondingly. Range for each channel is [0..1].\u003C/p\u003E\u003Cp\u003E\u0026lt;a name=cart_sect_8_6\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E8.6. Keys and Axes Bindings\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThis section contains bindings for \u003Cem\u003EkeyToggleLights, keyBrake\u003C/em\u003E and \u003Cem\u003EkeyHandBrake\u003C/em\u003E actions. Each binding is a Unity \u003Cem\u003Ekey code\u003C/em\u003E -- either the character itself (like \u003Cem\u003E\u0027k\u0027\u003C/em\u003E or \u003Cem\u003E\u00271\u0027\u003C/em\u003E) or some named entity like \u003Cem\u003E\u0027up\u0027\u003C/em\u003E for up arrow or \u003Cem\u003E\u0027[6]\u0027\u003C/em\u003E for Numpad \u0026lt;6\u0026gt;. See \u003Ca href=\u0022http://unity3d.com/support/documentation/Manual/Input.html\u0022 rel=\u0022external nofollow\u0022\u003EInput\u003C/a\u003E article for a list of available key codes.\u003C/p\u003E\u003Cp\u003ENext go \u003Cem\u003EaxisSteer\u003C/em\u003E and \u003Cem\u003EaxisMotor,\u003C/em\u003E steering and driving axes. Each of them can be bound to one of KSP\u0027s control channels:\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EX,\u003C/li\u003E\u003Cli\u003EY,\u003C/li\u003E\u003Cli\u003EZ,\u003C/li\u003E\u003Cli\u003EPitch,\u003C/li\u003E\u003Cli\u003EYaw,\u003C/li\u003E\u003Cli\u003ERoll,\u003C/li\u003E\u003Cli\u003Eand Throttle\u003C/li\u003E\u003C/ul\u003E(Although I\u0027d not recommend using \u003Cem\u003E\u0022Throttle\u0022\u003C/em\u003E as no reverse gear is implemented yet).\u003Cbr\u003EAnd, in addition, each axis may be \u003Cem\u003E\u0022Reversed\u0022.\u003C/em\u003E For example,\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    axisMotor = Pitch\u003Cbr\u003E    axisSteer = X reversed\u003C/pre\u003E\u003Cp\u003E\u003Cbr\u003ENote that there\u0027s no key setting for deploying/retracting wheels, as this action is bound to KSP\u0027s \u003Cem\u003E\u0027Landing Gear\u0027 \u003C/em\u003Econtrol.\u003Cbr\u003E\u0026lt;a name=cart_sect_9\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E9. Cart Programming Interface\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003Cbr\u003EStarting from \u003Cstrong\u003Ev1.34\u003C/strong\u003E, \u003Cem\u003ECart.dll\u003C/em\u003E plugin provides a list of properties allowing any other plugin to control the cart. Here they are:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//------ Capabilities: ------\u003Cbr\u003E    public bool hasWheels { get; }\u003Cbr\u003E    public bool hasLights { get; }\u003Cbr\u003E    public bool hasMotor { get; }\u003Cbr\u003E    public bool hasBrake { get; }\u003Cbr\u003E    public bool hasHandbrake { get; }\u003Cbr\u003E    public bool hasCruiseControl { get; }\u003Cbr\u003E    public bool canSteer { get; }\u003Cbr\u003E    public bool canDeploy { get; }\u003Cbr\u003E//------ Current Status: ------\u003Cbr\u003E    public bool wheelsCreated { get; } // false if not deployed, or packed for orbit\u003Cbr\u003E    public float speed { get; } // \u002B/- meters per second\u003Cbr\u003E    public Vector3 direction { get; } // ...to which cart rides. In World Space.\u003Cbr\u003E    public bool controllable { get; } // not the same as Part.isControllable! \u003Cbr\u003E    public bool onRemoteControl  { get; } \u003Cbr\u003E//------ Controls: ------\u003Cbr\u003E    public bool wheelsDeployed { get; set; }\u003Cbr\u003E    public bool motorEnabled { get; set; }\u003Cbr\u003E    public bool steeringEnabled { get; set; }\u003Cbr\u003E    public bool lights { get; set; }\u003Cbr\u003E    public bool brake { get; set; }\u003Cbr\u003E    public bool handbrake { get; set; }\u003Cbr\u003E    public bool cruiseControl { get; set; }\u003Cbr\u003E    public float cruiseSpeed { get; set; } // \u002B/- meters per second\u003Cbr\u003E    public float throttle { get; set; } // -1..\u002B1\u003Cbr\u003E    public float steering { get; set; } // -1..\u002B1\u003C/pre\u003E\u003Cp\u003ENote that referencing \u003Cem\u003ECart\u003C/em\u003E class directly obliges end-users to have \u003Cem\u003ECart.dll\u003C/em\u003E library installed; so it would be much better to access these properties using \u003Ca href=\u0022http://msdn.microsoft.com/en-us/library/system.reflection.aspx\u0022 rel=\u0022external nofollow\u0022\u003ESystem.Reflection\u003C/a\u003E.\u003Cbr\u003EFor example, the following code tests whether some part inherits \u003Cem\u003ECart\u003C/em\u003E class:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    Type t = somePart.GetType();\u003Cbr\u003E    while( ( System.Object )t != null ) {\u003Cbr\u003E        if( t.Name == \u0022Part\u0022 ) // stop searching\u003Cbr\u003E            break;\u003Cbr\u003E        if( t.Name == \u0022Cart\u0022 ) {\u003Cbr\u003E            // Okay, it\u0027s a cart! Make it do something funny...\u003Cbr\u003E            ...\u003Cbr\u003E            break;\u003Cbr\u003E        }\u003Cbr\u003E        t = t.BaseType;\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003Cbr\u003EAnd as for getting/setting properties -- \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    Type t = somePart.GetType();\u003Cbr\u003E    BindingFlags b = BindingFlags.Public | BindingFlags.Instance;\u003Cbr\u003E    PropertyInfo handbrakeProp = t.GetProperty( \u0022handbrake\u0022, b );\u003Cbr\u003E    if( ( System.Object )handbrakeProp != null ) ) {\u003Cbr\u003E        // LOL the class has this property!\u003Cbr\u003E        bool handbrake = ( bool )handbrakeProp.GetValue( somePart, null );\u003Cbr\u003E        ...\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003EYeah, I know, it\u0027s complicated... but it allows your plugin to \u003Cem\u003Esupport Cart.dll\u003C/em\u003E rather than \u003Cem\u003Erequire\u003C/em\u003E its presence. You may use \u003Cem\u003EcartControl.cs\u003C/em\u003E code as a reference, it does the same things to provide [thread=16347]RemoteTech[/thread] plugin compatibility.\u003Cbr\u003E\u0026lt;a name=cart_sect_10\u0026gt;\u0026lt;/a\u0026gt;\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E10. On Modifying and Distributing\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003Cbr\u003EAs the Cart Plugin is available under \u003Ca href=\u0022https://en.wikipedia.org/wiki/Creative_Commons_license\u0022 rel=\u0022external nofollow\u0022\u003Eby-sa CC license\u003Csup\u003E1\u003C/sup\u003E\u003C/a\u003E it is free to use and redistribute as soon as following conditions are met:\u003Cbr\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EYou \u003Cem\u003Emust\u003C/em\u003E explicitly mention me as plugin\u0027s author in an \u003Cem\u003Eauthor\u003C/em\u003E field of \u003Cem\u003EPart.cfg.\u003C/em\u003E For example,\u003Cbr\u003E\u003Cem\u003Eauthor = \u0026lt;your name\u0026gt; || Cart Plugin by Tosh\u003C/em\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EIf you ever modify plugin \u003Cem\u003Ecode\u003C/em\u003E (not the model or texture!) then you \u003Cem\u003Emust\u003C/em\u003E release your derivative project under the same \u003Cem\u003Eby-sa CC\u003C/em\u003E license mentioning your name along with mine.\u003Cbr\u003EIf you\u0027ve just created a new model for an \u003Cem\u003Eunchanged\u003C/em\u003E plugin then you may release \u003Cem\u003Eyour model and texture\u003C/em\u003E under any license you like.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAccording to forum rules you \u003Cem\u003Emust\u003C/em\u003E include both \u003Cem\u003Eplugin .DLL\u003C/em\u003E and the source code (even \u003Cem\u003Eoriginal \u003C/em\u003Eone!) into your package. An archive must contain \u003Cem\u003EREADME.txt\u003C/em\u003E file with all the authors\u0027 names and clearly stated license information, \u003Cem\u003EParts/\u003C/em\u003E folder with your model and texture, \u003Cem\u003EPlugins/\u003C/em\u003E folder with \u003Cem\u003Ecart.dll\u003C/em\u003E, and \u003Cem\u003ESource/Cart/\u003C/em\u003E folder with all the \u003Cem\u003E.CS\u003C/em\u003E files from an original package.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EYou \u003Cem\u003Emust not\u003C/em\u003E ask for any permission for creating new cart models or inspecting or modifying plugin code. You already have it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Chr\u003E\u003Csup\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E1\u003C/span\u003E\u003C/sup\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003EWith exception for .MU and .MBM files, which cannot be modified, and thus are distributed under CC BY-ND.\u003C/span\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EGood luck!\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-08-27T20:36:29Z\u0022 title=\u002208/27/2012 08:36  PM\u0022 data-short=\u002211 yr\u0022\u003EAugust 27, 2012\u003C/time\u003E by Tosh\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JellyCubes","CreatedById":11002,"CreatedDateTime":"2012-03-13T09:55:28Z","Content":"\n\u003Cp\u003ENo words can describe how amazing this is.\u003C/p\u003E\u003Cp\u003E[move]\u003Cspan\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003E\u003Cstrong\u003E\u0026lt;3 \u0026lt;3 \u0026lt;3 \u0026lt;3\u003C/strong\u003E\u003C/span\u003E\u003C/span\u003E[/move]\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Chr\u003E\u003Cp\u003EA question: a conventional object will explode if the ground comes within 0.2 m of the node_collider origin. Do the same thing happen to the cart wheels?\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-03-13T10:44:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JellyCubes\u0022 data-cite=\u0022JellyCubes\u0022\u003E\u003Cdiv\u003EA question: a conventional object will explode if the ground comes within 0.2 m of the node_collider origin. Do the same thing happen to the cart wheels?\u003C/div\u003E\u003C/blockquote\u003EI don\\\u0027t analyze WheelCollider intersections with ground in plugin code, so nothing explodes. The wheel either \u003Cem\u003Estands on \u003C/em\u003Ethe ground or is totally \u003Cem\u003Ebelow \u003C/em\u003Ethe ground (which sometimes makes a rover jump hilariously 8)).\n"},{"CreatedByName":"Polecat Industries","CreatedById":11224,"CreatedDateTime":"2012-03-14T01:15:50Z","Content":"\n\u003Cp\u003EI just realized about your cart. Did you mean for the kerbals not to see where they are going?\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-03-14T01:22:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI just realized about your cart. Did you mean for the kerbals not to see where they are going?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003EDo you mean pod windows looking backwards? Why, who gives a darn where do they go? Bill? Jeb? 8)\u003Cp\u003EBeing serious I\\\u0027ve just modelled and coded a cart along positive Y (which maps to \u0027forward\u0027 direction in Unity); so \u003Cem\u003Eit\\\u0027s the pod \u003C/em\u003Ethat looks back =P. Probably rotating the cart\\\u0027s model, swapping forward and backward wheels and reconfiguring controls could fix that, without rewriting the code.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-05-10T13:46:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tosh\u0022 data-cite=\u0022Tosh\u0022\u003E\u003Cdiv\u003EDo you mean pod windows looking backwards? -snip-\u003C/div\u003E\u003C/blockquote\u003EWell, right after two months of \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Ebeing lazy\u003C/span\u003E doing some other job I\\\u0027ve updated plugin with an option to align a cart with stock pod\\\u0027s windows. And added some pictures.\u003Cp\u003EAny new cart modders? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Emilio","CreatedById":12359,"CreatedDateTime":"2012-05-10T20:52:36Z","Content":"\n\u003Cp\u003EI would love someone to try to do a motorcycle, but if I can understand Blender i\\\u0027ll maybe do iy \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-07-03T18:37:09Z","Content":"\n\u003Cp\u003EI\\\u0027m not using blender but C4D, I didn\\\u0027t understand it 100%, but is is possible that you post the hyarchy of the model? \u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-07-03T20:07:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003EI\\\u0027m not using blender but C4D, I didn\\\u0027t understand it 100%, but is is possible that you post the hyarchy of the model?\u003C/div\u003E\u003C/blockquote\u003EDo you mean the objects\\\u0027 relationship hierarchy? It\\\u0027s a simple flat list:\u003Cp\u003EBTW can your \u0027C4D\u0027 (whatever the heck it is) import .DAE files? If it can, then you may just open one of those included in the package and look how is it arranged. \u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/index.php?action=dlattach;topic=8661.0;attach=24991;image\u0022 alt=\u0022index.php?action=dlattach;topic=8661.0;attach=24991;image\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-07-03T20:35:18Z","Content":"\n\u003Cp\u003EChecked it out and now it makes sense along with the document. One for my To Do list \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E Thx. \u003C/p\u003E\n"},{"CreatedByName":"ajor121","CreatedById":14771,"CreatedDateTime":"2012-07-13T21:30:26Z","Content":"\n\u003Cp\u003EHello\u003C/p\u003E\u003Cp\u003EI have to said that the tutorial on how to make gears is good... I have been plaing whit Blender for a one week now and I have made a plane but i have been strugoing on landing gears, sow I dice to give it a try to u plugings and I come up whit something that im ok whit. Just got a problem Dount know how to make the pluig in to let me start whit the gears down... but at least the plane can and and turn inground not for long in hi speed 8).\u003C/p\u003E\n"},{"CreatedByName":"Hojo_Norem","CreatedById":2723,"CreatedDateTime":"2012-08-04T15:28:31Z","Content":"\n\u003Cp\u003EI\u0027ve been trying my hand at making some wheels and considering that it\u0027s my first time messing around with Blender (seriously, that software seems like it doesn\u0027t want to be used sometimes...)\u003C/p\u003E\u003Cp\u003EAnyhoow, knowing next to nothing about 3D modelling I have managed to get something into the game and the wheels even work... kinda. It looks like the physics part of the wheels work; I can move and steer but the visible mesh just acts odd. The wheels spin and pivot OK but the suspension is pretty much stuck in the up position all the time, flicking dwon now and again based on the terrain.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www.jcomcp.plus.com/bigWheel.zip\u0022 rel=\u0022external nofollow\u0022\u003EMy current work files.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve followed the instructions fairly closely, the only real difference I can see is that the part only has two wheels, the idea being that you could build a large rover or mobile base and then just slap a pair of wheels on each side.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-04T19:29:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hojo_Norem\u0022 data-cite=\u0022Hojo_Norem\u0022\u003E\u003Cdiv\u003EI\u0027ve been trying my hand at making some wheels and considering that it\u0027s my first time messing around with Blender (seriously, that software seems like it doesn\u0027t want to be used sometimes...)\u003C/div\u003E\u003C/blockquote\u003EYep, it really needs you to get yourself used to it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E. But... I\u0027ve \u003Cem\u003Enever \u003C/em\u003Eheard of easy-to-use 3D software... \u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hojo_Norem\u0022 data-cite=\u0022Hojo_Norem\u0022\u003E\u003Cdiv\u003EI\u0027ve followed the instructions fairly closely, the only real difference I can see is that the part only has two wheels, the idea being that you could build a large rover or mobile base and then just slap a pair of wheels on each side.\u003C/div\u003E\u003C/blockquote\u003ENo, you did not \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E: scale\u0027s not 1. Open \u003Cem\u003ETransform\u003C/em\u003E panel in \u003Cem\u003E3D View\u003C/em\u003E (\u0026lt;N\u0026gt; key) and notice the scales for wheels and anchors are \u003Cem\u003Enegative, \u003C/em\u003Ewhich effectively inverts their axes directions! Refer to Section 1 on how to reset the scale to 1 -- and do it for all the objects in your file.\u003Cp\u003EAfter doing that, you may find some normals inverted (in order to see that you may want to tick \u003Cem\u003ETextured Solid \u003C/em\u003Eswitch in \u003Cem\u003EDisplay \u003C/em\u003Esection of \u003Cem\u003ETransform\u003C/em\u003E panel). I hope you already know how to flip normals\u0027 directions \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnd the last thing: I highly recommend placing both anchors at zero X, to make the gear physically symmetrical. In such a case, the craft having two gears at its sides won\u0027t fall sideways.\u003C/p\u003E\u003Cp\u003EAfter applying these three fixes, the gear operates just fine.\u003C/p\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-08-04T19:32:08Z","Content":"\n\u003Cp\u003EAre you going to make this compatable with .mu extension? I\u0027ve heard from DYJ that it doesn\u0027t work with .mu and only with .dae\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-04T19:34:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003EAre you going to make this compatable with .mu extension? I\u0027ve heard from DYJ that it doesn\u0027t work with .mu and only with .dae\u003C/div\u003E\u003C/blockquote\u003EYes, v1.32 supports .DAE only. I plan to release an update... some day.\n"},{"CreatedByName":"Hojo_Norem","CreatedById":2723,"CreatedDateTime":"2012-08-04T20:21:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tosh\u0022 data-cite=\u0022Tosh\u0022\u003E\u003Cdiv\u003Eyou did not \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E: scale\u0027s not 1. Open \u003Cem\u003ETransform\u003C/em\u003E panel in \u003Cem\u003E3D View\u003C/em\u003E (\u0026lt;N\u0026gt; key) and notice the scales for wheels and anchors are \u003Cem\u003Enegative, \u003C/em\u003Ewhich effectively inverts their axes directions! Refer to Section 1 on how to reset the scale to 1 -- and do it for all the objects in your file.\u003Cp\u003EAfter doing that, you may find some normals inverted (in order to see that you may want to tick \u003Cem\u003ETextured Solid \u003C/em\u003Eswitch in \u003Cem\u003EDisplay \u003C/em\u003Esection of \u003Cem\u003ETransform\u003C/em\u003E panel). I hope you already know how to flip normals\u0027 directions \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnd the last thing: I highly recommend placing both anchors at zero X, to make the gear physically symmetrical. In such a case, the craft having two gears at its sides won\u0027t fall sideways.\u003C/p\u003E\u003Cp\u003EAfter applying these three fixes, the gear operates just fine.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELol \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Shows what I know about 3D modelling. I never thought that using the scaling tool in object mode made that kind of change. I did what you said and it works fine, even trundles along at the speed I thought it should (based on mucking with your original rover).\u003C/p\u003E\u003Cp\u003EJust one other quick question, is there a reason why you have the cart\u0027s crash tolerance to be near indestructible? The hills near my KSP are littered with numerous carts and rovers after various high speed large mun rover designs. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Emental note: Do all re-sizing in edit mode from now on...\u003C/em\u003E\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-04T20:39:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hojo_Norem\u0022 data-cite=\u0022Hojo_Norem\u0022\u003E\u003Cdiv\u003EJust one other quick question, is there a reason why you have the cart\u0027s crash tolerance to be near indestructible? The hills near my KSP are littered with numerous carts and rovers after various high speed large mun rover designs. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003EThere\u0027s not a special reason... I just have a bad habit assigning \u00221e37\u0022 to everything I do \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hojo_Norem\u0022 data-cite=\u0022Hojo_Norem\u0022\u003E\u003Cdiv\u003E\u003Cem\u003Emental note: Do all re-sizing in edit mode from now on...\u003C/em\u003E\u003C/div\u003E\u003C/blockquote\u003EDoing it in Object mode is kinda handy... at least you can immediately see metric sizes in the Transform panel. Just don\u0027t forget to \u0027Apply\u0027 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-08-04T20:49:55Z","Content":"\n\u003Cp\u003EAnother question/request.\u003C/p\u003E\u003Cp\u003EDoes the plugin recognize the names of all the parts, even if they are child/parent of eachother? I need that because of complex animations etc.\u003C/p\u003E\u003Cp\u003E\u002B\u003C/p\u003E\u003Cp\u003EConsidering it making PartModule?\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-04T20:53:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003EAnother question/request.\u003Cp\u003EDoes the plugin recognize the names of all the parts, even if they are child/parent of eachother? I need that because of complex animations etc.\u003C/p\u003E\u003Cp\u003E\u002B\u003C/p\u003E\u003Cp\u003EConsidering it making PartModule?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003EBoth questions: no, not in the nearest release \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E. Only .mu support is planned.\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-08-16T14:46:26Z","Content":"\n\u003Cp\u003ESome people were requesting for this how it would look in Unity. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/LBSOZ.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/LBSOZ.png\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-16T15:01:33Z","Content":"\n\u003Cp\u003ESadly Unity does not display object\u0027s \u003Cem\u003Eorigin \u003C/em\u003Epoint... it displays the marker in it\u0027s \u003Cem\u003Emedian\u003C/em\u003E point instead \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003EI tried to make some screenies of Rover assembled in Unity -- but all of them were quite misleading.\u003C/p\u003E\u003Cp\u003EConsider the following:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/forum/attachment.php?attachmentid=31346\u0022 alt=\u0022attachment.php?attachmentid=31346\u0022\u003E\u003C/p\u003E\u003Cp\u003EYes, that\u0027s the lever pointing towards its wheel. It\u0027s origin point is located in the center of that round thingy on the rover\u0027s side (where a big red arrow points); but Unity displays the marker in the center of lever\u0027s mesh. \u003C/p\u003E\u003Cp\u003ESo, you\u0027ll need to type object\u0027s coordinates into that \u003Cem\u003ETransform/Position \u003C/em\u003Eboxes, digit by digit...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-08-16T15:06:30Z\u0022 title=\u002208/16/2012 03:06  PM\u0022 data-short=\u002211 yr\u0022\u003EAugust 16, 2012\u003C/time\u003E by Tosh\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-08-16T16:45:21Z","Content":"\n\u003Cp\u003Ewell.. I\u0027ve no clue what you are talking about... But I\u0027ve got mine working: \u003Ca href=\u0022https://www.youtube.com/watch?v=6C3R9Hdm7CU\u0026amp;lc=0ZTWLJsLzGf4fnDowWE8ehi4jBV9YRH8X35lr2mRw98\u0026amp;feature=inbox\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.youtube.com/watch?v=6C3R9Hdm7CU\u0026amp;lc=0ZTWLJsLzGf4fnDowWE8ehi4jBV9YRH8X35lr2mRw98\u0026amp;feature=inbox\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-16T17:08:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003Ewell.. I\u0027ve no clue what you are talking about... But I\u0027ve got mine working: \u003Ca href=\u0022https://www.youtube.com/watch?v=6C3R9Hdm7CU\u0026amp;lc=0ZTWLJsLzGf4fnDowWE8ehi4jBV9YRH8X35lr2mRw98\u0026amp;feature=inbox\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.youtube.com/watch?v=6C3R9Hdm7CU\u0026amp;lc=0ZTWLJsLzGf4fnDowWE8ehi4jBV9YRH8X35lr2mRw98\u0026amp;feature=inbox\u003C/a\u003E\u003C/div\u003E\u003C/blockquote\u003EYep, I\u0027ve seen it. Works perfectly \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003EWaitin\u0027 for textures... and final release))\u003C/p\u003E\n"},{"CreatedByName":"vvaris","CreatedById":27444,"CreatedDateTime":"2012-08-20T01:09:11Z","Content":"\n\u003Cp\u003EI seem to be having problems with the getting the transparency to work, I use blender and export to dae. I have named the object glass and I even named the .dae file as glass. I have alpha cut off in the cfg file, tried removing it and assigning it to 1 or 0. Using KSP 0.16.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-08-20T05:34:00Z","Content":"\n\u003Cp\u003EDid you decrease \u003Cem\u003Etexture\u0027s \u003C/em\u003Ealpha channel? \u003Cem\u003EalphaCutOff \u003C/em\u003Ehas nothing to do with \u003Cem\u003ETransparent \u003C/em\u003Eshaders, it affects \u003Cem\u003ETransparent Cutout\u003C/em\u003E shaders only (which are used to render some KSP stock parts, e.g. parachutes).\u003C/p\u003E\u003Cp\u003ESee the link in Section 6 for more information.\u003C/p\u003E\n"}]}