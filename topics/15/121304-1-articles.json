{"TopicId":121304,"ForumId":15,"TopicTitle":"Additive textures \u002B draw distance","CreatedByName":"Van Disaster","CreatedById":58876,"CreatedDateTime":"2015-09-20T17:21:20Z","PageNum":1,"Articles":[{"CreatedByName":"Van Disaster","CreatedById":58876,"CreatedDateTime":"2015-09-20T17:21:20Z","Content":"\n\u003Cp\u003EContext: I\u0027ve made a runway for Kerbinside, which is perfectly visible from most of the way to orbit.\u003C/p\u003E\u003Cp\u003EIssue: I want a considerable number of lights on it ( runways are a nightmare of lighting ) so my idea was to use emissive quads ala KSC runway ( what shader is *that* using anyway ) - however there\u0027s no emissive transparent shader so I\u0027m looking at the Particles/Additive one ( thanks for the tip Porkjet ).\u003C/p\u003E\u003Cp\u003EProblem: I can\u0027t seem to get any shape or form of lighting using that technique visible far enough; I\u0027ve made the quads giant \u0026amp; handmade mipmaps ( doesn\u0027t work, for starters it switches mips very closely ), I\u0027ve pulled them up \u0026amp; down off the surface in case they\u0027re clipping, put them in the TransparentFX layer, and now made the quads absurdly large.\u003C/p\u003E\u003Cp\u003EI don\u0027t have Unity Pro so I can\u0027t make custom LODs with bigger quads, so is there anything else I can do? The KSC runway lights are visible further than just about any other part which is a bit more than I need, but I\u0027d like a decent draw distance at least.\u003C/p\u003E\n"},{"CreatedByName":"bac9","CreatedById":57757,"CreatedDateTime":"2015-09-20T23:07:28Z","Content":"\n\u003Cp\u003E1. Make sure your light textures have a normal amount of space used for opaque elements. A texture with a tiny white star in the middle and huge black area on 90% of the pixels will very, very quickly fade to black on lower mips. You can see my light FX texture on one of the screenshots from my Gamasutra.com article of the KSC update, I think.\u003C/p\u003E\u003Cp\u003E2. I use 3 intersecting quads (or six intersecting quads if shader is one-sided), not one horizontal quad per light, which probably makes addition on lower mips remain visible for longer.\u003C/p\u003E\u003Cp\u003E3. Not sure about the shader, I think I used two quads per plane, which meant the shader was one sided - so it probaby wasn\u0027t Particles-Add but was some of the transparent KSP shaders.\u003C/p\u003E\u003Cp\u003E4. Not directly related to your question, but to prevent lights from looking really, really ugly on quad intersections and from grazing angles, ideally you should use a custom shader with a fresnel based fade. Ask Porkjet for the one I made some time ago.\u003C/p\u003E\u003Cp\u003E5. Again, not directly related to your question, but avoid huge quads at all costs, because every single pixel touched by a transparent quad has to be redrawn again by the Unity renderer. If you have three quads visible in a frame and covering most of it, that means that Unity has to do three more expensive redraws of the whole frame, which is not good for performance (ever noticed how particles in KSP never grow beyond certain size no matter how close you zoom in? that\u0027s why). If you have a low number of lights and low polycount, it\u0027s even advisable not to use quads and to use more complex topology, closely hugging the edges of opaque areas on the texture (star-shaped and circle shaped N-gons for lights, for example). Same goes for models like trees, it\u0027s best to use a few more vertices than to leave a completely transparent area unused by the texture anyway.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://docs.cryengine.com/download/attachments/1310841/image011.jpg?version=1\u0026amp;modificationDate=1254232511000\u0026amp;api=v2\u0022 alt=\u0022image011.jpg?version=1\u0026amp;modificationDate=1254232511000\u0026amp;api=v2\u0022\u003E\u003C/p\u003E\u003Cp\u003E_______________________________\u003C/p\u003E\u003Cp\u003EYou know what, just write a simple plugin that will scale KerbinSide objects depending on the distance to the player. KSP is not using HDR rendering, so it\u0027s absolutely impossible to get realistic non-linear light appearance over various distances. Get the matter into your hands and scale objects directly.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-20T23:25:58Z\u0022 title=\u002209/20/2015 11:25  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 20, 2015\u003C/time\u003E by bac9\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Van Disaster","CreatedById":58876,"CreatedDateTime":"2015-09-21T13:36:13Z","Content":"\n\u003Cp\u003ETBH I don\u0027t really want to use additive quads at all, but there didn\u0027t really appear to be any other solution for a hundred\u002B light sources. The most successful version was using custom mips to fill the quad at distance, but that wasn\u0027t all that great either. I think I\u0027ll have to look at the shader route ( which is going to involve learning a lot more about shaders... so much for quick \u0026amp; easy models! ). That is not going to stop the source being culled though, hm.\u003C/p\u003E\u003Cp\u003EYour runway lights have the usual cross shape plus a circular pool, no idea what shader but it\u0027s not one of the usual ones I think. Some trickery was used there.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-21T16:01:37Z\u0022 title=\u002209/21/2015 04:01  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 21, 2015\u003C/time\u003E by Van Disaster\u003C/strong\u003E\n\u003C/span\u003E\n"}]}