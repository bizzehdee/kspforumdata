{"TopicId":123855,"ForumId":15,"TopicTitle":"Texture \u0026quot;curvature\u0026quot;.","CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-10-27T15:07:28Z","PageNum":1,"Articles":[{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-10-27T15:07:28Z","Content":"\n\u003Cp\u003EHello everyone!\u003C/p\u003E\u003Cp\u003EI\u0027m currently coding something to generate random planet textures at runtime in KSP.\u003C/p\u003E\u003Cp\u003ESo far, so good, the main problem is, textures are meant to be used on flat surfaces, and need to be distorded at the poles.\u003C/p\u003E\u003Cp\u003EIs anyone aware of an algorithm to do this? Computation speed is not an issue.\u003C/p\u003E\u003Cp\u003EThanks in advance!\u003C/p\u003E\n"},{"CreatedByName":"Van Disaster","CreatedById":58876,"CreatedDateTime":"2015-10-27T22:32:16Z","Content":"\n\u003Cp\u003ERather than curve the texture, unroll the sphere onto it like it\u0027s a map - cartographers have been doing this for centuries, so there\u0027s a lot of methods. That\u0027ll make the texel size uneven across the planet but there\u0027s no really easy way around that.\u003C/p\u003E\n"},{"CreatedByName":"InsaneDruid","CreatedById":137849,"CreatedDateTime":"2015-10-28T11:18:32Z","Content":"\n\u003Cp\u003EAt least on the navball, squad used an \u003Ca href=\u0022https://en.wikipedia.org/wiki/Equirectangular_projection\u0022 rel=\u0022external nofollow\u0022\u003Eequirectangular projection\u003C/a\u003E during uv mapping. So its rather likely they did it on the planets, too, especially as the equirectangular projection gives the distortion in width of texture vs width of area covered by the texture when moving from the equator to the poles.\u003C/p\u003E\u003Cp\u003ESo it depends from where your internal data model starts. If you starting with a sperical model on where you generate yur data you have to apply an equirectangular projection. If you generating data directly on a plane than you need something of a negative equirectangular projection. (or nothing at all if you can live with the fact that the generated data will be a bit distorted on the poles.)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-28T11:25:16Z\u0022 title=\u002210/28/2015 11:25  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 28, 2015\u003C/time\u003E by InsaneDruid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2015-10-28T12:24:34Z","Content":"\n\u003Cp\u003EThanks. Textures are generated for a plane shape, so I need to distord them as a \u0022second pass\u0022.\u003C/p\u003E\u003Cp\u003ENote that textures are created by a fragment shader, and converted to a texture2D via a rendertexture. I can probably write it to map the texture to a sphere directly, but I\u0027m not that good with shaders yet.\u003C/p\u003E\u003Cp\u003EIf I trust this website \u003Ca href=\u0022http://paulbourke.net/geometry/transformationprojection/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://paulbourke.net/geometry/transformationprojection/\u003C/a\u003E , the solution is to \u0022simply use the polar angles directly as the horizontal and vertical coordinates\u0022.\u003C/p\u003E\u003Cp\u003EDoesn\u0027t seems too complicated, I\u0027ll see how it turns out.\u003C/p\u003E\n"}]}