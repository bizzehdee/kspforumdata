{"TopicId":32865,"ForumId":15,"TopicTitle":"fx","CreatedByName":"Deltafee","CreatedById":32333,"CreatedDateTime":"2013-06-14T00:01:58Z","PageNum":1,"Articles":[{"CreatedByName":"Deltafee","CreatedById":32333,"CreatedDateTime":"2013-06-14T00:01:58Z","Content":"\n\u003Cp\u003EI know from the ksp wiki that there are many fxs for engines but I don\u0027t know what they are? does anyone have a complete list of fxs are?\u003C/p\u003E\n"},{"CreatedByName":"Razchek","CreatedById":62645,"CreatedDateTime":"2013-06-14T04:10:30Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Efx_exhaustFlame_blue\u003Cbr\u003Efx_exhaustFlame_blue_small\u003Cbr\u003Efx_exhaustFlame_white_tiny\u003Cbr\u003Efx_exhaustFlame_yellow\u003Cbr\u003Efx_exhaustFlame_yellow_small\u003Cbr\u003Efx_exhaustFlame_yellow_tiny\u003Cbr\u003Efx_exhaustLight_blue\u003Cbr\u003Efx_exhaustLight_yellow\u003Cbr\u003Efx_exhaustSparks_flameout\u003Cbr\u003Efx_exhaustSparks_yellow\u003Cbr\u003Efx_gasBurst_white\u003Cbr\u003Efx_gasJet_tiny\u003Cbr\u003Efx_gasJet_white\u003Cbr\u003Efx_smokeTrail_light\u003Cbr\u003Efx_smokeTrail_medium\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou could probably even use these for some interesting visuals:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Efx_splashdown\u003Cbr\u003Efx_waterSurface\u003Cbr\u003Efx_reentryTrail\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn future updates, you can use a plugin to check for these:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    // The code below was written for KSP 0.20.2\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.MainMenu, false)]\u003Cbr\u003E    public class EffectsCheck : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private static bool _init;\u003Cbr\u003E\u003Cbr\u003E        public void Update()\u003Cbr\u003E        {\u003Cbr\u003E            if (_init)\u003Cbr\u003E                return;\u003Cbr\u003E\u003Cbr\u003E            _init = true;\u003Cbr\u003E\u003Cbr\u003E            Debug.Log(\u0022Loading effects now ..\u0022);\u003Cbr\u003E\u003Cbr\u003E            Object[] effectResources = Resources.LoadAll(\u0022Effects\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (effectResources != null \u0026amp;\u0026amp; effectResources.Length \u0026gt; 0)\u003Cbr\u003E            {\u003Cbr\u003E                int fxCount = effectResources.Length;\u003Cbr\u003E                Debug.Log(string.Format(\u0022Found {0} effect{1}\u0022, fxCount, fxCount == 1 ? \u0022\u0022 : \u0022s\u0022));\u003Cbr\u003E\u003Cbr\u003E                foreach (Object effectRes in effectResources)\u003Cbr\u003E                {\u003Cbr\u003E                    Debug.Log(effectRes.name);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E                Debug.LogError(\u0022Nothing found.\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-14T04:17:10Z\u0022 title=\u002206/14/2013 04:17  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 14, 2013\u003C/time\u003E by Razchek\u003C/strong\u003E\n\u003C/span\u003E\n"}]}