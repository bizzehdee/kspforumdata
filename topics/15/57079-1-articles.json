{"TopicId":57079,"ForumId":15,"TopicTitle":"Texturing Format Information (Modders Please Read!)","CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T20:15:19Z","PageNum":1,"Articles":[{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T20:15:19Z","Content":"\n\u003Cp\u003ESo I have been seeing a LOT of misinformation on the forums regarding how KSP currently (.23) handles textures/formats.\u003C/p\u003E\u003Cp\u003EPNGs:\u003C/p\u003E\u003Cp\u003EPNGs are compressed in memory, resulting in smaller, but (barely noticable) lower quality textures in-game. Mipmaps are NOT generated for these, so when viewed at a distance, they tend to \u0022shimmer\u0022\u003C/p\u003E\u003Cp\u003ETGAs:\u003C/p\u003E\u003Cp\u003ETGAs are NOT compressed in memory, resulting in huge image size. Mipmaps ARE generated, so they don\u0027t have the same problem as PNGs.\u003C/p\u003E\u003Cp\u003EMBMs:\u003C/p\u003E\u003Cp\u003EMBMs MAY be compressed, but only if the texture type is set to regular texture. Normal maps are not compressed, to preserve correct normals. Mipmaps are generated regardless. MBMs cannot be read in-game due to the texture importing setting Squad uses. \u003C/p\u003E\u003Cp\u003EAs you can see, there is a LOT of inconsistency in the texture loading Squad has implemented. By design or not, I couldn\u0027t tell you, but when modding, choose what works best for you.\u003C/p\u003E\u003Cp\u003EHappy Texturing!\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2013-12-20T20:58:50Z","Content":"\n\u003Cp\u003EMade a chart!\u003C/p\u003E\u003Cp\u003E\u0026lt;snip\u0026gt; (replaced in later post)\u003C/p\u003E\u003Cp\u003ESo funny story; KSP will automatically load jpgs, but don\u0027t tell anyone because there is literally no reason to use them\u003C/p\u003E\u003Cp\u003EPS; there have been several glitches relating to PNGs being loaded incorrectly and it causing them to take up substantially more memory than they deserve; do you know if any of these are in effect for 0.22 and 0.23? 0.23 has an updated version of Unity and I know some of the glitches were Unity\u0027s fault so hopefully they\u0027ve been eliminated.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-21T03:01:56Z\u0022 title=\u002212/21/2013 03:01  AM\u0022 data-short=\u002210 yr\u0022\u003EDecember 21, 2013\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T21:11:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EMade a chart!\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/sWTxfYu.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/sWTxfYu.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESo funny story; KSP will automatically load jpgs, but don\u0027t tell anyone because there is literally no reason to use them\u003C/p\u003E\u003Cp\u003EPS; there have been several glitches relating to PNGs being loaded incorrectly and it causing them to take up substantially more memory than they deserve; do you know if any of these are in effect for 0.22 and 0.23? 0.23 has an updated version of Unity and I know some of the glitches were Unity\u0027s fault so hopefully they\u0027ve been eliminated.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think it could be related to compression scheme... I noticed that some normal maps were not compressed, though I can\u0027t find out why (KW rocketry I think has a few normal maps that don\u0027t compress)\u003C/p\u003E\u003Cp\u003ETGAs CAN take up just as much space as MBM, but nut usually when run-line compressed.\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T21:12:56Z","Content":"\n\u003Cp\u003EAlso, TGA are not lossy. Same format as MBM almost. If anything, in-game TGAs would result in the best quality.\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2013-12-20T21:19:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rbray89\u0022 data-cite=\u0022rbray89\u0022\u003E\u003Cdiv\u003EPNGs are compressed in memory, resulting in smaller, but (barely noticable) lower quality textures in-game.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot as barely as I would like. For example, see the following picture:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://kerbalspaceprogram.com/wp/wp-content/uploads/2013/11/screenshot-spaceport.png\u0022 alt=\u0022screenshot-spaceport.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EAt the bottom edge of the golden \u0022toast\u0022 texture, you can see that there is a clearly noticeable line just breaking. And this is a scaled down version of the original screenshot. While the original PNG file is correct when viewed in any image viewer, it does show up like that in KSP. It does not happen with TGA.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2013-12-20T21:42:24Z","Content":"\n\u003Cp\u003ECorrection: Texel called BS on my PNG info (s/he had looked into it more than I) and I looked again to confirm. It turns out that it appears that only PNGs specifically flagged as UI textures internally (via Unity export), like flags, get no mipmaps. Normal PNGs (like the ones used in B9) do appear to get mipmaps. My apologies for spreading disinformation.\u003C/p\u003E\u003Cp\u003EThey do, however, get compressed to DXT, which is essentially a 16bit-color format, hence why you (blizzy) get artifacts. This is why, for example, reducing the resolution of a normal map but keeping it non-DXT results in higher quality than keeping it the same resolution but DXT compressing it.\u003C/p\u003E\u003Cp\u003EThus I eagerly await the next version of your tool, rbray, which hopefully then can be configured to resize rather than compress \u0022do-not-compress\u0022-flagged MBMs.\u003C/p\u003E\u003Cp\u003EI suggest, since MBM are relatively easily editable, that unless anyone has a compelling reason to use a different format they should use MBM, as that format (1) allows a \u0022compress/don\u0027t-compress\u0022 flag, and (2) does not have leaks or other issues in loading.\u003C/p\u003E\u003Cp\u003EGreys: Yes, Unity reads JPGs. I too have avoided mentioning that previously in order to not encourage anyone silly enough to use one. :}\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T21:52:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003ECorrection: Texel called BS on my PNG info (s/he had looked into it more than I) and I looked again to confirm. It turns out that it appears that only PNGs specifically flagged as UI textures internally (via Unity export), like flags, get no mipmaps. Normal PNGs (like the ones used in B9) do appear to get mipmaps. My apologies for spreading disinformation.\u003Cp\u003EThey do, however, get compressed to DXT, which is essentially a 16bit-color format, hence why you (blizzy) get artifacts. This is why, for example, reducing the resolution of a normal map but keeping it non-DXT results in higher quality than keeping it the same resolution but DXT compressing it.\u003C/p\u003E\u003Cp\u003EThus I eagerly await the next version of your tool, rbray, which hopefully then can be configured to resize rather than compress \u0022do-not-compress\u0022-flagged MBMs.\u003C/p\u003E\u003Cp\u003EI suggest, since MBM are relatively easily editable, that unless anyone has a compelling reason to use a different format they should use MBM, as that format (1) allows a \u0022compress/don\u0027t-compress\u0022 flag, and (2) does not have leaks or other issues in loading.\u003C/p\u003E\u003Cp\u003EGreys: Yes, Unity reads JPGs. I too have avoided mentioning that previously in order to not encourage anyone silly enough to use one. :}\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELast I checked, No PNGs AT ALL were given Mip-maps. I used KW as a benchmark. You can check the results out here: KW and B9 are used for reference. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://drive.google.com/file/d/0B1BU16LO_gj3aDYzSXFFaEl5UVU/edit?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://drive.google.com/file/d/0B1BU16LO_gj3aDYzSXFFaEl5UVU/edit?usp=sharing\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"hoojiwana","CreatedById":57079,"CreatedDateTime":"2013-12-20T21:54:23Z","Content":"\n\u003Cp\u003EI have to wonder how applicable much of this is now that 0.23 is out, especially the memory usage.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003ECorrection: Texel called BS on my PNG info (s/he had looked into it more than I) and I looked again to confirm. It turns out that it appears that only PNGs specifically flagged as UI textures internally (via Unity export), like flags, get no mipmaps. Normal PNGs (like the ones used in B9) do appear to get mipmaps. My apologies for spreading disinformation.\u003Cp\u003EThey do, however, get compressed to DXT, which is essentially a 16bit-color format, hence why you (blizzy) get artifacts. This is why, for example, reducing the resolution of a normal map but keeping it non-DXT results in higher quality than keeping it the same resolution but DXT compressing it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/YwaFalw.png\u0022 alt=\u0022YwaFalw.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis one of my older parts that I was using to compare TGA to PNG, and to show the oddness that PNGs can display. The warning label on this isn\u0027t the best example, but my parts generally lack hard lines so this was essentially the only thing I could use. Whatever causes this is much more apparent on B9 aerospace parts (before Bac9 switched to using TGA).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-20T21:59:34Z\u0022 title=\u002212/20/2013 09:59  PM\u0022 data-short=\u002210 yr\u0022\u003EDecember 20, 2013\u003C/time\u003E by hoojiwana\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-20T21:58:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hoojiwana\u0022 data-cite=\u0022hoojiwana\u0022\u003E\u003Cdiv\u003EI have to wonder how applicable much of this is now that 0.23 is out, especially the memory usage.\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/YwaFalw.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/YwaFalw.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis one of my older parts that I was using to compare TGA to PNG, and to show the oddness that PNGs can display. The warning label on this isn\u0027t the best example, but my parts generally lack hard lines anyway, whatever causes this is much more apparently on B9 aerospace parts (before the switch to TGA).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf you zoom up close does it get better? This is likely due to the Mipmap issue. When they aren\u0027t generated, the graphics card has to try and do pixel sampling on a large texture, and it usually sucks, as it just picks the closest pixel, whereas in a mipmap, the texture is resized and filtered so the graphics doesn\u0027t have to do this single pixel sample.\u003C/p\u003E\n"},{"CreatedByName":"hoojiwana","CreatedById":57079,"CreatedDateTime":"2013-12-20T22:06:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rbray89\u0022 data-cite=\u0022rbray89\u0022\u003E\u003Cdiv\u003EIf you zoom up close does it get better? This is likely due to the Mipmap issue. When they aren\u0027t generated, the graphics card has to try and do pixel sampling on a large texture, and it usually sucks, as it just picks the closest pixel, whereas in a mipmap, the texture is resized and filtered so the graphics doesn\u0027t have to do this single pixel sample.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s exactly what I was looking to show with that picture. I should make a test cube with a grid texture on it or something to show it more clearly.\u003C/p\u003E\u003Cp\u003EAnd I just double checked, the Unity settings for the texture are set to use \u0022Texture\u0022 rather than \u0022GUI\u0022.\u003C/p\u003E\n"},{"CreatedByName":"TriggerAu","CreatedById":57838,"CreatedDateTime":"2013-12-21T01:46:01Z","Content":"\n\u003Cp\u003EThanks for the information, I was planning to investigate this during my holidays for my plugins so this is really timely.\u003C/p\u003E\u003Cp\u003ESo while I\u0027m here, I\u0027ve noticed that same noise in PNG files when you use the GameDB loader. In the case of small textures for plugin labels what do people think is the best way to proceed TGA\u0027s which I can easily export from PS or MBMs where I\u0027ll need to convert the PNG (I think thats right from memory)?\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2013-12-21T03:10:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rbray89\u0022 data-cite=\u0022rbray89\u0022\u003E\u003Cdiv\u003EAlso, TGA are not lossy. Same format as MBM almost. If anything, in-game TGAs would result in the best quality.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDing\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/HZ3hF8I.png\u0022 alt=\u0022HZ3hF8I.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ESorry, at one point I misread the TGA wikipage and I keep forgetting that I\u0027ve learned otherwise\u003C/p\u003E\u003Cp\u003EUncompressed TGAs are pretty much exactly the same as MBMs, minor differences in format and not in the jenky \u0022Mu BitMap\u0022 header(?); but who uses those? Why use those? No reason, that\u0027s why.\u003C/p\u003E\u003Cp\u003ECompressed TGAs are significantly larger than PNGs, in my testing I saw between 15 and 30 times larger than PNG; but PNGs are tiny most of the time; and they were still no more than one quarter the MBM version of the same file. To me, 30 times a small thing, is a lot better than 120 times; both are negligible in the few small regards that disk size matters at all. So anyways, I feel \u0027less small\u0027 is an appropriate vague categorization.\u003C/p\u003E\u003Cp\u003EPS rbray, I don\u0027t really understand what to do with that log file of yours, could you explain?\u003C/p\u003E\u003Cp\u003EPPS VI: Revenge of the PSOne: If any of the Squad developers happen to read this post. I appreciate the potential advantages that having your own image format grant; but you have to understand that currently MBMs don\u0027t offer anything over the other formats we have access to; and at the cost of easy editability MBMs just complicate things. You\u0027d save time in the long run if you contract some beautiful peasant girl to re-export your textures in another format, dump MBM/JPG support entirely, and fix the two remaining options; might as well intentionally differentiate between them, have TGA uncompressed always, have PNG compressed always, workout MipMaps however; then we can put some things in this format and some things in the other to take advantage of the difference; since they\u0027re both compressed lossless. Textures in PNG, heightmaps in TGA? Other way around? It doesn\u0027t terribly matter.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-21T03:22:55Z\u0022 title=\u002212/21/2013 03:22  AM\u0022 data-short=\u002210 yr\u0022\u003EDecember 21, 2013\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2013-12-21T07:23:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EDing\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/HZ3hF8I.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/HZ3hF8I.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESorry, at one point I misread the TGA wikipage and I keep forgetting that I\u0027ve learned otherwise\u003C/p\u003E\u003Cp\u003EUncompressed TGAs are pretty much exactly the same as MBMs, minor differences in format and not in the jenky \u0022Mu BitMap\u0022 header(?); but who uses those? Why use those? No reason, that\u0027s why.\u003C/p\u003E\u003Cp\u003ECompressed TGAs are significantly larger than PNGs, in my testing I saw between 15 and 30 times larger than PNG; but PNGs are tiny most of the time; and they were still no more than one quarter the MBM version of the same file. To me, 30 times a small thing, is a lot better than 120 times; both are negligible in the few small regards that disk size matters at all. So anyways, I feel \u0027less small\u0027 is an appropriate vague categorization.\u003C/p\u003E\u003Cp\u003EPS rbray, I don\u0027t really understand what to do with that log file of yours, could you explain?\u003C/p\u003E\u003Cp\u003EPPS VI: Revenge of the PSOne: If any of the Squad developers happen to read this post. I appreciate the potential advantages that having your own image format grant; but you have to understand that currently MBMs don\u0027t offer anything over the other formats we have access to; and at the cost of easy editability MBMs just complicate things. You\u0027d save time in the long run if you contract some beautiful peasant girl to re-export your textures in another format, dump MBM/JPG support entirely, and fix the two remaining options; might as well intentionally differentiate between them, have TGA uncompressed always, have PNG compressed always, workout MipMaps however; then we can put some things in this format and some things in the other to take advantage of the difference; since they\u0027re both compressed lossless. Textures in PNG, heightmaps in TGA? Other way around? It doesn\u0027t terribly matter.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe MBMs do offer one thing, that is the normal map flag. That is about it.\u003C/p\u003E\n"},{"CreatedByName":"WinkAllKerb\u0026#039;\u0026#039;","CreatedById":78047,"CreatedDateTime":"2013-12-21T12:43:49Z","Content":"\n\u003Cp\u003Every interesting \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E i keep using png for testing/readability tuto purpose for now but will follow how all this evolve thanks to you all for thoose explains.\u003C/p\u003E\n"},{"CreatedByName":"swamp_ig","CreatedById":97983,"CreatedDateTime":"2014-05-22T12:34:14Z","Content":"\n\u003Cp\u003EIs there any way of co-opting anything apart from MBM to work as a normal map? Doesn\u0027t seem like it to me.\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-05-22T13:27:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022swamp_ig\u0022 data-cite=\u0022swamp_ig\u0022\u003E\u003Cdiv\u003EIs there any way of co-opting anything apart from MBM to work as a normal map? Doesn\u0027t seem like it to me.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf you use the unity KSP tool it will export it automatically I think. The file should be named something_NRM.png\u003C/p\u003E\n"},{"CreatedByName":"SpannerMonkey(smce)","CreatedById":50907,"CreatedDateTime":"2014-05-23T14:48:15Z","Content":"\n\u003Cp\u003EI have been remiss in not noticing this info before, although not about texture type I have a question about resolution, What ppm(pixels per mm) or ppi (pixels per inch) are recommended as this affects or seems to affect loading times as well? \u003C/p\u003E\u003Cp\u003Echeers in advance\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-05-23T16:03:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SpannerMonkey(smce)\u0022 data-cite=\u0022SpannerMonkey(smce)\u0022\u003E\u003Cdiv\u003EI have been remiss in not noticing this info before, although not about texture type I have a question about resolution, What ppm(pixels per mm) or ppi (pixels per inch) are recommended as this affects or seems to affect loading times as well? \u003Cp\u003Echeers in advance\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUmmm... ppm and ppi actually don\u0027t have any context (as you need a physical display surface to make sense of that info), rather you should be concerned of raw pixel dimension (ie. 512x512 px). Obviously, you will just want to try different sizes to see what works best for you. MBM and TGA will load the slowest, PNG being compressed should load the fastest.\u003C/p\u003E\u003Cp\u003EOne caveat is that you will want to use 2^n square texture sizes. (16x16, 32x32, 64x64, 128x128, 256x256, 512x512, etc) to use memory the most efficiently.\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2014-05-23T16:19:09Z","Content":"\n\u003Cp\u003EIs it a bad idea to use textures such as 2048x1024? I\u0027ve seen that in KSP mods, too.\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-05-23T16:28:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022blizzy78\u0022 data-cite=\u0022blizzy78\u0022\u003E\u003Cdiv\u003EIs it a bad idea to use textures such as 2048x1024? I\u0027ve seen that in KSP mods, too.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E(Haha mine?) It is less than ideal. If you do that, Unity automatically fills the remaining 2048x1024 with useless pixels. So while it isn\u0027t \u0022bad\u0022 it isn\u0027t really great either.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-05-23T17:27:35Z","Content":"\n\u003Cp\u003EWait wut? I thought it only did it for NPOT textures, not power-of-two but not-square textures.\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-05-23T17:30:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EWait wut? I thought it only did it for NPOT textures, not power-of-two but not-square textures.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFrom what I was reading in unity, the textures also need to be square to avoid automatic re-sizing.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-05-23T18:36:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rbray89\u0022 data-cite=\u0022rbray89\u0022\u003E\u003Cdiv\u003EFrom what I was reading in unity, the textures also need to be square to avoid automatic re-sizing.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThey just need to have \u003Ca href=\u0022http://docs.unity3d.com/Documentation/Manual/Textures.html\u0022 rel=\u0022external nofollow\u0022\u003Epower-of-two sides\u003C/a\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ETexture Sizes\u003Cp\u003EIdeally texture sizes should be powers of two on the sides. These sizes are as follows: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048 etc. pixels. The textures do not have to be square, i.e. width can be different from height. Note that each platform may impose maximum texture sizes. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-05-23T19:07:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EThey just need to have \u003Ca href=\u0022http://docs.unity3d.com/Documentation/Manual/Textures.html\u0022 rel=\u0022external nofollow\u0022\u003Epower-of-two sides\u003C/a\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh... I think the thread I was reading must have just pertained to iOS then : \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ENote that PVRTC formats require textures to be square (width equal to height), therefore final size will be upscaled to 512x512.\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-05-23T19:16:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EThey just need to have \u003Ca href=\u0022http://docs.unity3d.com/Documentation/Manual/Textures.html\u0022 rel=\u0022external nofollow\u0022\u003Epower-of-two sides\u003C/a\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EJup. And automatic resizing seems to only occur if necessary. The directx texture behind a texture resource created by unity could have 64x20 when created with that resolution on my system. NPOT is still not recommended, ofc!\u003C/p\u003E\u003Cp\u003ESome other details that surprised me/ i found interesting (though are directx specific):\u003C/p\u003E\u003Cp\u003E- There is no real RGB24. A texture created with this format usually becomes \u003Ca href=\u0022http://msdn.microsoft.com/en-us/library/windows/desktop/bb172558%28v=vs.85%29.aspx\u0022 rel=\u0022external nofollow\u0022\u003ED3DFMT_X8R8G8B8\u003C/a\u003E with still 4 byte per pixel. Thus using RGB24 to save GPU memory doesn\u0027t make sense. Its still nice to tell unity to compress to DXT1, ofc.\u003C/p\u003E\u003Cp\u003E- All textures i encountered so far were \u003Ca href=\u0022http://msdn.microsoft.com/en-us/library/windows/desktop/bb172584%28v=vs.85%29.aspx\u0022 rel=\u0022external nofollow\u0022\u003ED3DPOOL_MANAGED\u003C/a\u003E. That means all of them are backed by system ram. Making them non-readable only gets rid of Unity\u0027s own backing (for editing, i suppose). Though i don\u0027t understand why textures cannot become readable again, especially when reading/writing all pixels anyway (and at least from a DirectX point of view). This also explains how unity can survive \u0022simpler\u0022 device resets.\u003C/p\u003E\n"}]}