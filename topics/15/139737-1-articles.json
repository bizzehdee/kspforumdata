{"TopicId":139737,"ForumId":15,"TopicTitle":"Gimbal acutators help","CreatedByName":"heliobyte","CreatedById":160047,"CreatedDateTime":"2016-05-14T09:13:28Z","PageNum":1,"Articles":[{"CreatedByName":"heliobyte","CreatedById":160047,"CreatedDateTime":"2016-05-14T09:13:28Z","Content":"\n\u003Cp\u003E\nSo I\u0027ve been busy modeling quite a few engines lately, some fictional and some real-world. I made sure to model them as close to 100% identical as possible, but this presented me with a problem I had not given any thought prior to modeling.\n\u003C/p\u003E\n\u003Cp\u003E\nAll these engines, especially the real-world ones have\u00A0acutators which are used for engine\u00A0gimbal. The acutators usually consists of 6-7 components making up the different anchor points, pistons, pivots and so on. How do I go about setting up the acutators to work in the game? I know there are a few people in the community who have engines that are set up like this, and I believe they use some kind of look constraint.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, I have no idea how the hierarchy is supposed to be set up. Which parts needs to be parented to which, and which ones needs to look at each other. All of this really confuses me, and I would greatly appreciate any help and/or tutorial on how to do this.\n\u003C/p\u003E\n\u003Cp\u003E\nI think having a good tutorial on how to set up acutators would encourage a lot more people to make more realistic engines, which in turn benefits us all.\n\u003C/p\u003E\n\u003Cp\u003E\nThank you in advance to anyone willing to help out!\n\u003C/p\u003E\n"},{"CreatedByName":"nli2work","CreatedById":106805,"CreatedDateTime":"2016-05-14T18:15:36Z","Content":"\n\u003Cp\u003E\nYou have to compromise for the sake of your own sanity, unless you enjoy setting up constraints for dozens of\u00A0actuators. Numbers quickly add up considering each actuator group consists at least 2 or more pieces.\u00A0In game set up really depends on the engine. Some cheat\u00A0with single transform, while others set up individual constraints per.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027re 3 different constraints in KSP; \u003Cstrong\u003ELookAt; Position; Orientation\u003C/strong\u003E. It\u0027s not really feasible to do a step-by-step kind of tutorial as they can be combined in numerous ways to move things in game different ways.\u003Cbr\u003E\u003Cbr\u003E\u003Cstrong\u003ELookAt\u003C/strong\u003E points a transform\u0027s Z\u002B at another transform; there\u0027s no upVector control so you will get flips if the target transform moves around a lot. Almost all landing gear; wheel; leg parts use this. rotator does the looking; target gets looked-at.\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\u00A0\u00A0 \u00A0MODULE\n\u00A0\u00A0 \u00A0{\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0name = FXModuleLookAtConstraint\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0CONSTRAINLOOKFX \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0// repeat for as many as you need inside of MODULE{FXModuleLookAtConstraint}\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0{\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0targetName = getsLookedAt\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0rotatorsName = doesTheLooking\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0}\n\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cstrong\u003EPosition\u003C/strong\u003E places one transform at another transform\u0027s position.\u003Cbr\u003E\u003Cstrong\u003EOrientation\u003C/strong\u003E sets one transform\u0027s orientation to match another transform. This is in World rotation, so if mover\u0027s orientation was offset from the target, it will snap to match the target\u0027s orientation.\u003Cbr\u003E\nPosition and Orientation are both part of same module;\u00A0Position and Orientation have no offsets so if you need offset, you have to nest multiple transforms.\u003Cbr\u003E\u003Cbr\u003E\n\u00A0\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\u00A0MODULE\n\u00A0\u00A0 \u00A0{\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0name = FXModuleConstrainPosition\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0matchRotation = true\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0matchPosition = false\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0CONSTRAINFX \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0\u00A0// constrain block; repeat for as many as you need inside of MODULE{FXModuleConstrainPosition}\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0{\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0targetName = targetTransformName\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0moversName = affectedTransformName\n\u00A0\u00A0 \u00A0\u00A0\u00A0 \u00A0}\n\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-15T22:16:33Z\u0022 title=\u002205/15/2016 10:16  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 15, 2016\u003C/time\u003E by nli2work\u003C/strong\u003E\n\u003C/span\u003E\n"}]}