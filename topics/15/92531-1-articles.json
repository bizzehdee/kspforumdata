{"TopicId":92531,"ForumId":15,"TopicTitle":"Pros and Cons or Best Practice","CreatedByName":"noonespecial","CreatedById":81942,"CreatedDateTime":"2014-12-11T05:51:41Z","PageNum":1,"Articles":[{"CreatedByName":"noonespecial","CreatedById":81942,"CreatedDateTime":"2014-12-11T05:51:41Z","Content":"\n\u003Cp\u003EA simple theoretical question I was thinking about earlier.\u003C/p\u003E\u003Cp\u003EHere are three models that are visually identical, though geometrically different.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/Mtja9dP.png?1\u0022 alt=\u0022Mtja9dP.png?1\u0022\u003E\u003C/p\u003E\u003Cp\u003EYellow: Two meshes, one pass through the geometry of the other. 24 Tris.\u003C/p\u003E\u003Cp\u003EGreen: Single mesh, inset and extruded. 44 Tris.\u003C/p\u003E\u003Cp\u003EBlue: Three meshes, aligned face to face. 32 Tris.\u003C/p\u003E\u003Cp\u003EWhen rendered (AO shader), they are visually identical.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/IpdyTjH.png?1\u0022 alt=\u0022IpdyTjH.png?1\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe question: As far as KSP is concerned, are there any pros or cons to any of these practices or generally speaking, is one practice better than the other two? Or... is there even a difference at all?\u003C/p\u003E\n"},{"CreatedByName":"nli2work","CreatedById":106805,"CreatedDateTime":"2014-12-11T06:18:07Z","Content":"\n\u003Cp\u003Enegligible difference.\u003C/p\u003E\u003Cp\u003Eif you really wanna count nanoseconds, the left is the most efficient, least vertices; but some times you can get a zigzag effect where the faces intersect.\u003C/p\u003E\u003Cp\u003Emiddle is the least likely to have any render anomalies. the right one is probably identical to the middle as far as the GPU is concerned.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-11T06:28:48Z\u0022 title=\u002212/11/2014 06:28  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 11, 2014\u003C/time\u003E by nli2work\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-12-11T07:18:01Z","Content":"\n\u003Cp\u003ERendering with AO is irrelevant. Baking AO is not. If you bake AO on all of these you will get slightly different results, which get exaggerated if the pixel density is low. The best way is to have one mesh all connected. It\u0027s called a \u0022manifold\u0022. Manifold meshes (the green one) leave no AO baking artefacts where the other meshes would have some black bleedthrough where the meshes meet or intersect.\u003C/p\u003E\u003Cp\u003EObviously you can be smart about it and figure out where it\u0027s important to keep polycounts low, but afaik triangles are much much cheaper than textures, so most of the time you won\u0027t need to worry about triangles.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-12-11T08:34:23Z","Content":"\n\u003Cp\u003EDraw calls are more expensive than vertices/tris. It\u0027s better to have one mesh (one draw call) than three even if there are far fewer faces total with multiple meshes.\u003C/p\u003E\n"},{"CreatedByName":"Porkjet","CreatedById":92433,"CreatedDateTime":"2014-12-11T10:36:05Z","Content":"\n\u003Cp\u003EYou can attach seperate objects into one mesh tho and it acts as a single draw call even tho it contains disconnected sub meshes.\u003C/p\u003E\u003Cp\u003EWhats the better choice depends on the situation, on your cubic example it will add very little triangles to connect it to one mesh and wont make a visual difference, but if, for example, you wanna add a 12 segment cylinder onto a higher poly sphere, connecting the objects would require much more additional polygons, and more importantly, would totaly ruin your poly flow and mesh smoothing, so for such an example you should keep the meshes disconnected and slightly clip the cylinder into the sphere.\u003C/p\u003E\n"},{"CreatedByName":"nli2work","CreatedById":106805,"CreatedDateTime":"2014-12-11T15:57:59Z","Content":"\n\u003Cp\u003Eif you download the 30day trial of unity pro, you can use profiler to see what kind of GPU and CPU costs each setup incurs. should be very good guideline for KSP at least.. I generally go with the middle whenever possible, and left when necessary, since KSP only accepts 1 shader per object.\u003C/p\u003E\n"},{"CreatedByName":"frizzank","CreatedById":57210,"CreatedDateTime":"2014-12-11T19:22:31Z","Content":"\n\u003Cp\u003EAlso you need to think about Z fighting, that\u0027s when one mesh gets drawn on top of another and flickers. The middle mesh will not have the problem and the others will if you start to pull the camera away. Also the middle one will waste the least amount of UV space giving you a higher texture density and better mapping.\u003C/p\u003E\u003Cp\u003ETriangles are extremely cheep to render, and the least performance impacting thing you really need to worry about. So model in what ever way gives you the best visual results and is easy to work with.\u003C/p\u003E\u003Cp\u003EAs Nathan has pointed out Draw Calls are what you should be worrying about. \u003C/p\u003E\u003Cp\u003EMultiple materials on a single mesh also produce extra draw calls.\u003C/p\u003E\n"},{"CreatedByName":"noonespecial","CreatedById":81942,"CreatedDateTime":"2014-12-12T11:26:13Z","Content":"\n\u003Cp\u003EExcellent, thank you all. As many of you observed, I wasn\u0027t referring to these models, but general best practices and pros and cons of each. Might be no real difference in models like this, but when you\u0027re pushing thousands of triangles...\u003C/p\u003E\u003Cp\u003ESo from your comments, it would appear that the middle object (green) would be the best practice. It has the highest triangle count, but as you pointed out, triangles are cheap. It would also maximize UV space and require the fewest draw calls. Is that an accurate assessment?\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/Mtja9dP.png?1\u0022 alt=\u0022Mtja9dP.png?1\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T11:41:46Z\u0022 title=\u002212/12/2014 11:41  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by noonespecial\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-12-12T13:13:17Z","Content":"\n\u003Cp\u003EYes and it results in prettier AO baking.\u003C/p\u003E\n"},{"CreatedByName":"landeTLS","CreatedById":97925,"CreatedDateTime":"2014-12-12T15:08:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022noonespecial\u0022 data-cite=\u0022noonespecial\u0022\u003E\u003Cdiv\u003EExcellent, thank you all. As many of you observed, I wasn\u0027t referring to these models, but general best practices and pros and cons of each. Might be no real difference in models like this, but when you\u0027re pushing thousands of triangles...\u003Cp\u003ESo from your comments, it would appear that the middle object (green) would be the best practice. It has the highest triangle count, but as you pointed out, triangles are cheap. It would also maximize UV space and require the fewest draw calls. Is that an accurate assessment?\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/Mtja9dP.png?1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/Mtja9dP.png?1\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Edrawcalls are made irrelevant as long as you join the objects into 1(can still be many seperate meshes). \u003C/p\u003E\u003Cp\u003Ebut more efficient uv space is a really big advantage.\u003C/p\u003E\u003Cp\u003Ejoined geometry takes more time and sometimes you need to seperate those edges anyway(the edgesplit modifier in blender works by doing this, also unwrapping more complex geometry objects often requires seperating the islands anyway)\u003C/p\u003E\u003Cp\u003Emy advice for lowpoly modelling is to use a combination of the middle and the right pictured technique(but for the last one remove any faces that are hidden and extend the edge a bit into the geometry. this is mostly good when \u0022joining\u0022 mostly planar objects together, like adding some protruding portholes to a cylinder or a cube). it also allows for easier modifications since you wont need to worry about the attached geometry.\u003C/p\u003E\u003Cp\u003Ethe leftmost technique creates too much wasted uv space so i would stay away from it. \u003C/p\u003E\u003Cp\u003Efor the middle technique try to avoid using boolean operations for joining(if you do use them, make sure you clean up the geometry afterwards or you will likely run into artifacts and difficult unwraps) its usually better to model the extrusions/cavities with the help of shrinkwrap modifiers \u002B vertex slide etc.. \u003C/p\u003E\u003Cp\u003Eif you are baking ao directly from your lowpoly models it is also preferred to model in all medium to larger details.\u003C/p\u003E\u003Cp\u003Euv space effectivity is most important(if it is a big detail, it is almost always better to model it in)\u003C/p\u003E\u003Cp\u003Ehope this helps\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T15:10:59Z\u0022 title=\u002212/12/2014 03:10  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by landeTLS\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"nli2work","CreatedById":106805,"CreatedDateTime":"2014-12-12T15:20:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022noonespecial\u0022 data-cite=\u0022noonespecial\u0022\u003E\u003Cdiv\u003ESo from your comments, it would appear that the middle object (green) would be the best practice. It has the highest triangle count, but as you pointed out, triangles are cheap. It would also maximize UV space and require the fewest draw calls. Is that an accurate assessment?\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/Mtja9dP.png?1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/Mtja9dP.png?1\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes that\u0027s the basics. # of shaders; size of the textures; smoothing groups; UV layouts; all affect the rendering costs per frame, strictly speaking. biggest bottle neck is texture size and # of textures. geometry is practically free. I subdivided those different setups to 9~12k triangles each, and they sit around 0.2ms per frame, no different than if they are 12~48 triangles\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-12T15:46:34Z","Content":"\n\u003Cp\u003EI believe some maniac did a geometry test to see how much was too much. I can\u0027t find the thread now, but KSP ate a lot of polys (it was either 90,000 or 900,000 IIRC) before things got slow. I tend to aim for the middle setup as much as I can too, btw. \u003C/p\u003E\u003Cp\u003EAn enlightening discussion, guys - thanks \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"winn75","CreatedById":52183,"CreatedDateTime":"2014-12-20T02:05:16Z","Content":"\n\u003Cp\u003EIf I need to extrude a cube out of a quad surface, or a 32 cylinder out of a 32 vetices circle then i\u0027d use the second method.\u003C/p\u003E\u003Cp\u003EFor 32 cylinder out of a quad... i\u0027d use the third method and extend the edge a bit inside the geometry as its more time saving than complex connexions.\u003C/p\u003E\u003Cp\u003EImo work time is one of the most costly element in modeling, so keep it simple \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAlso, if you use smooth shading, second method can sometime generate weird shaped shadow unless you planned to use edge split modifier.\u003C/p\u003E\n"}]}