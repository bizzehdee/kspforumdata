{"TopicId":155354,"ForumId":15,"TopicTitle":"Mesh rotated 180\u00B0 in Unity, vs. Blender \u0026amp; game","CreatedByName":"Wyzard","CreatedById":162363,"CreatedDateTime":"2017-01-21T15:06:34Z","PageNum":1,"Articles":[{"CreatedByName":"Wyzard","CreatedById":162363,"CreatedDateTime":"2017-01-21T15:06:34Z","Content":"\n\u003Cp\u003E\nI\u0027m learning about how to make models for KSP parts using Blender and PartTools, using \u003Ca href=\u0022https://www.reddit.com/r/KerbalSpaceProgram/comments/3vpe6v/unityblender_part_coordinate_cheat_sheet/\u0022 rel=\u0022external nofollow\u0022\u003Ethis \u0022cheat sheet\u0022 by RoverDude\u003C/a\u003E as a reference for how things should be oriented, and I\u0027m a bit confused because the orientation of my meshes doesn\u0027t entirely match what I\u0027d expect based on that diagram.\n\u003C/p\u003E\n\u003Cp\u003E\nFor the sake of example, here\u0027s a simple mesh in Blender:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022DZ4Vvo6.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/DZ4Vvo6.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nNotice the axes in the corner: I made it in what I think of as the typical orientation in Blender, with the X-axis pointing to the right and the Y-axis pointing upward when the model is viewed from the top.\u00A0 But RoverDude\u0027s cheat sheet shows the opposite orientation, with the X-axis pointing left and Y-axis pointing down when viewed from the top, so here\u0027s another view of the same model with the camera in a different position:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022jlELKAk.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/jlELKAk.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThe axes here match the ones shown for Blender on the cheat sheet.\n\u003C/p\u003E\n\u003Cp\u003E\nNow I import into Unity, which applies an automatic default rotation of -90 degrees around the X-axis to turn Blender\u0027s Z-up convention into Unity\u0027s Y-up:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022yoZxQGg.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/yoZxQGg.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u2026but the object looks like this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022Uz6729Q.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/Uz6729Q.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThe axes match what\u0027s shown for Unity on RoverDude\u0027s cheat sheet, but the model appears to be rotated 180\u00B0 around the Y-axis compared to the second Blender image above, which confuses me: I\u0027d expect them to match, based on the axes in the diagram.\n\u003C/p\u003E\n\u003Cp\u003E\nThen I export this model to a .mu file using PartTools.\u00A0 I have an empty GameObject with the PartTools component attached, with the cube model as a child object.\u00A0 I add a simple .cfg file to load the .mu, start the game, and get this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022DVUJsmg.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://i.imgur.com/DVUJsmg.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nNow we\u0027re looking at the back of the cube again.\u00A0 Based on the cheat sheet, this is consistent with the second Blender image above, but not with how it\u0027s displayed in the Unity editor.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m left wondering two things:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nFIrst, why does the part appear with a different orientation in the Unity editor than it does in Blender and the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E?\u00A0 Are the axes in RoverDude\u0027s diagram incorrect, or am I misunderstanding something, or maybe importing my model incorrectly?\n\u003C/li\u003E\n\u003Cli\u003E\nSecond, how should I orient my mesh in Blender?\u00A0 If I want the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E image above to show the cube\u0027s front face instead of its back, is it OK to just put a 180\u00B0 Y-axis rotation in the Transform block in Unity, or is it preferable to actually turn the whole thing around in Blender?\u00A0 How do experienced modelers do this?\n\u003C/li\u003E\n\u003C/ul\u003E\n"},{"CreatedByName":"InsaneDruid","CreatedById":137849,"CreatedDateTime":"2017-01-21T23:08:17Z","Content":"\n\u003Cp\u003E\nEasy way: just model everything in blender with z up and y back (the normal mode in blender).\n\u003C/p\u003E\n\u003Cp\u003E\nThen export to fbx with the following\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022exporta7xia.png\u0022 class=\u0022ipsImage\u0022 src=\u0022https://abload.de/img/exporta7xia.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nAs you can see. the exporter already addresses the problem with the \u003Cem\u003EForward: -z forward\u003C/em\u003E and \u003Cem\u003EUP: Y Up\u003C/em\u003E setting (this is even selected by default). This way your model will be imported fine with the correct orientation in unity. Only thing where you need to think is when setting up empty transforms in blender and want to align thrust axis, and smoke/exhaust fx axis.\n\u003C/p\u003E\n\u003Cp\u003E\nOne tip: make an empty transform and set all your meshes and empty transforms (for said exhaust fx, nodes, etc) as children of this empty. This way the said empty will define the origin of your model, so you don\u0027t even need to centre it around the actual origin in blender and unity but can freely position it in your scene. For example:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022exportexamplexkxbb.png\u0022 class=\u0022ipsImage\u0022 height=\u0022529\u0022 src=\u0022https://abload.de/img/exportexamplexkxbb.png\u0022 width=\u00221000\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nAll the objects that form the capsule with all its antennas etc are children of the empty named \u0022va_capsule_origin\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT: and yes, if you want your model rotated in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003Evab\u003C/abbr\u003E, rotate it in blender or unity (i usually try to set up as much as possible in blender).\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-01-21T23:10:24Z\u0022 title=\u002201/21/2017 11:10  PM\u0022 data-short=\u00227 yr\u0022\u003EJanuary 21, 2017\u003C/time\u003E by InsaneDruid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Wyzard","CreatedById":162363,"CreatedDateTime":"2017-01-23T02:57:12Z","Content":"\n\u003Cp\u003E\nI\u0027d been importing the .blend file directly to Unity (which automatically runs it through Blender\u0027s FBX exporter), but I tried manually exporting to FBX instead and the result is the same \u2014 the model is still rotated 180\u00B0 in the Unity editor compared to how the \u0022cheat sheet\u0022 indicates it\u0027s supposed to be.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso interestingly, if I import the .mu file back into Blender using \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/40056-11x-blender-mu-importexport-addon-v100/\u0022 rel=\u0022\u0022\u003Etaniwha\u0027s Blender .mu importer\u003C/a\u003E, it\u0027s rotated 180\u00B0 (around Blender\u0027s Z-axis) compared to the original.\n\u003C/p\u003E\n"},{"CreatedByName":"InsaneDruid","CreatedById":137849,"CreatedDateTime":"2017-01-23T10:22:19Z","Content":"\n\u003Cp\u003E\nThe cheat sheet is just wrong. Unity uses a left-handed coordinate system. Blender uses a right-handed one.\n\u003C/p\u003E\n"},{"CreatedByName":"/not/pol/","CreatedById":172548,"CreatedDateTime":"2017-01-29T14:14:20Z","Content":"\n\u003Cp\u003E\nyou can change the coord system in blender. question is which one is left and which one is right(i swear its not political.)\n\u003C/p\u003E\n"},{"CreatedByName":"InsaneDruid","CreatedById":137849,"CreatedDateTime":"2017-01-29T17:29:40Z","Content":"\n\u003Cp\u003E\nI don\u0027t think you can make blender use a left handed one. Imho (!) you can change the units, but not the axis.\n\u003C/p\u003E\n"},{"CreatedByName":"Enceos","CreatedById":110725,"CreatedDateTime":"2017-02-01T14:41:17Z","Content":"\n\u003Cp\u003E\nUnity works fine with blender models, I see no need to export as .fbx\n\u003C/p\u003E\n\u003Cp\u003E\nThe pros side is that you can tweak your model anytime during the workflow without extra steps. I always adjust the rotation of my prefabs in Unity rather than in Blender.\n\u003C/p\u003E\n"},{"CreatedByName":"InsaneDruid","CreatedById":137849,"CreatedDateTime":"2017-02-07T14:37:00Z","Content":"\n\u003Cp\u003E\nI tried to implement the idea of just importing blender models directly into unity. The reasons why I did not stick with it are:\n\u003C/p\u003E\n\u003Cp\u003E\nVersion control. I like to save early, save often keeping older versions of the blend files.\n\u003C/p\u003E\n\u003Cp\u003E\nI tend to work with big blend files that contain all the parts of a project. The whole Proton with every part is just one file. I tried importing it in unity -\u0026gt; took ages. Reasoning for this is that it allows me to model a project as a whole, then splitting it up and exporting the single models out of it. Especially during the initial development I carry a lot of helper structures, shrinkwrap targets, baking sources and a metric ton of image empties with me. Combined with the first point -\u0026gt; current folder size of my blend files for the TKS is 5GB that i would carry around in unity.\n\u003C/p\u003E\n\u003Cp\u003E\nAnother level of backup due to the presence of the fbx files on another drive.\n\u003C/p\u003E\n"},{"CreatedByName":"Wyzard","CreatedById":162363,"CreatedDateTime":"2017-02-08T03:28:51Z","Content":"\n\u003Cp\u003E\nFollowing up, I found \u003Ca href=\u0022https://i.imgur.com/3eo1ww7.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ethis image\u003C/a\u003E that shows the actual coordinate system orientation in Unity and in KSP.\u00A0 The X-axis actually points toward the launchpad, not away from it as RoverDude\u0027s \u0022cheat sheet\u0022 shows.\u00A0 Seems like the cheat sheet is incorrect (which surprises me, since RoverDude generally knows what he\u0027s doing).\n\u003C/p\u003E\n\u003Cp\u003E\nThe actual relationship between the Blender and Unity coordinate systems seems to be that the handedness conversion flips the X-axis, and the 90-degree rotation around X, automatically applied to Blender models imported in Unity, transforms Blender\u0027s Z-up convention to Unity\u0027s Y-up.\u00A0 If you orient the camera in Blender so that Z points up and X points to the left, you\u0027re facing toward the flag wall in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E.\n\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2017-10-03T02:21:24Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222948413\u0022 data-ipsquote-contentid=\u0022155354\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221486524531\u0022 data-ipsquote-userid=\u0022162363\u0022 data-ipsquote-username=\u0022Wyzard\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 2/7/2017 at 9:28 PM, Wyzard said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFollowing up, I found \u003Ca href=\u0022https://i.imgur.com/3eo1ww7.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ethis image\u003C/a\u003E that shows the actual coordinate system orientation in Unity and in KSP.\u00A0 The X-axis actually points toward the launchpad, not away from it as RoverDude\u0027s \u0022cheat sheet\u0022 shows.\u00A0 Seems like the cheat sheet is incorrect (which surprises me, since RoverDude generally knows what he\u0027s doing).\n\u003C/p\u003E\n\u003Cp\u003E\nThe actual relationship between the Blender and Unity coordinate systems seems to be that the handedness conversion flips the X-axis, and the 90-degree rotation around X, automatically applied to Blender models imported in Unity, transforms Blender\u0027s Z-up convention to Unity\u0027s Y-up.\u00A0 If you orient the camera in Blender so that Z points up and X points to the left, you\u0027re facing toward the flag wall in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nKeywords, BLender, Unity, Axes, Axis (I am writing this because I seem to keep forgetting this and look up answer here on KSP forum, so I decided to create a mathematical definition of the problem).\n\u003C/p\u003E\n\u003Cp\u003E\nThis is what I have learned trying to position attachment nodes.\n\u003C/p\u003E\n\u003Cp\u003E\nBlender X\u00A0 become KSP - X. That means if you create a box of size 1 with one outward facing side on the x = 0\u00A0 plane and another at x = 1 plane then any \u0022attach_node\u0022 that is flush with the \u0022x\u0022 walls will have x coordintates of x = 0 and x = \u003Cstrong\u003E-1\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBlender Y becomes KSP -Z. That means if two more walls are y = 0 and y =1 then and \u0022node_stack\u0022 that is flush will have z coordinates of z = 0 and z = -1\n\u003C/p\u003E\n\u003Cp\u003E\nBlender Z becomes KSP Y.\u00A0 That means if last two walls are z= 0 and z = 1 then they will become y = 0\u00A0 and y = 1\n\u003C/p\u003E\n\u003Cp\u003E\nSo lets imaging a blender cube with 8\u00A0 xyz\u00A0 vertices. I have intentionally offset the center of the cube from the origin. the center of this cube in blender is 0.5, 0.5, 0.5\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Ex,y,z vertices (in blender)\n\n1. 0,0,0\n2. 1,0,0\n3. 0,1,0\n4. 1,1,0\n5. 0,0,1\n6. 1,0,1\n7. 0,1,1\n8. 1,1,1\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThese vertices can form the 6 faces of a cube in blender. To make this cube set the 3D cursor in blender to xyz 0.5, 0.5, 0.5. The create a cube of radius 0.5.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eface\t\tplane(in Blender)\t\tvertices (see above)\nA\t\t\tx = 0\t\t\t\t1, 3, 5, and 7\nB\t\t\ty = 0 \t\t\t\t1, 2, 5, and 6\nC\t\t\tz = 0\t\t\t\t1, 2, 3, and 4\nD \t\t\tx = 1\t\t\t\t2, 4, 6, and 8\nE\t\t\ty = 1\t\t\t\t3, 4, 7, and 8\t\nF\t\t\tz = 1\t\t\t\t5, 6, 7, and 8\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow if you are going to make nodes on the center of each face (A, B, C, D, E, F) you will\u00A0 need to make the following script in your cfg file.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E    node_stack_A = 0.00, 0.5, -0.5, 1.0, 0.0, 0.00, 1   \\\\-KSP x\u002B orientation faces east, \u0027090 in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E is derived from blender x-\n    node_stack_B = -0.5, 0.5, 0.00, 0.0, 0.0, 1.0, 1   \\\\-KSP z\u002B orientation faces north, \u0027000 in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E is derived from blender y-\n    node_stack_C = -0.5, 0.00, -0.5, 0.0, -1.0, 0, 1  \\\\-KSP y- orientation faces down, -\u0027090 pitch in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E is derived from blender z-\n    node_stack_D = -1.00, 0.5, -0.5, -1.0, 0.0, 0.00, 1 \\\\-KSP x-negative orientation faces west \u0027270 in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E is derived from blender x\u002B\n    node_stack_E = -0.5, 0.5, -1.00, 0.0, 0.0, -1.0, 1 \\\\-KSP z-negative orientation faces south \u0027180 in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E is derived from blender y\u002B\n    node_stack_F = -0.5, 1.00, -0.5, 0.0, 1.0, 0, 1 \\\\-KSP y\u002B orientation faces up is derived from blender z\u002B\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThus no direction in blender holds true in KSP. To put is simple the chirality of the axes in blender and Unity are mirror images and are not superimposable.\u00A0 You cannot simply flip by -90 degrees on X axis to fix vertical usage problem because this does not change chirality. If unity does sign reverse one set of coordinates, the the model you produce in KSP will be a chiral image of the model created in blender.\n\u003C/p\u003E\n\u003Cp\u003E\nThe problem half lies in blender and unity, and is not due to the -90 rotation on the X-axis. There are two ways (chirality) of displaying X\u002B, Y\u002B and Z\u002B orientations. When looking down from Z\u002B perspective X\u002B can be clockwise or counterclockwise of Y. In chemistry these are known as stereo isomers and each are valid (e.g. d-amino acids versus l-amino acids). To put is quite simply blender and unity coordinate systems is a mirror image of each and cannot be superimposed. Blender uses an x\u002B axis that is clockwise from y\u002B axis when viewed from a \u002Bz position, whereas blender uses a x\u002B axis that is counterclockwise of y\u002B axis when viewed from the z\u002B axis.\u00A0 Therefore Unity could not just rotate around x axis by 90 degrees, it would actually have to invert an axis in order to fix the problem during the import and create a chirality representative in some dimension of blender. .\n\u003C/p\u003E\n\u003Cp\u003E\nI hope this explains this. I agree its a major pain in the ___. I always seem to forget and have to go look it up.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}