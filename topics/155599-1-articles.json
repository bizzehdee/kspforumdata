{"TopicId":155599,"ForumId":29,"TopicTitle":"Suicide Burn Code","CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-01-26T12:32:06Z","PageNum":1,"Articles":[{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-01-26T12:32:06Z","Content":"\n\u003Cp\u003E\nHi guys!\n\u003C/p\u003E\n\u003Cp\u003E\nI wanted to update Kerbal Engineer Redux to handle \u0022real\u0022 suicide burns, namely suicide burns that start out with a horizontal velocity component. I tried looking around the interwebs for examples or math for this, but all I ever found was \u0022vertical-only\u0022-suicide burns.\n\u003C/p\u003E\n\u003Cp\u003E\nThen I stumbled upon this gem in MechJeb2:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Estatic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESuicideBurnCountdown\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EOrbit\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E orbit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EVesselState\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EVessel\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vessel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EvesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EmainBody \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eorbit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EPeA\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EDouble\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EPositiveInfinity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E angleFromHorizontal \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E90\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EVector3d\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAngle\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Evessel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esrf_velocity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eup\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\tangleFromHorizontal \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMuUtils\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EClamp\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EangleFromHorizontal\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E90\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sine \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ESin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EangleFromHorizontal \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUtilMath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EDeg2Rad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Elocalg\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E T \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ElimitedMaxThrustAccel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E effectiveDecel \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.5\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sine \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EMath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ESqrt\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E((\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E4\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ET \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E T \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E g\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E decelTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EspeedSurface \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E/\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E effectiveDecel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\u003C/span\u003E\u003Cspan\u003EVector3d\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E estimatedLandingSite \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003E\u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0.5\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E decelTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vessel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esrf_velocity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E terrainRadius \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EmainBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ERadius\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EmainBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ETerrainAltitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EestimatedLandingSite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Edouble\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E impactTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etry\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\timpactTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E orbit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ENextTimeOfRadius\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EvesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E terrainRadius\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ecatch\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EArgumentException\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E impactTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E decelTime \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E/\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vesselState\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSo this piece of code here works like a charm. Except for minor errors, this provides a rock-solid suicide burn countdown timer. And obviously there is some math behind it (I mean look at all the sine\u0027s and square roots!). I don\u0027t really understand the math here though, and I haven\u0027t seen *anything* that looks remotely similar.\n\u003C/p\u003E\n\u003Cp\u003E\nSo instead of copy-pasting it as a black box and hoping for the best, I thought I would ask you guys, if someone could help me understanding this fine piece of math.\n\u003C/p\u003E\n\u003Cp\u003E\nI looked at the git blame, and it seems that a guy named \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/1156-the_duck/\u0026amp;do=hovercard\u0022 data-mentionid=\u00221156\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/1156-the_duck/\u0022 rel=\u0022\u0022\u003E@The_Duck\u003C/a\u003E\u00A0or\u00A0\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75656-meumeu/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275656\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75656-meumeu/\u0022 rel=\u0022\u0022\u003E@Meumeu\u003C/a\u003E\u00A0is the original author. Are you still around?\n\u003C/p\u003E\n\u003Cp\u003E\nAnd obviously, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257146\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57146-sarbian/\u0022 rel=\u0022\u0022\u003E@sarbian\u003C/a\u003E\u00A0is the current MechJeb maintainer, so he might know what\u0027s going on?\n\u003C/p\u003E\n\u003Cp\u003E\nAny help would be appreciated.\n\u003C/p\u003E\n\u003Cp\u003E\nCheers\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-01-26T12:35:43Z\u0022 title=\u002201/26/2017 12:35  PM\u0022 data-short=\u00227 yr\u0022\u003EJanuary 26, 2017\u003C/time\u003E by Kobymaru\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2017-01-26T13:50:57Z","Content":"\n\u003Cp\u003E\neffectiveDecel makes no sense even after drawing a scetch.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-02-13T22:45:22Z\u0022 title=\u002202/13/2017 10:45  PM\u0022 data-short=\u00227 yr\u0022\u003EFebruary 13, 2017\u003C/time\u003E by Boris-Barboris\u003C/strong\u003E\n\u003Cbr\u003Egrammar\n\u003C/span\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-01-26T15:12:21Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222935026\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221485438657\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\neffectiveDecel makes no sence even after drawing a scetch.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah. But it works well enough, so there\u0027s gotta be at least some sense.\n\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2017-01-26T16:09:11Z","Content":"\n\u003Cp\u003E\nHmmm, not sure I have an answer, but see my comments in line:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Epublic static double SuicideBurnCountdown(Orbit orbit, VesselState vesselState, Vessel vessel)\n{\n\t//make sure we have a vessel reference\n\tif (vesselState.mainBody == null) return 0;\n\t//make sure our orbit actually will hit the ground. Note this check assumes the planet is a perfect sphere with ground always at zero altitdue.\n\tif (orbit.PeA \u0026gt; 0) return Double.PositiveInfinity;\n\n\t//how far off horizontal are we for our thrust vector?  \n\tdouble angleFromHorizontal = 90 - Vector3d.Angle(-vessel.srf_velocity, vesselState.up);\n\t//sanity check that doesn\u0027t really work, see my comments below\n\tangleFromHorizontal = MuUtils.Clamp(angleFromHorizontal, 0, 90);\n\t//Untiy does math in radians for some reason so convert\n\tdouble sine = Math.Sin(angleFromHorizontal * UtilMath.Deg2Rad);\n\t//current force of gravity\n\tdouble g = vesselState.localg;\n\t//current available max thrust. This is calculated elsewhere.\n\tdouble T = vesselState.limitedMaxThrustAccel;\n\t\n\t//now this is a mess, see my comments below\n\tdouble effectiveDecel = 0.5 * (-2 * g * sine \u002B Math.Sqrt((2 * g * sine) * (2 * g * sine) \u002B 4 * (T * T - g * g)));\n\t//we know how fast we can decel, find out how long it takes us to stop\n\tdouble decelTime = vesselState.speedSurface / effectiveDecel;\n\t\n\t//take a guess at our landing site, this won\u0027t be too accurate but close enough\n\tVector3d estimatedLandingSite = vesselState.\u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E \u002B 0.5 * decelTime * vessel.srf_velocity;\n\t//get height of terrain at our estimated impact site, note no check for ocean\n\tdouble terrainRadius = vesselState.mainBody.Radius \u002B vesselState.mainBody.TerrainAltitude(estimatedLandingSite);\n\tdouble impactTime = 0;\n\ttry\n\t{\n\t\t//set impactTime to equal the time our *current* orbit intersects that altitude, so without a burn.\n\t\timpactTime = orbit.NextTimeOfRadius(vesselState.time, terrainRadius);\n\t}\n\tcatch (ArgumentException)\n\t{\n\t\treturn 0;\n\t}\n\t//actually return how long our suicide burn will take\n\treturn impactTime - decelTime / 2 - vesselState.time;\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nFirst, this code makes a lot of assumptions. For just displaying a \u0022Suicide Burn Time\u0022 number it gets away with them, but I\u0027m not sure I\u0027d tie this directly into a control circuit. You say it\u0027s for \u003Cabbr title=\u0022Kerbal Engineer Redux (mod)\u0022\u003EKER\u003C/abbr\u003E so no issue there.\n\u003C/p\u003E\n\u003Cp\u003E\nNotably this code assumes we are already in a mostly vertical descent on final approach. Some of the numbers returned are \u0022close enough\u0022 in that case, but go out of wack otherwise.\n\u003C/p\u003E\n\u003Cp\u003E\nif (orbit.PeA \u0026gt; 0) return Double.PositiveInfinity; -\u0026gt; No check for mountains. Are you in a low orbit around the Mun and have the bad luck of intersecting a mountain range several KM high? Sorry, this code thinks you will miss them as it checks current orbit against sea level to see if you are going to hit the ground.\n\u003C/p\u003E\n\u003Cp\u003E\ndouble angleFromHorizontal = 90 - Vector3d.Angle(-vessel.srf_velocity, vesselState.up); -\u0026gt; Assumes our engines are always point in a downwards direction even if they are pointing up. So if your engines are point 45\u00B0 above the horizon, this line will think your engines are 45\u00B0 below the horizon.\n\u003C/p\u003E\n\u003Cp\u003E\nVector3d estimatedLandingSite = vesselState.\u003Cabbr title=\u0022Center of Mass\u0022\u003ECoM\u003C/abbr\u003E \u002B 0.5 * decelTime * vessel.srf_velocity; -\u0026gt; Guess our landing site based on our *currently available* horizontal thrust based on how far off vertical we are. Are we almost vertical on final approach? Close enough. Are we higher up with a significant sideways speed remaining with vessel off vertical? Will be way out of wack. Player doesn\u0027t see this so probably not an issue.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow for the kicker, and I can\u0027t fully parse this line:\n\u003C/p\u003E\n\u003Cp\u003E\ndouble effectiveDecel = 0.5 * (-2 * g * sine \u002B Math.Sqrt((2 * g * sine) * (2 * g * sine) \u002B 4 * (T * T - g * g)));\n\u003C/p\u003E\n\u003Cp\u003E\nBreaking it down, but I\u0027m not sure of my logic here.\n\u003C/p\u003E\n\u003Cp\u003E\nFirst, get rid of all the numbers, they may be needed for accuracy in the math but for figuring the logic out we can ignore them, so:\n\u003C/p\u003E\n\u003Cp\u003E\ndouble effectiveDecel =\u00A0 -1 * g * sine \u002B Math.Sqrt((g * sine) * (g * sine) \u002B (T * T - g * g)));\n\u003C/p\u003E\n\u003Cp\u003E\nSo inside the square root we are left with two pythagoreas calcs. The first is our available thrust after accounting for gravity: t^2 = T^2 - g^2\n\u003C/p\u003E\n\u003Cp\u003E\nThen the second is the g*sine, so x^2 = (g*sine)^2 \u002B t^2\n\u003C/p\u003E\n\u003Cp\u003E\nThat is our effective thrust, so we then subtract gravity (-1 * g *sine) from it again?\n\u003C/p\u003E\n\u003Cp\u003E\nThat makes no sense.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s also the best explanation I can come up with so I\u0027m stumped.\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-01-26T19:21:09Z","Content":"\n\u003Cp\u003E\nThat code predates me \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-01-26T20:52:59Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFirst, this code makes a lot of assumptions. [...] You say it\u0027s for \u003Cabbr title=\u0022Kerbal Engineer Redux (mod)\u0022\u003EKER\u003C/abbr\u003E so no issue there.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt is for \u003Cabbr title=\u0022Kerbal Engineer Redux (mod)\u0022\u003EKER\u003C/abbr\u003E, but that doesn\u0027t mean we can\u0027t deconstruct the assumptions and make it more precise as we go.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-size:14px;font-style:normal;font-weight:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);float:none;\u0022\u003Edouble angleFromHorizontal = 90 - Vector3d.Angle(-vessel.srf_velocity, vesselState.up); -\u0026gt; Assumes our engines are always point in a downwards direction even if they are pointing up. So if your engines are point 45\u00B0 above the horizon, this line will think your engines are 45\u00B0 below the horizon.\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI am not sure about that. I think\u00A0\u003Cspan style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-size:14px;font-style:normal;font-weight:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);float:none;\u0022\u003EvesselState.up is not the vessels \u0022up\u0022 direction, it\u0027s the direction of \u0022up\u0022 in general, away from the current main bodies\u00A0\u003C/span\u003Ecenter of gravity.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt\u0027s also the best explanation I can come up with so I\u0027m stumped.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s alright, apparently everyone is. Thanks for your insight!\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222935300\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221485458469\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat code predates me \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nInteresting. I guess the hunt for the truth begins!\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-01-26T21:08:13Z\u0022 title=\u002201/26/2017 09:08  PM\u0022 data-short=\u00227 yr\u0022\u003EJanuary 26, 2017\u003C/time\u003E by Kobymaru\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Poodmund","CreatedById":128643,"CreatedDateTime":"2017-01-26T21:09:05Z","Content":"\n\u003Cp\u003E\nThe fact that your acceleration and mass are changing constantly, its very difficult to calculate this way.\n\u003C/p\u003E\n\u003Cp\u003E\nComing from a different angle, would there be any point in raycasting from the \u003Cabbr title=\u0022Center of Thrust\u0022\u003ECoT\u003C/abbr\u003E along the thrust vector to see if it hits the currently orbited body and readout the distance to surface and angle of incidence on the fly? Is that even possible?\n\u003C/p\u003E\n"},{"CreatedByName":"flywlyx","CreatedById":64436,"CreatedDateTime":"2017-01-27T01:01:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222935119\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221485446951\u0022 data-ipsquote-userid=\u002281549\u0022 data-ipsquote-username=\u0022Diazo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, Diazo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat is our effective thrust, so we then subtract gravity (-1 * g *sine) from it again?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat is the gravity during your suicide burn,\u00A0integral of cosine *g.\n\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2017-01-27T14:25:51Z","Content":"\n\u003Cp\u003E\nI\u0027m not sure why the solution in MJ2 code, it spells to me about computing the root values for time in an equation derived from newtonian mechanics. However there are a number of issues with such approach, mainly due to values for gravity being a function of altitude, and vessel acceleration a function of vessel mass. To achieve a better solution for the powered descent problem (suicide burn being the limit with a powered descent when no margin exists), it is possible to run a simulation in time of the descent (e.g. \u003Ca href=\u0022http://www.braeunig.us/apollo/LM-descent.htm\u0022 rel=\u0022external nofollow\u0022\u003Eas done here\u003C/a\u003E).\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, I believe a simpler solution exists based on orbital energy (though haven\u0027t yet found it applied to this problem anywhere). Let me consider just the vertical components for sake of simplicity. Given a specific initial altitude (zi) and initial vertical speed component (vi) of a craft with mass m, is possible to easily compute the total initial orbital energy Ei = m * (1/2 *vi^2 - Gk*M/(R\u002Bzi)), (Gk = universal gravitational constant = 6.67408E-11, M = mass of mainbody, R = radius of mainbody). Of course we also know the final energy at altitude = 0 and speed = 0 (apart from the horizontal speed component with a rotating body that we can dismiss for now), Ef = - Gk M m /R.\n\u003C/p\u003E\n\u003Cp\u003E\nNow the difference in energy Ef - Ei is exactly what we need to provide to have the craft stop at altitude 0. Such energy difference is also known as Work and is easily applied when a constant Force (Thrust in our case) is applied along the direction the vessel moves: W = F * (zb - zf) (zb being the altitude where 100% thrust must be applied, or burn to begin). That way is immediate to find zb from Work; having zb and using newtonian mechanic the speed at burn start vb = RADQ(2/m*(Ei - potential energy at zb))\u00A0 = RADQ(2/m*(Ei \u002BGkMm/(R\u002Bzb)). With vb is then easy to compute time of burn tb = vb / (Thrust/m - GkM/(R\u002Bzb)^2). Of course, if Time to Impact is already known (simple newtonian mechanic again while no thrust is applied), subtracting the time of burn tb gives the time left before the suicide burn. If solving for horizontal as well, there is need to consider thrust applied retrograde, craft pitch changes while horizontal speed is matched to the body surface speed and thrust is applied by sine and cosine of pitch to the vertical and horizontal portions of the problem. Again a simple solution goes with energy and work, the total work being the composition of horizontal work required to match horizontal speed and vertical work as above.\n\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-03-24T17:44:08Z","Content":"\n\u003Cp\u003E\nHi, a little update on my endevour:\n\u003C/p\u003E\n\u003Cp\u003E\nI have implemented the \u0022MechJeb2-version\u0022 into KerbalEngineer in this branch:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/fat-lobyte/KerbalEngineer/tree/suicide-mechjeb\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/fat-lobyte/KerbalEngineer/tree/suicide-mechjeb\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe timer works reasonably well, but I had to change the definition of Altitude and Distance \u003Cimg alt=\u0022:(\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 title=\u0022:(\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nAltitude: \u0022altitude when to start a suicide burn\u0022 -\u0026gt; \u0022Altitude lost during burn until velocity reaches 0\u0022\u003Cbr\u003E\nDistance: \u0022distance to the point at which to start a suicide burn.\u0022 -\u0026gt;\u00A0\u0022Distance above ground after a suicide burn\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nNote that both definitions are equivalent at the time of the start of the burn - but only then, not before. Turns out it\u0027s pretty hard to calculate the Altitude lost.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI am also currently preparing a different approach: there is a method of calculating the velocity and time of a gravity turn as a function of the angle, for constant \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://globaljournals.org/GJSFR_Volume12/6-Computational-Algorithm-for-Gravity.pdf\u0022 rel=\u0022external nofollow\u0022\u003EComputational Algorithm for Gravity Turn Maneuver By M. A. Sharaf \u0026amp; L.A.Alaqal\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThere is a closed form for the burn duration from the initial conditions, but unfortunately not closed form for altitude lost. So I decided to implement that algorithm in KerbalEngineer, and do a little numerical integration. Maybe this will be a bit costly in terms of performance, but I really really want proper suicide burn info \u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u00A0I\u0027ll keep you guys posted on my progress, and when I\u0027m done, I\u0027d love to submit my code for \u0022peer review\u0022 \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/93700-diomedea/\u0026amp;do=hovercard\u0022 data-mentionid=\u002293700\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/93700-diomedea/\u0022 rel=\u0022\u0022\u003E@diomedea\u003C/a\u003EI\u0027m afraid I do not fully understand your approach, but I see a bit of an issue here:\u00A0\u003C/span\u003E\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 27.1.2017 at 3:25 PM, diomedea said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nLet me consider just the vertical components for sake of simplicity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 27.1.2017 at 3:25 PM, diomedea said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf solving for horizontal as well, there is need to consider thrust applied retrograde, craft pitch changes while horizontal speed is matched to the body surface speed and thrust is applied by sine and cosine of pitch to the vertical and horizontal portions of the problem.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 27.1.2017 at 3:25 PM, diomedea said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAgain a simple solution goes with energy and work, the total work being the composition of horizontal work required to match horizontal speed and vertical work as above.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe vertical-only problem is already fully solved, and in fact is already implemented in KerbalEngineer (and keeps crashing Scott Manley because he\u0027s not aware that it\u0027s vertical-only \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E ).\n\u003C/p\u003E\n\u003Cp\u003E\nThe horizontal component is where the money is at, beause that\u0027s what\u0027s required for entry from orbit, and for minimal \u003Cabbr title=\u0022Delta-V\u0022\u003EdV\u003C/abbr\u003E usage. Now I believe that the complicated part lies in \u0022consider thrust applied retrograde\u0022 and in \u0022craft pitch changes while horizontal speed is matched to the body surface speed and thrust is applied by sine and cosine of pitch to the vertical and horizontal portions of the problem.\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nFor infinite \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E, everything is very simple: the Energy we use is: Energy of vertical component, Energy of horizontal component and Potential Energy of altitude. So far so good. But for finite \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E, we have to consider gravity losses: while we are killing the horizontal velocity, we need to keep our head afloat to not crash into the ground. For \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E -\u0026gt; 1, the work that needs to be expended tends towards Infinity. Somewhere in between lies the actual value, but for sure, the Energy expenditure is not at all constant.\n\u003C/p\u003E\n\u003Cp\u003E\nTo put it in your terms:\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u0022Work [...] is applied along the direction the vessel moves: W = F * (zb - zf)\u0022 - in the 1-D case, everything is clear. But in the 2-D case, the thrust is applied along a curve, and the shape and length of the curve is dependent on the intial speed, the angle to vertical and the \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nPlease do correct me if I\u0027m wrong! If you can, I would be glad if you could flesh out your idea to include horizontal\u002Bvertical. If you could package it in a nice, simple formula for altitude and burn duration as a function of velocity and \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E, you would make me a very happy man \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2017-03-25T15:42:26Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/107372-kobymaru/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022107372\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/107372-kobymaru/\u0022 rel=\u0022\u0022\u003E@Kobymaru\u003C/a\u003E, let me start with some considerations. You have implemented a MechJeb2-like algorithm. Believe you know the equation it embeds (as you showed in the \u003Cabbr title=\u0022Original Post(er). The first post in a thread, or the person who posted it.\u0022\u003EOP\u003C/abbr\u003E) is analytical, unaware of changes in gravity and \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E during the descent. Both me and you linked in the posts above two different approaches for a numerical computation, using integration in time to handle changing both gravity and \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reason I showed an approach based on energy instead was to still be able to solve this problem with an analytical approach. At least, it allows that in regard to gravity (as potential energy is computed considering the different gravity at altitude and landing); I have no solution for a change in vessel mass, therefore \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E (so, my approach works best if the mass of fuel burnt during descent is a small fraction of the total vessel mass).\n\u003C/p\u003E\n\u003Cp\u003E\nBefore getting into more equations, let me show one consideration about \u0022\u003Ca href=\u0022https://en.wikipedia.org/wiki/Gravity_drag\u0022 rel=\u0022external nofollow\u0022\u003Egravity losses\u003C/a\u003E\u0022 that is often lost. While almost everybody seems to agree about the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Oberth_effect\u0022 rel=\u0022external nofollow\u0022\u003EOberth effect\u003C/a\u003E, which happens when thrust is applied to increment speed (so, energy changes the more the current speed is, going by the dEk/dt = F * v equation), very few seem to make that the change in energy required to bring a suborbital in a orbital trajectory is also described in the same guise. The loss in speed known as \u0022gravity losses\u0022 isn\u0027t but a Oberth effect in reverse (less then enough speed to achieve circular orbit). Exactly as the Oberth effect, it is totally explained when dealing with energy, instead of with speed. Therefore, the reason you showed requiring to compute gravity losses because of a finite burntime, doesn\u0027t exist at all when computing energy instead: we only need to know the amount of energy we have at start and the amount we want at end of the maneuver, how that energy is changed (Thrust/m = acceleration) makes the time of burn change but not the energy equation.\n\u003C/p\u003E\n\u003Cp\u003E\nAnother important consideration. Energy is a scalar, which means by itself can\u0027t show the correct direction for a speed change. On the vertical direction (exposed in my previous post), the same total energy applies to a same vessel that, at one specific altitude, is climbing or is descending by the same absolute vertical speed. Of course, without atmospheric drag, a climbing vessel will sooner or later (barring exiting \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESOI\u003C/abbr\u003E) be descending at exactly the same vertical speed at the same altitude, so the equations don\u0027t really need consider the case (we compute burntime only with the descending part of this trajectory). When dealing with only horizontal components, we don\u0027t need to include potential but only kinetic energy; however to solve the problem requires to ensure the final horizontal speed is oriented as the radial component due to the body rotation (meaning, final horizontal speed has to exist only in the E/W component, positive with E, parallel to the equator, and be exactly = 2*\u03C0* radius* cos(latitude)/(rotation period)). The above \u0022final horizontal speed\u0022 can clearly be used to provide the \u0022final kinetic energy due to horizontal speed\u0022, which is the value we need to achieve (but, due to the scalar nature, we can\u0027t just subtract final from initial kinetic energy, we need to consider the whole change in energy, or \u0022work\u0022, performed). It seems easy to consider that, however steep or mild the descent profile, all changes in energy in both N/S and E/W components need be completed before (not necessarily at) impact time. \u0022Before\u0022 meaning the last part of the descent will be pretty vertical, while \u0022after\u0022 is more alike what a plane does at landing.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, different coders have different approaches to solve this kind of problems. I like to handle calculations separate on each of 3D components; however the vectorial sum of required thrust when time is equal on all axes gives exactly the retrograde direction (which is neat). Components wise, total thrust would be made on each axis: for vertical, effective thrust = Thrust * sin(pitch); for E/W, effective thrust = Thrust *cos(pitch)*sin(heading); for N/S, effective thrust = Thrust *cos(pitch)*cos(heading). Of course effective thrust is what would be used in each of the components equations, e.g. for E/W: tb\u003Csub\u003EE/W \u003C/sub\u003E= \u0394v\u003Csub\u003EE/W\u003C/sub\u003E / (effective thrust \u003Csub\u003EE/W\u003C/sub\u003E / m). Given tb should be the same (at least with both horizontal components) means the heading is invariant during descent; if pitch was invariant too, tb would be the same in all three components (that is what would happen if the trajectory before the descent burn was already suborbital, crossing the body surface exactly at the landing site).\n\u003C/p\u003E\n\u003Cp\u003E\nThis last consideration shows (at least to me) why changing pitch during descent isn\u0027t really an issue: the end result still is to achieve the final energy state at the right time, the descent can mix a late deorbiting burn with the landing burn to perform a \u0022reversed gravity turn\u0022 which is pretty efficient, but the most efficient of all trajectories would require the deorbiting burn be done well before so to have an almost flat trajectory during descent (very risky, however). Just, exactly, the reverse profile of a gravity turn launch trajectory from an airless body. Having pitch change during descent only makes our \u0022gravity losses\u0022 more prominent, but when\u00A0 we so choose, the effect is actually to have a longer burn time in horizontal than with vertical.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, with all the above shown, I\u0027m in doubt if this method actually fits your needs. No \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E variance is considered, and method works best with flat descents instead of allowing pitching (but, should either pitch or thrust be actively changed during descent, all precomputed analytical solutions would be invalid and need be recomputed in real time). In the end, what makes the MechJeb2 approach work in practice is just this, even if not totally accurate it is kept updated in real time (and, given \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E increases due to burnt fuel, the resulting error is towards safety).\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2017-04-24T12:47:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222996074\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221490377448\u0022 data-ipsquote-userid=\u0022107372\u0022 data-ipsquote-username=\u0022Kobymaru\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 3/24/2017 at 1:44 PM, Kobymaru said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI have implemented the \u0022MechJeb2-version\u0022 into KerbalEngineer in this branch:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/fat-lobyte/KerbalEngineer/tree/suicide-mechjeb\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/fat-lobyte/KerbalEngineer/tree/suicide-mechjeb\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe timer works reasonably well, but I had to change the definition of Altitude and Distance \u003Cimg alt=\u0022:(\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 title=\u0022:(\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nAltitude: \u0022altitude when to start a suicide burn\u0022 -\u0026gt; \u0022Altitude lost during burn until velocity reaches 0\u0022\u003Cbr\u003E\nDistance: \u0022distance to the point at which to start a suicide burn.\u0022 -\u0026gt;\u00A0\u0022Distance above ground after a suicide burn\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nNote that both definitions are equivalent at the time of the start of the burn - but only then, not before. Turns out it\u0027s pretty hard to calculate the Altitude lost.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI am also currently preparing a different approach: there is a method of calculating the velocity and time of a gravity turn as a function of the angle, for constant \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://globaljournals.org/GJSFR_Volume12/6-Computational-Algorithm-for-Gravity.pdf\u0022 rel=\u0022external nofollow\u0022\u003EComputational Algorithm for Gravity Turn Maneuver By M. A. Sharaf \u0026amp; L.A.Alaqal\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThere is a closed form for the burn duration from the initial conditions, but unfortunately not closed form for altitude lost. So I decided to implement that algorithm in KerbalEngineer, and do a little numerical integration. Maybe this will be a bit costly in terms of performance, but I really really want proper suicide burn info \u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u00A0I\u0027ll keep you guys posted on my progress, and when I\u0027m done, I\u0027d love to submit my code for \u0022peer review\u0022 \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWondering how this is going? \u00A0I\u0027m working on a Suicide Burn mod, and would prefer to not have to reinvent the wheel.\n\u003C/p\u003E\n\u003Cp\u003E\nMy mod is working with BetterBurnTime, but due to a licensing issue, I won\u0027t be able to use that when I release. \u00A0So I was wondering if I could help you with this, to both of our benefits.\n\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-04-24T13:05:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032728\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493038046\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWondering how this is going?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nMeh\u00A0\u003Cimg alt=\u0022:sealed:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_lipssealed.gif\u0022 title=\u0022:sealed:\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nSo I did implement the Gravity Turn algorithm in reverse. It \u0022works\u0022 in the sense that the numeric values come out to be what is expected by solving the Differential Equations\u00A0in [1] numerically.\n\u003C/p\u003E\n\u003Cp\u003E\nIt does not work particularly well in practice, because the Suicide Burn altitude is greatly overestimated. I believe it\u0027s partially because the \u0022flat earth\u0022 assumption breaks the centrifugal\u00A0force. However, I tried to account for the centrifugal force in another model [2] and still came up short (or rather too high \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u00A0) Right now I\u0027m not quite sure where to go from here.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI recall that the timer itself being pretty much OK though.\n\u003C/p\u003E\n\u003Cp\u003E\nYou can check out my progress on the \u0022suicide-numeric\u0022 branch of KerbalEngineer\u00A0here:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/fat-lobyte/KerbalEngineer/blob/suicide-numeric/KerbalEngineer/Flight/Readouts/Vessel/SuicideBurnProcessor.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/fat-lobyte/KerbalEngineer/blob/suicide-numeric/KerbalEngineer/Flight/Readouts/Vessel/SuicideBurnProcessor.cs\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nFor a quick-test, you can download the DLL here:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/fat-lobyte/KerbalEngineer/blob/suicide-numeric-bin/Output/KerbalEngineer/KerbalEngineer.dll\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/fat-lobyte/KerbalEngineer/blob/suicide-numeric-bin/Output/KerbalEngineer/KerbalEngineer.dll\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nLike I said, it\u0027s not quite there yet\u00A0\u003Cimg alt=\u0022;.;\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cry.gif\u0022 title=\u0022;.;\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nBTW, I have Mathematica Notebooks with 2 models of suicide Burns, I can post these if there is interest. Papers \u0022available\u0022 \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E on sci-hub.io, or from me on request. What I also have is a collection of papers on this subject that may \u003Cstrong\u003Eor may not\u00A0\u003C/strong\u003Ebe useful - I can\u0027t even tell yet.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m working on a Suicide Burn mod, and would prefer to not have to reinvent the wheel.\n\u003C/p\u003E\n\u003Cp\u003E\nMy mod is working with BetterBurnTime, but due to a licensing issue, I won\u0027t be able to use that when I release. \u00A0So I was wondering if I could help you with this, to both of our benefits.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOh that would be wonderful. I\u0027m not really doing this for KerbalEngineer, I just chose it because of the nice framework it provides.\u00A0 What I reall\u00A0want are\u00A0functioning and precise Suicide Burn aids. If it\u0027s in a separate Mod, so be it.\n\u003C/p\u003E\n\u003Cp\u003E\n[1]\u00A0Culler, G. J., \u0026amp; Fried, B. D. (1957). Universal Gravity Turn Trajectories. \u003Ci\u003EJournal of Applied Physics\u003C/i\u003E, \u003Ci\u003E28\u003C/i\u003E(6), 672\u2013676. \u003Ca href=\u0022https://doi.org/10.1063/1.1722828\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://doi.org/10.1063/1.1722828\u003C/a\u003E\u003Cbr\u003E\n[2]\u00A0McInnes, C. R. (2003). Gravity-Turn Descent from Low Circular Orbit Conditions. \u003Ci\u003EJournal of Guidance, Control, and Dynamics\u003C/i\u003E, \u003Ci\u003E26\u003C/i\u003E(1), 183\u2013185. \u003Ca href=\u0022https://doi.org/10.2514/2.5033\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://doi.org/10.2514/2.5033\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Pand5461","CreatedById":172084,"CreatedDateTime":"2017-04-24T13:21:46Z","Content":"\n\u003Cp\u003E\nI can guess why no one is even bothering about suicide burns that start with significant horizontal component. The difficulty is to keep the direction of the burn that won\u0027t be purely retrograde in such case.\n\u003C/p\u003E\n\u003Cp\u003E\nAs for SQRT in time to burn computations - that might come from the approximate solution of the Tsiolkovsky\u0027s equation with gravity, I have to compare it against the formulae I obtained while writing kOS landing autopilot.\n\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-04-24T13:24:17Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032760\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493040106\u0022 data-ipsquote-userid=\u0022172084\u0022 data-ipsquote-username=\u0022Pand5461\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, Pand5461 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI can guess why no one is even bothering about suicide burns that start with significant horizontal component. The difficulty is to keep the direction of the burn that won\u0027t be purely retrograde in such case.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSince we got really nice \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E functions including Retrograde hold in Stock KSP, I don\u0027t think this is such a big issue anymore.\u00A0After digging around in ways to actually calculate the burn, I would say the difficulty lies in the implementation side \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2017-04-24T13:24:23Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032746\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493039147\u0022 data-ipsquote-userid=\u0022107372\u0022 data-ipsquote-username=\u0022Kobymaru\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 minutes ago, Kobymaru said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt does not work particularly well in practice, because the Suicide Burn altitude is greatly overestimated. I believe it\u0027s partially because the \u0022flat earth\u0022 assumption breaks the centrifugal\u00A0force. However, I tried to account for the centrifugal force in another model [2] and still came up short (or rather too high \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u00A0) Right now I\u0027m not quite sure where to go from her\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat may be because the calculation of the time to start the burn may not\u00A0take into account the fact that the vessel is slowing down. \u00A0Ignoring orbital speed for the moment, look at it this way:\n\u003C/p\u003E\n\u003Cp\u003E\nTime to impact is calculated based on the vessel accelerating due to gravity\n\u003C/p\u003E\n\u003Cp\u003E\nAssumptions:\n\u003C/p\u003E\n\u003Cp\u003E\nVessel is moving at 100 m/s\n\u003C/p\u003E\n\u003Cp\u003E\nEngine thrust gives an acceleration of 20m/s in space.\n\u003C/p\u003E\n\u003Cp\u003E\nGravity = 10m/s/s\n\u003C/p\u003E\n\u003Cp\u003E\nNet deceleration at full thrust = 10m/s/s\n\u003C/p\u003E\n\u003Cp\u003E\nSo, at an altitude of 1500, you have a time to impact of 10 seconds.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, if you start burning at 1500m, you will stop in 10 seconds, at an altitude of about 1000m.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is getting in calculcus, which I was never good and and have no memory of anymore. \u00A0But, with the proper calculations, you should be able to figure the correct altitude to start burning at, which is going to be somewhere below 1000m.\n\u003C/p\u003E\n\u003Cp\u003E\nAny math geniuses around?\n\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-04-24T13:30:23Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032762\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493040263\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 minutes ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat may be because the calculation of the time to start the burn may not\u00A0take into account the fact that the vessel is slowing down.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope, that should all be accounted for.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2017-04-24T13:30:45Z","Content":"\n\u003Cp\u003E\nThinking about it, add a calculation of how far the vessel will travel during the entire burn. \u00A0Then, compare that to the altitude, if not below a certain threshold, continue falling.\n\u003C/p\u003E\n\u003Cp\u003E\nFor example, in the example above, starting the burn at 1500, the vessel will travel 500m. \u00A0At an altitude of 1500, it\u0027s obviously too early to start burning.\n\u003C/p\u003E\n\u003Cp\u003E\nSo,continue falling. \u00A0If we have a value we are aiming for, say, 0 velocity at 10m in height, then keep falling until the altitude - decelDistance \u0026lt;=10\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2017-04-24T13:56:14Z","Content":"\n\u003Cp\u003E\nSo, to do this, I think I need the following, can you provide it:\n\u003C/p\u003E\n\u003Cp\u003E\ndouble timeUntilImpact()\n\u003C/p\u003E\n\u003Cp\u003E\ndouble distanceToImpact() // Take angular velocity into account, if vertical, then should equal altitude\n\u003C/p\u003E\n\u003Cp\u003E\nI already have the calculations for the vessel speed and engine thrust, etc.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Pand5461","CreatedById":172084,"CreatedDateTime":"2017-04-24T14:03:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032761\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493040257\u0022 data-ipsquote-userid=\u0022107372\u0022 data-ipsquote-username=\u0022Kobymaru\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n37 minutes ago, Kobymaru said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSince we got really nice \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E functions including Retrograde hold in Stock KSP, I don\u0027t think this is such a big issue anymore.\u00A0After digging around in ways to actually calculate the burn, I would say the difficulty lies in the implementation side \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nErm... Holding Retrograde at full thrust most probably won\u0027t work - you won\u0027t be able to bleed off horizontal and vertical speed at the same moment. You are going to need either fairly complicated steering or throttling. Stock \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E doesn\u0027t do either of that automatically.\n\u003C/p\u003E\n\u003Cp\u003E\nI can post my continuous-burn landing script somewhere. It is not exactly this exact problem but might give some ideas.\n\u003C/p\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-04-24T14:23:31Z","Content":"\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032780\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493042174\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n24 minutes ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo, to do this, I think I need the following, can you provide it:\n\u003C/p\u003E\n\u003Cp\u003E\ndouble timeUntilImpact()\n\u003C/p\u003E\n\u003Cp\u003E\ndouble distanceToImpact() // Take angular velocity into account, if vertical, then should equal altitude\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is the hard part. At the moment, I can\u0027t provide it accurately. My current model is so inaccurate that it\u0027s almost useless.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032785\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493042586\u0022 data-ipsquote-userid=\u0022172084\u0022 data-ipsquote-username=\u0022Pand5461\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 minutes ago, Pand5461 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nErm... Holding Retrograde at full thrust most probably won\u0027t work - you won\u0027t be able to bleed off horizontal and vertical speed at the same moment.\u00A0Stock \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E doesn\u0027t do either of that automatically.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhen was the last time you tried? I do this on a regular basis. Set NavBall to surface mode, press retrograde button, press Z and wait until your vehicle has killed all velocity.\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI can post my continuous-burn landing script somewhere. It is not exactly this exact problem but might give some ideas.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf it\u0027s not too much effort, that would be nice.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2017-04-24T16:35:39Z","Content":"\n\u003Cp\u003E\nI just realized, that the work has already been done, and it\u0027s under an MIT license.\n\u003C/p\u003E\n\u003Cp\u003E\nMod is Trajectories, github repo is here: \u00A0\u003Ca href=\u0022https://github.com/neuoy/KSPTrajectories\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/neuoy/KSPTrajectories\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nShould have everything I need to get those two values.\n\u003C/p\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2017-04-24T17:24:57Z","Content":"\n\u003Cp\u003E\nIt\u0027s not a planar problem. I\u0027d suggest basic shooting method over burn start time (Tstart), RK4 or some other NI scheme, applied on the system:\n\u003C/p\u003E\n\u003Cp\u003E\n// x - 3d world-space position vector. Note that transform.position in KSP is noninertial surface-relative space, so correct the forces if you want to work in Unity space.\u003Cbr\u003E\n// v_whatever - 3d velocities\u003Cbr\u003E\n// acc - 3d acceleration\u003Cbr\u003E\u003Cbr\u003E\nacc(t) = gravity(x)\u00A0\u002B aero(x, t, v_surf) / mass(t) \u00A0 \u00A0 \u00A0\u00A0 \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 \u00A0 \u00A0\u00A0 \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 // engines off, t \u0026lt; Tstart. If no aero, use vessel.Orbit to get x(Tstart) and v_orbital(Tstart) analitically.\u003Cbr\u003E\nacc(t) = - v_orbital(t).normalized * max_thrust(x) / mass(t) \u002B gravity(x) \u002B aero(x, t, v_surf) / mass(t) \u00A0\u00A0\u00A0 // \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E in orbital retro mode, t \u0026gt;= Tstart\u003Cbr\u003E\nacc(t) = - v_surf(t, x).normalized * max_thrust(x) / mass(t) \u002B gravity(x) \u002B aero(x, t, v_surf) / mass(t) \u00A0 // \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E in surface retro mode, idk exactly when the switch happens, ask devs or sekrit documents\u003Cbr\u003E\nd(mass(t)/dt) = magic_vessel_function(x, t)\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0\u00A0 \u00A0 \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 // vessel-specific\u003Cbr\u003E\nv_surf(t, x) = v_orbital(t) - cross(planet_ang_vel_vector, (x - planet_center))\u003Cbr\u003E\nd(v_orbital(t))/dt = acc(t)\u003Cbr\u003E\nd(x(t))/dt = v_orbital(t)\u003Cbr\u003E\nv_surf(Tend, x_end) = zero_vector\u00A0\u00A0 // Tend - time of full stop. Criteria: t = Tend if v_surf(t, x).length \u0026lt; Eps, where you can choose Eps like, for example: time_step * max_thrust / mass(t) * 0.7424242...\u003Cbr\u003E\nplanet_ang_vel_vector = planet_ang_vel * north_vector\u003Cbr\u003E\n(x - planet_center).length \u0026lt; terrain_height(x, t)\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 // you crashed, decrease Tstart. Check this condition during NI, not necessarily every step.\u003Cbr\u003E\n(x(Tend) - planet_center).length \u0026gt; terrain_height(x, t)\u00A0\u00A0 // undershoot, increase Tstart\u003Cbr\u003E\ndot(v_surf(t, x), (x - planet_center)) \u0026gt; 0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 // you\u0027re literally flying away.\u003Cbr\u003E\u003Cbr\u003E\nv_orbital - 3 variables\u003Cbr\u003E\nx - 3 variables\u003Cbr\u003E\nmass - 1 variable\u003Cbr\u003E\nyou\u0027ll integrate 7 state variables simultaneously. All others are either constant, or can be calculated from them directly.\u003Cbr\u003E\u003Cbr\u003E\nSubstract a couple of seconds from Tstart to form a safety margin.\u003Cbr\u003E\nGoes without saying to spread the load on multiple frames.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-24T17:28:37Z\u0022 title=\u002204/24/2017 05:28  PM\u0022 data-short=\u00227 yr\u0022\u003EApril 24, 2017\u003C/time\u003E by Boris-Barboris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kobymaru","CreatedById":107372,"CreatedDateTime":"2017-04-24T19:07:02Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223032947\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493051739\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI just realized, that the work has already been done, and it\u0027s under an MIT license.\n\u003C/p\u003E\n\u003Cp\u003E\nMod is Trajectories, github repo is here: \u00A0\u003Ca href=\u0022https://github.com/neuoy/KSPTrajectories\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/neuoy/KSPTrajectories\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nShould have everything I need to get those two values.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIncidentally, it\u0027s me who got stock with maintaining that mod\u00A0so I know at least a little bit about it. Care to enlighten me how it calculates the required values? Because Trajectories doesn\u0027t calculate the trajectory with an engine burn, it calculates it under free fall or atmospheric. How can it help you for suicide burn?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223033005\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493054697\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt\u0027s not a planar problem.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhy not? I don\u0027t see the 3rd dimension. I see only vertical and longitudinal\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027d suggest basic shooting method over burn start time (Tstart), RK4 or some other NI scheme, applied on the system:\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks for the code! Full numeric solution was my last resort, I was hoping for \u0022half-analytical\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nEspecially this looks like a nasty bit of coding that I don\u0027t know how to do nicely yet:\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223033005\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493054697\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nGoes without saying to spread the load on multiple frames.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-24T19:07:25Z\u0022 title=\u002204/24/2017 07:07  PM\u0022 data-short=\u00227 yr\u0022\u003EApril 24, 2017\u003C/time\u003E by Kobymaru\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2017-04-24T19:10:27Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223033158\u0022 data-ipsquote-contentid=\u0022155599\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221493060822\u0022 data-ipsquote-userid=\u0022107372\u0022 data-ipsquote-username=\u0022Kobymaru\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, Kobymaru said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhy not? I don\u0027t see the 3rd dimension. I see only vertical and longitudinal\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlanet rotation. ~170m\\s on equator for Kerbin. Now imagine a landing from polar orbit.\n\u003C/p\u003E\n"}]}