{"TopicId":184373,"ForumId":29,"TopicTitle":"Can I use ROS# inside a KSP plugin?","CreatedByName":"AudiP47","CreatedById":197393,"CreatedDateTime":"2019-05-09T22:50:02Z","PageNum":1,"Articles":[{"CreatedByName":"AudiP47","CreatedById":197393,"CreatedDateTime":"2019-05-09T22:50:02Z","Content":"\n\u003Cp\u003E\nSo I\u0027m totally new to C# development and have no idea what I\u0027m doing. I\u0027m wanting to create a bridge between KSP and Robot Operating System (ROS). I know what I\u0027m doing in ROS for the most part, but I\u0027m having trouble determining if it\u0027s worth it. ROS is a modular software framework that uses a publisher / subscriber model. I\u0027m basically just trying to start by controlling one axis of the rocket during ascent. The plugin would need to publish the current angle of the rocket and subscribe to a control input that would be fed into KSP as flight\u00A0inputs.\n\u003C/p\u003E\n\u003Cp\u003E\nAn employee from \u003Cspan\u003ESiemens has created a \u003Ca href=\u0022https://github.com/siemens/ros-sharp\u0022 rel=\u0022external nofollow\u0022\u003Eros-bridge\u003C/a\u003E\u00A0package that focuses on using using unity for robot simulations. (wiki \u003Ca href=\u0022https://github.com/siemens/ros-sharp/wiki\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E) I just want to know if I can use these plugins inside of a KSP plugin.\u00A0\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"HorsEntor","CreatedById":198160,"CreatedDateTime":"2019-06-13T07:00:14Z","Content":"\n\u003Cp\u003E\nI was just thinking about the same thing!\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNot sure if you\u0027ve found anything or tried your self yet? I haven\u0027t, but I\u0027m actually in the early process of learning ROS; However, I\u0027ve been using Unity \u0026amp; C# for almost a decade. (Pretty much know them like the back of my hand at this point.)\u00A0\u00A0\u00A0 ---\u00A0\u00A0 Potentially a nice knowledge trade there if you wanna collaborate a little?\n\u003C/p\u003E\n\u003Cp\u003E\nThe only thing I\u0027m not familiar with is KSPs API, deployment method, and how (or how much of) the action system is exposed in their API (as it is in the \u0022Actions\u0022 tab of the in game editor for instance), it looks like a good bit, but, I\u0027ll look harder latter. Getting simple 2 way communication shouldn\u0027t be too bad at all though.\n\u003C/p\u003E\n\u003Cp\u003E\nOtherwise, I\u0027m actually getting really excited about doing this!\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, I\u0027m thinking a bit more ambitiously for the functionality (it\u0027s late, err \u0027early\u0027 here, but) If the actions system is exposed in a way that is easily serialized, which I have to assume that it is since it all gets broken down to XML at some point... It might actually be almost easier for ROS to control all available actions of every component, than to do anything wanky with specific controls. Couple that with what looks like a pretty nice, and simple, example of Unity\u0027s Camera image messaging in the link you provided (thanks for that btw!), and... This could actually be a *really* nice tool for really, any robotics dev (with perhaps other future or existing extensions installed).\n\u003C/p\u003E\n\u003Cp\u003E\nThis of course makes me immediately think of part opportunities (for instance, a RealSense camera to throw in the scene, that ROS could then use), but I think that points out quite quickly how this would NEED to handle time acceleration properly. In other words: so time could in *some* instances be slowed for accuracy sake for instance -- The multiple renderings required for simulated robotics, *will* hit the frame rate pretty hard, and \u003Cem\u003Efairly\u003C/em\u003E quickly (depending how many cameras you need). (Notice of course I\u0027m talking about vision guided rocket powered aerial and land drones here, not just MechJeb type stuff!\u00A0 \u003Cimg alt=\u0022:cool:\u0022 data-emoticon=\u0022\u0022 data-ratio=\u0022105.88\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 title=\u0022:cool:\u0022 width=\u002217\u0022\u003E) -- But,\u00A0 thats why in the Udacity self driving car course simulator, they actually re-record training images of a car you get to drive to train your DL models on your recorded actions, *not* your \u0027live\u0027 driving.... otherwise the lag (particuarlly as the physics engine tries to catch up after garbage collections and each image capture) would kill the real time \u0027play\u0027. -- Something like that might be the only thing truly \u0022difficult\u0022 about this; If in the future someone (like my self actually!!!) wanted to use this to train and test any form of controller, including Deep Learning. KSP mods seem to have a difficult time \u0027forcing\u0027 objects to be where they want them (not sure if thats just lack of Unity understanding on the part of those mod-ers, or a true conflict with KSPs Physics additions, but... potential issue with \u0027future\u0027 growth in regards to user generated training data)... Not something to be concerned with early on though, all classical control methods would work ok (as \u0027ok\u0027 as they do in any quasi real time simulation at least).\n\u003C/p\u003E\n\u003Cp\u003E\nI think the real \u0022work\u0022 here though is just going to be UI dev within KSP to allow defining what \u0027sensors\u0027, and what \u0027actuators\u0027, get put onto what Topics (and thats really just learning how they did their Editor). An expert user could of course make use of this far before that (perhaps much more to the point of your original question), but, I think thats where this gets REALLY interesting! \u003Cspan\u003E:)\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EI mean, if you have ROS experience, it stands to reason any well documented code bridge between it and KSP could be used without all that, but... to at least have a UI for linking parts to particular topics would greatly increase the utility and market, not only to ROS play, but robotics dev, almost as whole.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nDo you know how ROS nodes tend to handle time, or how well they stick to a particular method? I mean, I know anyone can write an executable and tie it into ROS; In which, any timing mechanism could be used (kinda gonna be an issue for *some* things I imagine), but are there any sort of design patterns to use a specific \u0022Topic\u0022 ,or message element, for \u0022Time\u0022 (or other things), instead of direct access to date/time APIs for instance?\n\u003C/p\u003E\n"},{"CreatedByName":"janismac","CreatedById":105625,"CreatedDateTime":"2019-06-15T19:40:40Z","Content":"\n\u003Cp\u003E\nYou may want to look at the kRPC mod. It does something very similar: Allow access to KSP via the network, just with a different protocol.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://krpc.github.io/krpc/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://krpc.github.io/krpc/\u003C/a\u003E\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u002276528\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed4227374684\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/62902-14x13x122-krpc-remote-procedure-call-server-v047-27th-july-2018/\u0026amp;do=embed\u0022 style=\u0022height:212px;max-width:500px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}