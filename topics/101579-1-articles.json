{"TopicId":101579,"ForumId":29,"TopicTitle":"ConfigNode - Brain is not cooperating...","CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T00:46:48Z","PageNum":1,"Articles":[{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T00:46:48Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EFirst, a little background info:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ESo, a while back a plugin was released by Pizzaoverhead (I sure hope I didn\u0027t butcher that) called CollisionFX. This plugin creates sparks and dust plumes to coincide with collisions between the active vessel and... well... everything else. There were some limitations, however. One of those was related to wheels. When rolling over anything not specifically classified as dirt, such as the false landscape that acts as the foundation of the KSC compound, the wheel would throw sparks and dust and lights and all sorts of crazy stuff as you rolled happily along. This was solved by disabling the effect for wheels.\u003C/p\u003E\u003Cp\u003EHowever, there was one part of those effects that were rather nice for the wheel: the dust. Over at the Kerbal Foundries development thread we discovered just how perfect the dust fit in with lo-fi\u0027s wheels and, more specifically, the tracks he developed. The sparks had to go, though. So, as a completely inexperienced programmer, I thought to myself \u0022how hard could it be?\u0022 and dove right in to try and adapt the code to fit our needs. I had a number of issues while I worked on the original part module \u0022CollisionFX\u0022 where i was attempting to separate the setup for the sparks from the dust. After a number of tries that ended up breaking the entire functionality of the plugin, I decided it was time to revert everything I had done and try to extract only the parts that I needed into a new class. This was a complete success and soon I was spawning dust in the wake of my rovers everywhere, complete with planetary and biome specific settings for dust color.\u003C/p\u003E\u003Cp\u003EWarping up about a month and now I have almost every setting that controls the dust strength, minimal and maximal particle counts, etc. running from fields which can be customized in the part module parameters. I\u0027ve even broken free from the original DLL (just yesterday in fact) and have practically rewritten the entire thing in the process. Now I want to take it a step further: configuration files.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EThe problems begin:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThis is where the headache begins. I know there are many plugins that I use in KSP that read/write to the scenarios in the persistence file, and countless others that read/write to their own configuration files. Almost all of these are sitting on my hard drive in full source, and I\u0027ve been pouring over them to try and figure out how to adapt them to my needs. I want to load up the definitions for the planetary and biome specific dust colors from a config file so that these definitions can be expanded without having to recompile the entire thing. Right now they are all hard-coded and called up like this:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=#0000ff][B]\u003Cbr\u003Epublic[/B][/COLOR] [COLOR=#ff0000]string[/COLOR] [COLOR=#191970][B]GetCurrentBiomeName[/B][/COLOR] ()\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#004085]CBAttributeMapSO[/COLOR] biomeMap = [COLOR=#004085]FlightGlobals[/COLOR].[I]currentMainBody[/I].[I]BiomeMap[/I];\u003Cbr\u003E            [COLOR=#004085]CBAttributeMapSO[/COLOR].[COLOR=#004085]MapAttribute[/COLOR] mapAttribute = biomeMap.[COLOR=#191970][B]GetAtt[/B][/COLOR](vessel.[I]latitude[/I] * [COLOR=#004085][B]Mathf[/B][/COLOR].[I]Deg2Rad[/I], vessel.[I]longitude[/I] * [COLOR=#004085][B]Mathf[/B][/COLOR].[I]Deg2Rad[/I]);\u003Cbr\u003E            [COLOR=#000080]return[/COLOR] mapAttribute.[I]name[/I];\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#008000]// Color format: RGBA (0-1, decimal percentage)[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]genericDustColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.007[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Grey 210 210 210[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]dirtColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.65[/COLOR]f, [COLOR=#00008b]0.48[/COLOR]f, [COLOR=#00008b]0.34[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Brown 165, 122, 88[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]lightDirtColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.65[/COLOR]f, [COLOR=#00008b]0.52[/COLOR]f, [COLOR=#00008b]0.34[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Brown 165, 132, 88[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]sandColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.80[/COLOR]f, [COLOR=#00008b]0.68[/COLOR]f, [COLOR=#00008b]0.47[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Light brown 203, 173, 119[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]snowColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.90[/COLOR]f, [COLOR=#00008b]0.94[/COLOR]f, [COLOR=#00008b]1[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Blue-white 230, 250, 255[/COLOR]\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [COLOR=#191970][B]GetBiomeColour[/B][/COLOR] ( [COLOR=#004085]Collider[/COLOR] c )\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#0000ff][B]switch[/B][/COLOR] ([COLOR=#004085]FlightGlobals[/COLOR].ActiveVessel.mainBody.name)\u003Cbr\u003E            {\u003Cbr\u003E                [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Kerbin\u0022[/COLOR]:\u003Cbr\u003E                    [COLOR=#0000ff][B]if[/B][/COLOR] ([COLOR=#191970][B]IsPQS[/B][/COLOR](c))\u003Cbr\u003E                    {\u003Cbr\u003E                        [COLOR=#ff0000]string[/COLOR] biome = [COLOR=#191970][B]GetCurrentBiomeName[/B][/COLOR]();\u003Cbr\u003E                        [COLOR=#0000ff][B]switch[/B][/COLOR] (biome)\u003Cbr\u003E                        {\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Water\u0022[/COLOR]: [COLOR=#008000]//Anything here would be the sea-bottom.[/COLOR]\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]lightDirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Grasslands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Highlands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Shores\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]lightDirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Mountains\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Deserts\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]sandColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Badlands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Tundra\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Ice Caps\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]snowColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]default[/B][/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]genericDustColour[/I];\u003Cbr\u003E                [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Duna\u0022[/COLOR]:\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]sandColour[/I];\u003Cbr\u003E                [COLOR=#0000ff][B]default[/B][/COLOR]:\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]genericDustColour[/I];\u003Cbr\u003E            }\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003EThis is one area where the code is almost completely identical to what CollisionFX uses. At this time, to expand this further you\u0027d have to edit that switch right there and add more cases. What I would like to do is instead make it load those definitions from a two-layered config node system such as, for example:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EBODY\u003Cbr\u003E{\u003Cbr\u003E    name = Kerbin\u003Cbr\u003E    //Color format: (decimal) red, green, blue, alpha\u003Cbr\u003E    color = 0.75, 0.75, 0.75, 0.007\u003Cbr\u003E    BIOME\u003Cbr\u003E    {\u003Cbr\u003E        name = Ice Caps\u003Cbr\u003E        color = 0.90, 0.94, 1, 0.0125\u003Cbr\u003E    }\u003Cbr\u003E    BIOME\u003Cbr\u003E    {\u003Cbr\u003E        name = Highlands\u003Cbr\u003E        color = 0.65, 0.48, 0.34, 0.0125\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003EBODY\u003Cbr\u003E{\u003Cbr\u003E    name = Duna\u003Cbr\u003E    color = 0.80, 0.68, 0.47, 0.0125\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003ENow, I\u0027m unsure why this is causing me such a headache, but every time I try to adapt some new way of coding the retrieval and use of settings from a file formatted in such a way I hit this brick wall in my ability to comprehend where and what needs to happen to make it all fit in the right place. I haven\u0027t even made it as far as actually telling the \u003Cstrong\u003E\u003Cspan style=\u0022color:#191970;\u0022\u003EGetBiomeColour() \u003C/span\u003E\u003C/strong\u003Emethod how to read the new data because I get this pain in the head every time I try to write the code that will import the configuration data. I don\u0027t really believe it\u0027s \u003Cem\u003Ethat\u003C/em\u003E complicated, but I can\u0027t seem to wrap my head around it. Sorta like statistics class... I had to drop that one this quarter due to just not being able to make sense of it.\u003C/p\u003E\u003Cp\u003EObviously I don\u0027t lack examples of this being done, but what I do lack is a clear idea of what is happening and why it works in the code I am looking at. I have been taking a C# beginners class in college, preparing for a BA program in Application Development (it\u0027s a really vague description, and I\u0027m not sure what it really means yet, but I\u0027m having a blast getting ready for it.) and from what I\u0027ve learned there, combined with my dabbling in these more advanced things that we do for KSP, I have a basic idea of what I\u0027d like to have happen here. First, I would define the file that I\u0027m loading from (path to locate it relative to the plugin, or absolute if I had to) and then I would define the node names I need to look for. I would then, much like I would do in a class example, create something along the lines of a two-dimensional array that would contain the body names in the first dimension, and the biome names in the second one. This is where the first painful spasm comes about as I think to myself \u0022wait a sec, you dummy... the only planet that we have any clue about as far as biomes that correspond to landscape regions is Kerbin, so having biome info for other worlds is kinda stupid, aint it?\u0022 and I generally start to have a miniature stoke. Upon recovering from that, I continue. Okay, so maybe we leave Kerbin and it\u0027s biomes alone for now and concentrate on just expanding the planetary color definitions.\u003C/p\u003E\u003Cp\u003ESo, I scrap the subnodes for \u0022BIOME\u0022 in the proverbial trash bin and continue. we have now a pretty simple array that will contain the names of all the planets and a default setting for their dust colors. Another little painful twinge hits me as I say to myself \u0022wait a second, my professor tells me that defining a new array without any clue how large it will be in the end is a recipe for disaster and that he will come back from the grave and haunt me if I do it... so that\u0027s not going to work very well\u0022 and another miniature stoke hits me.\u003C/p\u003E\u003Cp\u003ESo, at this point I normally give up, scrap everything having to do with config nodes and go play a mindless zombie killing game. I\u0027m really looking for some configuration-for-dummies style direction here. My brain can\u0027t take these miniature strokes forever, though they\u0027re beginning to feel a little bit like a sweet moment of release and I get a really weird craving for chocolate chip cookies... am I going totally nuts? Probably... I\u0027ll ask the dancing midget in the corner next time I get a chance.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-09T02:07:08Z\u0022 title=\u002203/09/2015 02:07  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 9, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003Cbr\u003EI\u0026#039;m a typo machine.\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-03-09T03:28:38Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003ELoading configs\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s easier to load confignodes through GameDatabase IMO (the class which holds everything KSP loads on start), instead of by a certain file.\u003C/p\u003E\u003Cp\u003EGameDatabase.Instance.GetConfigNodes(\u003Cem\u003ENodeName\u003C/em\u003E) returns a list of confignodes of type NodeName\u003C/p\u003E\u003Cp\u003Eeg.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EList\u0026lt;Confignode\u0026gt; nodes = GameDatabase.Instance.GetConfigNodes(\u0022BODY\u0022); // Contains all the BODY type config nodes\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFrom there, I would have a \u0022Body\u0022 class/struct for data storage of each \u0022Body\u0022 config node. Body class would store the name, Colour, and a list (maybe, see bottom of post) of Biomes\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eforeach (Confignode node in nodes)\u003Cbr\u003E{\u003Cbr\u003E     BodyList.Add(new Body(node));\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe constructor for the Body class would take a config node and operate on it like so...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EbodyName = node.GetValue(\u0022name\u0022);\u003Cbr\u003Estring[] tempString = node.GetValue(\u0022colour\u0022).split(\u0027,\u0027); // colour conversion should really be a function you can call.\u003Cbr\u003Efloat[] colVals = new float[4];\u003Cbr\u003Efor (int i = 0; i \u0026lt; 4; i\u002B\u002B)\u003Cbr\u003E{\u003Cbr\u003E     float.TryParse(tempString[i].Trim(), out colVals[i]);\u003Cbr\u003E}\u003Cbr\u003EbodyColour = new Colour(colVals[0],colVals[1],...);\u003Cbr\u003E\u003Cbr\u003Eforeach(ConfigNode biomeNode in node.GetNodes(\u0022Biome\u0022))\u003Cbr\u003E     BiomeList.Add(new Biome(biomeNode)); // if biome is only ever going to be a name and a colour, just make a dictionary of that rather than another class\u003Cbr\u003E...\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFilter Extensions uses this very approach. Trace through the Subcategory =\u0026gt; Filter =\u0026gt; Check constructors in \u003Ca href=\u0022https://github.com/Crzyrndm/FilterExtension/tree/master/FilterExtension/ConfigNodes\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E for a working example (originates \u003Ca href=\u0022https://github.com/Crzyrndm/FilterExtension/blob/master/FilterExtension/Core.cs#L77\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESummary\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EGameDatabase.Instance.GetConfigNodes(\u0022\u003Cem\u003EnodeType\u003C/em\u003E\u0022) is a nice loading method. Returns a list of configNodes\u003C/p\u003E\u003Cp\u003Enode.GetValue(\u0022\u003Cem\u003Ekey\u003C/em\u003E\u0022) give you the value after the equals sign in a key/value pair (key = value) as a string.\u003C/p\u003E\u003Cp\u003Enode.GetNodes(\u0022\u003Cem\u003EnodeType\u003C/em\u003E\u0022) gets you a list of child configNodes of a certain type (eg. BIOME)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ERetrieving Data\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EYou probably want to consider whether to use a Dictionary or List for storing the Bodies and Biomes. I\u0027ve used a list here out of habit, but if you want to look up the values for Biome x on Body y, storing them as a Dictionary makes more sense (dictionaries are just lookup tables which means access to a specific value is much faster than a list).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EDictionary\u0026lt;string, Body\u0026gt; BodyDict = new Dictionary\u0026lt;string, Body\u0026gt;(); // Stores body classes with a string lookup identifier\u003Cbr\u003Eif (!BodyDict.ContainsKey(\u0022Kerbin\u0022)) // always check to see if a dictionary actually has the key you want to access or add (Dictionaries don\u0027t like duplicate keys and a key that can\u0027t be found is as good as an out of bouds array index)\u003Cbr\u003E    BodyDict.Add(\u0022Kerbin\u0022, new Body(\u0022KerbinNode\u0022));\u003Cbr\u003Eelse\u003Cbr\u003E    Debug.Log(\u0022bodyDict already contains key: \u0022 \u002B \u0022Kerbin\u0022); // logging when an escape clause is fired.\u003Cbr\u003E\u003Cbr\u003Eif (BodyDict.ContainsKey(\u0022Kerbin\u0022))\u003Cbr\u003E{\u003Cbr\u003E    Body kerb =  BodyDict[\u0022Kerbin\u0022]; // retrieving the Body object with \u0022Kerbin\u0022 as it\u0027s key\u003Cbr\u003E    // if body stores biomes in a similar Dictionary\u003Cbr\u003E    if (body.biomes.ContainsKey(\u0022desert\u0022))\u003Cbr\u003E        Biome desert = kerb.biomes[\u0022desert\u0022]; // retrieveing kerbins desert Biome object\u003Cbr\u003E    else\u003Cbr\u003E        Debug.Log(\u0022biomeDict doesn\u0027t contain key: \u0022 \u002B \u0022desert\u0022);\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E    Debug.Log(\u0022No key in bodyDict: \u0022 \u002B \u0022Kerbin\u0022);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMy rule of thumb for when to use Arrays/Dictionaries/Lists is that: Arrays are for groups of data of fixed size that will be accessed by index, Lists are for data I need to iterate over (or for when I need an array of variable size), Dictionaries are for accessing data by a non-numeric or non-continuous id (planet or biome name in this case). Appropriate choice of storage type makes everything else much easier.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-09T06:22:18Z\u0022 title=\u002203/09/2015 06:22  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 9, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003Cbr\u003Eforgot instance in gamedatabase\n\u003C/span\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T04:49:29Z","Content":"\n\u003Cp\u003ENice, thanks. That gives me a bit more to work from. After I sleep off this headache, I\u0027ll dive into it again.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-03-09T14:12:42Z","Content":"\n\u003Cp\u003EIf you need a more practicle example of that, you might want to look at RealChute\u003C/p\u003E\u003Cp\u003EFor example, parachute materials are all being loaded via config node. The mod sweeps the GameDatabase looking for all MATERIAL nodes, and then keeps those to store them into custom objects.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/StupidChris/RealChute/tree/master/RealChute/Libraries/MaterialsLibrary\u0022 rel=\u0022external nofollow\u0022\u003EHere\u0027s both classes\u003C/a\u003E who direct the loading and storage of that data. I use both a dictionary and an array as storage structures because this way I get easy lookup both by material name and by index. As for the node.TryGetValue() methods, they are \u003Ca href=\u0022https://github.com/StupidChris/RealChute/blob/master/RealChute/Extensions/ConfigNodeExtensions.cs\u0022 rel=\u0022external nofollow\u0022\u003EConfigNode extensions\u003C/a\u003E from my own. Feel free to use them if you want to.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T16:53:09Z","Content":"\n\u003Cp\u003ESweet. My head is feeling better already. Now if I could just get the dancing midget to move on... you \u003Cem\u003Eknow\u003C/em\u003E how they tend to creep in and never go away...\u003C/p\u003E\u003Cp\u003EEDIT: One thing I noticed in your code is that SharpDevelop (the program I use to do this stuff) is flagging this:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]summary[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E[COLOR=#008000][COLOR=#808080]///[/COLOR] Gets the index of the material looked for[/COLOR]\u003Cbr\u003E[COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]/[/B][B]summary[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E[COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]param[/B] [B]name[/B][B]=[/B][COLOR=#c0c0c0][B]\u0022name\u0022[/B][/COLOR]\u0026gt;[/COLOR]Name of the material[COLOR=#808080]\u0026lt;[B]/[/B][B]param[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E[COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#ff0000][B]int[/B][/COLOR] [COLOR=#191970][B]GetMaterialIndex[/B][/COLOR] ( [COLOR=#ff0000]string[/COLOR] name )\u003Cbr\u003E{\u003Cbr\u003E[COLOR=#000080]    return[/COLOR] [I]_materialNames[/I].[COLOR=#191970][B]IndexOf[/B][/COLOR](name);\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E...the item \u0022name\u0022 in the \u0022\u003Cem\u003E_materialNames\u003C/em\u003E.\u003Cstrong\u003E\u003Cspan style=\u0022color:#191970;\u0022\u003EIndexOf\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#191970;\u0022\u003E()\u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#191970;\u0022\u003E\u0022\u003C/span\u003E\u003C/strong\u003E is being flagged as \u0022Cannot implicitly convert type \u0027string\u0027 to \u0027?[]\u0027\u0022\u003C/p\u003E\u003Cp\u003EOther than that, this code is (as my C# professor \u003Cem\u003ESuzuki\u003C/em\u003E would say) \u0022beautiful code.\u0022\u003C/p\u003E\u003Cp\u003EEDIT2: Odd, when I loaded up the complete RealChute source, the flag does not come up in that same spot. Oh well.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-09T17:43:49Z\u0022 title=\u002203/09/2015 05:43  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 9, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-03-09T17:57:58Z","Content":"\n\u003Cp\u003EThis is because _materialNames is an array, and arrays do not implicitely implement IndexOf, but it is implemented in a static method in the Array class. I\u0027m lazy and a little perfectionist so this is an \u003Ca href=\u0022https://github.com/StupidChris/RealChute/blob/master/RealChute/Extensions/IEnumerableExtensions.cs#L23-L26\u0022 rel=\u0022external nofollow\u0022\u003Eextension method\u003C/a\u003E that basically applies the Array method.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T20:23:00Z","Content":"\n\u003Cp\u003EGotcha. I\u0027ve got the same bug, I just lack the expertise to do it myself.\u003C/p\u003E\u003Cp\u003EActually, what really has me messed up is that I can\u0027t write some code, make it output the result to the console and run it immediately like I would in the C# class, where we\u0027re only creating console applications. It would be really nice if there was some sort of development console we could run our code into and get some dummy results that would help make sense of it all. KSP takes over 10 minutes to launch even with a near-empty GameData folder, so that\u0027s not really very useful to me.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-09T20:31:16Z\u0022 title=\u002203/09/2015 08:31  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 9, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-03-09T20:25:42Z","Content":"\n\u003Cp\u003EIt\u0027s not a bug, just an overlook from Microsoft I guess. I like inline code, it increases readability.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-09T20:46:32Z","Content":"\n\u003Cp\u003Eno no no, by \u0022bug\u0022 I meant, the perfectionism thing.\u003C/p\u003E\u003Cp\u003ENow I\u0027ve got images of the original \u0022bug\u0022 which brought about the term in relation to computers stuck in my head. I\u0027ve gotta go see that exhibit next time they bring it up from storage.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-03-09T23:46:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EWhat I would like to do is instead make it load those definitions from a two-layered config node system such as, for example:\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EBODY\u003Cbr\u003E{\u003Cbr\u003E    name = Kerbin\u003Cbr\u003E    //Color format: (decimal) red, green, blue, alpha\u003Cbr\u003E    color = 0.75, 0.75, 0.75, 0.007\u003Cbr\u003E    BIOME\u003Cbr\u003E    {\u003Cbr\u003E        name = Ice Caps\u003Cbr\u003E        color = 0.90, 0.94, 1, 0.0125\u003Cbr\u003E    }[/snip]\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003ENow, I\u0027m unsure why this is causing me such a headache, but every time I try to adapt some new way of coding the retrieval and use of settings from a file formatted in such a way I hit this brick wall in my ability to comprehend where and what needs to happen to make it all fit in the right place. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are some ConfigNode tricks you can use to make this really simple. I don\u0027t know if you still intend to use the above format, but I\u0027ll use it as an example. Break the problem down. First, you need some kind of biome color description:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    public class BiomeDustColorInfo\u003Cbr\u003E    {\u003Cbr\u003E        [Persistent]\u003Cbr\u003E        public string Name;\u003Cbr\u003E\u003Cbr\u003E        [Persistent]\u003Cbr\u003E        public Color Color = Color.clear;\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe [Persistent] tag will let KSP know it should set these values for us. This will be important in a bit. Next, we have some kind of planet description:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    public class BodyDustColorInfo : IPersistenceLoad\u003Cbr\u003E    {\u003Cbr\u003E        [Persistent]\u003Cbr\u003E        public string Name;\u003Cbr\u003E\u003Cbr\u003E        [Persistent]\u003Cbr\u003E        public Color DefaultColor = Color.clear;\u003Cbr\u003E\u003Cbr\u003E        [Persistent]\u003Cbr\u003E        public List\u0026lt;BiomeDustColorInfo\u0026gt; BiomeColors = new List\u0026lt;BiomeDustColorInfo\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E        private Dictionary\u0026lt;string, Color\u0026gt; _colorDictionary = new Dictionary\u0026lt;string, Color\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E        public void PersistenceLoad()\u003Cbr\u003E        {\u003Cbr\u003E            _colorDictionary = BiomeColors.ToDictionary(ci =\u0026gt; ci.Name, ci =\u0026gt; ci.Color);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public Color GetDustColor(string name)\u003Cbr\u003E        {\u003Cbr\u003E            Color color;\u003Cbr\u003E\u003Cbr\u003E            return _colorDictionary.TryGetValue(name, out color) ? color : DefaultColor;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis one is a bit fancier. You\u0027ll notice we\u0027re also going to have KSP serialize a list for us. It\u0027s the only array-type object KSP\u0027s ConfigNode serialization method works on as far as I know. Of course, a list isn\u0027t very fast. We\u0027d really like to have that data stored in a dictionary. That\u0027s where IPersistenceLoad comes in. Right after ConfigNode deserializes this object, it will call PersistenceLoad and we can do our transformation there.\u003C/p\u003E\u003Cp\u003ENow, presumably we have some object we\u0027ll query later for dust color. That might look like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    public class DustColorDefinitions : IPersistenceLoad, IPersistenceSave\u003Cbr\u003E    {\u003Cbr\u003E        [Persistent] private List\u0026lt;BodyDustColorInfo\u0026gt; BodyDustColors = new List\u0026lt;BodyDustColorInfo\u0026gt;();\u003Cbr\u003E        [Persistent] private Color DefaultColor = Color.clear;\u003Cbr\u003E\u003Cbr\u003E        private Dictionary\u0026lt;CelestialBody,\u003Cbr\u003E            BodyDustColorInfo\u0026gt;\u003Cbr\u003E            _dustColors = new Dictionary\u0026lt;CelestialBody, BodyDustColorInfo\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public Color GetDustColor(CelestialBody body, double lat, double lon)\u003Cbr\u003E        {\u003Cbr\u003E            BodyDustColorInfo biomeColors;\u003Cbr\u003E            BiomeDustColorInfo dustColor;\u003Cbr\u003E\u003Cbr\u003E            if (!_dustColors.TryGetValue(body, out biomeColors))\u003Cbr\u003E                return DefaultColor;\u003Cbr\u003E\u003Cbr\u003E            var biome = FlightGlobals.ActiveVessel == null\u003Cbr\u003E                ? string.Empty\u003Cbr\u003E                : (string.IsNullOrEmpty(FlightGlobals.ActiveVessel.landedAt)\u003Cbr\u003E                    ? ScienceUtil.GetExperimentBiome(body, lat, lon)\u003Cbr\u003E                    : Vessel.GetLandedAtString(FlightGlobals.ActiveVessel.landedAt));\u003Cbr\u003E\u003Cbr\u003E            return biomeColors.GetDustColor(biome);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public void PersistenceLoad()\u003Cbr\u003E        {\u003Cbr\u003E            _dustColors = BodyDustColors\u003Cbr\u003E                .Where(info =\u0026gt; FlightGlobals.Bodies.Any(b =\u0026gt; b.bodyName == info.Name))\u003Cbr\u003E                .ToDictionary(\u003Cbr\u003E                info =\u0026gt; FlightGlobals.Bodies.Single(b =\u0026gt; b.bodyName == info.Name), c =\u0026gt; c);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public void PersistenceSave()\u003Cbr\u003E        {\u003Cbr\u003E            if (!BodyDustColors.Any())\u003Cbr\u003E            {\u003Cbr\u003E                // generate default config\u003Cbr\u003E                BodyDustColors = FlightGlobals.Bodies.Where(cb =\u0026gt; cb.BiomeMap != null).Select(b =\u0026gt; new BodyDustColorInfo\u003Cbr\u003E                {\u003Cbr\u003E                    DefaultColor = this.DefaultColor,\u003Cbr\u003E                    Name = b.bodyName,\u003Cbr\u003E                    BiomeColors = b.BiomeMap.Attributes\u003Cbr\u003E                        .GroupBy(attr =\u0026gt; attr.name)\u003Cbr\u003E                        .Select(group =\u0026gt; group.First())\u003Cbr\u003E                        .Select(attr =\u0026gt; new BiomeDustColorInfo {Color = attr.mapColor, Name = attr.name}).ToList()\u003Cbr\u003E                }).ToList();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou\u0027ll notice this is the same idea as the previous class except that we\u0027ve added IPersistenceSave. That gets called right \u003Cstrong\u003Ebefore\u003C/strong\u003E ConfigNode serializes this object. I took advantage of this to build a default ConfigNode to make editing a little easier.\u003C/p\u003E\u003Cp\u003ENow, at this point the persistent tags and IPersistences don\u0027t actually do anything. Here\u0027s where the magic happens:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    public class SomeAddonOrScenarioModuleOrWhatever : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private DustColorDefinitions dustDefinitions = new DustColorDefinitions();\u003Cbr\u003E\u003Cbr\u003E        private void Awake()\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E            // save default config\u003Cbr\u003E            // ConfigNode.Save sometimes strips out the root node which could be a problem if it\u0027s empty,\u003Cbr\u003E            // leading to a blank cfg = crashes KSP loader\u003Cbr\u003E            var defaultConfig = ConfigNode.CreateConfigFromObject(dustDefinitions);\u003Cbr\u003E            defaultConfig.name = \u0022DustColorDefinitions\u0022;\u003Cbr\u003E\u003Cbr\u003E            System.IO.File.WriteAllText(KSPUtil.ApplicationRootPath \u002B \u0022GameData/DustColorDefinitions.cfg\u0022, defaultConfig.ToString());\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            var definition = GameDatabase.Instance.GetConfigNodes(\u0022DustColorDefinitions\u0022).Single();\u003Cbr\u003E\u003Cbr\u003E            if (!ConfigNode.LoadObjectFromConfig(dustDefinitions, definition))\u003Cbr\u003E                print(\u0022ERROR: failed to load dust definitions\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        private void Update()\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022Current dust color: \u0022 \u002B\u003Cbr\u003E                    dustDefinitions.GetDustColor(FlightGlobals.ActiveVessel.mainBody,\u003Cbr\u003E                        FlightGlobals.ActiveVessel.latitude, FlightGlobals.ActiveVessel.longitude));\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E(The default config generated will look like the following)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E{\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BodyDustColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Kerbin\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Water\u003Cbr\u003E Color = 0,0.1960784,0.5176471,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Grasslands\u003Cbr\u003E Color = 0.3490196,0.7843137,0.05882353,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.1098039,0.5333334,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Shores\u003Cbr\u003E Color = 0.7058824,0.3882353,0.5176471,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Mountains\u003Cbr\u003E Color = 0.509804,0.2745098,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Deserts\u003Cbr\u003E Color = 0.9607843,0.7372549,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Badlands\u003Cbr\u003E Color = 0.02745098,0.1490196,0.03529412,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Tundra\u003Cbr\u003E Color = 0.4705882,0.8862745,0.4,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Ice Caps\u003Cbr\u003E Color = 0.9960784,0.9960784,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Mun\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.4392157,0.4392157,0.4392157,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Northern Basin\u003Cbr\u003E Color = 0.3882353,0.01176471,0.3960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = East Crater\u003Cbr\u003E Color = 0,0.9960784,0.3294118,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Northwest Crater\u003Cbr\u003E Color = 0.6941177,0.427451,0.1137255,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Southwest Crater\u003Cbr\u003E Color = 0.772549,0.9960784,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Farside Crater\u003Cbr\u003E Color = 0.9843137,0,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Canyons\u003Cbr\u003E Color = 0.6627451,0.6235294,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Polar Crater\u003Cbr\u003E Color = 0.9960784,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 0.4,0.9764706,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Polar Lowlands\u003Cbr\u003E Color = 0.3215686,0.7803922,0.7960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.9960784,0.9960784,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highland Craters\u003Cbr\u003E Color = 0.6784314,0.3843137,0.7333333,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midland Craters\u003Cbr\u003E Color = 0.1058824,0.1058824,0.1058824,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = East Farside Crater\u003Cbr\u003E Color = 0.1176471,0.007843138,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Twin Craters\u003Cbr\u003E Color = 1,0.5647059,0,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Minmus\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.254902,0.2941177,0.254902,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.5215687,0.7176471,0.6392157,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0.7372549,0.8941177,0.7568628,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Flats\u003Cbr\u003E Color = 0.1960784,0.2745098,0.3529412,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Great Flats\u003Cbr\u003E Color = 0.3411765,0.5450981,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Greater Flats\u003Cbr\u003E Color = 0.3529412,0.1372549,0.4156863,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lesser Flats\u003Cbr\u003E Color = 0.9960784,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 0,0.3529412,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Slopes\u003Cbr\u003E Color = 0.572549,0.3490196,0.3921569,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Moho\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = North Pole\u003Cbr\u003E Color = 1,0.682353,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Northern Sinkhole Ridge\u003Cbr\u003E Color = 1,0,0.4705882,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Northern Sinkhole\u003Cbr\u003E Color = 1,0.9176471,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.3882353,0.2627451,0.07843138,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Western Lowlands\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Central Lowlands\u003Cbr\u003E Color = 0,1,0.04705882,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.1372549,0.3921569,0.1686275,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Minor Craters\u003Cbr\u003E Color = 0.4980392,0.7058824,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = South Western Lowlands\u003Cbr\u003E Color = 0,1,0.9411765,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = South Eastern Lowlands\u003Cbr\u003E Color = 0.04705882,0,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Canyon\u003Cbr\u003E Color = 0.9764706,0.6392157,0.6392157,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = South Pole\u003Cbr\u003E Color = 0.9882353,0,1,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Eve\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 0.9882353,1,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0,0.8941177,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Explodium Sea\u003Cbr\u003E Color = 0.1176471,0,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0,1,0.1411765,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Peaks\u003Cbr\u003E Color = 1,0.6352941,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Impact Ejecta\u003Cbr\u003E Color = 0.6862745,0.7176471,0.3137255,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Duna\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0,1,0.1647059,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0,0.1882353,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Craters\u003Cbr\u003E Color = 0.682353,0,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0,0.9647059,1,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Ike\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Polar Lowlands\u003Cbr\u003E Color = 0,0.9882353,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.6588235,0,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Eastern Mountain Ridge\u003Cbr\u003E Color = 1,0.02352941,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Western Mountain Ridge\u003Cbr\u003E Color = 1,0.5176471,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0.9647059,1,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = South Eastern Mountain Range\u003Cbr\u003E Color = 1,0,0.8941177,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = South Pole\u003Cbr\u003E Color = 0.4705882,1,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Central Mountain Range\u003Cbr\u003E Color = 0.09411765,0,1,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Laythe\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 0,0.9882353,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Shores\u003Cbr\u003E Color = 0.9921569,0.6784314,0.007843138,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Dunes\u003Cbr\u003E Color = 0.02352941,1,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Crescent Bay\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = The Sagen Sea\u003Cbr\u003E Color = 0.02352941,0.1529412,0.9764706,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Vall\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.9843137,0.01568628,0.4823529,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0,0.1882353,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0,1,0.02352941,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Bop\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Peaks\u003Cbr\u003E Color = 0,0.9176471,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Ridges\u003Cbr\u003E Color = 0.4745098,0.4823529,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 1,0.6117647,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Slopes\u003Cbr\u003E Color = 1,0,0.7529412,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Valley\u003Cbr\u003E Color = 0.9882353,1,0,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Tylo\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.9960784,0.003921569,0.9607843,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.145098,0.9960784,0.003921569,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0.9960784,0.003921569,0.003921569,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Mara\u003Cbr\u003E Color = 0,0.9921569,0.9098039,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Minor Craters\u003Cbr\u003E Color = 0.03529412,0.7254902,0.1490196,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Major Crater\u003Cbr\u003E Color = 0.9960784,0.9607843,0.003921569,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Gilly\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.8901961,0,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 0.9176471,0.007843138,0.3843137,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.02352941,0,0.9960784,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Pol\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 0.09411765,1,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 1,0.6352941,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0,0.1882353,1,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Dres\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 1,0.9647059,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0,1,0.9176471,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 1,0,0.8,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Ridges\u003Cbr\u003E Color = 0.1058824,0.3568628,0.172549,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 0.9960784,0.5372549,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Impact Craters\u003Cbr\u003E Color = 0.09411765,0,1,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Impact Ejecta\u003Cbr\u003E Color = 1,0.682353,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Canyons\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Eeloo\u003Cbr\u003E DefaultColor = 0,0,0,0\u003Cbr\u003E BiomeColors\u003Cbr\u003E {\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Poles\u003Cbr\u003E Color = 1,0,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Glaciers\u003Cbr\u003E Color = 0.6862745,0.3019608,0.8784314,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Lowlands\u003Cbr\u003E Color = 1,0,0.8235294,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Highlands\u003Cbr\u003E Color = 1,0.7294118,0,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Ice Canyons\u003Cbr\u003E Color = 0,1,0.09411765,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Craters\u003Cbr\u003E Color = 0.03529412,0.05098039,0.7254902,1\u003Cbr\u003E }\u003Cbr\u003E Item\u003Cbr\u003E {\u003Cbr\u003E Name = Midlands\u003Cbr\u003E Color = 0.2666667,0.7058824,0.9529412,1\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E}\u003Cbr\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EDustColorDefinitions\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EAs a little bonus, by looking at vessel.landedAt as well as biome, you could add entries in here for specific collidable objects -- \u0022LaunchPad\u0022 etc\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-10T17:10:33Z","Content":"\n\u003Cp\u003EWell, grind me up and feed me to the space monkeys... That\u0027s awesome. I just woke up and I\u0027m \u003Cem\u003Eso\u003C/em\u003E not ready to process that, but it looks like a cure from where I\u0027m sitting. Thanks a bunch.\u003C/p\u003E\u003Cp\u003EUPDATE: alright, I\u0027m a bit fresher now and hopping to it. I hope you don\u0027t mind, but I\u0027m going to take the easy way out at the first and pretty much copy what you posted word for word and see where it takes me. This is what always messed me up in classes: they try to teach you by showing you how it starts and then giving you a problem that cannot be solved by what you have and expect you to figure it out. I learn better by taking apart a complete example of \u003Cem\u003Eexactly\u003C/em\u003E what I need and morphing it into my own. That\u0027s why I normally will go to the end of my math book and start tearing apart the final questions of the entire class of thought and trying to make them function for me. It really bugs my teachers though, which \u003Cem\u003Ecould \u003C/em\u003Ebe absolutely hilarious and quite entertaining if is wasn\u0027t for the fact that they are deciding my future by grading my work.\u003C/p\u003E\u003Cp\u003EIn this context, I had completed (or functional at least) mods to look at, some of which I didn\u0027t have the source for and had to cheat by using ILSpy (I\u0027m \u003Cem\u003Eso\u003C/em\u003E sneaky) but none of them really did what I was trying to do in a way that would make sense because they weren\u0027t handling the data I needed handled, and almost all of them were not just loading but also saving way too much information for my needs.\u003C/p\u003E\u003Cp\u003EAnyway, I think I\u0027m going to get there now.\u003C/p\u003E\u003Cp\u003EEDIT2: Okay, so it\u0027s not liking something in there:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[COLOR=#0000ff][B]     public[/B][/COLOR] [COLOR=#ff0000]class[/COLOR] [COLOR=#004085]DustColorDefinitions[/COLOR] : [COLOR=#004085]IPersistenceLoad[/COLOR], [COLOR=#004085]IPersistenceSave[/COLOR]\u003Cbr\u003E    {\u003Cbr\u003E        [Persistent] [COLOR=#0000ff][B]private[/B][/COLOR] [COLOR=#004085]List[/COLOR]\u0026lt;[COLOR=#8b0000]BodyDustColorInfo[/COLOR]\u0026gt; [I]BodyDustColors[/I] = [U][COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085]List[/COLOR]\u0026lt;[COLOR=#8b0000]BodyDustColorInfo[/COLOR]\u0026gt;();[/U]\u003Cbr\u003E                                                               [COLOR=#006400]//[COLOR=#006400](underlined above) C[/COLOR]annot implicitly convert type List\u0026lt;?\u0026gt; to List\u0026lt;BodyDustColorInfo\u0026gt;[/COLOR]\u003Cbr\u003E        [Persistent] [COLOR=#0000ff][B]private[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]DefaultColor[/I] = [COLOR=#004085][B]Color[/B][/COLOR].clear;\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]private[/B][/COLOR] [COLOR=#004085]Dictionary[/COLOR]\u0026lt;[COLOR=#004085]CelestialBody[/COLOR],\u003Cbr\u003E            [COLOR=#8b0000]BodyDustColorInfo[/COLOR]\u0026gt;\u003Cbr\u003E            [I]_dustColors[/I] = [U][COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085]Dictionary[/COLOR]\u0026lt;[COLOR=#004085]CelestialBody[/COLOR], [COLOR=#8b0000]BodyDustColorInfo[/COLOR]\u0026gt;();[/U]\u003Cbr\u003E                    [COLOR=#006400]//[COLOR=#006400](underlined above) C[/COLOR]annot implicitly convert type Dictionary\u0026lt;CelestialBody\u0026gt; to Dictionary\u0026lt;CelestialBody, BodyDustColorInfo\u0026gt;[/COLOR]\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [COLOR=#191970][B]GetDustColor[/B][/COLOR]([COLOR=#004085]CelestialBody[/COLOR] body, [COLOR=#ff0000][B]double[/B][/COLOR] lat, [COLOR=#ff0000][B]double[/B][/COLOR] lon)\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#8b0000]BodyDustColorInfo[/COLOR] biomeColors;\u003Cbr\u003E            [COLOR=#004085]BiomeDustColorInfo[/COLOR] dustColor;\u003Cbr\u003E\u003Cbr\u003E            [COLOR=#0000ff][B]if[/B][/COLOR] (![I]_dustColors[/I].[COLOR=#191970][B]TryGetValue[/B][/COLOR](body, [U][COLOR=#ff1493][B]out[/B][/COLOR] biomeColors[/U]))\u003Cbr\u003E                                        [COLOR=#006400]//(underlined above) Cannot implicitly convert type ? to BodyDustColorInfo[/COLOR]\u003Cbr\u003E                [COLOR=#000080]return[/COLOR] [I]DefaultColor[/I];\u003Cbr\u003E\u003Cbr\u003E            var biome = [COLOR=#004085]FlightGlobals[/COLOR].ActiveVessel == [B]null[/B]\u003Cbr\u003E                ? [COLOR=#ff0000]string[/COLOR].[I]Empty[/I]\u003Cbr\u003E                : ([COLOR=#ff0000]string[/COLOR].[COLOR=#191970][B]IsNullOrEmpty[/B][/COLOR]([COLOR=#004085]FlightGlobals[/COLOR].ActiveVessel.[I]landedAt[/I])\u003Cbr\u003E                    ? [COLOR=#004085]ScienceUtil[/COLOR].[COLOR=#191970][B]GetExperimentBiome[/B][/COLOR](body, lat, lon)\u003Cbr\u003E                    : [COLOR=#004085]Vessel[/COLOR].[COLOR=#191970][B]GetLandedAtString[/B][/COLOR]([COLOR=#004085]FlightGlobals[/COLOR].ActiveVessel.[I]landedAt[/I]));\u003Cbr\u003E\u003Cbr\u003E            [COLOR=#000080]return[/COLOR] biomeColors.[COLOR=#8b0000]GetDustColor[/COLOR](biome);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#ff0000]void[/COLOR] [COLOR=#191970][B]PersistenceLoad[/B][/COLOR]()\u003Cbr\u003E        {\u003Cbr\u003E            [I]_dustColors[/I] = [I]BodyDustColors[/I]\u003Cbr\u003E                .[COLOR=#191970][B]Where[/B][/COLOR](info =\u0026gt; [COLOR=#004085]FlightGlobals[/COLOR].Bodies.[COLOR=#191970][B]Any[/B][/COLOR](b =\u0026gt; b.[I]bodyName[/I] == info.[COLOR=#8b0000]Name[/COLOR]))\u003Cbr\u003E                .[COLOR=#191970][B]ToDictionary[/B][/COLOR](\u003Cbr\u003E                info =\u0026gt; [COLOR=#004085]FlightGlobals[/COLOR].Bodies.[COLOR=#191970][B]Single[/B][/COLOR](b =\u0026gt; b.[I]bodyName[/I] == info.[COLOR=#8b0000]Name[/COLOR]), c =\u0026gt; c);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#ff0000]void[/COLOR] [COLOR=#191970][B]PersistenceSave[/B][/COLOR]()\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#0000ff][B]if[/B][/COLOR] (![I]BodyDustColors[/I].[COLOR=#191970][B]Any[/B][/COLOR]())\u003Cbr\u003E            {\u003Cbr\u003E                [COLOR=#008000]// generate default config[/COLOR]\u003Cbr\u003E                [I]BodyDustColors[/I] = [U][COLOR=#004085]FlightGlobals[/COLOR].Bodies.[COLOR=#191970][B]Where[/B][/COLOR](cb =\u0026gt; cb.[I]BiomeMap[/I] != [B]null[/B]).[COLOR=#191970][B]Select[/B][/COLOR](b =\u0026gt; [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#8b0000]BodyDustColorInfo[/COLOR]\u003Cbr\u003E                {\u003Cbr\u003E                    [COLOR=#8b0000]DefaultColor[/COLOR] = [I]DefaultColor[/I],\u003Cbr\u003E                    [COLOR=#8b0000]Name[/COLOR] = b.[I]bodyName[/I],\u003Cbr\u003E                    [COLOR=#8b0000]BiomeColors[/COLOR] = b.[I]BiomeMap[/I].[I]Attributes[/I]\u003Cbr\u003E                        .[COLOR=#191970][B]GroupBy[/B][/COLOR](attr =\u0026gt; attr.[I]name[/I])\u003Cbr\u003E                        .[COLOR=#191970][B]Select[/B][/COLOR]([COLOR=#000080]group[/COLOR] =\u0026gt; [COLOR=#000080]group[/COLOR].[COLOR=#191970][B]First[/B][/COLOR]())\u003Cbr\u003E                        .[COLOR=#191970][B]Select[/B][/COLOR](attr =\u0026gt; [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085]BiomeDustColorInfo[/COLOR] {Color = attr.[I]mapColor[/I], Name = attr.[I]name[/I]}).[COLOR=#191970][B]ToList[/B][/COLOR]()\u003Cbr\u003E                }).[COLOR=#191970][B]ToList[/B][/COLOR]();[/U]\u003Cbr\u003E                   [COLOR=#006400]//(the entire underlined segment above) Cannot implicitly convert type[/COLOR] [COLOR=#006400]List\u0026lt;?\u0026gt; to List\u0026lt;BodyDustColorInfo\u0026gt;[/COLOR]\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo yeah, something not quite right in there. My guess is I need to be \u0022using\u0022 something more than the standard set, or that there\u0027s an extra reference I need.\u003C/p\u003E\u003Cp\u003EEDIT3: I got it! Wow, that was a crazy one. So, it seems you named the first class \u0022BiomeDustColorInfo\u0022 but proceeded to use \u0022BodyDustColorInfo\u0022 in most of the second class. Switching out the name fixed every error I was getting.\u003C/p\u003E\u003Cp\u003EEDIT4: Okay, so let me speak directly from my brain here and ask a few questions...\u003C/p\u003E\u003Cp\u003ESo, what it looks like is that this code will generate (if not already found) all of those locations/biomes in the file of choice upon initializing the plugin, but if the file exists will simply use what it is given. What happens if it finds incomplete data? Will it fill in the incomplete data, or will it simply use what it has and get grumpy when we ask for more?\u003C/p\u003E\u003Cp\u003EAlso, in your example config file, were those color defaults selected by you, or did the code automatically generate an appropriate color for that biome?\u003C/p\u003E\u003Cp\u003EFinally, the big question: I need to grab the color information and plug that into the original code for the dust particle creator. Is the current format of the color data going to be compatible, or will I need to convert it into some other format? Here\u0027s a new sample of what I have at this time for using the color data to generate the dust plumes:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        [COLOR=#ff0000]void[/COLOR] [COLOR=#191970][B]DustParticles[/B][/COLOR] ( [COLOR=#ff0000][B]float[/B][/COLOR] speed, [COLOR=#004085][B]Vector3[/B][/COLOR] contactPoint, [COLOR=#004085]Collider[/COLOR] col )\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#0000ff][B]if[/B][/COLOR] (![I]dustEffects[/I])\u003Cbr\u003E                [COLOR=#000080]return[/COLOR];\u003Cbr\u003E            [COLOR=#0000ff][B]if[/B][/COLOR] (speed \u0026gt; [I]minScrapeSpeed[/I])\u003Cbr\u003E            {\u003Cbr\u003E                [COLOR=#008000]// Set dust biome colour.[/COLOR]\u003Cbr\u003E                [COLOR=#0000ff][B]if[/B][/COLOR] (![COLOR=#191970][B]Equals[/B][/COLOR]([I]dustAnimator[/I], [B]null[/B]))\u003Cbr\u003E                {\u003Cbr\u003E                    [COLOR=#004085][B]Color[/B][/COLOR] BiomeColor = [COLOR=#191970][B]GetBiomeColour[/B][/COLOR](col);\u003Cbr\u003E                    [COLOR=#0000ff][B]if[/B][/COLOR] (![COLOR=#191970][B]Equals[/B][/COLOR](BiomeColor, [I]dustColor[/I]))\u003Cbr\u003E                    {\u003Cbr\u003E                        [COLOR=#004085][B]Color[/B][/COLOR] [] colors = [I]dustAnimator[/I].colorAnimation;\u003Cbr\u003E                        colors[[COLOR=#00008b]0[/COLOR]] = BiomeColor;\u003Cbr\u003E                        colors[[COLOR=#00008b]1[/COLOR]] = BiomeColor;\u003Cbr\u003E                        colors[[COLOR=#00008b]2[/COLOR]] = BiomeColor;\u003Cbr\u003E                        colors[[COLOR=#00008b]3[/COLOR]] = BiomeColor;\u003Cbr\u003E                        colors[[COLOR=#00008b]4[/COLOR]] = BiomeColor;\u003Cbr\u003E                        [I]dustAnimator[/I].colorAnimation = colors;\u003Cbr\u003E                        [I]dustColor[/I] = BiomeColor;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                [COLOR=#0000ff][B]else[/B][/COLOR]\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR];\u003Cbr\u003E\u003Cbr\u003E                [I]dustFx[/I].transform.position = contactPoint;\u003Cbr\u003E                [I]dustFx[/I].particleEmitter.maxEnergy = speed / [I]maxDustEnergyDiv[/I];\u003Cbr\u003E                [I]dustFx[/I].particleEmitter.maxEmission = [COLOR=#004085][B]Mathf[/B][/COLOR].[COLOR=#191970][B]Clamp[/B][/COLOR]((speed * [I]maxDustEmissionMult[/I]), [I]minDustEmission[/I], [I]maxDustEmission[/I]);\u003Cbr\u003E                [I]dustFx[/I].particleEmitter.[COLOR=#191970][B]Emit[/B][/COLOR]();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E[COLOR=#008000]        // Color format: RGBA (0-1, decimal percentage)[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]genericDustColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.75[/COLOR]f, [COLOR=#00008b]0.007[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Grey 210 210 210[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]dirtColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.65[/COLOR]f, [COLOR=#00008b]0.48[/COLOR]f, [COLOR=#00008b]0.34[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Brown 165, 122, 88[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]lightDirtColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.65[/COLOR]f, [COLOR=#00008b]0.52[/COLOR]f, [COLOR=#00008b]0.34[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Brown 165, 132, 88[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]sandColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.80[/COLOR]f, [COLOR=#00008b]0.68[/COLOR]f, [COLOR=#00008b]0.47[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Light brown 203, 173, 119[/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [I]snowColour[/I] = [COLOR=#008b8b][B]new[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] ([COLOR=#00008b]0.90[/COLOR]f, [COLOR=#00008b]0.94[/COLOR]f, [COLOR=#00008b]1[/COLOR]f, [COLOR=#00008b]0.0125[/COLOR]f);\u003Cbr\u003E        [COLOR=#008000]// Blue-white 230, 250, 255[/COLOR]\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085][B]Color[/B][/COLOR] [COLOR=#191970][B]GetBiomeColour[/B][/COLOR] ( [COLOR=#004085]Collider[/COLOR] c )\u003Cbr\u003E        {\u003Cbr\u003E            [COLOR=#0000ff][B]switch[/B][/COLOR] ([COLOR=#004085]FlightGlobals[/COLOR].ActiveVessel.mainBody.name)\u003Cbr\u003E            {\u003Cbr\u003E                [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Kerbin\u0022[/COLOR]:\u003Cbr\u003E                    [COLOR=#0000ff][B]if[/B][/COLOR] ([COLOR=#191970][B]IsPQS[/B][/COLOR](c))\u003Cbr\u003E                    {\u003Cbr\u003E                        [COLOR=#ff0000]string[/COLOR] biome = [COLOR=#191970][B]GetCurrentBiomeName[/B][/COLOR]();\u003Cbr\u003E                        [COLOR=#0000ff][B]switch[/B][/COLOR] (biome)\u003Cbr\u003E                        {\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Water\u0022[/COLOR]: [COLOR=#008000]//Anything here would be the sea-bottom.[/COLOR]\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]lightDirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Grasslands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Highlands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Shores\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]lightDirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Mountains\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Deserts\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]sandColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Badlands\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Tundra\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Ice Caps\u0022[/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]snowColour[/I];\u003Cbr\u003E                            [COLOR=#0000ff][B]default[/B][/COLOR]:\u003Cbr\u003E                                [COLOR=#000080]return[/COLOR] [I]dirtColour[/I];\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]genericDustColour[/I];\u003Cbr\u003E                [COLOR=#0000ff][B]case[/B][/COLOR] [COLOR=#0000ff]\u0022Duna\u0022[/COLOR]:\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]sandColour[/I];\u003Cbr\u003E                [COLOR=#0000ff][B]default[/B][/COLOR]:\u003Cbr\u003E                    [COLOR=#000080]return[/COLOR] [I]genericDustColour[/I];\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI assume that I could now likely get rid of the specifically handled body names and instead simply grab the vessel\u0027s current body/biome and query a method in the other file (I stuck all the other stuff in a file I uniquely, \u003Cem\u003Eas if,\u003C/em\u003E named \u0022Config.cs\u0022... \u003Cem\u003Eingenious naming converntion I have there, aint it?\u003C/em\u003E) for the matching configuration.\u003C/p\u003E\u003Cp\u003EI also would need to make sure it\u0027s going to return to the default color for each body (which is going to probably just be a generic matching color to the body\u0027s apparent color from orbit) when no biome match can be found, in those rare cases where the body doesn\u0027t have them set up, or in the case of a mod-added celestial body.\u003C/p\u003E\u003Cp\u003EThis is exciting... You have no idea how long I\u0027ve been trying to figure out how this is done (at least three weeks between school, school, and more of... you guessed it... \u003Cstrong\u003E\u003Cem\u003Eschool\u003C/em\u003E\u003C/strong\u003E).\u003C/p\u003E\u003Cp\u003EEDIT... whatever number we\u0027re on:\u003C/p\u003E\u003Cp\u003EOkay, so I tried to run it really fast to see what would happen and it wasn\u0027t a complete success. It seems that it can\u0027t even load these new classes right off the bat. Here\u0027s what it put in the log before KSP crashed:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[ERR 13:08:17.263] AssemblyLoader: Exception loading \u0027DustFX\u0027: System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded.\u003Cbr\u003E  at (wrapper managed-to-native) System.Reflection.Assembly:GetTypes (bool)\u003Cbr\u003E  at System.Reflection.Assembly.GetTypes () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E  at AssemblyLoader.LoadAssemblies () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003EAdditional information about this exception:\u003Cbr\u003E\u003Cbr\u003E System.TypeLoadException: Could not load type \u0027DustFX.Configs.BiomeDustColorInfo\u0027 from assembly \u0027DustFX, Version=1.0.5547.21743, Culture=neutral, PublicKeyToken=null\u0027.\u003Cbr\u003E\u003Cbr\u003E System.TypeLoadException: Could not load type \u0027DustFX.Configs.DustColorDefinitions\u0027 from assembly \u0027DustFX, Version=1.0.5547.21743, Culture=neutral, PublicKeyToken=null\u0027.\u003Cbr\u003E\u003Cbr\u003E System.TypeLoadException: Could not load type \u0027DustFX.Configs.DustColorFileWriter\u0027 from assembly \u0027DustFX, Version=1.0.5547.21743, Culture=neutral, PublicKeyToken=null\u0027.\u003Cbr\u003E\u003Cbr\u003E System.TypeLoadException: Could not load type \u0027\u0026lt;\u0026gt;c__DisplayClass8\u0027 from assembly \u0027DustFX, Version=1.0.5547.21743, Culture=neutral, PublicKeyToken=null\u0027.\u003Cbr\u003E\u003Cbr\u003E System.TypeLoadException: Could not load type \u0027\u0026lt;\u0026gt;c__DisplayClassa\u0027 from assembly \u0027DustFX, Version=1.0.5547.21743, Culture=neutral, PublicKeyToken=null\u0027.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI renamed that really long vague class/function/whatever-you-call-it to DustColorFileWriter for lack of anything better to call it. Anyway, to make sure it wasn\u0027t just a random KSP loader bug, I relaunched and, while successfully laoding up assets now, it still put the above bit into the log. So, I\u0027ve got some issues in there somewhere.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-10T20:18:04Z\u0022 title=\u002203/10/2015 08:18  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 10, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-03-10T21:52:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003ESo, what it looks like is that this code will generate (if not already found) all of those locations/biomes in the file of choice upon initializing the plugin, but if the file exists will simply use what it is given. What happens if it finds incomplete data?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt depends on where its attempt to find the color fails. If you ask it for a CelestialBody and there aren\u0027t any entries for that body, you get the default overall color (DustColorDefinitions.DefaultColor). If instead it\u0027s a valid body but there\u0027s no entry for the current biome or LandedAt string, you get the default color for that planet (BodyDustColorInfo.DefaultColor). You could make a small edit to make sure all the planets are accounted for but it might lead to strange results. For instance, if the user has installed a planet pack of some kind that renames all the planets, the current \u0022generate default\u0022 is going to result in some odd colored dust/sparks.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EAlso, in your example config file, were those color defaults selected by you, or did the code automatically generate an appropriate color for that biome?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMerely used the internal map color to give it a non-transparent initial value. Querying the actual diffuse map would be a great idea though.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EFinally, the big question: I need to grab the color information and plug that into the original code for the dust particle creator. Is the current format of the color data going to be compatible, or will I need to convert it into some other format? Here\u0027s a new sample of what I have at this time for using the color data to generate the dust plumes:\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, you should be able to outright replace your entire GetBiomeColour method with GetDustColor. The only real difference is that I removed the collider inspection you do in yours and use the vessel landedAt string instead. I was thinking that you might want to customize dust based on the exact object the vessel is traveling on but that part is untested for anything but a stationary vessel so might need tweaking\u003C/p\u003E\u003Cp\u003EAs for the loading error: are you targeting .Net 3.5? Is your source posted anywhere?\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-10T22:44:13Z","Content":"\n\u003Cp\u003EAh, so it\u0027s specific to 3.5? There are only a few recompiles of other mods that reacted badly to switching to 4.0. The reason is that when I load a project that uses 3.5, it tells me something is missing that it needs. By experimentation, I found that 4.0 got rid of that problem. I am unsure why it matters in these few cases, but in most other does not. I am unsure how I could rectify the situation of having to reference version 3.5.\u003C/p\u003E\u003Cp\u003EI actually haven\u0027t posted my source anywhere at this time. It doesn\u0027t even work fully yet, and it\u0027s very specifically aimed at the parts found in the Kerbal Foundries mod, so it\u0027s really not too useful outside of that context.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-10T22:48:51Z\u0022 title=\u002203/10/2015 10:48  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 10, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-03-10T22:46:34Z","Content":"\n\u003Cp\u003EKSP is compiled against .NET 3.5 (effectively), so you need to do the same to make sure everything works.\u003C/p\u003E\u003Cp\u003ESwitching from 4.5 to 3.5 on a new project gives me an error about the Microsoft.CSharp (IIRC) reference being lost. Just delete the reference if that\u0027s the thing that\u0027s failing, you don\u0027t need it.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-10T23:15:30Z","Content":"\n\u003Cp\u003Ethat is not what\u0027s really happening here. When I open a project that previously referenced framework 3.5, I see this:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EThe reference assemblies for framework \u0022.NETFramework,Version=v3.5\u0022 were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\u003C/pre\u003E\u003Cp\u003EHowever, upon trying to find the required SDK, I\u0027m being told that installing this older SDK package is not recommended and I worry about it causing problems with other projects that use a different framework version. Besides, actually finding a proper download for these things is near impossible. Microsoft\u0027s own site says that a different package is recommended, but it doesn\u0027t link me to that package that it suggests, so I can\u0027t actually find it.\u003C/p\u003E\u003Cp\u003EI just don\u0027t undrstand why it\u0027s a problem here due to the fact that 90% of the other mods, all quite complicated pieces of work, in which I convert to framework 4.0, function perfectly, and yet this one will not even load properly with rather vague errors that do not exist when compiling or writing the code itself. The only thing that changes, that I can see, when changing the targeted framework version, is that a new reference gets added (Microsoft.CSharp) and the error about a missing reference SDK is removed.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EYes, you should be able to outright replace your entire GetBiomeColour method with GetDustColor. The only real difference is that I removed the collider inspection you do in yours and use the vessel landedAt string instead. I was thinking that you might want to customize dust based on the exact object the vessel is traveling on but that part is untested for anything but a stationary vessel so might need tweaking.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s interesting... but I think it might be a little beyond my scope for the time being. It would only really come into usefulness if the surface of a body was covered in custom landscape using models that are separate from the body surface in which I could match the dust color based on their apparent material type. At the KSC, however, I think the pavement and the grass is all part of the same false-landscape object, so I wouldn\u0027t necessarily be able to map only a slight barely-visible trail to the paved areas and a grassy/dirty trail to the grass areas. As it is, I\u0027m just going to further tone down the default dust effect and let that take over when the collision with the actual planetary surface is lost. I may even, in the far future, re-implement the effects from CollisionFX (if I can get in touch with the original author for some cooperation) so that the tracks, for instance, can create some very subdued sparking when scraping against the pavement during tight turns.\u003C/p\u003E\u003Cp\u003EGood to have that option available, though. Right now, my best idea for how to make it all work, was simply to replace the switch I have currently with a call to the GetDustColor method which, I believe, takes a name for the body you\u0027re checking for the settings of, and pass the name of the body/biome that is found in the method that I currently have for figuring out what the vessel is colliding with. I\u0027m really not knowledgeable enough with these things to rewrite the method for using a different detection method than what is used now. See, this isn\u0027t a completely original piece of work, but rather a re-purposing of CollisionFX, which was not authored by me.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-03-10T23:19:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EI just don\u0027t undrstand why it\u0027s a problem here due to the fact that 90% of the other mods, all quite complicated pieces of work, in which I convert to framework 4.0, function perfectly, and yet this one will not even load properly with rather vague errors that do not exist when compiling or writing the code itself.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAll it would take is a single bit to change between the 3.5 implementation and the 4.0 implementation and things won\u0027t behave. This is why 4\u002B falls over without any ryhme or reason.\u003C/p\u003E\u003Cp\u003EAssuming you\u0027re on Win8(.1) since you don\u0027t have 3.5 (scroll down to the bit about enabling in the control panel): \u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/hh506443%28v=vs.110%29.aspx\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://msdn.microsoft.com/en-us/library/hh506443%28v=vs.110%29.aspx\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-11T00:00:23Z","Content":"\n\u003Cp\u003EYour assumption is false, I wouldn\u0027t be using windows 8 if you paid me. It\u0027s too weird. I\u0027m running Windows 7 ultimate.\u003C/p\u003E\u003Cp\u003EI also just attempted to install the SDK for 3.5 and it made absolutely no difference when trying to change the project into a 3.5 framework project.\u003C/p\u003E\u003Cp\u003EEDIT: I have tried everything I can think of from installing .net framework 3.5, 4.5, 4.0, etc and I am still being told that the SDK or Targeting Pack for .net 3.5 is required. I am told online that you cannot install it on Windows 7 because it\u0027s included, but it apparently is NOT included because I can\u0027t reference it or compile with it. When I search explicitly for \u0022.net framework 3.5 SDK\u0022 on the microsoft download site, I am presented with several pages of search results containing everything \u003Cem\u003Eexcept\u003C/em\u003E the freaking SDK for 3.5. I get 2.0, 4.0, 4.5, but NOT 3.5 even though I specifically entered \u00223.5\u0022 into the search area. No matter what, the only .net framework version that I can successfully use is 4.0, and only 4.0. Anything else and it fails to even build the project. This is going to drive me absolutely insane.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-11T00:47:22Z\u0022 title=\u002203/11/2015 12:47  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 11, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-03-11T02:11:47Z","Content":"\n\u003Cp\u003EI think \u003Ca href=\u0022http://www.microsoft.com/en-nz/download/details.aspx?id=21\u0022 rel=\u0022external nofollow\u0022\u003Ethis\u003C/a\u003E is the thing you want (the SDK shouldn\u0027t be required, you only need it as a reference). Why your Win7 apparently doesn\u0027t have it... *shrug*\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-11T04:50:15Z","Content":"\n\u003Cp\u003EIt\u0027s a grand mystery, indeed. I attempted to compile it without the proper stuff, letting it use whatever it could find that would work, and... oddly enough, no more errors on loading up KSP. We\u0027ll see if it actually does anything though.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe thing about that download is that the file won\u0027t even run. Even after I extract it manually and try to run the setup file, it works for half a second and then quits with no message or anything. My guess is that it will only function if it doesn\u0027t detect an even or higher version already installed. That means, if I can compile under .net 4.0, I will never be able to compile under anything lower than that because it can\u0027t be installed at the same time. Searches on the subject seem to confirm that, but at the same time those same results say that having a higher version of the framework installed also allows you to make use of any previous versions, which I am discovering is not the case. At this time I\u0027m calling it an issue with SharpDevelop (the software I use to develop this stuff) and it\u0027s probably not an error at all, but simply a warning that I might not be able to effectively prepare my project for that specific platform without the full SDK for that version installed. Considering KSP uses a framework that is a bit behind the times, compiling for that specific platform with the idea that the intended audience will need to upgrade to that version is unlikely to be the case since we will all likely have a version much higher than the requested version installed. It still remains a mystery as to why I can run some plugins in KSP with 4.0, and others on the boards have reported no issue with using 4.5 even, but this specific stuff will only function under 3.5. It\u0027s a very confusing mystery.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-03-11T09:51:32Z","Content":"\n\u003Cp\u003EA plugin compiled for 4 or 4.5 runs fine until mono find a CIL instruction not part of the 3.5 specs. At that point you get a runtime exception. So it is a really bad idea since you can\u0027t be sure all your code will work.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-03-11T12:30:21Z","Content":"\n\u003Cp\u003EHave you installed the full (extended) .net package? IIRC, there were several different versions. Or just install VS Express and it\u0027ll all work right out of the box.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-11T20:28:20Z","Content":"\n\u003Cp\u003EI\u0027m probably asking for trouble by not using VS at all.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarbian\u0022 data-cite=\u0022sarbian\u0022\u003E\u003Cdiv\u003EA plugin compiled for 4 or 4.5 runs fine until mono find a CIL instruction not part of the 3.5 specs. At that point you get a runtime exception. So it is a really bad idea since you can\u0027t be sure all your code will work.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m all out of options though, so if it\u0027s working now I\u0027m going to run with it.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-03-11T22:47:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EI\u0027m probably asking for trouble by not using VS at all.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat do you mean by that ? \u003C/p\u003E\u003Cp\u003EIf you don\u0027t want VS and want command line compiling then install mono and/or Monodevelop then, you won\u0027t need the 3.5 .NET SDK that way.\u003C/p\u003E\u003Cp\u003EAnd you can have all the .NET SDK installed in parrallel. I don\u0027t know what is going on with your installs or what you are doing but I guess you are doing something wrong.\u003C/p\u003E\u003Cp\u003EReleasing a mod targeting 4.5 is asking for trouble. Explain what you are doing instead of making post saying it does not work.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-03-12T01:39:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarbian\u0022 data-cite=\u0022sarbian\u0022\u003E\u003Cdiv\u003EWhat do you mean by that ? \u003Cp\u003EIf you don\u0027t want VS and want command line compiling then install mono and/or Monodevelop then, you won\u0027t need the 3.5 .NET SDK that way.\u003C/p\u003E\u003Cp\u003EAnd you can have all the .NET SDK installed in parrallel. I don\u0027t know what is going on with your installs or what you are doing but I guess you are doing something wrong.\u003C/p\u003E\u003Cp\u003EReleasing a mod targeting 4.5 is asking for trouble. Explain what you are doing instead of making post saying it does not work.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFirst, I mean that I do not use Visual Studio, and there\u0027s more out there available than Mono to fill in the gaps. Command-line would actually make things very difficult for me. Do a little more research and you\u0027ll find that there\u0027s more to this world than VS and Mono. You\u0027ll be amazed, I assure you.\u003C/p\u003E\u003Cp\u003ESecond, I cannot have them all installed in tandem, as they won\u0027t install together. Declaring that what I am saying is false without providing a solution to the problem is just being argumentative. I\u0027m sitting right here, double clicking on a setup file that refuses to run. I haven\u0027t been messing with PCs since i was 3 years old on a PC Junior (no hard drive, two literally floppy disks just to boot it up) to miss some obvious user error that would lead you to point out that you believe I can have something installed that, as i will assure you right now, refuses to even try to install. In fact, I\u0027ve been told that if I have the 4.5 edition, I also have all the others, yet my compiler refuses to use anything but version 4 in the correct manner. However, it seems that compiling under 3.5 even when it cannot find the correct assembles has worked, because KSP has stopped returning load errors.\u003C/p\u003E\u003Cp\u003EAnd third, I have \u003Cem\u003Enot \u003C/em\u003Esimply posted a message saying \u0022in does not work.\u0022 I have, instead, been having a long conversation across several messages. I am not going to restate the entire conversation in each message in an attempt to explain myself fully when one person decides that I\u0027m taking bovine excrement when i claim that something isn\u0027t workiing as expected. So, if you take time to read the posts you have missed you\u0027ll find out that I \u003Cem\u003Ehave\u003C/em\u003E explained it. If you are unable to understand that still, then I\u0027m afraid I cannot help you because I lack the professional degrees to properly diagnose the malfunction happening there. I\u0027m sorry for that, but I\u0027m sure you\u0027ll find help eventually and I don\u0027t think it will be life threatening.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-12T19:05:44Z\u0022 title=\u002203/12/2015 07:05  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 12, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-03-12T09:39:56Z","Content":"\n\u003Cp\u003EYes you are doing nothing more than posting \u0022it does not work\u0022. You don\u0027t explain the tool you use, how you are trying to compile or how you install. That makes it quite hard to help you.\u003C/p\u003E\u003Cp\u003EAnd I\u0027ll be happy to know what other compiler there is for c# beside MS .NET and Mono (And I mean compiler, not GUI). Please do enlighten me.\u003C/p\u003E\n"}]}