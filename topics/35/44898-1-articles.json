{"TopicId":44898,"ForumId":35,"TopicTitle":"Transfer Stage Design Helper v1.2","CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-09-04T05:22:01Z","PageNum":1,"Articles":[{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-09-04T05:22:01Z","Content":"\n\u003Cp\u003EThis is a simple Java program I threw together for myself to help me design interplanetary transfer stages. After some people showed interest, I decided to share it. It takes three design parameters and outputs the number of engines and amount of fuel you\u0027d need in order to meet that design.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/lHNucHL.png\u0022 alt=\u0022lHNucHL.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EInstructions\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe Java Runtime Environment is required to run the program. You can download it at \u003Ca href=\u0022java.com/en/download/\u0022 rel=\u0022external nofollow\u0022\u003Ejava.com/en/download/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe program takes three inputs:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EMinimum TWR:\u003C/strong\u003E This is the minimum TWR you want your ship to have. This can be as low as you have patience for. Lower TWR results in higher fuel efficiency, especially when using the LV-N.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EMinimum dV:\u003C/strong\u003E This is the minimum amount of dV that your ship will have. There are many dV charts available to help you plan your mission. Increasing this will reduce your ship\u0027s payload fraction.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EPayload Mass:\u003C/strong\u003E This is how much your payload weighs. In this context, \u0022payload\u0022 is defined as everything that\u0027s not an engine or a fuel tank, including RCS, landers, and upper stages. You can design multi-stage craft with this program by designing the final stage, then using the total weight of that stage as the payload of the next stage, and so on.\u003C/p\u003E\u003Cp\u003EThe program outputs a table of all the stock LFO engines, Ion Engine, and an optional custom engine you can enter values for, along with various number related to each:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EName:\u003C/strong\u003E The name of the engine\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEngines Required:\u003C/strong\u003E This is the number of engines required to meet your design specifications for your given payload weight. When designing the stage, add this many engines and ensure they all have equal amounts of fuel (or that they all draw from the same fuel tank)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETotal Fuel Mass:\u003C/strong\u003E This is how much fuel, in tons, that you need to add to your ship if you use the specified engine. You will either need to round up or down to the nearest small fuel tank or you will need to use the procedural fuel tanks mod in order to get exactly this amount. The ability to accommodate non-infinitely-divisible fuel tanks is coming in a future version.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETotal Ship Mass:\u003C/strong\u003E This is the total mass of your ship, assuming you meet the design parameters exactly. This will help you design a mass-efficient ship.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EPayload Fraction:\u003C/strong\u003E This is the fraction of your ship that is payload, as opposed to engines and fuel.\u003C/p\u003E\u003Cp\u003EIf any of the rows are empty, that means that specific engine cannot meet your design requirements. You will need to reduce either the minimum dV or the minimum TWR. This is independent of payload mass because carrying a payload twice as large simply requires twice the engines and twice the fuel.\u003C/p\u003E\u003Cp\u003EWhen choosing the engine to use, note that the best engine for the job depends on your preferences. Lower mass results in a smaller launch vehicle, whereas lower part count reduces lag. A smaller Engines Required makes your ship somewhat lighter and drastically reduces part count, while lower fuel mass drastically reduces weight, with a less drastic reduction in part count. I hope to include part count (not including your payload, of course) as part of the readout in a future implementation.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ECustom Engine\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EVersion 1.2 supports custom engines. Simply enter the mass, thrust, and vacuum ISP of your desired engine, along with the type of fuel it uses (only LFO and Xenon are supported right now). The chart will update the custom engine automatically.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EHow it works\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe program works in four steps\u003C/p\u003E\u003Cp\u003E1) Figure out how much mass each engine can lift while still maintaining the given T/W ratio. This depends only on engine thrust, engine mass, and target T/W.\u003C/p\u003E\u003Cp\u003E2) Use the inverted rocket equation to figure out how much mass each engine can carry as payload while still meeting the dV requirement (that is, the payload fraction). This changes depending on the above max load and the given dV.\u003C/p\u003E\u003Cp\u003E3) Divide the payload mass by the payload mass/engine to figure out how many engines are required to lift your given payload. This uses the previously calculated payload fraction and the given payload mass.\u003C/p\u003E\u003Cp\u003E4) Again using the inverted rocket equation, calculate the exact amount of fuel needed to achieve the desired dV, given the number of engines attached.\u003C/p\u003E\u003Cp\u003EThis approach is analytic, so it should be perfectly correct (barring any rounding errors). If you build your ship with the given instructions, it should meet or exceed both the given TWR and dV you provided. Also note that this program is meant for designing interplanetary stages only. The difference in engine ISP in-atmosphere means that your ship will have less dV than what my program predicts, so if you try to design a launcher with it you\u0027ll need to pack extra dV.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EChangelog\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ev1.2\u003Cbr\u003E- Modified fuel weight calculation to better adhere to payload mass.  It will no longer overshoot the total fuel required.  In most cases the difference was minor, but in certain edge cases (e.g. a 1-ton probe with a Mainsail) it would pile on a ridiculous amount of fuel.\u003Cbr\u003E- Added Ion support (3 different modes: Gigantor, 9 OX-4, or No solar panels)\u003Cbr\u003E- Added custom engine support\u003Cbr\u003E\u003Cbr\u003Ev1.1\u003Cbr\u003E- Removed the Max Load, Max dV, and Max Payload columns.  They weren\u0027t really useful to designing your ship and they cluttered the interface.\u003Cbr\u003E- You can now sort columns by clicking the column header\u003Cbr\u003E- If an engine cannot meet the requirements, it now displays a dash rather than nonsensical negative numbers\u003Cbr\u003E\u003Cbr\u003Ev1.0\u003Cbr\u003E- Now has a GUI!\u003Cbr\u003E- Fixed a bug in calculations resulting in incorrect numbers\u003Cbr\u003E\u003Cbr\u003Ev0.5\u003Cbr\u003E- First public release.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EDownload\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.dropbox.com/s/visv6ja1b61mp72/KSPShipPlanner.zip\u0022 rel=\u0022external nofollow\u0022\u003EDownload Here\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.dropbox.com/s/2d542arm1fshadt/KSPPlanner.java\u0022 rel=\u0022external nofollow\u0022\u003ESource Here\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003ELiscense\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ECopyright \u00A9 2013, Ryan Schneider\u003C/p\u003E\u003Cp\u003EAll rights reserved.\u003C/p\u003E\u003Cp\u003ERedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003ERedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u0022AS IS\u0022 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-09T19:22:33Z\u0022 title=\u002210/09/2013 07:22  PM\u0022 data-short=\u002210 yr\u0022\u003EOctober 9, 2013\u003C/time\u003E by RadHazard\u003C/strong\u003E\n\u003Cbr\u003EVersion 1.2\n\u003C/span\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-09-29T03:27:14Z","Content":"\n\u003Cp\u003EFinally put up a new version, with a proper GUI. You no longer need the console to use it. I also found a bug in the calculations that resulted in the wrong numbers (I had accidentally had a multiplication instead of division in one place). If the numbers are still very far off from what MechJeb/Kerbal Engineer report, let me know.\u003C/p\u003E\u003Cp\u003EEdit: Oops, it was still broken. NOW the calculation bug should be fixed.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T03:32:04Z\u0022 title=\u002209/29/2013 03:32  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by RadHazard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ROFLCopter64bit","CreatedById":58314,"CreatedDateTime":"2013-09-30T00:07:38Z","Content":"\n\u003Cp\u003EThis... This is mathematical genius stored neatly in one program. You sir are amazing.\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-09-30T03:55:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ROFLCopter64bit\u0022 data-cite=\u0022ROFLCopter64bit\u0022\u003E\u003Cdiv\u003EThis... This is mathematical genius stored neatly in one program. You sir are amazing.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks, I\u0027m glad you like it.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ENew Version Released: v1.1\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI polished up the interface a lot. It\u0027s nicer now, and it has a column for total mass and payload fraction as well. I removed the Max Load, Max dV, and Max Payload columns, as those were only really useful for debugging. I added some needed code for Ion-Engine support, although it\u0027s not functional yet.\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-10-02T20:04:11Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003ENew Version Released: v1.2\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E- Ion engine support added. Correctly calculates the ion engine using the mass ratio of the larger xenon tank. The engine shows up three different times on the chart, one for using a single Gigantor to power the engine, one for using 9 OX-4 panels (same power as 1 Gigantor but less weight), and one without solar panes (assumes your ship has some other form of power generation included in the payload).\u003C/p\u003E\u003Cp\u003E- You can also add a custom engine using the boxes at the bottom, in case you want to calculate with a mod-added engine. However, only engines that use LFO or Xenon are currently supported.\u003C/p\u003E\u003Cp\u003E- Finally, I changed the way fuel is calculated so it no longer overshoots the amount of fuel to add. Previously, the calculator would find the minimum number of engines needed, and then added as much fuel as possible. This produced close-to-optimal fuel levels in most cases. However, in extreme situations, such as where a single engine was overkill (A one-ton space probe with a mainsail, for example), it would gleefully keep piling on fuel until it reached the TWR you specified, resulting in a 1-ton probe with 800 tons of fuel attached to it. It now adds the minimum amount of fuel necessary to meet your dV requirement, choosing mass-efficiency over extra dV.\u003C/p\u003E\u003Cp\u003EI\u0027m attempting to add proper fuel-tank count for the next version. However, this is proving more difficult than simply modifying my analytic approach, as adding non-infinitely-divisible fuel tanks with differing mass ratios results in a non-linear optimization problem.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-09T19:23:19Z\u0022 title=\u002210/09/2013 07:23  PM\u0022 data-short=\u002210 yr\u0022\u003EOctober 9, 2013\u003C/time\u003E by RadHazard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-02T22:59:53Z","Content":"\n\u003Cp\u003EMixed-integer nonlinear optimization problem to be specific, at least if you want to allow for mixing multiple engine types. If you stick to single engine types, you can use a table-driven approach where you pre-calculate a discrete list of possibly-optimal fuel tank combinations. Start by enumerating all integer combinations of FL-T100, Oscar-B, and Round-8. Due to their worse mass ratios, you\u0027ll never need more than about 10 Oscar-B\u0027s or Round-8\u0027s. Then sort the fuel tank combinations by total mass (propellant \u002B dry), and prune any configuration that has lower fuel mass than some lighter-total-mass combination.\u003C/p\u003E\u003Cp\u003EFor mixing engine types, you\u0027ll need some extremely sophisticated branch-and-bound mixed-integer optimization. Have a look at the osil file I made here: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/45155-Mass-optimal-engine-type-vs-delta-V-payload-and-min-TWR/page3\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/45155-Mass-optimal-engine-type-vs-delta-V-payload-and-min-TWR/page3\u003C/a\u003E, it wouldn\u0027t be too tough to programmatically modify the appropriate data in the osil file, call the OSSolverService executable, and read the result back into your Java gui.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-02T23:06:14Z\u0022 title=\u002210/02/2013 11:06  PM\u0022 data-short=\u002210 yr\u0022\u003EOctober 2, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-10-03T01:14:11Z","Content":"\n\u003Cp\u003EThanks for the help. I\u0027d rather not restrain my code to shortcuts based on the properties of stock parts as I\u0027d like to add mod support at some point, but that solver looks like it might be really helpful.\u003C/p\u003E\u003Cp\u003EI\u0027ve actually managed to reduce the problem of single engine types to a mixed-integer linear optimization. Unfortunately, mixed-integer linear programming is still NP-hard, so that doesn\u0027t help much. I\u0027m guessing that at this point I\u0027m probably going to have to use some kind of solver in order to make any progress.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-03T02:18:30Z","Content":"\n\u003Cp\u003EHow\u0027d you get it to be linear? The delta-V constraint depends on the log of the mass ratio. Full mass and empty mass are linear functions of the number of tanks and engines.\u003C/p\u003E\u003Cp\u003EThere are plenty of good MILP solvers. I think CBC is the Coin-OR MILP solver, there\u0027s also SCIP (\u003Ca href=\u0022http://scip.zib.de/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://scip.zib.de/\u003C/a\u003E). Most of the specialized MILP modeling languages are kind of archaic, OSiL is pretty nice and reasonably human-readable as long as you understand how to represent a compressed row (or compressed column) sparse matrix. The generality of extending to nonlinear problems is also hard to match.\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-10-03T04:44:16Z","Content":"\n\u003Cp\u003EIt required some trickery. It actually happened somewhat accidentally. In my code I had created a variable that I used multiple times when calculating the inverted rocket equation. I had solved the rocket equation for the wet/dry mass ratio, which is equal to e^(dV / (g0 * ISP)). I also noticed that the dV of a rocket is dependant only on the ratio of these masses, assuming ISP is constant. If a rocket had a greater wet/dry mass ratio, it would always exceed the dV requirement.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EwetMass\u003Cbr\u003E------- \u0026gt;= DMR (desired mass ratio)\u003Cbr\u003EdryMass\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAfter looking at this for a bit, I realized I could multiply both sides by the dry mass without disturbing the greater-than operator as I knew that dry mass would always be positive and non-zero. I then subtracted that from both sides, leaving me with\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EwetMass - DMR*dryMass \u0026gt;= 0\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhich when expanded becomes\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Em[SUB]p[/SUB] \u002B m[SUB]e[/SUB]x[SUB]e[/SUB] \u002B (wm[SUB]1[/SUB]x[SUB]1[/SUB] \u002B ... \u002B wm[SUB]n[/SUB]x[SUB]n[/SUB]) - DMR * (p \u002B m[SUB]e[/SUB]x[SUB]e[/SUB] \u002B dm[SUB]1[/SUB]x[SUB]1[/SUB] \u002B ... dm[SUB]n[/SUB]x[SUB]n[/SUB]) \u0026gt;= 0\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhere\u003C/p\u003E\u003Cp\u003Em\u003Csub\u003Ep\u003C/sub\u003E is the mass of the payload\u003C/p\u003E\u003Cp\u003Em\u003Csub\u003Ee\u003C/sub\u003E is the mass of each engine\u003C/p\u003E\u003Cp\u003Ewm\u003Csub\u003Ei\u003C/sub\u003E is the wet mass of the ith fuel tank\u003C/p\u003E\u003Cp\u003Edm\u003Csub\u003Ei\u003C/sub\u003E is the dry mass of the ith fuel tank\u003C/p\u003E\u003Cp\u003Ex\u003Csub\u003Ee\u003C/sub\u003E is the number of engines\u003C/p\u003E\u003Cp\u003Ex\u003Csub\u003Ei\u003C/sub\u003E is the number of the ith fuel tanks\u003C/p\u003E\u003Cp\u003ET\u003Csub\u003Ee\u003C/sub\u003E is the thrust of each engine.\u003C/p\u003E\u003Cp\u003EI rearranged it and got\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E(m[SUB]p[/SUB] - DMR * m[SUB]p[/SUB]) \u002B (m[SUB]e[/SUB] - DMR * m[SUB]e[/SUB])x[SUB]e[/SUB] \u002B (wm[SUB]1[/SUB] - DMR * dm[SUB]1[/SUB])x[SUB]1[/SUB] \u002B ... \u002B (wm[SUB]n[/SUB] - DMR * dm[SUB]n[/SUB])x[SUB]n[/SUB] \u0026gt;= 0\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELooking at, it makes sense to me. (wm - DMR * dm), the constant portion, is basically a measure of how much each part contributes to the DMR, and therefore the dV constraint.\u003C/p\u003E\u003Cp\u003EI did a similar thing for the TWR constraint, which gave me\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ET[SUB]e[/SUB]x[SUB]e[/SUB] - (TWR * m[SUB]p[/SUB]) - (TWR * m[SUB]e[/SUB])x[SUB]e[/SUB] - (TWR * m[SUB]1[/SUB])x[SUB]1[/SUB] - ... - (TWR * m[SUB]n[/SUB])x[SUB]n[/SUB] \u0026gt;= 0\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAgain, (TWR * m) ends up being a measure of how much each part subtracts from the desired TWR.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-03T04:53:16Z\u0022 title=\u002210/03/2013 04:53  AM\u0022 data-short=\u002210 yr\u0022\u003EOctober 3, 2013\u003C/time\u003E by RadHazard\u003C/strong\u003E\n\u003Cbr\u003EOh dear, grammar.\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-03T05:02:30Z","Content":"\n\u003Cp\u003EAh, okay, if you consider Isp constant and only look at a single engine type at a time (or I suppose you could combine different engine types as long as the Isp\u0027s are equal), then the delta-V constraint is equivalent to a mass-ratio constraint which you can reformulate as a linear inequality. I was still thinking of Isp as being a variable equal to thrust / (g0*mdot), where thrust and mdot are linear functions of the numbers of different types of engines.\u003C/p\u003E\u003Cp\u003EGood idea, solving one or two dozen tiny MILP\u0027s (one per engine type) is probably faster than solving one bigger MINLP (hard to say for sure until you try though). Especially since I\u0027d have to introduce a binary indicator variable for each engine type if I wanted to restrict the MINLP version to a single engine type.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-03T05:10:07Z\u0022 title=\u002210/03/2013 05:10  AM\u0022 data-short=\u002210 yr\u0022\u003EOctober 3, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-03T08:17:23Z","Content":"\n\u003Cp\u003ECBC does the trick in a quick test. Try out \u003Ca href=\u0022https://dl.dropboxusercontent.com/u/8244638/single_engine_type.osil\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://dl.dropboxusercontent.com/u/8244638/single_engine_type.osil\u003C/a\u003E (or \u003Ca href=\u0022https://dl.dropboxusercontent.com/u/8244638/single_engine_type_commented.osil\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://dl.dropboxusercontent.com/u/8244638/single_engine_type_commented.osil\u003C/a\u003E, though this one\u0027s much simpler to read even without comments). I ran my test example as follows (assuming you\u0027re in an environment where sed is available, otherwise use your text-replacing tool of choice):\u003C/p\u003E\u003Cp\u003Esed -e \u0027s/MIN_ACCELERATION/9.81/g\u0027 -e \u0027s/PAYLOAD_MASS/10/g\u0027 -e \u0027s/ENGINE_MASS/2.25/g\u0027 -e \u0027s/ENGINE_THRUST/60/g\u0027 -e \u0027s/MAX_NUM_ENGINES/16/g\u0027 -e \u0027s/ONE_MINUS_RECIPROCAL_DMR/0.399003/g\u0027 single_engine_type.osil \u0026gt; lvn_twr1_payload10_dv4000.osil\u003C/p\u003E\u003Cp\u003EOSSolverService osil lvn_twr1_payload10_dv4000.osil\u003C/p\u003E\u003Cp\u003EIt\u0027s 3 linear constraints and 5 variables for stock fuel tank types: total mass, number of specified type of engine, number of FL-T100\u0027s, number of Round-8\u0027s, and number of Oscar-B\u0027s. One equality for total mass, one inequality for min TWR (total thrust \u0026gt;= MIN_ACCELERATION*total_mass, where MIN_ACCELERATION = 9.81*MIN_TWR for Kerbin-relative weight), and one inequality for min delta-V: dry_mass \u0026lt;= total_mass / DMR, expanded out to ONE_MINUS_RECIPROCAL_DMR*total_mass - fuel_mass \u0026lt;= 0.\u003C/p\u003E\u003Cp\u003EIn my thread I had been using g0 = 9.81 for Isp for consistency with MechJeb/KER, but the 0.399003 number above was calculated using the correct g0 = 9.82 so I get a tiny bit lighter answer here of 9 LV-N\u0027s, 43 FL-T100 tanks, and 4 Round-8 tanks. Keep an eye out for rounding on the integer variables output from CBC, it seems to be displaying them with either .99... or .0...01 for whatever reason.\u003C/p\u003E\u003Cp\u003ESmall MILP is about 2 orders of magnitude faster than the MINLP I previously had, takes tens of milliseconds versus a couple of seconds for the MINLP.\u003C/p\u003E\u003Cp\u003EIf you\u0027re in Linux or Mac or Cygwin and have the bc calculator available, you can save a little bit of hassle by replacing that last expression \u0027s/ONE_MINUS_RECIPROCAL_DMR/0.399003/g\u0027 with \u0022s/ONE_MINUS_RECIPROCAL_DMR/\u0060echo \u00221-e(-4000/(9.82*800))\u0022 | bc -l\u0060/g\u0022, though you can do this programmatically in whatever other language you feel like.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-04T05:39:31Z\u0022 title=\u002210/04/2013 05:39  AM\u0022 data-short=\u002210 yr\u0022\u003EOctober 4, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-06T09:45:43Z","Content":"\n\u003Cp\u003EI was bored/procrastinating and you\u0027ve been gone for a few days, so I went and made an interactive version using Mathematica to solve the MILP\u0027s, you can check it out at \u003Ca href=\u0022http://dl.dropboxusercontent.com/u/8244638/KSP%20Design%20Optimizer%20v01.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://dl.dropboxusercontent.com/u/8244638/KSP%20Design%20Optimizer%20v01.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYou\u0027ll need the Wolfram CDF Player plugin to use this, hopefully it should tell you so if you don\u0027t have it installed but if not, see \u003Ca href=\u0022http://www.wolfram.com/cdf-player/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.wolfram.com/cdf-player/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI put in the bigger tanks and a part-count constraint too, for fun. I suppose I could throw in the ion engine \u002B solar panel combinations like you have them. Your changelog and posts say you\u0027re using 8 OX-4\u0027s as one of the combinations (which is consistent with my numbers for how many panels you\u0027d need for one ion engine, though I think their effectiveness drops further from the sun?), but your code appears to be using 9. You aren\u0027t using the fuel tank stats yet in your current version, but note that FL-T100\u0027s have 45 units of liquid and 55 units of oxidizer, so 100 total not 90.\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-10-09T19:18:10Z","Content":"\n\u003Cp\u003EThanks for all the help, tavert.\u003C/p\u003E\u003Cp\u003EI\u0027ve been busy with college work for the past week or so, so I haven\u0027t had much time to work on this. I\u0027ve been hoping to find a native java MILP solver to avoid platform-specific binaries, but it looks like there aren\u0027t any of those around. I\u0027m not exactly up to the task of writing a solver myself, so I think I\u0027ll end up using the one you linked.\u003C/p\u003E\u003Cp\u003EI looked at my code, and I remembered that I used 9 OX-4\u0027s because it\u0027s equal to the output of exactly one gigantor, which is what is generally recommenced for Ion engines, as far as I\u0027ve seen. Perhaps at some point I\u0027ll end up adding in a second calculator to find the ideal number of solar panels to power an electrical engine with a given power draw. As for the FL-T100 bug, thanks for that. I must have spaced out when putting in values from the wiki and added wrong. The name of the tank certainly makes more sense now \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-09T22:57:14Z","Content":"\n\u003Cp\u003EThis problem\u0027s simple and small enough that you could write a branch-and-bound solver yourself without too much trouble. The continuous relaxation can be solved greedily by using the best mass-ratio fuel tanks first, up to the maximum imposed by integer-branching constraints. It\u0027ll be faster in both coding time and running time to just use an existing general-purpose solver though, at the cost of having binary dependencies users will have to download.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-10-23T02:27:56Z","Content":"\n\u003Cp\u003EI just stumbled upon something really cool: an implementation of GLPK (GNU Linear Programming Kit) in JavaScript, \u003Ca href=\u0022https://github.com/hgourvest/glpk.js\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/hgourvest/glpk.js\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAnybody want to take a crack at a web-app version of this, no downloads, no installation of anything?\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-11-20T00:34:14Z","Content":"\n\u003Cp\u003EI\u0027m back. I\u0027ve been caught up with college work for the past month, but I figured I\u0027d finally take a crack at some mixed integer linear programming. I\u0027m planning on using \u003Ca href=\u0022http://commons.apache.org/proper/commons-math/index.html\u0022 rel=\u0022external nofollow\u0022\u003EApache Commons Math\u003C/a\u003E for the matrix operations and implementing a simple cutting-plane algorithm. I\u0027m hoping performance won\u0027t be too much of an issue since the number of variables I\u0027m working with should be small.\u003C/p\u003E\u003Cp\u003EI\u0027d like modify the solver to account for solar panels/RTGs at some point as well, but I think I\u0027ll try and get the basic fuel-tank solver working first before I try anything too crazy.\u003C/p\u003E\n"},{"CreatedByName":"RadHazard","CreatedById":80815,"CreatedDateTime":"2013-12-01T05:30:45Z","Content":"\n\u003Cp\u003EAn update on what I\u0027ve been up to:\u003C/p\u003E\u003Cp\u003EI\u0027ve got a cutting plane algorithm written that uses Gomory\u0027s Cuts. Unfortunately, I\u0027m having trouble getting performance to reasonable levels, which is mostly due to (I\u0027m assuming) my poor heuristic for choosing the cutting plane, leading to a large number of barely useful cuts. I\u0027ll continue to hammer this out, and with luck I should have a usable version available Soon\u003Csup\u003Etm\u003C/sup\u003E.\u003C/p\u003E\n"}]}