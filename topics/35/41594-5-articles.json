{"TopicId":41594,"ForumId":35,"TopicTitle":"Mass-optimal engine type vs delta-V, payload, and min TWR","CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-08T09:56:16Z","PageNum":5,"Articles":[{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-02-21T06:47:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022taio\u0022 data-cite=\u0022taio\u0022\u003E\u003Cdiv\u003EI decided Julia lacked enough language features\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI highly doubt that. It\u0027s quite a bit more sophisticated and higher-performance as a language than Python is (consider how much of the core language and standard library is implemented in Julia, as opposed to Python being largely implemented in C - sure there\u0027s PyPy but that still doesn\u0027t support numpy or much else), but of course the syntax is different so if you\u0027re more used to Python then use whatever you want.\u003C/p\u003E\n"},{"CreatedByName":"taio","CreatedById":131170,"CreatedDateTime":"2015-02-21T20:37:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EI highly doubt that. It\u0027s quite a bit more sophisticated and higher-performance as a language than Python is (consider how much of the core language and standard library is implemented in Julia, as opposed to Python being largely implemented in C - sure there\u0027s PyPy but that still doesn\u0027t support numpy or much else), but of course the syntax is different so if you\u0027re more used to Python then use whatever you want.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EI don\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t remember 100%, but trying to remember reasons why I switched to Python: familiarity \u0026amp; my love for the comprehension syntax, more flexible exceptions, and the wider availability of libraries. Especially there was a parser combinator library in Python that I liked and wanted to use, and I figured if it runs slow when I\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2m done I\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2ll just learn how to Cython and whatever else people do to make their Python fast.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-21T20:41:33Z\u0022 title=\u002202/21/2015 08:41  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 21, 2015\u003C/time\u003E by taio\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-02-23T06:54:53Z","Content":"\n\u003Cp\u003EThat\u0027s fair. The comprehensions in Julia don\u0027t support filters yet (hard to make that high-performance if you don\u0027t know the size of the output array ahead of time). Exceptions, well, I\u0027ll leave that topic alone.\u003C/p\u003E\u003Cp\u003EDon\u0027t know whether you saw, but there is a Julia package called PyCall.jl that lets you call arbitrary Python code from Julia. There\u0027s a pyjulia project for doing the reverse as well.\u003C/p\u003E\n"},{"CreatedByName":"chicknblender","CreatedById":104473,"CreatedDateTime":"2015-04-29T14:35:08Z","Content":"\n\u003Cp\u003EAnybody want to resurrect this project with 1.0 parameters? I will buy you cookies. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-01T13:43:46Z","Content":"\n\u003Cp\u003EMax thrust changes with atmospheric pressure now, right? Is it a linear relationship, or are people still testing and working that out?\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-05-01T13:58:13Z","Content":"\n\u003Cp\u003Etavert! Good to see you back here.\u003C/p\u003E\u003Cp\u003EA fair bit has changed in 1.0, thrust changes as Isp changes with pressure, and pressures \u0026gt;1atm are modeled, too. In each engine\u0027s .cfg file some points are defined for Isp vs. pressure, and as I understand it a cubic Bezier curve is used between defined points. The relationship of thrust to Isp is linear. For calculating at 1 atm or vacuum you could just use the defined values (these are shown in the editor).\u003C/p\u003E\u003Cp\u003EThanks for looking at this, I have found your charts very useful in the past and would be interested to see how they would look now.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-02T01:42:56Z","Content":"\n\u003Cp\u003EJust dropping by for my couple-times-a-year visit, I don\u0027t actually plan on updating KSP or have much time to modify the code. If it\u0027s just that rocket engines now have more than 2 points in their atmosphereCurve, then it\u0027s a piecewise cubic interpolation like we figured out for the jets some time ago. Either the incoming and outgoing slopes at each interpolation point are given if there are 4 numbers, or the average slope for the 2 neighboring segments is used when there are only 2 numbers IIRC.\u003C/p\u003E\n"},{"CreatedByName":"Arrowstar","CreatedById":2521,"CreatedDateTime":"2015-05-02T02:10:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EJust dropping by for my couple-times-a-year visit, I don\u0027t actually plan on updating KSP or have much time to modify the code.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHey tavert, I know you\u0027re busy, but if you have a moment, go check out KSPTOT. Version v1.3.0 has nice additions since you were last here. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-05-02T02:19:55Z","Content":"\n\u003Cp\u003ETangents aren\u0027t given for atmocurve curves for stock engines in 1.0.x.\u003C/p\u003E\n"},{"CreatedByName":"chicknblender","CreatedById":104473,"CreatedDateTime":"2015-05-27T21:11:30Z","Content":"\n\u003Cp\u003EApparently somebody has already revived these curves for vacuum. \u003C/p\u003E\u003Cblockquote lang=\u0022en\u0022\u003E\u003Ca href=\u0022//imgur.com/a/N1xNb\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\u003C/blockquote\u003E\u003Cp\u003ENot my work and would be happy to give credit where it is due. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Meithan","CreatedById":76123,"CreatedDateTime":"2015-05-27T22:00:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022chicknblender\u0022 data-cite=\u0022chicknblender\u0022\u003E\u003Cdiv\u003EApparently somebody has already revived these curves for vacuum. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd for Kerbin sealevel atmospheric conditions too \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. See the main thread here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/121565-Optimal-engine-charts-for-1-0-2\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/121565-Optimal-engine-charts-for-1-0-2\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBut this will soon be (or already is) obsolete since I\u0027m creating a webapp to generate the charts on demand. It\u0027s still not finished, but you can take a look here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://meithan.x10.mx/KSP/engines/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://meithan.x10.mx/KSP/engines/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe caveat is that the analytic results assume fuel and tanks are infinitely divisible, and not discrete like they are in the game. In this respect tavert\u0027s work is still superior.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-28T05:00:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Meithan\u0022 data-cite=\u0022Meithan\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThe caveat is that the analytic results assume fuel and tanks are infinitely divisible, and not discrete like they are in the game.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou need to fix that. Otherwise your results are flat-out wrong for small craft.\u003C/p\u003E\n"},{"CreatedByName":"Meithan","CreatedById":76123,"CreatedDateTime":"2015-05-28T12:58:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EYou need to fix that. Otherwise your results are flat-out wrong for small craft.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan\u0027t, really, since I\u0027m just solving for the total ship mass analytically. I\u0027m not doing an optimization problem.\u003C/p\u003E\u003Cp\u003EWhy is it such a bad problem? The smallest LFO tank is the Oscar-B, which holds 0.2 t of fuel. Doesn\u0027t this mean that the analysis will be wrong at most by 0.2 t of fuel, since it\u0027s always possible to reproduce any fuel value up to 0.2 t?\u003C/p\u003E\u003Cp\u003ESure, there will be cases where, for small payloads, this discreteness makes the top solution actually not the best one, but I think that solution will still be very close, and the difference won\u0027t be big; it\u0027ll probably remain atop the top 3. Things like adding structural elements to connect the propulsion to the payload will probably have a larger impact in deviating from these analytic solutions than the discreteness of the propellant.\u003C/p\u003E\u003Cp\u003EBut I could be missing something so I\u0027m interested in knowing what you have to say about this.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-29T02:44:53Z","Content":"\n\u003Cp\u003EFor small payloads and small delta-v\u0027s, that dry-mass discretization would be a substantial fraction of the differences you\u0027re trying to show.\u003C/p\u003E\u003Cp\u003EYou don\u0027t have to solve the full mixed integer problem unless you also want to impose part count or cost constraints, or factor those into the objective function. For a single engine type and ignoring part count and cost restrictions, you can take all combinations of different size tanks (ignoring the larger ones assuming they\u0027re still just integer multiples within the same family), sort by dry mass, then remove any combinations where the fuel mass is non-increasing. That gives you the actual discontinuous line for minimum dry mass for any given value of fuel mass. At a given delta-v you know what mass fraction you need, the continuous-tanks result gives you an optimistic guess for where to start looking, then you can check the actual combinations nearby to find the lightest one that can meet the required mass fraction.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-29T02:48:25Z\u0022 title=\u002205/29/2015 02:48  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 29, 2015\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Meithan","CreatedById":76123,"CreatedDateTime":"2015-05-29T04:05:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EFor small payloads and small delta-v\u0027s, that dry-mass discretization would be a substantial fraction of the differences you\u0027re trying to show.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAgreed, but then wouldn\u0027t the difference between the computed optimal masses be on the order of the discretization error? That means that even if my program does not find the actual optimal solution, it can find a solution within a small margin of the optimal one. That\u0027s good enough for me, and I could add a disclaimer to warn about this.\u003C/p\u003E\u003Cp\u003EThe webapp is not meant to be a full solution of the design problem anyway. If you\u0027re looking for that, I\u0027m sure you\u0027ve seen GaryCourt\u0027s \u003Ca href=\u0022http://garycourt.github.io/korc/\u0022 rel=\u0022external nofollow\u0022\u003EOptimal Rocket Calculator\u003C/a\u003E. The engine charts are meant to be provide approximate guidelines of the regions where a specific engine might be a good choice. I still want to leave the player the fun of designing the ship.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EYou don\u0027t have to solve the full mixed integer problem unless you also want to impose part count or cost constraints, or factor those into the objective function. For a single engine type and ignoring part count and cost restrictions, you can take all combinations of different size tanks (ignoring the larger ones assuming they\u0027re still just integer multiples within the same family), sort by dry mass, then remove any combinations where the fuel mass is non-increasing. That gives you the actual discontinuous line for minimum dry mass for any given value of fuel mass. At a given delta-v you know what mass fraction you need, the continuous-tanks result gives you an optimistic guess for where to start looking, then you can check the actual combinations nearby to find the lightest one that can meet the required mass fraction.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not sure I fully understand the procedure you describe, but I wanted to avoid exploratory solutions due to computation time concerns. I want the app to be running on JavaScript on the user\u0027s browser. Currently I\u0027m simply evaluating a couple of formulas for a 500x500 (payload,delta-v) grid of points, and it already takes on the order of 500 ms. I do admit however that my current implementation is slow because I\u0027m repeating the costly (I presume) exponential function.\u003C/p\u003E\u003Cp\u003EAs a point of reference, how long did your original engine charts take to generate?\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-29T04:17:21Z","Content":"\n\u003Cp\u003EDepends on the image resolution and what language they\u0027re implemented in. The calculation procedure was different when I originally had it in Matlab, but you can still read the Julia code which does things in a cleaner and more efficient way. It lays out the calculation, along with SRB\u0027s and other engine types. The part stats, list of small-tank combinations, and handling of atmospheric numbers would have to be updated for 1.0 of course, but the main part of the algorithm still applies. As long as you run things in a language with a JIT compiler that can do loops quickly, it\u0027s not that much slower than the analytical continuously-divisible-tanks approximation. Once in a while you may have to add an extra engine and re-try at the same point due to the tank discretization effects interacting with the TWR constraint.\u003C/p\u003E\n"},{"CreatedByName":"Meithan","CreatedById":76123,"CreatedDateTime":"2015-05-29T05:32:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EDepends on the image resolution and what language they\u0027re implemented in. The calculation procedure was different when I originally had it in Matlab, but you can still read the Julia code which does things in a cleaner and more efficient way. It lays out the calculation, along with SRB\u0027s and other engine types. The part stats, list of small-tank combinations, and handling of atmospheric numbers would have to be updated for 1.0 of course, but the main part of the algorithm still applies. As long as you run things in a language with a JIT compiler that can do loops quickly, it\u0027s not that much slower than the analytical continuously-divisible-tanks approximation. Once in a while you may have to add an extra engine and re-try at the same point due to the tank discretization effects interacting with the TWR constraint.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell 500x500 seemed like a good target point, and I like the results so far. I\u0027ve also added a low-resolution (200x200) option for slower computers (the map gets scaled to 500x500 to fit the same space). Interactvitiy means that the chart itself doesn\u0027t have to be that precise or information-rich (which is part of the reason I decided to use linear scale for the axes; there\u0027s no point squeezing the full conceivable payload range in one graph if the user can simply key in the specific range he wants).\u003C/p\u003E\u003Cp\u003EWhat could be done at some point down the road is port your Julia code to JavaScript and use it on my webapp. The user interface and plotting routines are what\u0027s consumed the majority of development time anyway; the actual computation is straightforward enough. But I\u0027ve never laid down my eyes on a line of Julia, so I guess that\u0027ll have to wait (good learning opportunity, though; I\u0027ve heard high praise from Julia).\u003C/p\u003E\u003Cp\u003ERight now I\u0027m directing my efforts towards polishing the web interface and adding extra functionality. Some enthusiastic users have been recommending some interesting things and I do intend to indulge them wherever possible.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2015-05-29T06:52:14Z","Content":"\n\u003Cp\u003EIf you\u0027ve seen one block-structured imperative dynamic language, it\u0027s not that hard to learn a new one or switch between them. Julia\u0027s closest to Lua or Matlab in syntax, and my code\u0027s not doing anything especially complicated with macros or multiple dispatch that wouldn\u0027t translate as well into other languages. JavaScript should be fine, and is the most convenient thing to work in for a web app (though maybe TypeScript, CoffeeScript, or Dart would be a little nicer once the total code size gets beyond a certain point). You can go to juliabox.org and get a shell and notebook interface to run Julia code without having to install it locally, if you just want to play around a little.\u003C/p\u003E\u003Cp\u003EI suspect if you rearrange the loops properly so you can hoist certain calculations out of the innermost loops, you\u0027ll see noticeably better performance. The exponential\u0027s constant along a given delta-V line for a single type of engine, for example, so you could re-use the mass fraction across all payload points for the same dV.\u003C/p\u003E\n"},{"CreatedByName":"Meithan","CreatedById":76123,"CreatedDateTime":"2015-05-29T17:42:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EIf you\u0027ve seen one block-structured imperative dynamic language, it\u0027s not that hard to learn a new one or switch between them. Julia\u0027s closest to Lua or Matlab in syntax, and my code\u0027s not doing anything especially complicated with macros or multiple dispatch that wouldn\u0027t translate as well into other languages. JavaScript should be fine, and is the most convenient thing to work in for a web app (though maybe TypeScript, CoffeeScript, or Dart would be a little nicer once the total code size gets beyond a certain point). You can go to juliabox.org and get a shell and notebook interface to run Julia code without having to install it locally, if you just want to play around a little.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI quite agree: when the basic paradigm is the same it\u0027s just a matter of picking up the new syntax. Thanks for the link to juliabox, I\u0027ll toy around with it.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EI suspect if you rearrange the loops properly so you can hoist certain calculations out of the innermost loops, you\u0027ll see noticeably better performance. The exponential\u0027s constant along a given delta-V line for a single type of engine, for example, so you could re-use the mass fraction across all payload points for the same dV.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, that\u0027s the obvious place to optimize. It\u0027s currently done in this inefficient way because the code comes from a Python program that was initially used to compute total mass for single combination of parameters, and I simply adapted the plotting routines to it. It\u0027ll be interesting to see how much performance is gained by this change (I don\u0027t have much experience with JavaScript so I don\u0027t know how smart the JIT compiler optimization is).\u003C/p\u003E\n"},{"CreatedByName":"cy-one","CreatedById":74874,"CreatedDateTime":"2016-10-26T14:36:34Z","Content":"\n\u003Cp\u003E\nCould we get an up-to-date variant of these charts? \u003Cimg alt=\u0022:D\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 title=\u0022:D\u0022\u003E\u003C/p\u003E\n"}]}