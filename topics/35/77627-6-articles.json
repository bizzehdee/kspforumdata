{"TopicId":77627,"ForumId":35,"TopicTitle":"Combining efforts on proper mod management framework / tools / platform","CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-07-14T19:10:34Z","PageNum":6,"Articles":[{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-08-30T20:32:14Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003E@keks: are you sure about what you sad about python (horrible with GUI, not multithreaded, ...) ?\u003Cp\u003EDo you know which language is used for Blender ? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell I am no blender user, but AFAIK blender itself is written in C/C\u002B\u002B and only the scripts are Python. And that\u0027s exactly where Python (or even more often Lua) is often used at, and where it can play it\u0027s strengths.\u003C/p\u003E\u003Cp\u003EWhen writing GUI you usually divide your application into at least two (mostly) independent parts: the GUI and the logic. Both run their own threads, so some long-taking operation in the logic does not block the GUI, but you can still easily share data between logic and GUI. Python cannot easily do this, because it can only run \u003Cstrong\u003Eone\u003C/strong\u003E thread at a time due to it\u0027s GIL [1]. That causes the GUI to freeze, even when you run it in its own thread. The only way around this is to use multiple processes, which in turn cannot easily share data anymore...\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEdit:\u003C/strong\u003E For the sake of completeness: The above is actually not 100% accurate. You could also use external (C/C\u002B\u002B) libraries for displaying your GUI and manually control the GIL then. But then you \u003Cstrong\u003Emust\u003C/strong\u003E make sure your GUI code \u003Cstrong\u003Enever ever\u003C/strong\u003E manipulates python memory in any way, or bad things will happen... And that\u0027s something you cannot guarantee that easily if you still want to be able to interact with your GUI \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEnd Edit\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E[1]: \u003Ca href=\u0022https://wiki.python.org/moin/GlobalInterpreterLock\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://wiki.python.org/moin/GlobalInterpreterLock\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EDisclaimer: when talking about \u0022Pyhton\u0022 I actually mean the \u0022CPython\u0022 implementation\u003C/em\u003E\u003C/p\u003E\u003Cp\u003ECPython is pretty fast, but not even close to a native implementation. That\u0027s why many Python modules are written in C. To get a \u003Cstrong\u003Erough\u003C/strong\u003E idea of the speed differences of various languages take a look at this: \u003Ca href=\u0022http://onlyjob.blogspot.de/2011/03/perl5-python-ruby-php-c-c-lua-tcl.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://onlyjob.blogspot.de/2011/03/perl5-python-ruby-php-c-c-lua-tcl.html\u003C/a\u003E .\u003C/p\u003E\u003Cp\u003EBut keep in mind that \u0022speed\u0022 is also very dependent on the actual implementation and algorithms used. That\u0027s why Perl scores so high at the site I linked. Perl makes heavy use of highly optimized native modules (Perl modules actually written in C). It also was created to efficiently handle strings, and the \u0022benchmark\u0022 used at the site I linked does measure string manipulation time. Perl has had 25 years to optimize for exactly that use case \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-30T20:54:41Z\u0022 title=\u002208/30/2014 08:54  PM\u0022 data-short=\u00229 yr\u0022\u003EAugust 30, 2014\u003C/time\u003E by keks\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Justin Kerbice","CreatedById":101695,"CreatedDateTime":"2014-08-31T07:59:32Z","Content":"\n\u003Cp\u003Emmm I see, I\u0027ve never have a good feeling with Python (a lanaguage that\u0027s force you with the indentation is not good IMHO) but performances anyway are mostly irrelevant for the target application here, don\u0027t forget whatever the job of packaging/processing text files/creating file structure \u0026amp; dummy files can take 1 or 5 s, it will not change so much, it\u0027s not a physics simulation after all so the good thing to do is to take the fastest way to create/maintain/update code.\u003C/p\u003E\u003Cp\u003EAnd there, interpreted languages get the first place, Perl mostly, especially with all the available modules to do almost anything you need to do on any OS you work on. Python main weakness IMHO is the lack of something like CPAN. And the GIL thing appears to me as quite a failure on its main purpose.\u003C/p\u003E\u003Cp\u003EThe benchmark you give is a flawed as possible, it quite confuse people and is not precise enough (differences between Perl 5.005.. and Perl 5.14 are huge for example, and it still perl 5, java embed it\u0027s horrible vm and everything so memory usage will always be against it, string it not the best object to test too). If the guy/girl have tested with arrays, it would have been a lot more... interesting (Perl is/was a dumb with that, as dynamic array = recreate a full new array each time an item is added \u002B destroying the previous = sssslllloooooooooooooooooooowwwwwwwwwwwww)\u003C/p\u003E\n"},{"CreatedByName":"Spyhawk","CreatedById":71209,"CreatedDateTime":"2014-08-31T08:44:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003Emmm I see, I\u0027ve never have a good feeling with Python (a lanaguage that\u0027s force you with the indentation is not good IMHO) but performances anyway are mostly irrelevant for the target application here\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmm, one of the strength of Python is forcing you to write readable code \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI also agree with the performance being not relevant here. I\u0027d suggest to write a prototype in Python, and if performance are so bad that the app is unusable to recode it in C#/Mono.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E Python main weakness IMHO is the lack of something like CPAN.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPip?\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-08-31T13:51:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003Emmm I see, I\u0027ve never have a good feeling with Python (a lanaguage that\u0027s force you with the indentation is not good IMHO)\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Spyhawk\u0022 data-cite=\u0022Spyhawk\u0022\u003E\u003Cdiv\u003EHmm, one of the strength of Python is forcing you to write readable code \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003Ethe GIL thing appears to me as quite a failure on its main purpose.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI fully agree with Spyhawk here. Python forces you to write readable code and gets rid of all the unnecessary braces.\u003C/p\u003E\u003Cp\u003EI mean, you (should) indent your code anyway, no matter if you have to or not. So I see no reason why not to get rid of redundant braces that basically are of no meaning at all.\u003C/p\u003E\u003Cp\u003EAlso, the GIL \u003Cstrong\u003Ecan\u003C/strong\u003E be a good thing. For example, you don\u0027t have to care about synchronization that much, because Python threads do not run in parallel anyway.\u003C/p\u003E\u003Cp\u003EBut that\u0027s a completely different topic and should not be discussed in here IMHO \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EThe benchmark you give is a flawed as possible [...]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI already explicitly pointed that out in my post earlier. This benchmark is three years old and is not representative at all. It tests for one specific operation which shows a fundamental problem with Java\u0027s memory management, and shows how fast it could actually be if implemented right, like Perl does. This issue is nicely explained on the site I linked.\u003C/p\u003E\u003Cp\u003EThe reason I chose this benchmark is, that it pretty much corresponds with my personal experience with those languages. I\u0027ve been using those languages for quite some time now, for projects of all kinds and scales, and I can safely say that there probably is no better language out there than Perl, when having to do lots of string manipulations. On the other hand, Perl is pretty much unusable in big projects, because of the limitations of the language features it provides \u0022out of the box\u0022. You almost always would want to rely on some hacks like Moose (or it\u0027s deviates) which frequently break because of their dependency on B.pm and the like. Also, running Perl on Windows is a big mess. Python on the other hand is pretty portable, but very slow when multi-threading. In Python when for example implementing search algorithms in a multi-threaded approach, they are actually \u003Cstrong\u003Etremendously\u003C/strong\u003E slower than a single-threaded implementation. This is caused by how Python handles threads and their synchronization and ofc. the GIL itself.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EPerl is/was a dumb with that, as dynamic array = recreate a full new array each time an item is added \u002B destroying the previous\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s actually not correct. Perl does not have the concept of Arrays as you know them from lets say languages like C\u002B\u002B. Instead they basically are an over-sized array or pointers to multiple lists containing the actual data. This way all basic array operations (insert, fetch, push, pop, shift, unshift, ...) can almost always be done in O(1). There are only a few edge-cases in where the complexity grows to O(n). So actually Perl handles \u0022Arrays\u0022 quite well. The reason why Java sucks so hard in the benchmark I linked is that it does have to allocate a new String() object after every operation and destroy the old one. This takes a lot of time. In addition to that, it does not re-use \u0022freed\u0022 memory of destroyed objects.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003Ebut performances anyway are mostly irrelevant for the target application here, don\u0027t forget whatever the job of packaging/processing text files/creating file structure \u0026amp; dummy files can take 1 or 5 s, it will not change so much\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EI also agree with the performance being not relevant here.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPerformance actually \u003Cstrong\u003EIS\u003C/strong\u003E of concern here. When updating mods we have to calculate checksums for every file in the GameData directory tree. Depending on the actual implementation, this can be something that can take a few seconds, or a couple of minutes. AFAIK Python provides C-implementations of all major checksum algorithms, but I do not know how portable they are. Pure python implementations would take way too much time, especially on many small files. When using C# we could compute multiple checksums at the same time, taking advantage of multiple CPU cores and I/O wait times.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Spyhawk\u0022 data-cite=\u0022Spyhawk\u0022\u003E\u003Cdiv\u003EI\u0027d suggest to write a prototype in Python, and if performance are so bad that the app is unusable to recode it in C#/Mono.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWe already agreed to implement out prototype in Python. We also agreed on not introducing additional dependencies on client-side, so choosing Python for the actual release is out of question. .Net/Mono is already there, because KSP runs on it, so let\u0027s stick to that. It would (maybe) also attract more contributors, as mods are written in C#, not Python \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-01T18:52:07Z\u0022 title=\u002209/01/2014 06:52  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 1, 2014\u003C/time\u003E by keks\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"TeddyDD","CreatedById":28806,"CreatedDateTime":"2014-08-31T20:16:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EI\u0027d suggest to write a prototype in Python, and if performance are so bad that the app is unusable to recode it in C#/Mono.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI would second that If there was a way to deploy standalone Python 3 app for Win, Mac and Linux. But from what I know it is impossible to do.\u003C/p\u003E\u003Cp\u003EFor now I would stick to first idea (Python prototype \u0026gt; C# final app)\u003C/p\u003E\n"},{"CreatedByName":"Justin Kerbice","CreatedById":101695,"CreatedDateTime":"2014-09-01T16:01:54Z","Content":"\n\u003Cp\u003EWarning \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E: this\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI\u0027d suggest to write a prototype in Python, and if performance are so bad that the app is unusable to recode it in C#/Mono.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ecomes from Skyhawk, not me, keks quotes him wrong and credit me for these sentence. I deny any involvement in this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 alt=\u0022:cool:\u0022\u003E.\u003C/p\u003E\u003Cp\u003EIf your concern is checksum, best is to use the fastest checksum tool available in each platform like:\u003C/p\u003E\u003Cp\u003EUNIX=md5sum\u003C/p\u003E\u003Cp\u003EWINDOWS=somethingsum\u003C/p\u003E\u003Cp\u003EMACOS=macsomething\u003C/p\u003E\u003Cp\u003EMD5SUM= one of these (it could be a hash for example)\u003C/p\u003E\u003Cp\u003Eand a subprocess call like in Perl:\u003C/p\u003E\u003Cp\u003E$checksum = \u0060MD5SUM file\u0060;\u003C/p\u003E\u003Cp\u003E(with proper checks, before, while and after of course)\u003C/p\u003E\u003Cp\u003EC# is not the only one to allow you to parallel-ize your code.\u003C/p\u003E\u003Cp\u003EAnd before even thinking of language performance, thinking first and do smart things is a lot more better. Why calculating sum for EVERY files in GameData on update ?\u003C/p\u003E\u003Cp\u003EYou only have to check mod X folder(s), and even less: only files that need to be checked.\u003C/p\u003E\u003Cp\u003E(Why for Jeb sake you\u0027ll have to calculate sums for files you don\u0027t care about like all stock parts/props/tex/... ?) \u003C/p\u003E\u003Cp\u003EAnd... I have a big doubt, do you mean this tool is suppose to run as kind of plug-in INSIDE KSP ? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\u003Cp\u003EWhatever the language used, you can always made a executable which ship everything needed (Perl have the ugly PAR which make big, very big, executable from small scripts).\u003C/p\u003E\u003Cp\u003EI think you\u0027re going the wrong way and maybe think a bit too much, the best would be to define already something to work on with a minimal features set, but WORKING and USABLE, not the best tool on Earth and Kerbin which is just a wish in your mind.\u003C/p\u003E\u003Cp\u003EIterative development model like KSP is great for complex projects.\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-01T18:50:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EWarning \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E: this comes from Skyhawk, not me, keks quotes him wrong and credit me for these sentence. I deny any involvement in this\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMy fault. Sorry for that!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EIf your concern is checksum, best is to use the fastest checksum tool available in each platform [...]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027d like to keep external dependencies as minimal as possible, because they need maintenance. When sticking to language features only, we can rely on them not breaking that easily in a multi-OS environment.\u003C/p\u003E\u003Cp\u003EBesides that, we could also rely on git\u0027s implementation here when using a C# implementation/wrapper.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EC# is not the only one to allow you to parallel-ize your code.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI never said that. But I already mentioned several times that I do not think it is a good idea to introduce further dependencies when there effectively is absolutely no need for it. Why ship (and maintain!) another runtime when .Net/Mono is already available on \u003Cstrong\u003Eall\u003C/strong\u003E target systems?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EAnd before even thinking of language performance, thinking first and do smart things is a lot more better. Why calculating sum for EVERY files in GameData on update ?\u003Cp\u003EYou only have to check mod X folder(s), and even less: only files that need to be checked.\u003C/p\u003E\u003Cp\u003E(Why for Jeb sake you\u0027ll have to calculate sums for files you don\u0027t care about like all stock parts/props/tex/... ?) \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBecause when not checking all files for manipulation, your updates are not consistent. Maybe a user manipulated a file that is not part of the update-diff or \u003Cstrong\u003Edoes not\u003C/strong\u003E want a file to be overridden/removed when updating a mod. And I never said we need to always calculate all checksums - it\u0027s just a worst-case scenario for people updating old installations. We also need to consider files created at runtime, not being part of the installation package. Do we delete, ignore or patch them? Stuff like that. Also, when knowing which files changed and which files did not, we can apply differential updates, effectively reducing update-time and fragmentation. No need to delete everything and unpack it again.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EAnd... I have a big doubt, do you mean this tool is suppose to run as kind of plug-in INSIDE KSP ? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENope. But I\u0027d love to see it integrate Toolbar via some API some day, notifying you of updates \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E But that\u0027s something to look at when things are working as expected.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EWhatever the language used, you can always made a executable which ship everything needed (Perl have the ugly PAR which make big, very big, executable from small scripts).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDid you ever try that in real-life environments? I did (have to...) do that for Perl, Python and Ruby applications. It was a nightmare to get it working reliably. Freezes, segfaults, dependencies that are determined at runtime only, and stuff like that. Not to mention the bloat of always having to ship a complete interpreter and a ton of libraries in your executables. Also efficiently debugging such applications at runtime is nearly impossible.\u003C/p\u003E\u003Cp\u003EIf you still think it\u0027s a good idea, go try pack up a application of your choice and see how it runs on different systems.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E(And here I\u0027m talking of real applications, no \u0022Hello World\u0022 stuff \u003C/em\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cem\u003E )\u003C/em\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EI think you\u0027re going the wrong way and maybe think a bit too much, the best would be to define already something to work on with a minimal features set, but WORKING and USABLE, not the best tool on Earth and Kerbin which is just a wish in your mind. Iterative development model like KSP is great for complex projects.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I we already agreed on creating a basic prototype. But someone has to build it... As I said I currently do not have the time to build it \u003Cstrong\u003Eright now\u003C/strong\u003E. When I find the time to do so, I will build it, but I cannot say when that will be. Maybe next weekend.\u003C/p\u003E\u003Cp\u003EAlso nobody stops \u003Cstrong\u003Eyou guys\u003C/strong\u003E from implementing the basic spec I posted earlier (and linked in the first post). Everything one needs to know to implement a prototype has been discussed on this thread here.\u003C/p\u003E\u003Cp\u003EWhen replying to this thread here, I am usually actually doing stuff for my daytime-job, and just try to reply to your posts without having you guys waiting too long.\u003C/p\u003E\u003Cp\u003ESo again, if you feel like you want to implement a prototype application, please, feel free do so! The more references we have, the better. I will implement mine as soon as I find the time to do so.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-01T19:02:40Z\u0022 title=\u002209/01/2014 07:02  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 1, 2014\u003C/time\u003E by keks\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Justin Kerbice","CreatedById":101695,"CreatedDateTime":"2014-09-02T08:42:52Z","Content":"\n\u003Cp\u003ESo what you suggest regarding checking files and update only when needed is called \u0027rsync\u0027 and already used by patcher, there are even API to rsync I think.\u003C/p\u003E\u003Cp\u003EAnd yes, I\u0027ve already made a terribly ugly heavy package with PAR for a big Perl project on solaris if it was not already enough and that\u0027s sucks a lot.\u003C/p\u003E\u003Cp\u003ELooks like language with \u0022easy-and-fast\u0022 code have to be balanced by \u0022ineffective-poor-bad\u0022 executable burden (except on unixes). Which is very sad because doing such features rich in \u0022better-for-delivrey\u0022 languages is a lot more work. And I\u0027m not sure C# have yet everything needed for easy and fast coding.\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-02T11:56:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003ESo what you suggest regarding checking files and update only when needed is called \u0027rsync\u0027 and already used by patcher, there are even API to rsync I think.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd how would you handle the compressed contents then? You\u0027d have to unpack the whole archive and sync it then. Also rsync cannot intelligently handle conflicts or our \u0022hotfix\u0022 architecture that easily. Don\u0027t get me wrong, I love rsync and use it on a daily base, but I see no reason to introduce yet another dependency here. And creating such a small class handling the file patching is really not that difficult. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EAnd yes, I\u0027ve already made a terribly ugly heavy package with PAR for a big Perl project on solaris if it was not already enough and that\u0027s sucks a lot.\u003Cp\u003ELooks like language with \u0022easy-and-fast\u0022 code have to be balanced by \u0022ineffective-poor-bad\u0022 executable burden (except on unixes). Which is very sad because doing such features rich in \u0022better-for-delivrey\u0022 languages is a lot more work. And I\u0027m not sure C# have yet everything needed for easy and fast coding.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, every language has it\u0027s specific field in which it is good. Perl\u0027s good at efficiently handling/parsing text files on *nix systems, but was never designed to be used for building standalone executables. That\u0027s something people hacked in at a later point, and is more of a toy than anything I\u0027d use in production unless I really have to. Also, I\u0027d not say that plain perl fits your \u0022easy-and-fast\u0022 description. Writing object-oriented code in perl is nothing anybody out there would like to do for bigger projects without using something like Moose, which in turn adds a ton of overhead, breaks on a regular basis thanks to B.pm and the like and introduces strange bugs that are almost impossible to debug without crawling through Moose itself and it\u0027s dependencies. I myself moved away from using perl for bigger projects some time ago because of this issue. I still use it for a lot of sysadmin stuff.\u003C/p\u003E\n"},{"CreatedByName":"gurgle528","CreatedById":118029,"CreatedDateTime":"2014-09-08T16:08:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Justin Kerbice\u0022 data-cite=\u0022Justin Kerbice\u0022\u003E\u003Cdiv\u003EAnd I\u0027m not sure C# have yet everything needed for easy and fast coding.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt probably does, depending on what you mean.\u003C/p\u003E\n"},{"CreatedByName":"gurgle528","CreatedById":118029,"CreatedDateTime":"2014-09-08T16:13:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022keks\u0022 data-cite=\u0022keks\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAnd creating such a small class handling the file patching is really not that difficult. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, I personally suggest having a script run through the mod without the hotfix and then the mod with the hotfix and then automatically generating a file indicating which files are to be updated. This file can then be sent to clients and they can just overwrite the files rather than going through all files on a client\u0027s machine. Or, alternatively, you could just package an archive of only the update files and extract the archive and have it overwrite all existing files.\u003C/p\u003E\u003Cp\u003E(apologies for double post, I\u0027m used to MyBB post merging)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-08T16:16:15Z\u0022 title=\u002209/08/2014 04:16  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 8, 2014\u003C/time\u003E by gurgle528\u003C/strong\u003E\n\u003Cbr\u003Ei dun goofed\n\u003C/span\u003E\n"},{"CreatedByName":"slavik","CreatedById":93561,"CreatedDateTime":"2014-09-10T05:44:47Z","Content":"\n\u003Cp\u003ETo be honest, there are already a bunch of good tools. I wouldn\u0027t even worry about the specific tool. There are many packaging tools around to reference. What I would stress is coming up with a good package standard and having either developers of mods or packagers follow this standard.\u003C/p\u003E\u003Cp\u003EEDIT: If you are talking about what language should be used, you already lost the packaging game.\u003C/p\u003E\n"},{"CreatedByName":"MacTee","CreatedById":57891,"CreatedDateTime":"2014-09-10T20:08:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022slavik\u0022 data-cite=\u0022slavik\u0022\u003E\u003Cdiv\u003E[...]EDIT: If you are talking about what language should be used, you already lost the packaging game.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ei like this =)\u003C/p\u003E\n"},{"CreatedByName":"slavik","CreatedById":93561,"CreatedDateTime":"2014-09-11T08:23:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MacTee\u0022 data-cite=\u0022MacTee\u0022\u003E\u003Cdiv\u003Ei like this =)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI used to moderate a programming forum. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-11T15:37:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022slavik\u0022 data-cite=\u0022slavik\u0022\u003E\u003Cdiv\u003EIf you are talking about what language should be used, you already lost the packaging game.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, actually we already made a decision here: C#. Simply because of two reasons:\u003C/p\u003E\u003Cp\u003E* No extra dependencies needed on the client, because .Net/Mono is already there\u003C/p\u003E\u003Cp\u003E* Someone needs to maintain the repo and the tools\u003C/p\u003E\u003Cp\u003EAs this community is focused around C#, because KSP mods are written in C#, chances to find someone in here willing to help develop and maintain a C# project are by far better than finding a, lets say, Haskell developer.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EPS: I did not have time to complete my Prototype yet, as I\u0027ve been quite busy with my job lately, but I should have a working prototype at the end of the week.\u003C/em\u003E\u003C/p\u003E\n"},{"CreatedByName":"gurgle528","CreatedById":118029,"CreatedDateTime":"2014-09-12T01:09:27Z","Content":"\n\u003Cp\u003EUsing the KerbalStuff API (which \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/26031-Win-KSP-Mod-Admin-v1-3-11-%281-4-0-PR-13%29-Mod-install-with-a-few-clicks?p=1405289\u0026amp;viewfull=1#post1405289\u0022 rel=\u0022external nofollow\u0022\u003EMacTee might be integrating into KSPMA\u003C/a\u003E) would probably be better than using GitHub and having maintainers and the like. With KerbalStuff it is already done for us and the modders can update the mods themselves (and to a platform to which most already use for releases).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-12T01:12:51Z\u0022 title=\u002209/12/2014 01:12  AM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 12, 2014\u003C/time\u003E by gurgle528\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-12T16:26:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022gurgle528\u0022 data-cite=\u0022gurgle528\u0022\u003E\u003Cdiv\u003EUsing the KerbalStuff API would probably be better than using GitHub and having maintainers and the like. With KerbalStuff it is already done for us and the modders can update the mods themselves (and to a platform to which most already use for releases).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs I already posted earlier, I\u0027d love to see integration with KerbalStuff. It does not matter from where the data comes (if it is a human being, or some API), as long as it is complete.\u003C/p\u003E\u003Cp\u003EThe reason why I, personally, prefer a free repository over some third-party site is, that it can easily be continued by someone else, when the original maintainers disappear for some reason. Think about what would happen if the KerbalStuff-Guys decide to suddenly shutdown their project for some reason. Even with the source-code available, it would take some time to get everything back up and running. Not to mention the data loss...\u003C/p\u003E\u003Cp\u003EWith a solution based on a GitHub-Repo, it\u0027s a simple push of the [fork] button, and you\u0027re done. Also it\u0027s completely free. Nobody needs to pay for hosting that site, while for KerbalStuff (hosted at digitalocean.com/pricing/) obviously does.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022gurgle528\u0022 data-cite=\u0022gurgle528\u0022\u003E\u003Cdiv\u003E[...] and having maintainers and the like. [...] the modders can update the mods themselves.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMost of the modders host their sources and binary releases on GitHub anyway. All these people would have to do is create a tag, say \u0027latest\u0027 and let our repo automatically update our index to the commit said tag points to. done. That would even be less work than any other solution out there, yet. Including the forums and KerbalStuff.\u003C/p\u003E\u003Cp\u003EThe only \u0022work\u0022 that is to be done, is the initial import or when file structure changes. Then the meta-data has most likely to be updated manually. Simple updates with no fundamental changes to directory structure can be processed automatically. Including bumping the version, as long as they tag their releases properly.\u003C/p\u003E\u003Cp\u003EIf then we, and the KerbalStuff guys work together, they can easily integrate our repo into their site, if they wish to.\u003C/p\u003E\u003Cp\u003EPlease be patient and wait for the first prototype. As I already said, I\u0027m quite busy with my job recently, so I don\u0027t have that much time to work on the prototype application. Also I have some other things to do as well... damn social life... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E I might have something to show by Sunday, but I cannot promise that...\u003C/p\u003E\n"},{"CreatedByName":"MacTee","CreatedById":57891,"CreatedDateTime":"2014-09-12T17:41:57Z","Content":"\n\u003Cp\u003Ehey kek,\u003C/p\u003E\u003Cp\u003Ecould you link the \u0022spec\u0022 and samples in your signiture please. This way it\u0027s easy to find and even better its always up to date.\u003C/p\u003E\u003Cp\u003EBtw ... good job ... all the fighting agains windmills and don\u0027t losing track!\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-12T20:57:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MacTee\u0022 data-cite=\u0022MacTee\u0022\u003E\u003Cdiv\u003Ecould you link the \u0022spec\u0022 and samples in your signiture please. This way it\u0027s easy to find and even better its always up to date.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESadly, I did not have the time to write a technical specification.\u003C/p\u003E\u003Cp\u003ELooks like my rough outline/summary and the prototype (once it\u0027s there) have to suffice until I have some more free time to spend.\u003C/p\u003E\u003Cp\u003EThere\u0027s a link to the summary on my initial post, so it\u0027s easier to find.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MacTee\u0022 data-cite=\u0022MacTee\u0022\u003E\u003Cdiv\u003EBtw ... good job ... all the fighting agains windmills and don\u0027t losing track!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I think most developers are used to fight against windmills... You don\u0027t develop stuff that\u0027s great, you develop stuff that gets paid for...\u003C/p\u003E\n"},{"CreatedByName":"gurgle528","CreatedById":118029,"CreatedDateTime":"2014-09-15T22:38:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022keks\u0022 data-cite=\u0022keks\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EPlease be patient and wait for the first prototype. As I already said, I\u0027m quite busy with my job recently, so I don\u0027t have that much time to work on the prototype application. Also I have some other things to do as well... damn social life... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E I might have something to show by Sunday, but I cannot promise that...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m working on a KerbalStuff prototype just to test it out. There\u0027s no reason we have to use one or the other really, we could have both as sources and let the users pick. I will probably have something put together by Sunday as well.\u003C/p\u003E\u003Cp\u003EAlso, just because there is a chance that KerbalStuff might go dark doesn\u0027t mean that it isn\u0027t a valid option necessarily.\u003C/p\u003E\n"},{"CreatedByName":"TheAlmightyOS","CreatedById":105590,"CreatedDateTime":"2014-09-15T23:02:49Z","Content":"\n\u003Cp\u003Eforgive me, I have not had the time to go though the entire thread. Keks, are you building this prototype by yourself?\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-16T00:15:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022gurgle528\u0022 data-cite=\u0022gurgle528\u0022\u003E\u003Cdiv\u003EThere\u0027s no reason we have to use one or the other really, we could have both as sources and let the users pick.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs I said, as long as their API provides every information we need, we of course can use it to easily feed the repo.\u003C/p\u003E\u003Cp\u003EWe could for example query their API every X minutes for new uploads, or even better, they push accumulated lists changes to us. We could then easily generate the mod-repo, meta-data, etc and update the index automatically.\u003C/p\u003E\u003Cp\u003EBut that is something we can talk about once there\u0027s some more or less stable codebase to built upon.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022gurgle528\u0022 data-cite=\u0022gurgle528\u0022\u003E\u003Cdiv\u003EAlso, just because there is a chance that KerbalStuff might go dark doesn\u0027t mean that it isn\u0027t a valid option necessarily.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI never said that it\u0027s no valid option. In fact I said I\u0027d love to see integration (meaning sharing data in both directions) with them at some point \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TheAlmightyOS\u0022 data-cite=\u0022TheAlmightyOS\u0022\u003E\u003Cdiv\u003Eforgive me, I have not had the time to go though the entire thread. Keks, are you building this prototype by yourself?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m currently building a very basic cmd-based prototype in Python \u00C3\u0192\u00C2\u00A0 la \u0027apt-get\u0027.\u003C/p\u003E\u003Cp\u003ESo far you can download/update your local index, search for mods by name and install/update them.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EAs mentioned earlier, my job got a bit stressful lately as we managed to acquire two (for us) unusually big projects at a time, hence we\u0027re a bit short on manpower right now.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EI usually say that I might have something on Sunday, but in fact I have had only a couple of hours over the last few days for working on my reference implementation.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ESo right now, I really cannot say when I will have something to show to you... And it\u0027s past 02:00 again already...\u003C/em\u003E\u003C/p\u003E\n"},{"CreatedByName":"TheAlmightyOS","CreatedById":105590,"CreatedDateTime":"2014-09-16T00:27:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022keks\u0022 data-cite=\u0022keks\u0022\u003E\u003Cdiv\u003EI\u0027m currently building a very basic cmd-based prototype in Python \u00C3\u0192\u00C2\u00A0 la \u0027apt-get\u0027.\u003Cp\u003ESo far you can download/update your local index, search for mods by name and install/update them.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EAs mentioned earlier, my job got a bit stressful lately as we managed to acquire two (for us) unusually big projects at a time, hence we\u0027re a bit short on manpower right now.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EI usually say that I might have something on Sunday, but in fact I have had only a couple of hours over the last few days for working on my reference implementation.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ESo right now, I really cannot say when I will have something to show to you... And it\u0027s past 02:00 again already...\u003C/em\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDon\u0027t shoulder it alone. put up what you got already in Github or something, let us take a crack at it while you are working. When you come back, approve or deny the changes and move forward. That is how opensource/linux projects work. That is what we are trying to emulate, right? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003C/p\u003E\u003Cp\u003EWe understand your vision. So let us help.\u003C/p\u003E\n"},{"CreatedByName":"keks","CreatedById":114085,"CreatedDateTime":"2014-09-16T06:17:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TheAlmightyOS\u0022 data-cite=\u0022TheAlmightyOS\u0022\u003E\u003Cdiv\u003EDon\u0027t shoulder it alone. put up what you got already in Github or something, let us take a crack at it while you are working. When you come back, approve or deny the changes and move forward. That is how opensource/linux projects work. That is what we are trying to emulate, right? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003Cp\u003EWe understand your vision. So let us help.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo here you go: \u003Ca href=\u0022https://github.com/ksprepo-alt/kspmm-prototype\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/ksprepo-alt/kspmm-prototype\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBe careful when using it as it did not undergo any tests at all! \u003Cstrong\u003EKittens may die when using it!\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAlso be sure to set config/cache_dir and config/ksp_base_dir according to your environment.\u003C/p\u003E\u003Cp\u003ECode is a undocumented mess, but it should be pretty easy to understand.\u003C/p\u003E\n"},{"CreatedByName":"Benzschwagel","CreatedById":75790,"CreatedDateTime":"2014-09-16T12:35:03Z","Content":"\n\u003Cp\u003Ewow, this is awesome! I just have to ask though, does curse fit into this in any way? I\u0027m imagining not. I did think it was kind of odd that squad jumped to curse, when there were already several other options lying about...\u003C/p\u003E\u003Cp\u003E...or maybe not, I could just not have a clue as to what I\u0027m talking about, that does happen from time to time \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-16T12:45:25Z\u0022 title=\u002209/16/2014 12:45  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 16, 2014\u003C/time\u003E by Benzschwagel\u003C/strong\u003E\n\u003C/span\u003E\n"}]}