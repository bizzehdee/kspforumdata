{"TopicId":61827,"ForumId":34,"TopicTitle":"[1.3] kOS Scriptable Autopilot System v1.1.3.0","CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-02-01T16:40:58Z","PageNum":21,"Articles":[{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-07T21:34:01Z","Content":"\n\u003Cp\u003EI don\u0027t know about anything else but a roll program will be very difficult to create for all contingencies. Afterall rockets all behave differently.\u003C/p\u003E\u003Cp\u003EBasically you should be able to spec your current orientation, and simply add or subtract 180 from the roll component. What\u0027s more difficult is making sure the program knows when you\u0027ve achieved your orientation. It has something to do with the dot product of both vectors, but I\u0027ve never done anything like that.\u003C/p\u003E\u003Cp\u003EAlso yes, you need to turn SAS off before performing maneuvers and turn it back on before the end of the program.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-07T21:51:51Z\u0022 title=\u002204/07/2014 09:51  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 7, 2014\u003C/time\u003E by Cpt. Kipard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-07T21:45:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Incomitatum\u0022 data-cite=\u0022Incomitatum\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ELastly was [ heading(x,y) ] deprecated? It doesn\u0027t throw any errors, it seems to be ignored; now I must use [ heading x by y] to get a response from the controls.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI had the exact opposite experience. [ heading x by y ] was deprecated and I had to change to [ heading(x,y) ].\u003C/p\u003E\n"},{"CreatedByName":"Incomitatum","CreatedById":107949,"CreatedDateTime":"2014-04-07T21:54:33Z","Content":"\n\u003Cp\u003EThank you all for addressing some of my issues.\u003C/p\u003E\u003Cp\u003EI\u0027ll keep rolling how I have been.\u003C/p\u003E\u003Cp\u003EThat\u0027s very odd about the HEADING.\u003C/p\u003E\u003Cp\u003EHere are some other points I had:\u003C/p\u003E\u003Cp\u003EThis is probably the most important for me to address right now as I need that extra layer of info to fly from IVA properly.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EI saw in a video but cannot find it again, where you can continuously echo variables on the screen? This is important as I am doing more and more flights IN cockpit and finding the features lacking. My Apoapsis, Periapsis and ETA to Apoapsis would be nice to know at all times.\u003C/span\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EAlso\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EHave my tests been conclusive? Am I right in that you cant change rotation/bearing with SAS on? It seems so, so now I turn it off before all maneuvers and back on after that code completes.\u003C/span\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s great to get feedback from you all. I hope I\u0027m not a bother. I\u0027ve googled my butt off, but some of the documentation seems it\u0027s for older versions.\u003C/p\u003E\u003Cp\u003EBe well all!\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-07T22:41:04Z","Content":"\n\u003Cp\u003EContinuous displays can be achieved with PRINT ...AT.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://ksp-kos.github.io/KOS_DOC/command/terminal/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ksp-kos.github.io/KOS_DOC/command/terminal/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFor SAS:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Esas off.\u003Cp\u003Esas on.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Incomitatum","CreatedById":107949,"CreatedDateTime":"2014-04-07T22:42:03Z","Content":"\n\u003Cp\u003EIs this indeed the case?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cem\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EAm I right in that you cant change rotation/bearing with SAS on?\u003C/span\u003E\u003C/em\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Sma","CreatedById":67377,"CreatedDateTime":"2014-04-07T22:56:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Incomitatum\u0022 data-cite=\u0022Incomitatum\u0022\u003E\u003Cdiv\u003EVery sorry to bother you all. I am loving this mod, so much so that I didn\u0027t sleep last night. I have a few questions.\u003Cp\u003EI saw in a video but cannot find it again, where you can continuously echo variables on the screen? This is important as I am doing more and more flights IN cockpit and finding the features lacking. My Apoapsis, Periapsis and ETA to Apoapsis would be nice to know at all times.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf I understand your question correctly I assume you mean have a line of text that is continously updating? so it\u0027s not scrolling?\u003C/p\u003E\u003Cp\u003EIf that\u0027s the case look into positioning. I THINK it was something like \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[s]print \u0022altitude:\u0022 \u002B altitude (0,2).[/s]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s actually \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022altitude: \u0022 \u002B altitude at (0,2).\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFor more information check out the kOS wiki (community opperated) list of commands at \u003Ca href=\u0022http://kos.wikia.com/wiki/List_of_all_Commands\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kos.wikia.com/wiki/List_of_all_Commands\u003C/a\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027ve had plenty of bugs where they are called out in the console, but the wrong line is displayed.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, I\u0027ve had that before. It\u0027s been a while since I\u0027ve messed with KSP but I think it had to deal with something not being terminated correctly. A missing \u0022full stop\u0022, or a missing quote or bracket.\u003C/p\u003E\u003Cp\u003EAnd as far as SAS goes, I always forget to turn it off when using kOS, so I try to remember to turn sas off before or after a lock heading command, and then at the end of the program turn it back on. Seems to do the trick most of the time.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-07T23:06:13Z\u0022 title=\u002204/07/2014 11:06  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 7, 2014\u003C/time\u003E by Sma\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-07T22:57:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Incomitatum\u0022 data-cite=\u0022Incomitatum\u0022\u003E\u003Cdiv\u003EIs this indeed the case?\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EAlso yes, you need to turn SAS off before performing maneuvers and turn it back on before the end of the program.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EReally this is something you could have tested yourself anyway.\u003C/p\u003E\n"},{"CreatedByName":"Incomitatum","CreatedById":107949,"CreatedDateTime":"2014-04-07T23:46:28Z","Content":"\n\u003Cp\u003ECpt. Kipard.\u003C/p\u003E\u003Cp\u003EI have tested it. Yes. And told you my results. In the name of scientific inquiry I was asking if this was indeed the case and if you had experienced it.\u003C/p\u003E\u003Cp\u003EThank you for taking the time to reply.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-07T23:57:44Z","Content":"\n\u003Cp\u003EI misunderstood.\u003C/p\u003E\u003Cp\u003EYou\u0027re welcome anyway. Happy scripting.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T00:05:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Sma\u0022 data-cite=\u0022Sma\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022altitude: \u0022 \u002B altitude at (0,2).\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is better:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022altitude: \u0022 \u002B round(altitude,0) \u002B \u0022  \u0022 at (0,2).\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe reason for rounding is that altitude is a floating point number and you could get a display like 1234.5667781.\u003C/p\u003E\u003Cp\u003EThe reason for adding [ \u002B \u0022 \u0022 ] after the altitude is to handle the case where the altitude might become small enough to lose a digit. You want to wipe out the characters after the altitude so that if you go from this:\u003C/p\u003E\u003Cp\u003Ealtitude: 10000\u003C/p\u003E\u003Cp\u003Eto this:\u003C/p\u003E\u003Cp\u003Ealtitude: 9999\u003C/p\u003E\u003Cp\u003EThe extra \u00220\u0022 leftover from the \u002710000\u0027 gets wiped out. Otherwise you\u0027ll end up with the \u00229999\u0022 looking like this:\u003C/p\u003E\u003Cp\u003Ealtitude: 99990\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T06:06:01Z","Content":"\n\u003Cp\u003EThis is such a useful thing I just found buried in the github code, and it was in the documentation but it sneaked past me without a major announcement and I didn\u0027t see it.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset dir to Up \u002B R(20,0,0).\u003Cbr\u003Eset unitV to dir:vector.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat suffix \u0022:vector\u0022 is what I\u0027m talking about. It converts the direction into a unit vector pointing in that direction.\u003C/p\u003E\u003Cp\u003ETo see how happy I am to find out that this exists, remember that this is the kosscript code I had to use when I had to build the rotation matrix manually without the help of the Unity engine\u0027s matrix operations:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edeclare parameter tfDir.\u003Cbr\u003E\u003Cbr\u003E// Rotation angles for rotation matrix:\u003Cbr\u003Eset tfA to tfDir:yaw.\u003Cbr\u003Eset tfCosA to cos(tfA).\u003Cbr\u003Eset tfSinA to sin(tfA).\u003Cbr\u003E\u003Cbr\u003Eset tfB to tfDir:pitch.\u003Cbr\u003Eset tfCosB to cos(tfB).\u003Cbr\u003Eset tfSinB to sin(tfB).\u003Cbr\u003E\u003Cbr\u003Eset tfC to tfDir:roll.\u003Cbr\u003Eset tfCosC to cos(tfC).\u003Cbr\u003Eset tfSinC to sin(tfC).\u003Cbr\u003E\u003Cbr\u003Eset tf11 to tfCosA*tfCosC \u002B tfSinA*tfSinB*tfSinC .\u003Cbr\u003Eset tf21 to tfCosC*tfSinA*tfSinB - tfCosA*tfSinC .\u003Cbr\u003Eset tf31 to tfCosB*tfSinA .\u003Cbr\u003Eset tf12 to tfCosB*tfSinC .\u003Cbr\u003Eset tf22 to tfCosB*tfCosC .\u003Cbr\u003Eset tf32 to 0-tfSinB .\u003Cbr\u003Eset tf13 to tfCosA*tfSinB*tfSinC - tfCosC*tfSinA .\u003Cbr\u003Eset tf23 to tfSinA*tfSinC \u002B tfCosA*tfCosC*tfSinB .\u003Cbr\u003Eset tf33 to tfCosA*tfCosB .\u003Cbr\u003Eset tfV to V( 0,0,1 ).\u003Cbr\u003E\u003Cbr\u003Eset tfUnit to V(\u003Cbr\u003E  tf11*tfV:x \u002B tf21*tfV:y \u002B tf31*tfV:z ,\u003Cbr\u003E  tf12*tfV:x \u002B tf22*tfV:y \u002B tf32*tfV:z ,\u003Cbr\u003E  tf13*tfV:x \u002B tf23*tfV:y \u002B tf33*tfV:z ) .\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETHAT, is now replaced with this one line:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset tfUnit to tfDir:vector.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENormally in most cases I dislike when the kOS mod does all the work for you, but in this case I like it because it doesn\u0027t feel like \u0022cheating\u0022 when real navigation computers would have the ability to perform vector rotations with a transformation matrix as a very low level operation buried down in the hardware. Even the Apollo computer had that. (sort of. It ran on a very RISC set of only about 12 instruction opcodes, which then had a set of middleware instructions layered on top of them to preset a virtual machine language to the rest of the system that had more than those 12 opcodes. The matrix and vector operations were in that middleware pseudo-ML layer.)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-08T06:22:19Z\u0022 title=\u002204/08/2014 06:22  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 8, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-08T07:52:29Z","Content":"\n\u003Cp\u003ECould someone help me with some maths?\u003C/p\u003E\u003Cp\u003EI\u0027ve been developing a node execution script, an I\u0027ve got it pretty close to what I want, but there\u0027s still one thing that makes it perform poorly with very short burns or interbody burns. I\u0027m almost positive it\u0027s down to the fact that the throttle can\u0027t be maxed instantaneously. There\u0027s a split second delay while it throttles up and down. Id like to try something but I\u0027m not sure how to implement it.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/TntZNgc.png\u0022 alt=\u0022TntZNgc.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EA. This is how the burn is performed right now. The green line is the function that controls the acceleration. It\u0027s timed based on maxthrust and throttle is locked to a mass/startmass ratio to keep acceleration constant. Burn time here is (T\u003Cspan style=\u0022font-size:8px;\u0022\u003E1\u003C/span\u003E * 2 \u002B T\u003Cspan style=\u0022font-size:8px;\u0022\u003E2\u003C/span\u003E)\u003C/p\u003E\u003Cp\u003EB. With a quick calculus refresher I remembered that the blue area under a function (integral) here represents delta-v so I simply changed the geometry while keeping the area the same. I want to determine T\u003Cspan style=\u0022font-size:8px;\u0022\u003E1\u003C/span\u003E arbitrarily and throttle up according to function B. Question is: How do I do that? Ideally I\u0027d like to have a multiplier that\u0027s \u0026gt;0 and \u0026lt;1, which I could ramp up over T\u003Cspan style=\u0022font-size:8px;\u0022\u003E1\u003C/span\u003E*2, and then down again over the same amount of time.\u003C/p\u003E\u003Cp\u003EPlease help. This has been bothering me for a really long time.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThis is such a useful thing I just found buried in the github code\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat have you used that for?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-08T07:55:36Z\u0022 title=\u002204/08/2014 07:55  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 8, 2014\u003C/time\u003E by Cpt. Kipard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T09:23:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EPlease help. This has been bothering me for a really long time.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe biggest problem you\u0027re going to run into with any attempt to calculate this is that you literally cannot detect the duration of time that your sloped sections of the graph take. Nothing you query from kOS will tell you \u0022this is where the real throttle is at the moment, rather than the throttle setting it\u0027s seeking toward.\u0022 So you can\u0027t tell how long it took to get from zero to 100% from inside the code. The instant you set the throttle to 1, kOS will *claim* it really is at 1 right away when you query it, whether it really has gotten there yet or not.\u003C/p\u003E\u003Cp\u003EHere\u0027s how I usually deal with it: I don\u0027t do what you\u0027re trying to do. Predicting the burn time ahead of time and then unconditionally telling it to burn for that long seems a very fragile algorithm to follow given that the numbers in KSP aren\u0027t 100% accurate. Instead I look for a way to query the expected ending condition (burn until WHAT is true? Until the orbit is circular? Until the encounter is at its minimum periapsis?, etc.), and then I make that check be the thing that actually causes the burn to end, utterly ignoring the predicted burn time. I only use the predicted burn time for some fuzzy heuristics, never for a thing I have to \u0022trust\u0022 it for.\u003C/p\u003E\u003Cp\u003EAlso, I usually come up with a way for that end-condition check to \u0022notice\u0022 when the condition is getting near but not there yet, so I can slow the throttle down gently and therefore not overshoot the end condition. For example, when circularizing the orbit, I start slowing the throttle down as the eccentricity gets closer to 0.0, and then cut the throttle off when the craft gets closer to periapsis than apoapsis altitude (meaning the craft has rotated them around to the point where there\u0027s no point in burning any further from the current location).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhat have you used that for?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA number of uses so far, where I used my longhand version of it, that I can now go through and replace with the shorter version.\u003C/p\u003E\u003Cp\u003EThe mod gives you \u0022north\u0022 and \u0022up\u0022, but only in the form of Directions, not in the form of vectors. If I had them in the form of vectors then I can get my own axes rotated relative to the surface, and thus make calculations in that surface-relative coordinate system that\u0027s so much better to deal with for the last steps of landing. So I used that code to get the \u0022up\u0022 unit vector from the \u0022up\u0022 R() rotation, and the \u0022north\u0022 unit vector from the \u0022north\u0022 R() rotation. Once I had those two then I could get the east vector by taking the cross product of the north and up vectors. (And I used to have to do the cross product in longhand too, but that now has a function VCRS(A,\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E for it.)\u003C/p\u003E\u003Cp\u003EAnother place where having it is handy is in transforming the direction to a target into a vector to the target that can be multiplied, scaled, and combined with other vectors to help in writing docking scripts (which I\u0027m just starting now but first I\u0027m looking at some problems in the actual mod code).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-08T09:40:14Z\u0022 title=\u002204/08/2014 09:40  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 8, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Sma","CreatedById":67377,"CreatedDateTime":"2014-04-08T12:36:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThis is better:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022altitude: \u0022 \u002B round(altitude,0) \u002B \u0022  \u0022 at (0,2).\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe reason for rounding is that altitude is a floating point number and you could get a display like 1234.5667781.\u003C/p\u003E\u003Cp\u003EThe reason for adding [ \u002B \u0022 \u0022 ] after the altitude is to handle the case where the altitude might become small enough to lose a digit. You want to wipe out the characters after the altitude so that if you go from this:\u003C/p\u003E\u003Cp\u003Ealtitude: 10000\u003C/p\u003E\u003Cp\u003Eto this:\u003C/p\u003E\u003Cp\u003Ealtitude: 9999\u003C/p\u003E\u003Cp\u003EThe extra \u00220\u0022 leftover from the \u002710000\u0027 gets wiped out. Otherwise you\u0027ll end up with the \u00229999\u0022 looking like this:\u003C/p\u003E\u003Cp\u003Ealtitude: 99990\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAhh yes, forgot about those. Actually I looked up one of my old codes and I also converted it to km instead of meters. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprint \u0022Kerbosyncronous KommSat Launcher \u0022 at (0,0).\u003Cbr\u003Eprint \u0022--------------------------------------------------\u0022 at (0,1).\u003Cbr\u003Eprint \u0022|   Apoapsis:   |    Periapsis:    |   Altitude:   \u0022 at (0,2).\u003Cbr\u003Eprint \u0022--------------------------------------------------\u0022 at (0,3).\u003Cbr\u003Eprint \u0022|  \u0022 \u002B round(apoapsis/1000,2) \u002B \u0022km\u0022 at (0,4).\u003Cbr\u003Eprint \u0022|    \u0022 \u002B round(periapsis/1000,2) \u002B \u0022km\u0022 at (15,4).\u003Cbr\u003Eprint \u0022|   \u0022 \u002B round(altitude/1000,2) \u002B \u0022km\u0022 at (34,4).\u003Cbr\u003Eprint \u0022|\u0022 at (49,2).\u003Cbr\u003Eprint \u0022|\u0022 at (49,4).\u003Cbr\u003Eprint \u0022--------------------------------------------------\u0022 at (0,5).\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFor some reason I had the other pipes added in later on in the program lol\u003C/p\u003E\n"},{"CreatedByName":"marianoapp","CreatedById":104009,"CreatedDateTime":"2014-04-08T17:36:36Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E@Steven Mading:\u003C/strong\u003E Beware that the VECTOR suffix doesn\u0027t necessarily work with all rotations, only with those that were (internally) created using a vector. (In your old script you are calculating a bunch of stuff that is later multiplied by zero, so the script could be simpler).\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E@Cpt. Kipard:\u003C/strong\u003E Check the node execution script I posted \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68089-0-23-kOS-Scriptable-Autopilot-System-v0-11-2-13?p=1016509\u0026amp;viewfull=1#post1016509\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E. It reduces the throttle so the burn takes at least 1s and that allows the script to time it more precisely, and also has a throttle up delay to start the burn a little early (determined experimentally, may be different for you).\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T20:00:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022marianoapp\u0022 data-cite=\u0022marianoapp\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003E@Steven Mading:\u003C/strong\u003E Beware that the VECTOR suffix doesn\u0027t necessarily work with all rotations, only with those that were (internally) created using a vector. (In your old script you are calculating a bunch of stuff that is later multiplied by zero, so the script could be simpler).\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWould you object if it was adapted so that it does work regardless of whether it was internally made with a vector or not? Because the meaning of the R(..,..,..) format you get from the built-in rotations IS in fact to assume the starting direction (pitch, yaw, and roll all being zero) prior to any of the rotations is the Z axis. So you can always treat it like it was crated from the unit vector V(0,0,1).\u003C/p\u003E\u003Cp\u003EAll rotations in fact start from the presumption that you began with a known initial direction, otherwise they don\u0027t mean anything. \u003C/p\u003E\u003Cp\u003E\u0022I\u0027m steering in a direction that is 20 degrees to the left\u0022.\u003C/p\u003E\u003Cp\u003E\u0022uh\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6 20 degrees to the left of WHAT?\u0022\u003C/p\u003E\u003Cp\u003EWithout a well defined meaning of that \u0022WHAT\u0022, you can\u0027t steer toward that direction because it\u0027s not defined what it is. Experimentally, I found out that in kOS, the \u0022WHAT\u0022 is always the Z axis.\u003C/p\u003E\u003Cp\u003EIn other words, I don\u0027t understand how kOS can make use of a Rotation like R(\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6 ,\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6., \u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6) to steer by if there exist rotations that don\u0027t have a default presumed starting direction.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-08T21:24:13Z","Content":"\n\u003Cp\u003EThanks Steven and marianoapp, but those solutions don\u0027t really suit my play style.\u003C/p\u003E\u003Cp\u003EDoes kOS have a function that limits it\u0027s output to some maximum or minimum?\u003C/p\u003E\n"},{"CreatedByName":"marianoapp","CreatedById":104009,"CreatedDateTime":"2014-04-08T22:26:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EThanks Steven and marianoapp, but those solutions don\u0027t really suit my play style.\u003Cp\u003EDoes kOS have a function that limits it\u0027s output to some maximum or minimum?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, MAX and MIN.\u003C/p\u003E\u003Cp\u003EActually my script is very similar to the solution you proposed, with the difference that the throttle ramp-up area is left to the game\u0027s own throttle up delay. The burn is then executed a little short and after it finishes a throttle ramp-down is performed proportional to the node\u0027s remaining dV (or orbit eccentricity, as Steven suggested).\u003C/p\u003E\u003Cp\u003EIf you want to control the ramp-up rate you could use a lock that returns the throttle as a function of time, but bear in mind that the code won\u0027t necessarily be executed in exact intervals and that could introduce some errors.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T23:32:16Z","Content":"\n\u003Cp\u003ECpt Kipard: If you really do want to use the timed burn style, then you need to force the ramp-up and ramp-down times to be predictable so you can calculate the triangular parts of your graph. What matters isn\u0027t that it has to be super fast, but that it has to be KNOWN so you can perform your calculations.\u003C/p\u003E\u003Cp\u003EHere\u0027s an idea of how to ramp it up predictably. Let\u0027s say that you\u0027ve decided upon a 2 second ramp-up time and a 2-second ramp down time, and doing the calculation that way you\u0027ve come to the conclusion that with those timings you\u0027d need a burn that looks like this:\u003C/p\u003E\u003Cp\u003ERamp up from 0.0 to 1.0 in 2 seconds.\u003C/p\u003E\u003Cp\u003EThen burn steady at 1.0 for 10 seconds.\u003C/p\u003E\u003Cp\u003EThen ramp down from 1.0 to 0.0 in 2 seconds.\u003C/p\u003E\u003Cp\u003E(I\u0027m leaving it to you to work out the math for how to decide that that\u0027s the burn you need, but lets say for the sake of the example that you\u0027ve already determined that those are the timings you want) You could implement that like so:\u003C/p\u003E\u003Cp\u003EThis would mean that you want a slope at the beginning of the graph of 1/2 (2 seconds to get from 0.0 to 1.0)., and at the end of the graph a slope of -1/2 (2 seconds to get from 1.0 to 0.0). You can make a triangular graph that does that with this formula:\u003C/p\u003E\u003Cp\u003E1: throttle = 3.5 - abs( (t-7)/2 ) \u003C/p\u003E\u003Cp\u003E(Note the number 7 is derived from \u0022it\u0027s half of 14\u0022, which is the total duration of the ramp up, steady burn, and ramp down parts of the graph (2\u002B10\u002B2).)\u003C/p\u003E\u003Cp\u003E(Note the number 3.5 is derived from \u0022it\u0027s the midpoint time, multiplied by the slope: 7*(1/2)\u0022. That makes it be the max height of the triangle.)\u003C/p\u003E\u003Cp\u003E(and the divide by 2 is because you want a slope of 1/2 in this example).\u003C/p\u003E\u003Cp\u003EThen the middle steady part of the burn is described by this formula:\u003C/p\u003E\u003Cp\u003E2: throttle = 1.0 [ a constant ]\u003C/p\u003E\u003Cp\u003EGraphing the two of them you get this: (the brown line is formula 1, and the blue line is formula 2).\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/4ftg7ii.png\u0022 alt=\u00224ftg7ii.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EIf you take the minimum of those two, you get this graph:\u003C/p\u003E\u003Cp\u003E3: throttle = min( 1.0, 3.5 - abs( (t-7)/2 ) )\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/u6a21Yn.png\u0022 alt=\u0022u6a21Yn.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThat\u0027s the graph you want the burn to do.\u003C/p\u003E\u003Cp\u003EThis is the code that would accomplish that burn:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset rampSlope to 0.5. // Assume this is fixed no matter what.\u003Cbr\u003E\u003Cbr\u003E// I leave it as an exercise for you to work out how you\u0027d come up with this next number, given\u003Cbr\u003E// the rampSlope.\u003Cbr\u003E\u003Cbr\u003Eset steadyTime to 10.0.\u003Cbr\u003E\u003Cbr\u003E// Total time, 14 in this case:\u003Cbr\u003Eset tTotal to 2/rampSlope \u002B steadyTime.\u003Cbr\u003E\u003Cbr\u003Eset tHalf to tTotal/2.\u003Cbr\u003Eset triangleTop to tHalf * rampSlope.\u003Cbr\u003E\u003Cbr\u003Eset tZero to time:seconds.\u003Cbr\u003E\u003Cbr\u003E// Now, the entire throttle burn envelope can be controlled with this one expression:\u003Cbr\u003E\u003Cbr\u003Elock throttle to max( 0, max( 1,  triangleTop - abs( (t-tHalf )*rampSlope ) )  ).\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe max(0, \u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6.) part is there so that when the expression goes negative, the throttle stays at zero.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-09T04:48:09Z\u0022 title=\u002204/09/2014 04:48  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 9, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-08T23:40:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022marianoapp\u0022 data-cite=\u0022marianoapp\u0022\u003E\u003Cdiv\u003E(In your old script you are calculating a bunch of stuff that is later multiplied by zero, so the script could be simpler).\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrue, but the reason it looks like that is that I didn\u0027t know at first what the internal starting point of the rotation was and I had to determine it experimentally by tweaking the script again and again until it worked. Until I knew which way around it was it was easier to leave the entire transformation matrix populated fully even for the zero terms, otherwise I\u0027d have to re-type it every time I tried a different starting point (because that causes different terms to zero out.)\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-09T09:00:40Z","Content":"\n\u003Cp\u003EThanks both of you that\u0027s exactly what I wanted. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003ENext step. Error correction.\u003C/p\u003E\u003Cp\u003ELet\u0027s say the node is executed in this way but there\u0027s e.g. 1m/s left in the node, would kOS recognise that remainder correctly if I ran the node script again?\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEdit:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve tested it and it looks like the remainder is completely ignored by kOS. Is this normal behaviour? Maybe that\u0027s something that should be fixed.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-09T14:37:08Z\u0022 title=\u002204/09/2014 02:37  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 9, 2014\u003C/time\u003E by Cpt. Kipard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Hans Dorn","CreatedById":105419,"CreatedDateTime":"2014-04-09T16:45:32Z","Content":"\n\u003Cp\u003EThe remaining deltaV displayed for a node gets a bit wonky near 0. It would probably not be the best idea to try and get it down to 0.\u003C/p\u003E\u003Cp\u003ECheers\u003C/p\u003E\u003Cp\u003EHans\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-09T21:28:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hans Dorn\u0022 data-cite=\u0022Hans Dorn\u0022\u003E\u003Cdiv\u003EThe remaining deltaV displayed for a node gets a bit wonky near 0. It would probably not be the best idea to try and get it down to 0.\u003Cp\u003ECheers\u003C/p\u003E\u003Cp\u003EHans\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes. Even flying manually I never get it all the way to zero. It seems to get down close to zero and then start going back up again. I suspect this is because the aim would have to be 100% accurate for it to get to zero. It\u0027s probably calculating the difference between your current velocity and the intended end velocity, and I say \u0022velocity\u0022 rather than \u0022speed\u0022 quite deliberately here because I mean the vector, not the scalar. The direction matters not just the magnitude. So let\u0027s say for example that you set up a maneuver node that was meant to achieve a delta-V of 100 m/s in a particular direction, but you were burning 2 degrees off from the planned direction. Then after adding 100 m/s of delta-V you still aren\u0027t at the intended velocity. You\u0027re 2 degrees off from the intended velocity. Your maneuver node at this point would tell you that your current velocity is still 100*sin(2 deg) away from the intended velocity, or 3.49 m/s. But that\u0027s the closest it gets as your velocity passes just missing the intended mark and starts going farther past it.\u003C/p\u003E\u003Cp\u003EThe only way to get it to exactly 0 is for the aim to be literally exact and perfect, which is utterly impossible due to floating point math precision anyway, not to mention that the steering algorithm will have a little bit of wobble in it. It will just get near zero without reaching it.\u003C/p\u003E\u003Cp\u003ESuggested fix: In a loop continually compare the node\u0027s current delta V magnitude to the node\u0027s delta-V magnitude that you had on the previous loop iteration. This will let you detect if it\u0027s getting smaller (current is less than previous). Instead of burning until delta-V magnitude is zero, burn until the delta-V magnitude starts getting larger instead of getting smaller.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-09T21:30:32Z\u0022 title=\u002204/09/2014 09:30  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 9, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"TranquilTempest","CreatedById":18141,"CreatedDateTime":"2014-04-10T21:30:23Z","Content":"\n\u003Cp\u003EOnce you get close to the node, it\u0027s generally better to check the thing you were trying to accomplish in the first place, for example, if you create a node to circularize at apoapsis, cut the engines when your periapsis gets within X of your starting apoapsis.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-10T21:58:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022TranquilTempest\u0022 data-cite=\u0022TranquilTempest\u0022\u003E\u003Cdiv\u003EOnce you get close to the node, it\u0027s generally better to check the thing you were trying to accomplish in the first place, for example, if you create a node to circularize at apoapsis, cut the engines when your periapsis gets within X of your starting apoapsis.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI agree in principle, but not with that specific example. That can be a dangerous check that fails to stop the burn.\u003C/p\u003E\u003Cp\u003EIt has two problems:\u003C/p\u003E\u003Cp\u003E1: If X is too small, you can blow past X faster than the script responds and then when periapsis and apoapsis swap positions continued burning won\u0027t make the gap smaller, but larger.\u003C/p\u003E\u003Cp\u003E2: If It takes too long to execute the burn so that you aren\u0027t precise enough in executing it centered on apoapsis, then its possible to never get apoapsis and periapsis within X, and yet its still time to stop burning because continued burning won\u0027t make it any better. The check I prefer is to stop the burn when you\u0027ve rotated periapsis to within 90 degrees of your current position - to stop the burn as the apoapsis and periapsis are starting to swap positions and you\u0027re halfway between then. To see how to calculate that, google the phrase \u0022True Anomaly\u0022.\u003C/p\u003E\n"}]}