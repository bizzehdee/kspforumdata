{"TopicId":74000,"ForumId":29,"TopicTitle":"WIP plugin help - WheelCollider, GUI, GamObject heirarchy","CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T13:54:40Z","PageNum":1,"Articles":[{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T13:54:40Z","Content":"\n\u003Cp\u003EHello! \u003C/p\u003E\u003Cp\u003ESo I\u0027ve been working on some wheels in KSP and I can make just about anything I want in terms of size, suspension and grip. However, it gets a bit tedious firing up Unity and making yet another part that\u0027s exactly the same as the last, just with different properties of the wheelCollider object that does the physical simulation so I decided to delve into making a plugin to do it in-game.\u003C/p\u003E\u003Cp\u003EI\u0027ve never used Unity before but have some experience writing C for micro controllers. No C# or JS. What a journey!\u003C/p\u003E\u003Cp\u003ESo I finally figured out how to export as a DLL plugin (took me a while to realise that scripts in Unity don\u0027t get exported with the .mu (obvious, really. Duh!), got GUI buttons working, finally managed to access the WheelCollider properties in code, and have something semi functional. Now I\u0027m kinda stuck and would really, really appreciate help from those with a little more experience.\u003C/p\u003E\u003Cp\u003ESo, here it is:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/Lo-FiOrbitalScience/KSPWheelPack\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Lo-FiOrbitalScience/KSPWheelPack\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe wheel is semi-finished, mostly untextured and by default set up for light vehicles. At the moment, I\u0027ve just implemented GUI buttons to increase and decrease the spring value but I\u0027d like to replace this with a slider. You\u0027ll notice that if you modify the value for one wheel, it prints the updated spring rate to the log. The status button also works, but simply prints what it\u0027s currently set to. This is all well and good, though I\u0027ve yet to figure out why it takes a few minutes to update in-game - no big deal for the moment. However! If you change another wheel, it continues to print with the value from the last wheel that was changed and this is where I\u0027m confused. I\u0027ve no doubt in my naivety I\u0027ve done something really silly in amongst all the class declarations and what-not that I\u0027m only just getting a grasp on. Apologies for the rough code, and I\u0027m sure there are better ways to go about it. Please do tell me! Hopefully I\u0027ve commented well enough. \u003C/p\u003E\u003Cp\u003EIf I can get this nailed, I\u0027ve got a few nice wheel designs to produce, along with adjustable suspension. Ultimately I want to produce a stability controller that will allow modification of spring values for the whole vehicle it\u0027s attached to, add anti-roll bars... hell, maybe even automatically fire RCS to stop the thing flipping over when the worst happens! I have a bunch of ideas to make rovers more usable, but all of that is a way off - I\u0027ve got some serious learning to do!\u003C/p\u003E\u003Cp\u003EAny pointers would be very gratefully received \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_huh.gif\u0022 alt=\u0022:confused:\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-06-03T17:59:31Z","Content":"\n\u003Cp\u003EYou have some code that looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EthiswheelCollider = GameObject.Find(\u0022wheelCollider\u0022);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis will find ANY GameObject named \u0022wheelCollider\u0022 in the scene. If there is more than one with the same name, you can see how there might be trouble. Every instance of your PartModule is (I assume, I don\u0027t know how Unity searches internally) finding the exact same wheelCollider and printing its values.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/81840-Accessing-the-WheelCollider-of-a-rover-wheel\u0022 rel=\u0022external nofollow\u0022\u003EThis thread from yesterday\u003C/a\u003E will probably be helpful to you.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T19:34:26Z","Content":"\n\u003Cp\u003EThank you! Missed that, looks like someone has trodden this path already.\u003C/p\u003E\u003Cp\u003EI was wondering how it\u0027s scoped - makes sense. I\u0027d assumed it would only apply within the object selected.\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-03T20:54:44Z","Content":"\n\u003Cp\u003EIf you\u0027re calling GameObject.Find(...), then you\u0027re calling a static method, and that method doesn\u0027t know anything about the part you\u0027re looking at. For a method to have \u0022scope\u0022 in the sense that you\u0027re using the term, then you need to call a method that\u0027s on that object, or call a method that takes the object you\u0027re looking at as a parameter.\u003C/p\u003E\u003Cp\u003EPerhaps you mean to be working with this.part? That\u0027s the part that the module you\u0027re writing is attached to at runtime.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T21:04:12Z","Content":"\n\u003Cp\u003EAh, that makes a lot of sense when you put it like that. Cheers, gives me a few more avenues to explore. Then I\u0027ll need to take a step back, figure out how to find all the wheelCollider objects on the active craft, rather than the entire scene.\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-03T21:12:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E...figure out how to find all the wheelCollider objects on the active craft, rather than the entire scene.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u0022this.part.vessel\u0022 gives you access to the active craft.\u003C/p\u003E\u003Cp\u003ESpecifically, it gives you access to the vessel that the part is attached to, where \u0022the part\u0022 is the part that your module code is attached to.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T21:26:04Z","Content":"\n\u003Cp\u003EPerfect, this is exactly the kind of thing I need \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EFuriously coding now, I\u0027ll keep posting to GIT.\u003C/p\u003E\u003Cp\u003EDo you mind if I ask where you get your info from? I found it very hard to find much, other than the Unity docs.\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-03T21:30:18Z","Content":"\n\u003Cp\u003EI\u0027ve mostly been reading \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Community_API_Documentation\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Community_API_Documentation\u003C/a\u003E, which is linked from the wiki\u0027s main page. Other than that, I\u0027ve been looking at the source code for other plugins. It\u0027s just plain difficult to find any good information.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T21:39:29Z","Content":"\n\u003Cp\u003EGlad it\u0027s not just me! Actually, what got me going with the KSPField thing to make GUI buttons was having a nose through the mass driver source code \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I\u0027m currently looking at the UI_FloatRange from someone else\u0027s code as well.\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-03T21:43:50Z","Content":"\n\u003Cp\u003EOh yeah, it\u0027s definitely not you! I figured out the KSPField annotations from the interstellar mod, and I\u0027m still having some trouble with them...\u003C/p\u003E\u003Cp\u003EHah! Looking again at your and interstellar\u0027s code, I figured out the problem: the fields which are annotated with [KSPField] MUST be public fields. This is so that the game can access and set them for you.\u003C/p\u003E\u003Cp\u003ESo, where I have:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPField(isPersistant = false)] float Efficiency = 0.8f;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eit should actually be \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPField(isPersistant = false)] public float Efficiency = 0.8f;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-03T21:47:17Z","Content":"\n\u003Cp\u003EAhhhh, well spotted! They\u0027re private by default is C#. That actually explains a lot if the implications are what I think they are. Cheers, this is really productive!\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-04T01:16:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EYou can also look for the component(s) directly, being careful around cases where more than one might exist of course:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evar wc = part.FindModelComponent\u0026lt;WheelCollider\u0026gt;();\u003Cbr\u003Evar wc2 = part.gameObject.GetComponentInChildren\u0026lt;WheelCollider\u0026gt;();\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis got it working like a charm in the VAB! Even saves the tweaks. \u003C/p\u003E\u003Cp\u003EStill have some delayed update issues in-game. Not actually a big deal, just interested to know what\u0027s going on.\u003C/p\u003E\u003Cp\u003ELatest source, for future ref is here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/Lo-FiOrbitalScience/KSPWheelPack\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Lo-FiOrbitalScience/KSPWheelPack\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAdding other attributes of the WheelCollider as tweakable is now trivial should the need arise. However, on to more interesting things like an anti-roll mechanism!\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-04T17:18:24Z","Content":"\n\u003Cp\u003EI think this is super cool. Would you be open to adding traction and stability control? I think it would be a lot of fun if each wheel could individually adjust its power to avoid slipping (launch control?), or at least have an anti-lock braking system \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E If you\u0027re open to that, I\u0027d be happy to write some of the code! I think it would make sense to allow the user to enable / disable these systems.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-04T19:34:38Z","Content":"\n\u003Cp\u003ECheers! Now it\u0027s actually working I\u0027ll start a proper WIP release thread.\u003C/p\u003E\u003Cp\u003EHell yes! I have a few things on my list:\u003C/p\u003E\u003Cp\u003E1) Make the plugin an extension to ModuleWheel. This will mean it applies to all wheels by default, rather than having to .cfg edit the custom module name in to call the plugin. I think this can be done with an override, though I\u0027m not sure.\u003C/p\u003E\u003Cp\u003E2) Stability control. Yep, absolutely. There is example code in the Unity docs, so it\u0027s a case of getting the code to find all wheels on a craft, pair them up by looking at their position and applying it appropriately. Another tweakable here.\u003C/p\u003E\u003Cp\u003E3) Traction control could be quite cool. Have to look into how to interrogate whether a wheel is slipping, but there is some example code around for modifying torque I think.\u003C/p\u003E\u003Cp\u003E4) Anti-flip. Would be seriously cool be be able to fire RCS and use SAS appropriately if more than half the wheels come off the ground. Need to be really careful as this could lead to some stability problems at high speed in itself!\u003C/p\u003E\u003Cp\u003E5) There is NOOOOOO rule five\u003C/p\u003E\u003Cp\u003E6) Definitely tweakable buttons for all of this, though attachable to action groups.\u003C/p\u003E\u003Cp\u003E7) This is a hard one. Smooth out the wheels steering. Does my head in the way they just flip left to right instantaneously. The example car games implement it so much better (and again, working code examples)! Also, make wheels steer in proportion to how far they are from the center of the vehicle.\u003C/p\u003E\u003Cp\u003EBe great if you\u0027re up for it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-04T20:12:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003E3) Traction control could be quite cool. Have to look into how to interrogate whether a wheel is slipping, but there is some example code around for modifying torque I think.\u003C/span\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think you may be able to look at wheel.forwardFriction, and looking at the WheelFrictionCurve to determine where on the curve the current friction lies. Then, you are effectively determining \u0022is slipping\u0022, and could reduce torque on that wheel accordingly.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E4) Anti-flip. Would be seriously cool be be able to fire RCS and use SAS appropriately if more than half the wheels come off the ground. Need to be really careful as this could lead to some stability problems at high speed in itself!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m curious if it\u0027s possible to apply steering to align the vessel with the surface normal and direction of travel (align the vessel to be \u0022flat\u0022 on the ground and pointing in the direction of travel). That would help a lot for those times when you do a jump off a ridge.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-04T20:28:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PeterDolan\u0022 data-cite=\u0022PeterDolan\u0022\u003E\u003Cdiv\u003EI think you may be able to look at wheel.forwardFriction, and looking at the WheelFrictionCurve to determine where on the curve the current friction lies. Then, you are effectively determining \u0022is slipping\u0022, and could reduce torque on that wheel accordingly.\u003Cp\u003EThat\u0027ll do it.\u003C/p\u003E\u003Cp\u003EI\u0027m curious if it\u0027s possible to apply steering to align the vessel with the surface normal and direction of travel (align the vessel to be \u0022flat\u0022 on the ground and pointing in the direction of travel). That would help a lot for those times when you do a jump off a ridge.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmmm, that\u0027s an interesting point. You can use raycasters to judge distance I believe - this is essentially how the wheelcollider functions. (I\u0027ve clearly read too many Unity docs!)\u003C/p\u003E\u003Cp\u003EThe method would be something like: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EInit\u003Cbr\u003E{\u003Cbr\u003EFind the length of the vessel\u003Cbr\u003ECreate a raycaster at each end\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003EUpdate\u003Cbr\u003E{\u003Cbr\u003EMonitor wheels to check if they are all off the ground. //wheel.hit, I believe.\u003Cbr\u003EIf so, apply available RCS and SAS to rotate the vehicle so the raycaster values match. //This is probably the hardest part to code if you\u0027re going to prevent oscillations and over-correction!!\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDirection of travel must be accessible as a vector somewhere, I\u0027m sure. Check in the correct plane, correct accordingly. Looks like a whole heap of fun!\u003C/p\u003E\n"},{"CreatedByName":"PeterDolan","CreatedById":112024,"CreatedDateTime":"2014-06-04T21:36:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E1) Make the plugin an extension to ModuleWheel. This will mean it applies to all wheels by default, rather than having to .cfg edit the custom module name in to call the plugin. I think this can be done with an override, though I\u0027m not sure.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn reading another thread, I found the solution to this: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/79603-0-2-35-CELSS-Greenhouse-%28TAC-Life-Support-Add-On-Version-0-1-beta%29?p=1154288\u0026amp;viewfull=1#post1154288\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/79603-0-2-35-CELSS-Greenhouse-%28TAC-Life-Support-Add-On-Version-0-1-beta%29?p=1154288\u0026amp;viewfull=1#post1154288\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EUsing module manager, you can add modules to existing parts. In that thread, look at the [spoiler: Config]\u003C/p\u003E\n"},{"CreatedByName":"ThermalShark","CreatedById":97607,"CreatedDateTime":"2014-06-06T19:49:34Z","Content":"\n\u003Cp\u003EHey, you definitely want to check out \u003Ca href=\u0022http://forum.unity3d.com/threads/how-to-make-a-physically-real-stable-car-with-wheelcolliders.50643/\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003Ethis\u003C/strong\u003E\u003C/a\u003E thread in the Unity forums. It is common for people making cars in Unity to find that they are really unstable, flipping even at pretty low speeds. Traditionally, they use very unrealistic workarounds, like making the center of mass at (or below!) the floor of the vehicle, exaggerated aerodynamic downforce, and even applying torque directly to the car to assist in turning. That thread shows how to make a realistically stable car in Unity, but the information is very useful in KSP too. It says that the unstability is mainly because of 2 things:\u003C/p\u003E\u003Cp\u003E- The default friction values for WheelColliders in Unity is infinite in practice: The maximal force is \u003Cstrong\u003E20 KN\u003C/strong\u003E! That is half the thrust of an engine of \u003Ca href=\u0022https://upload.wikimedia.org/wikipedia/commons/1/1a/A10Thunderbolt2_990422-F-7910D-517.jpg\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003Ethis\u003C/strong\u003E\u003C/a\u003E airplane! The stock black wheel has those same values, but the yellow ones don\u0027t.\u003C/p\u003E\u003Cp\u003E- No anti-roll bars. They are absolutely essential for a (non-arcade) vehicle, and that is why KSP vehicles flip so easily even at low speeds. I suggest you implement it before stability control, as it is easier and more useful. The Unity thread i linked shows how to code it, applying forces in the car to simulate the anti-roll bars (as WheelColliders don\u0027t support them).\u003C/p\u003E\u003Cp\u003EBut you need to know how much the suspension is currently compressed, and there is not a variable in WheelCollider for you to simply read. The thread in the Unity forums shows how to know that, but there is no explanation, so it is unintuitive for someone without experience with Unity API. I will explain it here:\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EFirst note that the wheel transform position is not affected by suspension, the virtual wheel does all the movement. Actually i think the transform \u003C/em\u003E\u003Cstrong\u003E\u003Cem\u003Edoes\u003C/em\u003E\u003C/strong\u003E\u003Cem\u003E rotate for steering in KSP, but that is unrelated.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EGetGroundHit().point gives you the position of the point of contact with the ground. So, you can see the distance from it and the wheel transform, that way getting the current suspension travel.\u003C/p\u003E\u003Cp\u003EThe problem is that GetGroundhit.point is in world coordinates, not local. Fortunately there is a function that you can call on a transform, that inputs a world coordinate point and outputs the same point but in local space of the transform. That function is \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Transform.InverseTransformPoint.html\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EInverseTransformPoint(\u003C/strong\u003EVector3 position\u003Cstrong\u003E)\u003C/strong\u003E\u003C/a\u003E. Call it on the transform of wheel, using GetGroundHit().point as input, and it will return the point of contact with the ground, in local space (lets call that \u0022hitPoint\u0022). Then, since the origin of the coordinate system (the \u0027point zero\u0027) will be right at the wheel transform, you just see the y of hitPoint to know the distance from the wheel transform. But this value will be negative, so you invert the signal:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E-hitPoint.y //The current suspension travel, in meters\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHowever, this is the distance from the wheel \u003Cem\u003Ecenter\u003C/em\u003E in fully compressed state, to the wheel \u003Cem\u003Ebottom\u003C/em\u003E in fully extended state. You need to subtract the wheel radius for it to be correct:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E-hitPoint.y - myWheel.radius //This is the current suspension travel distance, in meters\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFinally, to get a 0-1 value representing how much the suspension is compressed:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E(-hitPoint.y - myWheel.radius) / myWheel.suspensionDistance //0 is fully compressed and 1 is fully extended\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ERemember that \u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EhitPoint = myWheel.transform.InverseTransformPoint(myWheel.GetGroundHit().point)\u003C/span\u003E\u003C/strong\u003E .\u003C/p\u003E\u003Cp\u003EFor the rest, check the thread.\u003C/p\u003E\u003Cp\u003EAs an unrelated note, did you notice that the spring force of the stock wheels is impressively low (just a few newtons)? I think this means there is no suspension in practice, making the roll problem even worse. I am going to make some tests to see if that is actually true.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-08T11:29:42Z","Content":"\n\u003Cp\u003EYou legend! That thread is an absolute gem, isn\u0027t it.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ThermalShark\u0022 data-cite=\u0022ThermalShark\u0022\u003E\u003Cdiv\u003EHey, you definitely want to check out \u003Ca href=\u0022http://forum.unity3d.com/threads/how-to-make-a-physically-real-stable-car-with-wheelcolliders.50643/\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003Ethis\u003C/strong\u003E\u003C/a\u003E thread in the Unity forums. It is common for people making cars in Unity to find that they are really unstable, flipping even at pretty low speeds. Traditionally, they use very unrealistic workarounds, like making the center of mass at (or below!) the floor of the vehicle, exaggerated aerodynamic downforce, and even applying torque directly to the car to assist in turning. That thread shows how to make a realistically stable car in Unity, but the information is very useful in KSP too. It says that the unstability is mainly because of 2 things:\u003Cp\u003E- The default friction values for WheelColliders in Unity is infinite in practice: The maximal force is \u003Cstrong\u003E20 KN\u003C/strong\u003E! That is half the thrust of an engine of \u003Ca href=\u0022https://upload.wikimedia.org/wikipedia/commons/1/1a/A10Thunderbolt2_990422-F-7910D-517.jpg\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003Ethis\u003C/strong\u003E\u003C/a\u003E airplane! The stock black wheel has those same values, but the yellow ones don\u0027t.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe defaults are crazy, aren\u0027t they. Took me a while messing around to get something that works well.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E- No anti-roll bars. They are absolutely essential for a (non-arcade) vehicle, and that is why KSP vehicles flip so easily even at low speeds. I suggest you implement it before stability control, as it is easier and more useful. The Unity thread i linked shows how to code it, applying forces in the car to simulate the anti-roll bars (as WheelColliders don\u0027t support them).\u003C/p\u003E\u003Cp\u003Edon\u0027t.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETop of my list to implement! \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EBut you need to know how much the suspension is currently compressed, and there is not a variable in WheelCollider for you to simply read. The thread in the Unity forums shows how to know that, but there is no explanation, so it is unintuitive for someone without experience with Unity API. I will explain it here:\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EFirst note that the wheel transform position is not affected by suspension, the virtual wheel does all the movement. Actually i think the transform \u003C/em\u003E\u003Cstrong\u003E\u003Cem\u003Edoes\u003C/em\u003E\u003C/strong\u003E\u003Cem\u003E rotate for steering in KSP, but that is unrelated.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EGetGroundHit().point gives you the position of the point of contact with the ground. So, you can see the distance from it and the wheel transform, that way getting the current suspension travel.\u003C/p\u003E\u003Cp\u003EThe problem is that GetGroundhit.point is in world coordinates, not local. Fortunately there is a function that you can call on a transform, that inputs a world coordinate point and outputs the same point but in local space of the transform. That function is \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Transform.InverseTransformPoint.html\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EInverseTransformPoint(\u003C/strong\u003EVector3 position\u003Cstrong\u003E)\u003C/strong\u003E\u003C/a\u003E. Call it on the transform of wheel, using GetGroundHit().point as input, and it will return the point of contact with the ground, in local space (lets call that \u0022hitPoint\u0022). Then, since the origin of the coordinate system (the \u0027point zero\u0027) will be right at the wheel transform, you just see the y of hitPoint to know the distance from the wheel transform. But this value will be negative, so you invert the signal:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E-hitPoint.y //The current suspension travel, in meters\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHowever, this is the distance from the wheel \u003Cem\u003Ecenter\u003C/em\u003E in fully compressed state, to the wheel \u003Cem\u003Ebottom\u003C/em\u003E in fully extended state. You need to subtract the wheel radius for it to be correct:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E-hitPoint.y - myWheel.radius //This is the current suspension travel distance, in meters\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFinally, to get a 0-1 value representing how much the suspension is compressed:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E(-hitPoint.y - myWheel.radius) / myWheel.suspensionDistance //0 is fully compressed and 1 is fully extended\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ERemember that \u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EhitPoint = myWheel.transform.InverseTransformPoint(myWheel.GetGroundHit().point)\u003C/span\u003E\u003C/strong\u003E .\u003C/p\u003E\u003Cp\u003Edon\u0027t.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s seriously helpful. The part I\u0027m stuck on is how to scan the vessel for wheels, assign them each a unique identifier and pair them up based on their position in the Z plane and \u002B/- value in the X plane. I also want to use this info to implement steering based on how far the wheels are between the foremost or rearmost set of wheels from the CoM so they will steer an appropriate amount on vehicles with more than two sets of wheels. Getting this info set up seems to be the cornerstone of doing anything really useful. Which begs a sub question... is it better to have a part with the module assigned that does all thisrather than assigning the module to every wheel.? Call it a Rover Stability Module, a little like the MechJeb AR202.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFor the rest, check the thread.\u003C/p\u003E\u003Cp\u003EAs an unrelated note, did you notice that the spring force of the stock wheels is impressively low (just a few newtons)? I think this means there is no suspension in practice, making the roll problem even worse. I am going to make some tests to see if that is actually true.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, that puzzled me. Though real springs are usually rated in kg/mm deflection (I\u0027ve worked in motorsport on and off) and nowhere in the docs can I find what the Unity rate actually represents. In practice, usable values do seems very, very low.\u003C/p\u003E\u003Cp\u003EThanks for the pointers, be happy to add you to the GitHub project?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-08T12:08:40Z\u0022 title=\u002206/08/2014 12:08  PM\u0022 data-short=\u002210 yr\u0022\u003EJune 8, 2014\u003C/time\u003E by lo-fi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-08T11:31:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PeterDolan\u0022 data-cite=\u0022PeterDolan\u0022\u003E\u003Cdiv\u003EIn reading another thread, I found the solution to this: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/79603-0-2-35-CELSS-Greenhouse-%28TAC-Life-Support-Add-On-Version-0-1-beta%29?p=1154288\u0026amp;viewfull=1#post1154288\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/79603-0-2-35-CELSS-Greenhouse-%28TAC-Life-Support-Add-On-Version-0-1-beta%29?p=1154288\u0026amp;viewfull=1#post1154288\u003C/a\u003E\u003Cp\u003EUsing module manager, you can add modules to existing parts. In that thread, look at the [spoiler: Config]\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks, that might come in rather handy\u003C/p\u003E\n"},{"CreatedByName":"ThermalShark","CreatedById":97607,"CreatedDateTime":"2014-06-09T01:42:59Z","Content":"\n\u003Cp\u003E\u0022add you to the GitHub project\u0022? You mean in the credits?\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-09T07:11:44Z","Content":"\n\u003Cp\u003EWell yes, but more so you can jump in and contribute if you feel like it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EBy the way, do you want a custom model for your engine mod? If you\u0027ve got any ideas how you\u0027d like it to look I\u0027d be happy to knock something up when I have a few minutes free\u003C/p\u003E\n"},{"CreatedByName":"ThermalShark","CreatedById":97607,"CreatedDateTime":"2014-06-09T19:32:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003EWell yes, but more so you can jump in and contribute if you feel like it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. I made a GitHub \u003Ca href=\u0022https://github.com/ThermalShark\u0022 rel=\u0022external nofollow\u0022\u003Eaccount\u003C/a\u003E to post my mods, but when i saw all that stuff about git, i decided to put them on Dropbox, as i was just looking for a place for others to download it.\u003C/p\u003E\u003Cp\u003EAny progress on fixing the delay bug? Or just finding out why it happens? It makes no sense to me. Have you tested if it happens with other variables, like wheel radius?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003EBy the way, do you want a custom model for your engine mod? If you\u0027ve got any ideas how you\u0027d like it to look I\u0027d be happy to knock something up when I have a few minutes free\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat would be nice, considering that the only thing i know to do is primitive shapes and retextures of stock models. But right now i just want to have fun \u003Cem\u003Eplaying\u003C/em\u003E KSP, as since 23.5 came out, i have not touched an asteroid yet, not even the ARM parts, so i decided to capture one that is on a escape trajectory on Kerbin and make a construction and refueling base on it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-09T19:35:14Z\u0022 title=\u002206/09/2014 07:35  PM\u0022 data-short=\u002210 yr\u0022\u003EJune 9, 2014\u003C/time\u003E by ThermalShark\u003C/strong\u003E\n\u003Cbr\u003ELink\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-09T19:45:45Z","Content":"\n\u003Cp\u003ECool, what\u0027s your GitHub handle?\u003C/p\u003E\u003Cp\u003ENo, not really looked into the delay bug, still thinking on it. Noticed something about how the tweaked value is saved in the save file, but not taken it any further yet. Just have a feeling it\u0027s going to be a tricky one :/ All works perfectly when you set in the VAB/SPH and I\u0027ve not tried messing with other properties. Next thing is to add some code to modify the damper as a proportion of the spring value as I\u0027ve found the damper wants to be spring / 7.5 for nice behaviour. I\u0027ll compile a test version of the DLL for you to enable in-flight tweaks so you can see for yourself. Be interested to see what you make of my wheels as well.\u003C/p\u003E\u003Cp\u003EI know what you mean about not getting to play the game! I only got round to getting to an asteroid so I could see what it looked like when I replaced the asteroid model with a kraken I knocked up \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E Just thought it would be a laugh, then it got me looking at other stuff and I haven\u0027t stopped messing about with modding stuff since... Damn that kraken. Cool idea about the refuelling base.\u003C/p\u003E\n"}]}