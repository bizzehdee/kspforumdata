{"TopicId":91299,"ForumId":35,"TopicTitle":"[API] Open Node Parser","CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-11-26T11:38:09Z","PageNum":1,"Articles":[{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-11-26T11:38:09Z","Content":"\n\u003Cp\u003EOpen Node Parser is a small utility class that can parse .cfg files and return a ConfigNode object. The advantage is that ConfigNode.Load() can only be called from assemblies that are running inside KSP, while this parser can be used in any application.\u003C/p\u003E\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Ippo343/OpenNodeParser/blob/master/OpenNodeParser/Parser.cs\u0022 rel=\u0022external nofollow\u0022\u003Esource code is on github\u003C/a\u003E. To use it, just include that file I linked in your project.\u003C/p\u003E\u003Cp\u003ELicense is \u003Ca href=\u0022https://github.com/Ippo343/OpenNodeParser/blob/master/license.md\u0022 rel=\u0022external nofollow\u0022\u003ECC-0\u003C/a\u003E, which basically means \u0022do whatever you want\u0022.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-11-27T04:08:24Z","Content":"\n\u003Cp\u003EThat sounds great!\u003C/p\u003E\u003Cp\u003EYou know, it\u0027d be pretty awesome to hook this up to MM, so one did not have to load KSP to see the changes MM does to nodes...\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-11-27T09:59:48Z","Content":"\n\u003Cp\u003EUhm... I think the hard part would be to run MM actually \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThere are a lot of other \u0022forbidden\u0022 methods, and one of them is Debug.Log. If MM calls it, you crash (and I\u0027m not even gonna check, I\u0027m *sure* it\u0027s called somewhere).\u003C/p\u003E\n"},{"CreatedByName":"taio","CreatedById":131170,"CreatedDateTime":"2014-12-19T06:15:56Z","Content":"\n\u003Cp\u003EFound a logic bug. The parser assumes cfgs have a strict format that (for example) MechJeb\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s \u003Ca href=\u0022https://github.com/MuMech/MechJeb2/blob/master/Parts/MechJeb2_AR202/part.cfg\u0022 rel=\u0022external nofollow\u0022\u003EMechJeb2_AR202/part.cfg\u003C/a\u003E does not conform to. That file has four top\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u02DClevel nodes, where your parser assumes one. Also, where your parser assumes braces are always on their own lines, that file has several child nodes on one line, e.g.: \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMechJebModuleCustomWindowEditor { unlockTechs = flightControl }\u003C/pre\u003E\u003Cp\u003E There are other mod parts that don\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t have braces on their own lines, though I haven\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t noticed any that had \u0026gt; 1 top\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u02DClevel node.\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-12-19T06:23:39Z","Content":"\n\u003Cp\u003ENot a bug then, just very limited behaviour \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI think it\u0027s an easy fix, I might give it a shot tonight.\u003C/p\u003E\n"},{"CreatedByName":"taio","CreatedById":131170,"CreatedDateTime":"2014-12-19T12:32:48Z","Content":"\n\u003Cp\u003EI\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2ve been writing my own in Julia for another project, so here\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s another format issue you\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2ll run into: apparently, leaving off a \u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u201C}\u00C3\u00A2\u00E2\u201A\u00AC\u00C2 at the end of the document (i.e. leaving the last top\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u02DClevel node unclosed) is tolerated. And a bunch of the stock cfgs do this. Sigh\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-12-19T13:00:38Z","Content":"\n\u003Cp\u003EDammit squad -.-\u003C/p\u003E\n"},{"CreatedByName":"taio","CreatedById":131170,"CreatedDateTime":"2014-12-19T15:08:53Z","Content":"\n\u003Cp\u003ELOL Squad\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6 Ran into something else I thought I\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2d share. Some of the cfgs are in a bizarre encoding. Wrote this Python script to investigate (after removing all mod files):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eimport chardet\u003Cbr\u003Eimport fnmatch\u003Cbr\u003Eimport os\u003Cbr\u003Efrom collections import Counter\u003Cbr\u003E\u003Cbr\u003Epath = \u0027C:/Program Files (x86)/Steam/SteamApps/common/Kerbal Space Program/GameData/\u0027\u003Cbr\u003Eresult = {}\u003Cbr\u003Ec = Counter()\u003Cbr\u003Efor root, dirnames, filenames in os.walk(path):\u003Cbr\u003E    for filename in fnmatch.filter(filenames, \u0027*.cfg\u0027):\u003Cbr\u003E        filepath = os.path.join(root, filename)\u003Cbr\u003E        x = chardet.detect(open(filepath, \u0022rb\u0022).read())\u003Cbr\u003E        result[filepath] = (x[\u0027encoding\u0027], x[\u0027confidence\u0027])\u003Cbr\u003E        c[result[filepath]] \u002B= 1\u003Cbr\u003Eprint(c) # frequency table\u003Cbr\u003Ebad = []\u003Cbr\u003E# find all non-ascii characters by file, row, and column\u003Cbr\u003Efor (k, v) in result.items():\u003Cbr\u003E    if v != (\u0027ascii\u0027, 1.0):\u003Cbr\u003E        bad.append(k)\u003Cbr\u003E        print(k[76:], v) # strip beginning of path\u003Cbr\u003Efor file in bad:\u003Cbr\u003E    print(file[76:])\u003Cbr\u003E    for col, line in enumerate(open(file, encoding=\u0027utf-8\u0027)):\u003Cbr\u003E        for row, ch in enumerate(line):\u003Cbr\u003E            if ord(ch) \u0026gt;= 128:\u003Cbr\u003E                print(\u0027\\t[{0}:{1}] {2} ({3:4x})\u0027.format(row, col, ch, ord(ch)))\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt gives this output:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ECounter({(\u0027ascii\u0027, 1.0): 266, (\u0027UTF-8-SIG\u0027, 1.0): 6, (\u0027ISO-8859-2\u0027, 0.8515969760557984): 1})\u003Cbr\u003ESquad\\Parts\\Utility\\ladderTelescopic\\ladderTelescopic.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Parts\\Utility\\ladderRadial\\ladderRadial.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Parts\\Command\\advancedSasModuleLarge\\advSasModuleLarge.cfg (\u0027ISO-8859-2\u0027, 0.8515969760557984)\u003Cbr\u003ESquad\\Parts\\Utility\\ladderTelescopicBay\\ladderTelescopicBay.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Parts\\Science\\GooExperiment\\gooExperiment.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Resources\\ScienceDefs.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Parts\\Utility\\commsAntennaDTS-M1\\commsAntennaDTS-M1.cfg (\u0027UTF-8-SIG\u0027, 1.0)\u003Cbr\u003ESquad\\Parts\\Utility\\ladderTelescopic\\ladderTelescopic.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003ESquad\\Parts\\Utility\\ladderRadial\\ladderRadial.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003ESquad\\Parts\\Command\\advancedSasModuleLarge\\advSasModuleLarge.cfg\u003Cbr\u003E    [261:41] \u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00A2 (2122)\u003Cbr\u003ESquad\\Parts\\Utility\\ladderTelescopicBay\\ladderTelescopicBay.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003ESquad\\Parts\\Science\\GooExperiment\\gooExperiment.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003E    [19:16] \u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00A2 (2122)\u003Cbr\u003ESquad\\Resources\\ScienceDefs.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003E    [20:237] \u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00A2 (2122)\u003Cbr\u003ESquad\\Parts\\Utility\\commsAntennaDTS-M1\\commsAntennaDTS-M1.cfg\u003Cbr\u003E    [0:0] \u00C3\u00AF\u00C2\u00BB\u00C2\u00BF (feff)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe number after the encoding is a certainty that ranges from 0 to 1. All the files are ASCII, except that six start with the byte\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u02DCorder marker U\u002BFEFF. In other words, they are encoded in utf-8-sig, which is idiotic. The detection code thinks one additional file is in Latin-2, but it\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s wrong (well, it\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s right, but it\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s also UTF-8); the only non-ASCII character besides U\u002BFEFF in these files is the trademark symbol, which is perfectly fine UTF-8.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003ETL;DR\u003C/span\u003E\u003C/strong\u003E: When you open one of the six utf-8-sig files, you will probably need to strip the first character, or your parsing code will probably reject it. I just added the line \u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003Estr = strip(str, \u0027\\ufeff\u0027)\u003C/span\u003E just after reading the file into a string, which covers all cases. Once you do that, the rest of the file/string is UTF-8.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-19T15:19:18Z\u0022 title=\u002212/19/2014 03:19  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 19, 2014\u003C/time\u003E by taio\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"taio","CreatedById":131170,"CreatedDateTime":"2014-12-19T20:33:53Z","Content":"\n\u003Cp\u003ELet me know if you\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2d like to take a look at my code; I\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2ve got it working now. Julia is similar to Python. Though it only parses the nodes into an internal representation, and not a ConfigNode object, you might still find it helpful.\u003C/p\u003E\n"}]}