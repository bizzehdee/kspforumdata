{"TopicId":108806,"ForumId":44,"TopicTitle":"Missing physics component? My simulation results are off. [0.90]","CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-11T19:23:17Z","PageNum":1,"Articles":[{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-11T19:23:17Z","Content":"\n\u003Cp\u003ETo help me build better ships, I programmed a numerical simulator in Mathematica that allows me to input the attributes of the ship\u0027s stages and output how far it can go. This was back in the \u0026lt;=0.90 era, I haven\u0027t moved to 1.x yet.\u003C/p\u003E\u003Cp\u003EI\u0027ve included in it pretty much everything I could think of (including some not-completely-trivial aspects of the rotating reference frame), but the results are still a bit off compared to what I see in-game. With simple rockets that stay within the atmosphere or briefly exit it, the highest altitude reached is about 1% different from simulation. Not something that would materially affect ship design, but not good enough for a perfectionist like me.\u003C/p\u003E\u003Cp\u003EThis has been driving me crazy and I\u0027ve spent several hours trying to isolate the problem. I\u0027ve recently collected some data from a rocket in flight (after the thrust phase, to keep it simple), applied locally cubic regression with a Gaussian kernel, and investigated the result.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E(Edit:\u003C/strong\u003E The following example, it appears, is merely an artifact of incorrect altitude values reported by the game. But, there is still something I can\u0027t account for, which is apparent in longer flights (about 1% difference at 10km).)\u003C/p\u003E\u003Cp\u003EFor example, I concluded that when my rocket was at 2000m and moving upwards (the direction shouldn\u0027t differ materially from straight up, and anyway, I calculated that a slight deviation wouldn\u0027t explain the discrepancy) at a speed of 252.1 m/s, the acceleration in-game is -47.77 m/s^2.\u003C/p\u003E\u003Cp\u003EWhat I would expect:\u003C/p\u003E\u003Cp\u003EGravity: -9.81 * (600000/602000)^2 = -9.745\u003C/p\u003E\u003Cp\u003ECentrifugal force: (2pi/21600)^2 * 600000 = 0.051\u003C/p\u003E\u003Cp\u003EDrag: -0.5 * 0.008 * 1.2231 * 0.2 * Exp(-2000/5000) * 252.1^2 = -41.685\u003C/p\u003E\u003Cp\u003ETotal: -51.38 m/s^2\u003C/p\u003E\u003Cp\u003ESo my deceleration in-game is 3.6 m/s^2 lower that what my math says.\u003C/p\u003E\u003Cp\u003EI experimented with a lift force proportional to speed, and it does seem to help a bit, but I still don\u0027t get consistent results, and I don\u0027t understand why there should be such a force - the parts I\u0027ve used don\u0027t have a lift rating AFAICT.\u003C/p\u003E\u003Cp\u003EAnd yeah, I know 0.90 aerodynamics aren\u0027t realistic, but I\u0027m not looking for realistic, I\u0027m looking for internally consistent.\u003C/p\u003E\u003Cp\u003ECould someone please put me out of my misery and explain what is going on?\u003C/p\u003E\u003Cp\u003EThanks.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-13T19:54:59Z\u0022 title=\u002205/13/2015 07:54  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 13, 2015\u003C/time\u003E by Holy-Fire\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Hobbes Novakoff","CreatedById":129018,"CreatedDateTime":"2015-05-12T05:49:26Z","Content":"\n\u003Cp\u003EI don\u0027t know, but it\u0027s probably floating-point errors in KSP that are causing your imbalance.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EEither that or just messed-up pre-1.0 aerodynamics.\u003C/p\u003E\n"},{"CreatedByName":"ElWanderer","CreatedById":114015,"CreatedDateTime":"2015-05-12T06:43:49Z","Content":"\n\u003Cp\u003EDoes your craft consist entirely of parts with a drag coefficient of 0.2, or do you have some less draggy parts?\u003C/p\u003E\u003Cp\u003EI remember I could never get my 0.90 height record simulations to match reality (worse performance/more drag than I predicted) until I realised SRBs had a drag coefficient of 0.3.\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-12T08:48:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hobbes Novakoff\u0022 data-cite=\u0022Hobbes Novakoff\u0022\u003E\u003Cdiv\u003EI don\u0027t know, but it\u0027s probably floating-point errors in KSP that are causing your imbalance.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI doubt it. It\u0027s too big of an error. And it\u0027s not just something that accumulates over a long time, I can detect differences in short timescales as well.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hobbes Novakoff\u0022 data-cite=\u0022Hobbes Novakoff\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEither that or just messed-up pre-1.0 aerodynamics.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe... But how exactly are they messed up? What\u0027s missing compared to the calculation above?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ElWanderer\u0022 data-cite=\u0022ElWanderer\u0022\u003E\u003Cdiv\u003EDoes your craft consist entirely of parts with a drag coefficient of 0.2, or do you have some less draggy parts?\u003Cp\u003EI remember I could never get my 0.90 height record simulations to match reality (worse performance/more drag than I predicted) until I realised SRBs had a drag coefficient of 0.3.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes. In this example I just have 3 parts - Probodobodyne HECS, Oscar-B Fuel Tank, Rockomax 48-7S. Of course, this happens also with other simple liquid-only configurations.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-12T15:07:10Z\u0022 title=\u002205/12/2015 03:07  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 12, 2015\u003C/time\u003E by Holy-Fire\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Korizan","CreatedById":142032,"CreatedDateTime":"2015-05-12T12:33:30Z","Content":"\n\u003Cp\u003EDrag is not a constant, it will vary based on altitude. Apparently in .9 and below the atmosphere was kind of messed up to make things work.\u003C/p\u003E\u003Cp\u003Eand / or the drag you are using is not the same number that KSP is using. (example drag of a single part is .2 but KSP is adding up all the parts and assigning a different drag coefficient for the rocket as a whole)\u003C/p\u003E\u003Cp\u003ESo the question is are your dependencies linear or are they variant based on altitude ?\u003C/p\u003E\u003Cp\u003EThat should help you narrow down the problem.\u003C/p\u003E\n"},{"CreatedByName":"ElWanderer","CreatedById":114015,"CreatedDateTime":"2015-05-12T13:06:33Z","Content":"\n\u003Cp\u003EFor what it\u0027s worth, I just opened my vertical launch calculator and fiddled with some values to get a velocity of about 252m/s at 2000m and I agree with your calculated/expected results for gravity and drag.\u003C/p\u003E\u003Cp\u003EHow accurate are your measured-in-flight values? If your prediction for max alt is only 1% off, I wouldn\u0027t expect observed drag to be ~10% away from your calculated value.\u003C/p\u003E\u003Cp\u003EI found my results for peak altitude were never quite right. I didn\u0027t take into account the rotation, which I always assumed was the culprit.\u003C/p\u003E\n"},{"CreatedByName":"KerikBalm","CreatedById":91917,"CreatedDateTime":"2015-05-12T13:19:05Z","Content":"\n\u003Cp\u003EI thought in KSP, for some reason, surface gravity was 9.82 m/s... though that is not going to account for more than 1% of the error.\u003C/p\u003E\u003Cp\u003E\u0022the direction shouldn\u0027t differ materially from straight up, and anyway, I calculated that a slight deviation wouldn\u0027t explain the discrepancy\u0022\u003C/p\u003E\u003Cp\u003EAre you sure? the rotation of Kerbin is quite significant at such a small scale. There was a thread about fins on rockets, and kerbin\u0027s rotation was enough that the rockets consistently tipped over into a westward gravity turn with no control input.\u003C/p\u003E\n"},{"CreatedByName":"hirschhornsalz","CreatedById":118991,"CreatedDateTime":"2015-05-12T13:25:53Z","Content":"\n\u003Cp\u003EYour centrifugal force seems to be a bit off, you are using the values at the ground. Assuming you are going straight up relative to the ground, it should be (2pi/21600)^2 * 602000, bit this is not enough to explain the difference.\u003C/p\u003E\u003Cp\u003EI agree that most likely either the drag displayed ingame is wrong or nor correctly calculated. But the 0.90 athmospheric model is now obsolete anyway, except you are planning for staying at 0.90 long term.\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-12T15:06:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Korizan\u0022 data-cite=\u0022Korizan\u0022\u003E\u003Cdiv\u003EDrag is not a constant, it will vary based on altitude. Apparently in .9 and below the atmosphere was kind of messed up to make things work.\u003Cp\u003Eand / or the drag you are using is not the same number that KSP is using. (example drag of a single part is .2 but KSP is adding up all the parts and assigning a different drag coefficient for the rocket as a whole)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, it seems weird that there would be such a difference. Any insights about how it could work?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Korizan\u0022 data-cite=\u0022Korizan\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESo the question is are your dependencies linear or are they variant based on altitude ?\u003C/p\u003E\u003Cp\u003EThat should help you narrow down the problem.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIdeally I would be able to collect enough data to determine the difference as a function of speed and height. But collecting data is too time-consuming for me. Which mods make it easier to collect such data?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ElWanderer\u0022 data-cite=\u0022ElWanderer\u0022\u003E\u003Cdiv\u003EHow accurate are your measured-in-flight values?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI mentioned a gap of 3.6 m/s^2; the inaccuracy is enough for that figure to actually be anywhere from 3 to 4 m/s^2, but I doubt it\u0027s outside this range. Even if only 3, it\u0027s very significant.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ElWanderer\u0022 data-cite=\u0022ElWanderer\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E If your prediction for max alt is only 1% off, I wouldn\u0027t expect observed drag to be ~10% away from your calculated value.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe exact difference in max alt varies; in this case, I predict 3339 m and reach 3404 m, so about 2%. Anyway, the difference of 10% persists only for a short period of time; as the speed goes down, gravity dominates, and seems to work as expected.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ElWanderer\u0022 data-cite=\u0022ElWanderer\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI found my results for peak altitude were never quite right. I didn\u0027t take into account the rotation, which I always assumed was the culprit.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI doubt it. Centrifugal force has only a small effect, and other rotation effects turned out to be negligible in my calculations, definitely at lower altitudes.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KerikBalm\u0022 data-cite=\u0022KerikBalm\u0022\u003E\u003Cdiv\u003EI thought in KSP, for some reason, surface gravity was 9.82 m/s... though that is not going to account for more than 1% of the error.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIsp is calculated based on g=9.82. But the actual g is 9.81 as far as I can tell. Hard to measure ground gravity directly with all the confounding factors, but measuring gravity in orbit confirms that at R=600000 it should be 9.81. I think this was also supported by my measurements of terminal velocity with a parachute, though maybe it wasn\u0027t accurate enough to be definite.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KerikBalm\u0022 data-cite=\u0022KerikBalm\u0022\u003E\u003Cdiv\u003E\u0022the direction shouldn\u0027t differ materially from straight up, and anyway, I calculated that a slight deviation wouldn\u0027t explain the discrepancy\u0022\u003Cp\u003EAre you sure? the rotation of Kerbin is quite significant at such a small scale. There was a thread about fins on rockets, and kerbin\u0027s rotation was enough that the rockets consistently tipped over into a westward gravity turn with no control input.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESounds odd - Coriolis force shouldn\u0027t apply torque to a rigid body - but it doesn\u0027t take much to tip an unstable equilibrium, and it could result from higher order effects. But assuming a point body and talking about max altitude, in the low atmosphere, it\u0027s not significant.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hirschhornsalz\u0022 data-cite=\u0022hirschhornsalz\u0022\u003E\u003Cdiv\u003EYour centrifugal force seems to be a bit off, you are using the values at the ground. Assuming you are going straight up relative to the ground, it should be (2pi/21600)^2 * 602000, bit this is not enough to explain the difference.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot quite. Yes, the actual centrifugal force is w^2*602000, \u003Cstrong\u003Ebut\u003C/strong\u003E, as you go up to 2000, Coriolis force gives you a side velocity of w*2000. Coriolis force from this side velocity applies a downward force of w^2*2000. This exactly cancels out with the increase in centrifugal force. Other affects of the side velocity are negligible in this scenario. So it\u0027s safe to simply talk about a constant centrifugal force of w^2*600000.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hirschhornsalz\u0022 data-cite=\u0022hirschhornsalz\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI agree that most likely either the drag displayed ingame is wrong or nor correctly calculated.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe thing is, it can\u0027t be simply \u0022different drag\u0022 since simulating a fixed change in drag doesn\u0027t result in the experimental trajectory. There seems to be a dependence on the altitude or speed, but I can\u0027t figure out what it is.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hirschhornsalz\u0022 data-cite=\u0022hirschhornsalz\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EBut the 0.90 athmospheric model is now obsolete anyway, except you are planning for staying at 0.90 long term.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI might. Most of what I\u0027ve read about 1.x makes me feel I will enjoy it less than 0.90. And this mystery has become a mostly academic thing now, I hope to solve it before moving on.\u003C/p\u003E\u003Cp\u003EIs there a way to ask the developers about this? Surely they would know...\u003C/p\u003E\n"},{"CreatedByName":"Korizan","CreatedById":142032,"CreatedDateTime":"2015-05-13T15:47:58Z","Content":"\n\u003Cp\u003ESadly I can\u0027t think of any mods that might help you.\u003C/p\u003E\u003Cp\u003EIt is a question of does the atmosphere effect the drag like it should and how is the atmosphere worked out.\u003C/p\u003E\u003Cp\u003EDid they use a log^ to create it or it just hard boundaries at certain altitudes, I don\u0027t know.\u003C/p\u003E\u003Cp\u003EAnother thought may be a case of truncating you don\u0027t know how the game is calculating its numbers, truncating can some serious deviation.\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-13T16:30:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Korizan\u0022 data-cite=\u0022Korizan\u0022\u003E\u003Cdiv\u003EIt is a question of does the atmosphere effect the drag like it should and how is the atmosphere worked out.\u003Cp\u003EDid they use a log^ to create it or it just hard boundaries at certain altitudes, I don\u0027t know.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t think they use a piecewise function for the atmospheric density. First, it would make little sense for them to do so, since it\u0027s actually more complicated; and, it\u0027s not consistent with measured results. For example, if you descend with a deployed parachute, your speed will be essentially equal to terminal velocity, and you can see it gradually go down as density increases. If they do use a very fine lookup table, it shouldn\u0027t materially affect the results.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Korizan\u0022 data-cite=\u0022Korizan\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAnother thought may be a case of truncating you don\u0027t know how the game is calculating its numbers, truncating can some serious deviation.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI doubt this is it. The gap is too big to be the result of any sane truncating; and, a game of this type should be expected to use high accuracy - all calculations being done in double, or at least single, precision floating-point, with no rounding except for display purposes.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-05-13T17:06:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Holy-Fire\u0022 data-cite=\u0022Holy-Fire\u0022\u003E\u003Cdiv\u003ETo help me build better ships, I programmed a numerical simulator in Mathematica that allows me to input the attributes of the ship\u0027s stages and output how far it can go. This was back in the \u0026lt;=0.90 era, I haven\u0027t moved to 1.x yet.\u003Cp\u003EI\u0027ve included in it pretty much everything I could think of (including some not-completely-trivial aspects of the rotating reference frame), but the results are still a bit off compared to what I see in-game. With simple rockets that stay within the atmosphere or briefly exit it, the highest altitude reached is about 1% different from simulation. Not something that would materially affect ship design, but not good enough for a perfectionist like me.\u003C/p\u003E\u003Cp\u003EThis has been driving me crazy and I\u0027ve spent several hours trying to isolate the problem. I\u0027ve recently collected some data from a rocket in flight (after the thrust phase, to keep it simple), applied locally cubic regression with a Gaussian kernel, and investigated the result.\u003C/p\u003E\u003Cp\u003EFor example, I concluded that when my rocket was at 2000m and moving upwards (the direction shouldn\u0027t differ materially from straight up, and anyway, I calculated that a slight deviation wouldn\u0027t explain the discrepancy) at a speed of 252.1 m/s, the acceleration in-game is -47.77 m/s^2.\u003C/p\u003E\u003Cp\u003EWhat I would expect:\u003C/p\u003E\u003Cp\u003EGravity: -9.81 * (600000/602000)^2 = -9.745\u003C/p\u003E\u003Cp\u003ECentrifugal force: (2pi/21600)^2 * 600000 = 0.051\u003C/p\u003E\u003Cp\u003EDrag: -0.5 * 0.008 * 1.2231 * 0.2 * Exp(-2000/5000) * 252.1^2 = -41.685\u003C/p\u003E\u003Cp\u003ETotal: -51.38 m/s^2\u003C/p\u003E\u003Cp\u003ESo my deceleration in-game is 3.6 m/s^2 lower that what my math says.\u003C/p\u003E\u003Cp\u003EI experimented with a lift force proportional to speed, and it does seem to help a bit, but I still don\u0027t get consistent results, and I don\u0027t understand why there should be such a force - the parts I\u0027ve used don\u0027t have a lift rating AFAICT.\u003C/p\u003E\u003Cp\u003EAnd yeah, I know 0.90 aerodynamics aren\u0027t realistic, but I\u0027m not looking for realistic, I\u0027m looking for internally consistent.\u003C/p\u003E\u003Cp\u003ECould someone please put me out of my misery and explain what is going on?\u003C/p\u003E\u003Cp\u003EThanks.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETry turning \u0022hack gravity\u0022 on to see if that makes it better or worse (isolate variables). Also try making a craft exclusively from 0.2 drag coefficient parts...\u003C/p\u003E\u003Cp\u003EI\u0027d also recommend you use a reliable source for the values you are using. The altitude meter takes time to update (it lags behind correct value) and maybe velocity value isnt updated as fast as required. Perhaps pause the game and take values manually from debug menu or your own plugin?\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Holy-Fire\u0022 data-cite=\u0022Holy-Fire\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI doubt this is it. The gap is too big to be the result of any sane truncating; and, a game of this type should be expected to use high accuracy - all calculations being done in double, or at least single, precision floating-point, with no rounding except for display purposes.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETruncation error CAN cause serious problems for integration (i.e. how high up it goes), but it should introduce negligible instantaneous error (which is what you are reporting). \u003C/p\u003E\u003Cp\u003EFurthermore, assuming KSP uses doubles for physics, integration error due to truncation is probably negligible. However, integration error due to step size is for sure not. In this case, you can expect results to match less if you improve the integration scheme, since Unity uses simple forward-euler integration. For best results, you should use forward Euler integration with the same time step.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-13T17:20:08Z\u0022 title=\u002205/13/2015 05:20  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 13, 2015\u003C/time\u003E by arkie87\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Frida Space","CreatedById":60943,"CreatedDateTime":"2015-05-13T18:33:11Z","Content":"\n\u003Cp\u003EMaybe the gravitational acceleration is a bit off? It does decrease ever so slightly as you go up. It could make up for, say, .5% maybe of your 1% margin error\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-05-13T19:38:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Frida Space\u0022 data-cite=\u0022Frida Space\u0022\u003E\u003Cdiv\u003EMaybe the gravitational acceleration is a bit off? It does decrease ever so slightly as you go up. It could make up for, say, .5% maybe of your 1% margin error\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eif you look at OP\u0027s calculations, he accounts for that\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-13T19:49:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003EThe altitude meter takes time to update (it lags behind correct value) and maybe velocity value isnt updated as fast as required.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETHIS. In all of my recent measurements, I used these reported values mid-flight, because I wanted to isolate away the thrust phase. I was hoping they give me the correct value, and I could find the rest by interpolation. But if those are inaccurate... It can easily explain the discrepancies.\u003C/p\u003E\u003Cp\u003ESo I simulated the short flights from launch, and the discrepancy in max height is small. This still leaves me with a discrepancy that accumulates over longer flights, which is what I started with before trying to isolate things.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003EAlso try making a craft exclusively from 0.2 drag coefficient parts...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI did, or at least I thought I did. Playing around in the debug window revealed that there are two drag values associated with each part. I tried a ship made purely of parts with equal min and max drag, but it doesn\u0027t help much.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027d also recommend you use a reliable source for the values you are using. Perhaps pause the game and take values manually from debug menu or your own plugin?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI didn\u0027t find in the debug menu a way to get altitude and velocity values (\u0022Flight debug stats\u0022 seems to just have some useless stuff). Can you suggest a way to get the data? If not in stock, perhaps an existing plugin, doing one myself is too much for me.\u003C/p\u003E\u003Cp\u003EIf I could find a way to measure local values accurately, it will certainly help.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003EHowever, integration error due to step size is for sure not. In this case, you can expect results to match less if you improve the integration scheme, since Unity uses simple forward-euler integration. For best results, you should use forward Euler integration with the same time step.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMy current setting is max dt/frame = 0.03 sec, which is too low to explain the discrepancy. I use a slightly fancier integration method, but I need a step size of ~2 secs to reach this kind of error. If all else fails I might try to rewrite my integration to match, but I doubt this is it.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-05-14T12:42:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Holy-Fire\u0022 data-cite=\u0022Holy-Fire\u0022\u003E\u003Cdiv\u003ETHIS. In all of my recent measurements, I used these reported values mid-flight, because I wanted to isolate away the thrust phase. I was hoping they give me the correct value, and I could find the rest by interpolation. But if those are inaccurate... It can easily explain the discrepancies.\u003Cp\u003ESo I simulated the short flights from launch, and the discrepancy in max height is small. This still leaves me with a discrepancy that accumulates over longer flights, which is what I started with before trying to isolate things.\u003C/p\u003E\u003Cp\u003EI did, or at least I thought I did. Playing around in the debug window revealed that there are two drag values associated with each part. I tried a ship made purely of parts with equal min and max drag, but it doesn\u0027t help much.\u003C/p\u003E\u003Cp\u003EI didn\u0027t find in the debug menu a way to get altitude and velocity values (\u0022Flight debug stats\u0022 seems to just have some useless stuff). Can you suggest a way to get the data? If not in stock, perhaps an existing plugin, doing one myself is too much for me.\u003C/p\u003E\u003Cp\u003EIf I could find a way to measure local values accurately, it will certainly help.\u003C/p\u003E\u003Cp\u003EMy current setting is max dt/frame = 0.03 sec, which is too low to explain the discrepancy. I use a slightly fancier integration method, but I nep size of ~2 secs to reach this kind of error. If all else fails I might try to rewrite my integration to match, but I doubt this is it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETime step only effects integration values. I.e. max altitude. It will have zero affect on instantaneous measurements, like acceleration. That value should still match. \u003C/p\u003E\u003Cp\u003EIs there a way in the debug menu to display forces on parts?\u003C/p\u003E\u003Cp\u003EIf so, use time control mod to slow down time to 1/64 real time. Which is almost like pausing game. \u003C/p\u003E\u003Cp\u003EIncidentally, time control mod might also be the easiest way to get accurate readouts....\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-05-14T13:17:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003ETime step only effects integration values. I.e. max altitude. It will have zero affect on instantaneous measurements, like acceleration. That value should still match.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll clarify that, now that I know that the instantaneous altitude reported by the game isn\u0027t accurate (lags by some amount), I no longer have evidence for a problem in the instantaneous acceleration. I only see a difference in max altitude.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003EIs there a way in the debug menu to display forces on parts?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENone that I\u0027ve seen.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arkie87\u0022 data-cite=\u0022arkie87\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIf so, use time control mod to slow down time to 1/64 real time. Which is almost like pausing game. \u003C/p\u003E\u003Cp\u003EIncidentally, time control mod might also be the easiest way to get accurate readouts....\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll try it. If this solves the altitude lag and I can get fine-grained, accurate altitude measurements, interpolating acceleration is relatively easy.\u003C/p\u003E\u003Cp\u003EUpdate: Time Control turns out to be only marginally useful. Kerbulator, on the other hand, is extremely useful. I\u0027ll play around a bit and report what I find.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-14T14:34:43Z\u0022 title=\u002205/14/2015 02:34  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 14, 2015\u003C/time\u003E by Holy-Fire\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2015-05-14T20:32:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Holy-Fire\u0022 data-cite=\u0022Holy-Fire\u0022\u003E\u003Cdiv\u003EI\u0027ll clarify that, now that I know that the instantaneous altitude reported by the game isn\u0027t accurate (lags by some amount), I no longer have evidence for a problem in the instantaneous acceleration. I only see a difference in max altitude.\u003Cp\u003ENone that I\u0027ve seen.\u003C/p\u003E\u003Cp\u003EI\u0027ll try it. If this solves the altitude lag and I can get fine-grained, accurate altitude measurements, interpolating acceleration is relatively easy.\u003C/p\u003E\u003Cp\u003EUpdate: Time Control turns out to be only marginally useful. Kerbulator, on the other hand, is extremely useful. I\u0027ll play around a bit and report what I find.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI once used Time Control to slam into Kerbin\u0027s atmosphere at 300,000 m/s (using infinite fuel) at 1/64th time. It was glorious.\u003C/p\u003E\n"},{"CreatedByName":"Holy-Fire","CreatedById":143761,"CreatedDateTime":"2015-06-01T16:19:01Z","Content":"\n\u003Cp\u003EI promised I\u0027d report what I found, so... My results were inconclusive. It seems I could not even get consistent results even with the velocity, let alone acceleration. That is, given a segment where vertical velocity ranged in [a, b], the difference in altitude was outside the range [a dt, b dt]. So there\u0027s definitely something weird going on, maybe some discrepancies in the coordinate system. I\u0027ve given up on trying to replicate it.\u003C/p\u003E\n"}]}