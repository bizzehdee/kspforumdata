{"TopicId":122349,"ForumId":36,"TopicTitle":"[1.0.4] Kramax Plugin Reload: plugin development tool for rapid prototyping","CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-05T03:23:00Z","PageNum":1,"Articles":[{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-05T03:23:00Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EV0.1 Download:\u003C/strong\u003E \u003Ca href=\u0022https://github.com/Kramax/KramaxPluginReload\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#kramax-plugin-reload\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EKramax Plugin Reload\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI started developing an autopilot mode (Kramax Autopilot) and I normally develop software using a very quick modify/test cycle. I quickly realized that waiting for KSP to restart every time I wanted to try out a change I had made would make it take so long to develop that I would probably give up first. I looked around for a solution that would allow a plugin developer to dynamically reload the compiled plugin without restarting KSP.\u003C/p\u003E\u003Cp\u003EI found \u0022KSPPluginReload\u0022 by m1nd0. Unfortunately I could not get it to work properly with the way my other mod was structured. The mod used a MonoBehavior sub-class and it seems that there isa bug in Unity that made it instantiate the old version of my objects even when I loaded a new DLL. The only way I was able to get it to work was to actually dynamically change the class names of my components every time the mod was loaded. This works for a plugin that uses KSPAddon to start and stop. It will NOT work with a plugin that uses sub-classes of VesselModule to work. Your sub-classes MUST be direct sub-classes of MonoBehavior.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#instructions\u0022\u003E\u003Cstrong\u003EInstructions\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#instructions\u0022\u003EFirst you need to setup your project. I setup the \u0022Debug\u0022 build of the project to use plugin reload and the \u0022Release\u0022 build to NOT use it. This way you can debug with the reloadable mod and release your mod to the world without it.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#instructions\u0022\u003ETo do this you need to first add the assembly \u0022KramaxReloadExtensions\u0022 that is in this mod as a reference assembly.This assembly is used in your debug build to do the DLL reloading.Next you need to copy the file \u0022ReleaseReloadableMonoBehaviour.cs\u0022 into your project. This file is used in release mode when you want to release your mod to the world.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#instructions\u0022\u003ESadly in order to make this work you will have to hand edit your \u0022csproj\u0022 to make the use of the KramaxReloadExtensions assembly conditional based on build configuration. You need to find the line the csproj file that is like this:\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E\u0026lt;Reference Include=\u0022KramaxReloadExtensions\u0022\u0026gt;\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E    \u0026lt;HintPath\u0026gt;..\\..\\KramaxPluginReload\\bin\\Debug\\KramaxReloadExtensions.dll\u0026lt;/HintPath\u0026gt;\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E\u0026lt;/Reference\u0026gt;\u003C/a\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#instructions\u0022\u003Eand change it to this:\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E\u0026lt;Reference Condition=\u0022\u0027$(Configuration)\u0027 == \u0027Debug\u0027\u0022 Include=\u0022KramaxReloadExtensions\u0022\u0026gt;\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E    \u0026lt;HintPath\u0026gt;..\\..\\KramaxPluginReload\\bin\\Debug\\KramaxReloadExtensions.dll\u0026lt;/HintPath\u0026gt;\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#instructions\u0022\u003E\u0026lt;/Reference\u0026gt;\u003C/a\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#using-reloadablemonobehaviour\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EUsing ReloadableMonoBehaviour\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYour sub-classes which inherit from MonoBehavior need to inherit from this mods class ReloadableMonoBehaviour instead. ReloadableMonoBehaviour is a direct sub-class of MonoBehavior that adds a \u0022type mapping\u0022 property that is used to ensure the correct class types are used for the DLL that is reloaded.\u003C/p\u003E\u003Cp\u003ENext, you need to change any calls to GameObject.AddComponent to use the method provided by ReloadableMonoBehaviour ReloadableMonoBehaviour.AddComponent(type). \u003C/p\u003E\u003Cp\u003EFor example, in my autopilot, my main top-level object is a MonoBehavior. It looked like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003Epublic class KramaxAutoPilot : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            mainPilot = gameObject.AddComponent\u0026lt;George\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E    \t...\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis needed to be changed to this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003Epublic class KramaxAutoPilot : ReloadableMonoBehaviour /* note changed baseclass here */\u003Cbr\u003E{\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            mainPilot = AddComponent\u0026lt;type(George)\u0026gt; as George; /* note AddComponent call and cast */\u003Cbr\u003E        }\u003Cbr\u003E    \t...\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you use any other varient of AddComponent they also need to be changed.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#installation\u0022\u003E\u003Cstrong\u003EInstallation\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#installation\u0022\u003EThis mod needs to be installed in your KSP GameData directory as a normal mod would be installed.Normally it would go into GameData/GramaxPluginReload. The DLL files will be in GameData/GramaxPluginReload/Plugins including both KramaxPluginReload.dll and KramaxReloadExtensions.dll. The Settings.cfg file in GameData/GramaxPluginReload is used to configure where the plugin you are developing gets loaded from. You can just copy the folder \u003C/a\u003E\u003Ca href=\u0022https://github.com/Kramax/KramaxPluginReload/tree/master/GameData/KramaxPluginReload\u0022 rel=\u0022external nofollow\u0022\u003E\u003C/a\u003E\u003Ca href=\u0022#installation\u0022\u003Ehttps://github.com/Kramax/KramaxPluginReload/tree/master/GameData/KramaxPluginReload\u003C/a\u003E\u003Ca href=\u0022#installation\u0022\u003E to your KSP GameData folder.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#installation\u0022\u003EHere is a sample entry for my autopilot mod:\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003EPluginSetting\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E{\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E        name = KramaxAutoPilot\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E        path = C:\\root\\DevKSP\\KramaxAutoPilot\\Source\\bin\\Debug\\KramaxAutoPilot.dll\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E        loadOnce = false\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E        methodsAllowedToFail = false\u003C/a\u003E\u003Cbr\u003E\u003Ca href=\u0022#installation\u0022\u003E}\u003C/a\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#installation\u0022\u003EYou should change the name and path to match your plugin. The other settings should be left alone.You can have multiple PluginSetting objects in the config file for more than one plugin.Note the path can be outside of your KSP install directories--in fact using the place where your compiled DLL gets put works best.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#reloading\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EReloading\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe plugin reload mod will create a UI window with a title \u0022Plugins\u0022 and one button \u0022Reload plugins\u0022.Simply recompile your mod and press the button. It should load the new version of your DLL. If you do not actually create a new DLL the reload will not work.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#how-it-works\u0022\u003E\u003Cstrong\u003EHow It Works\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EWhen it reloads (or loads the first time) your plugin DLL it does the following:\u003C/a\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EFirst it goes through all the loaded plugins it is managing and DELETES the instances of objects created with the old DLL.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EIt loads your (new version) DLL (assembly) by loading the file as \u0022bytes\u0022 and then using Assembly.Load(bytes). It does not load directly from the DLL file or it would not reload properly.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EIt then creates a \u0022dynamic assembly\u0022 that it names using a scheme of \u0022KramaxPIRLAsmb_#\u0022where # is replaced by a sequential count.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EIt scans all the class types in your mods assembly for sub-classes of MonoBehavior and creates a dynamic sub-class of each type with a unique class name such as\u0022KramaxAutoPilot_43\u0022 (it adds the number which increments every time).The dynamic sub-class simply creates a unique name for the class and adds a default constructor.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EIt keeps track of these unique class names in a \u0022type mapping\u0022 dictionary. This type mapping is used to instantiate new components. It never instantiates the original class,always the unique sub-class.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EIt looks at the KSPAddon attributes of the classes and starts them if they are supposed to be started based on the current scene.\u003C/a\u003E\u003C/li\u003E\u003Cli\u003E\u003Ca href=\u0022#how-it-works\u0022\u003EWhen a ReloadableMonoBehaviour sub-class is instantiated it uses the type mapping to create the write type of object and propagates that type map to any sub-components.\u003C/a\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#example\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EExample\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI know this all sounds pretty confusing. You can look at my autopilot mod for a real-world example.The source is found at: \u003Ca href=\u0022https://github.com/Kramax/KramaxAutoPilot\u0022\u003Ehttps://github.com/Kramax/KramaxAutoPilot.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#attributions\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EAttributions\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis plugin is a modified version of \u0022KSPPluginReload\u0022 by m1nd0.Many thanks for an excellent starting point for this mod.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#license\u0022\u003E\u003Cstrong\u003ELicense\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#license\u0022\u003EThis work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. To view a copy of this license, visit \u003C/a\u003E\u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/3.0/\u0022 rel=\u0022external nofollow\u0022\u003E\u003C/a\u003E\u003Ca href=\u0022#license\u0022\u003Ehttp://creativecommons.org/licenses/by-nc-sa/3.0/\u003C/a\u003E\u003Ca href=\u0022#license\u0022\u003E or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#license\u0022\u003EThe file \u0022ReleaseReloadableMonoBehaviour.cs\u0022 is excepted from this license and is released into the public domain.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022#license\u0022\u003EThis work is a derivative of \u0022KSPPluginReload\u0022 by m1nd0 that was distributed under the same license.The original work was found at \u003C/a\u003E\u003Ca href=\u0022https://github.com/m1ndst0rm/KSPPluginReload\u0022 rel=\u0022external nofollow\u0022\u003E\u003C/a\u003E\u003Ca href=\u0022#license\u0022\u003Ehttps://github.com/m1ndst0rm/KSPPluginReload\u003C/a\u003E\u003Ca href=\u0022#license\u0022\u003E.\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-10-05T05:25:37Z","Content":"\n\u003Cp\u003EThat\u0027s... a \u003Cem\u003Elot\u003C/em\u003E of crazy in there. I\u0027m glad you can make sense of it, cause it makes my head hurt.\u003C/p\u003E\n"},{"CreatedByName":"hab136","CreatedById":75997,"CreatedDateTime":"2015-10-05T10:08:42Z","Content":"\n\u003Cp\u003EWow, I\u0027ll have to try this. I hate the long reload times.\u003C/p\u003E\n"},{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-05T19:14:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EThat\u0027s... a \u003Cem\u003Elot\u003C/em\u003E of crazy in there. I\u0027m glad you can make sense of it, cause it makes my head hurt.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I almost gave up on it when I discovered this bug in Unity where AddComponent\u0026lt;type\u0026gt; seems to get the string name of the type and then look that up to actually create an instance. And it always used the initial version of the class instead of the newly loaded one. But then I realized that C# allows you to generate code dynamically and wondered what would happen if I created an uniquely named class on the fly and it worked! The ability to \u0022emit\u0022 code is a pretty cool feature of C#. There is nothing like that in C\u002B\u002B.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hab136\u0022 data-cite=\u0022hab136\u0022\u003E\u003Cdiv\u003EWow, I\u0027ll have to try this. I hate the long reload times.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELet me know if you have any problems or questions.\u003C/p\u003E\n"},{"CreatedByName":"Joshwoo70","CreatedById":111345,"CreatedDateTime":"2015-10-06T02:31:47Z","Content":"\n\u003Cp\u003Ebetter put this in the add-ons development thread... that way.. it will not get lost \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-06T04:04:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Joshwoo69\u0022 data-cite=\u0022Joshwoo69\u0022\u003E\u003Cdiv\u003Ebetter put this in the add-ons development thread... that way.. it will not get lost \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOops, my bad. Did not realize there was a forum specifically for that. How do I get an admin to move the post? I presume I cannot do that myself?\u003C/p\u003E\u003Cp\u003E-Thanks\u003C/p\u003E\n"},{"CreatedByName":"cttw","CreatedById":2670,"CreatedDateTime":"2015-10-06T09:13:46Z","Content":"\n\u003Cp\u003ERapid deployment/testing is a huge efficiency multiplier! With this and the autopilor lander, you are on fire Kramer! Great job!\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2015-10-06T19:47:16Z","Content":"\n\u003Cp\u003EI am not sure if I understand the mechanic of this mod correctly. I try to get a simple mod (display debug info) working\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.SpaceCentre, false)]\u003Cbr\u003E    public class MyTestDebug : ReloadableMonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022MyTestDebug: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhen I change the contents of the log-message, recompile, reload plugin then still the initial debug message appears.\u003C/p\u003E\u003Cp\u003EAccording to the log-messages, the new plugin is reloaded\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[Log]: KramaxPluginReload.PluginClass.CreateInstance create object MyTestDebug_2_.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs it essential for this to work, to use \u0022AddComponent\u0022 or is there something else I am missing?\u003C/p\u003E\n"},{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-06T22:14:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mhoram\u0022 data-cite=\u0022mhoram\u0022\u003E\u003Cdiv\u003EI am not sure if I understand the mechanic of this mod correctly. I try to get a simple mod (display debug info) working\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.SpaceCentre, false)]\u003Cbr\u003E    public class MyTestDebug : ReloadableMonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022MyTestDebug: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhen I change the contents of the log-message, recompile, reload plugin then still the initial debug message appears.\u003C/p\u003E\u003Cp\u003EAccording to the log-messages, the new plugin is reloaded\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[Log]: KramaxPluginReload.PluginClass.CreateInstance create object MyTestDebug_2_.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs it essential for this to work, to use \u0022AddComponent\u0022 or is there something else I am missing?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt sounds like you are doing the right things. Anyway you can post more of the KSP.log file? And if it is easy to put the entire project up somewhere I could look over all the source.\u003C/p\u003E\n"},{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-07T04:19:13Z","Content":"\n\u003Cp\u003EJust a note to those following this--the moderators moved it to the Add-on Development forum at my request.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2015-10-07T09:07:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kramer\u0022 data-cite=\u0022Kramer\u0022\u003E\u003Cdiv\u003EIt sounds like you are doing the right things. Anyway you can post more of the KSP.log file? And if it is easy to put the entire project up somewhere I could look over all the source.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for letting me know that I am on the right track. There are other classes in my project - maybe they interfere. I will report back after digging deeper into this.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2015-10-08T18:09:02Z","Content":"\n\u003Cp\u003ENow I was able to get a clean, new project working in Visual Studio 2013 Community.\u003C/p\u003E\u003Cp\u003EThe thing I had to do was to manually increment the version number in the file Properties/AssemblyInfo.cs from\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.0\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.1\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand for each compilation after that.\u003C/p\u003E\u003Cp\u003EOr as I \u003Ca href=\u0022http://abundantcode.com/how-to-get-auto-incrementing-version-number-in-visual-studio-2013/\u0022 rel=\u0022external nofollow\u0022\u003Ejust found out\u003C/a\u003E how this can be accomplished more easily:\u003C/p\u003E\u003Cp\u003EReplace in the file Properties/AssemblyInfo.cs\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.0\u0022)]\u003Cbr\u003E[assembly: AssemblyFileVersion(\u00221.0.0.0\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eby\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.*\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand get it incremented automatically.\u003C/p\u003E\u003Cp\u003ENow I have another question: From what you have learned during your implementation, do you think it is feasible to implement a \u0022ReloadablePartModule\u0022 for the PartModule class in the same way as \u0022ReloadableMonoBehaviour\u0022 works for MonoBehaviour?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-08T18:12:17Z\u0022 title=\u002210/08/2015 06:12  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 8, 2015\u003C/time\u003E by mhoram\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kramer","CreatedById":151907,"CreatedDateTime":"2015-10-09T19:00:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mhoram\u0022 data-cite=\u0022mhoram\u0022\u003E\u003Cdiv\u003ENow I was able to get a clean, new project working in Visual Studio 2013 Community.\u003Cp\u003EThe thing I had to do was to manually increment the version number in the file Properties/AssemblyInfo.cs from\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.0\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.1\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand for each compilation after that.\u003C/p\u003E\u003Cp\u003EOr as I \u003Ca href=\u0022http://abundantcode.com/how-to-get-auto-incrementing-version-number-in-visual-studio-2013/\u0022 rel=\u0022external nofollow\u0022\u003Ejust found out\u003C/a\u003E how this can be accomplished more easily:\u003C/p\u003E\u003Cp\u003EReplace in the file Properties/AssemblyInfo.cs\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.0.0\u0022)]\u003Cbr\u003E[assembly: AssemblyFileVersion(\u00221.0.0.0\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eby\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[assembly: AssemblyVersion(\u00221.0.*\u0022)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand get it incremented automatically.\u003C/p\u003E\u003Cp\u003ENow I have another question: From what you have learned during your implementation, do you think it is feasible to implement a \u0022ReloadablePartModule\u0022 for the PartModule class in the same way as \u0022ReloadableMonoBehaviour\u0022 works for MonoBehaviour?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGlad you got it working---I forgot that you had to do that to make it work. I will edit the readme to point that out. Sorry about that.\u003C/p\u003E\u003Cp\u003EThe main issue with the implementation is that you have to be in control of the calls to make components.\u003C/p\u003E\u003Cp\u003EI am not sure if that would be the case for part modules. I know it is a problem for vessel modules because\u003C/p\u003E\u003Cp\u003Ethe KSP internals are creating the component on their own and I cannot intercept it. I have a feeling the same\u003C/p\u003E\u003Cp\u003Emay be true of part modules. But I am just guessing--I have never created a part module so I am not\u003C/p\u003E\u003Cp\u003Efamiliar with the way it works.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2015-10-09T22:49:15Z","Content":"\n\u003Cp\u003EUpdating the readme would be beneficial for others who try this.\u003C/p\u003E\u003Cp\u003EThanks for your insight about PartModule and vessel reloading.\u003C/p\u003E\n"},{"CreatedByName":"hab136","CreatedById":75997,"CreatedDateTime":"2015-10-17T23:13:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kramer\u0022 data-cite=\u0022Kramer\u0022\u003E\u003Cdiv\u003ENote the path can be outside of your KSP install directories--in fact using the place where your compiled DLL gets put works best.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt did not work at all if I left my DLL in GameData. I removed my DLL from GameData and pointed the Settings.cfg at my DLL outside of GameData, and my mod loaded normally and \u0022reload plugins\u0022 seems to work - I changed the window title and hit reload, and sure enough I saw the new window title. Amazing!\u003C/p\u003E\u003Cp\u003EFYI I also had to add \u0022using KramaxReloadExtensions;\u0022 to each file, otherwise ReloadableMonoBehavior wasn\u0027t visible. I\u0027m using Xamarin Studio on OS X, if it makes a difference. I wrapped it all in #if DEBUG statements:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E#if DEBUG\u003Cbr\u003Eusing KramaxReloadExtensions;\u003Cbr\u003E#endif\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\t[KSPAddon(KSPAddon.Startup.EditorVAB, false)]\u003Cbr\u003E#if DEBUG\u003Cbr\u003E\tpublic class AutoAsparagus: ReloadableMonoBehaviour\u003Cbr\u003E#else\u003Cbr\u003E\tpublic class AutoAsparagus: MonoBehaviour\u003Cbr\u003E#endif\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThere was some weird UI behavior that appeared only when using KramaxReloadExtensions. First, my window normally puts itself in the middle of the screen (new Rect(Screen.width * 0.35f,Screen.height * 0.1f,1,1)\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E, but while using this it just plopped itself in the top left. Second, when my window was visible and I hovered over a part, my window disappeared and the part info window was broken:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/lXduvztl.jpg\u0022 alt=\u0022lXduvztl.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis was accompanied by a whole lot of log spam:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[EXC 23:22:38.072] ArgumentException: GUILayout: Mismatched LayoutGroup.Repaint\u003Cbr\u003E\tUnityEngine.GUILayoutUtility.BeginLayoutGroup (UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options, System.Type LayoutType)\u003Cbr\u003E\tUnityEngine.GUILayout.BeginVertical (UnityEngine.GUIContent content, UnityEngine.GUIStyle style, UnityEngine.GUILayoutOption[] options)\u003Cbr\u003E\tUnityEngine.GUILayout.BeginVertical (UnityEngine.GUILayoutOption[] options)\u003Cbr\u003E\tPartListTooltips.DrawTooltip (Int32 id)\u003Cbr\u003E\tUnityEngine.GUILayout\u002BLayoutedWindow.DoWindow (Int32 windowID)\u003Cbr\u003E\tUnityEngine.GUI.CallWindowDelegate (UnityEngine.WindowFunction func, Int32 id, UnityEngine.GUISkin _skin, Int32 forceRect, Single width, Single height, UnityEngine.GUIStyle style)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf I don\u0027t hover over a part, it looks fine:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/xAfXVY4l.jpg\u0022 alt=\u0022xAfXVY4l.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003ENeither of these problems appear when loading my mod normally. Neither are deal breakers, but I figured I\u0027d report them.\u003C/p\u003E\u003Cp\u003EI love this mod... I have some logic changes I\u0027ve been putting off because it takes so long to test them, and I knocked out a huge portion tonight just because I could change one line, compile, reload, and test all in about 15 seconds, instead of the 5 minutes it would normally take.\u003C/p\u003E\u003Cp\u003EThank you so much for making this!!\u003C/p\u003E\n"},{"CreatedByName":"rhoark","CreatedById":57151,"CreatedDateTime":"2015-11-22T16:30:04Z","Content":"\nDoes this work with 1.0.5?\n"},{"CreatedByName":"hab136","CreatedById":75997,"CreatedDateTime":"2016-01-08T14:35:02Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222292423\u0022 data-ipsquote-contentid=\u0022122349\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221448209804\u0022 data-ipsquote-userid=\u002257151\u0022 data-ipsquote-username=\u0022rhoark\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 11/22/2015 at 6:30 PM, rhoark said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDoes this work with 1.0.5?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYep! \u00A0Just tested it.\n\u003C/p\u003E\n"},{"CreatedByName":"AndyMt","CreatedById":123144,"CreatedDateTime":"2016-09-26T19:41:20Z","Content":"\n\u003Cp\u003E\nI just tested this mod with 1.2pre - and it works!\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E@Kramer\u003C/span\u003E: thank\u00A0you so much.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-09-26T19:55:46Z\u0022 title=\u002209/26/2016 07:55  PM\u0022 data-short=\u00227 yr\u0022\u003ESeptember 26, 2016\u003C/time\u003E by AndyMt\u003C/strong\u003E\n\u003C/span\u003E\n"}]}