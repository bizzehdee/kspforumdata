{"TopicId":101938,"ForumId":44,"TopicTitle":"Question about craft attitude / coordinate transformations","CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T15:57:50Z","PageNum":1,"Articles":[{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T15:57:50Z","Content":"Hi peeps\n\nSo, i recently started writing my own simulation / game and i am hitting my first real barrier.\n\nI have two coordinate systems. One is fixed, with it\u0027s origin at the center of the sun at the time the simulation starts, and the other one is relative to the craft and thus also constantly rotating. (I would love to do all in one coordinate system but creation of crafts with wing and engine positions and orientations would get really ugly.)\n\nTo transform a vector from the global c system to the local one i obviously need a description of both systems. I have the x,y and z vectors of the global c system of course, but the problems begin with the other vectors. I have the direction the craft points at, but i would need a second, perpendicular vector (third vector would be cross product of first two) since how the craft is rolled matters for the coordinate system and thus the transformation. I plan to use the port (\u0022left\u0022) vector, to give me \u0022up\u0022 as the cross product of \u0022forward\u0022 and \u0022port\u0022.\n\n**Now, my problem is:**\n\nHow do i get the second (i.e. port) vector for a complete description of the attitude? The only possibility i came up with so far is that i set it up manually once when the simulation begins, and then rotate it whenever the craft rotates. But that sounds quite dirty and i don\u0027t know if the accumulative error would not get noticeable after a while (although i do use the GNU MPFR C\u002B\u002B library for arbitrary precision arithmetic so i could just use more Bit if the error gets too big?).\n\nAn alternative might be introducing a value (angle) for roll and then get to the port vector with some rotation and cross product magic, but the problem with an angle would be that it breaks down for certain situations (flying straight up / down) so i really want to avoid that if possible.\n\nSo, any thoughts on how to tackle this issue?\n\n(If you happen to know how KSP handles attitude that would of course be nice to know too.)\n\nI hope i could describe my problem clearly, if not i apologize and i can try again.\n\n**Edited \u003Ctime datetime=\u00222015-03-14T16:13:32Z\u0022 title=\u002203/14/2015 04:13  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 14, 2015\u003C/time\u003E by Kertherina**"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-14T16:34:06Z","Content":"Can you describe the problem a bit better?\n\nYou could use the center of mass of the vehicle as the vehicles origin, and calculate that in the global coordinate plane. Then, move the axes as needed, to the orientation of the craft. Maybe use everybody\u0027s favorite, the point slope formula to get a slope for your vector, and then use the arc-trigonemetry functions to get angles, as well as the Pythagorean Theorem to get a vector intensity.\n\nIf this doesn\u0027t help at all, then, I must not understand the problem."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T16:47:29Z","Content":"Sorry, let me try again.\n\nThe problem is in the step \u0022move the axes as needed\u0022, for which i would need to know how i have to rotate each axis. For that i have to know the three basis vectors in both coordinate systems: x,y,z, and the new x\u0027,y\u0027,z\u0027.\n\nNow, i have those vectors for the fixed coordinate system since that is the main coordinate system the craft also uses for position and direction.\n\nThen, i have the vector for the direction the craft points at (\u0022forward\u0022). But that is only one axis for the new coordinate system (z\u0027), i do need at least a second vector (y\u0027 or z\u0027). With a second one the third one would be the cross product of the other two, and then with all vectors i could then determine the angles for the rotation with the dot product.\n\nThat is where the port (\u0022left\u0022) vector comes in as the x\u0027 axis. But how do i get this vector? Without the axes of the local coordinate system of the rocket since that is what i want to determine in the first place, there is no way to just calculate them with a cross product or something.\n\nThe only way to determine the port vector i so far know of is to manually set the port vector at the beginning of the simulation, and then each time the rocket rotates you also rotate the port vector. Which would accumulate floating point errors over time, which is why i am unsure if this is the way to go.\n\nWas that easier to understand?"},{"CreatedByName":"sal_vager","CreatedById":16426,"CreatedDateTime":"2015-03-14T17:08:10Z","Content":"I think you\u0027re going to need vector maths here, I found [**this page**](https://github.com/okamstudio/godot/wiki/tutorial_vector_math) that explains the dot product and cross product pretty well, it may help ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-14T17:11:07Z","Content":"Maybe make it so that the initial axes are parallel to the global axes?\n\nThen you get the initial axes relative to the craft.\n\nMaybe a third coordinate plane is needed...? One for the craft, one for local craft space, and one for global space? \n\nPerhaps you should make the craft \u0022forward\u0022 the x-axis, and use starboard as the y-axis.\n\nI\u0027m still a bit confused..."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T17:28:19Z","Content":"\u003E \n\u003E I think you\u0027re going to need vector maths here, I found [**this page**](https://github.com/okamstudio/godot/wiki/tutorial_vector_math) that explains the dot product and cross product pretty well, it may help ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\nThanks, but dot and cross products are not the problem. My problem is how to determine / update a second vector like port / starboard, up / down for a complete description of the local craft coordinate system. Currently i just have the forward direction vector. If i have the second vector, i know how to get the third vector and all the angles for the rotation.\n\n\u003E \n\u003E Maybe a third coordinate plane is needed...? One for the craft, one for local craft space, and one for global space?\n\nI don\u0027t see how an extra local coordinate system would help me here, directions would be the exact same vector as in the global fixed system, only positions would change but positions are not a problem. The only reason to use this would be accuracy, but i am already using 25 digit accuracy for the position exactly because i did not want more coordinate systems than are necessary.\n\n\u003E \n\u003E Perhaps you should make the craft \u0022forward\u0022 the x-axis, and use starboard as the y-axis.\n\nThe same problem as before: Where do i get the starboard vector from? It\u0027s the negative of the port vector so if i have one, i have the other, which doesn\u0027t matter because either one would be enough. I could again set up the starboard vector at the start of the simulation and rotate it with the craft, getting floating point errors over time.\n\n\u003E \n\u003E I\u0027m still a bit confused...\n\nSorry, I really don\u0027t know how else to describe this problem. Just to make sure, it is clear how you need 2 vectors to fully describe the attitude of a craft?"},{"CreatedByName":"mckamx","CreatedById":116032,"CreatedDateTime":"2015-03-14T17:28:30Z","Content":"I think the problem you are fighting is that your coordinate systems track only current position, and change in current position (vector). You also need to worry about angular positions and velocities around your current CoM position. This will require 3 more numbers for current angle of each axis off from the local coordinate system. You might be able to reduce it to 2 numbers by using a polar coordinate system, but I think the calculations for a 3-axis system would be simpler and faster than having to do constant transforms."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T17:38:26Z","Content":"The problem is that it is super easy keeping track of forward direction, but not the roll around the longitudinal axis.\n\n\u003E \n\u003E This will require 3 more numbers for current angle of each axis off from the local coordinate system.\n\nAngles are bad because they break down for certain situations (if you fly perfectly upwards,what is your roll?), you can do it with a second vector perpendicular to the forward direction though, which is port / starboard, or up / down what i have been mentioning up to now. Still 3 numbers, but doesn\u0027t break down if it\u0027s perpendicular to axes.\n\nEither way the same questions, how do you determine these extra numbers? For the angles you\u0027d need the axis vectors first, so you\u0027re again where i am currently stuck because how exactly do you determine the port vector for example? You can\u0027t just do a cross product of forward direction with another basis vector because the basis vectors is what you have to determine.\n\nAnd to reiterate what i have been saying so far, the only method that is halfway decent i know so far is to initialize the port vector (or starboard, up or down, it doesn\u0027t matter) and then rotate it each time the craft rotates, and i am wondering if this method is the best out there because floating point errors will accumulate over time."},{"CreatedByName":"YNM","CreatedById":98447,"CreatedDateTime":"2015-03-14T17:43:30Z","Content":"Hmm... Basic rotation transformation ? I mean, the direction of the attitudes don\u0027t change even if you do it wrt Sun / parent body... You can set a vector defining the direction of one part of the craft, then rotate the others accordingly ?\n\nOr if you want, use spherical coordinate, with a fixed r ?\n\n**Edited \u003Ctime datetime=\u00222015-03-14T17:45:39Z\u0022 title=\u002203/14/2015 05:45  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 14, 2015\u003C/time\u003E by YNM**"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-14T17:45:25Z","Content":"\u003E \n\u003E The same problem as before: Where do i get the starboard vector from? It\u0027s the negative of the port vector so if i have one, i have the other, which doesn\u0027t matter because either one would be enough. I could again set up the starboard vector at the start of the simulation and rotate it with the craft, getting floating point errors over time.\n\nIf the x-axis moves by 45 degrees in a direction, the y-axis moves with it. If it moves two dimensionally, only the y-axis and x-axis really change, but if you change the orientation three dimensionally, the z-axis moves as well. Remember, they\u0027re all 90 degrees to each other. So, just pick one 90-degree vector as the y or x, if z is your forward."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T18:04:51Z","Content":"\u003E \n\u003E Hmm... Basic rotation transformation ? I mean, the direction of the attitudes don\u0027t change even if you do it wrt Sun / parent body... You can set a vector defining the direction of one part of the craft, then rotate the others accordingly ?\n\u003E Or if you want, use spherical coordinate, with a fixed r ?\n\nSorry, i don\u0027t understand what you are saying. Especially the part where you say attitude vectors don\u0027t change, since that is exactly what i want to to: transform (rotate) the vectors into a different coordinate system.\n\n\u003E \n\u003E So, just pick one 90-degree vector as the y or x, if z is your forward.\n\nBut i can\u0027t just pick any. To consider the roll around the longitudinal axis you have to pick a special vector as a basis vector for the local coordinate system, which is where the port (or starboard, up or down) vector i am talking about comes into play. With forward and port as two axes you can get the third one with the cross product, but you need at least two vectors for an unambiguous representation of the coordinate system.\n\nSo the question is, how exactly do you get / update the port vector?\n\nAgain, my only guess so far is set it up when simulation starts and then rotate it every time the rocket rotates, where it will accumulate an error over time."},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-14T18:15:43Z","Content":"Make the local plane\u0027s axes parallel to their corresponding axes on the fixed plane, on startup. Would that help?"},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-14T18:26:23Z","Content":"\u003E \n\u003E Make the local plane\u0027s axes parallel to their corresponding axes on the fixed plane, on startup. Would that help?\n\nNot sure if i understand that correctly. If i make the local coordinate system fixed and the axes all parallel to the global fixed plane, that would mean i could just stay in the global coordinate system. The point of the transformation is to have something in a local frame of reference because the positions and directions of engines and wings are all relative to the rocket, so this coordinate system has to constantly rotate with the rocket too.\n\nAnd generally, i need the local coordinate axes in forward, port and up direction to have a consistent coordinate system. Aligning them with the global axes is counter productive."},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-14T18:34:19Z","Content":"\u003E \n\u003E Not sure if i understand that correctly. If i make the local coordinate system fixed and the axes all parallel to the global fixed plane, that would mean i could just stay in the global coordinate system. The point of the transformation is to have something in a local frame of reference because the positions and directions of engines and wings are all relative to the rocket, so this coordinate system has to constantly rotate with the rocket too.\n\u003E And generally, i need the local coordinate axes in forward, port and up direction to have a consistent coordinate system. Aligning them with the global axes is counter productive.\n\nAligning them on startup, and when the craft rotates it changes with it. The local coordinate system wouldn\u0027t be fixed, it would move. It would just have the corresponding axes parallel until the craft rotates."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-15T00:34:34Z","Content":"\u003E \n\u003E Aligning them on startup, and when the craft rotates it changes with it. The local coordinate system wouldn\u0027t be fixed, it would move. It would just have the corresponding axes parallel until the craft rotates.\n\nThat would not work. The way this system works is that engine and wing positions and orientations are in the frame of reference where port is x, up is y and forward is z. If i choose different starting axes then the starting positions of the engines and wings would be different again, and i would not have gained anything because i get the same exact problem with a slightly different coordinate system and different part coordinates. Different numbers, same problem.\n\nAlso, by now i am guessing this is just how it works, you take the port vector at the beginning and rotate it and live with the error. At least i am sure enough that tomorrow i will try that and see if it works."},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-15T00:51:40Z","Content":"\u003E \n\u003E That would not work. The way this system works is that engine and wing positions and orientations are in the frame of reference where port is x, up is y and forward is z. If i choose different starting axes then the starting positions of the engines and wings would be different again, and i would not have gained anything because i get the same exact problem with a slightly different coordinate system and different part coordinates. Different numbers, same problem.\n\u003E Also, by now i am guessing this is just how it works, you take the port vector at the beginning and rotate it and live with the error. At least i am sure enough that tomorrow i will try that and see if it works.\n\nHmm?\n\nHow would it change anything? It\u0027s defining the axes beforehand really easily. Could you elaborate?\n\nWhat\u0027s the root cause of the error? Diagnosing it could save you here..."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-15T00:59:56Z","Content":"\u003E \n\u003E How would it change anything? It\u0027s defining the axes beforehand really easily. Could you elaborate?\n\u003E What\u0027s the root cause of the error? Diagnosing it could save you here...\n\nGetting the axes initially is not really a problem, as i am saying you can set up the port vector in the beginning and then rotate it with the craft.\n\nWhat worries me is the error that accumulates over time, because if you rotate the port vector every tick the craft rotates you do get floating point errors. For long missions talking dozens of years there will be *a lot* of ticks and these errors will accumulate, both changing the value for roll and making the port vector not perpendicular to the forward vector any more. Which is where i asked myself if there is not a better way. Which vector exactly you take and how exactly the axes are oriented doesn\u0027t matter, because this problem is from the rotation of the extra vector so it\u0027s always there if you take the \u0022initialize vector and then rotate it with the craft\u0022 approach."},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-15T01:04:34Z","Content":"\u003E \n\u003E Getting the axes initially is not really a problem, as i am saying you can set up the port vector in the beginning and then rotate it with the craft.\n\u003E What worries me is the error that accumulates over time, because if you rotate the port vector every tick the craft rotates you do get floating point errors. For long missions talking dozens of years there will be *a lot* of ticks and these errors will accumulate, both changing the value for roll and making the port vector not perpendicular to the forward vector any more. Which is where i asked myself if there is not a better way. Which vector exactly you take and how exactly the axes are oriented doesn\u0027t matter, because this problem is from the rotation of the extra vector so it\u0027s always there if you take the \u0022initialize vector and then rotate it with the craft\u0022 approach.\n\nDo you have a Patched-Conics Approximation set up, or at least one where the exact position can be determined beforehand? If so, skip certain ticks.\n\nAnd what would these errors cause?"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-03-15T01:12:09Z","Content":"\u003E \n\u003E How do i get the second (i.e. port) vector for a complete description of the attitude? The only possibility i came up with so far is that i set it up manually once when the simulation begins, and then rotate it whenever the craft rotates.\n\nThat depends. You need local coordinate system to draw the ship\u0027s parts. Also to simulate the forces on all of the ship\u0027s parts. Clearly, a real ship can rotate. So the side/port vector will change with the ship\u0027s roll. If you want to simulate flight, you should keep track of it. And yes, errors will accumulate, but if you have stable flight, that will be consistent with typical effects of things like parasitic drag and other sources of torque on the craft.\n\nOn the other hand, if your simulation doesn\u0027t care about the ship\u0027s roll, and you wish to simulate it as if the ship was maintaining constant attitude, your best bet is to simply choose a vector that\u0027s orthogonal to heading and the radial. In other words, just take ship\u0027s position vector in global coordinate system, which is along the radial, and cross it into ship\u0027s velocity vector, which I assume you treat as your forward vector. The resulting vector will be in the port direction. You just need to normalize it. The only potential problem is if ship\u0027s velocity becomes purely radial. You might want to check for that if you think it\u0027s ever a possibility."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-15T01:13:04Z","Content":"\u003E \n\u003E Do you have a Patched-Conics Approximation set up, or at least one where the exact position can be determined beforehand? If so, skip certain ticks.\n\u003E And what would these errors cause?\n\nNo, i have full n-body physics. Not yet gravity torque, but that will be implemented later too. Anyway, tick times may go up to the order of seconds for no thrust, but that will still be a lot of ticks over decades.\n\nAs for the errors, it would cause an error in the value for roll (which would be negligible), but more importantly a changing port vector would mean a different orientation too - which has implications for everything, because it is used for transformations, and you have to transform everything for thrust and lift forces, so it can have an effect on both translation and rotation of the craft, which can be fatal if the errors become big enough.\n\nAnd as for the order of magnitude of the error, if you assume something like 14-15 significant digits for a double and 1s ticks and saying that an error greater than 1E-6 is significant, it would only be a matter of single digit years.\n\nEDIT:\n\n\u003E \n\u003E If you want to simulate flight, you should keep track of it. And yes, errors will accumulate(...)\n\u003E On the other hand, if your simulation doesn\u0027t care about the ship\u0027s roll (...)\n\nFirst part is what seems to be the consensus. There\u0027s seemingly no other way.\n\nAnd not caring about roll is not an option, while it is possible in theory it would be very limiting and i definitely don\u0027t want that since it is also supposed to become a game, besides a realistic as possible simulation.\n\n**Edited \u003Ctime datetime=\u00222015-03-15T01:17:18Z\u0022 title=\u002203/15/2015 01:17  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 15, 2015\u003C/time\u003E by Kertherina**"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-15T01:18:14Z","Content":"What\u0027s the advantage of n-body physics in this case, then?\n\ndoes the error stem from the equations used or the code itself?"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-03-15T01:25:10Z","Content":"\u003E \n\u003E First part is what seems to be the consensus. There\u0027s seemingly no other way.\n\u003E And not caring about roll is not an option, while it is possible in theory it would be very limiting and i definitely don\u0027t want that since it is also supposed to become a game, besides a realistic as possible simulation.\n\nYup. Then you have to do full rigid body simulation, which means keeping track of the body axies.\n\nThe only additional recommendations I can give are these.\n\n1) If your moment of inertia is a tensor, [Euler\u0027s Equations](https://en.wikipedia.org/wiki/Euler%27s_equations_%28rigid_body_dynamics%29) are probably your best bet for updating craft\u0027s orientation.\n\n2) Precise integration isn\u0027t quite as important for rotation, but I\u0027d still use at least [Velocity Verlet](https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet) method. It\u0027s a bit of work to derive equivalent for Euler\u0027s Laws, but it\u0027s worth it. The integration method for n-body gravity needs to be more robust.\n\n3) Error on the 3 axies will not be exactly the same, and it\u0027s absolutely critical to keep them orthogonal. It\u0027s worth enforcing this with cross products every once in a while."},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-15T01:27:21Z","Content":"\u003E \n\u003E What\u0027s the advantage of n-body physics in this case, then?\n\u003E does the error stem from the equations used or the code itself?\n\nN-body physics isn\u0027t really an advantage for this, neither is it a disadvantage. A more critical question is how i want to deal with gravity torque, if i cut that off once it is weak then i could maintain the orientation vectors over long periods of time without any rotations and thus without error. Can\u0027t be any more precise because i yet have to look into that topic, and i will not do that any time soon.\n\nThe error is floating point errors. It has nothing to do with the code or the equations, it is how the computer handles floating point numbers. Maximum precision for a double is around 15 digits. Beyond that, anything can and will happen. Also, the last digit isn\u0027t even rounded, everything beyond that is just cut off. Add to that a large number of ticks (10^9 - 10^10), and the error starts to become noticeable.\n\nI do use GNU MPFR for arbitrary precision arithmetic so i can just use a higher precision variable, but i was asking because i wasn\u0027t sure there are other / better / more elegant methods of dealing with this since i am pretty new to programming an this is my first big project (the first \u0022bigger than calculating prime numbers\u0022 project even).\n\nEDIT:\n\n@K^2:\n\nThank you, i wasn\u0027t aware of either and will look into those links tomorrow.\n\nAs for the cross products, sounds like a great idea too. I don\u0027t care about the exact roll value anyway, much more important is the orientation of the vector and that it doesn\u0027t mess up transformations. I will definitely implement that.\n\nAnd yes, i plan to improve upon the n-body gravity anyway, currently i just have Cowell\u0027s method and i plan to use Encke\n\n**Edited \u003Ctime datetime=\u00222015-03-15T01:32:12Z\u0022 title=\u002203/15/2015 01:32  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 15, 2015\u003C/time\u003E by Kertherina**"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-03-15T01:39:51Z","Content":"Maybe rounding? I know it\u0027s a basic thing, but is there a function for it? I know there\u0027s one for cutting off the last digits. That would dividing the number sufficiently and taking it\u0027s integer. However, if you use an IF statement, you could round it with integers. Adding one if the decimal behind it is 5 or greater, and just using the INT function of the divided number if the first decimal place is less than 5.\n\nBut rounding seems too simple a solution...\n\nEven if it is used, errors would mount up. But maybe slower?"},{"CreatedByName":"Kertherina","CreatedById":109293,"CreatedDateTime":"2015-03-15T01:44:10Z","Content":"\u003E \n\u003E Maybe rounding? I know it\u0027s a basic thing, but is there a function for it? I know there\u0027s one for cutting off the last digits. That would dividing the number sufficiently and taking it\u0027s integer. However, if you use an IF statement, you could round it with integers. Adding one if the decimal behind it is 5 or greater, and just using the INT function of the divided number if the first decimal place is less than 5.\n\nNo, that doesn\u0027t work because you don\u0027t have those digits to be able to round. That\u0027s the thing, the numbers are only exact up to so many digits / Bits, after which they just stop. If you had the additional digits to round, then you could just use those in the first place."}]}