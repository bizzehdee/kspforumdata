{"TopicId":51690,"ForumId":29,"TopicTitle":"Looking for the root internal part.","CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-03T12:11:45Z","PageNum":1,"Articles":[{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-03T12:11:45Z","Content":"\n\u003Cp\u003ESo I have an InternalModule that, to pool computing resources, wants to find other copies of itself in \u003Cem\u003Eother\u003C/em\u003E props of the same IVA.\u003C/p\u003E\u003Cp\u003EI know how to get a list of modules in an IVA prop, so that\u0027s done -- but how do I get the complete list of \u003Cem\u003Eother\u003C/em\u003E IVA props?\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-11-03T14:27:05Z","Content":"\n\u003Cp\u003EI don\u0027t see any lists/getters within KSPs classes, so apparently the way to go is \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Object.FindObjectsOfType.html\u0022 rel=\u0022external nofollow\u0022\u003Evia Unity\u003C/a\u003E... InternalModule\u0027s part/vessel at least allow you to verify its still your craft.\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-03T19:36:38Z","Content":"\n\u003Cp\u003EThank you, that worked. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EOne other interesting question, though:\u003C/p\u003E\u003Cp\u003ESo assume I have multiple IVAs on that vessel, and both have instances of my module. They will, most probably, end up referring to one module\u0027s instance of that support class that is the reason for making this mess.\u003C/p\u003E\u003Cp\u003EWhat exactly happens when the vessel separates into two? I imagine two new vessels will be freshly created, the old vessel will be destroyed, and my initialization will run again, but am I correct?\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2013-11-03T20:18:40Z","Content":"\n\u003Cp\u003EHaven\u0027t used InternalModues yet, but just from looking at the API I think its a simple hierarchy... [Vessel-]Part can have an InternalModel, model can have multiple InternalProps, who themselves have InternalModules. Just like you have a Vessel\u0026gt;Parts\u0026gt;PartModule structure. So i would expect individual instances for each of the parts IVA, and them being transfered to another vessel just like a PartModule... in that case you would have to subscribe to a vessel modification event. Ofc thats just guess-work because of how their classes look and those similarity. Some documentation about it would be awesome... maybe you have the spare time to write down what you will find out?\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-03T21:03:45Z","Content":"\n\u003Cp\u003EIf I find out anything. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Right now, I think I\u0027ll just put off the idea of sharing computing resources for later and come back to it in case it becomes a problem.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EP.S. \u003C/strong\u003EI do have an idea though.\u003C/p\u003E\u003Cp\u003ESince I missed that Part has an internalModel reference, it\u0027s actually not too hard to limit my subclass sharing to a single IVA. I just need to:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003ELoop through all parts and grab those which have internalModels.\u003C/li\u003E\u003Cli\u003EInternalModel has a list of props. Loop through that to get a list of InternalProps.\u003C/li\u003E\u003Cli\u003ELoop through those until the module finds itself. Now it knows which InternalModel is relevant and can only share the computing module per-pod.\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat should be good enough and will prevent any potential problems on decoupling, since so far, you can\u0027t decouple pod furniture. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-03T21:22:55Z\u0022 title=\u002211/03/2013 09:22  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 3, 2013\u003C/time\u003E by Mihara\u003C/strong\u003E\n\u003Cbr\u003EP.S.\n\u003C/span\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2013-11-04T10:27:53Z","Content":"\n\u003Cp\u003EAnd for the record, this solution seems to work:\u003C/p\u003E\u003Cp\u003ELoop through parts of this vessel, find the parts with an internal, find self -- the part we found ourselves in is the part we want to look for neighbours in.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\t\t\tforeach (Part part in vessel.parts) {\u003Cbr\u003E\t\t\t\tPart currentpod = null;\u003Cbr\u003E\t\t\t\tif (part.internalModel != null) {\u003Cbr\u003E\t\t\t\t\tforeach (InternalProp prop in part.internalModel.props) {\u003Cbr\u003E\t\t\t\t\t\tMyInternalModuleClass myself = prop.FindModelComponent\u0026lt;MyInternalModuleClass\u0026gt; ();\u003Cbr\u003E\t\t\t\t\t\tif (myself != null \u0026amp;\u0026amp; myself == this) {\u003Cbr\u003E\t\t\t\t\t\t\tcurrentpod = part;\u003Cbr\u003E\t\t\t\t\t\t\tbreak;\u003Cbr\u003E\t\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\t// This should leave us with a reference to the particular pod we\u0027re in at some point. From there...\u003Cbr\u003E\t\t\t\tif (currentpod != null) {\u003Cbr\u003E\t\t\t\t\tforeach (InternalProp prop in currentpod.internalModel.props) {\u003Cbr\u003E\t\t\t\t\t\tMyInternalModuleClass other = prop.FindModelComponent\u0026lt;MyInternalModuleClass\u0026gt; ();\u003Cbr\u003E\t\t\t\t\t\tif (other != null \u0026amp;\u0026amp; other != this) {\u003Cbr\u003E                                                        //... Do whatever we wanted...\u003Cbr\u003E\t\t\t\t\t\t\tbreak;\u003Cbr\u003E\t\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}