{"TopicId":25424,"ForumId":20,"TopicTitle":"Game Calculator","CreatedByName":"superlou","CreatedById":62342,"CreatedDateTime":"2013-05-04T15:07:30Z","PageNum":1,"Articles":[{"CreatedByName":"superlou","CreatedById":62342,"CreatedDateTime":"2013-05-04T15:07:30Z","Content":"\n\u003Cp\u003EI\u0027ve seen a few posts that go pretty deep into some excellent math. I was wondering if anybody would have a use for a tool to experiment with writing gameplay optimizations? I\u0027ve duct-taped a demo \u003Ca href=\u0022http://gath.louissimons.com/\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E that is a paper-thin (and ugly, don\u0027t forget ugly) wrapper over the \u003Ca href=\u0022http://www.sagemath.org/\u0022 rel=\u0022external nofollow\u0022\u003ESage\u003C/a\u003E mathematics platform. Sage is pretty awesome and covers CAS and matrix operations using a python-like syntax.\u003C/p\u003E\u003Cp\u003EAnyway, if there\u0027s some interest, I\u0027ll try to keep developing and make it more of a useable tool rather than a tech demo. Open to any comments and suggestions. It currently doesn\u0027t have basic nicities like version control or permissions, so you might want to play nice with each other\u0027s tools. It\u0027s also on a dirt cheap VPS so I apologize if it\u0027s not the fastest site out there.\u003C/p\u003E\u003Cp\u003EThanks,\u003C/p\u003E\u003Cp\u003ELouis\u003C/p\u003E\n"},{"CreatedByName":"SunJumper","CreatedById":27062,"CreatedDateTime":"2013-05-04T15:53:09Z","Content":"\n\u003Cp\u003EI\u0027ve developed a code piece that does the above in C, for eccentric orbits (e up to 1, not more), for Kerbin only at the moment (can do it for other KSP bodies, may add an option for custom bodies too).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E#include \u0026lt;math.h\u0026gt; \u003Cbr\u003E#include \u0026lt;stdio.h\u0026gt; \u003Cbr\u003E\u003Cbr\u003Eint main(void) \u003Cbr\u003E\u003Cbr\u003E{ \u003Cbr\u003E\u003Cbr\u003Efloat apoapsis; \u003Cbr\u003Efloat periapsis; \u003Cbr\u003Efloat radius[17] = {1,1,1,1,600000,1,1,1,1,1,1,1,1,1,1,1,1};\u003Cbr\u003Efloat mu[17] = {1,1,1,1,3.5316e12,1,1,1,1,1,1,1,1,1,1,1,1};\u003Cbr\u003Eint planet; \u003Cbr\u003Efloat soi[17] = {1,1,1,1,84159286,1,1,1,1,1,1,1,1,1,1,1,1};\u003Cbr\u003Efloat eccentricity; \u003Cbr\u003Efloat vp; \u003Cbr\u003Efloat va; \u003Cbr\u003Eint i;\u003Cbr\u003Efloat vp2; \u003Cbr\u003Efloat va2; \u003Cbr\u003Efloat guess = 1000;\u003Cbr\u003Eint repeat; \u003Cbr\u003E\u003Cbr\u003Erepeat = 1; \u003Cbr\u003E\u003Cbr\u003Ewhile (repeat != 0) \u003Cbr\u003E{ \u003Cbr\u003Eplanet = 17; \u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eprintf(\u0022Velocity Calculator\\n\u0022); \u003Cbr\u003Eprintf(\u0022Pick a body - \\n\u0022); \u003Cbr\u003Eprintf(\u0022Sun - 0\\n\u0022); \u003Cbr\u003E    printf(\u0022Moho - 1\\n\u0022); \u003Cbr\u003E    printf(\u0022Eve - 2\\n\u0022); \u003Cbr\u003E        printf(\u0022Gilly - 3\\n\u0022); \u003Cbr\u003E    printf(\u0022Kerbin - 4\\n\u0022); \u003Cbr\u003E        printf(\u0022Mun - 5\\n\u0022); \u003Cbr\u003E        printf(\u0022Minmus - 6\\n\u0022); \u003Cbr\u003E    printf(\u0022Duna - 7\\n\u0022); \u003Cbr\u003E        printf(\u0022Ike - 8\\n\u0022); \u003Cbr\u003E    printf(\u0022Dres - 9\\n\u0022); \u003Cbr\u003E    printf(\u0022Jool - 10\\n\u0022); \u003Cbr\u003E        printf(\u0022Laythe - 11\\n\u0022); \u003Cbr\u003E        printf(\u0022Vall - 12\\n\u0022); \u003Cbr\u003E        printf(\u0022Tylo - 13\\n\u0022); \u003Cbr\u003E        printf(\u0022Bop - 14\\n\u0022); \u003Cbr\u003E        printf(\u0022Pol - 15\\n\u0022); \u003Cbr\u003E    printf(\u0022Eeloo - 16\\n\u0022); \u003Cbr\u003Ewhile (planet \u0026gt; 16 || planet \u0026lt; 0) \u003Cbr\u003E{ \u003Cbr\u003Eprintf(\u0022Pick your body:\u0022); \u003Cbr\u003Escanf(\u0022%d\u0022, \u0026amp;planet); \u003Cbr\u003E\u003Cbr\u003E} \u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eprintf(\u0022Input Periapsis altitude (m):\u0022); \u003Cbr\u003Escanf(\u0022%f\u0022, \u0026amp;periapsis); \u003Cbr\u003Eprintf(\u0022Input Apoapsis altitude (m):\u0022); \u003Cbr\u003Escanf(\u0022%f\u0022, \u0026amp;apoapsis);\u003Cbr\u003Eeccentricity = (apoapsis - periapsis)/(apoapsis \u002B periapsis \u002B 2*radius[planet]);\u003Cbr\u003Eprintf(\u0022%f\\n %f\\n\u0022, eccentricity, mu[planet]);\u003Cbr\u003Evp2 = (1\u002Beccentricity)*mu[planet]/(periapsis \u002B radius[planet]);\u003Cbr\u003Eva2 = (1-eccentricity)*mu[planet]/(apoapsis \u002B radius[planet]);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eva = sqrt(va2);\u003Cbr\u003Evp = sqrt(vp2);\u003Cbr\u003Eprintf(\u0022Periapsis velocity is: %f\\n\u0022, vp);\u003Cbr\u003Eprintf(\u0022Apoapsis velocity is: %f\\n\u0022, va);\u003Cbr\u003E\u003Cbr\u003Eif (apoapsis \u0026gt; soi[planet])\u003Cbr\u003E{\u003Cbr\u003Eprintf (\u0022Warning, you will escape into the parent SOI!\\n\u0022);\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eprintf(\u0022Repeat? Enter zero for no, any other integer for yes\\n\u0022);\u003Cbr\u003Escanf(\u0022%d\u0022, \u0026amp;repeat);\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Ereturn 0;\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"superlou","CreatedById":62342,"CreatedDateTime":"2013-05-04T16:35:31Z","Content":"\n\u003Cp\u003EHi SunJumper. I converted the C code to Sage: \u003Ca href=\u0022http://gath.louissimons.com/tools/3\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://gath.louissimons.com/tools/3\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI need to figure out how to have my preprocessor identify strings properly. Currently, when you enter the body name, you need to wrap it in quotes. So, if I enter \u0027kerbin\u0027, 70000, and 73000, I get:\u003C/p\u003E\u003Cp\u003EEccentricity: 0.00297619047619048\u003C/p\u003E\u003Cp\u003EPeriapsis velocity: 2285.64390920694\u003C/p\u003E\u003Cp\u003EApoapsis velocity: 2299.28954448579\u003C/p\u003E\n"},{"CreatedByName":"superlou","CreatedById":62342,"CreatedDateTime":"2013-05-04T16:37:53Z","Content":"\n\u003Cp\u003EWhoops, swapped periapsis and apoapsis. How about:\u003C/p\u003E\u003Cp\u003EEccentricity: 0.00297619047619048\u003C/p\u003E\u003Cp\u003EApoapsis velocity: 2285.64390920694\u003C/p\u003E\u003Cp\u003EPeriapsis velocity: 2299.28954448579\u003C/p\u003E\n"}]}