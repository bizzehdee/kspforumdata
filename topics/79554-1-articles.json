{"TopicId":79554,"ForumId":36,"TopicTitle":"[0.90] TestFlight [0.4.6.1][04FEB15] -Configurable, extensible, parts research \u0026amp; reliability system","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T00:33:29Z","PageNum":1,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T00:33:29Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003ETestFlight\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EA configurable, extensible, parts research and reliability system for Kerbal Space Program (KSP).\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EWhat Is TestFlight?\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ETestFlight is a persistent, parts based, research and reliability system. It gives you a reason to do test flights of your rockets. Test flights let your engineers generate flight data, which can then be analyzed to further improve the reliability of your rocket parts. Flight data generated on a part is persistent, and carries over to new rockets flown with those parts.\u003C/p\u003E\u003Cp\u003EIn a nutshell; Fly your parts more, generate flight data, get more reliable parts. But TestFlight is much more!\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ELicense\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ETestFlight is released on the Creative Commons 4.0 by-nc-sa License. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/4.0/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://creativecommons.org/licenses/by-nc-sa/4.0/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EGitHub - Source Code\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EBug Tracker\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/issues\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/issues\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EReleases\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.1.0 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.1.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.1.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.0 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.1 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.3.0 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.3.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.3.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.4.0 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.4.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.4.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.4.5 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EStock\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.5-Stock\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.5-Stock\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ERealismOverhaul\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.5-RealismOverhaul\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.5-RealismOverhaul\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.4.6 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EStock\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6-Stock\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6-Stock\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ERealismOverhaul\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6-RealismOverhaul\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6-RealismOverhaul\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.4.6.1 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EStock\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6.1-Stock\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6.1-Stock\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ERealismOverhaul\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6.1-RealismOverhaul\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/0.4.6.1-RealismOverhaul\u003C/a\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev.0.4.6.1 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E ShutdownEngine failure should now also shutdown the visual effects playing with certain mods like RealPlume/Smoekscreen\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E ShutdownEngine failure now uses the common EngineModuleWrapper\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E ReducedMaxThrust should now work properly with RF/MFT or any other ModuleEngineConfigs based mod\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E TestFlight now has AVC .version files. It does \u003Cstrong\u003Enot\u003C/strong\u003E include miniAVC, but if you are using the full AVC mod (which I \u003Cstrong\u003Ehighly suggest\u003C/strong\u003E because its awesome) you should now be notified of updates\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E TestFlight now generates CKAN files so should be on CKAN soon\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E FIX Fixed a bug in Failure modules that was preventing the \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduFail\u003C/span\u003E\u003C/strong\u003E\u0060 and \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduRepair\u003C/span\u003E\u003C/strong\u003E\u0060 properties from working. Unfortunately due to the way KSP works, you will need to create new craft for this fix to take effect. Any existing craft or saved .craft files will not work.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev.0.4.6 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E FIX #21 When triggering a random failure, skip ones marked as disabled\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E FIX #22 Only add positive flight data. Should resolve issue with 0 or negative du showing in MSD\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E NEW #23 Parts can now gain bonus flight data when they fail, and when failures are repaired. After all, we\u0027re supposed to learn from our failures! New properties \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduFail\u003C/span\u003E\u003C/strong\u003E\u0060 and \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduRepair\u003C/span\u003E\u003C/strong\u003E\u0060 added to Failure modules and implemented automatically by the base class.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E NEW #26 Failures can be \u0022one-shot\u0022 which means the bad stuff from the failure happens but the part is not placed into a failed state and continues to operate (if possible). New property \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EoneShot\u003C/span\u003E\u003C/strong\u003E\u0060 added to Failure modules.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E NEW #29 Support for EngineIgnitor mod. The IgnitionFail Failure Module can optionally restore a used up ignition when it fails. New property \u0060\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003ErestoreIgnitionCharge\u003C/span\u003E\u003C/strong\u003E\u0060 added to TestFlightFailure_IgnitionFail Module\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E FIX EngineCycle Reliability was incorrectly modifying Base Failure Rate, and was being enabled when it should have been. Both issues fixed.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E NEW #31 Instead of defining a reliabilityCurve for every one of the possible 33 scopes, even when they were the same, a \u0022default\u0022 scope curve can now be used and TestFlightReliability will use the default scope if a specific one is not found.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003E[RealismOverhaul]\u003C/strong\u003E Removed accidental double definition of Aerobee-150.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003E[RealismOverhaul]\u003C/strong\u003E Re-added use of IgnitionFail failure after bugs were fixed.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003E[RealismOverhaul]\u003C/strong\u003E Added large chance of ignition failure to X-405 Vanguard.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003E[RealismOverhaul]\u003C/strong\u003E WAC-Corporal/Aerobee Line, X-405, and AJ-10-37/42 all use EngineCycle Reliability now, which defines a \u0022bathtub\u0022 curve for reliability over the expected operating cycle of the engine, based on real manufacturer specs. This means the engine will have an increase in failure rate for the first few seconds of operation, smooth out to normal Base Failure Rate for the \u0022Rated Burn Time\u0022 of the engine, and the the failure rate will slowly start increasing as the engine exceeds the manufacturer\u0027s \u0022Rated Burn Time\u0022. Rated burn times: WAC/Aerobee: 47 seconds, X-405: 145 seconds, AJ-10-37/42:L 115 seconds.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev.0.4.5 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E All TestFlight modules can now use a new property \u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Econfiguration\u003C/span\u003E\u003C/strong\u003E. If specified TestFlight will only enable that module if the part\u0027s currently active MFT/RF configuration matches the specified value. This allows configuration of ModuleEngineConfig parts as if they were their own separate parts.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E DataRecorder runs off \u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EoperatingTime\u003C/span\u003E\u003C/strong\u003E now and therefore will not record data if the part is in a failed state\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003EAPI\u003C/strong\u003E: Added new methods for retrieving TestFlight modules on a part.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003ENew Module\u003C/strong\u003E: Added new Failure module, TestFlightFailure_IgnitionFail which is works a bit different than most, and would be considered a FailureTrigger module. It monitors for an engine to change states from not ignited, to ignited, and applies a chance for that ignition to fail. This chance is based on FlightData and the curve can be configured in .cfg file.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Initial configs for RO starting with the WAC-Corporal/Aerobee engine line.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EoperatingTime\u003C/span\u003E\u003C/strong\u003E is no longer capped at MTBF so parts can still fail after MTBF has passed\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Added new class to TestFlightAPI to wrap up the annoying duality of ModuleEngines and ModulesEnginesFX\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E New property added to all Module Interfaces \u0060TestFlightEnabled\u0060 determines if the module is currently running under TestFlight\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed bug with \u00220 time to repair\u0022 failures not giving the Repair Button\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed bug with failures that had no repair config breaking the system\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Added Technology Transfer system that allows partial flight data to transfer from one part to another part that is considered to be a related technology path.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Swapped to using System.Random for random numbers since apparently KSP spews out the same random sequence each time you load a game.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Added instance of System.Random to TestFlightCore and TestFlightManagerScenario for use by other modules.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed issue #16 - parts continue to accrue operating time even when failed\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed issue #19 - operating time wasn\u0027t respecting IsPartOperating\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E More adjustments to MSD window size to avoid horizontal scrolling\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Updates to build system to allow building Stock and RealismOverhaul configs as needed\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.4.0 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E Rewrote core scenario code. TestFlightManagerScenario is now only a data store for the persistent data, and contains no appreciable game logic\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Redesigned TestFlightCore API to accommodate both the new \u0022push\u0022 method as well as upcoming changes to the underlying reliability and failure architecture\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Flight Data and Flight Time now stored as doubles\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Implemented brand new Test Flight API\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changes to ITestFlightCore interface\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changes to ITestFlightDataRecorder interface\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changes to ITestFlightReliability interface\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Core system refreshes status more often now that there is less of a performance hit\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changed method of configuring how FlightData converts into Reliability in the config files. This is now done using a FloatCurve which allows the modder to make it as simple or as complex as desired\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed a bug that caused reliability to not load properly when going through the VAB with a craft\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fixed a bug causing \u0022sub\u0022 modules to load before the Core and therefore never attaching properly\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Added new Editor Window to see part\u0027s flight data and reliability while building\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Defer loading of prefab data to Start() in case KSP is being slothful. Should fix reliability not loading correctly in Flight.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Initial implementation of new MTBF system\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E MSD now shows MTBF\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E MSD now shows Failure Rate\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Make font in MSD smaller, and adjusted window to accommodate new data\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Updated settings pane in MSD to remove no longer used settings, and rename/tweak ones that are left.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E New Reflection Interface for other mods to integrate with TestFlight. This is still a WIP and feedback is more than welcome.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fix issue #11 - Settings Dropdown List hard to read\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fix issues #14 - Data rate multiplier being incorrectly applied and giving zillions of data units (or none!)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E New API methods to allow repairs to take time to complete\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Expanded Reflection Interface and API\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E MSD can now show failure rate in addtion to MTBF\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E failure rate in MSD now properly shows the \u0027worst\u0027 momentary failure rate\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E DataRecorder modules can now control when a part is considered \u0022operating\u0022\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Mission time is now calculated from activation of first stage, \u003Cstrong\u003Enot\u003C/strong\u003E from MET which KSP does not start until you leave the pad. This means two main things. \u003Cbr\u003E\u003Cul\u003E\u003Cli\u003E Engine test stands are a thing\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E The practice of igniting your first stage \u003Cstrong\u003Ebefore\u003C/strong\u003E releasing the launch clamps is a good one, to ensure you engine(s) are ignited and running properly.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*] Added new Reliability module that increase the failure rate of an engine for the first 5 seconds after ignition. This is also a sample of the power of the new system to do things like this! Currently enabled on liquid engines.\u003C/p\u003E\u003Cp\u003E[*] Added new API methods to control flow of Flight Data\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E SetDataRateLimit()\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E SetDataCap()\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*] Changed failure checks to be a constant chance of failure, rather than increasing towards MTBF\u003C/p\u003E\u003Cp\u003E[*] Added Travis CI integration for continuous integration testing of commits, and automated builds.\u003C/p\u003E\u003Cp\u003E[*] TestFlight configs are now built in JSON and then compiled to standard ModuleManager config format upon build and release. This standardizes the configs, as well as makes them easier to write by removing redundancy and allowing re-use of setups.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.3.0 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EAdded entirely new Master Status Display (MSD) for TestFlight\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded settings window for configuring TestFlight settings in game\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded ability to independently toggle on or off various pieces of part status in the MSD\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded new compact in flight HUD that can be toggled on/off and positioned as desired\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMSD can be either docked, or unlocked and moved around\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMSD now scrolls if there are too many parts to fit\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMSD height is adjustable\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ESettings pane broken into multiple pages so as to not require a huge window\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERepair Requirements tooltip is now color coded for clarity and quick assimilation of data\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EFixed spelling error in settings dialog\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded button to \u0022acknowledge\u0022 a failure. This will clear it from the Flight HUD and the MSD if set to show only failed parts, but will not repair the failure. It will still remain in the full MSD list (If the show only failed parts setting is OFF)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded the failure title to the tooltip of the Flight HUD\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERebuilt ScenarioModule to provide a more reliable data store\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.1 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EFixed Master Status Display not showing some failures\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EFixed configs for stock parts\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.0 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E New Recorder module, FlightDataRecorder_Resources, only records flight data while the part has stored resources.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E New Failure module, TestFlightFailure_ResourceLeak, leaks a named or random resource in the part. Initial leak amount, and amount per second can be configured in config node\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changes to ITestFlightFailure interface to allow mod authors of Failure modules more flexibility\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Added Tooltips to UI part status that indicate repair requirements for part\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Don\u0027t poll any parts on a new vessel until at least 10 seconds after mission start\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Made MasterStatusDisplay GUI window a bit wider\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Documentation updates\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Fix to bug preventing REPAIR{} nodes from loading and persisting properly\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Updated all existing failure modules to use new failure API interface\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Removed old TestFlightFailure_LiquidFuelLeak Failure module. Use the new TestFlightFailure_ResourceLeak instead\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E All new configs to apply TestFlight to Stock Engines and Fuel Tanks. Many thanks to \u003Cstrong\u003EJeffreyCor\u003C/strong\u003E for the help here.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Changed calculation for base reliability based on flight data. Now uses only one variable, reliabilityMultiplier with higher numbers being easier to obtain 100% reliability and lower numbers being easier. Value of 1 puts 100% reliability at 10,000 units of flight data\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Implemented repair systems, as well as initial repair requirements. Note that some repairs have a part they require for repair. These parts can\u0027t be made, yet, but are not required. They are optional and give a repair bonus if present. These parts will soon be available through my companion AddOn MaterialPrinter.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EHow You Can Help\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAt this stage while TestFlight is under early development, there are three important ways that other KSP players can help out.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EIdeas - If you have any ideas for Failure Types or Recorder/Reliability modules please post! By fleshing out the system now with different modules, we can help ensure the API is solid for the future.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EBuild Modules. If you are a KSP Modder, I would love some extra help in writing modules for the system. They are very easy to make. If you are interested in helping please let me know.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMake ModuleManager Configs. If you know how to make config files, I could sure use some help adding configs for both Stock/Stock-alike parts, and Realism Overhaul. Please let me know!\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETesting. As alpha releases are made, you can help out by testing them out and reporting any bugs via the Issue Tracker on GitHub, and any feedback, questions, or discussion on how the system works here in this thread is most welcome.\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EFlightData\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe more you fly parts, the more flight data they record, which in turns improves reliability. As stated, this is persistent. That means that if you launch a \u0022Super Rocket 1\u0022 with a Mainsail engine, that mainsail generates let\u0027s say 10,000 units of flight data during the flight. Now you go back to the VAB and build \u0022Super Rocket 2\u0022 which also uses the mainsail. That instance of the mainsail starts with 10,000 units of flight data already from the earlier flight. That means test flights make your rockets more reliable!\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EReliability and Failures\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ETestFlight calculates reliability using the flight data recorded by a part, based on various criteria and mathematical equations. It will periodically make failure checks against this data and if a part is determined to have failed, it will generate failure events.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ETestFlight is Configurable and Extensible\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe real beauty of TestFlight is that it is extremely configurable by the end user, or by mod authors who want to integrate it into their own mods. TestFlight works on a series of pluggable PartModules that give full control over how reliability is calculated and what failures are possible - all on a per part basis if desired. Further more, all of the various options can be configured by the user or mod authors, such as minimum and maximum reliability ratings, failure rates, repair costs, and more.\u003C/p\u003E\u003Cp\u003EOn top of all that, TestFlight comes with a public API that allows mod authors to further extend the system! Mod authors can easily add additional failure types, or change how flight data is recorded, or how reliability is calculated. The API for example could allow a mod author to easily extend the system to penalize the reliability of individual parts as they get old.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ETestFlight - A First Look\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/_6mBrQB0Ek4?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EMaster Status Display\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EIntroducing the TestFlight Master Status Display (MSD). The MSD is how you track the status of TestFlight enabled parts on your vessel. It lets you see, at a glance, the status of all the parts, their accumulated flight data, and any failures that have occurred.\u003C/p\u003E\u003Cblockquote lang=\u0022en\u0022\u003E\u003Ca href=\u0022//imgur.com/a/y2lIH\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EDocumentation for Modders\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EIf you are a KSP modder interested in extending the TestFlight system to add your own Recorder, Reliability, or Failure modules, please see the additional documentation here: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/88187-WIP-TestFlight-v0-1-0-Alpha-A-configurable-extensible-parts-research-eliability-system?p=1635489\u0026amp;viewfull=1#post1635489\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/88187-WIP-TestFlight-v0-1-0-Alpha-A-configurable-extensible-parts-research-eliability-system?p=1635489\u0026amp;viewfull=1#post1635489\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ESample Part Config\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EMoved sample config into Modder documentation to save space in main post.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-05T02:55:48Z\u0022 title=\u002202/05/2015 02:55  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 5, 2015\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"BrutalRIP","CreatedById":59065,"CreatedDateTime":"2014-07-26T01:22:51Z","Content":"\n\u003Cp\u003ESounds interesting will keep my eye on this\u003C/p\u003E\n"},{"CreatedByName":"Rakird","CreatedById":114407,"CreatedDateTime":"2014-07-26T18:21:41Z","Content":"\n\u003Cp\u003EHello Aghatorn, it will be similar to what the RPL project used on the probes right? I\u0027ll follow it closely i loved that data gathering concept, a shame RPL isn\u0027t working anymore. Ty and regards.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T18:27:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Rakird\u0022 data-cite=\u0022Rakird\u0022\u003E\u003Cdiv\u003EHello Aghatorn, it will be similar to what the RPL project used on the probes right? I\u0027ll follow it closely i loved that data gathering concept, a shame RPL isn\u0027t working anymore. Ty and regards.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEh kind of but not really. I do agree with you though that the way that works is very nice. Actually I have a second project not yet announced that expands upon the Custom Science stuff specifically so you might want to keep an eye out for that \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Rakird","CreatedById":114407,"CreatedDateTime":"2014-07-26T18:29:47Z","Content":"\n\u003Cp\u003EAlright, let me know when it comes out \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E, if it\u0027s tech tree related even better! Btw do you know something similar to RPL? I can\u0027t find any progression mod that starts with unmanned flight and then keeps evolving. Ty and Regards!\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T18:43:27Z","Content":"\n\u003Cp\u003EWell you are making me speak ahead of myself, but yes. These AddOns i\u0027m working on now are to build the foundation for an RSS/RO based career campaign that I will be making. RPL is great, and I love it, it just doesn\u0027t quite jive with the direction I would prefer to go. So I am working on my own version thereof. TestFlight and the later upcoming tentatively named S.A.M., Scientific Analysis Module, form the core of my future campaign.\u003C/p\u003E\n"},{"CreatedByName":"BrutalRIP","CreatedById":59065,"CreatedDateTime":"2014-07-30T00:44:03Z","Content":"\n\u003Cp\u003Eany news on this?\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-07-30T01:53:22Z","Content":"\n\u003Cp\u003EYeah, just want to chime in regarding how awesome this is \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-30T02:14:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BrutalRIP\u0022 data-cite=\u0022BrutalRIP\u0022\u003E\u003Cdiv\u003Eany news on this?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPatience please \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I\u0027m on vacation right now so unable to get a lot of work done. The core is in place, but i\u0027ve been having some turmoil figuring out how to handle the API.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EYeah, just want to chime in regarding how awesome this is \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks Nathan!\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-08-05T16:38:40Z","Content":"\n\u003Cp\u003EHey all,\u003C/p\u003E\u003Cp\u003ESo I just got back from vacation on Sunday. I\u0027m a little distracted because my Oculus Rift came in while I was gone, and its just amazing, especially in Elite: Dangerous \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnyway I did get some time to start digging back into this yesterday. Its always a bit slow getting back into code after a noticeable time away, but I managed to get the API basics working, and tested and it all looks good. Next up I need to get the persistence between instances of parts working, but that shouldn\u0027t be too hard. I already did some tests before I started, and i\u0027ve got the groundwork in place.\u003C/p\u003E\n"},{"CreatedByName":"Joeythompson31","CreatedById":126465,"CreatedDateTime":"2014-11-24T06:13:44Z","Content":"\n\u003Cp\u003EPlease tell me this isn\u0027t dead!? This seems like it would be great.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-22T20:02:32Z","Content":"\n\u003Cp\u003ENot dead exactly, but unfortunately the work I do comes in spurts where sometimes I am not doing a thing and other times I am working my arse off. Unfortunately the last few months have been the latter, so I just haven\u0027t had the time to work on this. It is still on my plate for my next bout of free time. Sorry \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-23T00:23:32Z","Content":"\n\u003Cp\u003ESo one thing I didn\u0027t consider in my previous reply, is the holidays are coming up and I will have free time between Christmas and New Years, so while I make no promises, I might be able to get some good progress over the break. The main hindrance besides KSP updates since Aug, is the old adage that code you haven\u0027t looked at in months might as well have been written by someone else \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThat said I just took a look at my code -- and thank for for OSX\u0027s Time Machine backups because apparently my GitHub wasn\u0027t up to date -- and it turns out I was a lot closer to an initial release than I thought. So I will try real hard to get something out here over the break, though it will be only an initial incomplete alpha.\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-23T01:25:21Z","Content":"\n\u003Cp\u003EThis is a very interesting idea. I hope it goes well, I\u0027m looking forward to giving it a try when it is ready \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-24T06:36:17Z","Content":"\n\u003Cp\u003EHey all,\u003C/p\u003E\u003Cp\u003EI have gotten the base persistence system in place and working excellent. I\u0027ve made a very short, extremely boring, video showing the system in action.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/7PDwbTsSruY?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n"},{"CreatedByName":"lextacy","CreatedById":107955,"CreatedDateTime":"2014-12-24T07:52:27Z","Content":"\n\u003Cp\u003Ehi, im looking forward to this as the direction seems to be amazing compared to the Dangit mod. Im hoping as you say \u0022user\u0022 configurable that we have control in what parts this can be applied to? For example I install this mod and want to test some new engines that will go on a new launch vehicle (Falcon 9 Heavy) BUT I have a long standing list of launchers that have made many flights. I would not want the reliability tests/failures to apply to these due to them being past successful launchers (pre-testFlight). Is this the type of user configurability we are talking here?\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-24T15:07:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lextacy\u0022 data-cite=\u0022lextacy\u0022\u003E\u003Cdiv\u003Ehi, im looking forward to this as the direction seems to be amazing compared to the Dangit mod. Im hoping as you say \u0022user\u0022 configurable that we have control in what parts this can be applied to? For example I install this mod and want to test some new engines that will go on a new launch vehicle (Falcon 9 Heavy) BUT I have a long standing list of launchers that have made many flights. I would not want the reliability tests/failures to apply to these due to them being past successful launchers (pre-testFlight). Is this the type of user configurability we are talking here?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou have full control over what parts they go on to, and the system is configurable on a per part basis. That said, let me be clear. The entire point is it is persistent per part \u003Cstrong\u003Etype\u003C/strong\u003E not part \u003Cstrong\u003Einstance\u003C/strong\u003E. So if you apply the TestFlight modules to say the Merlin engine (this is done using ModuleManager) then it applies to **all** Merlin Engines. So if some had already flown then those would be affected as well.\u003C/p\u003E\u003Cp\u003EIf your concern is over applying it to parts that have already flown, then I can keep that in mind and see if there is a way to somehow exclude \u0022pre-TestFlight instances\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Kibble","CreatedById":131042,"CreatedDateTime":"2014-12-24T16:58:44Z","Content":"\n\u003Cp\u003EI absolutely love this mod you are making - in fact I have been actively looking for something like it. Reliability of hardware heritage is extremely important to human spaceflight (and human technology in general, I guess). I just hope there are failure modes for all kinds of different parts not just engines and stuff! \u0026lt;3\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-24T18:01:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kibble\u0022 data-cite=\u0022Kibble\u0022\u003E\u003Cdiv\u003EI just hope there are failure modes for all kinds of different parts not just engines and stuff! \u0026lt;3\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe beauty of the system is that it itself is moddable. That means that if there isn\u0027t a failure type you want, you or another modder could add it to the TestFlight system.\u003C/p\u003E\u003Cp\u003EThat said I do want to bundle in a decent amount of typical reliability and failure systems, and I am open to suggestions.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-24T18:58:01Z","Content":"\n\u003Cp\u003EI am looking to get some user input on the Failure system if anyone wants to chime in.\u003C/p\u003E\u003Cp\u003EThe way the failure system works is in two stages.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStage 1:\u003C/strong\u003E In stage 1, the TestFlight system polls all the TestFlight_Reliability modules on the part to generate a total chance of the part failing during that poll. The part can have one or more TestFlight_Reliability modules attached, which all contribute to the total reliability of the part. A roll is then made against that reliability to determine if a failure occurs during this poll. If no failure occurs, then the system does nothing until the next polling cycle. If a failure \u003Cstrong\u003Eis\u003C/strong\u003E determined to have occurred, then we move on to stage 2.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStage 2:\u003C/strong\u003E In stage 2, we know the part has failed. Now we need to determine how it fails. Does it explode? Does it lose power/thrust? Does it freeze up until restarted? Whatever effects are determined by the TestFlight_Failure modules on the part. There can be one or more of these modules on the part, each defining a specific failure, and how it might be repaired. The question though is how to determine which of the available failures to trigger? And this is where I am looking for input.\u003C/p\u003E\u003Cp\u003EOff the top of my head I can see three obvious ways to determine which failure module to use, but I am certainly open to other ways of doing this if anyone has some.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOption 1:\u003C/strong\u003E Each failure module has a defined chance to occur, and we simply work down the list rolling against each until one fails. The big problem here is that the order the modules are defined would be important, and given that you might have multiple third party mods adding failures, the order can\u0027t be guaranteed, which would be bad.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOption 2:\u003C/strong\u003E All the failure modules on the part are combined into a ToFail table and then a single roll is made against that table. For example if five failure modules are defined, and each is defined as having a 20% chance to fail, then the system would build a table where a roll of 1-19 triggers module A, 20-39 triggers module B, etc. If the total percent chance to fail of all mods is less than or greater than 100%, they would be normalized to 100% when the ToFail table is built. The biggest downside here is that as more failure modules get added by mods, the relative chance for a specific failure to occur starts to drop. A mod author may have intended Failure A to happen roughly 50% of the time, but now the user has installed a bunch of mods that adds 10 more failures to the part, and suddenly that 50% chance for Failure A is more like 5%.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOption 3:\u003C/strong\u003E A bit of both. Each failure module has two things defined. A Severity and a Probability. Two rolls can be done, one to determine the severity of the failure, then a second against the failure mods of that severity. The second roll could be done using either Option 1 or 2. If done using option 2, then while the same inherent issue with #2 applies, the relative lessening of the probability is reduced somewhat by the spreading out of failures in the roll.\u003C/p\u003E\u003Cp\u003ERight now I am leaning towards option #3, but I haven\u0027t decided. Frankly I am not happy with any of them and feel there must be a better way, one that scales well with more failures added by additional mods.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E: I might be over complicating this. I need to sit down and follow the logic, but I think I might have a solution. If you take a single random number in a range, say 1 to 100, the odds of any number are equal. It isn\u0027t until you start combining rolls and modifiers and what not that distribution becomes uneven. So through out the whole % tables and what not. Why not simply have the failure module define a \u0022weight\u0022. Then add up all the weights to a total, and roll 1 to total. If one module has a weight of 10 and another as 20, then the second module would be twice as likely to get picked over the first. I like it, it feels right, but I haven\u0027t dug into it yet to make sure it is solid.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-24T19:12:05Z\u0022 title=\u002212/24/2014 07:12  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 24, 2014\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-24T20:39:26Z","Content":"\n\u003Cp\u003EThe option 4 under the edit sounds the most logical as it give something with a higher chance of failure a higher chance of failing, which conversely translates into a greater reliability for a part really becoming more reliable.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-24T20:41:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EThe option 4 under the edit sounds the most logical as it give something with a higher chance of failure a higher chance of failing, which conversely translates into a greater reliability for a part really becoming more reliable.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah the more I think about it I agree, and that is the route I am currently taking unless someone chimes in with something better. I hindsight I don\u0027t know where I Was going with the first 3 options, as they really don\u0027t work at all in an expanding system.\u003C/p\u003E\n"},{"CreatedByName":"lextacy","CreatedById":107955,"CreatedDateTime":"2014-12-24T23:36:59Z","Content":"\n\u003Cp\u003Ei agree with option \u0022edit\u0022 A weighted average could go like this :\u003C/p\u003E\u003Cp\u003E-Weight is based on part reliability. So a lets say the Mainsail has low reliability rating and the Poodle has a high rating. The Mainsail could have a 2% chance of major failure and 1 % of minor failure. The Poodle can then have a 1% change of major and .5% of minor.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-26T18:43:10Z","Content":"\n\u003Cp\u003ESo just an update on this. Good news is pretty much all of the core TestFlight system is in place and working(ish). Right now I am working on smoothing out as many rough edges as I can and starting on the GUI. I am aiming to get an initial Alpha release soon, but I want to stress that initial releases will be aimed more towards 1) Mod developers who are curious to play with the system and 2) Technically inclined players who are curious to play with the system. The first releases will be very rough, and will only have a few built in modules initially.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T01:05:56Z","Content":"\n\u003Cp\u003EGetting ready to push out a release. The OP has been edited to show a sample part config to define all the pieces of TestFlight on a part.\u003C/p\u003E\n"}]}