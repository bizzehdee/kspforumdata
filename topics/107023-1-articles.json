{"TopicId":107023,"ForumId":29,"TopicTitle":"Programmatic access to MODEL nodes?","CreatedByName":"Kanddak","CreatedById":55380,"CreatedDateTime":"2015-05-03T00:21:57Z","PageNum":1,"Articles":[{"CreatedByName":"Kanddak","CreatedById":55380,"CreatedDateTime":"2015-05-03T00:21:57Z","Content":"\n\u003Cp\u003EHi folks,\u003C/p\u003E\u003Cp\u003EI\u0027ve been trying my hand at plugin programming this weekend, and I\u0027ve mostly been able to make progress by studying API documentation and the source of other plugins, but I\u0027m having no luck figuring out how a partmodule can get access to its part\u0027s MODEL nodes, or to whatever Unity objects those get turned into when KSP parses cfg files. Does anyone know what I might be missing or where I should be looking for it?\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-03T00:26:17Z","Content":"\n\u003Cp\u003EYou could try parsing the .cfg directly\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.partInfo.partConfig\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou could also explore using \u0022part.GetComponent\u0026lt;type\u0026gt;\u0022 if you know what you\u0027re looking for\u003C/p\u003E\n"},{"CreatedByName":"Kanddak","CreatedById":55380,"CreatedDateTime":"2015-05-03T05:34:29Z","Content":"\n\u003Cp\u003EUpdate after much experimentation, with some information about the component hierarchy I wish I\u0027d seen documented somewhere:\u003C/p\u003E\u003Cp\u003Epart.GetComponents\u0026lt;Component\u0026gt;() basically seems to be the highest-level way to explore all of a part\u0027s inner workings and returns an array of various stuff, including a Transform which is the only thing that\u0027s interesting to the present purpose.\u003C/p\u003E\u003Cp\u003Epart.GetComponent\u0026lt;Transform\u0026gt;() is one of the elements of that array, and still isn\u0027t very interesting. It just has another Transform called \u0022model\u0022 as a child.\u003C/p\u003E\u003Cp\u003E\u0022model\u0022 is part.GetComponent\u0026lt;Transform\u0026gt;().GetChild(0), but part has another method that lets us skip all that; we can also get \u0022model\u0022 via part.FindModelComponent\u0026lt;Transform\u0026gt;().\u003C/p\u003E\u003Cp\u003E\u0022model\u0022 is interesting because its direct children correspond to MODEL nodes from the cfg. Transforms don\u0027t seem to offer up an array of their children, but we can call Transform.childCount() to find out how many there are and then Transform.GetChild(i) to access the i\u0027th child. Transform parent-child relationships aren\u0027t the same as object-component relationships; \u0022model\u0022 is its own component, so that part.FindModelComponent\u0026lt;Transform\u0026gt;().FindModelComponents\u0026lt;Transform\u0026gt;() just returns an array with only \u0022model\u0022 in it, not the array of its children that I initially hoped for.\u003C/p\u003E\u003Cp\u003EThe Transforms corresponding to the MODEL nodes each have children corresponding to the hierarchy of meshes within each model.\u003C/p\u003E\u003Cp\u003EIf we call part.FindModelComponents\u0026lt;Transform\u0026gt;(), the result is the entire model hierarchy flattened into a list. It seems to follow the order in which the MODEL nodes are declared in the cfg.\u003C/p\u003E\u003Cp\u003Epart.FindModelTransform(s) gets a Transform by name, but the name for each MODEL node has \u0022(Clone)\u0022 appended to it, so if your MODEL node had \u0022model = YourMod/model\u0022 then you\u0027d get its associated Transform by part.FindModelTransform(\u0022YourMod/model(Clone)\u0022). You can also directly use the name of a mesh within a model. part.FindModelTransforms(s) gets all the Transforms that share a name, which might be useful when you\u0027re reusing a model repeatedly. We can also call Transform.FindChild(s) to look one up by name from the transform instead of from the part; again, Transform doesn\u0027t seem to be very friendly to retrieving an array of it children.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-05-03T21:07:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003EYou could try parsing the .cfg directly\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.partInfo.partConfig\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou could also explore using \u0022part.GetComponent\u0026lt;type\u0026gt;\u0022 if you know what you\u0027re looking for\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s null now except in the loading scene. ConfigNodes are not serializable anymore.\u003C/p\u003E\n"}]}