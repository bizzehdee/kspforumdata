{"TopicId":75310,"ForumId":29,"TopicTitle":"Call animation from a plugin?","CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-17T16:38:13Z","PageNum":1,"Articles":[{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-17T16:38:13Z","Content":"\n\u003Cp\u003EHi\u003C/p\u003E\u003Cp\u003ESo, I\u0027ve been working on some deployable wheels.. I\u0027ve written some code to deploy all at the same time, which works perfectly, but I\u0027m stuck trying to call the animation from within the foreach(Repulsor) loop:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E        [KSPEvent(guiActive = true, guiName = \u0022Deploy All\u0022, active = true)]        public void deploy()\u003Cbr\u003E        {\u003Cbr\u003E            foreach (Repulsor rp in this.vessel.FindPartModulesImplementing\u0026lt;Repulsor\u0026gt;())\u003Cbr\u003E            {\u003Cbr\u003E                rp.Events[\u0022deploy\u0022].active = false;\u003Cbr\u003E                rp.Events[\u0022retract\u0022].active = true;\u003Cbr\u003E                rp.deployed = true;\u003Cbr\u003E                print(\u0022Deploying\u0022);\u003Cbr\u003E                foreach (WheelCollider wc in rp.GetComponentsInChildren\u0026lt;WheelCollider\u0026gt;())\u003Cbr\u003E                {\u003Cbr\u003E                    wc.suspensionDistance = rp.Rideheight;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }//end Deploy All\u003Cbr\u003E    }//end class\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAny ideas? I can call the animation and bind to the gui button with \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE{\u003Cbr\u003Ename = ModuleAnimateGeneric\u003Cbr\u003EanimationName = Fire\u003Cbr\u003EstartEventGUIName = Deploy All\u003Cbr\u003EendEventGUIName = Retract All\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E \u003C/p\u003E\u003Cp\u003Ein the .cfg file, but this only plays the animation for the selected wheel, not all of them in the vessel. Any hints would be greatly appreciated. I\u0027ve looked at ModuleAnimateGeneric in Visual Studio, but I can\u0027t quite figure out how to call it and apply to \u0027rp\u0027 each time within the loop.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-28T09:22:25Z\u0022 title=\u002206/28/2014 09:22  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 28, 2014\u003C/time\u003E by lo-fi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-06-17T19:00:45Z","Content":"\n\u003Cp\u003EAre you trying to call the animation from ModuleAnimateGeneric with your plugin, or are you creating your own animation code and trying to call that?\u003C/p\u003E\u003Cp\u003EModuleAnimateGeneric can only handle playing one animation at a time for a single part. Even if you have multiple modules, with multiple buttons, only one animation will play. I think some of the other animation plugins that are available (Firespitter, Advanced Animator) will allow you to simultaneously play multiple animations on the same part; they still have the multiple button problem though.\u003C/p\u003E\u003Cp\u003EYou can probably use your plugin to call multiple \u0022deploy\u0022 events using those modules.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-18T01:06:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DMagic\u0022 data-cite=\u0022DMagic\u0022\u003E\u003Cdiv\u003EAre you trying to call the animation from ModuleAnimateGeneric with your plugin, or are you creating your own animation code and trying to call that?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was trying to figure out how to call an animation from ModuleAnimateGeneric with my own plugin, but I\u0027m unsure if it\u0027s really suitable. I can get an animation to play on the part I\u0027ve used the button on, but say for example I have four of the same part on this vessel, my plugin code correctly finds all of them with a foreach loop and does it\u0027s thing. However, everything I\u0027ve tried so far results in the animation only playing for the part I used the button on, so I\u0027m clearly doing something wrong. I\u0027ve tried using the standard Unity animation.Play, but this results in the same thing.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EModuleAnimateGeneric can only handle playing one animation at a time for a single part. Even if you have multiple modules, with multiple buttons, only one animation will play. I think some of the other animation plugins that are available (Firespitter, Advanced Animator) will allow you to simultaneously play multiple animations on the same part; they still have the multiple button problem though.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat may or may not be a problem, depending on the specifics. I\u0027m only trying to trigger one animation on each part, though simultaneously, rather than multiple animations on each part.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EYou can probably use your plugin to call multiple \u0022deploy\u0022 events using those modules.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s sort of what I\u0027ve been trying to do but failing miserably at. Been looking through plenty of source, but everyone seems to do it very differently with their own brand of code and I\u0027m a little brain-fried trying to unpick it. Few seem to comment their code very much - not that I want to sound ungrateful it\u0027s up there to look at(!), but it does make it harder for a newbie. I think I get what you mean, but could you elaborate slightly?\u003C/p\u003E\u003Cp\u003EGrateful for the help \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-18T01:09:18Z\u0022 title=\u002206/18/2014 01:09  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 18, 2014\u003C/time\u003E by lo-fi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-06-18T03:09:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003EThat\u0027s sort of what I\u0027ve been trying to do but failing miserably at. Been looking through plenty of source, but everyone seems to do it very differently with their own brand of code and I\u0027m a little brain-fried trying to unpick it. Few seem to comment their code very much - not that I want to sound ungrateful it\u0027s up there to look at(!), but it does make it harder for a newbie. I think I get what you mean, but could you elaborate slightly?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI wrote some pseudo-code for you. It\u0027s untested so it might need some adjustments or have a couple bugs, but it should lead you in the right direction\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class Repulsor : PartModule\u003Cbr\u003E{\u003Cbr\u003E    /* --- your other code ----- */\u003Cbr\u003E\u003Cbr\u003E    public void PlayAnimation()\u003Cbr\u003E    {\u003Cbr\u003E        // note: assumes one ModuleAnimateGeneric (or derived version) for this part\u003Cbr\u003E        // if this isn\u0027t the case, needs fixing\u003Cbr\u003E        ModuleAnimateGeneric myAnimation = part.FindModulesImplementing\u0026lt;ModuleAnimateGeneric\u0026gt;().SingleOrDefault();\u003Cbr\u003E        if (!myAnimation)\u003Cbr\u003E        {\u003Cbr\u003E            // this shouldn\u0027t happen under normal circumstances\u003Cbr\u003E            Log.Error(\u0022Repulsor animation error: Did not find ModuleAnimateGeneric on {0}\u0022, part.ConstructID);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            // if another mod were to replace all ModuleAnimateGenerics with \u003Cbr\u003E            // their own (derived) version and we tried to call the derived\u003Cbr\u003E            // Toggle method with myAnimation.Toggle(), we\u0027ll end up calling\u003Cbr\u003E            // the base version instead of the most derived version we want.\u003Cbr\u003E            // If they do any critical logic in there, you\u0027ve opened yourself\u003Cbr\u003E            // up to all sorts of bugs or strange behaviour\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                // Get the most-derived type and use its Toggle method so we don\u0027t\u003Cbr\u003E                // skip any plugin-derived versions\u003Cbr\u003E                myAnimation.GetType().InvokeMember(\u0022Toggle\u0022, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.IgnoreReturn | System.Reflection.BindingFlags.InvokeMethod, null, myAnimation, null);\u003Cbr\u003E            }\u003Cbr\u003E            catch (Exception e)\u003Cbr\u003E            {\u003Cbr\u003E                Log.Error(\u0022Failed to invoke \\\u0022Toggle\\\u0022 using GetType(), falling back to base type after encountering exception {0}\u0022, e);\u003Cbr\u003E                myAnimation.Toggle();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiActive = true, guiName = \u0022Deploy All\u0022, active = true)]\u003Cbr\u003E    public void deploy()\u003Cbr\u003E    {\u003Cbr\u003E        // note: this loop will find \u0022us\u0022 too. Intended\u003Cbr\u003E        foreach (Repulsor rp in this.vessel.FindPartModulesImplementing\u0026lt;Repulsor\u0026gt;())\u003Cbr\u003E        {\u003Cbr\u003E            // it\u0027s risky to assume all Repulsors are in the same animation state.\u003Cbr\u003E            // If the player manages to attach a new one with KAS or docks two\u003Cbr\u003E            // vessels together with repulsors in different states, you can see\u003Cbr\u003E            // how there could be a problem with just toggling animations on all\u003Cbr\u003E            // repulsors\u003Cbr\u003E            if (rp.Events[\u0022deploy\u0022].active == this.Events[\u0022deploy\u0022].active)\u003Cbr\u003E            {\u003Cbr\u003E                print(string.Format(\u0022{1} Repulsor attached to {0}\u0022, rp.part.ConstructID, rp.Events[\u0022deploy\u0022].active ? \u0022Deploying\u0022 : \u0022Retracting\u0022));\u003Cbr\u003E                rp.PlayAnimation(); \u003Cbr\u003E\u003Cbr\u003E                // was this intended? Once deployed and \u003Cbr\u003E                // retracted, Repulsor will never be deployable again\u003Cbr\u003E                //rp.Events[\u0022deploy\u0022].active = false;\u003Cbr\u003E                //rp.Events[\u0022retract\u0022].active = true;\u003Cbr\u003E                //rp.deployed = true;\u003Cbr\u003E\u003Cbr\u003E                rp.deployed = !rp.deployed;\u003Cbr\u003E                rp.Events[\u0022deploy\u0022].active = !rp.deployed;\u003Cbr\u003E                rp.Events[\u0022retract\u0022].active = rp.deployed;\u003Cbr\u003E\u003Cbr\u003E                // I assume whether the wheel is deployed matters here\u003Cbr\u003E                foreach (WheelCollider wc in rp.GetComponentsInChildren\u0026lt;WheelCollider\u0026gt;())\u003Cbr\u003E                    wc.suspensionDistance = rp.deployed ? rp.Rideheight : StowedDistance;\u003Cbr\u003E                //wc.suspensionDistance = rp.Rideheight;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }//end Deploy All\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-18T03:15:54Z\u0022 title=\u002206/18/2014 03:15  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 18, 2014\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-18T09:36:51Z","Content":"\n\u003Cp\u003EThank you, thank you, thank you! I shall go and study and report back \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027d left error handling out for the moment so as not to confuse myself, so thanks for the pointers there too.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-18T16:12:36Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022color:#3E3E3E;\u0022\u003ExEvilReeperx - thank you, that was exactly what I needed and you\u0027ve shown me a lot of useful things in the process. Couple of little kinks to iron out, but it worked more or less straight out of the box. I\u0027ll post the full code later as I\u0027ve got a few questions I\u0027d like to ask if you don\u0027t mind, but I need to tidy the unholy mess I made in the process of getting it all together. In the meantime, here is what you\u0027ve helped me create. It\u0027s nowhere near ready, untextured, awaiting a cool anti-grav effect in repulsor mode, the model still needs work and I\u0027ve got a lot of testing/tweaking to do before I even consider an initial release, but I\u0027m pretty happy so far. The devil is in the detail! \u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#3E3E3E;\u0022\u003EI humbly present my attempt at making rovers practical on low gravity bodies. Bear with it, the interesting bit comes about 30 secs in - these are no ordinary wheels \u003C/span\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/2RVUcIyQgtA?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003EI name this vessel the Kelorean. Careful hitting 88m/s \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#3E3E3E;\u0022\u003E(and yes, I did mess up the gui labels, fixing that right now!):\u003C/span\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-18T16:19:40Z\u0022 title=\u002206/18/2014 04:19  PM\u0022 data-short=\u002210 yr\u0022\u003EJune 18, 2014\u003C/time\u003E by lo-fi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-06-18T21:53:48Z","Content":"\n\u003Cp\u003ELooks cool! \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E I\u0027ll post the full code later as I\u0027ve got a few questions I\u0027d like to ask if you don\u0027t mind\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot at all\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-18T23:12:40Z","Content":"\n\u003Cp\u003EThank you, really appreciate you taking the time to help. Glad you like my crazy invention \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo, here it is. It adds tweakable suspension settings in the VAB/SPH (based on my tweakable wheel plugin) and in-flight conversion to my anti-grav repulsors:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/* * KSP [0.23.5] Anti-Grav Repulsor plugin by Lo-Fi\u003Cbr\u003E * Much inspiration and a couple of code snippets for deployment taken from BahamutoD\u0027s Critter Crawler mod. Huge respect, it\u0027s a fantastic mod \u003Cbr\u003E * \u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace Repulsor\u003Cbr\u003E{\u003Cbr\u003E    [KSPModule(\u0022Repulsor\u0022)]\u003Cbr\u003E    public class Repulsor : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public WheelCollider thiswheelCollider;        //container for wheelcollider we grab from wheelmodule\u003Cbr\u003E        public WheelCollider mywc;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        [KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = \u0022Height\u0022), UI_FloatRange(minValue = 0, maxValue = 2.00f, stepIncrement = 0.25f)]\u003Cbr\u003E        public float Rideheight;        //this is what\u0027s tweaked by the line above\u003Cbr\u003E        [KSPField(isPersistant = true, guiActive = false, guiActiveEditor = true, guiName = \u0022Strength\u0022), UI_FloatRange(minValue = 0, maxValue = 3.00f, stepIncrement = 0.2f)]\u003Cbr\u003E        public float SpringRate;        //this is what\u0027s tweaked by the line above\u003Cbr\u003E        [KSPField(isPersistant = true, guiActive = false, guiActiveEditor = true, guiName = \u0022Damping\u0022), UI_FloatRange(minValue = 0, maxValue = 1.00f, stepIncrement = 0.025f)]\u003Cbr\u003E        public float DamperRate;        //this is what\u0027s tweaked by the line above\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public bool deployed = true;\u003Cbr\u003E//forward friction values\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float forasymSlip;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float forasymValue;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float forextrmSlip;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float forextremValue;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float forstiff;\u003Cbr\u003E//sideways friction values\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float sideasymSlip;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float sideasymValue;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float sideextrmSlip;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float sideextremValue;\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public float sidestiff;\u003Cbr\u003E\u003Cbr\u003E//begin start\u003Cbr\u003E        public override void OnStart(PartModule.StartState start)  //when started\u003Cbr\u003E        {\u003Cbr\u003E            // degub only: print(\u0022onstart\u0022);\u003Cbr\u003E            base.OnStart(start);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (HighLogic.LoadedSceneIsEditor)\u003Cbr\u003E            {\u003Cbr\u003E                foreach (ModuleWheel mw in part.FindModulesImplementing\u0026lt;ModuleWheel\u0026gt;())\u003Cbr\u003E                {\u003Cbr\u003E               //     mw.steeringMode = ModuleWheel.SteeringModes.ManualSteer;\u003Cbr\u003E                    mw.Events[\u0022LockSteering\u0022].guiActiveEditor = false;\u003Cbr\u003E                    mw.Events[\u0022DisableMotor\u0022].guiActiveEditor = false;\u003Cbr\u003E                    mw.Events[\u0022EnableMotor\u0022].guiActiveEditor = false;\u003Cbr\u003E                    mw.Events[\u0022InvertSteering\u0022].guiActiveEditor = false;\u003Cbr\u003E                    mw.Events[\u0022DisableMotor\u0022].guiActiveEditor = false;      //stop the gui items for wheels showing in editor\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                //ADD CODE HERE TO DEAL WITH WHETHER WE ARE IN WHEEL OR REPULSOR MODE AT START OF FLIGHT!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                foreach (ModuleWheel mw in this.vessel.FindPartModulesImplementing\u0026lt;ModuleWheel\u0026gt;())\u003Cbr\u003E                {\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                    foreach (WheelCollider wc in mw.GetComponentsInChildren\u0026lt;WheelCollider\u0026gt;())\u003Cbr\u003E                    {\u003Cbr\u003E                //        mw.steeringMode = ModuleWheel.SteeringModes.ManualSteer;\u003Cbr\u003E                        mw.Events[\u0022LockSteering\u0022].guiActive = false;\u003Cbr\u003E                        mw.Events[\u0022DisableMotor\u0022].guiActive = false;\u003Cbr\u003E                        mw.Events[\u0022EnableMotor\u0022].guiActive = false;\u003Cbr\u003E                        mw.Events[\u0022InvertSteering\u0022].guiActive = false;\u003Cbr\u003E                        mw.Events[\u0022DisableMotor\u0022].guiActive = false;        //stop the gui items for wheels showing in flight\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (SpringRate == 0) //check if a value exists already. This is important, because if a wheel has been tweaked from the default value, we will overwrite it!\u003Cbr\u003E            {\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                thiswheelCollider = part.gameObject.GetComponentInChildren\u0026lt;WheelCollider\u0026gt;();   //find the \u0027wheelCollider\u0027 gameobject named by KSP convention.\u003Cbr\u003E                mywc = thiswheelCollider.GetComponent\u0026lt;WheelCollider\u0026gt;();     //pull collider properties\u003Cbr\u003E                JointSpring userspring = mywc.suspensionSpring;         //set up jointspring to modify spring property\u003Cbr\u003E                SpringRate = userspring.spring;                                    //pass to springrate to be used in the GUI\u003Cbr\u003E                DamperRate = userspring.damper;\u003Cbr\u003E                Rideheight = mywc.suspensionDistance;\u003Cbr\u003E                WheelFrictionCurve forwardfric = mywc.forwardFriction;\u003Cbr\u003E                forasymValue = forwardfric.asymptoteValue;\u003Cbr\u003E                forextremValue = forwardfric.extremumValue;\u003Cbr\u003E                forstiff = forwardfric.stiffness;\u003Cbr\u003E                WheelFrictionCurve sidefric = mywc.sidewaysFriction;\u003Cbr\u003E                sideasymValue = forwardfric.asymptoteValue;\u003Cbr\u003E                sideextremValue = forwardfric.extremumValue;\u003Cbr\u003E                sidestiff = forwardfric.stiffness;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E            else //set the values from those stored in persistance\u003Cbr\u003E            {\u003Cbr\u003E                thiswheelCollider = part.gameObject.GetComponentInChildren\u0026lt;WheelCollider\u0026gt;();   //find the \u0027wheelCollider\u0027 gameobject named by KSP convention.\u003Cbr\u003E                mywc = thiswheelCollider.GetComponent\u0026lt;WheelCollider\u0026gt;();     //pull collider properties\u003Cbr\u003E                //suspension:\u003Cbr\u003E                JointSpring userspring = mywc.suspensionSpring;         //set up jointspring to modify spring property\u003Cbr\u003E                userspring.spring = SpringRate;\u003Cbr\u003E                userspring.damper = DamperRate;\u003Cbr\u003E                mywc.suspensionSpring = userspring;\u003Cbr\u003E                //forward friction:\u003Cbr\u003E                WheelFrictionCurve forwardfric = mywc.forwardFriction;\u003Cbr\u003E                forwardfric.asymptoteValue = forasymValue;\u003Cbr\u003E                forwardfric.extremumValue = forextremValue;\u003Cbr\u003E                forwardfric.stiffness = forstiff;\u003Cbr\u003E                //sideways friction\u003Cbr\u003E                WheelFrictionCurve sidefric = mywc.sidewaysFriction;\u003Cbr\u003E                forwardfric.asymptoteValue = sideasymValue;\u003Cbr\u003E                forwardfric.extremumValue = sideextremValue;\u003Cbr\u003E                sidefric.stiffness = sidestiff;\u003Cbr\u003E\u003Cbr\u003E                if (deployed == true) //is the deployed flag set? set the rideheight appropriately\u003Cbr\u003E                {\u003Cbr\u003E                    thiswheelCollider.suspensionDistance = Rideheight;\u003Cbr\u003E                    Events[\u0022deploy\u0022].active = false;\u003Cbr\u003E                    Events[\u0022retract\u0022].active = true;                            //make sure gui starts in deployed state\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    thiswheelCollider.suspensionDistance = Rideheight * 1.5f;                  //set retracted if the deployed flag is not set\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }//end start\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                [KSPAction(\u0022Toggle Deployed\u0022)]\u003Cbr\u003E                public void AGToggleDeployed(KSPActionParam param)\u003Cbr\u003E                {\u003Cbr\u003E                    if (deployed)\u003Cbr\u003E                    {\u003Cbr\u003E                        retract();\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        deploy();\u003Cbr\u003E                    }\u003Cbr\u003E                }//End Deploy toggle\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            public void PlayAnimation()\u003Cbr\u003E            {\u003Cbr\u003E                // note: assumes one ModuleAnimateGeneric (or derived version) for this part\u003Cbr\u003E                // if this isn\u0027t the case, needs fixing. [COLOR=#0000ff][U]That\u0027s cool, I called in the part.cfg[/U][/COLOR]\u003Cbr\u003E                ModuleAnimateGeneric myAnimation = part.FindModulesImplementing\u0026lt;ModuleAnimateGeneric\u0026gt;().SingleOrDefault();\u003Cbr\u003E                if (!myAnimation)\u003Cbr\u003E                {\u003Cbr\u003E                    // this shouldn\u0027t happen under normal circumstances\u003Cbr\u003E              //      Log.Error(\u0022Repulsor animation error: Did not find ModuleAnimateGeneric on {0}\u0022, part.ConstructID);\u003Cbr\u003E                    return; [COLOR=#0000ff][U]//the Log.Error line fails syntax check with \u0027The name \u0027Log\u0027 does not appear in the current context. I\u0027m unsure quite why, though I\u0027ve never used Log, only print[/U][/COLOR]\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    // if another mod were to replace all ModuleAnimateGenerics with \u003Cbr\u003E                    // their own (derived) version and we tried to call the derived\u003Cbr\u003E                    // Toggle method with myAnimation.Toggle(), we\u0027ll end up calling\u003Cbr\u003E                    // the base version instead of the most derived version we want.\u003Cbr\u003E                    // If they do any critical logic in there, you\u0027ve opened yourself\u003Cbr\u003E                    // up to all sorts of bugs or strange behaviour\u003Cbr\u003E                    try\u003Cbr\u003E                    {\u003Cbr\u003E                        // Get the most-derived type and use its Toggle method so we don\u0027t\u003Cbr\u003E                        // skip any plugin-derived versions\u003Cbr\u003E                        myAnimation.GetType().InvokeMember(\u0022Toggle\u0022, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.IgnoreReturn | System.Reflection.BindingFlags.InvokeMethod, null, myAnimation, null);\u003Cbr\u003E                    }   [COLOR=#0000ff][U]// Could you explain what\u0027s going on a little more here please? I can\u0027t make head or tail of quite what it does. I need to work out how to hide the \u0027toggle\u0027 button on the GUI too.[/U][/COLOR]\u003Cbr\u003E                    catch (Exception e)\u003Cbr\u003E                    {\u003Cbr\u003E               //         Log.Error(\u0022Failed to invoke \\\u0022Toggle\\\u0022 using GetType(), falling back to base type after encountering exception {0}\u0022, e);\u003Cbr\u003E                        myAnimation.Toggle(); \u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            [KSPEvent(guiActive = true, guiName = \u0022Wheel\u0022, active = true)]\u003Cbr\u003E            public void retract()\u003Cbr\u003E            {\u003Cbr\u003E                // note: this loop will find \u0022us\u0022 too. Intended\u003Cbr\u003E                foreach (Repulsor rp in this.vessel.FindPartModulesImplementing\u0026lt;Repulsor\u0026gt;())\u003Cbr\u003E                {\u003Cbr\u003E                    // it\u0027s risky to assume all Repulsors are in the same animation state.\u003Cbr\u003E                    // If the player manages to attach a new one with KAS or docks two\u003Cbr\u003E                    // vessels together with repulsors in different states, you can see\u003Cbr\u003E                    // how there could be a problem with just toggling animations on all\u003Cbr\u003E                    // repulsors\u003Cbr\u003E                    //if (rp.Events[\u0022retract\u0022].active == this.Events[\u0022retract\u0022].active)\u003Cbr\u003E                    if(rp.deployed==true) [COLOR=#0000ff][U]//I couldn\u0027t get the line above to work correctly. It only activated the symmetry partner of the part I activated from[/U][/COLOR]\u003Cbr\u003E                    {\u003Cbr\u003E                        print(string.Format(\u0022{1} Repulsor attached to {0}\u0022, rp.part.ConstructID, rp.Events[\u0022retract\u0022].active ? \u0022Retracting\u0022 : \u0022Deploying\u0022));\u003Cbr\u003E                        rp.PlayAnimation();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        // was this intended? Once deployed and \u003Cbr\u003E                        // retracted, Repulsor will never be deployable again\u003Cbr\u003E                        rp.Events[\u0022deploy\u0022].active = true;\u003Cbr\u003E                        rp.Events[\u0022retract\u0022].active = false;\u003Cbr\u003E                        rp.deployed = false;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        //rp.deployed = !rp.deployed;\u003Cbr\u003E                        //rp.Events[\u0022deploy\u0022].active = !rp.deployed;\u003Cbr\u003E                        //rp.Events[\u0022retract\u0022].active = rp.deployed;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E[COLOR=#0000ff]                            [U]//Ah, they get toggled again by the opposite routine. I was trying to steer[/U]\u003Cbr\u003E                            [U]//clear of toggling and keep it as \u0027if this wheel is already deployed\u0027 do nothing[/U]\u003Cbr\u003E                            [U]//and move on to deploy any that aren\u0027t. [/U][/COLOR]\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        // I assume whether the wheel is deployed matters here\u003Cbr\u003E                        foreach (WheelCollider wc in rp.GetComponentsInChildren\u0026lt;WheelCollider\u0026gt;())\u003Cbr\u003E                        {\u003Cbr\u003E                            wc.suspensionDistance = rp.Rideheight * 1.75f;\u003Cbr\u003E                            WheelFrictionCurve sidefric = wc.sidewaysFriction;\u003Cbr\u003E                            sidefric.asymptoteValue = 0.001f;\u003Cbr\u003E                            sidefric.extremumValue = 0.001f;\u003Cbr\u003E                            sidefric.stiffness = 0f;\u003Cbr\u003E                            wc.sidewaysFriction = sidefric;\u003Cbr\u003E                            //debug only: print(wc.sidewaysFriction.asymptoteValue);\u003Cbr\u003E                            //debug only:print(wc.sidewaysFriction.extremumValue);\u003Cbr\u003E\u003Cbr\u003E                            WheelFrictionCurve forwardfric = wc.forwardFriction;\u003Cbr\u003E                            forwardfric.asymptoteValue = 0.001f;\u003Cbr\u003E                            forwardfric.extremumValue = 0.001f;\u003Cbr\u003E                            forwardfric.stiffness = 0f;\u003Cbr\u003E                            wc.forwardFriction = forwardfric;\u003Cbr\u003E                            //debug only: print(wc.forwardFriction.asymptoteValue);\u003Cbr\u003E                            //debug only: print(wc.forwardFriction.extremumValue);\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            }//end Deploy All\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            [KSPEvent(guiActive = true, guiName = \u0022Repulsor\u0022, active = true)]\u003Cbr\u003E            public void deploy()\u003Cbr\u003E            {\u003Cbr\u003E                // note: this loop will find \u0022us\u0022 too. Intended\u003Cbr\u003E                foreach (Repulsor rp in this.vessel.FindPartModulesImplementing\u0026lt;Repulsor\u0026gt;())\u003Cbr\u003E                {\u003Cbr\u003E                    // it\u0027s risky to assume all Repulsors are in the same animation state.\u003Cbr\u003E                    // If the player manages to attach a new one with KAS or docks two\u003Cbr\u003E                    // vessels together with repulsors in different states, you can see\u003Cbr\u003E                    // how there could be a problem with just toggling animations on all\u003Cbr\u003E                    // repulsors\u003Cbr\u003E                    //if (rp.Events[\u0022deploy\u0022].active == this.Events[\u0022deploy\u0022].active)\u003Cbr\u003E                    if(rp.deployed==false)\u003Cbr\u003E                    {\u003Cbr\u003E                        print(string.Format(\u0022{1} Repulsor attached to {0}\u0022, rp.part.ConstructID, rp.Events[\u0022deploy\u0022].active ? \u0022Deploying\u0022 : \u0022Retracting\u0022));\u003Cbr\u003E                        [COLOR=#0000ff][U]//This line is really helpful. I was going to work out how to print part unique identifiers[/U][/COLOR]\u003Cbr\u003E                        rp.PlayAnimation();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        // was this intended? Once deployed and \u003Cbr\u003E                        // retracted, Repulsor will never be deployable again\u003Cbr\u003E                        rp.Events[\u0022deploy\u0022].active = false;\u003Cbr\u003E                        rp.Events[\u0022retract\u0022].active = true;\u003Cbr\u003E                        rp.deployed = true;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        //rp.deployed = !rp.deployed;\u003Cbr\u003E                        //rp.Events[\u0022deploy\u0022].active = !rp.deployed;\u003Cbr\u003E                        //rp.Events[\u0022retract\u0022].active = rp.deployed;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                        foreach (WheelCollider wc in rp.GetComponentsInChildren\u0026lt;WheelCollider\u0026gt;())\u003Cbr\u003E                        {\u003Cbr\u003E                            //   wc.suspensionDistance = Rideheight;\u003Cbr\u003E                            wc.suspensionDistance = rp.Rideheight;\u003Cbr\u003E                            WheelFrictionCurve forwardfric = wc.forwardFriction;\u003Cbr\u003E                            forwardfric.asymptoteValue = forasymValue;\u003Cbr\u003E                            forwardfric.extremumValue = forextremValue;\u003Cbr\u003E                            forwardfric.stiffness = forstiff;\u003Cbr\u003E                            wc.forwardFriction = forwardfric;\u003Cbr\u003E                            //debug only: print(wc.forwardFriction.asymptoteValue);\u003Cbr\u003E                            //debug only: print(wc.forwardFriction.extremumValue);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                            //sideways friction\u003Cbr\u003E                            WheelFrictionCurve sidefric = wc.sidewaysFriction;\u003Cbr\u003E                            sidefric.asymptoteValue = sideasymValue;\u003Cbr\u003E                            sidefric.extremumValue = sideextremValue;\u003Cbr\u003E                            sidefric.stiffness = sidestiff;\u003Cbr\u003E                            wc.sidewaysFriction = sidefric;\u003Cbr\u003E                            //debug only: print(wc.sidewaysFriction.asymptoteValue);\u003Cbr\u003E                            //debug only: print(wc.sidewaysFriction.extremumValue);\u003Cbr\u003E                        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            }//end Deploy All\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    }//end class\u003Cbr\u003E} //end namespace\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve underlined my comments in the code with questions in blue and left yours in for clarity where I\u0027ve used your snippets. Learned a lot and sorted quite a few things that have been bugging me along the way. The WheelTweak plugin is rather simple in comparison! I\u0027m sure there are better ways to write some of my code, but it works and I need to absorb it a little more before I change too much else. Baby steps, I\u0027m very new to this. Anywhere I\u0027ve really fallen flat on my face? I have yet to test for docking etc, though I got pretty good at making sure load/save/switch vessel worked correctly. KAS needs testing too.\u003C/p\u003E\u003Cp\u003EAgain, thank you - you did indeed point me in the right direction.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-06-19T01:31:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//      Log.Error(\u0022Repulsor animation error: Did not find ModuleAnimateGeneric on {0}\u0022, part.ConstructID);\u003Cbr\u003Ereturn; [COLOR=#0000ff][U]//the Log.Error line fails syntax check with \u0027The name \u0027Log\u0027 does not appear in the current context. I\u0027m unsure quite why, though I\u0027ve never used Log, only print[/U][/COLOR]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI use my own debug routines. That\u0027s equivalent to Debug.LogError(string.format(\u0022Repulsor etc etc {0}\u0022, ...). Sorry, I got used to working with some of my own convenience classes\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Etry\u003Cbr\u003E{\u003Cbr\u003E    // Get the most-derived type and use its Toggle method so we don\u0027t\u003Cbr\u003E    // skip any plugin-derived versions\u003Cbr\u003E    myAnimation.GetType().InvokeMember(\u0022Toggle\u0022, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.IgnoreReturn | System.Reflection.BindingFlags.InvokeMethod, null, myAnimation, null);\u003Cbr\u003E}   [COLOR=#0000ff][U]// Could you explain what\u0027s going on a little more here please? I can\u0027t make head or tail of quite what it does. I need to work out how to hide the \u0027toggle\u0027 button on the GUI too.[/U][/COLOR]\u003Cbr\u003Ecatch (Exception e)\u003Cbr\u003E{\u003Cbr\u003E//  Log.Error(\u0022Failed to invoke \\\u0022Toggle\\\u0022 using GetType(), falling back to base type after encountering exception {0}\u0022, e);\u003Cbr\u003E    myAnimation.Toggle(); \u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA simple myAnimation.Toggle() would work in almost all cases. The problem the above solves is if somebody had a mod that replaced all \u0022ModuleAnimateGeneric\u0022 PartModules with a derived version using something like ModuleManager. I\u0027m sure you\u0027ve noticed there are a lot of potential replacements out there. \u003C/p\u003E\u003Cp\u003EEssentially, what the line does is to use reflection to search through the real underlying type for a method with the name specified and then calls it. It will almost always resolve to ModuleAnimateGeneric.Toggle, but should anyone replace the ModuleAnimateGeneric in your part with an \u0022improved\u0022 version, that method will be run as the derived version author expects and your code won\u0027t break because you accidentally called the wrong method and skipped any extra logic the derived version implemented in its version of Toggle. It\u0027s just a bit of a safety net.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//if (rp.Events[\u0022retract\u0022].active == this.Events[\u0022retract\u0022].active)\u003Cbr\u003Eif(rp.deployed==true) [COLOR=#0000ff][U]//I couldn\u0027t get the line above to work correctly. It only activated the symmetry partner of the part I activated from[/U][/COLOR]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EJust a bug; your way is fine (and better)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=#0000ff][U]//Ah, they get toggled again by the opposite routine. I was trying to steer[/U]\u003Cbr\u003E[U]//clear of toggling and keep it as \u0027if this wheel is already deployed\u0027 do nothing[/U]\u003Cbr\u003E[U]//and move on to deploy any that aren\u0027t. [/U][/COLOR]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I was going by what the state of the wheel was and targeting other wheels that didn\u0027t match that state. The player would have clicked on \u0022Retract all\u0022 if the wheel was already deployed (based on my understanding of your initial snippet), so I figured it\u0027d make the most sense to retract any deployed wheels rather than deploy the undeployed ones.\u003C/p\u003E\u003Cp\u003EYou could give every wheel a \u0022deploy all\u0022 and \u0022retract all\u0022 event that\u0027s active all the time or you could make sure every wheel\u0027s \u0022deploy all\u0022 stays active until all wheels are deployed.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-19T01:47:22Z","Content":"\n\u003Cp\u003EPerfect, that clears pretty much everything up. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ll do some testing and muse on the deploy/retract all issue; you\u0027re right, it needs some work. \u003C/p\u003E\u003Cp\u003EMy next challenge will be to play with transforms and forces to implement anti-roll bar simulation. Thankfully, there is lots of Unity documentation there to draw on so I hope that one will not be too hard. Pairing up wheels on each side will be the trickiest bit, I think, given the freedom of design KSP allows. I\u0027ll post up as things progress. Looking forward to release day and seeing what people do with my creations.\u003C/p\u003E\u003Cp\u003EOwe you a beer! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"}]}