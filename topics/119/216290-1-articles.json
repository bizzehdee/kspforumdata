{"TopicId":216290,"ForumId":119,"TopicTitle":"Does KSP benefit from the X3D CPUs?","CreatedByName":"Motokid600","CreatedById":66349,"CreatedDateTime":"2023-04-07T16:12:37Z","PageNum":1,"Articles":[{"CreatedByName":"Motokid600","CreatedById":66349,"CreatedDateTime":"2023-04-07T16:12:37Z","Content":"\n\u003Cp\u003E\nThese chips supposedly are better for simulation games. So Im wondering if with both KSP1 and KSP2 if we will see any benefits from the AMD X3D series CPUs. I know little to nothing about software, API, game engines and how they work. So I suppose its asking for Unity to take advantage of the v-cache on the X3D chips? I know its probably too early to say for KSP2 given its current status, but for those who know Unity better can we expect any performance advantage from these chips? Pardon my ignorance.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-07T20:46:55Z","Content":"\n\u003Cp\u003E\nI doubt X3D will help with KSP2. It\u0027s a cache improvement, and I don\u0027t think that\u0027s the bottleneck for the game. KSP2 is still main thread bound, and you generally only start getting into L3 cache bottlenecks once you\u0027re making good use of all the threads.\n\u003C/p\u003E\n"},{"CreatedByName":"LoSBoL","CreatedById":174038,"CreatedDateTime":"2023-04-08T14:05:23Z","Content":"\n\u003Cp\u003E\nI\u0027m curious as well,\u00A0 although it\u0027s way to early to tell with KSP2 in its current state. Overall performance needs to be optimized first, but when it does I\u0027d really like to know what would get best performance. I\u0027m currently running an 12700KF, Hypertreading off gets me the same performance as on, likewise with the efficiency cores on or off. X3D CPU\u0027s have been around for a little while now, but its hard to find good comparisons or benchmarks for KSP1 sadly.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Streetwind","CreatedById":98962,"CreatedDateTime":"2023-04-08T14:39:50Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270062\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221680900415\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI doubt X3D will help with KSP2. It\u0027s a cache improvement, and I don\u0027t think that\u0027s the bottleneck for the game. KSP2 is still main thread bound, and you generally only start getting into L3 cache bottlenecks once you\u0027re making good use of all the threads.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s not entirely correct. Whether cache helps or not depends more on the kind of instructions and data the CPU must process.\n\u003C/p\u003E\n\u003Cp\u003E\nIf your application needs to do the same couple dozen things over and over on very similar data, then both the instructions and the majority of the data can be effectively cached, and every new instruction cycle scores a cache hit. This allows the thread to proceed immediately \u003Cspan style=\u0022font-size:9px;\u0022\u003E(for cache latency values of \u0022immediate\u0022)\u003C/span\u003E. If, however, each new instruction is something unpredicatbly new, and requires large amounts or quasi-random selections of data, then the CPU must wait for a main system memory access - or, if it\u0027s really, really unlucky, for a disk access. These things take multiple orders of magnitude longer than reading from cache. While modern CPUs are very proficient at predicting execution order and finding other things to do while they wait for something, that doesn\u0027t make the waiting instruction itself finish any faster. And if that instruction happens to be holding a lock on the main thread, then well, the entire main thread is briefly paused while some file is accessed on the disk.\n\u003C/p\u003E\n\u003Cp\u003E\nThus, different applications respond differently to large amounts of cache. Those that can\u0027t make use of it don\u0027t care, and those that can make use of it will absolutely love it and post massive gains up until they wander into diminishing returns. Which, again, vary from application to application.\n\u003C/p\u003E\n\u003Cp\u003E\nThis does not really rely on fully loading all cores. Even a purely single-threaded application running on an 8-core, 16-thread CPU can love cache, or not.\n\u003C/p\u003E\n\u003Cp\u003E\nIn the case of KSP (1 or 2), the big ticket CPU item is physics simulation for the active vessel. If this task specifically loves cache, then the KSP games will run significantly better on X3D CPUs. If this task doesn\u0027t love cache, there won\u0027t be much of an advantage, even if some other tasks do love cache.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m not sure we can benchmark this effectively on the current version of KSP2, though. It would likely need to be done by someone who has a system with a massive high-end GPU, and two comparable Ryzen CPUs with and without v-cache (such as a 5800X and a 5800X3D). It might involve loading a vessel somewhere in deep space away from all celestial bodies. If the vessel is bonkers enough, it should generate the CPU load needed - but whether the results would be cleanly reproducable enough for a meaningful benchmark, I can\u0027t say.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-08T14:43:59Z\u0022 title=\u002204/08/2023 02:43  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 8, 2023\u003C/time\u003E by Streetwind\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-10T03:06:42Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270299\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221680964790\u0022 data-ipsquote-userid=\u002298962\u0022 data-ipsquote-username=\u0022Streetwind\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 4/8/2023 at 7:39 AM, Streetwind said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat\u0027s not entirely correct. Whether cache helps or not depends more on the kind of instructions and data the CPU must process.\n\u003C/p\u003E\n\u003Cp\u003E\nIf your application needs to do the same couple dozen things over and over on very similar data, then both the instructions and the majority of the data can be effectively cached, and every new instruction cycle scores a cache hit. This allows the thread to proceed immediately \u003Cspan style=\u0022font-size:9px;\u0022\u003E(for cache latency values of \u0022immediate\u0022)\u003C/span\u003E. If, however, each new instruction is something unpredicatbly new, and requires large amounts or quasi-random selections of data, then the CPU must wait for a main system memory access - or, if it\u0027s really, really unlucky, for a disk access. These things take multiple orders of magnitude longer than reading from cache. While modern CPUs are very proficient at predicting execution order and finding other things to do while they wait for something, that doesn\u0027t make the waiting instruction itself finish any faster. And if that instruction happens to be holding a lock on the main thread, then well, the entire main thread is briefly paused while some file is accessed on the disk.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah, and there\u0027s certainly no one-size-fits all - you really have to profile and see what you\u0027re hitting. But as a general rule, a single thread might be L1 or L2 limited. If a single thread is L3 limited, either something\u0027s horribly wrong with your CPU architecture or you are doing something especially awful with your algorithm. A modern L3 is designed to feed 8\u002B threads. If you can saturate that with a single thread without intentionally trying to, any multithreaded task is going to struggle. In case of X3D, you\u0027re only really getting benefits if you blew out your L1 and L2, and the X3D gives you an L3 hit instead of a miss. And X3D isn\u0027t going to help you accessing any memory you\u0027ve never touched before. It only helps if you\u0027ve had other memory access walk all over the relevant cache lines. That happens all the time if you have 20 threads doing their own thing, but if you have mostly the one thread doing the work, it tends to be pretty unlikely.\n\u003C/p\u003E\n\u003Cp\u003E\nBased on everything we\u0027ve seen of KSP2\u0027s performance, I\u0027d be shocked if KSP2 has a lot of L3 misses that X3D would make any difference to. I\u0027d be happy to be proven wrong with a benchmark, but everything we know already heavily favors single-thread optimizations in the architecture, which means faster cores and more L1 and L2, and that\u0027s not at all the sort of things that X3D helps you with.\n\u003C/p\u003E\n"},{"CreatedByName":"Streetwind","CreatedById":98962,"CreatedDateTime":"2023-04-10T08:37:20Z","Content":"\n\u003Cp\u003E\nFair assessment. I guess without a structured test, there\u0027s just no way of knowing.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-10T10:43:16Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270805\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681096002\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBased on everything we\u0027ve seen of KSP2\u0027s performance, I\u0027d be shocked if KSP2 has a lot of L3 misses that X3D would make any difference to. I\u0027d be happy to be proven wrong with a benchmark, but everything we know already heavily favors single-thread optimizations in the architecture, which means faster cores and more L1 and L2, and that\u0027s not at all the sort of things that X3D helps you with.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat couldn\u0027t be further from reality.\u003Cbr\u003E\nI haven\u0027t tested anything in KSP 2, but I can say with certainty that the architecture is very similar to KSP 1.\u003Cbr\u003E\nIt\u0027s a huge single-threaded C# codebase calling in a lot of mostly static, scattered, and large memory allocations.\u003Cbr\u003E\nWhich is why a huge L3 cache does literal wonders, because suddenly all those \u0022not-hot\u0022 but still \u0022grabbed-many-times-every-frame\u0022 memory allocations are in the L3 cache instead of requiring a round trip to RAM.\n\u003C/p\u003E\n\u003Cp\u003E\nI can personally confirm that KSP 1 gets a huge performance increase from the 5800X3D compared to an mildy overclocked 6700K.\u003Cbr\u003E\nFor reference a 6700K has per core L1/L2/L3 cache of 64KB/256KB/2MB vs 64KB/512KB/96MB for the 5800X3D. In terms of raw IPC (with the overclock on the 6700K), the 5800X3D is only 15-25% better (tested with a variety of single threaded benchmarks, including some mildly cache sensitive ones).\u003Cbr\u003E\nYet the effective throughput increase in terms of frame time in KSP 1 is 70-90%.\u003Cbr\u003E\nThis has also been confirmed by other people having doing some (quite rigorous) benchmarking in KSP 1 with a 5800X3D, and is in-line with the results in other games where size of the data set accessed every frame in quite large.\n\u003C/p\u003E\n\u003Cp\u003E\nEdit \u003Cspan\u003E:\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAll this being said, to compare apples to apples, compared to intel 12th/13th gen or to the Ryzen 7XXX series, the 5800X3D is lagging behind quite a lot in terms of raw IPC and frequency, and all those newer gen CPUs (including intel ones) have massively increased L2/L3 caches compared to a 6700K, so the comparative benefit of the extra L3 cache of the *X3D (including the new 7*X3D series) is likely much less dramatic than the above results.\n\u003C/p\u003E\n\u003Cp\u003E\nFor example, in Cities: Skyline (another mainly single-threaded Unity/C# game with very similar bottlenecks as KSP), the 5800X3D only provide a 10-20% frame time increase over a 5800X (non-3D). The 5800X is essentially the same CPU, but with a per-core cache of 64KB/512KB/32MB (vs 96MB for the X3D), but it is clocked a bit higher.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat this demonstrate is that increasing cache size is very beneficial when you go from a case where this is a major bottleneck in a memory-access intensive game, but past the point where you can fit most of the frequently used data set in the cache, increasing cache size stops yielding significant perf improvements. A 6700K with 256KB/2MB of L2/L3 cache per core is vastly bottlenecked in those cases, but the difference between 512Kb/32MB and 512KB/96MB is much less significant, and a similar reasoning applies to Intel 12/13th gen where the per core L2/L3 cache sizes vary from 1MB/20MB on mid/low-tier models to 2MB/33MB on mid/high tier models.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-10T12:12:25Z\u0022 title=\u002204/10/2023 12:12  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 10, 2023\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Streetwind","CreatedById":98962,"CreatedDateTime":"2023-04-10T12:23:57Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270865\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681123396\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis has also been confirmed by other people having doing some (quite rigorous) benchmarking in KSP 1 with a 5800X3D, and is in-line with the results in other games where size of the data set accessed every frame in quite large.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCould you help me find some of those benchmarks done by others? I don\u0027t doubt you, I\u0027m just really curious about the details.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-10T12:44:12Z","Content":"\n\u003Cp\u003E\nThis was on discord in private channels, so I can\u0027t link you, but one people made automated benchmarks, executing a predefined launch sequence in the same savegame, and monitoring frame times with a custom plugin, all that in a relatively heavily modded game. He compared \u003Cspan\u003Ea 6600K @ 4.4Ghz with a 5800X3D. Average frame time was 73 vs 124 FPS in bench 1, 45 vs 89 FPS in bench 2 . 1% lows were 50% better in bench 1, and actually 15% lower in bench 2, which isn\u0027t surprising given that KSP has a chronic issue with some specific heavy loads / cache rebuilds kicking in at semi-regular intervals with a relatively high frequency.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve personally got very similar results in much less rigorous testing both in stock and in a mildly modded game, comparing a \u003Ca href=\u0022/cdn-cgi/l/email-protection\u0022 class=\u0022__cf_email__\u0022 data-cfemail=\u002220161710106b60140e16\u0022\u003E[email\u0026#160;protected]\u003C/a\u003E Ghz and a 5800X3D.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-10T12:49:48Z\u0022 title=\u002204/10/2023 12:49  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 10, 2023\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LoSBoL","CreatedById":174038,"CreatedDateTime":"2023-04-10T15:36:57Z","Content":"\n\u003Cp\u003E\nFound these ;\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 src=\u0022https://www.youtube-nocookie.com/embed/ExjLSWCz3fA?feature=oembed\u0022 title=\u00225800X3D vs. 3700X | Kerbal Space Program | RX 6800 | 1440p\u0022 width=\u0022200\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 src=\u0022https://www.youtube-nocookie.com/embed/0CK3GYGez3E?feature=oembed\u0022 title=\u0022Kerbal Space Program 2 with RTX 4090 vs 2080 TI (Ryzen 7 5800X3D vs 9 3900X)\u0022 width=\u0022200\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow I\u0027d want a direct comparison between something 12th or 13th Gen I7 or I9 compared to a 7800X3D\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022:blush2:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/blush2.png\u0022 title=\u0022:blush2:\u0022\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-10T19:01:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270865\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681123396\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat couldn\u0027t be further from reality.\u003Cbr\u003E\n[...]\u003Cbr\u003E\nI can personally confirm that KSP 1 gets a huge performance increase from the 5800X3D compared to an mildy overclocked 6700K.\u003Cbr\u003E\n[...]\u003Cbr\u003E\nYet the effective throughput increase in terms of frame time in KSP 1 is 70-90%.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat flies in the face of everything I\u0027ve seen profiling other engines. I don\u0027t mean to say that I doubt the results - based on other links this seems to be well established, but no half-way optimized engine should even be allowing that kind of garbage cache performance from its component architecture.\n\u003C/p\u003E\n\u003Cp\u003E\nThat said, Unity keeps doing things I don\u0027t expect from a civilized engine, so I probably should hook up profiling tools to both KSP and KSP2 and take a look at what\u0027s going on there.\n\u003C/p\u003E\n\u003Cp\u003E\nWith that in mind, yes, it would absolutely be worth testing to see if KSP2 is going to be the same way, but also, if it\u0027s still the case with latest Unity, somebody at that company should be reprioritizing what they\u0027re investing their engineering effort into.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-10T20:22:37Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224270944\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681141017\u0022 data-ipsquote-userid=\u0022174038\u0022 data-ipsquote-username=\u0022LoSBoL\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, LoSBoL said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFound these\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m quite skeptical about the results in the first video. Stock KSP with a craft that simple should be getting a solid 150\u002B FPS on a 5800X3D, not 80 FPS. For me (on a 5800X3D), launching a stock Dynawing (~150 parts) results in 280-290 FPS average during launch, 330-340 FPS in space and with ~100 parts on reentry, still getting 160-170 FPS. And I doubt the craft in the video is actually more than 50-60 parts, so something is not right with the setup, like some driver enforced VSync.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224271009\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681153279\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat said, Unity keeps doing things I don\u0027t expect from a civilized engine, so I probably should hook up profiling tools to both KSP and KSP2 and take a look at what\u0027s going on there.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe Unity/Mono pair is certainly part of the reason why things are scaling that way. KSP, and to an even greater extent modded KSP is also far from doing things in an optimized way. It\u0027s a game whose foundations are built on Unity 4 from 12 years ago.\n\u003C/p\u003E\n\u003Cp\u003E\nAs for KSP 2, it\u0027s quite pointless to even try to assess it\u0027s performance at this point. The thing is coded like a C# desktop application, with absolutely zero regard to even the most basic guidelines on to how to use C# correctly in the context of Unity. The thing is spitting 2-3MB of GC allocations \u003Cem\u003Eper frame\u003C/em\u003E, and thta\u0027s only the tip of the iceberg.\n\u003C/p\u003E\n\u003Cp\u003E\nBut to some extent, it\u0027s perfectly understandable to have some types of games benefit from a large L3 cache.\n\u003C/p\u003E\n\u003Cp\u003E\nFactorio is a not entirely, but still mostly single-threaded game, which is quite renowned for being a very optimized codebase using a lot of low level optimizations, especially in terms of memory packing. Yet it benefits \u003Cstrong\u003Emassively\u003C/strong\u003E from the additional L3 cache on a 5800X3D, simply because by nature, it\u0027s \u0022main\u0022 in-memory data set is huge, to the point that a 5800X3D beat a 13900K by a whooping 30%, despite its raw IPC being roughly 50% less...\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-10T20:50:45Z\u0022 title=\u002204/10/2023 08:50  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 10, 2023\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-10T22:01:01Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224271033\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681158157\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFactorio is a not entirely, but still mostly single-threaded game, which is quite renowned for being a very optimized codebase using a lot of low level optimizations, especially in terms of memory packing. Yet it benefits \u003Cstrong\u003Emassively\u003C/strong\u003E from the additional L3 cache on a 5800X3D, simply because by nature, it\u0027s \u0022main\u0022 in-memory data set is huge, to the point that a 5800X3D beat a 13900K by a whooping 30%, despite its raw IPC being roughly 50% less...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFor many \u0022grid\u0022 games and simulations, yes. A lot of simulations in fluid dynamics and lattice QCD employ clever space-filling curves to keep things that are spatially close together closer together in memory, because even when running on GPU with a cache that\u0027s much better optimized for these sort of workloads, the massive datasets that you have to deal with will absolutely destroy you if you don\u0027t pay attention to coherency. (I\u0027ve had cases in simulation where it was worth it to copy a grid transposed for a certain pass, then transpose-copy the data back to get the performance improvement.) So it\u0027s worth the not insignificant computational overhead to go for a very complex layout. For games like Factorio, space-filling curves might not even be an option, so no matter how much you optimize, you\u0027re at a minimum straddling the stride of your grid which will hurt you on L3. And this can get particularly gnarly if you have to execute updates on the grid in a specific order to adhere to all of the game\u0027s rules, and that\u0027s often the case in these sorts of games.\n\u003C/p\u003E\n\u003Cp\u003E\nEven going to something like the aforementioned Cities Skyline, the grid is substantial. Definitely easier to optimize than Factorio\u0027s, but I wouldn\u0027t expect it to work well with the cache with a naive implementation. In KSP, though? If your engine\u0027s component and asset models are coherent, there shouldn\u0027t be\u00A0\u003Cem\u003Ea way\u003C/em\u003E\u00A0for the developers to screw it up. Again, not without trying to. I\u0027m not saying it like Squad didn\u0027t make a mess of it - they most certainly have, but even with the game object model of Unity, the engine should be protecting you from the worst of it. Like, that\u0027s the engine\u0027s frigin\u0027 job. And yes, yes, I know, if individual behavior scripts start allocating left and right, it\u0027s very easy to end up with things tripping over each other, but that\u0027s why you supposedly outsource the engine development to the professionals. If you\u0027re writing the engine, you control the allocation and how the scripts are executed. Pool the memory. Group the execution together. It\u0027s textbook stuff.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd yes, I\u0027m upset. It seems Unity keeps finding ways to disappoint me. And yes, I know there\u0027s a lot KSP and KSP2 teams could have done to make it better, but forgive me for holding dev teams of fewer than 50 people in total to a different standard than a multi-billion corporation whose entire job it is to make a game engine.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-10T22:02:53Z\u0022 title=\u002204/10/2023 10:02  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 10, 2023\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-10T23:41:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224271057\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681164061\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt seems Unity keeps finding ways to disappoint me. And yes, I know there\u0027s a lot KSP and KSP2 teams could have done to make it better, but forgive me for holding dev teams of fewer than 50 people in total to a different standard than a multi-billion corporation whose entire job it is to make a game engine.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u0022Good\u0022 depends on your definition of \u0022good\u0022. Here you mean \u0022high performance\u0022. But Unity never was about performance, it\u0027s good for plenty of reasons, and performance isn\u0027t (or at least wasn\u0027t until recently) one of them.\n\u003C/p\u003E\n\u003Cp\u003E\nYet it\u0027s hard to argue against its massive success, and things exists for a reason.\u003Cbr\u003E\nMost if it is due to it being the most productive engine for putting small to mid sized games out of the pipeline as quick as possible.\u003Cbr\u003E\nYou can get a game (and not only a game, but any 2D/3D application) done in Unity with less man-hours, and less skilled man-hours than with any other option out there.\u003Cbr\u003E\nAnd Unity\u0027s primary market is mobile games and various other \u0022I need a 2D/3D frontend\u0022 applications, an area where you just need to the thing to run, and ideally to run on several target platforms with minimal additional investment.\u003Cbr\u003E\nIn those markets, it doesn\u0027t need to be pretty, it doesn\u0027t need to be optimized, it just need the smallest possible concept-to-product cost. That\u0027s also why Unity is quite a success in the indie games scene.\n\u003C/p\u003E\n\u003Cp\u003E\nBut over the years, in trying to address every possible platform and every possible market, Unity has become capable of doing everything, but it is good at nothing.\u003Cbr\u003E\nIt\u0027s the jack-of-all-trades of the game engines, but the foundations are starting to seriously lag behind the state of the art.\u003Cbr\u003E\nAnd they have acknowledged that. They have many multi-year ongoing foundational improvements in the pipeline, many of them are specifically about addressing historic performance limitations.\u003Cbr\u003E\nSRP, UITK, DOTS, Burst, Jobs, Unity Physics, moving away from Mono to the modern .NET ecosytem, all those combined will probably put back Unity in the game, so to speak.\n\u003C/p\u003E\n\u003Cp\u003E\nThere is definitely a lot of frustration and valid criticism as to how long all those ongoing changes are taking to come to fruition.\u003Cbr\u003E\nThey tried to do all that incrementally, sometimes with a lack of focus, and with the goal of maintaining as much backward compatibility as possible, which also stem from the fact that again, a large share of the Unity market is devs relying on being able to make their next product by reusing 80% of existing assets and workflows. There was some recent acknowledgment of those mistakes, and it seems they are slowly changing how they are handling those projects, but as you said, it\u0027s a multi-billion corporation where things have quite a bit of inertia.\n\u003C/p\u003E\n\u003Cp\u003E\nArguably, KSP 2 development started in the wrong timeframe, where none of those newer options were in a stable enough state to rely on them in production (although many games did with quite some sucess in the same timeframe).\u003Cbr\u003E\nNot that it really matters anyway, given that for the most part, KSP 2 is just a mild refactor of the KSP 1 codebase, so I doubt that it would have changed anything.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-10T23:50:55Z\u0022 title=\u002204/10/2023 11:50  PM\u0022 data-short=\u00221 yr\u0022\u003EApril 10, 2023\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jost","CreatedById":196999,"CreatedDateTime":"2023-04-14T11:16:05Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224271095\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681170092\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 4/11/2023 at 1:41 AM, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nNot that it really matters anyway, given that for the most part, KSP 2 is just a mild refactor of the KSP 1 codebase, so I doubt that it would have changed anything.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDo you have any reference for this (e.G. data mining)? Some people claimed this\u00A0 after EA-launch but they didn\u0027t give any arguments expect their (relatable)\u00A0disappointment\u00A0\u00A0on the state of the game. So I didn\u0027t take them too seriously.\u00A0\u003Cbr\u003E\nYou however have some street creds in modding KSP and already made some rational technical arguments so I\u0027m interested how you came to this conclusion.\u00A0\u003Cbr\u003E\nBTW: Big thanks for your work on KSP Community Fixes and Kerbalism, I\u0027m doing a Science mode run with Kerbalism and hadn\u0027t this much fun with KSP in a long time.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-14T15:36:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224272723\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681470965\u0022 data-ipsquote-userid=\u0022196999\u0022 data-ipsquote-username=\u0022jost\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n58 minutes ago, jost said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDo you have any reference for this (e.G. data mining)?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u0022Data mining\u0022 indeed. Funny how that expression is being freely used since KSP 2 is out when any mention of what this really mean has been the subject of a moderator crusade for years.\n\u003C/p\u003E\n\u003Cp\u003E\nBut yeah, in many ways, this is KSP 1 2.0 : the \u0022breaking backward compatibility is allowed\u0022 update.\u003Cbr\u003E\nThey took KSP 1, incrementally refactored the codebase taking advantage of modern Unity advancement where relevant (asset loading with addressables, json serialization, PBR...), shuffled a few things around to allow the \u0022thrust under warp\u0022 feature, gave it a visual facelift, and that\u0027s it for the most part.\u003Cbr\u003E\nThe reason most people somewhat familiar with the KSP 1 codebase (or just game/software engineers) are disappointed is because it\u0027s just that : a very cautious refactor that didn\u0027t even try to address the core issues of KSP 1.\u003Cbr\u003E\nAnd given how much resources they were given by T2/PD, KSP 2 could have been so much more.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reasons those resources got wasted are not very clear (project leadership issues ? scope creep ? wrong priorities ?), but what is very clear is that they underestimated how critical and difficult engineering a game like KSP is, and thought they could avoid the whole issue by being conservative and copypasting the KSP 1 implementations, falling into the trap that those implementations had massive and fundamental issues to begin with.\u003Cbr\u003E\nIf KSP 2 has been delayed 3 times for 2 years, and likely won\u0027t deliver a feature-complete 1.0 before at least a year, and was released as EA as a hot buggy mess, it\u0027s because advancement on the software engineering and codebase is lagging years behind the rest.\u003Cbr\u003E\nPlanet and parts art assets are ready, including assets for unreleased features. Sound design is complete and very polished. Even the UI is an relatively good place. The codebase by contrast looks like it has gone through dozens of iterations and is barely out of prototyping.\u003Cbr\u003E\nThere are many parts of it that feel like the first quick-and-dirty-get-it-somewhat-functional implementation, others feel like they spent months on the drawing board trying to make it extra fancy, some parts are straight-up copypasted from KSP 1, and the overall code quality is very, very uneven.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP 1 is often qualified as a huge mess of spaghetti code, and they clearly spent a lot of time refactoring the whole thing with a textbook Model-View-Controller pattern.\u003Cbr\u003E\nUnfortunately, textbook patterns don\u0027t make good games, features and performance does.\u003Cbr\u003E\nAnd KSP 2 doesn\u0027t address any of the long standing issues of the KSP 1 core features, nor its performance issues.\n\u003C/p\u003E\n\u003Cp\u003E\nThey will never get better performance than KSP 1 in terms of part count being a CPU bottleneck. They made things even worse in that regard, for many reasons, but mainly because now all parts on all vessels (instead of just the active vessel in KSP 1) contribute to the CPU bottleneck.\u003Cbr\u003E\nTheir core architecture doesn\u0027t implement, and unless they have that huge refactor already in the works, will never be able to implement any of the usual patterns that could have alleviated that issue (multithreading, data-oriented programming).\u003Cbr\u003E\nTheir MVC pattern does nothing to help on that end, and TBH, the level of coupling between everything is already making the MVC pattern mostly pointless.\n\u003C/p\u003E\n\u003Cp\u003E\nThe aerodynamics and buoyancy integrators are still based on the objectively terrible per-part drag cube system. That system is intrinsically inconsistent, not especially good from a performance PoV, and requires handling tons of corner cases all around the codebase.\u003Cbr\u003E\nThe joint/RB physics are still based on the PhysX integrator, which is simply totally inadequate for the task, not only in terms of simulation stability and achieving gameplay intent, but also in terms of performance because they are forced to implement tons of extremely hacky workarounds to make it work in ways it doesn\u0027t support.\u003Cbr\u003E\nThe resource (ie, fuel) query/processing system they have put together is a counter-example, they did actually reimplement it differently than in KSP 1. But interestingly, it manages to not address any of the long standing issues of its KSP 1 counterpart, while having abysmal performance compared to the KSP 1 implementation.\u003Cbr\u003E\nThe awful global GameEvents internal messaging system ? They kept it with a pointless facelift, not fixing the conceptual flaw that the thing is uselessly broadcasting messages to every entity in the world, and also managed to make it slower...\u003Cbr\u003E\nOne example of something they are rethinking from scratch is the thermodynamics. With resource processing, this will be the only major departure from the KSP 1 core subsystems, it will be interesting to see how this pan out when they finally manage to release it.\n\u003C/p\u003E\n\u003Cp\u003E\nSome people are speculating that they are working on some large refactors in parallel branches, and this is indeed how development works.\u003Cbr\u003E\nBut with every patch and feature that get released, the cost of merging such refactors becomes exponentially higher, and given that they are likely under huge pressure to get the 1.0 features out in less than a multi-year timeframe, I wouldn\u0027t bet on such refactors ever happening.\n\u003C/p\u003E\n\u003Cp\u003E\nThere are a few things that are better than in KSP 1. People have noticed that for the most part, long loading times are gone, but this is mostly just a side effect of the game not being limited by constraints that existed 12 years ago in Unity.\u003Cbr\u003E\nThere are areas where they rewrote things with some success. While they did a very questionable job with the terrain texturing shader (which is a huge GPU bottleneck), their rewrite of the PQS mesh generation subsystem is one of the few thing that is objectively good.\u003Cbr\u003E\nThere are small improvements here and there. I\u0027m personally very unimpressed by the overall UI/UX, but most people seem to like what they did here, and this is an area where they can easily improve, contrary to other more core aspects.\n\u003C/p\u003E\n\u003Cp\u003E\nTo temper my words, unless the game gets canned because of low sales, them failing to deliver the 1.0 features in a reasonable timeframe, or a bit of both, I still think they will end up with a quite clunky, but somewhat enjoyable game that will achieve its high level goals, just like KSP 1 did.\u003Cbr\u003E\nIt\u0027s just that in many ways, and specifically those where KSP 1 was at it\u0027s worst, KSP 2 is just as bad, and that leaves a bitter taste for a specific population of long time KSP 1 players and modders.\n\u003C/p\u003E\n\u003Cp\u003E\nOkay, big off-topic rant.\n\u003C/p\u003E\n"},{"CreatedByName":"jost","CreatedById":196999,"CreatedDateTime":"2023-04-14T21:13:44Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224272818\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681486588\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u0022Data mining\u0022 indeed. Funny how that expression is being freely used since KSP 2 is out when any mention of what this really mean has been the subject of a moderator crusade for years.\n\u003C/p\u003E\n\u003Cp\u003E\nBut yeah, in many ways, this is KSP 1 2.0 : the \u0022breaking backward compatibility is allowed\u0022 update.\u003Cbr\u003E\nThey took KSP 1, incrementally refactored the codebase taking advantage of modern Unity advancement where relevant (asset loading with addressables, json serialization, PBR...), shuffled a few things around to allow the \u0022thrust under warp\u0022 feature, gave it a visual facelift, and that\u0027s it for the most part.\u003Cbr\u003E\nThe reason most people somewhat familiar with the KSP 1 codebase (or just game/software engineers) are disappointed is because it\u0027s just that : a very cautious refactor that didn\u0027t even try to address the core issues of KSP 1.\u003Cbr\u003E\nAnd given how much resources they were given by T2/PD, KSP 2 could have been so much more.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reasons those resources got wasted are not very clear (project leadership issues ? scope creep ? wrong priorities ?), but what is very clear is that they underestimated how critical and difficult engineering a game like KSP is, and thought they could avoid the whole issue by being conservative and copypasting the KSP 1 implementations, falling into the trap that those implementations had massive and fundamental issues to begin with.\u003Cbr\u003E\nIf KSP 2 has been delayed 3 times for 2 years, and likely won\u0027t deliver a feature-complete 1.0 before at least a year, and was released as EA as a hot buggy mess, it\u0027s because advancement on the software engineering and codebase is lagging years behind the rest.\u003Cbr\u003E\nPlanet and parts art assets are ready, including assets for unreleased features. Sound design is complete and very polished. Even the UI is an relatively good place. The codebase by contrast looks like it has gone through dozens of iterations and is barely out of prototyping.\u003Cbr\u003E\nThere are many parts of it that feel like the first quick-and-dirty-get-it-somewhat-functional implementation, others feel like they spent months on the drawing board trying to make it extra fancy, some parts are straight-up copypasted from KSP 1, and the overall code quality is very, very uneven.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP 1 is often qualified as a huge mess of spaghetti code, and they clearly spent a lot of time refactoring the whole thing with a textbook Model-View-Controller pattern.\u003Cbr\u003E\nUnfortunately, textbook patterns don\u0027t make good games, features and performance does.\u003Cbr\u003E\nAnd KSP 2 doesn\u0027t address any of the long standing issues of the KSP 1 core features, nor its performance issues.\n\u003C/p\u003E\n\u003Cp\u003E\nThey will never get better performance than KSP 1 in terms of part count being a CPU bottleneck. They made things even worse in that regard, for many reasons, but mainly because now all parts on all vessels (instead of just the active vessel in KSP 1) contribute to the CPU bottleneck.\u003Cbr\u003E\nTheir core architecture doesn\u0027t implement, and unless they have that huge refactor already in the works, will never be able to implement any of the usual patterns that could have alleviated that issue (multithreading, data-oriented programming).\u003Cbr\u003E\nTheir MVC pattern does nothing to help on that end, and TBH, the level of coupling between everything is already making the MVC pattern mostly pointless.\n\u003C/p\u003E\n\u003Cp\u003E\nThe aerodynamics and buoyancy integrators are still based on the objectively terrible per-part drag cube system. That system is intrinsically inconsistent, not especially good from a performance PoV, and requires handling tons of corner cases all around the codebase.\u003Cbr\u003E\nThe joint/RB physics are still based on the PhysX integrator, which is simply totally inadequate for the task, not only in terms of simulation stability and achieving gameplay intent, but also in terms of performance because they are forced to implement tons of extremely hacky workarounds to make it work in ways it doesn\u0027t support.\u003Cbr\u003E\nThe resource (ie, fuel) query/processing system they have put together is a counter-example, they did actually reimplement it differently than in KSP 1. But interestingly, it manages to not address any of the long standing issues of its KSP 1 counterpart, while having abysmal performance compared to the KSP 1 implementation.\u003Cbr\u003E\nThe awful global GameEvents internal messaging system ? They kept it with a pointless facelift, not fixing the conceptual flaw that the thing is uselessly broadcasting messages to every entity in the world, and also managed to make it slower...\u003Cbr\u003E\nOne example of something they are rethinking from scratch is the thermodynamics. With resource processing, this will be the only major departure from the KSP 1 core subsystems, it will be interesting to see how this pan out when they finally manage to release it.\n\u003C/p\u003E\n\u003Cp\u003E\nSome people are speculating that they are working on some large refactors in parallel branches, and this is indeed how development works.\u003Cbr\u003E\nBut with every patch and feature that get released, the cost of merging such refactors becomes exponentially higher, and given that they are likely under huge pressure to get the 1.0 features out in less than a multi-year timeframe, I wouldn\u0027t bet on such refactors ever happening.\n\u003C/p\u003E\n\u003Cp\u003E\nThere are a few things that are better than in KSP 1. People have noticed that for the most part, long loading times are gone, but this is mostly just a side effect of the game not being limited by constraints that existed 12 years ago in Unity.\u003Cbr\u003E\nThere are areas where they rewrote things with some success. While they did a very questionable job with the terrain texturing shader (which is a huge GPU bottleneck), their rewrite of the PQS mesh generation subsystem is one of the few thing that is objectively good.\u003Cbr\u003E\nThere are small improvements here and there. I\u0027m personally very unimpressed by the overall UI/UX, but most people seem to like what they did here, and this is an area where they can easily improve, contrary to other more core aspects.\n\u003C/p\u003E\n\u003Cp\u003E\nTo temper my words, unless the game gets canned because of low sales, them failing to deliver the 1.0 features in a reasonable timeframe, or a bit of both, I still think they will end up with a quite clunky, but somewhat enjoyable game that will achieve its high level goals, just like KSP 1 did.\u003Cbr\u003E\nIt\u0027s just that in many ways, and specifically those where KSP 1 was at it\u0027s worst, KSP 2 is just as bad, and that leaves a bitter taste for a specific population of long time KSP 1 players and modders.\n\u003C/p\u003E\n\u003Cp\u003E\nOkay, big off-topic rant.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks a lot, I woudn\u0027t call it a big off-topic rant.\u00A0 This is the kind of insight and well-reasoned criticism\u00A0 I can appreciate and understand.\u00A0 You are making some good points it will be interesting to see how things will develop.\u00A0\u003Cbr\u003E\n\u003Cbr\u003E\nAt the moment I don\u0027t even own KSP2 (due to my old potato there wouldn\u0027t be a point) so I\u0027m hoping for\u00A0 improvements (in the game and my economical resources \u003Cimg alt=\u0022;)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E ). In the meantime I\u0027m just hanging around in the KSP2 part of this forum.\n\u003C/p\u003E\n"},{"CreatedByName":"Lyneira","CreatedById":149515,"CreatedDateTime":"2023-04-17T10:06:12Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/163039-gotmachine/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022163039\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/163039-gotmachine/\u0022 rel=\u0022\u0022\u003E@Gotmachine\u003C/a\u003EThanks for demystifying some things about what KSP2 is, and is not, under the hood.\n\u003C/p\u003E\n\u003Cp\u003E\nSome of the things I remember being most frustrating, time consuming and momentum-killing in my KSP1 days were the problems caused by switching or loading vessels, like spontaneous disintegrations resulting from physics startups when reloading a vessel you left safely landed or in a stable orbit, or when coming out of timewarp. And I\u0027m noticing similar things happening now in KSP2. I was really hoping for KSP 2 to fundamentally improve on the glitches and instabilities resulting from its physics system. Can you say anything about what it would take to improve on this, is it even possible to fully solve? (To, in their own words \u0022slay the kraken\u0022)\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-17T11:14:22Z\u0022 title=\u002204/17/2023 11:14  AM\u0022 data-short=\u00221 yr\u0022\u003EApril 17, 2023\u003C/time\u003E by Lyneira\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The Destroyer","CreatedById":36109,"CreatedDateTime":"2023-04-20T21:09:38Z","Content":"\n\u003Cp\u003E\nI saw pretty decent gains in both KSP1 and KSP2 (patch 1) going from a Ryzen 7700 to 7950X3D - generally about a 50% FPS gain or so. I also had a 100% FPS gain (20 \u0026gt; 40 fps while flying a small plane around \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E) in one scenario, though that might be an outlier - my testing may have been imperfect, but it was definitely a benefit.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP1 tests also showed about a 50% gain to FPS usually, though in some scenarios like 4x phys warp burn of a large craft, no gains.\n\u003C/p\u003E\n"},{"CreatedByName":"zzyzz","CreatedById":228759,"CreatedDateTime":"2023-04-22T04:33:37Z","Content":"\n\u003Cp\u003E\nI recently upgraded my cpu from 5900x to 7800x3d, I built a 300 parts rocket for stress testing.\n\u003C/p\u003E\n\u003Cp\u003E\nGPU: 4090\u00A0 Graphic settings 4k max\n\u003C/p\u003E\n\u003Cp\u003E\nI found 7800x3d about 20% - 50% faster compared to 5900x all the time (both with reasonable pbo overclocking)\n\u003C/p\u003E\n\u003Cp\u003E\nBefore lunch: 43fps vs 28fps\n\u003C/p\u003E\n\u003Cp\u003E\nduring lunch: 22 fps vs 18\n\u003C/p\u003E\n\u003Cp\u003E\ninto cloud: 25fps vs 21fps\n\u003C/p\u003E\n\u003Cp\u003E\ninto space: 33fps vs 25fps\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0I don\u0027t have 12th or 13th intel cpu for comparison\u00A0 but I feel the gain was brought by raw IPC improvement, so 13900k might perform\u00A0 similar with x3d as well\n\u003C/p\u003E\n"},{"CreatedByName":"LoSBoL","CreatedById":174038,"CreatedDateTime":"2023-04-22T08:28:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224275727\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682138017\u0022 data-ipsquote-userid=\u0022228759\u0022 data-ipsquote-username=\u0022zzyzz\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, zzyzz said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI recently upgraded my cpu from 5900x to 7800x3d, I built a 300 parts rocket for stress testing.\n\u003C/p\u003E\n\u003Cp\u003E\nGPU: 4090\u00A0 Graphic settings 4k max\n\u003C/p\u003E\n\u003Cp\u003E\nI found 7800x3d about 20% - 50% faster compared to 5900x all the time (both with reasonable pbo overclocking)\n\u003C/p\u003E\n\u003Cp\u003E\nBefore lunch: 43fps vs 28fps\n\u003C/p\u003E\n\u003Cp\u003E\nduring lunch: 22 fps vs 18\n\u003C/p\u003E\n\u003Cp\u003E\ninto cloud: 25fps vs 21fps\n\u003C/p\u003E\n\u003Cp\u003E\ninto space: 33fps vs 25fps\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0I don\u0027t have 12th or 13th intel cpu for comparison\u00A0 but I feel the gain was brought by raw IPC improvement, so 13900k might perform\u00A0 similar with x3d as well\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nInteresting, can you share a bit of the viewing conditions (where were you looking at) when getting these FPS scores? And can you share the craft file in any way? I would like to set the performance off against my 12700KF.\n\u003C/p\u003E\n"},{"CreatedByName":"JoeSchmuckatelli","CreatedById":154477,"CreatedDateTime":"2023-04-23T22:48:59Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224272818\u0022 data-ipsquote-contentid=\u0022216290\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221681486588\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 4/14/2023 at 11:36 AM, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSome people are speculating that they are working on some large refactors in parallel branches, and this is indeed how development works\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI really enjoyed your post - and have seen indications (and speculation) about parallel branches.\u00A0 The distinct difference between EA Release and Patch 1 kind of supports this.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m wondering if some of what Markum said in her AMA indicates this as well?\u00A0 At least indirectly.\u00A0 She seems to say that they had to break down the game for the EA run, albeit very indirectly.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nHave you seen her comments and does it sound like they may have a better working product \u0027waiting in the wings\u0027 or are we largely stuck with WYSIWYG?\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"JoeSchmuckatelli","CreatedById":154477,"CreatedDateTime":"2023-04-23T23:00:03Z","Content":"\n\u003Cp\u003E\nHere are the possibly relevant quotes:\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022background-color:#25282a;color:#c9c5be;font-size:13px;\u0022\u003E\nMost difficult: establishing the roadmap. We started from an endpoint \u0022here\u0027s the game as a whole\u0022, but when you go into early access, it\u0027s not 50% of each feature, it\u0027s milestone on milestone - each building on top of each other. It took us months to sort out. There\u0027s still moments where we think about moving things around, but yeah trying to take this absolute behemoth of a game and parse it out into a bunch of different phases.\n\u003C/p\u003E\n\u003Cp style=\u0022background-color:#25282a;color:#c9c5be;font-size:13px;\u0022\u003E\n...\u00A0\n\u003C/p\u003E\n\u003Cp style=\u0022background-color:#25282a;color:#c9c5be;font-size:13px;\u0022\u003E\nRemember that question about the roadmap? This is one of the outcomes when everything is building on top of each other.. We wanted to make sure exploration is about exploration.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Heretic391","CreatedById":66101,"CreatedDateTime":"2023-04-28T10:08:32Z","Content":"\n\u003Cp\u003E\nHow is everyone\u0027s performance with decoupling? Did a video on missiles and it was bad due to freezing for 5 seconds at a time.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve got 7950x3d \u002B 4090 \u002B 64GB Ram 5200mhz \u002B Samsung 990 Pro\n\u003C/p\u003E\n"},{"CreatedByName":"LoSBoL","CreatedById":174038,"CreatedDateTime":"2023-04-28T10:56:40Z","Content":"\n\u003Cp\u003E\nHuge warning for 7000 series AMD CPU\u0027s went out the door yesterday, update your BIOS or risk frying your CPU.\n\u003C/p\u003E\n"}]}