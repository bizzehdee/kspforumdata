{"TopicId":224740,"ForumId":119,"TopicTitle":"Where is Nate?","CreatedByName":"RUD Everyday","CreatedById":228396,"CreatedDateTime":"2024-05-04T20:07:13Z","PageNum":6,"Articles":[{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-15T11:39:24Z","Content":"\n\u003Cp\u003E\nWell, it\u0027s certainly easier to understand how we got what we got if the team were much smaller (or had a lot of do-nothing overhead jobs)!\u00A0 I don\u0027t see why there would have been a re-start, though, unless work product was lost, or the reason ST ended was that T2 really didn\u0027t like what they made.\u00A0 Imagine me ranting for an hour here about ancient dev practices like waiting until all pre-prod work is done before starting any prod work (benefit of being retired is no longer having to care).\u00A0 But for KSP2 in particular there\u0027s a lot the team could start on right away: you don\u0027t need rounds of concept art to know what a Kerbal looks like, you know the first coding task is to fix the physics, and so on.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nCome to think of it, didn\u0027t Nate did say early on that they started with fixing the \u0022big problem\u0022 of KSP1 physics, and completed that to prove the idea viable?\u00A0 One reason I suspect code was lost with the studio switch is, well, it sure doesn\u0027t look like we got a fixed core physics sim.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-15T17:58:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389992\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715773164\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI don\u0027t see why there would have been a re-start, though, unless work product was lost, or the reason ST ended was that T2 really didn\u0027t like what they made.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think ST and Nate personally didn\u0027t like what they made, but not for quality reasons.\n\u003C/p\u003E\n\u003Cp\u003E\nSo this is largely speculation. I got some second hand confirmation for parts of it, but for the most part, I\u0027m going with what we\u0027ve seen starting with E3 presentation and up until first serious WIP footage started emerging from Intercept, and filling in blanks with my personal experience. Lets start with pre-KSP2 Star Theory. The two games they shipped in 2016 and 2017 were Unity games for PS VR (Wayward Sky and Dino Frontier) and the credits for both games list Uber Entertainment (then name of ST) as 18 people who are directly involved in building the game, including a 1 (one) engineer. 2017 is also when the talks with Take Two would have started. I\u0027m sure ST hired additional people to work on the contract for KSP2, but even most generously, you don\u0027t look at that team and say, \u0022Yeah, they\u0027re going to build a AAA game from scratch in under 3 years.\u0022 As far as I can tell, what we know as KSP2 was not what Star Theory was contracted to make.\n\u003C/p\u003E\n\u003Cp\u003E\nThe biggest guessing game for me is narrowing it down to the rough specs of what ST was meant to deliver in 2020. I think the trailer was meant to represent that game, but potentially with a lot of artistic license. I\u0027m picturing a game that\u0027s entirely based on KSP1 codebase, with basically two large DLCs strapped to it. Colony building - including parts and some basic resource management letting you actually build stuff there, and interstellar - one new star system and parts to get you there. Plus some visual improvements for an aging game. I think Star Theory of late 2017 was capable of that, and with a few hires probably on schedule for 2020 release.\n\u003C/p\u003E\n\u003Cp\u003E\nSomewhere along the way, the dream got bigger. The E3 trailer was likely created with two goals in mind. 1) Stay within bounds of what\u0027s already on the roadmap, but 2) Present it as dialed to 11 under an excuse of the NOT ACTUAL GAMEPLAY disclaimer to gauge the reactions. I don\u0027t think it was meant to mislead, but rather represent the game ST wanted to make. And I think the pitch for that larger and bigger KSP2 was already in the air, and pending approval based on public reaction to the trailer. Reaction was good, lights were lit, and Nate is giving us a pitch for a bigger game pretty much from the first interviews. Multiplayer, colony management and transportation network are brought up, as well as plans for more star systems, realistic scale of space in between, physics overhaul, etc.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s hard to say how quickly the team realized that this is going to be a lot more work than anticipated. We know that by November 2019, T2\u0027s earnings report had KSP2 pushed back to 2021, but it\u0027s not clear if that was still a realistic expectation, or just, \u0022Push it back a year until we figure it out.\u0022 What we do know is that Star Theory was renegotiating the work contract based on larger team and a later deadline. We also know that the negotiations didn\u0027t go well for ST, and about a dozen of developers jumped ship to start Intercept Games. Later, more of the 20-30 developers ST had joined Intercept as ST got dissolved in early 2020. From there it\u0027s fairly straight forward. New road map got made, the team started hiring people, and while the exact scope is still hard to pin down, it sounds like they were planning for late 2022 to early 2023 release, which suggests that either they had harder time growing the team or underestimated the problem or both.\n\u003C/p\u003E\n\u003Cp\u003E\nBut rolling back to that transition from Star Theory to Intercept, what can we say about the state of the game? We did see a preview of gameplay at Gamescon 2019. What do we see? New \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E, but still mostly blocked out with old terrain system. Rocket that does have shinier parts, but seems to be mostly KSP1 assets with an update to the materials. Very flimsy physics - suggesting they started experimenting with the physics overhaul, but got as far as removing autostruts. Abysmal framerate. (Clearly a priority on that last one, since they got it into the game so early. Sorry, couldn\u0027t resist.) What we don\u0027t see, but was probably heavily in the works are new parts for interstellar and colonies, and a bunch of planet work. Plus, probably tutorials. That last bit might seem like it\u0027s not a priority, but ST started out with good 2D art team, so I think they were trying to make the best use of the people they had.\n\u003C/p\u003E\n\u003Cp\u003E\nThe problems with all of this is that the overhaul made a lot of that work place-holder quality at best. The new material system meant that even the parts that would have been made at quality, needed an overhaul pass. Planets likely had to be scrapped almost entirely, because a completely new system was built. Code, likewise, mostly thrown away. The parts that would have survived are concepts, UI work, tutorials, and whatever assets were good enough to be used as a starting point. Everything else had to be built from scratch, which, if it sounds like, \u0022Rest of the game,\u0022 yeah, I agree.\n\u003C/p\u003E\n"},{"CreatedByName":"The Aziz","CreatedById":150811,"CreatedDateTime":"2024-05-15T22:26:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390087\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715795908\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m sure ST hired additional people to work on the contract for KSP2, but even most generously, you don\u0027t look at that team and say, \u0022Yeah, they\u0027re going to build a AAA game from scratch in under 3 years.\u0022\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think that was (is?) the biggest problem in this whole endaevour. KSP1 was an indie game in pretty much every way. Independent studio, small team, niche genre, not much of a budget, a novelty on the market, but loved by those who were interested.\n\u003C/p\u003E\n\u003Cp\u003E\nThen T2 took over the IP, came up with an idea for a sequel that would make money, and... still treated it like an indie title. Despite the fact that the scope proposed by our very Creative Director could beat some blockbuster AAA games. But it still got a small team, *some* budget and a short time to develop all those ideas.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn any case, we will probably know what happens next in 22 hours or so.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-15T22:29:01Z\u0022 title=\u002205/15/2024 10:29  PM\u0022 data-short=\u0022May 15\u0022\u003EMay 15\u003C/time\u003E by The Aziz\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"cocoscacao","CreatedById":225696,"CreatedDateTime":"2024-05-16T07:09:35Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390156\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715811988\u0022 data-ipsquote-userid=\u0022150811\u0022 data-ipsquote-username=\u0022The Aziz\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, The Aziz said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nwe will probably know what happens next in 22 hours or so.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nEnd of May more likely\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"KerikBalm","CreatedById":91917,"CreatedDateTime":"2024-05-16T08:56:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell, what we can gather from the Roadmap is that the scope was:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nA ground-up re-envisioning of the core systems of KSP1\n\u003Cul\u003E\n\u003Cli\u003E\nWhether or not popular mods were to be added or integrated remains to be seen. We were literally told that DLC from KSP1, such as robotics, weren\u0027t going to make it into the game prior to 1.0, so we can probably infer that mods might not have ever made it\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI was very excited about this ground up redo of the core systems, supposedly allowing vessels with much higher part counts than in KSP1.\n\u003C/p\u003E\n\u003Cp\u003E\nIt is my understanding that part count is even more limiting than it was in KSP1\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, regarding mods, I did not mean litterally using the same mod, but rather incorporating similar functionality to functionalities provided by KSP1 mods\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nA new science system\n\u003Cul\u003E\n\u003Cli\u003E\nWhich turned out to be the old system just dumbed down a whole lot. [...]\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSoo.... they win no points with me here\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nColonies\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlanned, not yet present after ~7 years of development. Also, KSP1 mods give this functionality.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nInterstellar Travel\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlanned, not yet present after ~7 years of development. Also, KSP1 mods give this functionality. I had hoped that KSP2 would be able ot handle this significantly better with the thrust on rails mechanic, allowing for long low \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E burns, with brachistichrone trajectories, etc. I had hoped for being able to plan maneuvers like with the MPD thrusters in CoDE, but instead it seems there\u0027s the same node that plans burns as if they are an impulse trajectory, and equires you to keep the vessel in active focus while thrusting. It is an improvment, but not what was really needed for more proper interstellar travel.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nResource Management\n\u003Cul\u003E\n\u003Cli\u003E\nWhich was kind of already in KSP1 with \u003Cabbr title=\u0022In-Situ Resource Utilization\u0022\u003E\u003Cabbr title=\u0022In-Situ Resource Utilization\u0022\u003EISRU\u003C/abbr\u003E\u003C/abbr\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nAnd which we had a couple of mods for, like Extra-Planetary Launchpads, to deal with converting ore to iron (or something along those lines)\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlanned, not yet present after ~7 years of development. Also, KSP1 mods give this functionality...\u00A0Soo.... they win no points with me here\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cul\u003E\n\u003Cli\u003E\nMultiplayer\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlanned, not yet present after ~7 years of development. Also there\u0027s no indication they even have a clear idea how it would work\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389440\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715623013\u0022 data-ipsquote-userid=\u0022210112\u0022 data-ipsquote-username=\u0022Scarecrow71\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 7:56 PM, Scarecrow71 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat\u0027s a pretty large scope.\u00A0 Just go through that and type out a simple problem statement and its resultant potential high-level solution for each one of those bullets, and you\u0027re already over 1 page in length.\u00A0 That\u0027s a hell of a scope for any game.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nHere we need to distinguish between planned scope, and delivered scope. The scope they have delivered so far is underwhelming, and their planned scope is actually still within the limits of KSP\u0027s engine, as shown by mods. Maybe they planned for KSP2\u0027s engine to handle this scope better, but given the bugs and the performance limits restricting vessel part count, I see no external evidence that this has been achieved, or that good progress has been made.sadsad\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI don\u0027t know where to even star with how far off you are. Data-driven \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003E\u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E\u003C/abbr\u003E, vehicles as part of the overall world data hierarchy, deeper hierarchy on vehicles and spaces allowing for more data-driven components,\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI really don\u0027t understand what you mean here.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nprocedural support for basically everything, with several procedural parts in the game,\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nKSP1\u0027s engine allows for procedural parts, as shown by a variety of mods for procedural tanks, wings, etc.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\njust absolutely everything about the celestial bodies, but especially the procedural generation and how the environments are authored.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe celestial bodies are a high point of KSP2. I don\u0027t disagree here. To the point that I would even be interested in exporting their height and color maps, and backporting them to KSP1\u00A0\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u002291917\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed7110904280\u0022 src=\u0022https://forum.kerbalspaceprogram.com/topic/224738-what-can-be-backported-to-ksp1/?do=embed\u0026amp;comment=4386241\u0026amp;embedComment=4386241\u0026amp;embedDo=findComment\u0022 style=\u0022height:297px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\nthough I don\u0027t know what level of proc gen KSP2 uses for fine scale detail, I am not ignoring this point:\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u002291917\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed8665427045\u0022 src=\u0022https://forum.kerbalspaceprogram.com/topic/224738-what-can-be-backported-to-ksp1/?do=embed\u0026amp;comment=4386255\u0026amp;embedComment=4386255\u0026amp;embedDo=findComment\u0022 style=\u0022height:264px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd your throwaway \u0022graphics overhaul\u0022 includes scattering, atmospherics, weather, entirely new materials system, etc. The \u0022graphics overhaul\u0022 alone is a huge scope expansion requiring a team of artists and tech artists.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nScattering- they litterally hired the modder from KSP1 who did the KSP1 mod Scatterer. The weather is just cosmetic, no (ie, clouds)? And yes, the art team did a good job. I give KSP2\u0027s team credit for that. Its more of the core gameplay elements that I have reservations about.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is just stuff delivered at the start of EA. Not even discussing all the things that were still being worked on, but just stuff that was\u00A0\u003Cem\u003Ein the game\u003C/em\u003E\u00A0at EA, which is only \u003Cstrong\u003Ethree years\u003C/strong\u003E after Intercept started working on it, hiring up to full strength only, what, a year, year-and-a-half into it?\n\u003C/p\u003E\n\u003Cp\u003E\nOh, yeah, right. You think Intercept has been working on KSP2 for 7 years, having been founded 4 years ago.\u00A0\u003Cimg alt=\u0022:rolleyes:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_rolleyes.gif\u0022 title=\u0022:rolleyes:\u0022\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI did not say that. Please don\u0027t put words in my mouth. Work has been done on KSP2 for years, it is not clear when Star Theory started on it.\u00A0\u003Cstrong\u003ENate\u003C/strong\u003E\u00A0has been working on it from the beginning.\u00A0 IIRC, about 1/3 of ST\u0027s team left to continue working at IG. There is certainly some level of continuity, and a core team that has been working on KSP2 since before it was announced in 2019.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0- \u0022I have experience actually doing this. This is wrong.\u0022\u003Cbr\u003E\n\u00A0- \u0022I guess we\u0027ll have to disagree.\u0022\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNeither of those are quotes from me.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224389447\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715625853\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/13/2024 at 8:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u0022I disagree\u0022 has meaning when it comes with an argument, experience, citation of evidence, or absolutely anything that actually addresses points being made. Otherwise, it\u0027s not even a good disengagement tactic.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSee my points above, and also the following:\n\u003C/p\u003E\n\u003Cp\u003E\nWhen speaking of scope, we need to distinguish between the scope they have delivered and what they has planned. What they have delivered after years of work (with the team varying in number and composition over time, but still with significant continuity), and access to KSP1\u0027s source code, does not seem to exceed KSP1\u0027s scope.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n1) I see that the visuals and the detail of the celestial bodies have been improved significantly.\n\u003C/p\u003E\n\u003Cp\u003E\nBeyond that, (2) I don\u0027t see evidence of a more stable physics simulation (more bugs). (3) I don\u0027t see evidence of a more optimized physics simulation (has a lower part count limit before performance becomes unacceptable).\n\u003C/p\u003E\n\u003Cp\u003E\nPoints 2 and 3 above are absolutely critical to me. I would have been happy with KSP2 if it was just KSP1 with 1, 2, and 3, and the rest of the planned scope was left to mods.\n\u003C/p\u003E\n\u003Cp\u003E\nTheir apparent failure on points 2 and 3\u00A0 (as far as I can tell) is the reason for my negativity. My opinion on if they did well or not depends heavily on whether they addressed points 2 and 3. They were supposed to rebuild the engine from the ground up to make it able to do all these things better than KSP1 - huge high part count vessels and colonies. They even stated that they would \u0022slay the kraken\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nAs far as I can tell, they did great work on the art, but left the core engine in a dire state, and the state of the physics engine is why I cannot say they did reasonably well. IMO, that should have been their top priority. I\u0027m left with the impression they were just doing artwork and daydreaming about what the engine \u003Cem\u003Ewould\u003C/em\u003E do, and didn\u0027t put in the work to make sure the engine \u003Cem\u003Ecould\u003C/em\u003E do it.\n\u003C/p\u003E\n"},{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-16T10:44:25Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390087\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715795908\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI think the trailer was meant to represent that game, but potentially with a lot of artistic license. I\u0027m picturing a game that\u0027s entirely based on KSP1 codebase, with basically two large DLCs strapped to it. Colony building - including parts and some basic resource management letting you actually build stuff there, and interstellar - one new star system and parts to get you there. Plus some visual improvements for an aging game. I think Star Theory of late 2017 was capable of that, and with a few hires probably on schedule for 2020 release.\n\u003C/p\u003E\n\u003Cp\u003E\nSomewhere along the way, the dream got bigger. The E3 trailer was likely created with two goals in mind. 1) Stay within bounds of what\u0027s already on the roadmap, but 2) Present it as dialed to 11 under an excuse of the NOT ACTUAL GAMEPLAY disclaimer to gauge the reactions. I don\u0027t think it was meant to mislead, but rather represent the game ST wanted to make. And I think the pitch for that larger and bigger KSP2 was already in the air, and pending approval based on public reaction to the trailer. Reaction was good, lights were lit, and Nate is giving us a pitch for a bigger game pretty much from the first interviews. Multiplayer, colony management and transportation network are brought up, as well as plans for more star systems, realistic scale of space in between, physics overhaul, etc. UI work, tutorials, and whatever assets were good enough to be used as a starting point. Everything else had to be built from scratch, which, if it sounds like, \u0022Rest of the game,\u0022 yeah, I agree.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat sounds entirely believable.\u00A0 Damn shame too, as a cleaned-up KSP1 codebase with some core fixes to let the physics scale better, and graphics the equivalent of the better mods would have won my heart.\u00A0 Other than multiplayer, adding the rest as effectively big mods seems the safe way to go.\u00A0 I\u0027d think multiplayer would have to be plumbed in to the base game early.\u00A0 Unless the team had some hands-on experience with multiplayer development, I don\u0027t think that would have been practical,\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI think a lot of us would have loved an EA release that was KSP1 with fewer bugs and updated graphics, with new features coming over time.\u00A0 Even if multiplayer was off the table, I certainly would have been happy with colonies / logistics / interstellar coming in every quarter or two if it started with a better KSP1.\n\u003C/p\u003E\n\u003Cp\u003E\nK^2, slightly off-topic, but how hard is combining multi-threading physics and multi-player these days?\u00A0 I\u0027ve done a ton of distributed systems dev, but the big performance gains required accepting that the system was not quite deterministic.\u00A0 As I understand it, that\u0027s unworkable for multi-player, unless someone\u0027s gotten clever in the past few years.\n\u003C/p\u003E\n"},{"CreatedByName":"PopinFRESH","CreatedById":221428,"CreatedDateTime":"2024-05-16T18:28:03Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390241\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715849807\u0022 data-ipsquote-userid=\u002291917\u0022 data-ipsquote-username=\u0022KerikBalm\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 hours ago, KerikBalm said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n....I did not say that. Please don\u0027t put words in my mouth. Work has been done on KSP2 for years, it is not clear when Star Theory started on it.\u00A0\u003Cstrong\u003ENate\u003C/strong\u003E\u00A0has been working on it from the beginning.\u00A0 IIRC, about 1/3 of ST\u0027s team left to continue working at IG. There is certainly some level of continuity, and a core team that has been working on KSP2 since before it was announced in 2019...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIn regards to that timeline; Nate\u0027s story regarding how he learned they\u0027d be working on KSP2 and coupled with when his title changed at Uber Entertainment would point toward the beginning of development in Q4\u002717. Regarding the two referenced games and their credits listing roughly 18 developers and 1 engineer; Uber Entertainment still had multiple teams working different projects as they were in the process of spinning off Planetary Annihilation Inc. to continue their work on PA Titans and future support separately from Uber Entertainment. The head count at Uber Entertainment when they started KSP2 was reported to have been approximately 30 developers.\n\u003C/p\u003E\n\u003Cp\u003E\nThe Uber Entertainment rebranding to StarTheory in 2019 was due to losing/settling with Uber the ride sharing service in regards to the Uber trademark. When StarTheory failed to deliver the game within the contracted timeframe they began negotiations to extend the contract. To which Take Two attempted to purchase the studio and the resultant events unfolded with the contract renewal being denied and Intercept Games being formed. They poached roughly half of the development staff (around 15 developers) including all of the teams leadership, Nate R., Nate S., and Jeremy A. whom immediately left and moved to the new studio. Roughly 2 months later after StarTheory failed to find new contract work in March 2020 the owners closed the studio and a large portion of the staff that remained at StarTheory initially then rejoined their former colleagues at Intercept Games after the studio closure with some portion of the rest of them moving on to other endeavors. So they were roughly around that 25 - 30 head count during the original contracted development at StarTheory and the beginning of Intercept Games; largely being the same individuals. This is further evidence by comments made by Paul F. (former engineering lead) when he was laid off last year around the time of the EA launch. He noted being proud of building a team up from about 25 engineers to 45 engineers.\n\u003C/p\u003E\n\u003Cp\u003E\nThere is/was definitely a significant level of continuity in developers from before \u0026amp; after the studio change as you noted; and the core leadership team was those same individuals up until shortly after the EA announcement when Nate R. left and went to Epic Games.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-16T19:56:45Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390254\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715856265\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nK^2, slightly off-topic, but how hard is combining multi-threading physics and multi-player these days?\u00A0 I\u0027ve done a ton of distributed systems dev, but the big performance gains required accepting that the system was not quite deterministic.\u00A0 As I understand it, that\u0027s unworkable for multi-player, unless someone\u0027s gotten clever in the past few years.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027ll start with tech overview, if you are interested. Physics and performance for custom engines has been my main area of work for the past few years, so I can go into a bit of a detail, but I\u0027ll add a tl;dr near the end.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nMultithreading and multiplayer for physics are two separate problems, fortunately. Networking physics is hard because in most games multiplayer relies on rollbacks, and physics doesn\u0027t guarantee deterministic outcome on a rollback unless you have history of the constraint caches. The latter isn\u0027t too hard to keep, but you do need a few floats per joint or contact point in general for every frame of simulation you want to be able to go back. If you implement something like a circular buffer and have a strategy for dealing with blowing out the contact cache count, it\u0027s not too bad. I think that\u0027s roughly what Epic has been implementing for Chaos in their latest updates. (Though, I\u0027m not fully caught up yet.) Unfortunately, it\u0027s not a standard feature of Havok, so you\u0027d have to tinker to get it in. If you have custom physics, you\u0027re on your own, but then hopefully you have a good team to handle that. Note, however, that all of this is if you\u0027re doing rollbacks. If you\u0027re not, non-determinism isn\u0027t actually a problem.\n\u003C/p\u003E\n\u003Cp\u003E\nOther than that, simulated objects are a lot like players. Each island can be predicted locally, but someone should have authority. In traditional server-client, the authority is always the server, so nothing special is going on, but you are in rollback territory if you want good response to player inputs on simulated rockets. In something like KSP2, you have an option of making each player an authority over their own ship. This can be done in P2P setup, or even server-client with client-trust on anything ship-related. The advantage here is that rollback isn\u0027t necessary. For the authority player, the inputs are taken into account immediately upon the first simulation, and for anyone else, rubberbanding is fine. If two players are trying to dock, both are either moving slowly enough where it shouldn\u0027t matter much, or too fast for anything but an explosion to follow. So this is a perfect game for this kind of an approach.\n\u003C/p\u003E\n\u003Cp\u003E\nNetworking aside, physics basically does four things. 1) Gather forces and torques, 2) Find collisions and generate contact constraints, 3) Solve for constraints forces, 4) Update velocities and positions based on net forces. Step 1 usually happens while you\u0027re updating all of your components or whatever game logic you have. E.g., applying thrust force to one of the rocket engines. The last step is almost trivial. It\u0027s O(N) and there\u0027s barely any math to do. So the steps that take a lot of computation and can benefit from being parallelized are 2 and 3. Collisions are very easy to split between threads, since each collision test is independent of all the others. Just have an atomic for next rigid body to grab, and ignore anything with a smaller index if it comes up in a relevant BVH leaf. Oh, and you have to have a strategy for the contact cache that allows for multithread access in some way, but that\u0027s a standard mutex problem. You will probably trip over the CPU cache a lot, so if you want the most out of this, it becomes a harder problem, where you want to respect the BVH when you are assigning out the work to threads. And if you have any static colliders (planet surface, etc) you really want to make sure you organize things in memory for it. But that\u0027s squeezing out the last 10-20% of the gain here, so not as critical as just having a way to run it in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nStep 3, solving constraints, is the hardest to divide up. Usually, it\u0027s not where you end up with the worst cases on performance, though. Standard way of optimizing this solver is to just run one iteration per island. So long as your contact cache isn\u0027t changing often, and the spikes in forces aren\u0027t too dramatic, the constraint forces don\u0027t change much frame-to-frame, so one iteration is enough. And in something like KSP2, you do have very clear islands - most of the time rockets aren\u0027t colliding, so you can assume each rocket is its own island for the purposes of simulation, and dividing islands between threads is trivial. It does mean you\u0027ll have to do extra work if you found an overlap between colliders from two different rockets, including running a couple of extra iterations on the solver, because you\u0027ll have new and likely catastrophic forces, but that\u0027s sort of how you get the most out of physics in a game like this.\n\u003C/p\u003E\n\u003Cp\u003E\nHow much of this can you implement in Unity? Depends on what you\u0027re doing for physics. The stock physics is an old branch of PhysX which is just bad. It\u0027s single-threaded, has poor quality (as it\u0027s pre-Box2D revolution) and you can\u0027t do much to change any of that, since it\u0027s basically just a black box in Unity. It is, unfortunately, what KSP2 was stuck with. At the time KSP2 work started at ST, it was basically the only option, and by the time Intercept rebooted the work, alternatives were still new and untested.\n\u003C/p\u003E\n\u003Cp\u003E\nRecently, Havok became an option if you run your game with ECS and DOTS. KSP2 was written with old MonoBehavior components, but if we get a development restart, the new team might chose to overhaul the components and go with ECS. I think that\u0027s what I\u0027d want to do, but it depends a lot on the team. With Havok, you\u0027d get threading for free, but Havok does absolutely nothing for networked physics. So you basically have to go with no-rollback solution for multiplayer, and it will have to be an entirely custom networking to handle all of that.\n\u003C/p\u003E\n\u003Cp\u003E\nFinally, custom physics is always an option. I\u0027d still cut a branch from an existing physics engine for collision detection, because it\u0027s just a lot of work to write from scratch, but you have options there. Bullet has decent enough collision detection and is open source under ZLib license, so you can use it in proprietary software. Then write custom contact cache solution that plays nicely with my networking and threading strategies, and write a custom solver that keeps KSP2 specifics in mind. There are a lot of cool optimizations you can do when you know that your rockets are \u003Cem\u003Ealmost\u003C/em\u003E\u00A0rigid bodies, and that you can always use a rigid body solution as a starting point for a lot of the math, working with smaller deltas as a result, leading to much better physics fidelity with no computational overhead. The downside of this is that there are maybe a few dozen game dev engineers who have experience with this. Most of them work at Epic. The rest would have come primarily from id, Havok, Crystal, or Blizz. So rare and not cheap.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\ntl;dr: With KSP2 codebase as it is and under Unity, there are no real options. It\u0027s old branch of PhysX, which will be single threaded and awful for multiplayer. If we get an overhaul with the new team, that can be swapped out for Havok, which will give you multithreading for free, but will be a pain for multiplayer team to deal with. Still, probably the best possible outcome. And finally, custom physics is probably a non-starter, even though it\u0027s by far the best solution for something like KSP2.\n\u003C/p\u003E\n\u003Cp\u003E\nIn all of these cases, multiplayer is going to be solved differently than in most games, and your best option is a no-rollback approach with each player having authority over their own rocket to avoid non-determinism problems. Any standard server-client solution is going to be a disaster with KSP2.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390402\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715884083\u0022 data-ipsquote-userid=\u0022221428\u0022 data-ipsquote-username=\u0022PopinFRESH\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, PopinFRESH said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe head count at Uber Entertainment when they started KSP2 was reported to have been approximately 30 developers.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027d check on that. The only sources I\u0027ve seen for ~30 is for late 2019, when KSP2 went from ST to Intercept. That could easily have been 20 in late 2017 at the start of the development, and hired up to 30 for work on KSP2 specifically. If you have sources for ~30 developers at the late 2017, I\u0027d appreciate the link. I know there were more people at the studio, but that was largely on administrative side, and these were never transferred over to the Intercept.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-16T20:37:15Z\u0022 title=\u002205/16/2024 08:37  PM\u0022 data-short=\u0022May 16\u0022\u003EMay 16\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PopinFRESH","CreatedById":221428,"CreatedDateTime":"2024-05-17T00:45:12Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390425\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715889405\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n...I\u0027d check on that. The only sources I\u0027ve seen for ~30 is for late 2019, when KSP2 went from ST to Intercept. That could easily have been 20 in late 2017 at the start of the development, and hired up to 30 for work on KSP2 specifically. If you have sources for ~30 developers at the late 2017, I\u0027d appreciate the link. I know there were more people at the studio, but that was largely on administrative side, and these were never transferred over to the Intercept.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt\u0027s a Bloomberg paywalled article but here is a quote except from it.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAbout a dozen of Star Theory\u2019s 30 employees wound up leaving for Take-Two\u2019s new studio, while the rest stuck around in an attempt to save the business, they said. By January, the remaining team had a plan in place: Each employee would spend the next two months brainstorming new ideas and building prototypes. Then they would pitch the best ones to publishers at the Game Developers Conference in mid-March in the hope of securing a new deal, the five workers said.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat was from\u00A0anonymously interviewing 5 of the devs who remained at StarTheory.\n\u003C/p\u003E\n\u003Cp\u003E\nIn regards to prior to that I\u0027m basing that on personally following the Planetary Annellation kick starter and the failed Human Resources kick starters and seeing who was involved in Uber Entertainment\u0027s development team. They were consistently around 30 developers (used in the more broad sense of engineers, designers, etc.) with not much turnover. (I was a fan of MNC and SuperMNC; and Jon Mavor having played thousands of hours of TA growing up at lan parties with friends. I really liked what they did prior to deciding to shaft PA kickstarter backers). If you want to go back an login to linked in via the wayback machine and look at their company profile and then view the insights about employees you\u0027ll see they were about that size prior to 2017.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022http://www.linkedin.com/company/1513137\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.linkedin.com/company/1513137\u003C/a\u003E\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThat is the now defunct company profile for Uber Entertainment.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-17T00:51:04Z\u0022 title=\u002205/17/2024 12:51  AM\u0022 data-short=\u0022May 17\u0022\u003EMay 17\u003C/time\u003E by PopinFRESH\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-17T02:19:28Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390517\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715906712\u0022 data-ipsquote-userid=\u0022221428\u0022 data-ipsquote-username=\u0022PopinFRESH\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, PopinFRESH said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIn regards to prior to that I\u0027m basing that on personally following the Planetary Annellation kick starter [...] They were consistently around 30 developers [...] If you want to go back an login to linked in via the wayback machine and look at their company profile and then view the insights about employees you\u0027ll see they were about that size prior to 2017.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFair enough.\n\u003C/p\u003E\n"},{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-17T08:08:40Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/profile/57710-k2/?do=hovercard\u0022 data-mentionid=\u002257710\u0022 href=\u0022https://forum.kerbalspaceprogram.com/profile/57710-k2/\u0022 rel=\u0022\u0022\u003E@K^2\u003C/a\u003E\u00A0Thanks, I appreciate the detailed reply.\u00A0 I\u0027m really surprised rollbacks aren\u0027t a standard part of physics engines these days.\u00A0 (It occurs to me that if you have enough to do rollbacks, you\u0027re most of the way towards being able to snapshot and then save in a different thread, which is something else I\u0027m surprised isn\u0027t common.)\u00A0 If you\u0027re doing custom work anyway, is Godot a better starting point than Unity?\u00A0\u00A0 At least then it\u0027s not a black box.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390425\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715889405\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nJust have an atomic for next rigid body to grab ...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think I shouted \u0022next BATCH of items to grab\u0022 out loud.\u00A0\u00A0 Old habits die hard, I guess.\u00A0 I really need to deep dive what the fast way is in C# to do this correctly (this is much easier in Java, because the answer is \u0022everything sucks, shoulda used a different language if you cared\u0022).\u00A0 I\u0027m used to thinking of any cache-piercing actions as being really slow, but I guess you can safely assume a single-socket system for gaming and my intuitions are probably all wrong.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI like your \u0022islands\u0022 approach a lot - if there were KSP1-style physics bubbles around what each player was controlling, you could get good results without so much work whenever they didn\u0027t overlap.\u00A0 Of course, maybe docking is where you have the least tolerance for rubberbanding, so hmmm.\u00A0 I think if I were attempting it on a small budget I\u0027d just add a docking computer component to the game as a work around. OTOH, perhaps with smart use of part welding, so that as you mention a simple rocket was just a single rigid body, you could probably get away with a lot of not-very-performant stuff.\u00A0 Especially the case where it\u0027s just two Kerbals running across the surface next to each other (or both interacting with static controls at e.g. some colony), which might be a lot of the gameplay.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-17T23:17:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390582\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715933320\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m really surprised rollbacks aren\u0027t a standard part of physics engines these days.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUntil very recently, Havok was basically the only dedicated engine worth considering, and they\u0027ve, erm, always lagged a little behind top-of-the-line. Some in-house engines have had that feature. But being able to handle that kind of a network load in the first place is a relatively new thing in gaming. So it\u0027s not a huge surprise. Chaos is the first one that\u0027s going to be fully networkable out of the box, and it kind of makes sense. Epic ships with a networking solution already included and, despite some problems with it, it\u0027s what everyone will at least start with. So making physics work with that just makes sense.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390582\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715933320\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI think I shouted \u0022next BATCH of items to grab\u0022 out loud.\u00A0\u00A0 Old habits die hard, I guess.\u00A0 I really need to deep dive what the fast way is in C# to do this correctly\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell, you wouldn\u0027t do this in C# either even if you were building it for Unity. A Unity plugin can call native code, and you\u0027d put all your serious code into that. So C\u002B\u002B, likely. If you have worker threads already spinning, they can just increment an atomic to get the next index to work on. That\u0027s typically the simplest thing to do, and gives every thread a sensible stop condition.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390582\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715933320\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI like your \u0022islands\u0022 approach a lot - if there were KSP1-style physics bubbles around what each player was controlling, you could get good results without so much work whenever they didn\u0027t overlap.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNot mine. I don\u0027t know who introduced the term \u0022physics island\u0022 - might be Erin Catto, but at any rate, it seems to be fairly well established in the trade. It doesn\u0027t have to be spatially-limited. Just any collection of rigid bodies and constraints that are guaranteed not to interact with anything from another island. A number of engines only ever use one island (hence guaranteeing the requirement is met) and I know of at least one that still uses the island terminology for that lonely island.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you do multi-island solver, you can take an optimization that static colliders (like planet\u0027s surface) can be interacted with by multiple islands without causing the two islands to merge. Since the planet\u0027s infinitely massive (for the purpose of simulation) it can\u0027t transfer recoil from one island to another. Colonies are another matter however.\n\u003C/p\u003E\n\u003Cp\u003E\nActually, colonies deserve their own note. If you\u0027re doing custom physics (and maybe even if you don\u0027t) I would make colonies rigid. You can still simulate joint limits without allowing the joints to flex. The advantage is that you only have to solve the constraints matrix\u00A0\u003Cem\u003Eonce per configuration\u003C/em\u003E. So unless you enter build mode or something breaks from impact, you don\u0027t have to recompute it. And even when you do, you might be able to spread it between several frames, and you\u0027ll have a good starting point for iterations. So you just compute the inverse of a matrix and store it. When an island touches the colony, you solve for the constraints as if the colony was perfectly rigid. Once you have the contact force, you apply these to relevant structures in the colony, and run these though the stress matrix to see if any joints are overloaded. If they do, stuff breaks, shenanigans ensue. Otherwise, the colony remains as solid as part of the terrain.\n\u003C/p\u003E\n\u003Cp\u003E\nThis breaks a little with orbital colonies in theory, as you could have forces on one ship docked to a space colony transfer recoil through colony structure to another ship docked at the same colony, at which point they\u0027re really become one island even if you can treat the colony as rigid, but also, maybe just don\u0027t? While being able to boost a space colony with a docked ship seems like an interesting game mechanic, I think having colonies be fixed in the orbit once constructed would be a reasonable simplification. In that case, a space colony\u0027s basically a tiny moon with \u0022infinite\u0022 mass, and then you treat it\u00A0\u003Cem\u003Eexactly\u003C/em\u003E\u00A0the same as surface colonies, and problem solved. In this approach, two ships only become the same island if they collide, and again, that ought to be either slow and gentle, where things will probably settle naturally, or catastrophic, where you don\u0027t care about precision nearly as much, making it a simpler problem.\n\u003C/p\u003E\n\u003Cp\u003E\nThis approach to colonies would work even with stock physics, so long as you can basically create separate collision scenes for each ship. Or maybe each player? The latter would allow each client to run their own physics simulation for whatever ships are \u0022theirs\u0022, adding other ships into sim only if some bounding box collision is detected, at which point they\u0027re removed from the owning player\u0027s simulation.\u00A0 It\u0027s something I\u0027d have to experiment with in Unity to see how workable that is, but it lets you split the work between clients, at least, and still work together on building the same colonies, including any docking procedures that don\u0027t directly involve two ships touching each other.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390582\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715933320\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf you\u0027re doing custom work anyway, is Godot a better starting point than Unity?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nTough question, and I\u0027m probably not the best person to answer it. I have limited experience with both. From what I do know, Godot is better if you have a small team that\u0027s more engineer/tech-art heavy. You can do more custom stuff that fits your team\u0027s needs. For a larger or more art-heavy teams, Unity\u0027s probably still a better choice, because it has more built-in tools and pipelines. But the problem is that Unity\u0027s been getting more and more bloated, and project restart and build times are getting obscene for larger games. Basically, they\u0027re hurting exactly where Unity needs to be the strongest to be competitive. So the domain where Unity is the preferred engine is shrinking, with Godot and Unreal taking larger and larger bites from it from each end.\n\u003C/p\u003E\n\u003Cp\u003E\nFor 2017 Star Theory composition and size, I think Unity was still the best choice. For 2020 Intercept, in retrospect, I would say they should have switched to Unreal. Problem is, a lot of it is hindsight. I\u0027m sure if you searched, you can find some posts of mine from 2020-2021 where I say they had no reason to switch. I was involved in evaluation of Unreal 5 for a developer in 2021, and my early impressions of Chaos were not as good as they are now. Also, I don\u0027t think we really understood the scope of the new KSP2 design back then. Knowing where Unreal 5.4 is now and what KSP2 looks like, Unreal was a better choice. A lot of the tech Intercept spent a\u00A0\u003Cem\u003Elot of time\u003C/em\u003E\u00A0building for planets is just standard features in Unreal 5.4. They were raw and not production-ready in 5.0, which only officially released in 2022, but previews were available as early as late 2020 for some studios, and a lot of this was available as experimental features in Unreal 4.\n\u003C/p\u003E\n\u003Cp\u003E\nSo it would have been a very hard sell in 2020, but had Intercept gone with Unreal back then, they\u0027d have a lot more time to work on gameplay, would have much better physics and networking out of the box, and would have a better art and asset pipelines available to them. All in all, KSP2 would be half a year to a year ahead of where it is now, possibly nearing 1.0 release. Assuming the team was able to hire Unreal specialists early enough, but that\u0027s generally a lot easier to do these days than some specialist roles they had to find to hack these features into Unity.\n\u003C/p\u003E\n"},{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-19T21:10:11Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390836\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715987846\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUntil very recently, Havok was basically the only dedicated engine worth considering, and they\u0027ve, erm, always lagged a little behind top-of-the-line. Some in-house engines have had that feature. But being able to handle that kind of a network load in the first place is a relatively new thing in gaming. So it\u0027s not a huge surprise.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah, it does make sense that the AAA studios would have that as an advantage of their custom engines.\u00A0 Surprised it has taken this long to trickle down, but it\u0027s cool that Unreal is on it.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390836\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715987846\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell, you wouldn\u0027t do this in C# either even if you were building it for Unity. A Unity plugin can call native code, and you\u0027d put all your serious code into that. So C\u002B\u002B, likely. If you have worker threads already spinning, they can just increment an atomic to get the next index to work on. That\u0027s typically the simplest thing to do, and gives every thread a sensible stop condition.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n(Totally agree on the threading approach.) I don\u0027t know, you can get some good performance out of C# these days if you know what you\u0027re doing, but I suppose it\u0027s a case of \u0022do the hard stuff in the language you know best\u0022.\u00A0 Thanks for inspiring me to read up on std:atomic, since that was added about the time I switched to distributed systems (which ironically don\u0027t usually use clever multi-thread optimizations).\u00A0 Interesting choice by the committee to only offer the slow-but-consistent fetch-and-add based increment, and avoid the fast-but-inconsistent atomic increment.\u00A0 The latter was always a footgun, of course.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224390836\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221715987846\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/17/2024 at 6:17 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nActually, colonies deserve their own note. If you\u0027re doing custom physics (and maybe even if you don\u0027t) I would make colonies rigid.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027d certainly do orbital colonies as rigid, unless everything was working great and the team had time left over.\u00A0 The whole \u0022do the minimum viable product \u003Cem\u003Efirst\u003C/em\u003E\u0022 approach.\u00A0 IMO this was the big leadership failure in the KSP2 dev process, they aimed too high without a fallback that was still a good game.\u00A0 I don\u0027t understand why they didn\u0027t start with \u0022just KSP1 without the crashes\u0022, then incrementally add cool new ideas until the funding ran out.\u00A0 That\u0027s such a basic best-practice for running a project.\n\u003C/p\u003E\n\u003Cp\u003E\nFor surface colonies, is there canned solution yet for \u0022I want a large static map, except for some small cutouts here and there where terrain is replacable/deformable as a rare exception\u0022?\u00A0 KSP2 rolled their own ambitious solution, and small indie teams just seem to live with the restriction of trying to do base-building on non-deformable terrain.\u00A0 Seems like the kind of common problem a game engine should solve, but maybe they\u0027re working on \u0022just make maps of all deformable terrain fast\u0022 instead?\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThanks for your insights on engines!\u00A0 Unreal certainly turned some corner in the past few years, as all the \u0022small indie team sim games\u0022 I follow switched to Unreal as easier in their current work.\u00A0 But for KSP2 I\u0027d do all the orbital physics as custom anyway, leveraging real-world solutions, so it would probably come down to what the art side liked better.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-20T03:48:10Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391279\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716153011\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI don\u0027t understand why they didn\u0027t start with \u0022just KSP1 without the crashes\u0022, then incrementally add cool new ideas until the funding ran out.\u00A0 That\u0027s such a basic best-practice for running a project.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt looks like that\u0027s what they were trying for. The most critical failure was overengineering the ship/world data without adequate testing along the way. They ended up with some configurations being usaveable, others resulting in conflict between logical configuration and physics configuration, and others yet breaking the editor. Between symmetry modes, constraints, and the difference between save-state data and live data, it turned into an unworkable mess. I don\u0027t know who screwed it up, but somebody should have escalated problems with it a lot earlier.\n\u003C/p\u003E\n\u003Cp\u003E\nThe other problems were milder. Relocation problems and \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E \u0022teleporting\u0022 was probably still related to the same world state issues. And the only other major problem was that whoever implemented flight physics didn\u0027t understand how the integration errors in orbital mechanics work. Which, to be fair, is niche topic. I know a lot of competent physics engineers who think that they can always throw an RK4 at the problem and get consistent integration. Whereas, in space engineering it\u0027s a known problem that none of these standard methods conserve energy or momentum when integrating gravity. There are symplectic methods for gravity, but they come \u003Ca href=\u0022https://arxiv.org/abs/astro-ph/0304223\u0022 rel=\u0022external nofollow\u0022\u003Efrom papers like this one\u003C/a\u003E, and are generally tricky to implement. The two physics engineers they have had did not come from the field of physics where they\u0027d likely be aware of these kinds of problems with the methods they were deploying. As a result, you had various decaying orbits persisting throughout the development, with many attempted fixes.\n\u003C/p\u003E\n\u003Cp\u003E\nEverything else seemed to have been on track to resolution. I know the rendering was still way over the budget, but that\u0027s kind of typical for a project at a stage where you\u0027re still tuning a bunch of things to see what even works for the overall look of the game.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOn the net, everything salvageable. I\u0027d probably start the world/ship state from scratch and ensure it works correctly on every step. I\u0027d implement LoD system with intermediate rigid bodies for the ships, to greatly reduce the joint count and to make sure you don\u0027t have large mass differences between the two sides the joints hold together (it\u0027s a known limitation of all modern physics engines). And finally, I\u0027d replace cartesian integration of orbits to the one in Hamilton-Jacobi formulation, which lets you keep things on rails unless an external force acts on them. This works pretty well even for a restricted 3-body problem. Coupled with a symplectic integrator, the solution can be almost perfect for anything you can encounter in KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s a few months of work for a good team, but you really can\u0027t throw rookies at it. You need someone who has done physics in games to TD and architect it. That\u0027s a small-ish pool of people, so it won\u0027t be cheap, but better drop 7 figures into that then just keep burning it with a team that has to stumble into the correct solutions over a much longer period of time.\n\u003C/p\u003E\n"},{"CreatedByName":"TablesRUs","CreatedById":231390,"CreatedDateTime":"2024-05-20T04:20:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391342\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716176890\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n34 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027d replace cartesian integration of orbits to the one in Hamilton-Jacobi formulation\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYes, I always found it very strange that a energy-centric approach wasn\u0027t taken from the very beginning; this seems like an obvious beginner\u0027s mistake made in the first game and Hamiltonian-esque mechanics really does seem like the natural formulation mechanics in this setting.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-20T04:22:59Z\u0022 title=\u002205/20/2024 04:22  AM\u0022 data-short=\u0022May 20\u0022\u003EMay 20\u003C/time\u003E by TablesRUs\u003C/strong\u003E\n\u003Cbr\u003EExpand\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-20T10:35:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391347\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716178852\u0022 data-ipsquote-userid=\u0022231390\u0022 data-ipsquote-username=\u0022TablesRUs\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, TablesRUs said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYes, I always found it very strange that a energy-centric approach wasn\u0027t taken from the very beginning; this seems like an obvious beginner\u0027s mistake made in the first game and Hamiltonian-esque mechanics really does seem like the natural formulation mechanics in this setting.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe math does get a bit hairy. Not at a point where it should scare anyone with a physics degree, but it can be rough for a lot of game devs in general. And even if you have a Ph.D., this is niche. Meaning, you should be able to follow along, but building it from scratch without the experience? That is iffy. The constants of motion for inverse central potential are E,\u00A0\u003Cstrong\u003EL\u003C/strong\u003E, \u03BD\u003Csub\u003E0\u003C/sub\u003E,\u00A0\u03C9. (Energy, angular momentum, anomaly at epoch, and argument of the periapsis.) Note that for a given gravitational parameter \u03BC, combination of E and vector\u00A0\u003Cstrong\u003EL\u003C/strong\u003E\u00A0gives us\u00A0the standard orbital elements a, e, i,\u00A0\u03A9 and vice versa. (Semi-major axis, eccentricity, inclination, and argument of the ascending node.) So the constants of motion representation and orbital elements representation are essentially equivalent, and you\u0027ll probably swap between the two depending on whether you\u0027re doing physics or updating positions or any displayed values. So far pretty standard.\n\u003C/p\u003E\n\u003Cp\u003E\nThe fun part starts when you apply thrust \u003Cstrong\u003EF\u003C/strong\u003E. The E and\u00A0\u003Cstrong\u003EL\u003C/strong\u003E\u00A0updates are trivial and depend only on the position relative to the center of attraction \u003Cstrong\u003Er\u003C/strong\u003E\u00A0and velocity vector \u003Cstrong\u003Ev\u003C/strong\u003E. dE/dt = \u003Cstrong\u003Ev\u003C/strong\u003E\u00B7\u003Cstrong\u003EF\u003C/strong\u003E and d\u003Cstrong\u003EL\u003C/strong\u003E/dt = \u003Cstrong\u003Er\u003C/strong\u003E\u2A2F\u003Cstrong\u003EF\u003C/strong\u003E. But then the update for\u00A0\u03BD\u003Csub\u003E0\u003C/sub\u003E\u00A0and\u00A0\u03C9 actually get quite messy. (Left as exercise to the reader, because I don\u0027t want to.) The advantage, though, is that if you\u0027re doing a one-body \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E, you\u0027re done. This form automatically conserves energy and momentum - the only change to these two comes from the thrust equations, so long as we keep deriving the local cartesian coordinates from the orbital elements. So for the entirety of Kerbol system, you have a perfect sim.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you do have a restricted three-body, such as the Risk twins, and you want to use the above, you\u0027ll probably still want to pick your primary \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E in whatever reduced system makes sense, then apply additional forces as correction. So it\u0027d be as if there was a source of external force that isn\u0027t the ship\u0027s engines. Here we\u0027re back to having concerns about the conservation laws. In practice, the orbits get chaotic enough that you probably don\u0027t care, and you can just use an RK4 and save yourself sleep. But if you really want to, the symplectic integrator approach from the previous article is done in generalized coordinates, so you can apply it to the constants of motion of the unperturbed Hamiltonian to derive something truly precise.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is the point where we should chat about the warp, though. Maximum warp of KSP is 10\u003Csup\u003E5\u003C/sup\u003E. Alpha Centauri is 4.3ly from Earth. The interstellar distances are reportedly \u0022realistic,\u0022 which in the most generous interpretation means 0.4 Kerbin light-years at realistic c of 3x10\u003Csup\u003E8\u003C/sup\u003Em/s. So most generously, we\u0027re looking at something like 10\u003Csup\u003E14\u003C/sup\u003Em. A 1g torch ship would traverse this in ~73 real world days. At 10\u003Csup\u003E5\u003C/sup\u003E\u00A0warp that\u0027s about 1 minute. Which is fine, but only if you really can torch the whole way, your frame rate holds, and there\u0027s nothing at significantly higher distances. In other words, 10\u003Csup\u003E5\u003C/sup\u003E\u00A0must be supported in KSP2 as an absolute minimum, and needs to be rock solid. Ideally, you want to be able to push it to 10\u003Csup\u003E6\u003C/sup\u003E\u00A0while maintaining a 1:1 simulation.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, say you\u0027re running a busy 10\u003Csup\u003E3\u003C/sup\u003E\u00A0objects (ships, satellites, debris) and you want 10\u003Csup\u003E6\u003C/sup\u003E\u00A0warp. If you wanted to maintain fidelity equivalent to a 30Hz simulation, leaving you with about... 0.1 instructions per object? Ok, so 30Hz is clearly a no go, but do we need to? Obviously, no. For any object without external forces (so not in Risk sytem and with engines idle) it\u0027s sufficient to check for next \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E intersection and set a reminder for then. This part is actually an interesting code challenge in itself. Clearly, a lot of objects are just never going to go anywhere. A satellite near Kerbin with PE above atmo and AP below Mun is going to stay in that orbit forever. But something interplanetary might clip into \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E of another planet at\u00A0\u003Cem\u003Esome\u003C/em\u003E\u00A0point in the future. Should you always predict this? Personally, I\u0027d ignore it for debris above certain warp and just say that if you have no crew/cores and you\u0027re confined to current \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E, ignore inner \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E intersections. That leaves us only with solving for the motion of things that are either under power or might go under power (due to crew, probes). And this is where the method you use for integration matters. A full symplectic integrator in constants of motion coordinates might get into thousands of cycles per step. This will likely be your limiting factor. So the question becomes, can we cut this further?\n\u003C/p\u003E\n\u003Cp\u003E\nAnd yeah... Remember how I said that E and\u00A0\u003Cstrong\u003EL\u003C/strong\u003E\u00A0updates are trivial? They still are, and they\u0027re still what we most care about. For objects under thrust (or other external force) you can simulate in E,\u00A0\u003Cstrong\u003EL\u003C/strong\u003E,\u00A0\u003Cstrong\u003Er\u003C/strong\u003E,\u00A0\u003Cstrong\u003Ev\u003C/strong\u003E\u00A0coordinates. Note the redundancy. You want to update\u00A0\u003Cstrong\u003Er\u003C/strong\u003E\u00A0and\u00A0\u003Cstrong\u003Ev\u003C/strong\u003E\u00A0as a Verlet, and renormalize to E and\u00A0\u003Cstrong\u003EL\u003C/strong\u003E, while the latter are updated from force integration only. This\u00A0\u003Cem\u003Ewill\u003C/em\u003E\u00A0have a precession drift, but that should be tiny compared to true precession due to applied force and it won\u0027t yeet your objects out of the system like flees as integrating only\u00A0\u003Cstrong\u003Er\u003C/strong\u003E\u00A0and\u00A0\u003Cstrong\u003Ev\u003C/strong\u003E\u00A0would. As a final piece, apply variable time steps to this approach. What that last bit gives you is that anything far away from a gravity source will travel in mostly a straight line, where you can do coarse steps. And anything going around a heavy object won\u0027t stay there for long, because if it\u0027s applying enough thrust to make you go to fine steps, it\u0027ll either escape the system or crash into the massive object. Either way, you won\u0027t have to care about it for too long, and your overall simulation rate gets to stay high. With this approach you really can have tends of ships under power with thousands of pieces of debris running 10\u003Csup\u003E6\u003C/sup\u003E\u00A0warp and not causing half of your satellites to disappear because they crashed into something they shouldn\u0027t have.\n\u003C/p\u003E\n\u003Cp\u003E\nIt does still mean that the physics will have to be frozen on the ships themselves, just like in non-physics warp in KSP1, and you\u0027ll have to get clever with resource use, and how that\u0027s updated. (And not whatever unholy nightmare was plaguing\u00A0\u003Cem\u003Eboth\u00A0\u003C/em\u003Ethe KSP1 and KSP2...) But all of these problems are now independent of the coordinate systems and how we do the integration. They\u0027re just something KSP2 team would have had to deal with to support ships that continue using up fuel as they\u0027re traveling under warp.\n\u003C/p\u003E\n\u003Cp\u003E\nSo hopefully above gives a bit of an outline of both what KSP2 team should have been doing with orbital physics, and why they probably didn\u0027t think about it. The physics experts the team had knew basically nothing about the game development. And the game engineers on the project were Unity devs, for whom it\u0027s very natural to think of every rocket as a collection of scene nodes with mono behaviors. And yeah, you can\u0027t do that in a game they were trying to make. I hope they were going to figure it out eventually, but I can see why they didn\u0027t from the start.\n\u003C/p\u003E\n"},{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-20T11:42:57Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391369\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716201347\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n33 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe fun part starts when you apply thrust \u003Cstrong\u003EF\u003C/strong\u003E. The E and\u00A0\u003Cstrong\u003EL\u003C/strong\u003E\u00A0updates are trivial and depend only on the position relative to the center of attraction \u003Cstrong\u003Er\u003C/strong\u003E\u00A0and velocity vector \u003Cstrong\u003Ev\u003C/strong\u003E. dE/dt = \u003Cstrong\u003Ev\u003C/strong\u003E\u00B7\u003Cstrong\u003EF\u003C/strong\u003E and d\u003Cstrong\u003EL\u003C/strong\u003E/dt = \u003Cstrong\u003Er\u003C/strong\u003E\u2A2F\u003Cstrong\u003EF\u003C/strong\u003E. But then the update for\u00A0\u03BD\u003Csub\u003E0\u003C/sub\u003E\u00A0and\u00A0\u03C9 actually get quite messy. (Left as exercise to the reader, because I don\u0027t want to.) The advantage, though, is that if you\u0027re doing a one-body \u003Cabbr title=\u0022Sphere of Influence\u0022\u003E\u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E\u003C/abbr\u003E, you\u0027re done. This form automatically conserves energy and momentum - the only change to these two comes from the thrust equations, so long as we keep deriving the local cartesian coordinates from the orbital elements. So for the entirety of Kerbol system, you have a perfect sim.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis.\u00A0 The code would be dead simple (relative to \u0022rocket sim\u0022).\u00A0 Further, if you remove game physics for anything not in the physics bubble and, keep track of orbital parameters and not coordinates, then you don\u0027t even need to know where anything is until it needs to be displayed.\u00A0 You could have any number of bodies in elliptical orbits and give them 0 computational effort until you needed to display them.\u00A0 Perfect for high timewarp, and orbits cannot decay, or for that matter wander due to cumulative FP rounding error.\u00A0 As you say, \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESOI\u003C/abbr\u003E-crossing orbits are a matter of setting a timer (which they should be getting right anyway to support Alarm Clock in the base game.).\n\u003C/p\u003E\n\u003Cp\u003E\nFor high timewarp, I\u0027d certainly start development with treating the boosting ship as a rigid body.\u00A0 Modeling joints under boost at high timewarp seems like a \u0022nice to have\u0022 at best.\n\u003C/p\u003E\n\u003Cp\u003E\nUntil you mentioned the Risk twins, it didn\u0027t occur to me why you were discussing 3-body sim. \u00A0 Wow, talk about starting with an overly ambitious dream.\u00A0 Man, talk about stuff to defer until after everything else is working!\u00A0 That was the tail end of the roadmap, and it seems like they started with it.\n\u003C/p\u003E\n\u003Cp\u003E\nUpthread you mentioned the problems in KSP2 with save data and live data diverging.\u00A0 Is there some common problem with saving/restoring full physics data for the public engines?\u00A0 I\u0027ve seen small indie teams using both Unity and Unreal just treat that as an unsolvable problem and just not save physics state despite being physics-heavy sims.\u00A0 I\u0027m curious whether that\u0027s actually difficult with stock physics engines, or it\u0027s a case of buying some game save tool off the store without understanding it, so they\u0027re stuck with the positional-only information it came with.\n\u003C/p\u003E\n"},{"CreatedByName":"steveman0","CreatedById":64580,"CreatedDateTime":"2024-05-20T11:46:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391279\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716153011\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 hours ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI don\u0027t know, you can get some good performance out of C# these days if you know what you\u0027re doing, but I suppose it\u0027s a case of \u0022do the hard stuff in the language you know best\u0022\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCertainly modern C# has come a long way, but I know Unity for the longest time was stuck on much older versions of C# that wouldn\u0027t see these benefits especially where Mono is concerned.\u00A0 I\u0027m not familiar with the version of Unity they are running and what the latest version of C# it supports, but I could certainly see the limitations here making C\u002B\u002B notably more performant in addition to being more familiar as you noted.\n\u003C/p\u003E\n"},{"CreatedByName":"Skorj","CreatedById":201273,"CreatedDateTime":"2024-05-20T12:10:45Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391382\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716205592\u0022 data-ipsquote-userid=\u002264580\u0022 data-ipsquote-username=\u0022steveman0\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 minutes ago, steveman0 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nCertainly modern C# has come a long way, but I know Unity for the longest time was stuck on much older versions of C# that wouldn\u0027t see these benefits especially where Mono is concerned.\u00A0 I\u0027m not familiar with the version of Unity they are running and what the latest version of C# it supports, but I could certainly see the limitations here making C\u002B\u002B notably more performant in addition to being more familiar as you noted.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah, C# has had a lot of improvement in the past few years, which is surprising for such a mature language.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s baffling why Unity is stuck with such an old version of C#, perhaps they see Android as their primary platform now, but it\u0027s been clear for a while that they\u0027ve lost their way.\u00A0 But of of course that wasn\u0027t obvious in 2017.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-20T12:20:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391381\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716205377\u0022 data-ipsquote-userid=\u0022201273\u0022 data-ipsquote-username=\u0022Skorj\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n28 minutes ago, Skorj said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUpthread you mentioned the problems in KSP2 with save data and live data diverging.\u00A0 Is there some common problem with saving/restoring full physics data for the public engines?\u00A0 I\u0027ve seen small indie teams using both Unity and Unreal just treat that as an unsolvable problem and just not save physics state despite being physics-heavy sims.\u00A0 I\u0027m curious whether that\u0027s actually difficult with stock physics engines, or it\u0027s a case of buying some game save tool off the store without understanding it, so they\u0027re stuck with the positional-only information it came with.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThere are two parts to it. One is just making sure the two models match and the other is stability.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first part\u0027s solvable. You just have to be thorough. It\u0027s very clear that there are situations where you would load a game in KSP2 and some connectors are marked as decoupled in logic, but the physics joint is still there. And that\u0027s just a programming error. The fact that there are lots of such errors stems from some bad architectural choices, but even so would be resolved iteratively after some number of patches.\n\u003C/p\u003E\n\u003Cp\u003E\nThe second part is stability. A solver has to have an internal state, because otherwise convergence will take too many iterations for every frame. And you can in theory dump that internal state and restore it from a save. It\u0027s not even hard if you have your own custom engine. But neither Unity nor Unreal give you easy access to it. So instead, when you start the simulation, the internal cache is zeroed out. If you had a very wobbly rocket and you saved the game and loaded, you might come back to a rocket that\u0027s rapidly disassembling itself, due to the forces exceeding joint limits before the simulation had time to settle. There are ways to improve on that too. You can run simulation at a much shorter time step until it settles, for example. It would cause the game to be slow-motion for a few seconds on a state save, but I think that\u0027d be very much acceptable. So it\u0027s a problem, but hardly game-breaking.\n\u003C/p\u003E\n"},{"CreatedByName":"cocoscacao","CreatedById":225696,"CreatedDateTime":"2024-05-20T14:29:54Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391396\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716207636\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf you had a very wobbly rocket and you saved the game and loaded, you might come back to a rocket that\u0027s rapidly disassembling itself, due to the forces exceeding joint limits before the simulation had time to settle.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWait... What?!\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2024-05-20T14:48:34Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391433\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716215394\u0022 data-ipsquote-userid=\u0022225696\u0022 data-ipsquote-username=\u0022cocoscacao\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 minutes ago, cocoscacao said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWait... What?!\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe solver approximates tension in joints iteratively. To avoid iterating many times per frame, the result from last frame is used as a starting point, and only one-two iterations are done to correct for changes. If you reloaded a scene, these tensions are set to zero, and if that\u0027s far from what it takes to keep the rocket together, for whatever reason, first few frames will over-correct, resulting in excessive forces.\n\u003C/p\u003E\n\u003Cp\u003E\nHave you noticed how big rockets do a bouncy-bounce when they spawn in on the pad? And how if they survive that, it\u0027s probably alright? Same principle, but for a complex enough build, you don\u0027t even need gravity. Something somewhere is probably under a bit of tension just due to how the distances work out, and that will ripple out. With the unfortunate enough configuration of the joints and joint strengths, insta-kraken. Still happens even in KSP1, albeit, rarely.\n\u003C/p\u003E\n"},{"CreatedByName":"Scarecrow71","CreatedById":210112,"CreatedDateTime":"2024-05-20T15:05:18Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391437\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716216514\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHave you noticed how big rockets do a bouncy-bounce when they spawn in on the pad?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou know, that\u0027s something I never could figure out as to why that happens.\u00A0 I mean, I get that IRL rockets are rolled slowly from where they are built to the pad, and that in the game they spawn on the pad.\u00A0 I just never understood why the physics would have the rocket start jumping up and down upon being spawned.\u00A0 It\u0027s as if the game spawns the rocket ABOVE the ground, and then it falls (albeit very slightly) to the ground, causing it to bounce around.\n\u003C/p\u003E\n\u003Cp\u003E\nAm I close on that?\u00A0 Or do I need a new set of eyes?\n\u003C/p\u003E\n"},{"CreatedByName":"cocoscacao","CreatedById":225696,"CreatedDateTime":"2024-05-20T15:10:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391437\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716216514\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n33 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe solver approximates tension in joints iteratively. To avoid iterating many times per frame,\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI thought it runs on each engine \u0022tick\u0022 and I didn\u0027t know it \u003Cem\u003Eapproximates\u003C/em\u003E. I assume it at least goes through every part on each iteration...?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-20T15:22:42Z\u0022 title=\u002205/20/2024 03:22  PM\u0022 data-short=\u0022May 20\u0022\u003EMay 20\u003C/time\u003E by cocoscacao\u003C/strong\u003E\n\u003Cbr\u003Eupdated\n\u003C/span\u003E\n"},{"CreatedByName":"steveman0","CreatedById":64580,"CreatedDateTime":"2024-05-20T17:01:45Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224391437\u0022 data-ipsquote-contentid=\u0022224740\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221716216514\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe solver approximates tension in joints iteratively. To avoid iterating many times per frame, the result from last frame is used as a starting point, and only one-two iterations are done to correct for changes. If you reloaded a scene, these tensions are set to zero, and if that\u0027s far from what it takes to keep the rocket together, for whatever reason, first few frames will over-correct, resulting in excessive forces.\n\u003C/p\u003E\n\u003Cp\u003E\nHave you noticed how big rockets do a bouncy-bounce when they spawn in on the pad? And how if they survive that, it\u0027s probably alright? Same principle, but for a complex enough build, you don\u0027t even need gravity. Something somewhere is probably under a bit of tension just due to how the distances work out, and that will ripple out. With the unfortunate enough configuration of the joints and joint strengths, insta-kraken. Still happens even in KSP1, albeit, rarely.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI never thought too deeply before about how the solution is actually achieved. The iterative nature makes perfect sense though. This brought to mind the other stability concerns I had observed in the game. Namely the spotaneous rapid disassembly bug.\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u0022224964\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed5993771292\u0022 src=\u0022https://forum.kerbalspaceprogram.com/topic/221516-structural-stability-issue-craft-violently-shakes-itself-apart-post-v020/?do=embed\u0022 style=\u0022height:194px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\nThis doesn\u0027t require it to occur immediately after a scene load, though it often does. I assumed this was due to the lack of sensible dampening forces leading to rounding errors becoming blown out by some singularity. I assumed that this would be something applied outside to overlay the physics model, but it is sounding like there might be more reliance on the canned solution that makes it more opaque in understanding what is at fault.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m curious to get your thoughts on this. Would the solver have something built-in to suppress spurious noise that could lead to this kind of result, or is that something that would be left to the developer to layer over the physics model to address? Anytime I\u0027ve built a model for some project from scratch, I would plan some kind of corrective force to ensure a stable state for predictability. Could some of the problems observed be explainable by the absense of something similar here? This seems necessary to ensure stability even if it might not be 100% accurate to life given the constraints imposed by the boundary conditions.\n\u003C/p\u003E\n"}]}