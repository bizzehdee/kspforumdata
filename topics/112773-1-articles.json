{"TopicId":112773,"ForumId":55,"TopicTitle":"New Wheel Modules","CreatedByName":"DuoDex","CreatedById":107061,"CreatedDateTime":"2015-06-12T17:26:32Z","PageNum":1,"Articles":[{"CreatedByName":"DuoDex","CreatedById":107061,"CreatedDateTime":"2015-06-12T17:26:32Z","Content":"Full story [here](http://www.edy.es/dev/2015/06/kerbal-space-program-will-use-vehicle-physics-pro/).\n\nDiscuss."},{"CreatedByName":"basic.syntax","CreatedById":109920,"CreatedDateTime":"2015-06-12T18:00:57Z","Content":"Nice words that offer hope for a great future - but too soon to tell if the end product will be better than a copy of current wheel behaviors (Squad\u0027s primary goal in a port: just get it all *working*, first.)"},{"CreatedByName":"mythbusters844","CreatedById":72313,"CreatedDateTime":"2015-06-12T20:30:42Z","Content":"I just screwed around in the [physics demo](https://build.cloud.unity3d.com/distro/play?projectid=vehicle-physics-pro\u0026ver=1\u0026build_name=vehicle-physics-pro\u0026unity3d_file_name=https%3A%2F%2Funitycloud-build-user-svc-live-build.s3.amazonaws.com%2Fvehicle-physics-pro%2Fdefault-web-1%2Fbuildpack.CAo98XJ3.unity3d%3Fresponse-content-disposition%3Dattachment%253B%2520filename%253Dvehicle-physics-pro-web-1-1424172378.unity3d%26response-content-type%3Dapplication%252Foctet-stream%26AWSAccessKeyId%3DAKIAI6ZGSQWNDMF7X33A%26Expires%3D1434226611%26Signature%3DtrwSXA8dKRlwH5zAZCtrr8ujhKo%253D\u0026device_view=1280x720_v\u0026unity_player_width=1600\u0026unity_player_height=900\u0026versionsubmit=) [(instructions here)](http://vehiclephysics.com/early-access/#sandbox-scene) for a full twenty minutes and was quite entertained and impressed. If the new wheels behave like this then a lot of long-standing issues relating to wheels will probably be solved."},{"CreatedByName":"Feradose","CreatedById":111211,"CreatedDateTime":"2015-06-13T10:19:46Z","Content":"Oh man am I drooling, does this mean I can use the large wheels rotated 90\u00C3\u201A\u00C2\u00B0 for low profile giant craft? Will wheels just clip through the ground like now or would it work?"},{"CreatedByName":"Wjolcz","CreatedById":39636,"CreatedDateTime":"2015-06-13T22:11:55Z","Content":"So the wheels will actually work like the old Bobcat wheels and not skis?"},{"CreatedByName":"passinglurker","CreatedById":103157,"CreatedDateTime":"2015-06-14T01:32:25Z","Content":"My big question is how hard/easy is it gonna be for modders to make their own? Presently the art of wheel making is treated like mysterious black magic."},{"CreatedByName":"Captain Sierra","CreatedById":74666,"CreatedDateTime":"2015-06-14T02:02:39Z","Content":"I have not tried the tech demo, so I gotta ask. Does this fix the lack of response time on steering?"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-06-14T04:09:47Z","Content":"\u003E \n\u003E Oh man am I drooling, does this mean I can use the large wheels rotated 90\u00C3\u201A\u00C2\u00B0 for low profile giant craft? Will wheels just clip through the ground like now or would it work?\n\nI wouldn\u0027t count on that changing. There\u0027s an extremely good reason for that behaviour in terms of physics performance. Wheel collision has to be evaluated every physics frame (many times per second), for each active wheel. That particular simplification is a very necessary part of typical wheel physics modelling, by casting a ray in the direction of the wheel\u0027s \u0022down\u0022 (which is not the same thing as gravity \u0022down\u0022) to find the terrain or object that it should be colliding with. It saves a significant amount of computation over actually trying to accurately model the collision of a cylinder with uneven terrain.\n\nI\u0027m sure this library is probably a good one, it certainly sounds good, but it is still constrained by the need to fit the required calculations into a small fraction of a physics frame, i.e. it will almost certainly include similar restrictions on \u0022down\u0022. Remember that most games using wheel physics don\u0027t allow completely free form construction, so a single fixed \u0022down\u0022 per wheel model is a perfectly reasonable design compromise for even the best of wheel physics libraries, especially if it leaves more physics computation time available for better friction\u002Btorque\u002Bsteering\u002Bsuspension modelling. Wheel physics on consumer PCs, even very high end gaming systems, will always involve approximations and some compromise. Maybe this library will surprise me, and has some great trick to improve on that normal simplified model without a huge performance hit, but I\u0027m certainly not expecting miracles on that specific point.\n\nFor the greater good, you really need to be looking for mod wheels that are suitable for your purpose, instead of asking for behaviour which would significantly hit the physics performance for everyone who uses the wheels in their intended way (i.e. correct attachment rotation). The wheels you would like to have, in terms of low ride height, are quite possible even with Unity 4\u0027s standard wheel colliders, you just need to find a part that actually matches your needs instead of trying to use the wrong part in an unsupported way.\n\nI would advise everyone to keep their expectations relatively low on this, then be pleasantly surprised if the new wheels are a huge improvement or deliver extras. If you set high expectations at this early stage, you could be setting yourself up for a big disappointment. Squad are being forced to change to a new wheel module because Unity 5\u0027s default wheel colliders are not fit for purpose, and not because they needed or necessarily desired vastly more accurate wheel physics, or at least that\u0027s how I interpret it. KSP can\u0027t let the wheel physics dominate the physics engine, they have to co-exist with all the other physics going on at the same time. That may well force Squad to configure their new wheel modules in a fairly \u0022simple\u0022 mode. The new wheels will very likely be a good improvement over current Unity 4 wheels, but keep your expectations fairly well grounded or risk disappointment.\n\nThe main improvements I anticipate is better modelling of friction and suspension, which is an area that the Unity 4 wheels don\u0027t handle in a terribly sophisticated way."},{"CreatedByName":"Grumman","CreatedById":76014,"CreatedDateTime":"2015-06-14T11:04:36Z","Content":"\u003E \n\u003E I wouldn\u0027t count on that changing. There\u0027s an extremely good reason for that behaviour in terms of physics performance. Wheel collision has to be evaluated every physics frame (many times per second), for each active wheel. That particular simplification is a very necessary part of typical wheel physics modelling, by casting a ray in the direction of the wheel\u0027s \u0022down\u0022 (which is not the same thing as gravity \u0022down\u0022) to find the terrain or object that it should be colliding with. It saves a significant amount of computation over actually trying to accurately model the collision of a cylinder with uneven terrain.\n\nDoesn\u0027t the game *already* need to accurately model the collision of cylinders with uneven terrain? Creating a specific type of cylinder that adds another variable to its tangential frictional force vector calculation does not seem like something that would require very much additional calculation."},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-06-14T14:47:49Z","Content":"\u003E \n\u003E Doesn\u0027t the game *already* need to accurately model the collision of cylinders with uneven terrain? Creating a specific type of cylinder that adds another variable to its tangential frictional force vector calculation does not seem like something that would require very much additional calculation.\n\nIf you mean collision of a miscellaneous cylindrical part with terrain, that\u0027s completely different to a wheel collider. In that case, it certainly does not need to accurately model the collision, as a very rough approximation is quite sufficient to produce a \u0022good enough\u0022 result. The behaviour I described, using a single ray cast in the wheel\u0027s \u0022down\u0022 direction, is what the Unity 4 wheel colliders are forced to do, because actually modelling the interaction of a cylinder with terrain is too computationally expensive, if you need the end result to behave roughly like a wheel would behave and maintain a high frame rate.\n\nThat calculation is significant, when you need to perform it e.g. 100 times per second (4 wheels and 25 physics frames per second, just as an example, I can\u0027t remember KSP\u0027s physics frame rate), alongside many other physics calculations and the remainder of the game\u0027s processing. The concept is simple enough, but actually creating code which runs within a small fraction of a physics frame, that\u0027s quite different to the concept.\n\nFor most games, there\u0027s simply no need to accurately model complex cylinder/terrain interaction for wheels. A simple ray cast, modelling the wheel more as a thin stick pointing downwards, can give an excellent approximation and saves a significant amount of computation. In essence, it distills wheel physics down to just the important part of real wheel physics. With a real wheel, looking at it in an instant frozen in time, there\u0027s a small flat square which interacts with terrain, and all the important behaviour occurs at that small flat interaction (discounting stuff that is completely out of scope, such as deformation of an air tyre).\n\n**Edited \u003Ctime datetime=\u00222015-06-14T14:50:29Z\u0022 title=\u002206/14/2015 02:50  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 14, 2015\u003C/time\u003E by Murph**"}]}