{"TopicId":121888,"ForumId":44,"TopicTitle":"C, C\u002B\u002B, C# Programming - what is the sense in this","CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-28T14:21:11Z","PageNum":2,"Articles":[{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-28T22:19:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darnok\u0022 data-cite=\u0022Darnok\u0022\u003E\u003Cdiv\u003EThere is no single \u0022best scenario, best language or best algorithm\u0022 it depends what are you doing:\u003Cp\u003E- if you need to repeat execution of your app multiple time with same data, but you put different parameters in your logic\u003C/p\u003E\u003Cp\u003E- repeat execution of app every time with different data set and same parameters in logic\u003C/p\u003E\u003Cp\u003E- or else \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was reading this and noted your comparison. It does seem like C# will not be a bad launching point but I should note that \u003Ca href=\u0022https://www.jwz.org/doc/java.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.jwz.org/doc/java.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EWhat does he mean by \u003Cem\u003EJava doesn\u0027t have free().\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Z-Man\u0022 data-cite=\u0022Z-Man\u0022\u003E\u003Cdiv\u003EPB666: Declare your AddNumbers method static. Then you can call it without creating an object for it, like so:\u003Cp\u003EClass_AddNumbers.AddNumbers(...);\u003C/p\u003E\u003Cp\u003EThe closest analoge to your methods/functions in VB that you just write and call in a single module probably would just be private static functions in C#. Callable without an object, but only from other functions from the same class. Same in C\u002B\u002B, only there, you can also just have static functions in the .cpp file without declaring them in the class header. Note: \u0027static\u0027 means about seven different things in C\u002B\u002B depending on context. And even though the two \u0027static\u0027s here work towards the same goal, they\u0027re totally different.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI know, I know, but I was trying just to get a class function just to work, I reduced it to the simplist possible. It was a bit of a cheat for VB, but VB got a cheat anyway because the function can be defined in the same module. However I should add, that I tend to create a separate Functions module to keep Subs and Functions separate from the Main routine, so its not really a cheat. The example was just trying to demonstrate the hassle of trying to create an object in C#.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIf a plugin has to be in C\u002B\u002B, just roll with it. There are some nuances, but for your purposes, you can write C code in C\u002B\u002B and it will compile, execute, and probably run either just as fast or close enough. Plus, you can use some of the neat C\u002B\u002B features, like new operator instead of malloc. On the other hand, you don\u0027t have to. So if you don\u0027t want to declare a single class, don\u0027t.\u003Cp\u003EOh, that could be a plugin to dev environment.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think it is a dev thing, So use everything in C\u002B\u002B but don\u0027t use classes for the intense processing stuff use structs instead, which is more of the way I program in VB anyway (using user defined types).\u003C/p\u003E\n"},{"CreatedByName":"wumpus","CreatedById":133850,"CreatedDateTime":"2015-09-28T23:34:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EWhich contradicts your previous point. As per say calculating a log or a square root, all I need for certain comparisons is 3 digits, many of these are statistical so if I am off by 0.001 P at the threshold of 0.05 p it doesn\u0027t really matter since I will have to reprocess all the positives anyway. It could for a SquareRoot take Newton\u0027s shortcut and it would work. \u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMy point was that the hardware does almost exactly what you are complaining about (determine double the precision, than throw it away), only it makes the CPU more expensive (although likely just in the noise nowadays). Square roots and lns are irrational, so finding the \u0022exact\u0022 rounded number is impossible and this isn\u0027t done by the hardware (ieee754 allows roughly a bit or two of error for those calculations).\u003C/p\u003E\u003Cp\u003EIf you really care about the amount of cycles your squareroot calculation takes at most ~20 cycles to run under Haswell. How fast can you write and debug a routine that gets 3 digits of accuracy? And then just how many times will you have to run that routine to justify writing it (500 million times per second it takes you to write and debug, assuming you can get it less than 10 cycles).\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T01:00:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022wumpus\u0022 data-cite=\u0022wumpus\u0022\u003E\u003Cdiv\u003EMy point was that the hardware does almost exactly what you are complaining about (determine double the precision, than throw it away), only it makes the CPU more expensive (although likely just in the noise nowadays). Square roots and lns are irrational, so finding the \u0022exact\u0022 rounded number is impossible and this isn\u0027t done by the hardware (ieee754 allows roughly a bit or two of error for those calculations).\u003Cp\u003EIf you really care about the amount of cycles your squareroot calculation takes at most ~20 cycles to run under Haswell. How fast can you write and debug a routine that gets 3 digits of accuracy? And then just how many times will you have to run that routine to justify writing it (500 million times per second it takes you to write and debug, assuming you can get it less than 10 cycles).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t know, thats a good experiment. \u003C/p\u003E\u003Cp\u003ELets say i am completely clueless, but i have a sprit that knows everything, the sprite knows that sqrt 33333 = 182.57. OK I take the number and round it to either next higher or low square of x10, in this case i know the square root of 40000, so its square root is 200. \u003C/p\u003E\u003Cp\u003E33333/200 = 166.65. So I take the average of the two divisors....366.65/2 = 183.33. Close enough, but one more round, 33333/183.33 = 181.82. Average = 182.57\u003C/p\u003E\u003Cp\u003Edone. For being completely clueless i got to 5 decimal places pretty quickly. BTW the derivative x^2 = 2x so here any deviation i can quickly use calculus to get much closer in the next step. \u003C/p\u003E\u003Cp\u003EBTW want to see how many steps to calculate pi to the precision limit of a computer startng with the chord of 180 degrees? This is the measure the ancients used instead of the sine. 2, 2.828, 3, ........ about 16 cycles. 6 will suffice. \u003C/p\u003E\u003Cp\u003EHint the chord of and angle is precisely equal to the sin of its half-angle. cos of half angle = sqrt(1- sin2). chord of half angle = sqrt ((1-cos)2 \u002B sin2)- sin and cosine are of the half angle. multiply that by the number of times the half angle divides the orginal chord and after a few cycles you have pi() \u003Ca href=\u0022https://en.m.wikipedia.org/wiki/Chord_(geometry)\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://en.m.wikipedia.org/wiki/Chord_(geometry)\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESo how would i know. If i take an answer at any step and round it to 4 places, if the rounded number of the next step equals that of the previous step, then no more cycling is required. \u003C/p\u003E\u003Cp\u003EEssentially iif an ancient way of calculating can beat advanced mathematics to the punch (I don\u0027t need to build the acrpolis to more than say the precision of a gnats balls on the scale of the universe) then . . . .\u003C/p\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-09-29T01:29:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lukethecoder64\u0022 data-cite=\u0022lukethecoder64\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003EC originated at bell labs.\u003C/span\u003E It was called C because it was based off the language \u0022B\u0022. C\u002B\u002B is based off of C. It was originally was going to be called \u0022C with classes\u0022 (so you can do stuff like potato.explode()\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E but they went with C\u002B\u002B as a reference to the new function [vaiable]\u002B\u002B; (e.g. n\u002B\u002B\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E. I don\u0027t know how C# came into existence. I think Microsoft was involved.\u003Cp\u003ESouce: Several code books I have read.\u003C/p\u003E\u003Cp\u003EHope this helps.\u003C/p\u003E\u003Cp\u003ELuke\u003C/p\u003E\u003Cp\u003E--updated--\u003C/p\u003E\u003Cp\u003EOh god. I still have nightmares about my arduino. (the old ones, with only 16kb of code space)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIndeed it did... because their engineers were not able enough to work in straight assembler. I used to work with a guy who basically was there when all that went down.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T02:11:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003ELets say i am completely clueless, but i have a sprit that knows everything, the sprite knows that sqrt 33333 = 182.57. OK I take the number and round it to either next higher or low square of x10, in this case i know the square root of 40000, so its square root is 200. \u003Cp\u003E33333/200 = 166.65. So I take the average of the two divisors....366.65/2 = 183.33. Close enough, but one more round, 33333/183.33 = 181.82. Average = 182.57\u003C/p\u003E\u003Cp\u003Edone. For being completely clueless i got to 5 decimal places pretty quickly. BTW the derivative x^2 = 2x so here any deviation i can quickly use calculus to get much closer in the next step. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, except CPU does all of that in its internal hardware using an SSE instruction. So it gives you full double floating point precision in about half the time, because instead of using general computation instructions that you would need, it literally uses a specialized circuit that only does square roots. You will not be able to beat that.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T04:50:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EYeah, except CPU does all of that in its internal hardware using an SSE instruction. So it gives you full double floating point precision in about half the time, because instead of using general computation instructions that you would need, it literally uses a specialized circuit that only does square roots. You will not be able to beat that.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESSE, jogging the ole memory cells..... i found this \u003Ca href=\u0022http://tommesani.com/index.php/component/content/article/2-simd/46-sse-arithmetic.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://tommesani.com/index.php/component/content/article/2-simd/46-sse-arithmetic.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESo according to this it can do single 32 bit or simultaneously 4 single 32 bit. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://assemblyrequired.crashworks.org/timing-square-root/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://assemblyrequired.crashworks.org/timing-square-root/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESo i was correct, at least partially don\u0027t trust the msvc or gcc compilers it defaults to the x87 math coprocessor instead of SSE. If you want to optimize this you need a c-compiler wuth a preference for SSE. Its amazing the production SSE came out almost 2 decades ago and the software is still defaulting to the previous generation of math coprocessor. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E you can beat the hardware. The most surprising thing about these results for me was that it is faster to take a reciprocal square root and multiply it, than it is to use the native sqrt opcode, by an order of magnitude. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd while it may be the case that he can do it, will i be able to convince some implimentation of c on linux to do it?\u003C/p\u003E\u003Cp\u003EIn this case the fastest was the SSE rsqrtss (x) * x, so does c give access to reciprocal sqrt funtion on the SSE for any implimentation, same can be asked for Java. \u003C/p\u003E\u003Cp\u003Ehere is the c\u002B\u002B version \u003Ca href=\u0022http://www.programmingforums.org/thread29168.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.programmingforums.org/thread29168.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe problem with the instruction is that it is unpipelined and tacks several clock cycles, as a consequence everything stalls. processed normally keeps the pipeline open. \u003C/p\u003E\u003Cp\u003EAmazingly we made it back to the science problem of ithe OP. But at least we have got two steps closer to a resolution. Man i miss the days when i could tell the processor what to do, there would be so little guess work here.\u003C/p\u003E\n"},{"CreatedByName":"Darnok","CreatedById":85708,"CreatedDateTime":"2015-09-29T07:26:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EI was reading this and noted your comparison. It does seem like C# will not be a bad launching point but I should note that \u003Ca href=\u0022https://www.jwz.org/doc/java.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.jwz.org/doc/java.html\u003C/a\u003E\u003Cp\u003EWhat does he mean by \u003Cem\u003EJava doesn\u0027t have free().\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis guy is C dev from 2000 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAt that time Java garbage collector was bad and making your own memory management was better solution in some cases. Of course Java doesn\u0027t have function called free(), but you can force JVM to run garbage collector at time you need it, but you should be advanced dev if you want to do this.\u003C/p\u003E\u003Cp\u003EIf you are someone who likes authorities... keep in mind that Google is using Java and JVM as their main development environment and they are not people who like to waste resources \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-29T08:02:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EIndeed it did... because their engineers were not able enough to work in straight assembler. I used to work with a guy who basically was there when all that went down.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOne urban legend says that the future authors of C (Kenneth Thompson and Dennis Ritchie) liked a computer game, similar to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Asteroids_(video_game)\u0022 rel=\u0022external nofollow\u0022\u003EAsteroids\u003C/a\u003E. They used to play it on the main server but it wasn\u0027t powerful enough to serve about a hundred users and play the game at the same time. Thompson and Ritchie were annoyed with that and thus decided to port the game onto a free \u003Ca href=\u0022https://en.wikipedia.org/wiki/PDP-7\u0022 rel=\u0022external nofollow\u0022\u003EPDP-7\u003C/a\u003E that stood at their office. This computer however had no operating system and this forced them to write one (UNIX). In the end they decided to port the game also on a \u003Ca href=\u0022https://en.wikipedia.org/wiki/PDP-11\u0022 rel=\u0022external nofollow\u0022\u003EPDP-11\u003C/a\u003E which was a very difficult task because its code was written purely in assembly language. Thus they though to use some kind of a higher level portable language in order to port the OS code from one computer to another. The B language lacked the functionality that allowed to exploit some features of PDP-11 and thus they decided to make C.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T08:05:14Z\u0022 title=\u002209/29/2015 08:05  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by cicatrix\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T08:35:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003ESo i was correct, at least partially don\u0027t trust the msvc or gcc compilers it defaults to the x87 math coprocessor instead of SSE. If you want to optimize this you need a c-compiler wuth a preference for SSE. Its amazing the production SSE came out almost 2 decades ago and the software is still defaulting to the previous generation of math coprocessor.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot exactly. VS defaults to using SSE instructions as far back as 2010, at least. In fact, optimized code will replace sqrt() function calls with the appropriate intrinsic. You need to set a switch if you want to use AVX features, though. GNU compiler requires a switch to compile SSE instructions, but again, it\u0027s quite capable. You don\u0027t need a fancy compiler for this.\u003C/p\u003E\u003Cp\u003EAlso, there are SSE instructions for both 32 and 64 bit floating point. However, with 64 bit, you can only do two numbers at a time, unless you are using AVX. With AVX, you can do full 4-dimensional vector math with double precision. All current CPUs support these features, and we do actually make use of these in game dev whenever possible.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIn this case the fastest was the SSE rsqrtss (x) * x, so does c give access to reciprocal sqrt funtion on the SSE for any implimentation, same can be asked for Java. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAny modern CPU will support SSE and SSE2 instructions. I don\u0027t recall which of the two rsqrtss belongs to, but it\u0027s one of these. This is completely independent of the operating system. Furthermore, intrinsics are implemented in a similar way on both GNU and Microsoft compilers. Same code should compile on both.\u003C/p\u003E\u003Cp\u003EThere is something to keep in mind about the rsqrt, however. It has MUCH lower precision than sqrtss or sqrt(). It\u0027s something like 11 binary places, I think. So the precision is a little better than 3 decimal places. If you\u0027re happy with that, by all means run with it. But that\u0027s the reason why it\u0027s faster than sqrtss.\u003C/p\u003E\u003Cp\u003EThe code for using this flavor would look something like this.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E#include \u0026lt;stdio.h\u0026gt;\u003Cbr\u003E#include \u0026lt;emmintrin.h\u0026gt;\u003Cbr\u003E\u003Cbr\u003Estatic __inline float sqrt_fast(float x)\u003Cbr\u003E{\u003Cbr\u003E\tfloat ret;\u003Cbr\u003E\t__m128 y = _mm_set1_ps(x);\u003Cbr\u003E\u003Cbr\u003E\ty = _mm_mul_ps(_mm_rsqrt_ps(y), y);\u003Cbr\u003E\t_mm_store_ss(\u0026amp;ret, y);\u003Cbr\u003E\u003Cbr\u003E\treturn ret;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eint main(void)\u003Cbr\u003E{\u003Cbr\u003E\tfloat x = 2.0f;\u003Cbr\u003E\u003Cbr\u003E\tprintf(\u0022sqrt(%.2f) = %.3f\\n\u0022, x, sqrt_fast(x));\u003Cbr\u003E\u003Cbr\u003E\treturn 0;\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYes, there\u0027s a good reason to use _ps instructions instead of _ss instructions here, although the speed gain is tiny.\u003C/p\u003E\u003Cp\u003EP.S. The method above runs through an array at an average rate of 7.5 cycles per sqrt. Using _mm_sqrt_ps() does the same work in about 15 cycles per sqrt. So using reciprocal with multiplication is actually twice as fast. Using a function call from math.h is 50 cycles per sqrt. All times are averaged from 1,000 operations, compiled on VC\u002B\u002B with /O2 flag set.\u003C/p\u003E\u003Cp\u003EP.P.S. Same deal with GNU compiler, using -O2 -msse2 switches. The fast sqrt computed in less than 5 cycles per operation. The sqrtps one still came in at 15, and math.h one managed 35.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T09:16:13Z\u0022 title=\u002209/29/2015 09:16  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MircoMars","CreatedById":61811,"CreatedDateTime":"2015-09-29T09:27:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003E...The reason why I selected C hash...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESry 4 wisecracking:\u003C/p\u003E\u003Cp\u003EIt\u0027s called \u0022C sharp\u0022, like the note. \u003C/p\u003E\u003Cp\u003EFunfact: in musical notation a tone can be lowered or raised a half-tone by using \u0022b\u0022 or \u0022#\u0022. \u0022C#\u0022 is halfway between \u0022C\u0022 and \u0022D\u0022 and synonymous to \u0022Db\u0022.\u003C/p\u003E\u003Cp\u003E(not going into the physics and conventions of temperated tunings here...)\u003C/p\u003E\u003Cp\u003Ejust clarifying where the name comes from, carry on...\u003C/p\u003E\n"},{"CreatedByName":"technion","CreatedById":85380,"CreatedDateTime":"2015-09-29T09:59:03Z","Content":"\n\u003Cp\u003EI don\u0027t know if it\u0027s been mentioned due to skimming but..\u003C/p\u003E\u003Cp\u003EC always ends up being the lowest common interface. Which is why when the new SHA-3 was announced for example, the outcome of that will be a reference C library. The applications I write in Ruby and the applications I write in Erlang (and you all really should write more Erlang) can all use that C library, and if Java happens to float your boat, you can use that library too. It just so happens that performance is a major issue for a hashing library, but if it wasn\u0027t, you still wouldn\u0027t find this sort of thing written in C#, because Linux users aren\u0027t going to install Mono so that they hopefully point at some way of accessing the code from their favourite platform.\u003C/p\u003E\u003Cp\u003ESo it doesn\u0027t always come down to performance, sometimes it\u0027s down to being the right portability solution.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T10:12:26Z","Content":"\n\u003Cp\u003EIf this was the only reason, we\u0027d probably be having this discussion about Fortran 77, or something. There are reasons why C became this de facto standard.\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-29T10:48:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIf this was the only reason, we\u0027d probably be having this discussion about Fortran 77, or something. There are reasons why C became this de facto standard.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI would call it not \u0027reasons\u0027 but \u0027pure chance\u0027.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T12:24:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ENot exactly. VS defaults to using SSE instructions as far back as 2010, at least. In fact, optimized code will replace sqrt() function calls with the appropriate intrinsic. You need to set a switch if you want to use AVX features, though. GNU compiler requires a switch to compile SSE instructions, but again, it\u0027s quite capable. You don\u0027t need a fancy compiler for this.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ehmmm, i think the download mentioned the freeware was 2012 or 2013, i will have to check. This entire post will get printed out, \u0022........ Thats the problem with googling, but on the bright side the socket 775 went down in favor of an i5 so at least the CPU has the latest instruction sets\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EAlso, there are SSE instructions for both 32 and 64 bit floating point. However, with 64 bit, you can only do two numbers at a time, unless you are using AVX. With AVX, you can do full 4-dimensional vector math with double precision. All current CPUs support these features, and we do actually make use of these in game dev whenever possible.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhen you say the difference is tiny are we talking relative to all game processes or relative a particular process, like perspective change. Anyway i have to see what the full features of the cpu are, and what math functions it supports.\u003C/p\u003E\u003Cp\u003EAfter I did a little researching I found that this is microsoft C\u002B\u002B implimentation code. \u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/ayeb3ayc.aspx\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://msdn.microsoft.com/en-us/library/ayeb3ayc.aspx\u003C/a\u003E. Going to upset some folks but cannot be run on ARM machines, so the code would not be portable anyway. \u003C/p\u003E\u003Cp\u003ESo . . . . after a long contentious debate we have gravitated to C\u002B\u002B sparing on the class definitions and focusing on the struct definitions. And so finally we find the sense of C is in C\u002B\u002B.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MircoMars\u0022 data-cite=\u0022MircoMars\u0022\u003E\u003Cdiv\u003ESry 4 wisecracking:\u003Cp\u003EIt\u0027s called \u0022C sharp\u0022, like the note. \u003C/p\u003E\u003Cp\u003EFunfact: in musical notation a tone can be lowered or raised a half-tone by using \u0022b\u0022 or \u0022#\u0022. \u0022C#\u0022 is halfway between \u0022C\u0022 and \u0022D\u0022 and synonymous to \u0022Db\u0022.\u003C/p\u003E\u003Cp\u003E(not going into the physics and conventions of temperated tunings here...)\u003C/p\u003E\u003Cp\u003Ejust clarifying where the name comes from, carry on...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ehash is a colloquial deprecation, after you try to impliment a class you will know why.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022technion\u0022 data-cite=\u0022technion\u0022\u003E\u003Cdiv\u003EI don\u0027t know if it\u0027s been mentioned due to skimming but..\u003Cp\u003EC always ends up being the lowest common interface. Which is why when the new SHA-3 was announced for example, the outcome of that will be a reference C library. The applications I write in Ruby and the applications I write in Erlang (and you all really should write more Erlang) can all use that C library, and if Java happens to float your boat, you can use that library too. It just so happens that performance is a major issue for a hashing library, but if it wasn\u0027t, you still wouldn\u0027t find this sort of thing written in C#, because Linux users aren\u0027t going to install Mono so that they hopefully point at some way of accessing the code from their favourite platform.\u003C/p\u003E\u003Cp\u003ESo it doesn\u0027t always come down to performance, sometimes it\u0027s down to being the right portability solution.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMono was one of the recommened downloads fir ubuntu and Monondevelope IDE is one of two IDE i have installed, i wonder how many other folks have MD on their linux.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T14:04:38Z\u0022 title=\u002209/29/2015 02:04  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-09-29T14:27:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003EOne urban legend says that the future authors of C (Kenneth Thompson and Dennis Ritchie) liked a computer game, similar to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Asteroids_%28video_game%29\u0022 rel=\u0022external nofollow\u0022\u003EAsteroids\u003C/a\u003E. They used to play it on the main server but it wasn\u0027t powerful enough to serve about a hundred users and play the game at the same time. Thompson and Ritchie were annoyed with that and thus decided to port the game onto a free \u003Ca href=\u0022https://en.wikipedia.org/wiki/PDP-7\u0022 rel=\u0022external nofollow\u0022\u003EPDP-7\u003C/a\u003E that stood at their office. This computer however had no operating system and this forced them to write one (UNIX). In the end they decided to port the game also on a \u003Ca href=\u0022https://en.wikipedia.org/wiki/PDP-11\u0022 rel=\u0022external nofollow\u0022\u003EPDP-11\u003C/a\u003E which was a very difficult task because its code was written purely in assembly language. Thus they though to use some kind of a higher level portable language in order to port the OS code from one computer to another. The B language lacked the functionality that allowed to exploit some features of PDP-11 and thus they decided to make C.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I\u0027ve seen/heard this before. C-language and the Unix OS were developed by and for ATT Bell Labs, it belonged to them - their employees Thompson and Ritchie were the creators. PDPs were widely used by ATT and Bell, their switching systems interfaces relied heavily on them... I started my career working for Bell Telephone, as a \u003Ca href=\u0022https://en.wikipedia.org/wiki/1ESS_switch\u0022 rel=\u0022external nofollow\u0022\u003E1AESS\u003C/a\u003E \u003Ca href=\u0022https://en.wikipedia.org/wiki/Recent_change_memory_administration_center\u0022 rel=\u0022external nofollow\u0022\u003ERCMAC\u003C/a\u003E programmer. This is ATT Bell Labs we\u0027re talking about here... do you seriously think this all came about because of a game? I\u0027d need to see personal memoirs by Thompson or Ritchie claiming so before I believed that.\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-29T17:05:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EI\u0027d need to see personal memoirs by Thompson or Ritchie claiming so before I believed that.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s why I said it was an urban legend. Here\u0027s another one. When I first read it without any references to April, 1st I actually bought it for a real thing.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003ET h e V O G O N N e w s S e r v i c e \u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003EVNS TECHNOLOGY WATCH: [Mike Taylor, VNS Correspondent]\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E===================== [Littleton, MA, USA ]\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003ECOMPUTERWORLD 1 April\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E CREATORS ADMIT Unix, C HOAX\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E In an announcement that has stunned the computer industry, Ken Thompson,\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Dennis Ritchie and Brian Kernighan admitted that the Unix operating\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E system and C programming language created by them is an elaborate April\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Fools prank kept alive for over 20 years. Speaking at the recent\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E UnixWorld Software Development Forum, Thompson revealed the following:\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E \u0022In 1969, AT\u0026amp;\u0026amp;T had just terminated their work with the \u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E GE/Honeywell/AT\u0026amp;\u0026amp;T Multics project. Brian and I had just started \u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E working with an early release of Pascal from Professor Nichlaus Wirth\u0027s ETH \u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E labs in Switzerland and we were impressed with its elegant simplicity and\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E power. Dennis had just finished reading \u0027Bored of the Rings\u0027, a\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E hilarious National Lampoon parody of the great Tolkien \u0027Lord of the\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Rings\u0027 trilogy. As a lark, we decided to do parodies of the Multics\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E environment and Pascal. Dennis and I were responsible for the operating\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E environment. We looked at Multics and designed the new system to be as\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E complex and cryptic as possible to maximize casual users\u0027 frustration\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E levels, calling it Unix as a parody of Multics, as well as other more\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E risque allusions. Then Dennis and Brian worked on a truly warped\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E version of Pascal, called \u0027A\u0027. When we found others were actually\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E trying to create real programs with A, we quickly added additional\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E cryptic features and evolved into B, BCPL and finally C. We stopped\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E when we got a clean compile on the following syntax:\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E for(;P(\u0022\\n\u0022),R--;P(\u0022|\u0022))for(e=C;e--;P(\u0022_\u0022\u002B(*u\u002B\u002B/8)%2))P(\u0022| \u0022\u002B(*u/4)%2);\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E To think that modern programmers would try to use a language that\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E allowed such a statement was beyond our comprehension! We actually\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E thought of selling this to the Soviets to set their computer science\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E progress back 20 or more years. Imagine our surprise when AT\u0026amp;\u0026amp;T and\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E other US corporations actually began trying to use Unix and C! It has\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E taken them 20 years to develop enough expertise to generate even\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E marginally useful applications using this 1960\u0027s technological parody,\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E but we are impressed with the tenacity (if not common sense) of the\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E general Unix and C programmer. In any event, Brian, Dennis and I have\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E been working exclusively in Pascal on the Apple Macintosh for the past\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E few years and feel really guilty about the chaos, confusion and truly\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E bad programming that have resulted from our silly prank so long ago.\u0022\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Major Unix and C vendors and customers, including AT\u0026amp;\u0026amp;T, Microsoft,\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Hewlett-Packard, GTE, NCR, and DEC have refused comment at this time. \u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Borland International, a leading vendor of Pascal and C tools,\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E including the popular Turbo Pascal, Turbo C and Turbo C\u002B\u002B, stated they\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E had suspected this for a number of years and would continue to enhance\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E their Pascal products and halt further efforts to develop C. An IBM\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E spokesman broke into uncontrolled laughter and had to postpone a\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E hastily convened news conference concerning the fate of the RS-6000,\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E merely stating \u0027VM will be available Real Soon Now\u0027. In a cryptic\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E statement, Professor Wirth of the ETH institute and father of the\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E Pascal, Modula 2 and Oberon structured languages, merely stated that P.\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E T. Barnum was correct.\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E In a related late-breaking story, usually reliable sources are stating\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E that a similar confession may be forthcoming from William Gates\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E concerning the MS-DOS and Windows operating environments. And IBM\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E spokesman have begun denying that the Virtual Machine (VM) product is\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E an internal prank gone awry.\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E {COMPUTERWORLD 1 April}\u003C/div\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027courier new\u0027;\u0022\u003E\u003Cspan style=\u0022color:#006400;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cdiv\u003E {contributed by Bernard L. Hayes}\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe following is a joke when someone points out the advantages of Pascal over C:\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EThere are 10 known advantages of Pascal over C. I will state only one, but the most important one:\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EFor example, you can write this in C:\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Efor(;P(\u0022\\n\u0022).R-;P(\u0022\\ \u0022))for(e=3DC;e-;P(\u0022_ \u0022\u002B(*u\u002B\u002B/8)%2))P(\u0022| \u0022\u002B (*u/4)%2);\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EIn Pascal, you CANNOT.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T17:12:00Z\u0022 title=\u002209/29/2015 05:12  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by cicatrix\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T17:58:13Z","Content":"\n\u003Cp\u003EFunny, but you cant write that in basic either.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIf this was the only reason, we\u0027d probably be having this discussion about Fortran 77, or something. There are reasons why C became this de facto standard.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAllen and Gates killed fortran when the invented Altair basic and ported it as the BIOS of the pc in so creating MS and essentually giving basica and Gwbasic away with every new PC, in 1987 you could buy a vB dirt cheap. Most of the non ms apps i used before 90 were either uncompiled basic routines or stand alone routines compiled from basic. With VB fortran was dead, stick a fork in it. What program did your average garage built pc come with, other than Ms-dos? nough said. \u003C/p\u003E\u003Cp\u003EGates basically filtered what people used, wordstar gone, visicalc gone. If you throw your software to the world with all but zero piracy guards on it, then give away the programming language you used to create its kernal, and basically create a national geek fest for all the teenages who think they can program better than you, some of them actually will. Which you know from the start will happen because that is the basis of your own company. So you just scoop up unpatented idea and reverse engineer them into your OS while the hackers end up in corperate using your OS and your software to basically overthrow your competition. \u003C/p\u003E\u003Cp\u003EC exists because of the limitations of MS basic, plain and simple, after 1987 C was always ahead, and basic was always playing catchup because it was simply easier to improve C than to improve basic and Codeview and the Macroassembler gave the programmer a good reason for doing it. If assembly level programming was practical on the 80286 or later PC we would not be talking about this. C provides the minimal amount of up front structure and the maximum amount of control.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T18:17:29Z\u0022 title=\u002209/29/2015 06:17  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T18:36:54Z","Content":"\n\u003Cp\u003EFortran would have no trouble competing with Basic for the same reason that C did. It was a real programming language. If something killed Fortran, it was most positively C. Because C actually punishes you for bad programming practices that Fortran and Basic encouraged. Anyone who ever attempted to port a Fortran library will tell you the same.\u003C/p\u003E\u003Cp\u003EOn a side note, why in the world would you want to port a computationally heavy code to ARM. That is just a silly idea.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T19:18:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EFortran would have no trouble competing with Basic for the same reason that C did. It was a real programming language. If something killed Fortran, it was most positively C. Because C actually punishes you for bad programming practices that Fortran and Basic encouraged. Anyone who ever attempted to port a Fortran library will tell you the same.\u003Cp\u003EOn a side note, why in the world would you want to port a computationally heavy code to ARM. That is just a silly idea.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBasic is a real programming language, If MS had chosen to go with visual fortran and drop VB, we would not be having this conversation now. Basic is gates baby, fortran wasn\u0027t, its as simple as that. I learned F 4 in college, not a chance i would drop basic for fortran once quick basic came along. If you were on a PC and you programmed you were married to M$, thats it, cause if u went with other guys lang the next OS may make that program unrunnable. She\u0027s quite a jealous wife. Thats why we are talking about linux and stand alone C/C\u002B\u002B programming and dual boot systems, divorce is not an easy thing. Whatever happened to Borlan? \u003C/p\u003E\u003Cp\u003EFortran has the social legacy of punch cards, readers, thick stacks of tree killing paper were a misspelling error occurs in line 656 of your code, although it continues to process instructions. It could not make the transition fast enough to on the fly/paperless debugging. \u003C/p\u003E\u003Cp\u003EThe problem of basic is rooted in its early evoluiotion, as the saying goes you cannot be a slave to two lords, on the one hand it was BIOS but on the second hand it was a novelty that could be used by some college student staring at a blank screen and capable of typing the word GWBASIC[return] and all of a sudden gates has potentially another outsource of his next ms-dos extension.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T19:32:44Z","Content":"\n\u003Cp\u003EF77 produces linkable binaries. It has performance comparable to C. It\u0027s a real programming language. BASIC and QBasic are interpreted languages. They run like snails on sedatives. If C-family of languages has not emerged, you can bet your rear that every single operating system right now would be written in F77 or F90. There are no alternatives that can compete in performance with C and F77. The next best thing is Pascal, but it never had the same optimizations that went into C and F77. Everything else is hopelessly outdated for writing anything like a modern OS. The only reason F77 has lost is because of its syntax, which is much closer to BASIC than C, and that\u0027s a \u003Cem\u003Every bad thing\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003EAgain, you\u0027re arguing from pure ignorance, having zero understanding of how the code is executed and what it involves. You are entirely out of your depth. That should be clear even to you. Why do you insist on continuing to argue? I understand if you were asking questions, but you keep pretending that you know better, when it\u0027s demonstrably false.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T21:11:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EF77 produces linkable binaries. It has performance comparable to C. It\u0027s a real programming language. BASIC and QBasic are interpreted languages. They run like snails on sedatives. If C-family of languages has not emerged, you can bet your rear that every single operating system right now would be written in F77 or F90. There are no alternatives that can compete in performance with C and F77. The next best thing is Pascal, but it never had the same optimizations that went into C and F77. Everything else is hopelessly outdated for writing anything like a modern OS. The only reason F77 has lost is because of its syntax, which is much closer to BASIC than C, and that\u0027s a \u003Cem\u003Every bad thing\u003C/em\u003E.\u003Cp\u003EAgain, you\u0027re arguing from pure ignorance, having zero understanding of how the code is executed and what it involves. You are entirely out of your depth. That should be clear even to you. Why do you insist on continuing to argue? I understand if you were asking questions, but you keep pretending that you know better, when it\u0027s demonstrably false.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHere comes the arrogance again, the moderators wonder why these conflicts appear? \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EA \u003Cstrong\u003Eprogramming language\u003C/strong\u003E is a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Formal_language\u0022 rel=\u0022external nofollow\u0022\u003Eformal\u003C/a\u003E \u003Ca href=\u0022https://en.wikipedia.org/wiki/Constructed_language\u0022 rel=\u0022external nofollow\u0022\u003Econstructed language\u003C/a\u003E designed to communicate \u003Ca href=\u0022https://en.wikipedia.org/wiki/Machine_instruction\u0022 rel=\u0022external nofollow\u0022\u003Einstructions\u003C/a\u003E to a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Machine\u0022 rel=\u0022external nofollow\u0022\u003Emachine\u003C/a\u003E, particularly a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Computer\u0022 rel=\u0022external nofollow\u0022\u003Ecomputer\u003C/a\u003E. Programming languages can be used to create \u003Ca href=\u0022https://en.wikipedia.org/wiki/Program_%28machine%29\u0022 rel=\u0022external nofollow\u0022\u003Eprograms\u003C/a\u003E to control the behavior of a machine or to express \u003Ca href=\u0022https://en.wikipedia.org/wiki/Algorithm\u0022 rel=\u0022external nofollow\u0022\u003Ealgorithms\u003C/a\u003E.-wikipedia\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Darnok","CreatedById":85708,"CreatedDateTime":"2015-09-29T22:18:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E BASIC and QBasic are interpreted languages.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am not using Basic, but other interpreted language - Python. \u003C/p\u003E\u003Cp\u003EWhile my code is interpreted and slower than C, any call for system or math function is as fast as in C, because I can use CPython - interpreter with libraries written in C and compiled, so linux can run them in same way as your C code \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAgain about Google, Python creator Guido van Rossum once said that Google would use only python, because of few features, but since Java has larger market share they want to lure as much devs as possible to their tools. \u003C/p\u003E\u003Cp\u003EFacebook is written in PHP, but they \u003Ca href=\u0022https://en.wikipedia.org/wiki/HipHop_for_PHP\u0022 rel=\u0022external nofollow\u0022\u003Econvert and compile\u003C/a\u003E their code to C\u002B\u002B. \u003C/p\u003E\u003Cp\u003EYou can do same thing with other interpreted languages. \u003C/p\u003E\u003Cp\u003EOf course for someone who is doing physics fortran is always the best. \u003C/p\u003E\u003Cp\u003EAlso why do you even compare interpreted and complied langs? If you compare monkey and fish on how fast they can climb trees, monkey always wins, but it is very narrow minded since interpreted languages are not created to have same performance and same purpose as compiled langs.\u003C/p\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-09-29T23:19:29Z","Content":"\n\u003Cp\u003EIt\u0027s my guess that none of you ever programmed in Fortran \u003Cem\u003Efor a living\u003C/em\u003E (or at least, very few of you). I did (along with several other languages, and 4GLs); Starting in the late 1970\u0027s on through the early 2000\u0027s. Fortran is still a viable language, and I\u0027d be willing to bet it\u0027s still used in the labs for hard-core math calculations, especially being there\u0027s still \u003Ca href=\u0022https://en.wikipedia.org/wiki/List_of_numerical_libraries#Fortran\u0022 rel=\u0022external nofollow\u0022\u003Eextensive scientific libraries\u003C/a\u003E existing for it. Also, you guys are comparing the world of the PC vs Mini\u0027s, Micro\u0027s, and Mainframes ... and that\u0027s like comparing apples to oranges. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_rolleyes.gif\u0022 alt=\u0022:rolleyes:\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EAnd another thing I\u0027ll throw in, the overhead involved between Fortran and any C variant is like night and day... Fortran is far tighter.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-29T23:26:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darnok\u0022 data-cite=\u0022Darnok\u0022\u003E\u003Cdiv\u003EI am not using Basic, but other interpreted language - Python. \u003Cp\u003EWhile my code is interpreted and slower than C, any call for system or math function is as fast as in C, because I can use CPython - interpreter with libraries written in C and compiled, so linux can run them in same way as your C code \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can code high level logic in whatever you want. Even Prolog. If you need to compute something, you write your algorithm in C and call it from Python. And no, you don\u0027t just call math functions from Python algorithm, because then you lose all of the compiler optimization, and your code runs at about 1/10th the speed at best. There are times when you don\u0027t care, but then you don\u0027t go around complaining that your computations take too long.\u003C/p\u003E\u003Cp\u003EAnd the fact that I\u0027m referring to BASIC as not a real language has very little to do with the fact that it\u0027s interpreted. It\u0027s garbage. It has bad syntax, it forces you to use bad programming practices, it\u0027s abysmal in performance even for an interpreter, and when something goes wrong in BASIC code, figuring out is next to impossible. The idea that BASIC could have ever beaten out FORTRAN is ludicrous. For starters, you can write an operating system in FORTRAN.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EIt\u0027s my guess that none of you ever programmed in Fortran for a living (or at least, very few of you). I did (along with several other languages, and 4GLs); Starting in the late 1970\u0027s on through the early 2000\u0027s. Fortran is still a viable language, and I\u0027d be willing to bet it\u0027s still used in the labs for hard-core math calculations, especially being there\u0027s still extensive scientific libraries existing for it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFortran is dying out in labs, and for a very good reason. There are much better libraries for C/C\u002B\u002B these days, and most of the old code written in Fortran, including some of the libraries, are absolutely atrocious. Specifically because in F77, it was very difficult to avoid bad programming practices, and while F90 is quite decent, many Fortran programmers carried their bad habits over. To put it plainly, I\u0027ve seen goto statements in F90 libraries. That\u0027s bad. That shouldn\u0027t happen.\u003C/p\u003E\u003Cp\u003ELike I\u0027ve said earlier, though, Fortran could have easily been where C is if there was no C. Out of languages currently out there, barring all C-like languages, Fortran is the next best choice for building OSes and computation libraries.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-29T23:28:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EIt\u0027s my guess that none of you ever programmed in Fortran \u003Cem\u003Efor a living\u003C/em\u003E (or at least, very few of you). I did (along with several other languages, and 4GLs); Starting in the late 1970\u0027s on through the early 2000\u0027s. Fortran is still a viable language, and I\u0027d be willing to bet it\u0027s still used in the labs for hard-core math calculations, especially being there\u0027s still \u003Ca href=\u0022https://en.wikipedia.org/wiki/List_of_numerical_libraries#Fortran\u0022 rel=\u0022external nofollow\u0022\u003Eextensive scientific libraries\u003C/a\u003E existing for it. Also, you guys are comparing the world of the PC vs Mini\u0027s, Micro\u0027s, and Mainframes ... and that\u0027s like comparing apples to oranges. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_rolleyes.gif\u0022 alt=\u0022:rolleyes:\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E Fortran is a very viable Pe for things like super computers, and there are extensive apps for it, and very occassionally I see papers that the sup mat has a fortran algorythm in it. The apples and oranges. There are also xwindows/unix boxes that they are using C built apps. Yes, visual stuff are IDE, unlike K2(his statement about the slop in vb in no way denigrates it as a language, and once a very popular one) I dont see that as a problem or a weakness. You can write C in an IDE, but, even in old basic forms you can create an standalone exe without having a runtime files like some later versions of vbasic. I am not a programming ethnocentrist, the question of why fortran did not take off...... but i was there, i saw all the flies swarming around MS, and they cried \u0027woe are we\u0027 everyone is pirating all our software\u0027. But the flies were their lifeblood because it built interest and flooded everything out. The problems with basic all true, but basic was made for machines with 4k of program memory, lol. One of my sisters friend had a singer computer with a 12 inch tv and a tape recodere and a small calculator like keyboard to enter the program. That is were basic comes from. These were novelties. But microsft did keep it evolving.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-29T23:35:23Z\u0022 title=\u002209/29/2015 11:35  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 29, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"}]}