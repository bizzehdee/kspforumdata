{"TopicId":223742,"ForumId":131,"TopicTitle":"Fuel Switch","CreatedByName":"KSRe-dev","CreatedById":232681,"CreatedDateTime":"2024-02-18T06:47:46Z","PageNum":1,"Articles":[{"CreatedByName":"KSRe-dev","CreatedById":232681,"CreatedDateTime":"2024-02-18T06:47:46Z","Content":"\n\u003Cp\u003E\nThere\u0027s a basic fuel switch in KSRe that someone else may be interested in as a starting point. I don\u0027t have time to develop this further, and it\u0027s definitely worthy of a separate mod.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\ninside the spacewarp plugin:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003Eprivate GameInstance game;\nprivate ResourceContainerChangedMessage lastResMsg;\nprivate ushort fuelContIDVal;\ninternal static List\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ResourceDefinitionID\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E fuelList;\n\npublic override void OnInitialized() {\n\tgame = GameManager.Instance.Game;\n\tgame.Messages.PersistentSubscribe\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;GameStateChangedMessage\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(ChangedGameState);\n\tgame.Messages.PersistentSubscribe\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;UISliderReleasedMessage\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(ReleasedUISlider);\n\tgame.Messages.PersistentSubscribe\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ResourceContainerChangedMessage\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(ChangedResCont);\n}\n\n  public void Update() {\n            if (game?.GlobalGameState?.GetGameState().GameState != GameState.FlightView) return;\n            if (!game?.ResourceManager?.IsVisible ?? false) return;\n            foreach (PartComponent part in game?.ViewController?.GetActiveVehicle()?.GetSimVessel()?.SimulationObject.PartOwner.Parts) {\n                if (part == null) continue;\n                ResourceContainer resCont = part.PartResourceContainer;\n                if (resCont == null) continue;\n                if (resCont.GetResourcesContainedCount() == 0 || part.PartResourceContainer.GetStoredResourcesTotalMass() == 0) continue;\n                if (!fuelList.All(f =\u0026gt; resCont.IsResourceContained(f))) continue;\n                if (fuelList.Where(r =\u0026gt; resCont.GetResourceStoredMass(r) \u0026gt; 0).Count() \u0026gt; 1)\n                    resCont.DumpAllResources();\n            }\n        }\n  \n  private void ChangedGameState(MessageCenterMessage m) {\n            if (fuelContIDVal != 0) return;\n            if (game.ResourceDefinitionDatabase.GetAllResourceIDs().Count() == 0) return;\n            // stock bug (v0.2.0): game.ResourceDefinitionDatabase.GetResourceIDFromName()\n            ResourceDefinitionID recipeID = game.ResourceDefinitionDatabase.GetAllResourceIDs().FirstOrDefault(r =\u0026gt; game.ResourceDefinitionDatabase.GetDefinitionData(r).name == \u0022FuelContainer\u0022);\n            if (recipeID.Value == 0) return;\n            fuelContIDVal = recipeID.Value;\n            fuelList = game.ResourceDefinitionDatabase.GetDefinitionData(recipeID).recipeProperties.IngredientsResourceIDs.ToList();\n        }\n  \n  private void ChangedResCont(MessageCenterMessage m) {\n            if (game.GlobalGameState.GetGameState().GameState != GameState.VehicleAssemblyBuilder) return;\n            ResourceContainerChangedMessage resMsg = (ResourceContainerChangedMessage)m;\n            if (resMsg == null) return;\n            lastResMsg = resMsg;\n        }\n  \n        private void ReleasedUISlider(MessageCenterMessage m) {\n            if (game.GlobalGameState.GetGameState().GameState != GameState.VehicleAssemblyBuilder) return;\n            if (lastResMsg == null) return;\n            if (!game.ResourceDefinitionDatabase.GetRecipesForIngredient(lastResMsg.ResourceId, out List\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ResourceDefinitionID\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E recipeList)) return;\n            if (!recipeList.Any(r =\u0026gt; r.Value == fuelContIDVal)) return;\n            fuelList.Where(r =\u0026gt; r != lastResMsg.ResourceId).ToList().ForEach(r =\u0026gt; lastResMsg.Container.DumpResource(r));\n            lastResMsg = null;\n        }\n  \n  \n  \u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nharmony patch for ui\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \n  [HarmonyPatch(typeof(PartInfoOverlay), \u0022PopulateResourceInfoFromPart\u0022)]\n  [HarmonyPostfix]\n  public static void FixFuelContainerTotal(List\u0026lt;KeyValuePair\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E, \u003C/span\u003E\u003Cspan class=\u0022atn\u0022\u003Estring\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\u0026gt; dict, IObjectAssemblyResource[] resourceArray) {\n            if (!resourceArray.Any(r =\u0026gt; r.Name == \u0022FuelContainer\u0022)) return;\n            dict[dict.Count - 1] = new KeyValuePair\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;string\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E, \u003C/span\u003E\u003Cspan class=\u0022atn\u0022\u003Estring\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(dict.Last().Key, $\u0022~{resourceArray.First(r =\u0026gt; r.Name == \u0022FuelContainer\u0022).Capacity} {Units.SymbolTonne}\u0022);\n        }\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\npatch manager patch for the container recipe, and an example to add it to tanks (will need some customization there)\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003E@new(\u0022FuelContainer\u0022,true)\n:resources {\n\tdisplayNameKey: \u0022Resource/DisplayName/FuelContainer\u0022;\n\tabbreviationKey: \u0022Resource/Abbreviation/FC\u0022;\n\t\u002BOxidizer { unitsPerRecipeUnit: 1.0; }\n\t\u002BMonopropellant { unitsPerRecipeUnit: 1.2; }\n\t\u002BMethane { unitsPerRecipeUnit: 0.8; }\n\t\u002BHydrogen { unitsPerRecipeUnit: 0.0625; }\n\tvfxFuelType: \u0022Pressurized\u0022;\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003E#fueltank_* {\n\t\tresourceContainers[0]: $value:set(name,\u0022FuelContainer\u0022);\n\t\tresourceContainers[0]: $value:set(initialUnits,0.0);\n\t}\n// .. etc\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe way this works in game is by creating a container with 4 fuels. When one is filled, the others are emptied.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u00221xxmeXc.gif\u0022 class=\u0022ipsImage\u0022 data-ratio=\u0022102.98\u0022 height=\u0022380\u0022 width=\u0022369\u0022 src=\u0022https://i.imgur.com/1xxmeXc.gif\u0022\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nit also dumps the other fuels in the same way during resource transfers in flight.\n\u003C/p\u003E\n\u003Cp\u003E\nso currently only one fuel can be used in a container, that\u0027s just what i needed with this design. the remaining issue is that the fuel bar in the stage stack is never filled completely as it contains the empty containers.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}