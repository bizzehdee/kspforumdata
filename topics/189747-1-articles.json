{"TopicId":189747,"ForumId":15,"TopicTitle":"KSP 1.8 Part Icon Shaders for custom Shaders","CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2019-11-12T18:48:12Z","PageNum":1,"Articles":[{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2019-11-12T18:48:12Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/114736-jplrepo/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022114736\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/114736-jplrepo/\u0022 rel=\u0022\u0022\u003E@JPLRepo\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nDuring the pre-update discussions regarding 1.8, it was brought up that there were issues with the Part Icons for any parts using non-KSP shaders.\u00A0 IIRC you mentioned that a solution was being developed (or was at least going to be investigated?).\n\u003C/p\u003E\n\u003Cp\u003E\nDid anything come out of this?\u00A0 Is there a way for me to set the icon shader for any specific part/model/mesh?\u00A0 Or, how could one specify the original shader -\u0026gt; icon shader mappings so that KSP will know to use the proper icon shader?\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nNotably, KSP 1.8 does not render the part-icons properly for any part using a non-KSP shader.\u00A0 It looks like the icon defaults to using the KSP/Diffuse equivalent icon shader.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAlternatively, is there source available for the icon-shaders anywhere, so that I might develop properly functioning replacements (I haven\u0027t d/l the update part tools yet; was it included?)?\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nThanks;\n\u003C/p\u003E\n"},{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2019-11-14T03:59:28Z","Content":"\n\u003Cp\u003E\nThis didn\u0027t make it into 1.8.x. sorry about that.\n\u003C/p\u003E\n\u003Cp\u003E\nThat said, the materials can be changed for a part with a small piece of code.\u003Cbr\u003E\nThe AvailablePart for your part has a reference to the iconPrefab template object.\n\u003C/p\u003E\n\u003Cp\u003E\nYou could search this for renderers/materials and replace them as you so desire.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT:\n\u003C/p\u003E\n\u003Cp\u003E\nThough reading your comment again now, I\u0027m not sure it\u0027s understood what you are asking for.\n\u003C/p\u003E\n\u003Cp\u003E\nDo you want to be able to specify your own materials to be used instead of the masked 3d objects shaders?\u003Cbr\u003E\nDo you want to be able to map your own shaders to one of the stock masked 3d objects shaders?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2020-02-11T18:19:35Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223704880\u0022 data-ipsquote-contentid=\u0022189747\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221573703968\u0022 data-ipsquote-userid=\u0022114736\u0022 data-ipsquote-username=\u0022JPLRepo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 11/13/2019 at 8:59 PM, JPLRepo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis didn\u0027t make it into 1.8.x. sorry about that.\n\u003C/p\u003E\n\u003Cp\u003E\nThat said, the materials can be changed for a part with a small piece of code.\u003Cbr\u003E\nThe AvailablePart for your part has a reference to the iconPrefab template object.\n\u003C/p\u003E\n\u003Cp\u003E\nYou could search this for renderers/materials and replace them as you so desire.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT:\n\u003C/p\u003E\n\u003Cp\u003E\nThough reading your comment again now, I\u0027m not sure it\u0027s understood what you are asking for.\n\u003C/p\u003E\n\u003Cp\u003E\nDo you want to be able to specify your own materials to be used instead of the masked 3d objects shaders?\u003Cbr\u003E\nDo you want to be able to map your own shaders to one of the stock masked 3d objects shaders?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nApologies as I must have completely missed this post when it was made.\u00A0 Not sure how, as I thought I was keeping an eye on it specifically...\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nGoing back through things -- I\u0027m not sure what I\u0027m looking for is even possible without changes to other portions of the loading code.\n\u003C/p\u003E\n\u003Cp\u003E\nThe end goal is to allow for custom shaders to be used on parts (non- KSP/ shaders; e.g. the PBR-Metallic shaders from TexturesUnlimited).\u00A0 These custom shaders will generally also require a customized icon-shader to maintain equivalent functionality.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first problem is that you cannot export parts using custom shaders through PartTools; the PartLoader code will throw an exception during KSP loading due to an unrecognized shader (the list of supported shaders appears to be hard-coded somewhere?).\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe second issue (and the reason for the original post) is that it appears that the current mapping of shader -\u0026gt; icon-shader is hard-coded somewhere in the part-loading routines;\u00A0 I cannot find any publicly accessible dictionaries/maps/registry methods that would allow for me to add a mapping.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, the second issue cannot be addressed until the first is made possible (i.e. loading of Parts with non KSP/ shaders).\u00A0 This, by itself, doesn\u0027t seem to hard; add in a method to load the shaders from AssetBundles, add into the internal shader reference stores, and anywhere that Shader.Find() is currently used, replace with a method that first looks in the loaded shader cache (as shaders loaded from AssetBundles will \u003Cem\u003Enever\u003C/em\u003E be visible to the Shader.FInd() method; that method only finds shaders that were compiled with the project at build-time).\u00A0 I don\u0027t have access to the PartTools/PartExporter code, but might be some minor modifications needed there depending upon how the shader is stored in the .mu file (is it written as an int, is the name written as a string, etc).\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn the meantime I\u0027ve worked around this much as you propose above -- manually going through the game database, brute-force iterating through all transforms/renderers for all loaded parts, finding those that use one of the \u0027to be replaced\u0027 part shaders, and then manually replacing the icon-shaders in the materials for that part\u0027s icon prefab based on some config provided mappings.\u00A0 Its ugly, its hacky, but it seems to (mostly) work.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}