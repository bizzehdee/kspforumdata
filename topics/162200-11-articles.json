{"TopicId":162200,"ForumId":36,"TopicTitle":"[WIP][1.8.1, 1.9.1, 1.10.1, 1.11.0\u20132, 1.12.2\u20135] Principia\u2014version \u200E\u200EKleene, released 2024-07-05\u2014n-Body and Extended Body Gravitation","CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-05T00:19:35Z","PageNum":11,"Articles":[{"CreatedByName":"Bedi","CreatedById":105047,"CreatedDateTime":"2014-05-12T13:31:59Z","Content":"\n\u003Cp\u003EYou can always start with negative int:cool:\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-12T20:59:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NERVAfan\u0022 data-cite=\u0022NERVAfan\u0022\u003E\u003Cdiv\u003EWill this mod allow for \u0022Interplanetary Transport Network\u0022 trajectories / weak stability boundary /low energy transfers\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eand if so, is that a result of a basic N-body model\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes. In a way, you could see the crazy Mun-Kerbin transfer shown in the OP as such a trajectory.\u003C/p\u003E\u003Cp\u003EOk, it\u0027s been a long time since I\u0027ve done a\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStatus update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI now have a collaborator on Principia, \u003Ca href=\u0022https://github.com/pleroy\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/pleroy\u003C/a\u003E (my father). This means the \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/pull/26\u0022 rel=\u0022external nofollow\u0022\u003Ecode\u003C/a\u003E gets \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/pull/28\u0022 rel=\u0022external nofollow\u0022\u003Ereviewed\u003C/a\u003E and that development is \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/graphs/contributors?from=2014-01-05\u0026amp;to=2014-05-11\u0026amp;type=a\u0022 rel=\u0022external nofollow\u0022\u003Efaster\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EWe have decided to completely switch to C\u002B\u002B/CLI due to better test tools and useful language features. Most of the code will actually be written in standard C\u002B\u002B, with the implementation inlined in header files, so that they are seen by the eventual C\u002B\u002B/CLI managed assembly (If we were to use C\u002B\u002B/CLI everywhere, we would need managed boundaries between the assemblies, which is quite inconvenient).\u003C/p\u003E\u003Cp\u003EAs an added advantage, using standard C\u002B\u002B enables putting performance-critical parts into a native assembly if needed at a later time, without requiring a significant rework of the code.\u003C/p\u003E\u003Cp\u003EWe have started switching to gmock, gtest and glog for mocking, testing and logging. These tools are more convenient and powerful than the Visual Studio testing framework and are open source, so that users of Visual Studio Express (which does not support Microsoft\u0027s testing framework) will be able to build and run tests if they want to.\u003C/p\u003E\u003Cp\u003EHere is the first test to be converted to gtest: \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/geometry/sign_test.cpp\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/mockingbirdnest/Principia/blob/master/geometry/sign_test.cpp\u003C/a\u003E.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-15T07:18:01Z\u0022 title=\u002205/15/2014 07:18  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 15, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003Cbr\u003ECopy/paste editing sentences will be no grammar.\n\u003C/span\u003E\n"},{"CreatedByName":"dfrancis","CreatedById":111487,"CreatedDateTime":"2014-05-21T09:09:12Z","Content":"\n\u003Cp\u003EMay I suggest a simplication?\u003C/p\u003E\u003Cp\u003EFrom a sufficient distance planets and their moons (such as Jools) might be represented as a point mass of their total.\u003C/p\u003E\u003Cp\u003EThe location of the center of mass would be dependent on the position of the moons at the time.\u003C/p\u003E\u003Cp\u003EThis would reduce the number of Ns.\u003C/p\u003E\u003Cp\u003EIf the planets and moons remain on rails, the gravity they exert on each other does not need to be calculated.\u003C/p\u003E\u003Cp\u003EThe gravity exerted by ship parts is probably too small to need calculating. Would the gravity exerted by comets also be calculated?\u003C/p\u003E\u003Cp\u003EIs there a plan to select the detail / accuracy of the calculations to reduce processor load?\u003C/p\u003E\n"},{"CreatedByName":"dfrancis","CreatedById":111487,"CreatedDateTime":"2014-05-21T10:18:01Z","Content":"\n\u003Cp\u003EHave you looked at a variable step integrator such as a predictor corrector?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-21T11:17:07Z\u0022 title=\u002205/21/2014 11:17  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 21, 2014\u003C/time\u003E by dfrancis\u003C/strong\u003E\n\u003Cbr\u003ESilly question\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-21T15:54:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022dfrancis\u0022 data-cite=\u0022dfrancis\u0022\u003E\u003Cdiv\u003EMay I suggest a simplication?\u003Cp\u003EFrom a sufficient distance planets and their moons (such as Jools) might be represented as a point mass of their total.\u003C/p\u003E\u003Cp\u003EThe location of the center of mass would be dependent on the position of the moons at the time.\u003C/p\u003E\u003Cp\u003EThis would reduce the number of Ns.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo, you\u0027re talking about a rudimentary version of the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Fast_multipole_method\u0022 rel=\u0022external nofollow\u0022\u003Emultipole method\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EIt has been \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68502-WIP-Principia-N-Body-Gravitation-and-Better-Integrators-for-Kerbal-Space-Program?p=1003881\u0026amp;viewfull=1#post1003881\u0022 rel=\u0022external nofollow\u0022\u003Ediscussed before\u003C/a\u003E. For asteroids it may be worth it (though asteroids can\u0027t really be approximated by point masses either, see \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68502-WIP-Principia-N-Body-Gravitation-and-Better-Integrators-for-Kerbal-Space-Program?p=1065323\u0026amp;viewfull=1#post1065323\u0022 rel=\u0022external nofollow\u0022\u003Ethe bottom of post 226\u003C/a\u003E), for moons and planets only it\u0027s not necessary. I might consider it if I decide to make asteroids massive.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIf the planets and moons remain on rails, the gravity they exert on each other does not need to be calculated.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68502-WIP-Principia-N-Body-Gravitation-and-Better-Integrators-for-Kerbal-Space-Program?p=950853\u0026amp;viewfull=1#post950853\u0022 rel=\u0022external nofollow\u0022\u003Eequally costly\u003C/a\u003E to keep the planets on rails for the number of planets we have, and it breaks things down completely since they orbit the centre of the primary rather than a barycentre. If I wanted to keep them on rails I\u0027d have to make my own rails anyway.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThe gravity exerted by ship parts is probably too small to need calculating. Would the gravity exerted by comets also be calculated?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIndeed, I intend to neglect gravitational field of vessels. There are no comets in stock KSP, those in Alternis Kerbol are celestial bodies (instances of CelestialBody), so they\u0027re like moons. Asteroids will be treated like vessels initially. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIs there a plan to select the detail / accuracy of the calculations to reduce processor load?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll have to write a few integrators to see which one works best, it should not be too hard to make settings for that sort of thing.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EHave you looked at a variable step integrator such as a predictor corrector?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EVariable steps break symplecticity, see [Chambers 1999], quoted in the OP (see the rest of the introduction to his paper, linked in the OP, for more details).\u003C/p\u003E\n"},{"CreatedByName":"Mipe","CreatedById":109421,"CreatedDateTime":"2014-05-21T19:42:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EIndeed, I intend to neglect gravitational field of vessels. There are no comets in stock KSP, those in Alternis Kerbol are celestial bodies (instances of CelestialBody), so they\u0027re like moons. Asteroids will be treated like vessels initially. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou, sir, appear to be underestimating the KSP players. The \u0022FPS killer\u0022 ship category easily rivals asteroids in mass.\u003C/p\u003E\u003Cp\u003EImagine if such a ship and an asteroid were to meet... A mere flyby could alter the asteroid\u0027s trajectory. And the opposite would be true: when planning interplanetary missions, one\u0027d have to watch out for asteroids, especially the more massive ones. Nothing that a brief burst of RCS can\u0027t fix, though - timely route correction can easily restore the trajectory.\u003C/p\u003E\u003Cp\u003EI\u0027d hate to be that guy who does his realtime missions afk, though...\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-21T22:22:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mipe\u0022 data-cite=\u0022Mipe\u0022\u003E\u003Cdiv\u003EYou, sir, appear to be underestimating the KSP players. The \u0022FPS killer\u0022 ship category easily rivals asteroids in mass.\u003Cp\u003EImagine if such a ship and an asteroid were to meet... A mere flyby could alter the asteroid\u0027s trajectory. And the opposite would be true: when planning interplanetary missions, one\u0027d have to watch out for asteroids, especially the more massive ones. Nothing that a brief burst of RCS can\u0027t fix, though - timely route correction can easily restore the trajectory.\u003C/p\u003E\u003Cp\u003EI\u0027d hate to be that guy who does his realtime missions afk, though...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf I implement the gravitational field of asteroids (which is mostly hard problem at short distances, at long distances a point mass is decent, though FMM might be needed to accelerate things), it should be possible to take vessels into account as well.\u003C/p\u003E\n"},{"CreatedByName":"AndreyATGB","CreatedById":62674,"CreatedDateTime":"2014-05-21T22:38:52Z","Content":"\n\u003Cp\u003EEven a vessel the mass of a class E asteroid (1500t) is nothing compared to even Gilly which comes in at 1.2*10^17kg. Gilly barely has a gravitational field, a vessel the mass of an asteroid would need to be extremely far away from any body to affect anything else.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-21T23:16:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AndreyATGB\u0022 data-cite=\u0022AndreyATGB\u0022\u003E\u003Cdiv\u003EEven a vessel the mass of a class E asteroid (1500t) is nothing compared to even Gilly which comes in at 1.2*10^17kg. Gilly barely has a gravitational field, a vessel the mass of an asteroid would need to be extremely far away from any body to affect anything else.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, KSP asteroids are tiny and can probably be ignored. Gilly shouldn\u0027t be considered a spheroid though as far as field is concerned, it\u0027s really a large asteroid. That\u0027s the sort of body for which the more complex approaches linked by Scott would be appropriate.\u003C/p\u003E\n"},{"CreatedByName":"Aghanim","CreatedById":76587,"CreatedDateTime":"2014-05-23T01:33:18Z","Content":"\n\u003Cp\u003EI have another questions for this mod:\u003C/p\u003E\u003Cp\u003E1. Does on rail warp still works here? Or now every vessel is loaded?\u003C/p\u003E\u003Cp\u003E2. Because this mod is essentially a physics overhaul mod, is it possible to offload the calculations to OpenCL and do it on a graphics card or two? Doing vector FP64 calculations is faster in graphics card\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-23T01:36:01Z\u0022 title=\u002205/23/2014 01:36  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 23, 2014\u003C/time\u003E by Aghanim\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"phoenix_ca","CreatedById":50380,"CreatedDateTime":"2014-05-23T02:50:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Aghanim\u0022 data-cite=\u0022Aghanim\u0022\u003E\u003Cdiv\u003EI have another questions for this mod:\u003Cp\u003E1. Does on rail warp still works here? Or now every vessel is loaded?\u003C/p\u003E\u003Cp\u003E2. Because this mod is essentially a physics overhaul mod, is it possible to offload the calculations to OpenCL and do it on a graphics card or two? Doing vector FP64 calculations is faster in graphics card\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E1. I would think the whole point is that it could be done on rails. If it couldn\u0027t...there would be little point in still playing KSP.\u003C/p\u003E\u003Cp\u003E2. I\u0027m not sure you understand exactly what they\u0027re trying to do here. The calculations that determine the orbital properties of a vessel in KSP, and the physics engine that deals with how the ship behaves relative to itself and all its parts, are different things. As for actually sending calculations to a GPU, I\u0027d instead ask if it\u0027s worth the time you\u0027d have to spend on developing that. The problems associated with trying to offload calculations to a discrete GPU, and the tiny, tiny number of people who actually have multiple discrete GPUs make it, typically, a worthless endeavour.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-23T13:04:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Aghanim\u0022 data-cite=\u0022Aghanim\u0022\u003E\u003Cdiv\u003EI have another questions for this mod:\u003Cp\u003E1. Does on rail warp still works here?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes. It\u0027s actually the part that has already been solved in the C# prototype, cf. the OP.\u003C/p\u003E\u003Cp\u003EAlso, as mentioned by \u003Cstrong\u003Ephoenix_ca\u003C/strong\u003E, it would be quite pointless otherwise...\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E2. Because this mod is essentially a physics overhaul mod, is it possible to offload the calculations to OpenCL and do it on a graphics card or two? Doing vector FP64 calculations is faster in graphics card\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDiscussed \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68502-WIP-Principia-N-Body-Gravitation-and-Better-Integrators-for-Kerbal-Space-Program?p=1002173\u0026amp;viewfull=1#post1002173\u0022 rel=\u0022external nofollow\u0022\u003Epreviously\u003C/a\u003E. GPGPU is probably not needed. If needed I might use native assemblies for the performance critical bits (which comes at a cost in portability, I\u0027ll need an assembly for Windows and one for each flavour of Unix), that should be enough. GPGPU would be even messier as far as portability is concerned, as described by \u003Cstrong\u003Ephoenix_ca\u003C/strong\u003E above.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-23T13:06:46Z\u0022 title=\u002205/23/2014 01:06  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 23, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dominiquini","CreatedById":110408,"CreatedDateTime":"2014-05-23T20:34:46Z","Content":"\n\u003Cp\u003EFirstly, congratulations for the initiative!\u003C/p\u003E\u003Cp\u003EI do not know exactly what state is the development , but I would find it cool if this project were divided and resulted in several mods:\u003C/p\u003E\u003Cp\u003E1) N-Body solar system: The orbits of celestial bodies would be adjusted to operate stably in this more realistic universe ( planets could be preset and placed \u0022 on-rails \u0022 inside the game, but I do not know if it is feasible if you need to change the way the game controls the motion of planets ).\u003C/p\u003E\u003Cp\u003E2) N-Body vessels: The calculation of the gravitational forces on the ships ( and perhaps asteroids ) would be changed to simulate a realistic universe , which I believe is the main focus of your project.\u003C/p\u003E\u003Cp\u003E3) StationKeeping: Mechanism to maintain the orbit of the spacecraft , which will become more unstable in this \u0022new universe\u0022. It would be nice if this were done with a new part that could be attached to a ship with the control module and configured by the user (altitude , inclination and direction that should be kept; amounts of fuel and energy reserved for it, etc... ), acting as an autopilot that works \u0022on-rails\u0022 or \u0022off-rails\u0022 , and even when the ship is not loaded.\u003C/p\u003E\u003Cp\u003E4) Timewarp thrust: Allow apply some acceleration on the ship while in timewarp. Also keep rotating the ship in this case...\u003C/p\u003E\u003Cp\u003EOf course this makes much more sense if these features can be independent of each other!\u003C/p\u003E\u003Cp\u003EExcuse me for my bad english...\u003C/p\u003E\n"},{"CreatedByName":"Phi Function","CreatedById":111653,"CreatedDateTime":"2014-05-23T22:39:06Z","Content":"\n\u003Cp\u003EDo I assume correctly that you will not support Linux, since you are programming in C\u002B\u002B/CLI? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-24T00:05:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dominiquini\u0022 data-cite=\u0022Dominiquini\u0022\u003E\u003Cdiv\u003EFirstly, congratulations for the initiative!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI do not know exactly what state is the development ,\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESee the OP, or the \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/commits/master\u0022 rel=\u0022external nofollow\u0022\u003Elist of commits\u003C/a\u003E for something more detailed.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Ebut I would find it cool if this project were divided and resulted in several mods:\u003Cp\u003E1) N-Body solar system: The orbits of celestial bodies would be adjusted to operate stably in this more realistic universe ( planets could be preset and placed \u0022 on-rails \u0022 inside the game, but I do not know if it is feasible if you need to change the way the game controls the motion of planets ).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not sure what you mean by that. Somehow tweaked Keplerian orbits? Integration?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E2) N-Body vessels: The calculation of the gravitational forces on the ships ( and perhaps asteroids ) would be changed to simulate a realistic universe , which I believe is the main focus of your project.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIntegrating the movement of the planets alone makes little sense though, so 1 \u0026amp; 2 should come together.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E3) StationKeeping: Mechanism to maintain the orbit of the spacecraft , which will become more unstable in this \u0022new universe\u0022. It would be nice if this were done with a new part that could be attached to a ship with the control module and configured by the user (altitude , inclination and direction that should be kept; amounts of fuel and energy reserved for it, etc... ), acting as an autopilot that works \u0022on-rails\u0022 or \u0022off-rails\u0022 , and even when the ship is not loaded.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPlanned (see the OP), and extensively discussed (search the thread for \u0022stationkeeping\u0022).\u003C/p\u003E\u003Cp\u003EMostly required for 1\u002B2 to be playable with more than one ship at a time. Requires 1\u002B2 of course, you need to know what gravitational field you\u0027re playing in.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E4) Timewarp thrust: Allow apply some acceleration on the ship while in timewarp. Also keep rotating the ship in this case...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPlanned, required for 3.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EOf course this makes much more sense if these features can be independent of each other!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut they\u0027re not. If you find a way to split them (once they\u0027re implemented that is), feel free to fork the GitHub repository though!\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-24T10:08:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Phi Function\u0022 data-cite=\u0022Phi Function\u0022\u003E\u003Cdiv\u003EDo I assume correctly that you will not support Linux, since you are programming in C\u002B\u002B/CLI? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EC\u002B\u002B/CLI gets compiled to CIL, so that will support Linux (or any Unix that KSP runs on) just as well as an assembly written in C# (I\u0027m not building a mixed-mode assembly since Unity doesn\u0027t support that anyway).\u003C/p\u003E\u003Cp\u003EUnix compatibility is really the only reason not to use native assemblies (and Platform Invocation Services) from the beginning.\u003C/p\u003E\u003Cp\u003EAs mentioned in the last status update, most of the code will be standard C\u002B\u002B anyway, so I still have the possibility of putting some things in a native assembly later on (in which case I guess Unix users will have to build their own assemblies). If I did that I would probably keep a CIL-only version though.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-24T18:27:28Z\u0022 title=\u002205/24/2014 06:27  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 24, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003Cbr\u003Egrammars\n\u003C/span\u003E\n"},{"CreatedByName":"Phi Function","CreatedById":111653,"CreatedDateTime":"2014-05-24T10:24:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EC\u002B\u002B/CLI gets compiled to CIL, so that will support Linux (or any Unix that KSP runs on) just as well as an assembly written in C# (I\u0027m not building a mixed-mode assembly since Unity doesn\u0027t support that anyway).\u003Cp\u003EUnix compatibility is really the only reason not to use native assemblies (and Platform Invocation Services) from the beginning.\u003C/p\u003E\u003Cp\u003EAs mentioned in the last status update, most of the code will be standard C\u002B\u002B anyway, so I still have the possibility of putting some things in a native assembly later on (in which case I guess Unix users will have to build their own assemblies). If I do that I would probably keep a CIL-only version though.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGreat. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnd thank you for this explaination. I never got into .NET programming.\u003C/p\u003E\n"},{"CreatedByName":"QuixoticKoala","CreatedById":77425,"CreatedDateTime":"2014-05-26T21:08:39Z","Content":"\n\u003Cp\u003ESo discovering this may have put me out of a project I was going to do this summer. I was planning on modding the stock physics to replace the patched conics approximation currently used for determining the orbital paths of spacecraft with a matched asymptotics approximation, but you seem to have beaten me to the physics improvements (as I assume you are completely replacing the patched conics with N-body movement). That said, I\u0027m not familiar enough with the KSP code to know exactly what you are changing, so I\u0027m uncertain if the approximation I am proposing would still be useful as a mod. Still, if you could point me to any specifics about the exact code KSP uses for it\u0027s modeling, I would be very appreciative (I know it uses patched conics for the approximations and the planets are on rails, but not much beyond that).\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-05-29T23:30:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022QuixoticKoala\u0022 data-cite=\u0022QuixoticKoala\u0022\u003E\u003Cdiv\u003EI assume you are completely replacing the patched conics with N-body movement\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am integrating the equations of motion, see the title and the OP.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThat said, I\u0027m not familiar enough with the KSP code to know exactly what you are changing, so I\u0027m uncertain if the approximation I am proposing would still be useful as a mod. Still, if you could point me to any specifics about the exact code KSP uses for it\u0027s modeling, I would be very appreciative (I know it uses patched conics for the approximations and the planets are on rails, but not much beyond that).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m pretty much just giving the game a new conic at every frame so it keeps doing its thing it blissful ignorance of its pointlessness, since I\u0027ll overwrite it all in the next frame.\u003C/p\u003E\u003Cp\u003EI encourage you to try your solution, it\u0027s fun (and what I\u0027m doing will take a while anyway).\u003C/p\u003E\u003Cp\u003EYou could try to look at \u003Cstrong\u003EHoneyFox\u003C/strong\u003E\u0027s code too, or to ask any questions you may have on #kspmodders.\u003C/p\u003E\n"},{"CreatedByName":"Chase","CreatedById":69765,"CreatedDateTime":"2014-06-05T13:10:15Z","Content":"\n\u003Cp\u003EI am quite looking forward to a finished version of this. It will make KSP even funner.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-06-27T09:05:24Z","Content":"\n\u003Cp\u003EDevelopment is \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/graphs/contributors\u0022 rel=\u0022external nofollow\u0022\u003Eongoing\u003C/a\u003E, but it\u0027s been a while since I made a\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStatus Update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/integrators/symplectic_partitioned_runge_kutta_integrator.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eintegrator\u003C/a\u003E (still a 5th order SPRK, same as in the C# prototype, the Saha \u0026amp; Tremaine stuff isn\u0027t here yet) has been \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/integrators/symplectic_partitioned_runge_kutta_integrator_body.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eimplemented\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/integrators/symplectic_partitioned_runge_kutta_integrator_test.cpp\u0022 rel=\u0022external nofollow\u0022\u003Etested\u003C/a\u003E and \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/benchmarks/symplectic_partitioned_runge_kutta_integrator_body.hpp\u0022 rel=\u0022external nofollow\u0022\u003Ebenchmarked\u003C/a\u003E (\u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/benchmarks/symplectic_partitioned_runge_kutta_integrator.cpp\u0022 rel=\u0022external nofollow\u0022\u003Eusing\u003C/a\u003E a Windows port of google/benchmark) in C\u002B\u002B, as well as the first level of abstraction above it, \u003Cspan style=\u0022color:#808080;\u0022\u003E\u003Cspan style=\u0022font-family:FixedSys;\u0022\u003Eprincipia\u003C/span\u003E\u003C/span\u003E::\u003Cspan style=\u0022color:#808080;\u0022\u003Ephysics\u003C/span\u003E::\u003Cspan style=\u0022color:#008080;\u0022\u003ENBodySystem\u003C/span\u003E (\u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/physics/n_body_system.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eheader\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/physics/n_body_system_body.hpp\u0022 rel=\u0022external nofollow\u0022\u003Ebody\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/physics/n_body_system_test.cpp\u0022 rel=\u0022external nofollow\u0022\u003Etest\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/testing_utilities/solar_system.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eheader for test data\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/testing_utilities/solar_system_body.hpp\u0022 rel=\u0022external nofollow\u0022\u003Etest data\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/testing_utilities/solar_system_test.cpp\u0022 rel=\u0022external nofollow\u0022\u003Etest of test data\u003C/a\u003E (which is also a \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/testing_utilities/solar_system_test.cpp#L36-L88\u0022 rel=\u0022external nofollow\u0022\u003Enice example\u003C/a\u003E of the use of \u003Cspan style=\u0022color:#808080;\u0022\u003E\u003Cspan style=\u0022font-family:FixedSys;\u0022\u003Eprincipia\u003C/span\u003E\u003C/span\u003E::\u003Cspan style=\u0022color:#808080;\u0022\u003Equantities\u003C/span\u003E and \u003Cspan style=\u0022color:#808080;\u0022\u003E\u003Cspan style=\u0022font-family:FixedSys;\u0022\u003Eprincipia\u003C/span\u003E\u003C/span\u003E::\u003Cspan style=\u0022color:#808080;\u0022\u003Egeometry\u003C/span\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/benchmarks/n_body_system.cpp\u0022 rel=\u0022external nofollow\u0022\u003Ebenchmark\u003C/a\u003E (\u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/benchmarks/n_body_system_body.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eusing\u003C/a\u003E the test data)).\u003C/p\u003E\u003Cp\u003EA significant change of plans has occured: As Unity uses the .NET Framework v2.0, it is not possible to use plugins compiled for the Framework v4.5. This means C\u002B\u002B/CLI projects need to be compiled using the platform toolset v90 (from VS2008), rather than VS2013\u0027s v120. Of course v90 does not support C\u002B\u002B11 nor C\u002B\u002B14, so it is not an option for this code that strongly depends on C\u002B\u002B11 features.\u003C/p\u003E\u003Cp\u003EAs a result, we will keep using the C\u002B\u002B11 codebase, compiling it to a native DLL, and using P/Invoke to call it from a C# adapter. The C# adapter will perform no calculations, only transmit data from KSP to the native plugin and apply the changes/render the trajectories returned by the plugin. A simple test P/Invoke plugin can be seen on the repository (\u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/ksp_plugin/test_plugin.hpp\u0022 rel=\u0022external nofollow\u0022\u003Eheader\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/ksp_plugin/test_plugin.cpp\u0022 rel=\u0022external nofollow\u0022\u003Ebody\u003C/a\u003E, \u003Ca href=\u0022https://github.com/mockingbirdnest/Principia/blob/master/ksp_plugin_adapter/ksp_plugin_adapter.cs\u0022 rel=\u0022external nofollow\u0022\u003EC# adapter\u003C/a\u003E) and works in KSP.\u003C/p\u003E\u003Cp\u003EThis means there will be separate x86 and AMD64 builds for each target operating system (Microsoft Windows and 57 varieties of Unix), possibly more if we decide to do specific optimisations for Intel chips (though ICC is not cheap).\u003C/p\u003E\u003Cp\u003EMoreover, this will allow a switch to clang in the near future, so that we can have saner error messages and better compliance with the standard.\u003C/p\u003E\u003Cp\u003ENative calculations should also be at least 30% faster than CLR ones.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-28T10:17:43Z\u0022 title=\u002206/28/2014 10:17  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 28, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-06-27T09:59:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003E...\u003Cp\u003EA significant change of plans has occured: As Unity uses the .NET Framework v2.0, it is not possible to use plugins compiled for the Framework v4.5. \u003C/p\u003E\u003Cp\u003E...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMust say I am not an expert, but the above left me wondering why then all KSP plugins can work if compiled against a .NET Framework 3.5. So made a bit of research to find that:\u003C/p\u003E\u003Cp\u003E- Unity does not use (directly) .NET Framework, but \u003Ca href=\u0022https://en.wikipedia.org/wiki/Mono_%28software%29\u0022 rel=\u0022external nofollow\u0022\u003EMono\u003C/a\u003E. Mono is compliant with .NET Framework, in particular:\u003C/p\u003E\u003Cp\u003E . Mono 2.0 is in par with .NET 2.0\u003C/p\u003E\u003Cp\u003E . Mono 2.8 is in par with .NET 4.0\u003C/p\u003E\u003Cp\u003E- The above leaves doubts about what specific version of Mono Unity is based on. Found \u003Ca href=\u0022http://answers.unity3d.com/questions/621968/how-to-use-newer-mono-monobleedingedge.html\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E that Unity 4.3.3. (version used by KSP 0.23.5) uses a custom version of Mono (2.6.5.) mainly compliant with .NET 3.5\u003C/p\u003E\u003Cp\u003EHope the above may be of help. Can\u0027t say if all the functions you need are covered by Mono 2.6.5, but in case those were, you should be fine compiling for .NET 3.5; otherwise, you are right to use .NET 2.0\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-06-27T10:34:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EMust say I am not an expert, but the above left me wondering why then all KSP plugins can work if compiled against a .NET Framework 3.5. So made a bit of research to find that:\u003Cp\u003E- Unity does not use (directly) .NET Framework, but \u003Ca href=\u0022https://en.wikipedia.org/wiki/Mono_%28software%29\u0022 rel=\u0022external nofollow\u0022\u003EMono\u003C/a\u003E. Mono is compliant with .NET Framework, in particular:\u003C/p\u003E\u003Cp\u003E . Mono 2.0 is in par with .NET 2.0\u003C/p\u003E\u003Cp\u003E . Mono 2.8 is in par with .NET 4.0\u003C/p\u003E\u003Cp\u003E- The above leaves doubts about what specific version of Mono Unity is based on. Found \u003Ca href=\u0022http://answers.unity3d.com/questions/621968/how-to-use-newer-mono-monobleedingedge.html\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E that Unity 4.3.3. (version used by KSP 0.23.5) uses a custom version of Mono (2.6.5.) mainly compliant with .NET 3.5\u003C/p\u003E\u003Cp\u003EHope the above may be of help. Can\u0027t say if all the functions you need are covered by Mono 2.6.5, but in case those were, you should be fine compiling for .NET 3.5; otherwise, you are right to use .NET 2.0\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe same consideration apply for both 2.0 and 3.5, you can\u0027t compile C\u002B\u002B11 for it. It may well be that Unity is 3.5 and that its assembly incorrectly states that it uses the 2.0 runtime.\u003C/p\u003E\u003Cp\u003EThe C# bit shouldn\u0027t really need much of .NET anyway, all the fancy stuff will come from the stardard C\u002B\u002B libraries (for the moment Microsoft\u0027s, LLVM\u0027s libc\u002B\u002B whenever that gets ported to Windows).\u003C/p\u003E\n"},{"CreatedByName":"Garek","CreatedById":73214,"CreatedDateTime":"2014-06-27T11:11:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EThis means there will be separate x86 and AMD64 builds for each target operating system (Microsoft Windows and \u003Cstrong\u003E57 varieties of Unix\u003C/strong\u003E), possibly more if we decide to do specific optimisations for Intel chips (though ICC is not cheap).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E(Emphasis mine)\u003C/p\u003E\u003Cp\u003EYou actually want to do ~116 builds? I mean, automation helps, but the sheer amount of binaries would be...impressive. I use manjaro and personally would be okay with building myself from a Makefile (which would propably be the same at least for everyone using the gcc toolset).\u003C/p\u003E\n"},{"CreatedByName":"mic_e","CreatedById":60757,"CreatedDateTime":"2014-06-27T11:18:59Z","Content":"\n\u003Cp\u003EI must say I think you\u0027re overdoing the performance thing. Using an entirely different, even non-CLI language with platform-specific binaries, with all the trouble of interfacing it correctly and testing the release on every supported platform for every release, is a huge sacrifice just for 30%... I don\u0027t like C# either, and write all my performance-critical code in c\u002B\u002B1y, but for KSP modding I\u0027d just stick to C#...\u003C/p\u003E\u003Cp\u003EWriting everything in C#, and then, after everything is stable and tested, putting a few performance-critical loops (\u0026lt; 100 lines of code) into a native dll, with a fallback to the original C# code if the native dll fails/is not available would have seemed like a far more reasonable approach to me.\u003C/p\u003E\u003Cp\u003EHow come your figures for \u002757 varieties of UNIX\u0027? As far as I see it, it comes down to win32, win64, osx (does 32 even exist?), linux32 (barely anybody uses that anymore), linux64. I _think_ linux binaries even work on most BSDs these days.\u003C/p\u003E\u003Cp\u003EWhat about the GNU standard library/compiler? It has been ported to Windows in the form of mingw32/mingw64, works pretty well, and _should_ be 1:1 interchangable with LLVM (just replace \u0027g\u002B\u002B\u0027 with \u0027clang\u002B\u002B\u0027 in the Makefile). In my experience, gcc binaries even are a little bit faster than clang\u0027s (and a lot faster than Microsoft\u0027s).\u003C/p\u003E\u003Cp\u003E(peeks at the github) wow, that\u0027s a lot of commits; congratulations. You really _are_ putting a _lot_ of effort into this... (bows in awe)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-27T11:40:02Z\u0022 title=\u002206/27/2014 11:40  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 27, 2014\u003C/time\u003E by mic_e\u003C/strong\u003E\n\u003C/span\u003E\n"}]}