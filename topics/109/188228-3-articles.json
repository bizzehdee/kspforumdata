{"TopicId":188228,"ForumId":109,"TopicTitle":"I just heard of KSP 2. Are they officially using Unity?","CreatedByName":"ronson49","CreatedById":69756,"CreatedDateTime":"2019-09-14T16:17:39Z","PageNum":3,"Articles":[{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2019-09-16T06:28:03Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672837\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568614670\u0022 data-ipsquote-userid=\u0022180102\u0022 data-ipsquote-username=\u0022mcwaffles2003\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, mcwaffles2003 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDo you mean to say they are considering finding a way to make this multi-threaded? I thought that was out of the question for reasons of difficulty\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo, not threads, cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core and multi-thread are two different things.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core means that the game runs on more than one core. IIRC, KSP 1 still runs on a single core or two cores, at most, of your CPU, that\u0027s one of the major performance issues. You could have AMD\u0027s 32 core CPU and the game would still only use 1 or 2 cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-thread means basically splitting a core in 2, so 4 cores, 8 threads.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nSingle-core performance is sometimes better than multi-core performance. That\u0027s what they\u0027re trying to decide.\u003Cbr\u003E\nWhether 1 core gaming is better than 2, 4, 6, etc cores.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2019-09-16T07:59:51Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672838\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568615283\u0022 data-ipsquote-userid=\u002277770\u0022 data-ipsquote-username=\u0022GoldForest\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, GoldForest said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nNo, not threads, cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core and multi-thread are two different things.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core means that the game runs on more than one core. IIRC, KSP 1 still runs on a single core or two cores, at most, of your CPU, that\u0027s one of the major performance issues. You could have AMD\u0027s 32 core CPU and the game would still only use 1 or 2 cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-thread means basically splitting a core in 2, so 4 cores, 8 threads.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nSingle-core performance is sometimes better than multi-core performance. That\u0027s what they\u0027re trying to decide.\u003Cbr\u003E\nWhether 1 core gaming is better than 2, 4, 6, etc cores.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPrograms normally aren\u0027t aware of CPU cores; there\u0027s ways to get the OS to return this information but normally it\u0027s far easier to define separate\u00A0threads and then let the OS handle them in the background. So \u0022multithreaded\u0022 in the programming sphere can be used to describe \u0022 a program that uses multiple cores\u0022\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-09-16T08:00:56Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672750\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568592588\u0022 data-ipsquote-userid=\u0022154503\u0022 data-ipsquote-username=\u0022Drakenred65@Gmail.com\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, \u003Ca href=\u0022/cdn-cgi/l/email-protection\u0022 class=\u0022__cf_email__\u0022 data-cfemail=\u0022feba8c9f959b908c9b9ac8cbbeb9939f9792d09d9193\u0022\u003E[email\u0026#160;protected]\u003C/a\u003E said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nCreation engine is behind Skyrim and fallout 76.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe CE takes a lot of backslash because of its graphics when Interaction wise it\u0027s one of the most advanced.\n\u003C/p\u003E\n\u003Cp\u003E\nOblivion had single pickable and readable books in bookcases when the most graphically advanced games of the time were using static models or even 2d textures with the bookshelf drawn on, Skyrim has all the props to be physic based instead of being glued in place like in most other games and F76 managed to get the CE working in multiplayer on the same hardware that runs F4 which is a miracle on its own.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen you hear someone blaming the game engine you can always be sure they don\u0027t know what they\u0027re talking about, especially with Unity and the Creation Engine.\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2019-09-16T08:04:43Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672853\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568620791\u0022 data-ipsquote-userid=\u0022197414\u0022 data-ipsquote-username=\u0022Incarnation of Chaos\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 minutes ago, Incarnation of Chaos said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPrograms normally aren\u0027t aware of CPU cores; there\u0027s ways to get the OS to return this information but normally it\u0027s far easier to define separate\u00A0threads and then let the OS handle them in the background. So \u0022multithreaded\u0022 in the programming sphere can be used to describe \u0022 a program that uses multiple cores\u0022\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s kind of misleading.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2019-09-16T08:09:17Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672856\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568621083\u0022 data-ipsquote-userid=\u002277770\u0022 data-ipsquote-username=\u0022GoldForest\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, GoldForest said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat\u0027s kind of misleading.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNot really since given the context it makes sense; multithreaded just has different meanings depending on context.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWhat you described is accurate when talking about CPU hardware, and it\u0027s actually possible to make a program spawn multiple threads on the same core. But when we\u0027re talking about \u0022multithreading a program\u0022 we\u0027re always talking about making it use multiple physical cores.\n\u003C/p\u003E\n"},{"CreatedByName":"dave1904","CreatedById":153882,"CreatedDateTime":"2019-09-16T09:36:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672498\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568555589\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 hours ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFirst, you are correct that the current performance is not optimized, by a lot.\u00A0 That\u0027s due to the inherent design of the current KSP\n\u003C/p\u003E\n\u003Cp\u003E\nSecond, multi-threading done correctly is extremely difficult to do.\u00A0 I don\u0027t know the details of how the Intel chips work, but there are several ways around bottle necks.\u00A0 One is to allocate chunks of memory to cpu A for it\u0027s work, another chunk to B, etc.\u00A0 These chunks would need to be an exact size which matches what the memory manager can handle.\u00A0 Best thing to say is that the new developers are optimizing KSP in many different ways, and we won\u0027t know exactly what or how until the release.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell not matter how optimized it will be I\u0027m doing a cpu upgrade for its release IF the game is good. My 4770k is still more than enough most likely but better single core performance will be nice. I\u0027ve not looked into current releases or upcoming releases yet but I want something with 4ghz with a 5ghz boost. That\u0027s probably about 50-70% more single core performance. I often considered doing an upgrade for ksp1 but wasn\u0027t confident in the performance gain.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"mcwaffles2003","CreatedById":180102,"CreatedDateTime":"2019-09-16T09:44:33Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672882\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568626579\u0022 data-ipsquote-userid=\u0022153882\u0022 data-ipsquote-username=\u0022dave1904\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 minutes ago, dave1904 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell not matter how optimized it will be I\u0027m doing a cpu upgrade for its release IF the game is good. My 4770k is still more than enough most likely but better single core performance will be nice. I\u0027ve not looked into current releases or upcoming releases yet but I want something with 4ghz with a 5ghz boost. That\u0027s probably about 50-70% more single core performance. I often considered doing an upgrade for ksp1 but wasn\u0027t confident in the performance gain.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nit would definately improve performance on KSP 1 as i know its single threaded, so it all comes\u00A0 down to clock speed. I believe greater cache would also help a lot\u00A0as that leave less time per frame waiting for you CPU to grab data out of RAM which is much slower.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m a bit sad my 2700x only uses 1 thread when it has 16 available, if they go and make the game multi-threaded that would be awesome but even just having it GPU accelerated would be great since I have 11GB of VRAM\n\u003C/p\u003E\n"},{"CreatedByName":"dave1904","CreatedById":153882,"CreatedDateTime":"2019-09-16T09:46:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672838\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568615283\u0022 data-ipsquote-userid=\u002277770\u0022 data-ipsquote-username=\u0022GoldForest\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, GoldForest said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nNo, not threads, cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core and multi-thread are two different things.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-core means that the game runs on more than one core. IIRC, KSP 1 still runs on a single core or two cores, at most, of your CPU, that\u0027s one of the major performance issues. You could have AMD\u0027s 32 core CPU and the game would still only use 1 or 2 cores.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nMulti-thread means basically splitting a core in 2, so 4 cores, 8 threads.\u00A0\u003Cbr\u003E\u003Cbr\u003E\nSingle-core performance is sometimes better than multi-core performance. That\u0027s what they\u0027re trying to decide.\u003Cbr\u003E\nWhether 1 core gaming is better than 2, 4, 6, etc cores.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI doubt they will. Some people might want to upgrade to something more than a 2.3 duo core instead of complaining. A bad cpu is a bad cpu. Doesn\u0027t mean it cannot be optimized but some people expect games to run goood on really bad hardware.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2019-09-16T10:05:33Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672884\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568627186\u0022 data-ipsquote-userid=\u0022153882\u0022 data-ipsquote-username=\u0022dave1904\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n18 minutes ago, dave1904 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI doubt they will. Some people might want to upgrade to something more than a 2.3 duo core instead of complaining. A bad cpu is a bad cpu. Doesn\u0027t mean it cannot be optimized but some people expect games to run goood on really bad hardware.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m sorry, but your post makes no sense to me and doesn\u0027t seem to respond to anything in my comment.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-09-16T10:17:41Z","Content":"\n\u003Cp\u003E\nI\u0027ve been trying to resist stepping but... fail. This multi-thread/multi-core discussion is just so wonderfully on the cusp of \u003Ci\u003Ealmost\u003C/i\u003E\u00A0right with just the right amount of misconceptions and half-truths mixed in that I just have to set the record straight.\n\u003C/p\u003E\n\u003Cp\u003E\nFirst, the concepts:\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Ecore\u003C/strong\u003E\u00A0is a physical or virtual device capable of executing instructions\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Ethread\u003C/strong\u003E\u00A0is a sequence of instructions (=a program) executed by a core in a series\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Emulticore\u003C/strong\u003E\u00A0is a computing device that has more than one core (typical CPUs nowadays have 4-8 cores; typical GPUs have thousands -- the GTX 1080 for example has 2560 cores)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Emultithreading\u003C/strong\u003E\u00A0is writing a program as more than one thread, with each thread executed in parallel\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Epre-emptive multitasking\u003C/strong\u003E\u00A0is what the OS does to cycle cores through threads, attempting to keep all of them moving and none of them blocking any other threads\n\u003C/p\u003E\n\u003Cp\u003E\nFirst off, we\u0027ve been writing multithreaded programs since way before multicore CPUs became common. So while it\u0027s true that\u00A0\u003Cstrong\u003Ea single-threaded program can only run on one core,\u003C/strong\u003E\u00A0it\u0027s \u003Cstrong\u003Enot true\u003C/strong\u003E that\u00A0multithreading means making a program run on multiple cores.\u00A0It might or it might not but that\u0027s more of a side effect. There are usually more threads than cores anyway, so the OS will be multitasking between them anyway, whether there\u0027s one core or 8.\n\u003C/p\u003E\n\u003Cp\u003E\nSo it is strictly\u00A0\u003Cstrong\u003Enot true\u003C/strong\u003E\u00A0that \u0022multithreading a program\u0022 means \u0022making it run on more than one core.\u0022\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSecond,\u00A0\u003Cstrong\u003Enot every problem lends itself to multithreading.\u003C/strong\u003E\u00A0Multithreading makes a lot of sense if the following conditions are met:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nEach thread is independent of any other thread\n\u003C/li\u003E\n\u003Cli\u003E\nThread synchronisation is needed rarely or not at all, and if it is needed, it can be done simply with little computational overhead\n\u003C/li\u003E\n\u003Cli\u003E\nEach thread operates on its own data\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nA typical terrific application for multithreading is graphics rendering. You can basically chop up the screen into 2560 chunks and render each of them independently into a buffer, and then 30, 60, or 120 or however many times a second you want, read the buffer from each pipeline, assemble it into a full screen, and display the result.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nA\u00A0really terrible application for multithreading is rigid-body physics where every part can -- in theory or in practice -- act upon every other part. You\u00A0\u003Cem\u003Ehave\u003C/em\u003E\u00A0to compute the state of the entire system in one thread because subsequent computations depend on preceding ones. The only way to multithread that is if you can identify chunks of the scene that aren\u0027t interacting with each other, and shunt those off to their own threads. So for example each craft in a physics scene can have its own thread. However, if the crafts collide, then suddenly they\u0027re interacting again, and one of the threads must take over, or you must spawn a new one -- and that carries performance overhead too, which you will likely notice as a stutter when craft approach each other, collide, dock, or undock.\n\u003C/p\u003E\n\u003Cp\u003E\nThird, even in the best case,\u00A0\u003Cstrong\u003Emultithreading carries overhead costs.\u003C/strong\u003E\u00A0In the GPU rendering situation for example we have additional steps: writing the chunk of image into a buffer, then reading it from the buffer and assembling it into an image: all this requires memory and core time. (IRL there\u0027s more there too I\u0027m sure, related to timing, making it possible for pipelines to skip frames if they\u0027re lagging, and so on and so forth.) If any of the above assumptions doesn\u0027t hold -- and they almost never 100% hold! -- there\u0027s going to be more overhead. And if you find that you need to do a lot of thread syncing, write- or read-locking data, watching out for situations where threads need to be merged, spawning or killing threads, or other similar stuff, you might find that anything you gained from multithreading was lost in that overhead.\n\u003C/p\u003E\n\u003Cp\u003E\nFourth,\u00A0\u003Cstrong\u003Emultithreading can get complicated fast.\u003C/strong\u003E\u00A0That overhead I mentioned above doesn\u0027t just slow things down and consume resources (memory, f.ex.) -- it can also get seriously complicated to write. For example if you\u0027re putting each craft in its own physics thread, you need to write the code that detects when they collide, which means you need to have some way to make sure each thread is in sync with system time; then you need to write the code that merges the two threads to compute the interaction. This stuff will cause entire categories of often really hard-to-reproduce, hard-to-find, and hard-to-squash bugs to emerge. A race condition, for example, is when two threads both try to operate on the same data and lock each other out, which causes the whole system to grind to a halt -- and they\u0027re notoriously difficult to pre-empt, detect, and fix.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSumma summarum, multithreading is \u003Cb\u003Ehard,\u003C/b\u003E\u00A0it\u0027s\u00A0\u003Cstrong\u003Eonly suitable for specific types of problems,\u003C/strong\u003E\u00A0\u003Cstrong\u003Eit doesn\u0027t even always help,\u003C/strong\u003E and \u003Cstrong\u003Eit\u0027s only tangentially related to multicore CPUs\u003C/strong\u003E.\u00A0Heavy-duty planetary-scale server software has been gradually moving\u00A0\u003Cem\u003Eaway\u003C/em\u003E\u00A0from multithreaded architectures for these reasons -- even though on the face of it a server which serves thousands of clients at the same time sounds like a perfect application for multithreading. Quite often a well-written efficient single-thread solution ends up faster, more robust, and less buggy than a multithreaded one.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-16T10:18:49Z\u0022 title=\u002209/16/2019 10:18  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 16, 2019\u003C/time\u003E by Guest\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mcwaffles2003","CreatedById":180102,"CreatedDateTime":"2019-09-16T10:49:32Z","Content":"\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672891\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568629061\u0022 data-ipsquote-userid=\u0022167629\u0022 data-ipsquote-username=\u0022Brikoleur\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 minutes ago, Brikoleur said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo while it\u0027s true that\u00A0\u003Cstrong\u003Ea single-threaded program can only run on one core,\u003C/strong\u003E\u00A0it\u0027s \u003Cstrong\u003Enot true\u003C/strong\u003E that\u00A0multithreading means making a program run on multiple cores\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is hyperthreading, correct?\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672891\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568629061\u0022 data-ipsquote-userid=\u0022167629\u0022 data-ipsquote-username=\u0022Brikoleur\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n21 minutes ago, Brikoleur said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nA\u00A0really terrible application for multithreading is rigid-body physics where every part can -- in theory or in practice -- act upon every other part. You\u00A0\u003Cem\u003Ehave\u003C/em\u003E\u00A0to compute the state of the entire system in one thread because subsequent computations depend on preceding ones. The only way to multithread that is if you can identify chunks of the scene that aren\u0027t interacting with each other, and shunt those off to their own threads. So for example each craft in a physics scene can have its own thread. However, if the crafts collide, then suddenly they\u0027re interacting again, and one of the threads must take over, or you must spawn a new one -- and that carries performance overhead too, which you will likely notice as a stutter when craft approach each other, collide, dock, or undock.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSo its easy to multithread multiple ships if it werent for collisions, correct? Since they can be considered different chunks. Could not a thread be made for detecting said collisions and compiling both chunks into one upon interaction then treat them, for the time being of their interaction, as one chunk in one thread then separated again upon ending the interaction? And if the case is so could a single ship be made into chunks and a thread be responsible for merging the chunks or would you have caching problems with that and\u00A0interruptions occurring over sharing memory between caches?\n\u003C/p\u003E\n\u003Cp\u003E\nIf\u00A0rigid-body physics is truly only optimizable for single threaded applications could that be predetermined and have cores that arent being utilized donate their caches to the core being utilized to increase cache size and reduce latency, therefore increasing performance? Or is this prevented at the level of hardware, ie AMD bulldozer with\u00A0\u003Cspan style=\u0022background-color:#ffffff;color:#222222;font-size:14px;\u0022\u003EClustered\u00A0\u003C/span\u003E\u003Cfont color=\u0022#222222\u0022\u003EMulti-threading vs Intel Hyper-threading\u00A0back in the day?\u003C/font\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"runner78","CreatedById":168980,"CreatedDateTime":"2019-09-16T11:03:10Z","Content":"\n\u003Cp\u003E\nAbout\u00A0multithreading in Unity and .NET:\n\u003C/p\u003E\n\u003Cp\u003E\nIf you use the default Task/Thread from .NET, normaly the OS or the Runtime manage on which core a Thread run.\n\u003C/p\u003E\n\u003Cp\u003E\nStarting Thread has some overhead, newer .NET versions has the Task (in KSP 1 \u0026lt; 1.8 not available),\u00A0who use a threadpool and with async/await you can\u00A0easier write\u00A0multithreading code. But switchiing context (task to mainthread) and Garbage collection make this approach not suitable for perfomance criticial game code.\n\u003C/p\u003E\n\u003Cp\u003E\nUnity has with the C# job system his own multithreading solution, specially designed for games. Unity starts one Backgroundthread on each logical core (1 core reserved for the maintread) and schedule jobs.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd with\u00A0the Burst compiler they compile the jobs with\u00A0LLVM/Clang to optimized\u00A0machine code.\n\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-09-16T11:07:48Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672899\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568630972\u0022 data-ipsquote-userid=\u0022180102\u0022 data-ipsquote-username=\u0022mcwaffles2003\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 minutes ago, mcwaffles2003 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is hyperthreading, correct?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope, hyperthreading is Intel\u0027s trademark term for making a single physical core appear to the operating system as multiple virtual cores. (This helps in some specific situations but why would be a long tangent; it\u0027s not really something anyone who\u0027s not intimately involved with the technology should care about IMO.)\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672899\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568630972\u0022 data-ipsquote-userid=\u0022180102\u0022 data-ipsquote-username=\u0022mcwaffles2003\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 minutes ago, mcwaffles2003 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo its easy to multithread multiple ships if it werent for collisions, correct? Since they can be considered different chunks. Could not a thread be made for detecting said collisions and compiling both chunks into one upon interaction then treat them, for the time being of their interaction, as one chunk in one thread then separated again upon ending the interaction? And if the case is so could a single ship be made into chunks and a thread be responsible for merging the chunks or would you have caching problems with that and\u00A0interruptions occurring over sharing memory between caches?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCertainly, but as I pointed out, that would be complicated and introduce overhead. (My intuition is that yes, in fact it would be worth doing if indeed KSP doesn\u0027t do this already.)\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672899\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568630972\u0022 data-ipsquote-userid=\u0022180102\u0022 data-ipsquote-username=\u0022mcwaffles2003\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 minutes ago, mcwaffles2003 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf\u00A0rigid-body physics is truly only optimizable for single threaded applications could that be predetermined and have cores that arent being utilized donate their caches to the core being utilized to increase cache size and reduce latency, therefore increasing performance? Or is this prevented at the level of hardware, ie AMD bulldozer with\u00A0\u003Cspan style=\u0022background-color:#ffffff;color:#222222;font-size:14px;\u0022\u003EClustered\u00A0\u003C/span\u003E\u003Cfont color=\u0022#222222\u0022\u003EMulti-threading vs Intel Hyper-threading\u00A0back in the day?\u003C/font\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope, that won\u0027t work, it is prevented by the hardware. CPU caches are physically wired to the core on the same bit of silicon; that\u0027s the whole point as it makes it possible for them to have orders of magnitude lower latency than RAM for example. So you can\u0027t have a core donating its cache to another core even on the same chip, the wires aren\u0027t there. (Caching is another incredibly complicated ball of yarn by the way, it\u0027s another thing IMO that nobody should care about unless they\u0027re intimately involved with the technology, in which case they need to care about it very very much indeed.)\n\u003C/p\u003E\n\u003Cp\u003E\n---\u0026gt; again, I\u0027m not a game programmer so I\u0027m just throwing stuff at the wall here, but ...\n\u003C/p\u003E\n\u003Cp\u003E\n... my intuition as a\u00A0\u003Cem\u003Eprogrammer\u003C/em\u003E\u00A0tout court is that the best way to optimise physics in KSP is to find ways to reduce and ideally cap the number of computations needed. Some kind of level of detail (LOD) system in other words. So if you\u0027ve determined that the physics engine handles 255 parts no problemo but after that performance starts degrading fast, you add an algorithm that automatically welds anything bigger than that into 255 chunks, each of which is treated as a single part for physics computations. For interactions between craft, give them an invisible collision box that triggers a re-weld so that the total part count inside the collision box is still below 255. These recomputations\u00A0\u003Cem\u003Ecould\u003C/em\u003E\u00A0be shunted off to separate threads, only switching to the new model when it\u0027s ready so if done well it wouldn\u0027t even be perceptible to the user. Moreover, LOD systems are really well-worn territory in graphics rendering and I\u0027m pretty sure similar\u00A0solutions could be applied to physics.\n\u003C/p\u003E\n\u003Cp\u003E\nSo basically if you make the interstellar ship\u00A0\u003Cem\u003EIt\u0027s The Little Things That Matter\u003C/em\u003E, and it has 2550 parts, KSP would secretly treat it as 255 parts. It would effectively scale as high as you\u0027d like; only effect would be that loading craft into a scene would take a bit longer as the welds are computed. And of course in case of \u003Cabbr title=\u0022Rapid unplanned disassembly\u0022\u003ERUD\u003C/abbr\u003E the craft would come apart at those seams making for a slightly different-looking explosion; the overall effect on gameplay would be as good as imperceptible however.\n\u003C/p\u003E\n\u003Cp\u003E\n(In fact I seem to recall that Star Theory mentioned physics LOD at some point, and they have been woofing that KSP2 scales to 5000-part plus craft no problem... so putting 1 and 1 together it does seem to me that they have something like this solution in place.)\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-16T11:11:07Z\u0022 title=\u002209/16/2019 11:11  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 16, 2019\u003C/time\u003E by Guest\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2019-09-16T11:21:39Z","Content":"\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672891\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568629061\u0022 data-ipsquote-userid=\u0022167629\u0022 data-ipsquote-username=\u0022Brikoleur\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Brikoleur said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027ve been trying to resist stepping but... fail. This multi-thread/multi-core discussion is just so wonderfully on the cusp of \u003Ci\u003Ealmost\u003C/i\u003E\u00A0right with just the right amount of misconceptions and half-truths mixed in that I just have to set the record straight.\n\u003C/p\u003E\n\u003Cp\u003E\nFirst, the concepts:\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Ecore\u003C/strong\u003E\u00A0is a physical or virtual device capable of executing instructions\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Ethread\u003C/strong\u003E\u00A0is a sequence of instructions (=a program) executed by a core in a series\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Emulticore\u003C/strong\u003E\u00A0is a computing device that has more than one core (typical CPUs nowadays have 4-8 cores; typical GPUs have thousands -- the GTX 1080 for example has 2560 cores)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Emultithreading\u003C/strong\u003E\u00A0is writing a program as more than one thread, with each thread executed in parallel\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003Epre-emptive multitasking\u003C/strong\u003E\u00A0is what the OS does to cycle cores through threads, attempting to keep all of them moving and none of them blocking any other threads\n\u003C/p\u003E\n\u003Cp\u003E\nFirst off, we\u0027ve been writing multithreaded programs since way before multicore CPUs became common. So while it\u0027s true that\u00A0\u003Cstrong\u003Ea single-threaded program can only run on one core,\u003C/strong\u003E\u00A0it\u0027s \u003Cstrong\u003Enot true\u003C/strong\u003E that\u00A0multithreading means making a program run on multiple cores.\u00A0It might or it might not but that\u0027s more of a side effect. There are usually more threads than cores anyway, so the OS will be multitasking between them anyway, whether there\u0027s one core or 8.\n\u003C/p\u003E\n\u003Cp\u003E\nSo it is strictly\u00A0\u003Cstrong\u003Enot true\u003C/strong\u003E\u00A0that \u0022multithreading a program\u0022 means \u0022making it run on more than one core.\u0022\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSecond,\u00A0\u003Cstrong\u003Enot every problem lends itself to multithreading.\u003C/strong\u003E\u00A0Multithreading makes a lot of sense if the following conditions are met:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nEach thread is independent of any other thread\n\u003C/li\u003E\n\u003Cli\u003E\nThread synchronisation is needed rarely or not at all, and if it is needed, it can be done simply with little computational overhead\n\u003C/li\u003E\n\u003Cli\u003E\nEach thread operates on its own data\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nA typical terrific application for multithreading is graphics rendering. You can basically chop up the screen into 2560 chunks and render each of them independently into a buffer, and then 30, 60, or 120 or however many times a second you want, read the buffer from each pipeline, assemble it into a full screen, and display the result.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nA\u00A0really terrible application for multithreading is rigid-body physics where every part can -- in theory or in practice -- act upon every other part. You\u00A0\u003Cem\u003Ehave\u003C/em\u003E\u00A0to compute the state of the entire system in one thread because subsequent computations depend on preceding ones. The only way to multithread that is if you can identify chunks of the scene that aren\u0027t interacting with each other, and shunt those off to their own threads. So for example each craft in a physics scene can have its own thread. However, if the crafts collide, then suddenly they\u0027re interacting again, and one of the threads must take over, or you must spawn a new one -- and that carries performance overhead too, which you will likely notice as a stutter when craft approach each other, collide, dock, or undock.\n\u003C/p\u003E\n\u003Cp\u003E\nThird, even in the best case,\u00A0\u003Cstrong\u003Emultithreading carries overhead costs.\u003C/strong\u003E\u00A0In the GPU rendering situation for example we have additional steps: writing the chunk of image into a buffer, then reading it from the buffer and assembling it into an image: all this requires memory and core time. (IRL there\u0027s more there too I\u0027m sure, related to timing, making it possible for pipelines to skip frames if they\u0027re lagging, and so on and so forth.) If any of the above assumptions doesn\u0027t hold -- and they almost never 100% hold! -- there\u0027s going to be more overhead. And if you find that you need to do a lot of thread syncing, write- or read-locking data, watching out for situations where threads need to be merged, spawning or killing threads, or other similar stuff, you might find that anything you gained from multithreading was lost in that overhead.\n\u003C/p\u003E\n\u003Cp\u003E\nFourth,\u00A0\u003Cstrong\u003Emultithreading can get complicated fast.\u003C/strong\u003E\u00A0That overhead I mentioned above doesn\u0027t just slow things down and consume resources (memory, f.ex.) -- it can also get seriously complicated to write. For example if you\u0027re putting each craft in its own physics thread, you need to write the code that detects when they collide, which means you need to have some way to make sure each thread is in sync with system time; then you need to write the code that merges the two threads to compute the interaction. This stuff will cause entire categories of often really hard-to-reproduce, hard-to-find, and hard-to-squash bugs to emerge. A race condition, for example, is when two threads both try to operate on the same data and lock each other out, which causes the whole system to grind to a halt -- and they\u0027re notoriously difficult to pre-empt, detect, and fix.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSumma summarum, multithreading is \u003Cb\u003Ehard,\u003C/b\u003E\u00A0it\u0027s\u00A0\u003Cstrong\u003Eonly suitable for specific types of problems,\u003C/strong\u003E\u00A0\u003Cstrong\u003Eit doesn\u0027t even always help,\u003C/strong\u003E and \u003Cstrong\u003Eit\u0027s only tangentially related to multicore CPUs\u003C/strong\u003E.\u00A0Heavy-duty planetary-scale server software has been gradually moving\u00A0\u003Cem\u003Eaway\u003C/em\u003E\u00A0from multithreaded architectures for these reasons -- even though on the face of it a server which serves thousands of clients at the same time sounds like a perfect application for multithreading. Quite often a well-written efficient single-thread solution ends up faster, more robust, and less buggy than a multithreaded one.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nThis is one of the absolute best explanations of WHY the rigid-body physics model KSP isn\u0027t\u00A0parallelizable iv\u0027e seen in plain English; thank you even though i doubt it was your intent xD\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAs for the difference between multithreaded software and multicore software\u00A0i must also acknowledge that @GoldForest was correct and thank @Brikoleur for clearing up the waters and sharing the rest of this information.\u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dave1904","CreatedById":153882,"CreatedDateTime":"2019-09-16T12:37:51Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672883\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568627073\u0022 data-ipsquote-userid=\u0022180102\u0022 data-ipsquote-username=\u0022mcwaffles2003\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, mcwaffles2003 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nit would definately improve performance on KSP 1 as i know its single threaded, so it all comes\u00A0 down to clock speed. I believe greater cache would also help a lot\u00A0as that leave less time per frame waiting for you CPU to grab data out of RAM which is much slower.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m a bit sad my 2700x only uses 1 thread when it has 16 available, if they go and make the game multi-threaded that would be awesome but even just having it GPU accelerated would be great since I have 11GB of VRAM\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAnything more than 4 cores hyperthreaded is overkill. Why Intel has already decided to go 6 cores for the gaming cpus is beyond me. Do not expect better multithreading for ksp2. I\u0027m 100% sure physics will be singlethreaded. If not I hope someone from the future can reply and tell me how wrong I hopefully am.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"DStaal","CreatedById":155685,"CreatedDateTime":"2019-09-16T13:28:29Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672924\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568637471\u0022 data-ipsquote-userid=\u0022153882\u0022 data-ipsquote-username=\u0022dave1904\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n40 minutes ago, dave1904 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnything more than 4 cores hyperthreaded is overkill. Why Intel has already decided to go 6 cores for the gaming cpus is beyond me. Do not expect better multithreading for ksp2. I\u0027m 100% sure physics will be singlethreaded. If not I hope someone from the future can reply and tell me how wrong I hopefully am.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nTwo reasons why Intel went with more cores: First off, your computer is doing a lot more than just running the program you\u0027re interacting with.\u00A0 Having additional cores for background processes, OS process, etc. makes sense.\u00A0 Secondly - from Intel\u0027s side: There\u0027s several ways to improve the performance of a CPU.\u00A0 You can add clockspeed, you can make each instruction (and therefore clock cycle) more powerful, or you can add cores.\u00A0 Each of these allows the CPU to perform more work per unit time.\u00A0 Making instructions more powerful at this point is only marginal effects (and several of Intel\u0027s latest attempts have backfired - SPECTRE comes to mind...).\u00A0 We\u0027re near physical limits for clockspeed - so adding cores is the easiest and most straightforward way to make more powerful CPUs at present.\n\u003C/p\u003E\n\u003Cp\u003E\nI believe current KSP (in just the last few versions) has gone multithreaded for physics - in the \u0027one thread per ship\u0027 method.\n\u003C/p\u003E\n"},{"CreatedByName":"dave1904","CreatedById":153882,"CreatedDateTime":"2019-09-16T16:31:05Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672942\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568640509\u0022 data-ipsquote-userid=\u0022155685\u0022 data-ipsquote-username=\u0022DStaal\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, DStaal said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nTwo reasons why Intel went with more cores: First off, your computer is doing a lot more than just running the program you\u0027re interacting with.\u00A0 Having additional cores for background processes, OS process, etc. makes sense.\u00A0 Secondly - from Intel\u0027s side: There\u0027s several ways to improve the performance of a CPU.\u00A0 You can add clockspeed, you can make each instruction (and therefore clock cycle) more powerful, or you can add cores.\u00A0 Each of these allows the CPU to perform more work per unit time.\u00A0 Making instructions more powerful at this point is only marginal effects (and several of Intel\u0027s latest attempts have backfired - SPECTRE comes to mind...).\u00A0 We\u0027re near physical limits for clockspeed - so adding cores is the easiest and most straightforward way to make more powerful CPUs at present.\n\u003C/p\u003E\n\u003Cp\u003E\nI believe current KSP (in just the last few versions) has gone multithreaded for physics - in the \u0027one thread per ship\u0027 method.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIve heard that about 1 thread per ship but have not seen any practical performance differences with it. I\u0027m not sure if that is true or not.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-16T16:45:05Z\u0022 title=\u002209/16/2019 04:45  PM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 16, 2019\u003C/time\u003E by dave1904\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Drakenred65","CreatedById":154503,"CreatedDateTime":"2019-09-16T19:01:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672854\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568620856\u0022 data-ipsquote-userid=\u002268648\u0022 data-ipsquote-username=\u0022Master39\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, Master39 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe CE takes a lot of backslash because of its graphics when Interaction wise it\u0027s one of the most advanced.\n\u003C/p\u003E\n\u003Cp\u003E\nOblivion had single pickable and readable books in bookcases when the most graphically advanced games of the time were using static models or even 2d textures with the bookshelf drawn on, Skyrim has all the props to be physic based instead of being glued in place like in most other games and F76 managed to get the CE working in multiplayer on the same hardware that runs F4 which is a miracle on its own.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen you hear someone blaming the game engine you can always be sure they don\u0027t know what they\u0027re talking about, especially with Unity and the Creation Engine.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat was kind of my point.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nMonernised skyrim when worked on by largly unpayed\u00A0modders many of whome dont actualy have the credetisls to get hiered by bethesds,*can make a old game engine look good....while payed profestional can only make a suposedly turbocharged updated and modernisef engine that they suposedly updated.....look like total crap.....never mind bugs that dated bact to Skyim and were fixed by comunity mods years ago.\n\u003C/p\u003E\n\u003Cp\u003E\nOften it turns out its not the tools used by dev teams that result in vrapy games.....\n\u003C/p\u003E\n\u003Cp\u003E\nAnd for thre ecord, one of the highest downloaded mods was created by someone who was 13 at the time. Another just got her GED this year.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Concodroid","CreatedById":153976,"CreatedDateTime":"2019-09-16T19:52:46Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223672801\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568603511\u0022 data-ipsquote-userid=\u002298138\u0022 data-ipsquote-username=\u0022Francois424\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 hours ago, Francois424 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWith the lootboxes and other garbage, games haven\u0027t improved much (graphics-wise) in the last ~10 years IMHO.\u00A0 And it\u0027s a darned shame.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n... Forza and Microsoft Flight Simulator much?\n\u003C/p\u003E\n\u003Cp\u003E\n(and ray tracing?)\n\u003C/p\u003E\n\u003Cp\u003E\n10 years ago we had this\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022pySc4mK.jpg\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002256.25\u0022 height=\u0022360\u0022 width=\u0022640\u0022 src=\u0022https://i.imgur.com/pySc4mK.jpg\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nand this\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022U956GJq.jpg\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002256.25\u0022 height=\u0022576\u0022 width=\u00221024\u0022 src=\u0022https://i.imgur.com/U956GJq.jpg\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nas AAA games (Forza Motorsport 3 and Halo 3 ODST, respectively);\n\u003C/p\u003E\n\u003Cp\u003E\nnow we have\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022H6GnHff.jpg\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002256.25\u0022 height=\u0022576\u0022 width=\u00221024\u0022 src=\u0022https://i.imgur.com/H6GnHff.jpg\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022HhrI6xw.png\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002242.51\u0022 height=\u0022435\u0022 width=\u00221024\u0022 src=\u0022https://i.imgur.com/HhrI6xw.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nand\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022g8UepHW.jpg\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002256.25\u0022 height=\u0022576\u0022 width=\u00221024\u0022 src=\u0022https://i.imgur.com/g8UepHW.jpg\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nas AAA games (Battlefield V RTX, Microsoft Flight Simulator 2020*, and Forza Horizon 4)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNo, we\u0027ve gotten really, really good at photo-realistic graphics. It\u0027s these next 10 years that\u0027ll be a problem.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nBut as for the Unity discussion, the Forza engine might be better, but only Microsoft can use that.\n\u003C/p\u003E\n\u003Cp\u003E\n*This hasn\u0027t been released yet, but it\u0027s from the real-footage trailer. It was the best one I could find, but in the trailer, there\u0027s a shot of storm clouds that\u0027s actually stunning. I\u0027m sure y\u0027all have seen it tho\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-16T20:02:48Z\u0022 title=\u002209/16/2019 08:02  PM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 16, 2019\u003C/time\u003E by Concodroid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ronson49","CreatedById":69756,"CreatedDateTime":"2019-09-17T11:29:31Z","Content":"\n\u003Cp\u003E\nSome amazing knowledge in this post and I appreciate you all sharing it with us.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\nBack on topic,\u00A0 all these features sound amazing.\u00A0 Is there anything in existence showing current (modern) versions of a 3D Unity Game that don\u0027t look like the \u002210 years ago\u0022 images above?\u00A0 \u00A0Even Subnautica wasn\u0027t far off Halo 3.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022201803_SN_B84_Splash-618x348.jpg\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002256.31\u0022 height=\u0022348\u0022 width=\u0022618\u0022 src=\u0022https://2i1suz1s0n5g1i6ph4z0sw1b-wpengine.netdna-ssl.com/subnautica/files/2018/03/201803_SN_B84_Splash-618x348.jpg\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"runner78","CreatedById":168980,"CreatedDateTime":"2019-09-17T11:50:36Z","Content":"\n\u003Cp\u003E\nIts a Techdemo,\u00A0but shows what is possible with Unity:\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://www.youtube.com/watch?v=34K8YJOMDRY\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.youtube.com/watch?v=34K8YJOMDRY\u003C/a\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-17T11:51:28Z\u0022 title=\u002209/17/2019 11:51  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 17, 2019\u003C/time\u003E by runner78\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ShawnPhillips","CreatedById":111721,"CreatedDateTime":"2019-09-17T14:14:05Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223673426\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568719771\u0022 data-ipsquote-userid=\u002269756\u0022 data-ipsquote-username=\u0022ronson49\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, ronson49 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIs there anything in existence showing current (modern) versions of a 3D Unity Game that don\u0027t look like the \u002210 years ago\u0022 images above?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nEscape from Tarkov is a Unity game, and it looked pretty good for a game released in 2016.\n\u003C/p\u003E\n"},{"CreatedByName":"ronson49","CreatedById":69756,"CreatedDateTime":"2019-09-17T15:18:08Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223673437\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568721036\u0022 data-ipsquote-userid=\u0022168980\u0022 data-ipsquote-username=\u0022runner78\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, runner78 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIts a Techdemo,\u00A0but shows what is possible with Unity:\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://www.youtube.com/watch?v=34K8YJOMDRY\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.youtube.com/watch?v=34K8YJOMDRY\u003C/a\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nLooks nice!!\u00A0 Actually your comment made me end up here:\u003Cbr\u003E\u003Cbr\u003E\u003Ca href=\u0022https://unity3d.com/unity/demos\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://unity3d.com/unity/demos\u003C/a\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\nSome appear to be downloadable.....\u00A0 \u00A0I will try them when I am home as interested.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"klgraham1013","CreatedById":105132,"CreatedDateTime":"2019-09-17T16:30:29Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223673426\u0022 data-ipsquote-contentid=\u0022188228\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568719771\u0022 data-ipsquote-userid=\u002269756\u0022 data-ipsquote-username=\u0022ronson49\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, ronson49 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nEven Subnautica wasn\u0027t far off Halo 3.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt depends if you\u0027re after photorealism\u00A0or the stylized look Subnautica was actually going for.\u00A0 Personally, I think Subnautica was beautiful and would have no problem if KSP also choose a more semi real approach.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-17T16:30:49Z\u0022 title=\u002209/17/2019 04:30  PM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 17, 2019\u003C/time\u003E by klgraham1013\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"horace","CreatedById":166359,"CreatedDateTime":"2019-09-17T20:18:12Z","Content":"\n\u003Cp\u003E\nit should have dxr\n\u003C/p\u003E\n"}]}