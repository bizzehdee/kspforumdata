{"TopicId":210862,"ForumId":109,"TopicTitle":"Insight on Mod Development Expectations","CreatedByName":"REDACT3D","CreatedById":198282,"CreatedDateTime":"2022-11-29T08:10:47Z","PageNum":1,"Articles":[{"CreatedByName":"REDACT3D","CreatedById":198282,"CreatedDateTime":"2022-11-29T08:10:47Z","Content":"\n\u003Cp\u003E\nDo any of you folk have any relevant insight on mod development for ksp2\n\u003C/p\u003E\n\u003Cp\u003E\nI imagine it is still unity but HDRP and hope that it still uses the same kind of files used in ksp1. but no idea.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAny insight on this topic?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI quite enjoy makin\u0027 parts. and I notice the wing change eliminating the need for tiny variations.\u00A0 but could add more complexity. the same goes with the multiplayer.\u00A0 I imagine it will have navigation more automated and more consistent with the abilities of the majority of players.\u00A0 maybe this will eliminate the need for navigation mods for example.\u00A0\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-11-29T08:14:40Z\u0022 title=\u002211/29/2022 08:14  AM\u0022 data-short=\u00221 yr\u0022\u003ENovember 29, 2022\u003C/time\u003E by REDACT3D\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2022-11-29T08:23:33Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224203918\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669709447\u0022 data-ipsquote-userid=\u0022198282\u0022 data-ipsquote-username=\u0022REDACT3D\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, REDACT3D said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDo any of you folk have any relevant insight on mod development for ksp2\n\u003C/p\u003E\n\u003Cp\u003E\nI imagine it is still unity but HDRP and hope that it still uses the same kind of files used in ksp1. but no idea.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAny insight on this topic?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI quite enjoy makin\u0027 parts. and I notice the wing change eliminating the need for tiny variations.\u00A0 but could add more complexity. the same goes with the multiplayer.\u00A0 I imagine it will have navigation more automated and more consistent with the abilities of the majority of players.\u00A0 maybe this will eliminate the need for navigation mods for example.\u00A0\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCan\u0027t really \u0027insight\u0027 about something we know nothing about. All we\u0027ve gotten is KSP 2 will be \u0027more moddable\u0027 and possibly easier. That\u0027s it. Nothing has been talked about on the modding side of KSP 2, afaik anyway.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWe don\u0027t even know if \u0022Gamedata\u0022 is still used or if they moved to a new system of loading parts.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-11-29T08:27:42Z\u0022 title=\u002211/29/2022 08:27  AM\u0022 data-short=\u00221 yr\u0022\u003ENovember 29, 2022\u003C/time\u003E by GoldForest\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MechBFP","CreatedById":184845,"CreatedDateTime":"2022-11-29T14:55:28Z","Content":"\n\u003Cp\u003E\nThey are moving to a LUA based system, last we heard a few years ago, so I expect it to be completely different.\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2022-11-29T15:36:14Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224203982\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669733728\u0022 data-ipsquote-userid=\u0022184845\u0022 data-ipsquote-username=\u0022MechBFP\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n39 minutes ago, MechBFP said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThey are moving to a LUA based system, last we heard a few years ago, so I expect it to be completely different.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThey also said the LUA system was also optional and can be completely bypassed if you want to use the direct/old method.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"MARL_Mk1","CreatedById":192535,"CreatedDateTime":"2022-11-29T16:28:05Z","Content":"\n\u003Cp\u003E\nWhen a developer says they\u0027ll support modding officially, I\u0027d expect at least some tools (even if it\u0027s later on) to be released publicly. A planet builder would do wonders for modded planet packs, and we\u0027ve seen some small clips of them using their own on the vlogs already.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-11-29T16:28:26Z\u0022 title=\u002211/29/2022 04:28  PM\u0022 data-short=\u00221 yr\u0022\u003ENovember 29, 2022\u003C/time\u003E by MARL_Mk1\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nazalassa","CreatedById":217956,"CreatedDateTime":"2022-11-29T16:31:04Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224203982\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669733728\u0022 data-ipsquote-userid=\u0022184845\u0022 data-ipsquote-username=\u0022MechBFP\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, MechBFP said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThey are moving to a LUA based system, last we heard a few years ago, so I expect it to be completely different.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDumb question, but what is a LUA system? I know a game that uses the Lua programming language for mods, but nothing else that is named \u0022LUA\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\n(Except License User Agreement, but I don\u0027t think it\u0027s that.)\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2022-11-29T17:50:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204021\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669739464\u0022 data-ipsquote-userid=\u0022217956\u0022 data-ipsquote-username=\u0022Nazalassa\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Nazalassa said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDumb question, but what is a LUA system? I know a game that uses the Lua programming language for mods, but nothing else that is named \u0022LUA\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\n(Except License User Agreement, but I don\u0027t think it\u0027s that.)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nLua isn\u0027t an acronym. It\u0027s the actual name of the programming code.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd Lua is basically a middle man coding system, from what I understand. It also slower than directly talking to the game from what I understand as well.\n\u003C/p\u003E\n"},{"CreatedByName":"Nazalassa","CreatedById":217956,"CreatedDateTime":"2022-11-29T19:27:31Z","Content":"\n\u003Cp\u003E\nAh, so that\u0027s the programming language. OK.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nLike in Minetest. The engine is written in C\u002B\u002B, but the \u0027mods\u0027 (the game actually) are written in Lua.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-11-30T00:41:39Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204089\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669750051\u0022 data-ipsquote-userid=\u0022217956\u0022 data-ipsquote-username=\u0022Nazalassa\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, Nazalassa said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAh, so that\u0027s the programming language. OK.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Ca href=\u0022#\u0022 rel=\u0022\u0022\u003E\u00A0\u003C/a\u003E \u003Cspan\u003EReveal hidden contents\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nLike in Minetest. The engine is written in C\u002B\u002B, but the \u0027mods\u0027 (the game actually) are written in Lua.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah. The advantage of going with Lua (or some other properly sandboxed language) over native modules is that it\u0027s much safer to make them portable. So hopefully, there won\u0027t be any problems joining a MP game where a host is using a custom part with a Lua script attached, as the script can be safely downloaded. Or have the scripted parts and missions available on the Workshop.\n\u003C/p\u003E\n\u003Cp\u003E\nThough, have we had a specific confirmation that we\u0027ll be able to use Lua for modding? When it was first mentioned, it was only confirmed for missions, but that was a while ago, and I\u0027m sure I could have missed additional info.\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2022-11-30T02:36:01Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204206\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669768899\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYeah. The advantage of going with Lua (or some other properly sandboxed language) over native modules is that it\u0027s much safer to make them portable. So hopefully, there won\u0027t be any problems joining a MP game where a host is using a custom part with a Lua script attached, as the script can be safely downloaded. Or have the scripted parts and missions available on the Workshop.\n\u003C/p\u003E\n\u003Cp\u003E\nThough, have we had a specific confirmation that we\u0027ll be able to use Lua for modding? When it was first mentioned, it was only confirmed for missions, but that was a while ago, and I\u0027m sure I could have missed additional info.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIt was confirmed that modding could use Lua or bypass it, which I feel most mods will choose to bypass since Lua can be slower in some use cases. If it is slower, which I\u0027ve heard it is, I doubt modders will want to increase an already long load time for the sake of \u0022portability\u0022.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-11-30T03:16:08Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204249\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669775761\u0022 data-ipsquote-userid=\u002277770\u0022 data-ipsquote-username=\u0022GoldForest\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n37 minutes ago, GoldForest said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf it is slower, which I\u0027ve heard it is, I doubt modders will want to increase an already long load time for the sake of \u0022portability\u0022.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI mean, it depends on how much work you need done. If you have a few lines of script you need to make your component works, which is going to be most mods, I suspect, both the compile (loading) time and performance hit are going to be absolutely insignificant.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you have a huge complex library of stuff, yeah, you want a module, and keep any Lua interactions down to hooks if needed at all.\n\u003C/p\u003E\n\u003Cp\u003E\nEither way, I\u0027m glad they\u0027re giving us both options. That\u0027s fantastic to hear.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-11-30T18:50:57Z","Content":"\n\u003Cp\u003E\nNothing was ever confirmed regarding LUA modding.\u003Cbr\u003E\nAll we know is early 2020 tidbits from one random guy on the KSP 2 team.\u003Cbr\u003E\nWho was saying that they had experimental LUA bindings on top of the C# API used in the context of some internal prototyping tools, which may or may not be used in the final product.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-11-30T18:53:23Z\u0022 title=\u002211/30/2022 06:53  PM\u0022 data-short=\u00221 yr\u0022\u003ENovember 30, 2022\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-11-30T19:56:51Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204466\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669834257\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n55 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWho was saying that they had experimental LUA bindings on top of the C# API used in the context of some internal prototyping tools, which may or may not be used in the final product.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWe\u0027ve had a job posting in February of this year for a Mission Designer, which explicitly required knowledge of Lua. So we know that these experimental bindings turned into the way missions are done for the game at the very least. I have not personally seen where the confirmation of Lua for modding comes from, so just going along with what \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/77770-goldforest/\u0026amp;do=hovercard\u0022 data-mentionid=\u002277770\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/77770-goldforest/\u0022 rel=\u0022\u0022\u003E@GoldForest\u003C/a\u003E\u00A0says. It would make perfect sense to allow Lua scripts on parts if there\u0027s already a support for it on the missions side, because that does expand what you can do with modding in multiplayer, but it\u0027d be nice to see a link to an interview or an article that states that this was, indeed, implemented.\n\u003C/p\u003E\n\u003Cp\u003E\nFor reference, \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/206748-new-job-posting-senior-mission-designer/\u0022 rel=\u0022\u0022\u003Ehere\u0027s the thread about the posting\u003C/a\u003E. Unfortunately, the posting itself is no longer available, and the only surviving bit seems to be the part I quoted about Lua. (Wayback machine was of now help, since this is a dynamic page.)\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-11-30T22:46:14Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204487\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669838211\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo we know that these experimental bindings turned into the way missions are done for the game at the very least.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is a lot of extrapolation. So, yeah, this just confirms that those LUA bindings still existed in february and are still used for internal developments.\n\u003C/p\u003E\n\u003Cp\u003E\nFor reference, this is the only source we have (it\u0027s actually from 2019) :\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u0022125662\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed1520022476\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/187856-lua-language-for-modding/\u0026amp;do=embed\u0026amp;comment=3663844\u0026amp;embedComment=3663844\u0026amp;embedDo=findComment\u0022 style=\u0022height:297px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\nI see very little incentive for them to put together a whole user facing LUA-based modding API and framework, when thanks to the game being an Unity game they basically get full modding support for \u0022free\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat I realistically envision is some level of LUA embedding for specific configuration files use cases. Being able to have a fully functional programming language at the config files level can be very useful in some situations.\u003Cbr\u003E\nThere are many KSP 1 mods that provide in one form or another some level of logic embedding in config files (ModuleManager and ContractConfigurator for example).\n\u003C/p\u003E\n\u003Cp\u003E\nBut anything is possible. Indeed, if they already have most of the LUA bindings they (we) need already in place and have used them in production for some final configuration systems, the gap to a LUA based modding framework might not be that much extreme, although the API coverage needed to be able to do anything useful is quite huge. It doesn\u0027t only need to cover the KSP API, but also large chunks of the Unity API.\n\u003C/p\u003E\n\u003Cp\u003E\nA LUA modding framework would maybe somewhat lower the perceived barrier of entry to modding (although if this is actually good is debatable). There are some possible benefits like hot-loading (to be fair that\u0027s also possible with C#), but there are many downsides.\u003Cbr\u003E\nBeside API coverage limitations, LUA is slow, it\u0027s a very barebone language with a very barebone standard library. My opinion is that it would make modding harder, not easier, and without putting words in others mouth, I doubt any serious KSP 1 modder would disagree on that.\u003Cbr\u003E\nOverall, my feeling is that this is a lot of work for the game devs and not that much benefits for the modders. As a modder, if I were to choose what I want, I\u0027d rather have a good built-in \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E/ModuleManager than a redundant LUA modding API.\n\u003C/p\u003E\n\u003Cp\u003E\nDon\u0027t get me wrong, having a scripting language with good API coverage would be an interesting feature. It would basically mean that KSP 2 has a built-in KOS, or at least something quite close from it, and that opens up a lot of possibilities if the LUA system itself is correctly exposed from the C# API.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-11-30T22:58:43Z\u0022 title=\u002211/30/2022 10:58  PM\u0022 data-short=\u00221 yr\u0022\u003ENovember 30, 2022\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-11-30T23:15:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204541\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669848374\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI see very little incentive for them to put together a whole user facing LUA-based modding API and framework, when thanks to the game being an Unity game they basically get full modding support for \u0022free\u0022.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe incentive is that if I make a mod with a native plugin, I can take full control of your computer if I\u0027m a malicious type and convince you to downnload my mod. That means that if you join a multiplayer server, having the server share native mods with you is a huge security hole. This creates all sorts of complication.\n\u003C/p\u003E\n\u003Cp\u003E\nLua runs in a sandbox. If properly set up and properly patched, there are no known ways to exploit it for an attack, meaning you can just download all the mods from the server when you join a multiplayer game. Likewise, for sharing modded parts, you can utilize things like Steam Workshop, have modders upload their mods there, and have zero risk when people download these.\n\u003C/p\u003E\n\u003Cp\u003E\nLua is by far not the only way to do this, of course, but there is also no reason to add yet more complexity for this if Lua is already being used.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204541\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669848374\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is a lot of extrapolation. So, yeah, this just confirms that those LUA bindings still existed in february and are still used for internal developments.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou don\u0027t put it on a job requirement like this unless it\u0027s actually heavily used. So yes, it might be entirely internal, with no user-facing interface, but we know that Lua engine is in and it\u0027s heavily used by the game.\n\u003C/p\u003E\n\u003Cp\u003E\nOnce you have that, creating bindings for a mod is actually very easy in C#. C# supports custom attributes. So any function you create for use with modding API can simply have something like [KSP_Lua_Function] attribute in front of it and it\u0027s now available in the Lua API. That\u0027s it. Last studio I\u0027ve worked at, we did this for Python bindings in our dev tools. It was all internally facing, since we didn\u0027t ship our tools, but it made writing Python script for our tools and content validation a cakewalk.\n\u003C/p\u003E\n\u003Cp\u003E\nSo again, this is hardly confirmation, but we know that the Lua engine is in the game, there was interest in and at least some work done to expose Lua to modders, the additional workload is trivial - as the modding API C# functions have to be written anyways, and the binding attributes have to exist for internal use already, and there is a strong incentive to make this available to modders to avoid security problems when sharing mods.\n\u003C/p\u003E\n\u003Cp\u003E\nAt this point, my confidence in this being a feature usable in KSP2 modding is well past 50%, though still far from certainty until officially confirmed, of course.\n\u003C/p\u003E\n"},{"CreatedByName":"Zozaf Kerman","CreatedById":219910,"CreatedDateTime":"2022-11-30T23:38:04Z","Content":"\n\u003Cp\u003E\nRoblox uses lua for scripting, if that helps any.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2022-11-30T23:39:16Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204541\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669848374\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n50 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBeside API coverage limitations, LUA is slow, it\u0027s a very barebone language with a very barebone standard library. My opinion is that it would make modding harder, not easier, and without putting words in others mouth, I doubt any serious KSP 1 modder would disagree on that.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUmmm, I do disagree.\u00A0 While Lua maybe slower than native, if the game is compiled into native code, the speed loss won\u0027t be noticeable compared to interpreted c# byte code\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-12-01T00:23:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204553\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669850106\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo any function you create for use with modding API can simply have something like [KSP_Lua_Function] attribute in front of it and it\u0027s now available in the Lua API.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m quite skeptical. For that to work, you also have to create bindings for all types used as a parameter or return type, and consequently bindings for the methods in those types too. That mean a huge proportion of the BCL and Unity API surface.\u003Cbr\u003E\nIn a way or another, you have a ton of work to do if you want to expose a vaguely useful LUA modding API.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204553\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669850106\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat means that if you join a multiplayer server, having the server share native mods with you is a huge security hole.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhile we have zero confirmation that LUA modding exists, we have a lot of confirmation that C# modding exists, and there is technically no way to do such sandboxing if they allow C# modding.\u003Cbr\u003E\nAnd frankly, if they try, it would be a deal-breaker and a major failure on their \u0022KSP 2 will be at least as moddable as KSP 1\u0022 statement.\u003Cbr\u003E\nI can guarantee you that the first thing the modding community would do is to move on to BepInEx or similar and build it\u0027s own C# based no strings attached modding ecosystem. By definition, modding doesn\u0027t want to limit itself to what the developer has made.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you read carefully what was reported by Snark in 2019, I think the likely scenario is quite clear : embedded LUA scripts in config files in order to be able to define custom logic within the scope of the configured subsystem and its specific functionality.\u003Cbr\u003E\nThis seems like a very sensible choice to me, but extending that to a general purpose modding API that cover the full KSP (and consequently BCL \u0026amp; Unity) API surface seems a total waste of resources for very questionable benefits.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204557\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669851556\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n53 minutes ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhile Lua maybe slower than native, if the game is compiled into native code, the speed loss won\u0027t be noticeable compared to interpreted c# byte code\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nHu, what ?\n\u003C/p\u003E\n\u003Cp\u003E\nC# is compiled to machine assembly, it\u0027s not interpreted on the fly.\u003Cbr\u003E\nLua can either use a static interpreter reading byte code, or be compiled to machine assembly too.\n\u003C/p\u003E\n\u003Cp\u003E\nEither way, in practice, Lua mods would be much slower than C# mods.\u003Cbr\u003E\nNot so much because it is intrinsically slower (which it is), but mainly because of the overhead of calling into the C# API while mutating the methods parameters on every call. The overhead here would be very significant.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-12-01T00:33:58Z\u0022 title=\u002212/01/2022 12:33  AM\u0022 data-short=\u00221 yr\u0022\u003EDecember 1, 2022\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-12-01T00:38:59Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204555\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669851484\u0022 data-ipsquote-userid=\u0022219910\u0022 data-ipsquote-username=\u0022Zozaf Kerman\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Zozaf Kerman said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nRoblox uses lua for scripting, if that helps any.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThey use a custom implementation of it. It started of as an off-the-shelf implementation, but they\u0027ve since replaced it with an entirely custom Lua engine that does some very clever optimizations and JITing.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204557\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669851556\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n59 minutes ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUmmm, I do disagree.\u00A0 While Lua maybe slower than native, if the game is compiled into native code, the speed loss won\u0027t be noticeable compared to interpreted c# byte code\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOk, there are a lot of misconceptions here.\n\u003C/p\u003E\n\u003Cp\u003E\nLets start with C#. C# scripts for Unity components first get converted to Common Intermediate Language (CIL). There are three ways that can run. Unity provides a transpiler that takes CIL and converts it into C\u002B\u002B code (IL2CPP) that is then compiled to native code. That is your\u00A0\u003Cem\u003Ebest\u003C/em\u003E\u00A0performance. Still not as good as writing C\u002B\u002B code yourself, but very close. However, it\u0027s not always an option for plugins, as the C# code for IL2CPP has to be available when you build the game. If you\u0027re making your own plugin, you can\u00A0\u003Cem\u003Eabsolutely\u003C/em\u003E\u00A0just write all of your performance-critical code in C\u002B\u002B or have your code likewise transpiled into native, and then bind it from C# layer. But any C# code you ship with your parts is going to be interpreted from CIL directly. So that leads us into two other ways Unity runs C# code, and it\u0027s by using either .NET Common Language Runtime (CLR) or Mono. Former is available only on MS platforms, and the latter is available for the other platforms KSP2 is likely to ship on. Both will optimize CIL further and use JIT (Just in Time) compilation to run the code. This is slower, but not by a lot. Typically, you\u0027ll get about 20%-30% performance of native with CLR and a little bit worse with Mono.\n\u003C/p\u003E\n\u003Cp\u003E\nNext, Lua. Lua is compiled to Lua bytecode. There are ways to convert that to native code, but that completely defeats the purpose of using Lua in the first place. The only benefit of using Lua is running it in an interpreter sandbox. The typical way to run it is using Lua\u0027s own runtime, which is a pure bytecode interpreter. It is comparatively slow, about 10x slower than CLR and Mono on average. There are projects that are designed to bring in on-demand optimization and JIT to Lua, like the aforementioned Roblox runtime and the LuaJIT project. The latter is publicly available, but it\u0027s relatively new and I don\u0027t know how good their sandbox security guarantees are. Since the only reason to even entertain Lua code for KSP2 mods is\u00A0\u003Cem\u003Esafe\u003C/em\u003E\u00A0portability of code, odds are, if we\u0027re getting Lua in KSP2 for mods, it\u0027s the slow, official version.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, 20-50 times slower than native is still blazing fast in the absolute terms. Most mods I\u0027ve seen that have custom code for custom parts does not need full native performance. A few percent of native is\u00A0\u003Cem\u003Efine\u003C/em\u003E. If you want to write a custom IK solution for a Canadarm part mod that automatically moves modules on your station, Lua is\u00A0\u003Cem\u003Eplenty\u003C/em\u003E\u00A0fast enough. If you want to run dynamic trajectory estimates, you\u0027ll want to be careful about how you write your code, but you can get away with Lua. The place where Lua will start struggling is anything to do with graphics. But I\u0027m not sure we\u0027ll be able to do much with custom displays without C# anyways.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204564\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669854199\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n15 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nC# is compiled to machine assembly, it\u0027s not interpreted on the fly.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSee above. This is only the case if you specifically enable IL2CPP, which converts to C\u002B\u002B (which never becomes assembly in modern systems), and this only works for code that\u0027s available when you build your project.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want to import things dynamically, best you can do is interpreting CIL or Lua bytecode, depending on the language.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204564\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669854199\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m quite skeptical. For that to work, you also have to create bindings for all types used as a parameter or return type, and consequently bindings for the methods in those types too.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo. You use language reflection and it\u0027s automatic. You literally just have a line you paste in front of a function you want to be accessible from Lua.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204564\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669854199\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n18 minutes ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nand there is technically no way to do such sandboxing if they allow C# modding.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOf course there is. You simply don\u0027t allow a client to connect to a host unless the client already has all the plugins that the server is running. That\u0027s how it\u0027s done in literally every moddable multiplayer game. You both must have the mod installed.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-12-01T00:40:54Z\u0022 title=\u002212/01/2022 12:40  AM\u0022 data-short=\u00221 yr\u0022\u003EDecember 1, 2022\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-12-01T01:01:25Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204569\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669855139\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo that leads us into two other ways Unity runs C# code, and it\u0027s by using either .NET Common Language Runtime (CLR) or Mono. Former is available only on MS platforms, and the latter is available for the other platforms KSP2 is likely to ship on. Both will optimize CIL further and use JIT (Just in Time) compilation to run the code. This is slower, but not by a lot. Typically, you\u0027ll get about 20%-30% performance of native with CLR and a little bit worse with Mono.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope, Unity uses (a custom fork of) Mono on all platforms.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd IL2CPP performs very marginally better than Mono in terms of execution speed. The main reason it exists is because it allow Unity games to run on platforms where JIT VMs aren\u0027t allowed (namely iOS), but it also has the advantage of producing a smaller distribution and using slightly less memory (because it strips unused BCL classes and doesn\u0027t need the JIT VM), which is relevant on mobile platforms in general.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204569\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669855139\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nbest you can do is interpreting CIL\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCIL is not statically interpreted. That\u0027s not how the JIT works. It is compiled to assembly when the application start. Which means that technically, you can get as much performance from C# as in C or C\u002B\u002B.\u003Cbr\u003E\nC# in practice is (slightly) slower than equivalent C\u002B\u002B code because of the overhead of the high level constructs of the BCL and of the GC.\u003Cbr\u003E\nBut at least on modern CoreCLR, if you desire so you can get quite close to the metal with the most low level C# constructs and get similar performance as C/C\u002B\u002B.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-12-01T01:12:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204577\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669856485\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nCIL is not statically interpreted. That\u0027s not how the JIT works. It is compiled to assembly when the application start. Which means that technically, you can get as much performance from C# as in C or C\u002B\u002B.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThere is not a single modern language that compiles to assembly. Lets get that out of the way first. It\u0027s just not done. You can ask some C\u002B\u002B compilers to dump assembly code, but even that, in practice, is usually achieved by disassembling output binary. Assembly is not a good choice for intermediate language, and so it is simply not used.\n\u003C/p\u003E\n\u003Cp\u003E\nJIT turns bytecode to machine code during runtime. That\u0027s literally it\u0027s job. Please consider reading up on JIT and how it\u0027s actually used. A compiled C# program is stored as CIL and does not turn into machine code until execution, and only as necessary. A typical JITed interpreter will still elect to run bytecode in pure interpreter mode until it becomes a performance penalty over spending time to JIT the code. This is a standard feature of CLR, Mono, V8, LuaJIT, JVM, and basically any serious JITed interpreter.\n\u003C/p\u003E\n\u003Cp\u003E\nI stand corrected on use of CLR. Older versions of Unity were relying on CLR on MS platforms, but yes, it looks like recent versions have switched to Mono entirely.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2022-12-01T01:33:11Z","Content":"\n\u003Cp\u003E\nActually, based on some benchmarks done by\u00A0 a former Microsoft developer, Dave Plummer, it appears that C\u002B\u002B much faster than C#.\u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou can review the results here, along with all the source code used:\u00A0\u00A0\u003Ca href=\u0022https://github.com/PlummersSoftwareLLC/Primes\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/PlummersSoftwareLLC/Primes\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe first of the series of videos can be viewed here:\u00A0\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 src=\u0022https://www.youtube-nocookie.com/embed/tQtFdsEcK_s?feature=oembed\u0022 title=\u0022E01: What is the FASTEST Computer Language?  45 Languages Tested!\u0022 width=\u0022200\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-12-01T01:33:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204579\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669857139\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nA typical JITed interpreter will still elect to run bytecode in pure interpreter mode until it becomes a performance penalty over spending time to JIT the code.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope. CLR and CoreCLR aren\u0027t and never were interpreters. Only Mono has (had ?) an (optional) interpreter, which isn\u0027t used in Unity.\u003Cbr\u003E\nThey fully compile the whole application on startup, with the downside being a vastly increased start delay.\u003Cbr\u003E\nWhich is why stuff like NGen or NativeAOT existed, and why CoreCLR has introduced tiered compilation where jitting is initially done with a minimal amount of work done on optimizations to get quick app startup, then it takes some times to do some deeper analysis and re-jit identified hot paths.\u003Cbr\u003E\nThe compact framework JIT is a bit different and does on-demand jitting, not compiling stuff until it actually used. The micro framework JIT however is an interpreter, but it\u0027s almost a completely separate product.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204579\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669857139\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOlder versions of Unity were relying on CLR on MS platform\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNope. Unity has forever been using Mono.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2022-12-01T01:46:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224204592\u0022 data-ipsquote-contentid=\u0022210862\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221669858391\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n34 minutes ago, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nActually, based on some benchmarks done by\u00A0 a former Microsoft developer, Dave Plummer, it appears that C\u002B\u002B much faster than C#.\u00A0\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI won\u0027t go into that pointless debate. Low level modern C# is just as fast as low level modern C\u002B\u002B.\u003Cbr\u003E\nHigh level \u0022usual\u0022 C# code tend to be slower than equivalent \u0022usual\u0022 C\u002B\u002B code because the BCL abstractions are much higher level and offer handy features like automatic exception handling, managed memory and some level of thread safety.\u003Cbr\u003E\nIf you choose to deliberately to get ride of those high level features (which you can in modern .NET), C# code becomes again in same ballpark as C\u002B\u002B.\n\u003C/p\u003E\n\u003Cp\u003E\nEdit : actually, did you look at the results on the GH repo you linked ?\u003Cbr\u003E\nThe fastest C# implementation (very low level) is 34% faster than the fastest C\u002B\u002B implementation.\u003Cbr\u003E\nThe \u0022normal\u0022 C# implementation (\u0022tannergooding\u0022) is twice slower.\u003Cbr\u003E\nWhich kinda illustrate my point nicely. I suspect that a middle-ground C# implementation not resorting to unsafe code but using .NET6/7 low level constructs would be roughly equivalent as C\u002B\u002B.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222022-12-01T02:19:43Z\u0022 title=\u002212/01/2022 02:19  AM\u0022 data-short=\u00221 yr\u0022\u003EDecember 1, 2022\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Vl3d","CreatedById":219348,"CreatedDateTime":"2022-12-01T02:30:29Z","Content":"\n\u003Cp\u003E\nThis is a great thread. Thank you - to all the modders! You have molded KSP into what it is for each of us.\n\u003C/p\u003E\n"}]}