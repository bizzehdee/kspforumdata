{"TopicId":189135,"ForumId":109,"TopicTitle":"KSP2 and multithreading (what CPU do I want for my next computer?)","CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2019-10-21T14:10:55Z","PageNum":1,"Articles":[{"CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2019-10-21T14:10:55Z","Content":"\n\u003Cp\u003E\nHave there been any hints, or even proper announcements, as to how well KSP2 will be able to utilize several CPU cores? Basically I\u0027m trying to figure out whether my next computer should be built around on Intel or AMD processor.\n\u003C/p\u003E\n"},{"CreatedByName":"GoldForest","CreatedById":77770,"CreatedDateTime":"2019-10-21T14:12:27Z","Content":"\n\u003Cp\u003E\nKso doesn\u0027t support multithreading due to rigid body. Ksp 2 might be the same way. They are still investigating\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI say get a cpu with good single core performance. And one that runs at least 4.1 with boost. The higher the ghz the better ksp will run, at least that\u0027s what I believe with Ksp 1.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-21T14:13:42Z\u0022 title=\u002210/21/2019 02:13  PM\u0022 data-short=\u00224 yr\u0022\u003EOctober 21, 2019\u003C/time\u003E by GoldForest\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-10-21T14:55:31Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691850\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571667055\u0022 data-ipsquote-userid=\u0022110461\u0022 data-ipsquote-username=\u0022Laie\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n42 minutes ago, Laie said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHave there been any hints, or even proper announcements, as to how well KSP2 will be able to utilize several CPU cores? Basically I\u0027m trying to figure out whether my next computer should be built around on Intel or AMD processor.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nMy semi-educated guess is that it\u0027ll still be single-core-performance constrained most of the time. But that\u0027s just a guess at this point, based on the assumption that they\u0027re still using Unity\u0027s physics API rather than something they\u0027ve baked themselves.\n\u003C/p\u003E\n\u003Cp\u003E\nThey\u00A0\u003Cem\u003Eare\u003C/em\u003E\u00A0trying to optimise for better scaling with part count however, but by itself that wouldn\u0027t make the program to be better able to take advantage of multiple cores.\n\u003C/p\u003E\n"},{"CreatedByName":"B15hop","CreatedById":68462,"CreatedDateTime":"2019-10-21T17:48:25Z","Content":"\n\u003Cp\u003E\nFor the love of God, get with the times please. If a game isn\u2019t utilizing this feature by now it should be. Please make it work.\n\u003C/p\u003E\n"},{"CreatedByName":"DStaal","CreatedById":155685,"CreatedDateTime":"2019-10-21T17:52:37Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691943\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571680105\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFor the love of God, get with the times please. If a game isn\u2019t utilizing this feature by now it should be. Please make it work.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNot all logic can be parallelized effectively.\u00A0 KSP tends towards some that can\u0027t, because of what it\u0027s doing.\u00A0 That\u0027s not an issue with the programming necissarially - it\u0027s limits of design, logic, and computing theory.\n\u003C/p\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2019-10-21T18:36:47Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691943\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571680105\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n31 minutes ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nFor the love of God, get with the times please. If a game isn\u2019t utilizing this feature by now it should be. Please make it work.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDStaal covered the explanation perfectly fine, but I\u0027m going to add another thing: the limitations of parallel computing have been known since the sixties and seventies.\u00A0 \u0022Get with the times\u0022 indeed.\n\u003C/p\u003E\n\u003Cp\u003E\nBy the way, a slavish devotion to parallel computing can end up with a program that is not only \u003Cstrong\u003ENOT\u003C/strong\u003E faster than the equivalent single threaded/serial processing equivalent, but also has the added bonus of requiring vastly more resources.\u00A0 Hooray!\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027d also point out that Windows is egregiously bad at thread scheduling.\u00A0\u00A0 I remember back in the SupCom days, when we\u0027d manually assign threads to CPUs using CPU affinity to gain massive improvements in performance.\u00A0 So you could very well end up with some fat, bloated program that barely runs, which then gets scheduled to CPU #3 exclusively for no reason (well, except perhaps cache coherency, but you\u0027ve just negated any advantage to being multithreaded in the first place)...\n\u003C/p\u003E\n"},{"CreatedByName":"B15hop","CreatedById":68462,"CreatedDateTime":"2019-10-21T19:04:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691968\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571683007\u0022 data-ipsquote-userid=\u002296629\u0022 data-ipsquote-username=\u0022Renegrade\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n33 minutes ago, Renegrade said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDStaal covered the explanation perfectly fine, but I\u0027m going to add another thing: the limitations of parallel computing have been known since the sixties and seventies.\u00A0 \u0022Get with the times\u0022 indeed.\n\u003C/p\u003E\n\u003Cp\u003E\nBy the way, a slavish devotion to parallel computing can end up with a program that is not only \u003Cstrong\u003ENOT\u003C/strong\u003E faster than the equivalent single threaded/serial processing equivalent, but also has the added bonus of requiring vastly more resources.\u00A0 Hooray!\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027d also point out that Windows is egregiously bad at thread scheduling.\u00A0\u00A0 I remember back in the SupCom days, when we\u0027d manually assign threads to CPUs using CPU affinity to gain massive improvements in performance.\u00A0 So you could very well end up with some fat, bloated program that barely runs, which then gets scheduled to CPU #3 exclusively for no reason (well, except perhaps cache coherency, but you\u0027ve just negated any advantage to being multithreaded in the first place)...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI love how people have this tendency to throw out some over blown statement, peppered with their own personal sentiment and no hard facts. You don\u2019t even know what kind of programming\u00A0KSP 2\u00A0will have. But here you are making this giant, blanketing statement because hey, it\u2019s nice to sound like you know something isn\u2019t it? When I look at KSP, I see a bunch of things that could be separated onto\u00A0different cores. But if you want to stay in the 1970\u2019s, feel free.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-21T19:11:22Z\u0022 title=\u002210/21/2019 07:11  PM\u0022 data-short=\u00224 yr\u0022\u003EOctober 21, 2019\u003C/time\u003E by B15hop\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-10-21T20:07:00Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691989\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571684692\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhen I look at KSP, I see a bunch of things that could be separated onto\u00A0different cores. But if you want to stay in the 1970\u2019s, feel free.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nMany of them already are.\n\u003C/p\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2019-10-21T20:13:13Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691989\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571684692\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI love how people have this tendency to throw out some over blown statement, peppered with their own personal sentiment and no hard facts. You don\u2019t even know what kind of programming\u00A0KSP 2\u00A0will have. But here you are making this giant, blanketing statement because hey, it\u2019s nice to sound like you know something isn\u2019t it? When I look at KSP, I see a bunch of things that could be separated onto\u00A0different cores. But if you want to stay in the 1990s, feel free.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDo you understand Amdahl\u0027s Law? The need for critical sections and mutexes?\u00A0 Order-dependent operations?\u00A0 I\u0027m a professional programmer.\u00A0 Are you?\n\u003C/p\u003E\n\u003Cp\u003E\nIronic that you should mention the 90s - most of the crap you\u0027re using today is just tired old rehashes of 90s stuff anyhow.\u00A0 You\u0027re running GameSDK on Windows NT (or OpenGL on Linux).\u00A0\u00A0 All of the \u0027advanced\u0027 stuff (SMP, SIMD, 64-bit, PIC, cache, etc) of your CPU was invented by Westinghouse and Cray and Burroughs and IBM and DEC and such before you were born, and saw their first iterations in the 80s and 90s on PCs and home computers.\u00A0\u00A0 None of the underlying laws of physics has changed since that time.\n\u003C/p\u003E\n\u003Cp\u003E\n\u0022When I look at KSP, I see a bunch of things that could be separated onto different cores\u0022 -- Like this isn\u0027t some overblown statement, peppered with your own personal sentiment.\n\u003C/p\u003E\n\u003Cp\u003E\nBy the way, everything I said can be backed up with simple web searches with the sole exception of SupCom stuff.\u00A0\u00A0 It appears that Gas Powered Games went under at some point in the past, and the forums with thousands of posts detailing the crash and burn which was the \u0022muh multicore/SMP\u0022 programming paradigm bit it with them.\u00A0 Oh wait, I suppose that actually counts as evidence too!\u00A0 Maybe they\u0027d still be here if SupCom wasn\u0027t such a pig... Still, I\u0027d prefer the actual direct evidence remained.\u00A0 Effing internet is such fail.\u00A0 Maybe I\u0027ll dig it out of the wayback machine at some point...\n\u003C/p\u003E\n\u003Cp\u003E\nYou know KSP already runs separate vessel physics instances in separate threads, right?\u00A0 (introduced in ... uhhh.. 1.2?\u00A0 1.3? I forget) That\u0027s likely 80% of the potential speedup right there.\u00A0\u00A0 Even if you could find other places to be concurrent in, you\u0027d also find that the opportunity cost in terms of data locality / cache misses would override any possible gain.\n\u003C/p\u003E\n\u003Cp\u003E\nAnyhow, I have Kerbals that need to explore the newly retextured worlds.\u00A0 Oh and they\u0027re using 57 threads to do so already, of which about ten are sharing the CPUs aggressively.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ETL;DR:\u003C/strong\u003E It\u0027s a complex problem that you can\u0027t just throw cores at and expect it to work (this applies to almost any program). See Amdahl\u0027s Law.\u00A0 Plus what Brikoleur just said.\n\u003C/p\u003E\n"},{"CreatedByName":"griffinb88","CreatedById":200929,"CreatedDateTime":"2019-10-21T20:27:58Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691989\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571684692\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI love how people have this tendency to throw out some over blown statement, peppered with their own personal sentiment and no hard facts. You don\u2019t even know what kind of programming\u00A0KSP 2\u00A0will have. But here you are making this giant, blanketing statement because hey, it\u2019s nice to sound like you know something isn\u2019t it? When I look at KSP, I see a bunch of things that could be separated onto\u00A0different cores. But if you want to stay in the 1970\u2019s, feel free.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI don\u0027t think you understand programming. It\u0027s math, which has rules. Certain things depend on the outcome of another. Sometimes you can\u0027t start one calculation until the other has finished. If you multi-thread something that is constantly dependent on the results of previous calculations then it will sometimes\u00A0still run at the same speed, now you\u0027re just using additional threads. So, you end up with threads sitting idle while they wait for results they could be calculating themselves. If you think those threads can do something while they\u0027re waiting you are correct but, when a thread switches tasks it has to save the state of it\u0027s current task, consuming additional\u00A0resources. It\u0027s like employees, having more can help when additional tasks are required but, if it\u0027s a single task that only one person can work on at a time, it would slow it down to have it passed back and forth between multiple people.\n\u003C/p\u003E\n"},{"CreatedByName":"R-T-B","CreatedById":200868,"CreatedDateTime":"2019-10-22T00:50:34Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691989\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571684692\u0022 data-ipsquote-userid=\u002268462\u0022 data-ipsquote-username=\u0022B15hop\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, B15hop said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI love how people have this tendency to throw out some over blown statement, peppered with their own personal sentiment and no hard facts. You don\u2019t even know what kind of programming\u00A0KSP 2\u00A0will have. But here you are making this giant, blanketing statement because hey, it\u2019s nice to sound like you know something isn\u2019t it? When I look at KSP, I see a bunch of things that could be separated onto\u00A0different cores. But if you want to stay in the 1970\u2019s, feel free.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI know you mean well, but he\u0027s right.\u00A0 The way we model physics hasn\u0027t changed much since the 70s.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWhy?\u00A0 Because physics havent changed much since the 70s, of course (it would be more correct to say they are exactly the same).\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThey really need to be on a single core, unfortunately.\u00A0 That\u0027s also where the bulk of KSP processing is.\n\u003C/p\u003E\n\u003Cp\u003E\nThe only reliable way to multithread physics is to make the objects non-collidable and unable to act on each other.\u00A0 That\u0027s good for particles, but it\u0027s useless for a sim.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-22T00:52:11Z\u0022 title=\u002210/22/2019 12:52  AM\u0022 data-short=\u00224 yr\u0022\u003EOctober 22, 2019\u003C/time\u003E by R-T-B\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2019-10-22T01:22:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692192\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571705434\u0022 data-ipsquote-userid=\u0022200868\u0022 data-ipsquote-username=\u0022R-T-B\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n30 minutes ago, R-T-B said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe only reliable way to multithread physics is to make the objects non-collidable and unable to act on each other.\u00A0 That\u0027s good for particles, but it\u0027s useless for a sim.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n^ Exactly.\u00A0 Good example too.\n\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-10-22T01:27:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691850\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571667055\u0022 data-ipsquote-userid=\u0022110461\u0022 data-ipsquote-username=\u0022Laie\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, Laie said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHave there been any hints, or even proper announcements, as to how well KSP2 will be able to utilize several CPU cores? Basically I\u0027m trying to figure out whether my next computer should be built around on Intel or AMD processor.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell if you are in the situation like me where I am using a school designed computer for gaming then I would worry. He did say that the game is built from a complete new way! Kerbal Space Program runs on software that was made back from 2011. A 2020 game should be able to run better because it\u0027s built on a better and different foundation.\n\u003C/p\u003E\n"},{"CreatedByName":"Power9","CreatedById":200937,"CreatedDateTime":"2019-10-22T03:18:53Z","Content":"\n\u003Cp\u003E\nI have no idea whether KSP2 will support multiple threads for physics or not, but I *do* know a bit about multithreading. Physics simulations are one of the most well studied areas for parallel programming, and you can *absolutely* do rigid body simulations in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s a paper that discusses some of the issues and solutions for multi-threaded game physics as researched by a CS grad student back in 2014: \u003Ca href=\u0022http://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic idea for KSP-style rigid body physics is pretty simple: You divide the parts into groups by location, and have a separate thread calculate physics for each group. To handle cross group interactions, you either do the operation in two passes (no conflict motions and conflict detection, followed by conflict resolution) or you allow threads to duplicate a small amount of work recalculating physics for parts belonging to other threads. Either of these strategies scale better than most parallel algorithms for game engines. Maybe they\u0027re 20% more expensive than an optimized single threaded solution, but that still would make them more than 3x as fast running physics on 4 cores.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general, there is *no* CPU bound task in a video game that can\u0027t be parallelized. The reason we don\u0027t see a lot of parallel optimization yet is commercial: it hasn\u0027t been a good deal to spend extra developer time to add functionality which excludes users still on dual core boxes.\n\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2019-10-22T09:45:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692283\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571714333\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIn general, there is *no* CPU bound task in a video game that can\u0027t be parallelized. The reason we don\u0027t see a lot of parallel optimization yet is commercial: it hasn\u0027t been a good deal to spend extra developer time to add functionality which excludes users still on dual core boxes.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is very interesting. I know that the PhysX engine makes use of the GPU. Do you think it\u0027s already parallelised internally? There aren\u0027t really that many cores on the CPU so the potential gain from parallelising there is pretty limited, but if you could offload that to 2000 or more cores on the GPU it could effectively remove the bottleneck altogether.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-22T09:45:43Z\u0022 title=\u002210/22/2019 09:45  AM\u0022 data-short=\u00224 yr\u0022\u003EOctober 22, 2019\u003C/time\u003E by Guest\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2019-10-22T10:21:44Z","Content":"\n\u003Cp\u003E\nDid anyone actually publish KSP profiling data?\n\u003C/p\u003E\n"},{"CreatedByName":"mcwaffles2003","CreatedById":180102,"CreatedDateTime":"2019-10-22T10:38:27Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223691864\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571669731\u0022 data-ipsquote-userid=\u0022167629\u0022 data-ipsquote-username=\u0022Brikoleur\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 hours ago, Brikoleur said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nMy semi-educated guess is that it\u0027ll still be single-core-performance constrained most of the time. But that\u0027s just a guess at this point, based on the assumption that they\u0027re still using Unity\u0027s physics API rather than something they\u0027ve baked themselves.\n\u003C/p\u003E\n\u003Cp\u003E\nThey\u00A0\u003Cem\u003Eare\u003C/em\u003E\u00A0trying to optimise for better scaling with part count however, but by itself that wouldn\u0027t make the program to be better able to take advantage of multiple cores.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nstill praying for GPU accelerated physics here\n\u003C/p\u003E\n"},{"CreatedByName":"Power9","CreatedById":200937,"CreatedDateTime":"2019-10-22T12:56:24Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692434\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571737519\u0022 data-ipsquote-userid=\u0022167629\u0022 data-ipsquote-username=\u0022Brikoleur\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Brikoleur said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is very interesting. I know that the PhysX engine makes use of the GPU. Do you think it\u0027s already parallelised internally? There aren\u0027t really that many cores on the CPU so the potential gain from parallelising there is pretty limited, but if you could offload that to 2000 or more cores on the GPU it could effectively remove the bottleneck altogether.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou can\u0027t effectively use a GPU and not be parallel - so yes, the GPU portion of PhysX runs in parallel. The complication is that you need to be parallel in a specific way. Although every CPU-bound task in modern games can be parallelized, they can\u0027t all be parallelized effectively in the way required by GPUs. Some tasks still require CPU-style code execution.\n\u003C/p\u003E\n\u003Cp\u003E\nFor tasks that run nicely on GPUs the performance benefit of using a GPU is significant, but quite as drastic as it seems. An RTX 2080 Ti gives you a max theoretical performance of ~14 teraflops @ 250W. An AMD Epyc\u00A0 7742 gets you ~3 teraflops @ 225W. That\u0027s a factor of five.\n\u003C/p\u003E\n\u003Cp\u003E\nGPUs are really good at vector operations, when a bunch of tasks are doing exactly the same thing on adjacent data. They\u0027re bad at indirection, for example in object oriented programming, or anything that involves non-adjacent data. They\u0027re also bad at small tasks - if you don\u0027t have a 100,000 items to process, it\u0027s not worth bothering the GPU with it. The algorithms I describe above would probably work fine on a GPU depending on a bunch of details, but your ships in KSP probably don\u0027t have enough parts to be worth bothering the GPU with - with a parallel algorithm a decent CPU will be faster on even thousands of discrete parts.\n\u003C/p\u003E\n\u003Cp\u003E\nWith a CPU-parallel physics engine, KSP2 could definitely get us 4x the performance on 8 core CPUs over KSP1, or 20x the performance for people gaming on top of the line server CPUs. With a GPU physics engine, they might be able to get us 50x the simulation performance of KSP 1 for users who have a high end dedicated physics GPU.\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2019-10-22T13:50:22Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692512\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571748984\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n52 minutes ago, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYou can\u0027t effectively use a GPU and not be parallel - so yes, the GPU portion of PhysX runs in parallel. The complication is that you need to be parallel in a specific way. Although every CPU-bound task in modern games can be parallelized, they can\u0027t all be parallelized effectively in the way required by GPUs. Some tasks still require CPU-style code execution.\n\u003C/p\u003E\n\u003Cp\u003E\nFor tasks that run nicely on GPUs the performance benefit of using a GPU is significant, but quite as drastic as it seems. An RTX 2080 Ti gives you a max theoretical performance of ~14 teraflops @ 250W. An AMD Epyc\u00A0 7742 gets you ~3 teraflops @ 225W. That\u0027s a factor of five.\n\u003C/p\u003E\n\u003Cp\u003E\nGPUs are really good at vector operations, when a bunch of tasks are doing exactly the same thing on adjacent data. They\u0027re bad at indirection, for example in object oriented programming, or anything that involves non-adjacent data. They\u0027re also bad at small tasks - if you don\u0027t have a 100,000 items to process, it\u0027s not worth bothering the GPU with it. The algorithms I describe above would probably work fine on a GPU depending on a bunch of details, but your ships in KSP probably don\u0027t have enough parts to be worth bothering the GPU with - with a parallel algorithm a decent CPU will be faster on even thousands of discrete parts.\n\u003C/p\u003E\n\u003Cp\u003E\nWith a CPU-parallel physics engine, KSP2 could definitely get us 4x the performance on 8 core CPUs over KSP1, or 20x the performance for people gaming on top of the line server CPUs. With a GPU physics engine, they might be able to get us 50x the simulation performance of KSP 1 for users who have a high end dedicated physics GPU.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAny vendor agnostic solutions? GPU PhysX requires support at the driver level which even though the source has been opened up AMD hasn\u0027t made any effort to support it due to the lack of GPU PhysX in games.\n\u003C/p\u003E\n"},{"CreatedByName":"R-T-B","CreatedById":200868,"CreatedDateTime":"2019-10-22T15:50:35Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692283\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571714333\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 hours ago, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI have no idea whether KSP2 will support multiple threads for physics or not, but I *do* know a bit about multithreading. Physics simulations are one of the most well studied areas for parallel programming, and you can *absolutely* do rigid body simulations in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s a paper that discusses some of the issues and solutions for multi-threaded game physics as researched by a CS grad student back in 2014: \u003Ca href=\u0022http://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic idea for KSP-style rigid body physics is pretty simple: You divide the parts into groups by location, and have a separate thread calculate physics for each group. To handle cross group interactions, you either do the operation in two passes (no conflict motions and conflict detection, followed by conflict resolution) or you allow threads to duplicate a small amount of work recalculating physics for parts belonging to other threads. Either of these strategies scale better than most parallel algorithms for game engines. Maybe they\u0027re 20% more expensive than an optimized single threaded solution, but that still would make them more than 3x as fast running physics on 4 cores.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general, there is *no* CPU bound task in a video game that can\u0027t be parallelized. The reason we don\u0027t see a lot of parallel optimization yet is commercial: it hasn\u0027t been a good deal to spend extra developer time to add functionality which excludes users still on dual core boxes.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou\u0027ve provided some good reading and examples.\u00A0 Have a like. \u003Cspan\u003E\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"mattinoz","CreatedById":118580,"CreatedDateTime":"2019-10-23T03:19:01Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692283\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571714333\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n23 hours ago, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI have no idea whether KSP2 will support multiple threads for physics or not, but I *do* know a bit about multithreading. Physics simulations are one of the most well studied areas for parallel programming, and you can *absolutely* do rigid body simulations in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s a paper that discusses some of the issues and solutions for multi-threaded game physics as researched by a CS grad student back in 2014: \u003Ca href=\u0022http://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic idea for KSP-style rigid body physics is pretty simple: You divide the parts into groups by location, and have a separate thread calculate physics for each group. To handle cross group interactions, you either do the operation in two passes (no conflict motions and conflict detection, followed by conflict resolution) or you allow threads to duplicate a small amount of work recalculating physics for parts belonging to other threads. Either of these strategies scale better than most parallel algorithms for game engines. Maybe they\u0027re 20% more expensive than an optimized single threaded solution, but that still would make them more than 3x as fast running physics on 4 cores.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general, there is *no* CPU bound task in a video game that can\u0027t be parallelized. The reason we don\u0027t see a lot of parallel optimization yet is commercial: it hasn\u0027t been a good deal to spend extra developer time to add functionality which excludes users still on dual core boxes.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe other angle I\u0027ve seen on the same problem is to go the other way. Map the bodies to particles and deal with everything as particles.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch29.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch29.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nSorry it\u0027s nVidia dev article but it has the best pictures (or this one if you like reading drier \u003Ca href=\u0022https://www.hindawi.com/journals/ijcgt/2014/485019/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.hindawi.com/journals/ijcgt/2014/485019/)\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWould seem to lend itself to what we know of KSP2 so far. In that particles lend themselves to unique scary snowflake explosions, better smoke and visuals, rings, better scatter while allowing GPU processing and a higher degree of multi-threading. Would also seem to lend itself to future advancements on the games physics.\n\u003C/p\u003E\n"},{"CreatedByName":"runner78","CreatedById":168980,"CreatedDateTime":"2019-10-23T09:38:35Z","Content":"\n\u003Cp\u003E\nIf they us Unity\u0027s C# Job system, example for orbit calculations, then you\u00A0benefit from\u00A0many CPU cores.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-23T09:38:43Z\u0022 title=\u002210/23/2019 09:38  AM\u0022 data-short=\u00224 yr\u0022\u003EOctober 23, 2019\u003C/time\u003E by runner78\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Arugela","CreatedById":133381,"CreatedDateTime":"2019-10-24T10:57:46Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692283\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571714333\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 10/21/2019 at 11:18 PM, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI have no idea whether KSP2 will support multiple threads for physics or not, but I *do* know a bit about multithreading. Physics simulations are one of the most well studied areas for parallel programming, and you can *absolutely* do rigid body simulations in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s a paper that discusses some of the issues and solutions for multi-threaded game physics as researched by a CS grad student back in 2014: \u003Ca href=\u0022http://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://scholarworks.sjsu.edu/cgi/viewcontent.cgi?article=1341\u0026amp;context=etd_projects\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe basic idea for KSP-style rigid body physics is pretty simple: You divide the parts into groups by location, and have a separate thread calculate physics for each group. To handle cross group interactions, you either do the operation in two passes (no conflict motions and conflict detection, followed by conflict resolution) or you allow threads to duplicate a small amount of work recalculating physics for parts belonging to other threads. Either of these strategies scale better than most parallel algorithms for game engines. Maybe they\u0027re 20% more expensive than an optimized single threaded solution, but that still would make them more than 3x as fast running physics on 4 cores.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general, there is *no* CPU bound task in a video game that can\u0027t be parallelized. The reason we don\u0027t see a lot of parallel optimization yet is commercial: it hasn\u0027t been a good deal to spend extra developer time to add functionality which excludes users still on dual core boxes.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhy don\u0027t they just run duel implementations?!\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223692512\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571748984\u0022 data-ipsquote-userid=\u0022200937\u0022 data-ipsquote-username=\u0022Power9\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 10/22/2019 at 8:56 AM, Power9 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYou can\u0027t effectively use a GPU and not be parallel - so yes, the GPU portion of PhysX runs in parallel. The complication is that you need to be parallel in a specific way. Although every CPU-bound task in modern games can be parallelized, they can\u0027t all be parallelized effectively in the way required by GPUs. Some tasks still require CPU-style code execution.\n\u003C/p\u003E\n\u003Cp\u003E\nFor tasks that run nicely on GPUs the performance benefit of using a GPU is significant, but quite as drastic as it seems. An RTX 2080 Ti gives you a max theoretical performance of ~14 teraflops @ 250W. An AMD Epyc\u00A0 7742 gets you ~3 teraflops @ 225W. That\u0027s a factor of five.\n\u003C/p\u003E\n\u003Cp\u003E\nGPUs are really good at vector operations, when a bunch of tasks are doing exactly the same thing on adjacent data. They\u0027re bad at indirection, for example in object oriented programming, or anything that involves non-adjacent data. They\u0027re also bad at small tasks - if you don\u0027t have a 100,000 items to process, it\u0027s not worth bothering the GPU with it. The algorithms I describe above would probably work fine on a GPU depending on a bunch of details, but your ships in KSP probably don\u0027t have enough parts to be worth bothering the GPU with - with a parallel algorithm a decent CPU will be faster on even thousands of discrete parts.\n\u003C/p\u003E\n\u003Cp\u003E\nWith a CPU-parallel physics engine, KSP2 could definitely get us 4x the performance on 8 core CPUs over KSP1, or 20x the performance for people gaming on top of the line server CPUs. With a GPU physics engine, they might be able to get us 50x the simulation performance of KSP 1 for users who have a high end dedicated physics GPU.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou realize if they implemented that that would change. We can get that many parts on a ship easily. I could make a ship with 10\u0027s of thousand with copy past in a manner of seconds to minutes with lag and stutter gone.\n\u003C/p\u003E\n\u003Cp\u003E\nI was going to make a quick 144,000 tons cargo to orbit rocket but the parts got to high to fast. It wasn\u0027t even that many parts. But it can be scaled fast. Especially if they remove the limits of the \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E and \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E. It\u0027s sad this game retrogressed. That permanently damages it\u0027s momentum. Especially something that should have been mainstay decades ago.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-10-24T11:05:49Z\u0022 title=\u002210/24/2019 11:05  AM\u0022 data-short=\u00224 yr\u0022\u003EOctober 24, 2019\u003C/time\u003E by Arugela\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"steuben","CreatedById":77368,"CreatedDateTime":"2019-10-24T15:52:31Z","Content":"\n\u003Cp\u003E\nA couple of detail questions...\n\u003C/p\u003E\n\u003Cp\u003E\nHow long a vector can a GPU handle? 3 elements, or an arbitrary number definable during runtime?\n\u003C/p\u003E\n\u003Cp\u003E\nHow many pieces of info does KSP work with on a part during calculation, there\u0027s position relative to the root(3), linear speed (3), linear acceleration(3),\u00A0rotation(3), rotation speed(3), rotation acceleration(3), mass, force applied . Any others?\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2019-10-24T16:42:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223693986\u0022 data-ipsquote-contentid=\u0022189135\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221571932351\u0022 data-ipsquote-userid=\u002277368\u0022 data-ipsquote-username=\u0022steuben\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n48 minutes ago, steuben said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nA couple of detail questions...\n\u003C/p\u003E\n\u003Cp\u003E\nHow long a vector can a GPU handle? 3 elements, or an arbitrary number definable during runtime?\n\u003C/p\u003E\n\u003Cp\u003E\nHow many pieces of info does KSP work with on a part during calculation, there\u0027s position relative to the root(3), linear speed (3), linear acceleration(3),\u00A0rotation(3), rotation speed(3), rotation acceleration(3), mass, force applied . Any others?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe vector length would mainly be constrained by the GPU architecture; though i\u0027m sure you could find the most common implementation and use that.\u00A0\n\u003C/p\u003E\n"}]}