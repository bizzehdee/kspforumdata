{"TopicId":99825,"ForumId":69,"TopicTitle":"KSP fails to launch from an overlayfs mount","CreatedByName":"kafuka","CreatedById":116911,"CreatedDateTime":"2015-02-16T15:00:35Z","PageNum":1,"Articles":[{"CreatedByName":"kafuka","CreatedById":116911,"CreatedDateTime":"2015-02-16T15:00:35Z","Content":"\n\u003Cp\u003EI have a working (writeable) \u003Ca href=\u0022https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt\u0022 rel=\u0022external nofollow\u0022\u003Eoverlayfs\u003C/a\u003E setup and a clean KSP installation mounted as lower directory. The upper directory only contains an empty GameData dir and will receive all changes that are written to the merged dir. When I launch KSP I get the following error:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E% ./KSP.x86_64 Set current directory to /var/games/ksp/merged\u003Cbr\u003EFound path: /var/games/ksp/merged/KSP.x86_64\u003Cbr\u003EThere is no data folder\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhich leads me to believe that KSP relies on something that overlayfs doesn\u0027t provide and as such ignores the upper overlay dir. From the overlayfs documentation:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[...] An overlay-filesystem tries to present afilesystem\u003Cbr\u003Ewhich is the result over overlaying one filesystem on top\u003Cbr\u003Eof the other.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003EThe result will inevitably fail to look exactly like a normal\u003Cbr\u003Efilesystem for various technical reasons.  The expectation is that\u003Cbr\u003Emany use cases will be able to ignore these differences.\u003Cbr\u003E\u003Cbr\u003EThis approach is \u0027hybrid\u0027 because the objects that appear in the\u003Cbr\u003Efilesystem do not all appear to belong to that filesystem.  In many\u003Cbr\u003Ecases an object accessed in the union will be indistinguishable\u003Cbr\u003Efrom accessing the corresponding object from the original filesystem.\u003Cbr\u003EThis is most obvious from the \u0027st_dev\u0027 field returned by stat(2).\u003Cbr\u003E\u003Cbr\u003EWhile directories will report an st_dev from the overlay-filesystem,\u003Cbr\u003Eall non-directory objects will report an st_dev from the lower or\u003Cbr\u003Eupper filesystem that is providing the object.  Similarly st_ino will\u003Cbr\u003Eonly be unique when combined with st_dev, and both of these can change\u003Cbr\u003Eover the lifetime of a non-directory object.  Many applications and\u003Cbr\u003Etools ignore these values and will not be affected.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI am posting here with the hope of getting this setup working as overlays are really valuable in unifying content from different sources (clean ksp from steam \u002B mods with CKAN \u002B customizations to mods) while keeping them completely separate. Overlayfs has been recently added to the mainline linux kernel and with 3.19 it will be possible to overlay multiple directories over each other for even more flexibility.\u003C/p\u003E\n"}]}