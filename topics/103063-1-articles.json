{"TopicId":103063,"ForumId":18,"TopicTitle":"[Programming] C\u002B\u002B - looking for a \u0026quot;cin \u0026gt;\u0026gt; ...\u0026quot; alternative","CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T20:17:11Z","PageNum":1,"Articles":[{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T20:17:11Z","Content":"\n\u003Cp\u003EHi guys, probably this is the wrong forum, sorry, I didn\u0027t know where to post it otherwise. :|\u003C/p\u003E\u003Cp\u003ESo, I am trying to make a little console game with C\u002B\u002B, I have Windows 7 installed on my PC. To make the game work, the player needs to press a key (Let\u0027s say the key to press is \u0027W\u0027). When pressing that key, the speed increases by one. This would work (more or less) with the following code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ecin \u0026gt;\u0026gt; Input;\u003Cbr\u003Eif (Input == W)\u003Cbr\u003E{\u003Cbr\u003E    Speed = Speed \u002B 1;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou just press W on your keyboard and confirm with enter. But I want it so that if I press the \u0027W\u0027 key the speed increases automatically by one, without confirming. \u003C/p\u003E\u003Cp\u003EIsn\u0027t there something like \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOn \u0027 1 \u0027\u003Cbr\u003E{\u003Cbr\u003E     Speed = Speed \u002B1;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E? \u003C/p\u003E\u003Cp\u003EIf so, please let me know! I\u0027d really appreciate any help! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"TheCanadianVendingMachine","CreatedById":59684,"CreatedDateTime":"2015-03-31T20:20:13Z","Content":"\n\u003Cp\u003EYou would need to check for a keyboard input, and if there isn\u0027t one don\u0027t pause the program. I don\u0027t believe there\u0027s any way to do this with base C\u002B\u002B, so you may have to make a function to do so.\u003C/p\u003E\u003Cp\u003EExample:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif (keyboard.input())\u003Cbr\u003E  {\u003Cbr\u003E     if (keyboard.key == \u0027W\u0027)\u003Cbr\u003E         move.forward()\u003Cbr\u003E  }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, a way to get any key pressed without calling std::cin would get _getch()\u003C/p\u003E\u003Cp\u003EYou would implement it as such:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E#include \u0026lt;conio.h\u0026gt;\u003Cbr\u003E#include \u0026lt;iostream\u0026gt;\u003Cbr\u003E\u003Cbr\u003Eint main() {\u003Cbr\u003Ewhile (1)\u003Cbr\u003E{\u003Cbr\u003E  int c;\u003Cbr\u003E  std::cout \u0026lt;\u0026lt; \u0022Press Key: \u0022;\u003Cbr\u003E  c = _getch();\u003Cbr\u003E\u003Cbr\u003E  if (c)\u003Cbr\u003E  {\u003Cbr\u003E     std::cout \u0026lt;\u0026lt; \u0022key pressed: \u0022 \u0026lt;\u0026lt; c \u0026lt;\u0026lt; std::endl;\u003Cbr\u003E  }\u003Cbr\u003E  else\u003Cbr\u003E    std::cout \u0026lt;\u0026lt; \u0022An error has occured\u0022;\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EThis, however, will still pause the program. But it is a step forward in order to get what you want.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThis gets the current key press, but still pauses the program. I believe it\u0027s what you want\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-31T20:32:18Z\u0022 title=\u002203/31/2015 08:32  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 31, 2015\u003C/time\u003E by TheCanadianVendingMachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Master Tao","CreatedById":110410,"CreatedDateTime":"2015-03-31T21:04:11Z","Content":"\n\u003Cp\u003E\u0026lt;moderation\u0026gt;Moved to The Space Lounge, where things other than KSP are discussed.\u0026lt;/moderation\u0026gt;\u003C/p\u003E\n"},{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-03-31T21:13:35Z","Content":"\n\u003Cp\u003EThanks TheCanadianVendingMachine, that all looks promising! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I\u0027ll try it out and report how it worked.\u003C/p\u003E\n"},{"CreatedByName":"Kartoffelkuchen","CreatedById":108501,"CreatedDateTime":"2015-04-01T12:06:35Z","Content":"\n\u003Cp\u003EHey, so that with the keyboard input function didn\u0027t work, and the _getch function worked, at least more or less, but it doesn\u0027t mind which key I press, if I press a it moves on and if I press c or so it also moves on, that doesn\u0027t make any difference. \u003C/p\u003E\u003Cp\u003EAlso, I probably didn\u0027t say all what I would like the program to be. So here\u0027s the full source code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E#include \u0026lt;iostream\u0026gt;\u003Cbr\u003Eusing namespace std;\u003Cbr\u003E\u003Cbr\u003Eint main ()\u003Cbr\u003E{\u003Cbr\u003E    cout \u0026lt;\u0026lt; \u0022\\t\\t\\t\\t\\t\u0022 \u0026lt;\u0026lt; \u0022Airplane Landing\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E    cout \u0026lt;\u0026lt; \u0022\\n\\n\\n\\t\u0022 \u0026lt;\u0026lt; \u0022   Task: Land the Airplane on the runway.\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E\u003Cbr\u003E    _sleep(5000);\u003Cbr\u003E    system(\u0022cls\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    // Start of the *real* program\u003Cbr\u003E    int Level = 1;\u003Cbr\u003E\u003Cbr\u003E    // Level 1\u003Cbr\u003E    if (Level == 1)\u003Cbr\u003E    {\u003Cbr\u003E        cout \u0026lt;\u0026lt; \u0022\\t\\t\\t\\t\\t\u0022 \u0026lt;\u0026lt; \u0022LEVEL 1\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E\u003Cbr\u003E        // Startparameter\u003Cbr\u003E\u003Cbr\u003E        double Altitude = 2000;                    // in Meter (m)\u003Cbr\u003E        float Speed = 82;                        // in Meter pro Sekunde (m/s)\u003Cbr\u003E        float Sinkrate = -5;                    // Sinkrate in Meter pro Sekunde (m/s)\u003Cbr\u003E        float Throttle = 0;                    // In Prozent (1 = Max. Schub | 0 = kein Schub)\u003Cbr\u003E        int Gear = 1;                            // Zwei M\u00C3\u0192\u00C2\u00B6glichkeiten: 1 (Extended) | 0 (Retracted)\u003Cbr\u003E        double DistancetoAirport = 8000;        // Entfernung zum Flughafen in Metern (m)\u003Cbr\u003E        double Drag = 1;                        // Luftwiederstand\u003Cbr\u003E        int Speedbrake = 1;                        // Luftbremse (0 = deaktiviert | 1 = aktiviert\u003Cbr\u003E\u003Cbr\u003E        // Anzeigen der Startparameter\u003Cbr\u003E\u003Cbr\u003E        cout \u0026lt;\u0026lt; \u0022Altitude: \u0022 \u0026lt;\u0026lt; Altitude \u0026lt;\u0026lt; \u0022m\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        cout \u0026lt;\u0026lt; \u0022Speed: \u0022 \u0026lt;\u0026lt; Speed \u0026lt;\u0026lt; \u0022m/s\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        cout \u0026lt;\u0026lt; \u0022Sinkrate: \u0022 \u0026lt;\u0026lt; Sinkrate \u0026lt;\u0026lt; \u0022m/s\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        cout \u0026lt;\u0026lt; \u0022Throttle: \u0022 \u0026lt;\u0026lt; Throttle \u0026lt;\u0026lt; endl;\u003Cbr\u003E        if (Gear == 0)\u003Cbr\u003E        {\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Gear: \u0022 \u0026lt;\u0026lt; \u0022Retracted\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Gear: \u0022 \u0026lt;\u0026lt; \u0022Extended\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (Speedbrake == 0)\u003Cbr\u003E        {\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Speedbrake: \u0022 \u0026lt;\u0026lt; \u0022Deactivated\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Speedbrake: \u0022 \u0026lt;\u0026lt; \u0022Activated\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        _sleep(5000);\u003Cbr\u003E\u003Cbr\u003E        // Jetzt geht\u0027s los... \u003Cbr\u003E\u003Cbr\u003E        int Levelcomplete = 0; // 0 = Level nicht geschafft, 1 = Level geschafft\u003Cbr\u003E\u003Cbr\u003E        while (DistancetoAirport \u0026gt; 0)\u003Cbr\u003E        {\u003Cbr\u003E            system(\u0022cls\u0022);\u003Cbr\u003E\u003Cbr\u003E            // Anzeigen der Flugdaten\u003Cbr\u003E\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Altitude: \u0022 \u0026lt;\u0026lt; Altitude \u0026lt;\u0026lt; \u0022m\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Speed: \u0022 \u0026lt;\u0026lt; Speed \u0026lt;\u0026lt; \u0022m/s\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Sinkrate: \u0022 \u0026lt;\u0026lt; Sinkrate \u0026lt;\u0026lt; \u0022m/s\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E            cout \u0026lt;\u0026lt; \u0022Throttle: \u0022 \u0026lt;\u0026lt; Throttle \u0026lt;\u0026lt; endl;\u003Cbr\u003E            if (Gear == 0) { cout \u0026lt;\u0026lt; \u0022Gear: \u0022 \u0026lt;\u0026lt; \u0022Retracted\u0022 \u0026lt;\u0026lt; endl;}\u003Cbr\u003E            else { cout \u0026lt;\u0026lt; \u0022Gear: \u0022 \u0026lt;\u0026lt; \u0022Extended\u0022 \u0026lt;\u0026lt; endl;}\u003Cbr\u003E            if (Speedbrake == 0) { cout \u0026lt;\u0026lt; \u0022Speedbrake: \u0022 \u0026lt;\u0026lt; \u0022Deactivated\u0022 \u0026lt;\u0026lt; endl;}\u003Cbr\u003E            else { cout \u0026lt;\u0026lt; \u0022Speedbrake: \u0022 \u0026lt;\u0026lt; \u0022Activated\u0022 \u0026lt;\u0026lt; endl;}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            // Geschwindigkeit\u003Cbr\u003E            Speed = Speed \u002B (Throttle*2.5);    \u003Cbr\u003E            Speed = Speed - (Gear*0.25);\u003Cbr\u003E            Speed = Speed - (Sinkrate/25);\u003Cbr\u003E            Speed = Speed - (Drag/2);\u003Cbr\u003E            Speed = Speed - (Speedbrake);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            // Geschwindigkeit zu niedrig\u003Cbr\u003E\u003Cbr\u003E            if (Speed \u0026lt; 60)\u003Cbr\u003E            {\u003Cbr\u003E                cout \u0026lt;\u0026lt; \u0022\\a\\n\\n\\n\\t\\t\u0022 \u0026lt;\u0026lt; \u0022WARNUNG: GESCHWINDIGKEIT ZU NIEDRIG\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E                if (Speed \u0026lt; 50)\u003Cbr\u003E                { \u003Cbr\u003E                    cout \u0026lt;\u0026lt; \u0022\\a\\a\\\\t\u0022 \u0026lt;\u0026lt; \u0022MELDUNG: SCHUB WURDE AUTOMATISCH AUF VOLLE LEISTUNG GESTELLT\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E                    Throttle = 1;\u003Cbr\u003E                    Speedbrake = 0;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            // Geschwindigkeit zu hoch\u003Cbr\u003E\u003Cbr\u003E            if (Speed \u0026gt; 120)\u003Cbr\u003E            {\u003Cbr\u003E                cout \u0026lt;\u0026lt; \u0022\\a\\n\\n\\n\\t\\t\u0022 \u0026lt;\u0026lt; \u0022WARNUNG: GESCHWINDIGKEIT ZU HOCH\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E                if (Speed \u0026gt; 140)\u003Cbr\u003E                { \u003Cbr\u003E                    cout \u0026lt;\u0026lt; \u0022\\a\\a\\\\t\u0022 \u0026lt;\u0026lt; \u0022MELDUNG: SCHUB WURDE AUTOMATISCH AUF LEERLAUF GESTELLT\u0022 \u0026lt;\u0026lt; endl;\u003Cbr\u003E                    Throttle = 0;\u003Cbr\u003E                    Speedbrake = 1;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            // Simulationsgeschwindigkeit\u003Cbr\u003E            _sleep(500);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYeah, sorry, there are a few german comments in it, but I hope you understand the code anyway. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E So the program is a little console game. You must land an imagined airplane on the runway. You have a few elements to control the airplane, and you can see the speed, altitutde, gear state, speedbrakes and sinkrate. I\u0027m currently just working on the speed. Everything which is in the \u0027while\u0022-loop repeats. This is the real game. Inside this loop, there are the following elements:\u003C/p\u003E\u003Cp\u003EThe flight data, like altitude, speed, gear state (extended/retracted), speedbrakes and throttle\u003C/p\u003E\u003Cp\u003EUnderneath, I calculate the speed, with gear, speedbrakes and throttle in mind\u003C/p\u003E\u003Cp\u003EThen there are two if elements, these lower or rise the throttle if you are too slow or too fast, something like the real \u0022auto-throttle\u0022 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe last thing is the simulation speed. The _sleep(500) command says how long the program waits before the loop starts again\u003C/p\u003E\u003Cp\u003EYou can configure the configuration of the airplane at the start of \u0022Level 1\u0022, where all the variables are created and defined. \u003C/p\u003E\u003Cp\u003EMy problem is now: You must be of course able to control the ships throttle. So if I just add a cin \u0026gt;\u0026gt; command, the loop doesn\u0027t work at all. And you\u0027d have to confirm with enter key. So I am looking for a solution allowing me to make input with the keyboard, while the loop is running. \u003C/p\u003E\u003Cp\u003ESorry if I didn\u0027t clarify this, I hope it is clear now. Is there something like this? It\u0027s funny to make a small program like this, but it\u0027s pretty much useless if you can\u0027t interact with it, hehe:D\u003C/p\u003E\n"},{"CreatedByName":"TheCanadianVendingMachine","CreatedById":59684,"CreatedDateTime":"2015-04-01T19:02:37Z","Content":"\n\u003Cp\u003EQuick question - what compiler are you using, and what C\u002B\u002B version?\u003C/p\u003E\u003Cp\u003EAnd to your question of where you don\u0027t want the loop to stop, that\u0027s a harder problem. Because in order to do that, you need to have an If statement that checks if there\u0027s input from the keyboard. And if there isn\u0027t, don\u0027t pause the loop.\u003C/p\u003E\u003Cp\u003EThere isn\u0027t anyway to check this in the base C\u002B\u002B library. You would be better off downloading another library that does this for you, such as \u003Ca href=\u0022http://www.sfml-dev.org/\u0022 rel=\u0022external nofollow\u0022\u003ESFML,\u003C/a\u003E or \u003Ca href=\u0022https://www.libsdl.org/\u0022 rel=\u0022external nofollow\u0022\u003ESDL\u003C/a\u003E and use their input function.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-01T19:15:06Z\u0022 title=\u002204/01/2015 07:15  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 1, 2015\u003C/time\u003E by TheCanadianVendingMachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2015-04-01T22:26:26Z","Content":"\n\u003Cp\u003Eyou can always use the cstrings library. though i perfer doing all my string manip the c\u002B\u002B way. its great for writing file parsers and the like. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Master Tao\u0022 data-cite=\u0022Master Tao\u0022\u003E\u003Cdiv\u003E\u0026lt;moderation\u0026gt;Moved to The Space Lounge, where things other than KSP are discussed.\u0026lt;/moderation\u0026gt;\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eactually this falls under the tag [Computer Science] and would be better off in the science labs. might get more programmers eyes on it.\u003C/p\u003E\n"},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2015-04-01T23:10:00Z","Content":"\n\u003Cp\u003EErr... he\u0027s just talking about reading the input stream, isn\u0027t he?\u003C/p\u003E\u003Cp\u003EI mean, yes, you would have to program a fair bit, but...\u003C/p\u003E\u003Cp\u003E*goes to read up on reading the stream*\u003C/p\u003E\u003Cp\u003EOkay, I\u0027ve come to believe this \u003Cem\u003Eis\u003C/em\u003E compiler specific behavior; I recall dealing with \u0022garbage\u0022 on the input stream in the past (which means that functions like std::cin.get() could read a character and exit. But g\u002B\u002B seems to just dump keyboard info into the output buffer (I guess expecting people to clear the buffer was too much effort)... and also treat get like \u0022getline\u0022, expecting a carriage return for who knows what reason.\u003C/p\u003E\u003Cp\u003EIn theory, what should have happened is you could check if the stream was std::cin.eof which would indicate there was nothing on the stream, or if there was read a single character (which, given an input is available, wouldn\u0027t pause the program)\u003C/p\u003E\u003Cp\u003E*Technically speaking, the console / terminal that you\u0027re working in has a fully operational keyboard buffer; istream is suppose to read this. You can directly read it using Microsoft Windows Libraries ( \u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/windows/desktop/ms683175(v=vs.85).aspx\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://msdn.microsoft.com/en-us/library/windows/desktop/ms683175(v=vs.85).aspx\u003C/a\u003E ) but you really shouldn\u0027t need to go that far JUST to read the exact same buffer that istream is interfacing with.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-02T00:42:57Z\u0022 title=\u002204/02/2015 12:42  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 2, 2015\u003C/time\u003E by Fel\u003C/strong\u003E\n\u003C/span\u003E\n"}]}