{"TopicId":121888,"ForumId":44,"TopicTitle":"C, C\u002B\u002B, C# Programming - what is the sense in this","CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-28T14:21:11Z","PageNum":6,"Articles":[{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-16T00:21:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EBecause \u0027A\u0027 isn\u0027t a string. It\u0027s a character. \u0022A\u0022 is a string, which contains two characters. \u0027A\u0027 and \u0027\\0\u0027. The trailing \u0027\\0\u0027, which happens to be ASCII 0, is there to indicate that the string has ended.\u003Cp\u003EHere\u0027s a demo for you that might help.\u003C/p\u003E\u003Cp\u003ENote that you should never, ever test passwords like that, and not just because one could buffer-overflow this code. But I don\u0027t think you\u0027re worried about security in your code. This approach is fine if you are just parsing a file, or something. And you can use sscanf and fscanf in exactly the same way.\u003C/p\u003E\u003Cp\u003EThere are also several variations of that strcmp functions, including ones that ignore case differences and ones that only compare first n characters. Look up the docs. Keep in mind that strcmp will return false if strings are the same. It\u0027s counter-intuitive but there are some reasons for it that probably aren\u0027t relevant to what you are doing.\u003C/p\u003E\u003Cp\u003EP.S. I\u0027m using Hungarian Notation here. The \u0022pc\u0022 on variables stands for \u0022Pointer to Char\u0022. Technically, char[] and char* aren\u0027t the same thing, but in this case, they serve the same purpose, so both are labeled with \u0022pc\u0022.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is what actually worked:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void Main (string[] args)\u003Cbr\u003E  {\u003C/pre\u003E\u003Cp\u003E[INDENT] string rawSequence = \u0022ACTG\u0022; \u003Cbr\u003E char[] Nt = rawSequence.ToCharArray(); \u003Cbr\u003E int a = 64, lenRS = rawSequence.Length; \u003Cbr\u003E byte[] encNt = new byte[lenRS]; //WinDef.h\u003Cbr\u003E for (a = 0; a \u0026lt; lenRS; a\u002B\u002B) {[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E[INDENT=2] if([B]Nt[a] == 65[/B]) {encNt[a] = 0; Console.Write (\u0022 {0}\u0022, encNt [0]); continue;}; \u003Cbr\u003E if(Nt[a] == 67) {encNt[a] = 1; Console.Write (\u0022 {0}\u0022, encNt [1]); continue;}; \u003Cbr\u003E if(Nt[a] == 71) {encNt[a] = 2; Console.Write (\u0022 {0}\u0022, encNt [2]); continue;};\u003Cbr\u003E if(Nt[a] == 84) {encNt[a] = 3; Console.Write (\u0022 {0}\u0022, encNt [3]); continue;};\u003Cbr\u003E encNt [a] = 255;\u003Cbr\u003E }\u003Cbr\u003E[/INDENT]\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003E[INDENT] Console.WriteLine (rawSequence); \u003Cbr\u003E[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E }\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ebolded was the problem statement. I really thought I was going to end up doing a conversion nested into an if statement.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-16T03:10:59Z\u0022 title=\u002210/16/2015 03:10  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 16, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003Cbr\u003ERemoved repetitive code snippet\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-10-16T01:00:55Z","Content":"\n\u003Cp\u003EOh, you meant comparing individual characters IN the string. Sure. That works. Like I said, C-style string it\u0027s just an array of chars. I think, part of your problem is the fact that you\u0027re using a \u0022string\u0022 type at all. There is absolutely no reason to bother with the overhead that involves.\u003C/p\u003E\u003Cp\u003EAlso, keep in mind that printing stuff to console isn\u0027t cheap, time-wise. It\u0027s good for debugging, but don\u0027t forget to disable it when you\u0027re actually trying to process billions of symbols.\u003C/p\u003E\u003Cp\u003EFinally, you can actually use \u0027A\u0027 in place of 65. Exactly like that, with single quotes. Means exactly the same thing, but would make the code a bit easier to read.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-16T01:58:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EOh, you meant comparing individual characters IN the string. Sure. That works. Like I said, C-style string it\u0027s just an array of chars. I think, part of your problem is the fact that you\u0027re using a \u0022string\u0022 type at all. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo joke, but this stuff comes in as a text files with the occasional or frequent delimiter. In a way the ASCII stuff is good for confirmation, in a way its bad because I cannot go directly into processing, and every string that needs high level processing will have to be processed from string into quads. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThere is absolutely no reason to bother with the overhead that involves.\u003C/div\u003E\u003C/blockquote\u003E You could say the same thing about chickens with regard to eggs. \u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAlso, keep in mind that printing stuff to console isn\u0027t cheap, time-wise. It\u0027s good for debugging, but don\u0027t forget to disable it when you\u0027re actually trying to process billions of symbols.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E Its one of the most expensive things you can do in VB, the printing is not to bad, the line feeding is like temporal black hole. With most modern video cards the character writing is instanteous, but when you scroll in a child window most of the screen needs to be reformulated. I used to cramp the output into lines using For L1 = 1 to Whatever: Debug.Print VarX;\u0022 \u0022;: IF L1 MOD 100 = 0 Then Debug.Print: Next L1 \u0027100 bits of output with spaces on a line\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFinally, you can actually use \u0027A\u0027 in place of 65. Exactly like that, with single quotes. Means exactly the same thing, but would make the code a bit easier to read.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAfter I read your previous message, I looked \u0027 \u0027 versus \u0022 \u0022 up , better yet I can define constants makes the code look even better.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-10-16T02:20:35Z","Content":"\n\u003Cp\u003ESure, constants work.\u003C/p\u003E\u003Cp\u003EAs for reading text, you can read it directly into a char array from file using the fread() command. You will have to do your own line/delimiter parsing, though, unless new lines and white spaces are the only delimiters in the file, in which case, fscanf is your friend.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EFILE f;\u003Cbr\u003Echar pcBuffer[1024]; // This is fine, so long as you never expect to read more than 1023 characters at a time.\u003Cbr\u003E\u003Cbr\u003Ef = fopen(\u0022data.txt\u0022, \u0022rb\u0022); // Or whatever your file is called.\u003Cbr\u003Ewhile(fscanf(\u0022%s\u0022, pcBuffer))\u003Cbr\u003E{\u003Cbr\u003E\t// Process pcBuffer\u003Cbr\u003E}\u003Cbr\u003Efclose(f);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-16T03:09:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ESure, constants work.\u003Cp\u003EAs for reading text, you can read it directly into a char array from file using the fread() command. You will have to do your own line/delimiter parsing, though, unless new lines and white spaces are the only delimiters in the file, in which case, fscanf is your friend.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn the old days 64k was the limit on a text file, now the sky is the limit, though I wonder what the string limit is for C\u002B\u002B, cause I need to pack in a 250M. Thanks for the snippet.\u003C/p\u003E\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-10-16T03:59:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EIn the old days 64k was the limit on a text file, now the sky is the limit, though I wonder what the string limit is for C\u002B\u002B, cause I need to pack in a 250M. Thanks for the snippet.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, for std::string, that\u0027s an easy question to answer: \u003Ca href=\u0022http://www.cplusplus.com/reference/string/string/max_size/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.cplusplus.com/reference/string/string/max_size/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFor a plain-old char array it\u0027s system dependent. Statically allocated char array will run into stack size limits really fast (the stack\u0027s not very big; although you can change how much memory is allocated to it), dynamically allocated with new...well...again, system dependent. The language itself puts no explicit constraints on the permitted sizes.\u003C/p\u003E\n"},{"CreatedByName":"glacierre","CreatedById":63209,"CreatedDateTime":"2015-10-16T12:51:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EOh, you meant comparing individual characters IN the string. Sure. That works. Like I said, C-style string it\u0027s just an array of chars. I think, part of your problem is the fact that you\u0027re using a \u0022string\u0022 type at all. There is absolutely no reason to bother with the overhead that involves.\u003Cp\u003EAlso, keep in mind that printing stuff to console isn\u0027t cheap, time-wise. It\u0027s good for debugging, but don\u0027t forget to disable it when you\u0027re actually trying to process billions of symbols.\u003C/p\u003E\u003Cp\u003EFinally, you can actually use \u0027A\u0027 in place of 65. Exactly like that, with single quotes. Means exactly the same thing, but would make the code a bit easier to read.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell if you are going to write it 20 times just #define A 65 and skip the quotation marks, even cleaner.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-16T14:17:08Z","Content":"\n\u003Cp\u003EHere\u0027s a challenge. \u003C/p\u003E\u003Cp\u003EWhat if you want flip the order of bits in a register and also not them\u003C/p\u003E\u003Cp\u003ESo for instance if you have \u003C/p\u003E\u003Cp\u003E10110001 -- how to make it go to ----\u0026gt; 01110010\u003C/p\u003E\u003Cp\u003EI have a rough idea how i might do it in assembly, how to do it slowly in VB, no idea how to do it efficiently in C.\u003C/p\u003E\u003Cp\u003EForgot to add its a 64 bit unsigned integer.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-16T14:26:15Z\u0022 title=\u002210/16/2015 02:26  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 16, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"glacierre","CreatedById":63209,"CreatedDateTime":"2015-10-16T15:32:05Z","Content":"\n\u003Ca href=\u0022http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious\u003C/a\u003E\n"},{"CreatedByName":"radonek","CreatedById":84077,"CreatedDateTime":"2015-10-16T16:04:19Z","Content":"\n\u003Cp\u003E250M string is not a problem if you have enough memory. However, you should take a look at \u003Cem\u003Emmap()\u003C/em\u003E\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-16T16:13:02Z","Content":"\n\u003Cp\u003EThis is my VB code it creates a nice table. (this is excel, little active X button to create a code block and the immediate window)\u003C/p\u003E\u003Cp\u003EOn the fly I would have to determine the bits then use those to append the value of the target. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EPrivate Sub CommandButton1_Click()\u003Cbr\u003E Dim L1, L2, L3, L4, L5, L6, L7, L8\u003Cbr\u003E Dim Zbytes(255) As Byte\u003Cbr\u003E Count = 0\u003Cbr\u003E For L1 = 0 To 1\u003Cbr\u003E   For L2 = 0 To 1\u003Cbr\u003E     For L3 = 0 To 1\u003Cbr\u003E       For L4 = 0 To 1\u003Cbr\u003E         For L5 = 0 To 1\u003Cbr\u003E           For L6 = 0 To 1\u003Cbr\u003E             For L7 = 0 To 1\u003Cbr\u003E               For L8 = 0 To 1\u003Cbr\u003E                 target = 255 - L1 - L2 * 2 - L3 * 4 - L4 * 8 - L5 * 16 - L6 * 32 - L7 * 64 - L8 * 128\u003Cbr\u003E                 Zbytes(Count) = target\u003Cbr\u003E                 Debug.Print Count; \u0022 \u0022; target,\u003Cbr\u003E                 Count = Count \u002B 1\u003Cbr\u003E                 If Count Mod 8 = 0 Then Debug.Print\u003Cbr\u003E               Next L8\u003Cbr\u003E             Next L7\u003Cbr\u003E           Next L6\u003Cbr\u003E         Next L5\u003Cbr\u003E       Next L4\u003Cbr\u003E     Next L3\u003Cbr\u003E   Next L2\u003Cbr\u003E Next L1\u003Cbr\u003E Debug.Print\u003Cbr\u003EEnd Sub\u003Cbr\u003E\u003Cbr\u003ENumber combination is relevant but order is irrelevant in the pairs. \u003Cbr\u003E 0   255       1   127       2   191       3   63        4   223       5   95        6   159       7   31       \u003Cbr\u003E 8   239       9   111       10   175      11   47       12   207      13   79       14   143      15   15      \u003Cbr\u003E 16   247      17   119      18   183      19   55       20   215      21   87       22   151      23   23      \u003Cbr\u003E 24   231      25   103      26   167      27   39       28   199      29   71       30   135      31   7       \u003Cbr\u003E 32   251      33   123      34   187      35   59       36   219      37   91       38   155      39   27      \u003Cbr\u003E 40   235      41   107      42   171      43   43       44   203      45   75       46   139      47   11      \u003Cbr\u003E 48   243      49   115      50   179      51   51       52   211      53   83       54   147      55   19      \u003Cbr\u003E 56   227      57   99       58   163      59   35       60   195      61   67       62   131      63   3       \u003Cbr\u003E 64   253      65   125      66   189      67   61       68   221      69   93       70   157      71   29      \u003Cbr\u003E 72   237      73   109      74   173      75   45       76   205      77   77       78   141      79   13      \u003Cbr\u003E 80   245      81   117      82   181      83   53       84   213      85   85       86   149      87   21      \u003Cbr\u003E 88   229      89   101      90   165      91   37       92   197      93   69       94   133      95   5       \u003Cbr\u003E 96   249      97   121      98   185      99   57       100   217     101   89      102   153     103   25     \u003Cbr\u003E 104   233     105   105     106   169     107   41      108   201     109   73      110   137     111   9      \u003Cbr\u003E 112   241     113   113     114   177     115   49      116   209     117   81      118   145     119   17     \u003Cbr\u003E 120   225     121   97      122   161     123   33      124   193     125   65      126   129     127   1      \u003Cbr\u003E 128   254     129   126     130   190     131   62      132   222     133   94      134   158     135   30     \u003Cbr\u003E 136   238     137   110     138   174     139   46      140   206     141   78      142   142     143   14     \u003Cbr\u003E 144   246     145   118     146   182     147   54      148   214     149   86      150   150     151   22     \u003Cbr\u003E 152   230     153   102     154   166     155   38      156   198     157   70      158   134     159   6      \u003Cbr\u003E 160   250     161   122     162   186     163   58      164   218     165   90      166   154     167   26     \u003Cbr\u003E 168   234     169   106     170   170     171   42      172   202     173   74      174   138     175   10     \u003Cbr\u003E 176   242     177   114     178   178     179   50      180   210     181   82      182   146     183   18     \u003Cbr\u003E 184   226     185   98      186   162     187   34      188   194     189   66      190   130     191   2      \u003Cbr\u003E 192   252     193   124     194   188     195   60      196   220     197   92      198   156     199   28     \u003Cbr\u003E 200   236     201   108     202   172     203   44      204   204     205   76      206   140     207   12     \u003Cbr\u003E 208   244     209   116     210   180     211   52      212   212     213   84      214   148     215   20     \u003Cbr\u003E 216   228     217   100     218   164     219   36      220   196     221   68      222   132     223   4      \u003Cbr\u003E 224   248     225   120     226   184     227   56      228   216     229   88      230   152     231   24     \u003Cbr\u003E 232   232     233   104     234   168     235   40      236   200     237   72      238   136     239   8      \u003Cbr\u003E 240   240     241   112     242   176     243   48      244   208     245   80      246   144     247   16     \u003Cbr\u003E 248   224     249   96      250   160     251   32      252   192     253   64      254   128     255   0      \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI could go to 65536 and do an idiv of to long long into 65536, 65536^2, 65536^3\u003C/p\u003E\u003Cp\u003EFrom here then convert all values with the table and then multiply the low word by 65536^3, 2nd word by 65536^2, 3rdWord by 65536, and the high word remained unchanged\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-16T16:18:18Z\u0022 title=\u002210/16/2015 04:18  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 16, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-10-17T17:02:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022glacierre\u0022 data-cite=\u0022glacierre\u0022\u003E\u003Cdiv\u003EWell if you are going to write it 20 times just #define A 65 and skip the quotation marks, even cleaner.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/Pa9CTs7.gif\u0022 alt=\u0022Pa9CTs7.gif\u0022\u003E\u003C/p\u003E\u003Cp\u003ELoss of type safety, loss of clarity because anyone familiar with the language can\u0027t be 100% sure what A is (is it a macro, is it a constant, what\u0027s its value?) without going through the source and finding it and all just to save two characters worth of typing? Just write \u0027A\u0027.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThis is my VB code it creates a nice table. (this is excel, little active X button to create a code block and the immediate window)\u003Cp\u003EOn the fly I would have to determine the bits then use those to append the value of the target. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EPrivate Sub CommandButton1_Click()\u003Cbr\u003E Dim L1, L2, L3, L4, L5, L6, L7, L8\u003Cbr\u003E Dim Zbytes(255) As Byte\u003Cbr\u003E Count = 0\u003Cbr\u003E For L1 = 0 To 1\u003Cbr\u003E   For L2 = 0 To 1\u003Cbr\u003E     For L3 = 0 To 1\u003Cbr\u003E       For L4 = 0 To 1\u003Cbr\u003E         For L5 = 0 To 1\u003Cbr\u003E           For L6 = 0 To 1\u003Cbr\u003E             For L7 = 0 To 1\u003Cbr\u003E               For L8 = 0 To 1\u003Cbr\u003E                 target = 255 - L1 - L2 * 2 - L3 * 4 - L4 * 8 - L5 * 16 - L6 * 32 - L7 * 64 - L8 * 128\u003Cbr\u003E                 Zbytes(Count) = target\u003Cbr\u003E                 Debug.Print Count; \u0022 \u0022; target,\u003Cbr\u003E                 Count = Count \u002B 1\u003Cbr\u003E                 If Count Mod 8 = 0 Then Debug.Print\u003Cbr\u003E               Next L8\u003Cbr\u003E             Next L7\u003Cbr\u003E           Next L6\u003Cbr\u003E         Next L5\u003Cbr\u003E       Next L4\u003Cbr\u003E     Next L3\u003Cbr\u003E   Next L2\u003Cbr\u003E Next L1\u003Cbr\u003E Debug.Print\u003Cbr\u003EEnd Sub\u003Cbr\u003E\u003Cbr\u003ENumber combination is relevant but order is irrelevant in the pairs. \u003Cbr\u003E 0   255       1   127       2   191       3   63        4   223       5   95        6   159       7   31       \u003Cbr\u003E 8   239       9   111       10   175      11   47       12   207      13   79       14   143      15   15      \u003Cbr\u003E 16   247      17   119      18   183      19   55       20   215      21   87       22   151      23   23      \u003Cbr\u003E 24   231      25   103      26   167      27   39       28   199      29   71       30   135      31   7       \u003Cbr\u003E 32   251      33   123      34   187      35   59       36   219      37   91       38   155      39   27      \u003Cbr\u003E 40   235      41   107      42   171      43   43       44   203      45   75       46   139      47   11      \u003Cbr\u003E 48   243      49   115      50   179      51   51       52   211      53   83       54   147      55   19      \u003Cbr\u003E 56   227      57   99       58   163      59   35       60   195      61   67       62   131      63   3       \u003Cbr\u003E 64   253      65   125      66   189      67   61       68   221      69   93       70   157      71   29      \u003Cbr\u003E 72   237      73   109      74   173      75   45       76   205      77   77       78   141      79   13      \u003Cbr\u003E 80   245      81   117      82   181      83   53       84   213      85   85       86   149      87   21      \u003Cbr\u003E 88   229      89   101      90   165      91   37       92   197      93   69       94   133      95   5       \u003Cbr\u003E 96   249      97   121      98   185      99   57       100   217     101   89      102   153     103   25     \u003Cbr\u003E 104   233     105   105     106   169     107   41      108   201     109   73      110   137     111   9      \u003Cbr\u003E 112   241     113   113     114   177     115   49      116   209     117   81      118   145     119   17     \u003Cbr\u003E 120   225     121   97      122   161     123   33      124   193     125   65      126   129     127   1      \u003Cbr\u003E 128   254     129   126     130   190     131   62      132   222     133   94      134   158     135   30     \u003Cbr\u003E 136   238     137   110     138   174     139   46      140   206     141   78      142   142     143   14     \u003Cbr\u003E 144   246     145   118     146   182     147   54      148   214     149   86      150   150     151   22     \u003Cbr\u003E 152   230     153   102     154   166     155   38      156   198     157   70      158   134     159   6      \u003Cbr\u003E 160   250     161   122     162   186     163   58      164   218     165   90      166   154     167   26     \u003Cbr\u003E 168   234     169   106     170   170     171   42      172   202     173   74      174   138     175   10     \u003Cbr\u003E 176   242     177   114     178   178     179   50      180   210     181   82      182   146     183   18     \u003Cbr\u003E 184   226     185   98      186   162     187   34      188   194     189   66      190   130     191   2      \u003Cbr\u003E 192   252     193   124     194   188     195   60      196   220     197   92      198   156     199   28     \u003Cbr\u003E 200   236     201   108     202   172     203   44      204   204     205   76      206   140     207   12     \u003Cbr\u003E 208   244     209   116     210   180     211   52      212   212     213   84      214   148     215   20     \u003Cbr\u003E 216   228     217   100     218   164     219   36      220   196     221   68      222   132     223   4      \u003Cbr\u003E 224   248     225   120     226   184     227   56      228   216     229   88      230   152     231   24     \u003Cbr\u003E 232   232     233   104     234   168     235   40      236   200     237   72      238   136     239   8      \u003Cbr\u003E 240   240     241   112     242   176     243   48      244   208     245   80      246   144     247   16     \u003Cbr\u003E 248   224     249   96      250   160     251   32      252   192     253   64      254   128     255   0      \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI could go to 65536 and do an idiv of to long long into 65536, 65536^2, 65536^3\u003C/p\u003E\u003Cp\u003EFrom here then convert all values with the table and then multiply the low word by 65536^3, 2nd word by 65536^2, 3rdWord by 65536, and the high word remained unchanged\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECould have done that without 8 nested loops. Honestly I\u0027d just do the reversing with a lookup table (of course this is C#, I don\u0027t know VB):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003E\u003Cbr\u003Epublic class Test\u003Cbr\u003E{\u003Cbr\u003E    public static ulong ReverseAndFlip( ulong n )\u003Cbr\u003E    {\u003Cbr\u003E        return ~Reverse( n );\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public static ulong Reverse( ulong n )\u003Cbr\u003E    {\u003Cbr\u003E        return ( (ulong) smReverseByte[n \u0026amp; 0xFF] \u0026lt;\u0026lt; 56 \u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 8) \u0026amp; 0xFF] \u0026lt;\u0026lt; 48\u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 16) \u0026amp; 0xFF] \u0026lt;\u0026lt; 40\u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 24) \u0026amp; 0xFF] \u0026lt;\u0026lt; 32\u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 32) \u0026amp; 0xFF] \u0026lt;\u0026lt; 24\u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 40) \u0026amp; 0xFF] \u0026lt;\u0026lt; 16\u003Cbr\u003E               | (ulong) smReverseByte[(n \u0026gt;\u0026gt; 48) \u0026amp; 0xFF] \u0026lt;\u0026lt; 8\u003Cbr\u003E               | (ulong) smReverseByte[n \u0026gt;\u0026gt; 56] );\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    static Test()\u003Cbr\u003E    {\u003Cbr\u003E        var reverseNibble = new byte[]\u003Cbr\u003E            { \u003Cbr\u003E                0x0, 0x8, 0x4, 0xC, 0x2, 0xA, 0x6, 0xE, \u003Cbr\u003E                0x1, 0x9, 0x5, 0xD, 0x3, 0xB, 0x7, 0xF\u003Cbr\u003E            };\u003Cbr\u003E\u003Cbr\u003E        smReverseByte = new byte[256];\u003Cbr\u003E        for( int i = 0; i \u0026lt; 0x10; \u002B\u002Bi )\u003Cbr\u003E        {\u003Cbr\u003E            int ni = i \u0026lt;\u0026lt; 4;\u003Cbr\u003E            for( int j = 0; j \u0026lt; 0x10; \u002B\u002Bj )\u003Cbr\u003E            {\u003Cbr\u003E                smReverseByte[ni \u002B j] = (byte) ( ( reverseNibble[j] \u0026lt;\u0026lt; 4 ) | reverseNibble[i] );\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private static readonly byte[] smReverseByte;\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-22T22:33:29Z","Content":"\n\u003Cp\u003EHow much of a cost am I going to pay if I include a GTK\u002B2.0 file-get gui if I remove the object after I have moved the filenames into a global variable. \u003C/p\u003E\u003Cp\u003EThis is using MonoDevelop C# only for the GUI. Do I run the gui, save the filenames in a text file or can I move into a C\u002B\u002B routine with out classes.\u003C/p\u003E\n"},{"CreatedByName":"technion","CreatedById":85380,"CreatedDateTime":"2015-10-24T07:22:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ENote that you should never, ever test passwords like that, and not just because one could buffer-overflow this code.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd just to add to this, one of the reasons for this is that strcmp() will return as soon as a character doesn\u0027t match, so passwords with the first character correct will take longer to check.\u003C/p\u003E\u003Cp\u003EI can refer you at my \u003Ca href=\u0022https://github.com/technion/libscrypt/blob/master/slowequals.c\u0022 rel=\u0022external nofollow\u0022\u003EConstant time implementation.\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2015-10-24T12:23:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThis is my VB code it creates a nice table. (this is excel, little active X button to create a code block and the immediate window)\u003Cp\u003EOn the fly I would have to determine the bits then use those to append the value of the target. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is not the code you want to show if you need to convince us that you need to resort to assembler to speed up your program.\u003C/p\u003E\u003Cp\u003EI know, that\u0027s a \u003Cem\u003Edifferent\u003C/em\u003E program. But if you\u0027re writing code that way, it\u0027s safe to assume that the path to optimization should be sought in better code, not in faster code. After the third nested loop you should really be thinking \u0022there has to be a better way for this.\u0022\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-24T12:36:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kerbart\u0022 data-cite=\u0022Kerbart\u0022\u003E\u003Cdiv\u003EThis is not the code you want to show if you need to convince us that you need to resort to assembler to speed up your program.\u003Cp\u003EI know, that\u0027s a \u003Cem\u003Edifferent\u003C/em\u003E program. But if you\u0027re writing code that way, it\u0027s safe to assume that the path to optimization should be sought in better code, not in faster code. After the third nested loop you should really be thinking \u0022there has to be a better way for this.\u0022\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt was fast to make a small table, table didn\u0027t require many clock cycles so it did not need to be optimized. At best the table would have 65536 values. In fact you missed the whole importance, the table was the basis the loops were simply to make the table. The pointers are the table values which find their own anti-value. The lookup is the time consuming process it is the process that will be repeated. \u003C/p\u003E\u003Cp\u003EIn VB it would look like this\u003C/p\u003E\u003Cp\u003E Table(count) = Anti-value \u0026lt;-------------------------------repeated only once for each element in the table\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003EEndcoded(1,ID) = 0\u003C/p\u003E\u003Cp\u003EEndcoded(1,ID) = EncodeFunction(PositionPointer) \u0026lt;---------Call the cipher function. \u003C/p\u003E\u003Cp\u003EEncoded(2,ID) = Table(Encoded(1,ID)) \u0026lt;------------------------------------repeated trillions of times. \u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003EThe point was that online the general advice was make a table anyway you can, but then use the table and don\u0027t try to encode the anti-value on the fly.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-24T12:43:24Z\u0022 title=\u002210/24/2015 12:43  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 24, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-24T13:45:33Z","Content":"\n\u003Cp\u003EThis may seem like a completely random injection into \u003Cem\u003Ethis\u003C/em\u003E thread, but given the tread is about the sense of the C programming language \u003Cem\u003Ethis\u003C/em\u003E should be completely appropriate. \u003C/p\u003E\u003Cp\u003EI was trying to write a file grabbing routine and was cloning code from the net and testing it when I ran across \u003Cem\u003Ethis\u003C/em\u003E:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E       int width, height;\u003Cbr\u003E        this.GetDefaultSize( out width, out height );\u003Cbr\u003E        this.Resize( width, height );\u003Cbr\u003E        FileChooserDialog chooser = new FileChooserDialog(\u0022Please select a File to Open\u0022, this, FileChooserAction.Open, \u003Cbr\u003E            \u0022Cancel\u0022, ResponseType.Cancel,\u0022Open\u0022, ResponseType.Accept );\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI went looking through my C/C\u002B\u002B books(5) there is nothing about \u003Cstrong\u003Ethis\u003C/strong\u003E anywhere, the object is not designed or mentioned, and surprisingly the code compiles. There was something breifly mention about this\u003C/p\u003E\u003Cp\u003Ethis-\u0026gt;month = mn;\u003C/p\u003E\u003Cp\u003EWhat da hail is \u003Cstrong\u003Ethis\u003C/strong\u003E, is there some supersecret C club in which these out-of-the-blue object handlers are passed. :^).\u003C/p\u003E\n"},{"CreatedByName":"andrewas","CreatedById":24662,"CreatedDateTime":"2015-10-24T14:16:33Z","Content":"\n\u003Cp\u003EThis is a pointer to the current object which can be used from within member functions.\u003C/p\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2015-10-24T14:20:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EIt was fast to make a small table, table didn\u0027t require many clock cycles so it did not need to be optimized. At best the table would have 65536 values. In fact you missed the whole importance, the table was the basis the loops were simply to make the table. The pointers are the table values which find their own anti-value. The lookup is the time consuming process it is the process that will be repeated\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, my point is... if for something as trivial as this you\u0027re using convoluted code, what are you using for more complex code? Maybe your \u0022real\u0022 code is written much tighter, but in a discussion that edges towards \u0022we\u0027re not sure if you\u0027re approaching things the right way\u0022 this doesn\u0027t support your viewpoint.\u003C/p\u003E\u003Cp\u003EYou emphasize \u0022I need the code to be as fast as possible because I need to do certain things trillions of times.\u0022 Then you show a routine like this. That just supports my thoughts of \u0022\u003Cem\u003Edo you NEED to do it trillions of times?\u003C/em\u003E\u0022 And maybe you do. But for me the impression remains that you\u0027re trying to brute force your way out of an O(n\u003Csup\u003E2\u003C/sup\u003E) problem that should really be converted into an O(n log n) problem or something along those lines.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-24T15:40:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kerbart\u0022 data-cite=\u0022Kerbart\u0022\u003E\u003Cdiv\u003EWell, my point is... if for something as trivial as this you\u0027re using convoluted code, what are you using for more complex code? Maybe your \u0022real\u0022 code is written much tighter, but in a discussion that edges towards \u0022we\u0027re not sure if you\u0027re approaching things the right way\u0022 this doesn\u0027t support your viewpoint.\u003Cp\u003EYou emphasize \u0022I need the code to be as fast as possible because I need to do certain things trillions of times.\u0022 Then you show a routine like this. That just supports my thoughts of \u0022\u003Cem\u003Edo you NEED to do it trillions of times?\u003C/em\u003E\u0022 And maybe you do. But for me the impression remains that you\u0027re trying to brute force your way out of an O(n\u003Csup\u003E2\u003C/sup\u003E) problem that should really be converted into an O(n log n) problem or something along those lines.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAsk yourself this question, why would google be offering human genome studies the use of their servers if this stuff was easy to do? \u003Ca href=\u0022https://cloud.google.com/genomics/#get-started\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://cloud.google.com/genomics/#get-started\u003C/a\u003E. Yes trillions of times, data comes in and is processed, lots of data comes and lots of processing is done. Or should you have me then tell nature, stop producing trillions of data. Every person on the planet carries about 6 billion data points, if you gather in 1000 people you have a trillion, a million people is a quadrillion, a billion people is a pentillion. Alignment like space-time, is only local. \u003C/p\u003E\u003Cp\u003EYou missed the point entirely. I had a problem, how best to do this, the answer given online was make a table, by numerous people. The claim online is that there is no Intel 86-x64 function to reverse the order of the bits. \u003C/p\u003E\u003Cp\u003ESo I brought the table method to the group and asked is there a better method, potentially one that could be used on the fly. If there is an on-the-fly method then I can apply this at the assembly level and make it fast. If this was the end of the problem, it would be easily solved, but bit reversal/xor tables only work well for tables smaller than 2^30 numbers. Once you get above this you need processing power. \u003C/p\u003E\u003Cp\u003ESo why would I ask for an on the fly method (note you did not provide one), the answer is that I want to create an array based on values of 2^48 bits, so it would be highly advantageous to have a method on-the-fly that reversed order and \u0027Not\u0027ed the bits, and alternative is to carve it into 2 @ 24 bits or 3 @ 16 bits(which I could use a table for). \u003C/p\u003E\u003Cp\u003EIn order to divide into 3 16 bit parts the QW first has to be copied rightshifted 16 copied, and rightshifted again\u003C/p\u003E\u003Cp\u003Eand copied. All bits higher than 16 need to be removed, to do this take the register, create a dummy register, rightshift 16, leftshift 16, xor with the source register, then lookup. Once the lookup is done IMul register 1 by 4,294,967,296 and add to register 3, register 2 by 65536 and add to register 3. Done.\u003C/p\u003E\u003Cp\u003ENext issue is that each needs a lookup value, since 2^48 is too large for memory it will have to be disked, by doing this I can greatly compact the array, and in doing that I don\u0027t need to process trillions of values at once. \u003C/p\u003E\u003Cp\u003E(Note other post discussing use of a GUI to load parsed data files). So a lookup value would be the number of files = 2^x so that x is the number of bits. Once again you rightshift 48-x bits, leftshift 48-x bits, xor the value with the shifted value. Why 2^48, because this is the minimum size by which heterologous sequence will have a single unique match up to 99.9969%. This might seem like overkill but true heterogeniety is not a common feature of the genome, in fact lack of heterogeniety is also very common. \u003C/p\u003E\u003Cp\u003ESo for each position we have a position, its encode, the encodes index, its reved-xor encode, its encode index.\u003C/p\u003E\u003Cp\u003EIdeally this is all handled by assembly language since I know exactly what I have to do and the minimum use of code to get there, and in fact since the data comes in a text stream, it should be handled in large chucks in an assembly routing, placed in an array, returned to C, then filed in C, in the array set up (10 billions of data).\u003C/p\u003E\u003Cp\u003ENext is the search, load file, create encodes in large chucks, define indeces, sort the indeces, search files by index, then open file, look for matches, create a match file, save. Repeat. \u003C/p\u003E\u003Cp\u003ENow google has a massively paralleled processing power with a cloud, which means technically having 2^48 or even 2^48 memory locations is not out of the question, having 2^48 files is also not out of the question, but extremely questionable. But the intel 86-x64 has a limitation of about 64gB (2^36) of memory. So basically having a means of dumbing down the data is useful.\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-10-24T20:21:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EBut the intel 86-x64 has a limitation of about 64gB (2^36) of memory. So basically having a means of dumbing down the data is useful.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat 64 GB limit is for 32-bit x86 processors using some ugly tricks. Current x64 processors support up to 256 TB of memory using 48-bit addresses. The architecture itself could support 4 PB (52 bits), but as far as I know, individual processes would still be limited to 256 TB of address space. The biggest x64 servers I\u0027ve seen have 6 TB of memory (96 slots with 64 GB DIMMs).\u003C/p\u003E\n"},{"CreatedByName":"magnemoe","CreatedById":57801,"CreatedDateTime":"2015-10-24T21:50:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jouni\u0022 data-cite=\u0022Jouni\u0022\u003E\u003Cdiv\u003EThat 64 GB limit is for 32-bit x86 processors using some ugly tricks. Current x64 processors support up to 256 TB of memory using 48-bit addresses. The architecture itself could support 4 PB (52 bits), but as far as I know, individual processes would still be limited to 256 TB of address space. The biggest x64 servers I\u0027ve seen have 6 TB of memory (96 slots with 64 GB DIMMs).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can get x86-32 bit past 4GB using paging, this is the same way they was able to get x86-16 to support up to 1 MB using an 20 bit addresses \u003C/p\u003E\u003Cp\u003EThen 4GB started to get an problem you got paging support on some windows server versions, however at this time 64 bit was on the roadmap and it was clear it was an temporarily solution. \u003C/p\u003E\u003Cp\u003EShould it not support 64 bit not 52? Yes I know it don\u0027t support it now because an lack of need.\u003C/p\u003E\u003Cp\u003ERemember then I bought my first computer an 286 the 386 memory support was more than anybody would need, so an insane high number \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ELater it was some talk about 64 bit but then as virtual memory for large servers.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EIt was fast to make a small table, table didn\u0027t require many clock cycles so it did not need to be optimized. At best the table would have 65536 values. In fact you missed the whole importance, the table was the basis the loops were simply to make the table. The pointers are the table values which find their own anti-value. The lookup is the time consuming process it is the process that will be repeated. \u003Cp\u003EIn VB it would look like this\u003C/p\u003E\u003Cp\u003E Table(count) = Anti-value \u0026lt;-------------------------------repeated only once for each element in the table\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003EEndcoded(1,ID) = 0\u003C/p\u003E\u003Cp\u003EEndcoded(1,ID) = EncodeFunction(PositionPointer) \u0026lt;---------Call the cipher function. \u003C/p\u003E\u003Cp\u003EEncoded(2,ID) = Table(Encoded(1,ID)) \u0026lt;------------------------------------repeated trillions of times. \u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003EThe point was that online the general advice was make a table anyway you can, but then use the table and don\u0027t try to encode the anti-value on the fly.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGoogle is one of the most powerful tools we have.\u003C/p\u003E\u003Cp\u003EGoogle revers byte\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://stackoverflow.com/questions/746171/best-algorithm-for-bit-reversal-from-msb-lsb-to-lsb-msb-in-c\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://stackoverflow.com/questions/746171/best-algorithm-for-bit-reversal-from-msb-lsb-to-lsb-msb-in-c\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Ewas second.\u003C/p\u003E\u003Cp\u003EWithout googling I would probably used an array to store the bit values, then two loops one to read, then another to store. I might have needed another array for the mask. \u003C/p\u003E\u003Cp\u003EThis way I could work directly on integers without having to mess with bit and specialized functions and data types who I would needed internet to look up anyway.\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-10-25T09:42:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022magnemoe\u0022 data-cite=\u0022magnemoe\u0022\u003E\u003Cdiv\u003EShould it not support 64 bit not 52? Yes I know it don\u0027t support it now because an lack of need.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe 52-bit limit is based on the architecture. In the page table, only the middle 40 bits are used for the physical base address of the page, while the remaining bits are reserved for CPU/OS use. As the native page size is 2^12 bytes, this yields 2^52 bytes of physical address space.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-25T11:48:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jouni\u0022 data-cite=\u0022Jouni\u0022\u003E\u003Cdiv\u003EThat 64 GB limit is for 32-bit x86 processors using some ugly tricks. Current x64 processors support up to 256 TB of memory using 48-bit addresses. The architecture itself could support 4 PB (52 bits), but as far as I know, individual processes would still be limited to 256 TB of address space. The biggest x64 servers I\u0027ve seen have 6 TB of memory (96 slots with 64 GB DIMMs).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDespite being 64GB, Sandy Bridge and Ivy Bridge chipsets only allows maximum of 32GB memory when the chipset first came out. Now there are some 64 and even some 128 out there. Most everything else is in the Xeon range. In most cases this is dependent on module size each module is typically no more than 8 GB and dimms are 16, the manufactures limit this to 2 sets, as memory size increases or slots increase this goes to 8. Increasing the number of dimms slots apparently lowers memory transfer rates. Now there are a few at 64 and even 128.\u003C/p\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2015-10-25T13:43:00Z","Content":"\n\u003Cp\u003EThis thread feels either like:\u003C/p\u003E\u003Cp\u003E- someone wants help with his homework\u003C/p\u003E\u003Cp\u003Eor\u003C/p\u003E\u003Cp\u003E- someone wants to rant about something he doesnt like but would need\u003C/p\u003E\n"}]}