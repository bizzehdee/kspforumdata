{"TopicId":177400,"ForumId":44,"TopicTitle":"Making your own code","CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-08T00:53:20Z","PageNum":1,"Articles":[{"CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-08T00:53:20Z","Content":"\n\u003Cp\u003E\nThis is a strange question/subject but here it goes. If I\u0027m interested in making my own code form such as my own version of c\u002B\u002B what is the requirement. How can I make a computer recognise and process the code for example if in my own coding language I said\n\u003C/p\u003E\n\u003Cp\u003E\n\u0026gt;hi\u0026lt;\n\u003C/p\u003E\n\u003Cp\u003E\nThis would mean do not process anything inside the symbols how would I go about that\n\u003C/p\u003E\n\u003Cp\u003E\nAnother example if I said this in my own coding language\n\u003C/p\u003E\n\u003Cp\u003E\n%5seconds%\n\u003C/p\u003E\n\u003Cp\u003E\nThis would mean\n\u003C/p\u003E\n\u003Cp\u003E\ncount/initiate a timer for 5 second\n\u003C/p\u003E\n\u003Cp\u003E\nHow can I make it scan folders and process the code and do two seperate process make connections to other forms of code.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2018-08-08T01:31:25Z","Content":"\n\u003Cp\u003E\nThe process of breaking source code down to tokens is known as\u00A0\u003Ca href=\u0022https://en.wikipedia.org/wiki/Lexical_analysis\u0022 rel=\u0022external nofollow\u0022\u003Elexing\u003C/a\u003E. Once that is done, a parser assigns meaning to the tokens. Here\u0027s a reasonable high-level overview of how one might go about defining a new programming language and creating the tools to work with it:\u00A0\u003Ca href=\u0022https://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-08T01:38:14Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429811\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533691885\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 minutes ago, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe process of breaking source code down to tokens is known as\u00A0\u003Ca href=\u0022https://en.wikipedia.org/wiki/Lexical_analysis\u0022 rel=\u0022external nofollow\u0022\u003Elexing\u003C/a\u003E. Once that is done, a parser assigns meaning to the tokens. Here\u0027s a reasonable high-level overview of how one might go about defining a new programming language and creating the tools to work with it:\u00A0\u003Ca href=\u0022https://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u003C/a\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOh boy...\n\u003C/p\u003E\n\u003Cp\u003E\nlol that\u0027s going to take a minute to wrap my head around fully.\n\u003C/p\u003E\n\u003Cp\u003E\nThanks\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429811\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533691885\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 minutes ago, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe process of breaking source code down to tokens is known as\u00A0\u003Ca href=\u0022https://en.wikipedia.org/wiki/Lexical_analysis\u0022 rel=\u0022external nofollow\u0022\u003Elexing\u003C/a\u003E. Once that is done, a parser assigns meaning to the tokens. Here\u0027s a reasonable high-level overview of how one might go about defining a new programming language and creating the tools to work with it:\u00A0\u003Ca href=\u0022https://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u003C/a\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe language I\u0027m working on (even though it does nothing yet) is designed for aerospace and is\u00A0based around operations \u00A0Identify folders to run seperate operations. I\u0027m not doing that many variables... Maby I should\n\u003C/p\u003E\n"},{"CreatedByName":"IncongruousGoat","CreatedById":157062,"CreatedDateTime":"2018-08-08T04:01:17Z","Content":"\n\u003Cp\u003E\nOhhh boy...\n\u003C/p\u003E\n\u003Cp\u003E\nCompiled or interpreted language? Both are going to require a tokenizer and a parser, but the semantics are typically different. From what you\u0027ve said it sounds like you\u0027re writing some kind of interpreter, since you\u0027re talking about scanning directories (which wouldn\u0027t make much sense for a compiled language). If you are in fact trying to make something useful for aerospace, I recommend you re-think this choice. Interpreted languages are typically far slower than compiled languages, which isn\u0027t good for the kinds of high-performance computing needed by aerospace. Additionally, you\u0027ve already gone and assumed that you\u0027re going to be running on some system that has a directory tree. This isn\u0027t guaranteed - plenty of microcontrollers don\u0027t (and can\u0027t) run an operating system in the first place. Even if you\u0027re running on something with a directory tree, though, you\u0027ll have to deal with cross-platform compatibility.\n\u003C/p\u003E\n\u003Cp\u003E\nYou say your language is based around \u0022operations\u0022. What, exactly, do you mean by this? Because depending on how you define these operations, you could easily end up with a language that isn\u0027t Turing-complete - i.e. a language that is essentially useless for computation due to its limitations (this is a generalization, but for our purposes is close enough). It sounds to me like what you\u0027re shooting for is some sort of grammar for defining the operation of a finite state machine, which wouldn\u0027t be Turing-complete.\n\u003C/p\u003E\n"},{"CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-08T04:17:58Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429877\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533700877\u0022 data-ipsquote-userid=\u0022157062\u0022 data-ipsquote-username=\u0022IncongruousGoat\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 minutes ago, IncongruousGoat said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOhhh boy...\n\u003C/p\u003E\n\u003Cp\u003E\nCompiled or interpreted language? Both are going to require a tokenizer and a parser, but the semantics are typically different. From what you\u0027ve said it sounds like you\u0027re writing some kind of interpreter, since you\u0027re talking about scanning directories (which wouldn\u0027t make much sense for a compiled language). If you are in fact trying to make something useful for aerospace, I recommend you re-think this choice. Interpreted languages are typically far slower than compiled languages, which isn\u0027t good for the kinds of high-performance computing needed by aerospace. Additionally, you\u0027ve already gone and assumed that you\u0027re going to be running on some system that has a directory tree. This isn\u0027t guaranteed - plenty of microcontrollers don\u0027t (and can\u0027t) run an operating system in the first place. Even if you\u0027re running on something with a directory tree, though, you\u0027ll have to deal with cross-platform compatibility.\n\u003C/p\u003E\n\u003Cp\u003E\nYou say your language is based around \u0022operations\u0022. What, exactly, do you mean by this? Because depending on how you define these operations, you could easily end up with a language that isn\u0027t Turing-complete - i.e. a language that is essentially useless for computation due to its limitations (this is a generalization, but for our purposes is close enough). It sounds to me like what you\u0027re shooting for is some sort of grammar for defining the operation of a finite state machine, which wouldn\u0027t be Turing-complete.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m very new to the realm of computers. I figured I should give it a shot. I hate coding but I need it for my model rockets. Instead of using the traditional methods of coding I figured I would use my own code because why not. When I say operations what I mean is that if I wanted a rocket to pitch I would say\n\u003C/p\u003E\n\u003Cp\u003E\n\u0026lt;\n\u003C/p\u003E\n\u003Cp\u003E\n%\u002B5seconds% trigger folder \u0022engine1\u0022\n\u003C/p\u003E\n\u003Cp\u003E\n%\u002B2seconds% trigger folder \u0022engine2\u0022\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n%\u002B5 seconds% trigger folder \u0022engine3\u0022\n\u003C/p\u003E\n\u003Cp\u003E\n\u0026gt;\n\u003C/p\u003E\n\u003Cp\u003E\ntranslation:\n\u003C/p\u003E\n\u003Cp\u003E\n%_\u002Bseconds% is an operation that locks out the processing of the program until the time inserted has been completed off example %\u002B5seconds% will mean the program will wait 5 seconds before doing anything else in the program\n\u003C/p\u003E\n\u003Cp\u003E\ntrigger folder_____ allows you to let a certain folder complete an operation without having to process the folder until it\u0027s needed. In reference to my example \u0022engine1\u0022 would be in practice, throttle engine too 75%. \u0022engine2\u0022 would be 50% throttle and \u0022engine3\u0022 would be 100% throttle\n\u003C/p\u003E\n\u003Cp\u003E\n\u0026lt; is the beginning of the program\n\u003C/p\u003E\n\u003Cp\u003E\n\u0026gt; is the end of the program\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nP.S. The program reads left to right and then down just like english.\n\u003C/p\u003E\u003Cp\u003E\nIn practice this code allows the rocket to throttle at certain rates at certain times with just 3 lines of code\n\u003C/p\u003E\u003Cp\u003E\nP.S. I\u0027m still working on the calculator system\n\u003C/p\u003E\u003Cp\u003E\nIt may not be perfect but using a similar system you could get to a moderate level of sophistication.\n\u003C/p\u003E\u003Cp\u003E\nAlso the primary flight code could only be Maby 10 pages of script with hundreds of folders than are only called to use once so it would most likely not be that difficult to calculate\n\u003C/p\u003E\u003Cp\u003E\nDone ranting now\n\u003C/p\u003E\n"},{"CreatedByName":"Steel","CreatedById":49317,"CreatedDateTime":"2018-08-08T05:42:20Z","Content":"\n\u003Cp\u003E\nI\u0027ve only skimmed it, but this might answer some questions:\u00A0\u003Ca href=\u0022https://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2018-08-08T06:00:13Z","Content":"\n\u003Cp\u003E\nCan\u0027t beat a classic.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://www.amazon.com/Compilers-Principles-Techniques-Alfred-Aho/dp/0201100886\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.amazon.com/Compilers-Principles-Techniques-Alfred-Aho/dp/0201100886\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Shpaget","CreatedById":45577,"CreatedDateTime":"2018-08-08T07:33:23Z","Content":"\n\u003Cp\u003E\nAgain, we have the XY problem here.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429883\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533701878\u0022 data-ipsquote-userid=\u0022183218\u0022 data-ipsquote-username=\u0022Cheif Operations Director\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, Cheif Operations Director said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI figured I would use my own code because why not\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBecause coming up with a brand new language is a lot more work than just taking a ready made language and compiler and work with stuff that\u0027s been bugfixed and developed for many years by individuals far more experienced and skilled than you.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429883\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533701878\u0022 data-ipsquote-userid=\u0022183218\u0022 data-ipsquote-username=\u0022Cheif Operations Director\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, Cheif Operations Director said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n%_\u002Bseconds% is an operation that locks out the processing of the program until the time inserted has been completed off example %\u002B5seconds% will mean the program will wait 5 seconds before doing anything else in the program\n\u003C/p\u003E\n\u003Cp\u003E\ntrigger folder_____ allows you to let a certain folder complete an operation without having to process the folder until it\u0027s needed. In reference to my example \u0022engine1\u0022 would be in practice, throttle engine too 75%. \u0022engine2\u0022 would be 50% throttle and \u0022engine3\u0022 would be 100% throttle\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYour \u0022folder\u0022 sounds suspiciously like what is usually called a \u0022function\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nDo yourself a favor and pick an off the shelf microcontroller\u00A0that has all the tools already made and ready for usage. Or better yet...\n\u003C/p\u003E\n\u003Cp\u003E\nThere are several options of entire development environments\u00A0based on different microcontrollers, two of the most popular options for hobbyist are Arduino and PIC, based on\u00A0Atmel\u0027s Atmega series micros and Microchip\u0027s stuff, respectively.\n\u003C/p\u003E\n\u003Cp\u003E\nFor example, for Arduino a command for the software to stop doing everything and wait for 5 seconds before doing something else is as simple as\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Edelay (5000);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n... but you should try to avoid using that approach, there are better ways of writing code that don\u0027t block everything else.\n\u003C/p\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-08-08T08:21:39Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429925\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533713603\u0022 data-ipsquote-userid=\u002245577\u0022 data-ipsquote-username=\u0022Shpaget\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n39 minutes ago, Shpaget said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAgain, we have the XY problem here.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYup.\u00A0 Dead on here.\u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWhy reinvent the wheel?\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nLIke \u003Cspan\u003EShpaget said, there a numerous applications already out there that do what you want already.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EAnything you create, in a new language, has two goals to hit:\u00A0 \u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E1) It must be easier to create it from scratch than learn an already existing one.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E2) It must be superior on it\u0027s intended function than anything already existing.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EIf you can\u0027t reach both of those goals, then don\u0027t do it.\u00A0\u00A0 Unless the goal is to create a new language from scratch for the sake of it, there really isn\u0027t a reason to.\u00A0 \u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003ETake a look at Arduino.\u00A0 It\u0027s super easy to use, pretty dang powerful with some practice, and really has no limits.\u00A0\u00A0\u00A0 It\u0027s also cheap, really cheap.\u00A0 For almost anything you\u0027d want to do with a model rocket, an arduino or one of it\u0027s cousins would be perfect for it.\u00A0 \u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EThey make beginners Arduino Kits, take a look at picking one up.\u00A0 The Arduino for Dummies book is excellent, and if you don\u0027t want to buy a book, there are many many tutorials on the web.\u00A0 \u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-08T10:01:29Z","Content":"\n\u003Cp\u003E\ni wrote a crappy virtual machine and macro-assembler of same (which i havent finished so i still have to hand assemble things). everything was broken down into 2 byte commands, often in command:payload order. it had 4 8-bit data registers and 2 8-bit pointer registers. 2 more bytes served as the status/control registers. address space is mapped out to 256 byte pages. like i had a 512 byte eeprom that was divided up into 2 pages. first one being read only and the second being writable. i also threw in a page of ram. i have it setup to handle 16 pages right now but i can quadruple it before its a problem (i have room in the scr). the page system made it really simple to add memory devices. in fact one of the first programs i wrote was a driver for an sd card reader that fit in one page. all the driver really did was turned on the spi bus and sent the right bytes to configure a device on the end, and then one more command to map a page to it. after that i could load code and data from anywhere. and it need not be limited to memory devices, like you could do a driver for an spi radio and get code remotely. \u00A0it only had 92 instructions and is actually very simple.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nunfortunately i decided i didnt like the 2 byte commands and started rethinking it with one byte commands, with variable byte payloads. i stopped working on it shortly there after. it was already kind of workable and did what i wanted (storing control mappings for input devices and rc stuffs). never finished the macro assembler. it could handle, subroutines,\u00A0but that was about it, i had plans to handle control structures and jumps,\u00A0i wanted to have a whole language but i lost interest. the compiler was written in lua of all things, mostly because i love its pattern matching libraries, great for parsing assembly-like mnemonics and formatted data,\u00A0and convert it to 2-byte opcodes which it stores to an \u0022executable\u0022\u00A0file that\u00A0can be uploaded to the mcu if need be. routines existed to load code over serial if i wanted to copy over new code. i would have to short a pin to ground (with a button) on start up to get it into a serial console. then i could directly read and write to any attatched memory pages. this is why the eeprom became the boot sector of sorts, since i could load code to it, reboot and start with different code.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\ni mostly intended to use it for control mapping. one of the downsides to the mcu i was using was that you could only load code from flash. you could write a bootloader to let you page in code from other sources into flash, but its generally a bad idea to waste a write cycle every time you changed your profile (mtbf was only\u00A010k write cycles). but i didnt need the code to be fast so i went the interpreter route. eeprom is rated for 10x more cycles than the flash for some reason so i could use that for storage of settings and code. memory would just be a page of ram. i could add pages for more storage locations or even device io as needed.\u00A0this was to replace the old state machine which just stored and loaded config files to the eeprom. there was a state machine for handling all the ins/outs, a config file parser and a serial command parser as well, all this is replaced by a tiny virtual machine that took up less space than the strings for the old serial command parser.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Nibb31","CreatedById":7272,"CreatedDateTime":"2018-08-08T16:17:01Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429883\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533701878\u0022 data-ipsquote-userid=\u0022183218\u0022 data-ipsquote-username=\u0022Cheif Operations Director\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 hours ago, Cheif Operations Director said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m very new to the realm of computers.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThen writing your own computer language probably isn\u0027t the easiest way to familiarize yourself with them.\n\u003C/p\u003E\n\u003Cp\u003E\nTypically, the aerospace industry uses embedded computers that use C and Ada. They are designed for reliability, readability, and certification, which is expensive. This means that once the code is properly validated and certified, then they will avoid touching it unless it is absolutely necessary.\n\u003C/p\u003E\n\u003Cp\u003E\nThere are several layers to what you want to do:\n\u003C/p\u003E\n\u003Cp\u003E\n- First you need some sort of low-level bus control software between the computer hardware and the flight controls that you want to activate (control surfaces, motors, hydraulics, engines, etc...).\n\u003C/p\u003E\n\u003Cp\u003E\n- Then you need to code a layer that will convert functions in the code into those hardware output commands (\u0022engine throttle 35%\u0022 means reconfiguring the turbopump, opening or closing valves, checking that values are valid, etc...)\n\u003C/p\u003E\n\u003Cp\u003E\n- Then you need to the code the layer that takes input from the controls and converts those commands to call the functions above. The control can be a physical button or lever, a series of sensors, or a programmed flight script.\n\u003C/p\u003E\n\u003Cp\u003E\nThe script parser and interpreter, and designing the syntax, are probably the easiest bits to code once you have laid out the proper functions to call. Of course, if you have zero coding experience already, this is all going to be extremely difficult.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429964\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533722489\u0022 data-ipsquote-userid=\u002210883\u0022 data-ipsquote-username=\u0022Nuke\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, Nuke said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nunfortunately i decided i didnt like the 2 byte commands and started rethinking it with one byte commands, with variable byte payloads.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSounds like the \u0022verb\u0022 \u002B \u0022noun\u0022 command architecture for the Apollo AGC.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-08T16:21:05Z\u0022 title=\u002208/08/2018 04:21  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 8, 2018\u003C/time\u003E by Nibb31\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-08-08T16:26:05Z","Content":"\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nWhen I had quickly created an interpreted script language for some particular task, I reinvented Fortran 77.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s strange because in childhood I used Fortran IV\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nArduino is good and uses a C-like language.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-08T16:27:57Z\u0022 title=\u002208/08/2018 04:27  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 8, 2018\u003C/time\u003E by kerbiloid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Vexillar","CreatedById":178802,"CreatedDateTime":"2018-08-08T17:37:27Z","Content":"\n\u003Cp\u003E\nThis wouldn\u0027t be at all easy.\u00A0 There are a lot of things to work out before you can start coding an interpreter or compiler.\n\u003C/p\u003E\n\u003Cp\u003E\nFirstly - what computer hardware do you want to program?\u00A0 Is the computer physical or virtual (or perhaps an emulation)?\u00A0 How will the computer interface to things in the \u0022real\u0022 world - or put another way, what will the computer control?\u00A0 What firmware / monitor / operating system will run on the computer under your ?\u00A0 What programming tools does that offer?\u00A0 How will you store and retrieve the programs?\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want a simple computer to control real-world objects, then you might try one of the Arduino family.\u00A0 That is more in the \u0022microcontroller\u0022 end of the hardware spectrum - but it has lots of support for interfacing to hobby electronics and lots of tools.\u00A0 As \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/129408-kerbiloid/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022129408\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/129408-kerbiloid/\u0022 rel=\u0022\u0022\u003E@kerbiloid\u003C/a\u003E\u00A0says, it even comes with a ready-made language based on C.\u00A0 If you need something more like a PC, then take a look at the Raspberry Pi range.\u00A0 That is a Linux based micro computer with screen / mouse / keyboard and ethernet.\u00A0 There are various programming tools available, one popular one is Python.\n\u003C/p\u003E\n\u003Cp\u003E\nFrom there, you can start to get experience in writing programs and work your way up to something that can read in a set of instructions as text, \u0022parse\u0022 that (remember you need to handle any mistakes in the text) and then perform actions based on what you \u0022parsed\u0022.\u00A0 That is the essence of writing an interpreter.\u00A0 You can go a step further - if you then save the symbolic representation \u0022p-code\u0022 to a file, you can then load and execute the p-code without needing to re-parse each time.\u00A0 The next step up is to convert the p-code into the native machine code of the computer.\u00A0 Then you\u0027ve written yourself a compiler.\n\u003C/p\u003E\n\u003Cp\u003E\n(Yes, for the Computer Scientists among us, that\u0027s very simplified).\u00A0 Something like this would make a good undergrad project, definitely not for beginners.\n\u003C/p\u003E\n\u003Cp\u003E\nProbably you\u0027d find it easier to write the programs in one of the provided languages than make up your own, but let\u0027s not stifle creativity, eh?\u00A0\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u00A0 Whatever you decide to do, have fun!\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-08-08T17:43:31Z","Content":"\n\u003Cp\u003E\nWhenever I write my own scripting language, what comes out is usually some flavor of lisp. I\u0027m just usually too lazy to write an expression parser more involved than that. RPN makes ones life way easier. I\u0027ve written assemblers as well, including for my own VM, but that\u0027s way easier. Of course, real compiler authors would say that none of it even counts until you have optimization and linking.\n\u003C/p\u003E\n\u003Cp\u003E\nBut yeah, learn to program in C and x86-64 Assembly. Then you can start reading books on compilers to understand how to make your own. Trying to come up with your own language before learning how existing ones work is definitely a cart before carriage situation.\n\u003C/p\u003E\n"},{"CreatedByName":"Vexillar","CreatedById":178802,"CreatedDateTime":"2018-08-08T21:28:38Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223430120\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533750211\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nRPN makes ones life way easier.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n(Reverse Polish Notation) - quite right; all nicely stack-oriented.\u00A0 There\u0027s even a language whose entire syntax is based around RPN, called Forth.\n\u003C/p\u003E\n"},{"CreatedByName":"Mad Rocket Scientist","CreatedById":139256,"CreatedDateTime":"2018-08-08T22:26:59Z","Content":"\n\u003Cp\u003E\nIf you want to run this on an actual rocket, you might want to just implement this with functions in C or C\u002B\u002B and use an arduino. Arduino has delay() built in, which already does exactly what you want, and you could just define functions to do anything else.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOf course, even in trying to write your own language you would certainly learn a lot about programming, so if you\u0027re not concerned about making your rocket work quickly, it would work.\n\u003C/p\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2018-08-09T01:13:46Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429939\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533716499\u0022 data-ipsquote-userid=\u002264714\u0022 data-ipsquote-username=\u0022Gargamel\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 hours ago, Gargamel said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n2) It must be superior on it\u0027s intended function than anything already existing\u003Cspan\u003E\uFEFF\u003C/span\u003E.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWould you \u003Cem\u003Eplease\u003C/em\u003E explain this to Microsoft? I\u0027d be eternally grateful.\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2018-08-09T01:28:11Z","Content":"\n\u003Cp\u003E\nThe easiest option is probably to fake it by embedding an extremely simple interpreter in your own C program on Arduino. Something like\u00A0(beware, rusty buggy off-top-of-head 1990s-style C incoming)...\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E runcommand\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econst\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Echar\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ecommand\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Messy tangle of ad hoc command interpretation logic here\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E main\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Econst\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Echar\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emycommands\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022\u0026gt;hi\u0026lt;\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022%5seconds%\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022%\u002B5seconds% trigger folder \\\u0022engine1\\\u0022\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E/* etc. */\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E};\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Efor\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Esizeof\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emycommands\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)/\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Esizeof\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Echar\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    runcommand\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emycommands\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E]);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThat way you don\u0027t have to worry about a true parser or code generation or a symbol table, etc. You could write logic to implement the specific simple commands you want (basically a translation layer on top of Arduino), and then the \u0022program\u0022 you want as a big array of strings. For an amateur project this would be fairly workable, if likely to turn into a coding style nightmare after about 5 minutes.\n\u003C/p\u003E\n\u003Cp\u003E\n(EDIT: In case it matters, I release the above code into the public domain. You can do what you like with it.)\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-09T01:36:56Z\u0022 title=\u002208/09/2018 01:36  AM\u0022 data-short=\u00225 yr\u0022\u003EAugust 9, 2018\u003C/time\u003E by HebaruSan\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-08-09T02:06:04Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223430261\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533763718\u0022 data-ipsquote-userid=\u0022178802\u0022 data-ipsquote-username=\u0022Vexillar\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, Vexillar said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThere\u0027s even a language whose entire syntax is based around RPN, called Forth.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIndeed, but it feels a bit too much like BASIC for my tastes. I like the option of introducing some priority via parentheses, hence Lisp-like rather than Forth-like outcome.\n\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-09T03:56:30Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223430086\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533745021\u0022 data-ipsquote-userid=\u00227272\u0022 data-ipsquote-username=\u0022Nibb31\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, Nibb31 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSounds like the \u0022verb\u0022 \u002B \u0022noun\u0022 command architecture for the Apollo AGC.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nthats pretty much the same thing (also zork which uses its own vm). you couldnt change the source code once the old ladies weaved it into core rope. but you could include a virtual machine in that code which\u00A0the astronauts could work with through the dsky module. you could hear in some of the audio transcripts nasa working the astronauts through a programming operation over the radio. like the core ropes i cant change the contents of program memory at run time (i can write a bootloader so i can load part of the flash from elsewhere, but its strictly a boot time operation and you cant use it once you start running code). but i can include some basic rules for talking to the host processor. its mostly commands followed by static data or commands followed by pointers to the object you want to operate on, single commands that need to be padded out with an extra byte. one downside to the 2-byte fixed size command i was using.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nthats why i want to encode the expected length of the arguments in\u00A0the command byte if a certain init sequence\u00A0is present. but if the command needs to be followed by 3 bytes it can make sure all 3 are present before attempting to process the next command.\u00A0 but for now the 2 byte commands kind of work. for 16 bit numbers it could take up to 7\u00A0cycles just to add two numbers (4 byte loads,\u00A01 math op,\u00A02 byte stores), and each of those commands is 2 bytes for 14 bytes. using length encoding would make that take one up to set up the registers, one op to load all the data, one op to do the math and another op to store it, where 2 of those are 1 byte commands, one is a 5 byte command (loads all four registers), or with pointers it can be a 3 byte command, and the store is a 2-byte command\u002Bpointer, best case scenario is 7 bytes. given i only had a few hundred bytes of program space for the virtual machine, the denser format would work out better. i just need to implement it. since much of the code is x=y stuff, id need fast load immediate commands that wouldnt waste an equal number of command bytes in the process. pointers are just one byte and only work on the current page of memory only. to move data from one page to the other you would need to load it into the 4 registers, change page, and read it back out again, 32 bits at a time, there are no inter-page pointers. i might standardize a program header to manage inter page, inter program,\u00A0communication or maybe have a load byte from page command. or maybe do some unix-like piping from one page to another.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-09T04:21:08Z\u0022 title=\u002208/09/2018 04:21  AM\u0022 data-short=\u00225 yr\u0022\u003EAugust 9, 2018\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-08-09T07:22:38Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223430375\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533778091\u0022 data-ipsquote-userid=\u0022156657\u0022 data-ipsquote-username=\u0022HebaruSan\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, HebaruSan said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe easiest option is probably to fake it by embedding an extremely simple interpreter in your own C program on Arduino.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBut that\u0027s just re-inventing a wheel, and attaching it as a training wheel to the wheel you designed it on.\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022com\u0022\u003E// Messy tangle of ad hoc command interpretation logic here\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nBy the time they get that part figured out, it would have been much much easier to just use C in the arduino.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAs an exercise in learning how to make your own language, I\u0027d say go for it.\u00A0 There\u0027s no reason not to try!\u00A0\u00A0 But since you want a practical use from it, off the shelf stuff might be the better idea.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-09T07:24:41Z\u0022 title=\u002208/09/2018 07:24  AM\u0022 data-short=\u00225 yr\u0022\u003EAugust 9, 2018\u003C/time\u003E by Gargamel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sevenperforce","CreatedById":157695,"CreatedDateTime":"2018-08-09T12:10:00Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429925\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533713603\u0022 data-ipsquote-userid=\u002245577\u0022 data-ipsquote-username=\u0022Shpaget\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 8/8/2018 at 3:33 AM, Shpaget said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223429883\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533701878\u0022 data-ipsquote-userid=\u0022183218\u0022 data-ipsquote-username=\u0022Cheif Operations Director\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 8/8/2018 at 12:17 AM, Cheif Operations Director said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m very new to the realm of computers. Instead of using the traditional methods of coding I figured I would use my own code because why not.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBecause coming up with a brand new language is a lot more work than just taking a ready made language and compiler and work with stuff that\u0027s been bugfixed and developed for many years by individuals far more experienced and skilled than you.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis.\n\u003C/p\u003E\n"},{"CreatedByName":"wumpus","CreatedById":133850,"CreatedDateTime":"2018-08-09T13:31:13Z","Content":"\n\u003Cp\u003E\n[deleted]\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-09T14:56:33Z\u0022 title=\u002208/09/2018 02:56  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 9, 2018\u003C/time\u003E by wumpus\u003C/strong\u003E\n\u003Cbr\u003Edidn\u0026#039;t realize how long the thread got, and OP explained other issues.\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2018-08-09T14:37:01Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223430478\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221533799358\u0022 data-ipsquote-userid=\u002264714\u0022 data-ipsquote-username=\u0022Gargamel\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, Gargamel said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBut that\u0027s just re-inventing a wheel, and attaching it as a training wheel to the wheel you designed it on.\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022com\u0022\u003E// Messy tangle of ad hoc command interpretation logic here\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nBy the time they get that part figured out, it would have been much much easier to just use C in the arduino.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBut \u0022how do I build a program in C\u0022 is not the \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E\u0027s question. We can advise against what he\u0027s asking\u00A0all we like, but nothing is as effective as trying it and seeing for himself.\n\u003C/p\u003E\n"},{"CreatedByName":"sevenperforce","CreatedById":157695,"CreatedDateTime":"2018-08-09T15:19:24Z","Content":"\n\u003Cp\u003E\nAt the very least, one should be proficient in at least one programming language before trying to \u003Cs\u003Elearn\u003C/s\u003E \u003Cu\u003Ecreate\u003C/u\u003E another.\n\u003C/p\u003E\n\u003Cp\u003E\nC\u002B\u002B is very easy.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-09T15:23:08Z\u0022 title=\u002208/09/2018 03:23  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 9, 2018\u003C/time\u003E by sevenperforce\u003C/strong\u003E\n\u003Cbr\u003Efixed that\n\u003C/span\u003E\n"}]}