{"TopicId":177400,"ForumId":44,"TopicTitle":"Making your own code","CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-08T00:53:20Z","PageNum":5,"Articles":[{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-15T20:15:18Z","Content":"\n\u003Cp\u003E\nI don\u0027t see what\u0027s outdated there. It depends on what and how you program. Sure, some things can be much faster executed in C\u002B\u002B than C, especially when using STL routines, template programming and allowing to compiler to inline what can be inlined, nobody said otherwise, but for an interpreter C is more than enough. And for a young aspiring guy it is much easier to learn and leads to earlier success than digging through C\u002B\u002B. It is a good idea.\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: what do you guys think (or know :-)) is the reason for C\u0027s comeback in the last few years ?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-15T20:19:30Z\u0022 title=\u002208/15/2018 08:19  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 15, 2018\u003C/time\u003E by Green Baron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2018-08-15T20:22:39Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223434368\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534362760\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n39 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis is a somewhat dated view. Compilers got a lot better, and standard enforces some good rules that lead to better optimization now. There isn\u0027t a reason to chose C over C\u002B\u002B for performance anymore. Of course, you have to know how to write in C\u002B\u002B without relying on standard libraries if you\u0027re going to writer drivers or OS code, and when writing for performance, know which standard library calls do expensive error checking.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\ntheres no reason c\u002B\u002B cant be as fast as c. its just easy to bog yourself down in oop overhead. its not a lot of overhead (especially with so much code running on vms as opposed to being compiled). of course the thing i like about c\u002B\u002B is that it doesn\u0027t force you to use classes for everything. you can run your oop code and use functional code when you really need to push it.\u00A0i actually went and looked at my interpreter code. the entire vm\u00A0is pretty much wrapped up into a single c\u002B\u002B class, its actually very lightweight since i wrote it to run on an 8-bit mcu. its just full of a lot of low level stuff that wouldn\u0027t look out of place in\u00A0c.\n\u003C/p\u003E\n\u003Cp\u003E\nc is still a good choice for those tasks though. even if not for performance reasons (performance in this case has more to do with the programmer than the language they are using). for one its good to approach a low level problem with a low level language, and c is about as low as you can go before you have to start using asm.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-08-15T20:35:19Z\u0022 title=\u002208/15/2018 08:35  PM\u0022 data-short=\u00225 yr\u0022\u003EAugust 15, 2018\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-08-16T00:08:28Z","Content":"\n\u003Cp\u003E\nTo sum up this thread.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIf you are thinking about writing your own programming language, have read this thread, and understood at least 80% of what each and every post was talking about, then you are probably read to tackle your own language.\u00A0\u00A0 If you didn\u0027t, then you are not. \u00A0\u00A0\u00A0\u003Cspan\u003E\u003Cimg alt=\u0022:D\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 title=\u0022:D\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-08-16T00:36:10Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223434378\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534364118\u0022 data-ipsquote-userid=\u0022107381\u0022 data-ipsquote-username=\u0022Green Baron\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, Green Baron said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n[...] for an interpreter C is more than enough. And for a young aspiring guy it is much easier to learn and leads to earlier success than digging through C\u002B\u002B.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf you mean, C is easier to learn and use efficiently for somebody who\u0027s new to programming in general, with a goal of writing a simple command interpreter, then yes, I agree. What I was saying is that reason that existing interpreters, ones that were written by people you can\u0027t call amateurs by any measure, were written in C are largely outdated. I guess, we were talking about different things.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223434382\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534364559\u0022 data-ipsquote-userid=\u002210883\u0022 data-ipsquote-username=\u0022Nuke\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, Nuke said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nc is still a good choice for those tasks though. even if not for performance reasons (performance in this case has more to do with the programmer than the language they are using). for one its good to approach a low level problem with a low level language, and c is about as low as you can go before you have to start using asm.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nC will result in a whole lot of repetitive code that can be minimized with templates. Consider a task of writing a \u003Ca href=\u0022https://www.masswerk.at/6502/6502_instruction_set.html\u0022 rel=\u0022external nofollow\u0022\u003E6507\u003C/a\u003E VM for an Atari emulator. It has a 1 byte instructions, so short of transpiling or JITing, your best bet for good performance is to simply have a 256 instruction lookup table filled with function pointers. But a lot of the instructions in the table are going to be essentially the same code, with variations on which registers it operates on. Each instruction that operates on memory, for example, will have a version that operates on the zero page. And while you can write each operation\u00A0function to include conditionals based on specific op code, that results in a lot of unnecessary thrashing on every single byte of code. In practice, what you want is to have each entry in your instruction map to point to a simple, linear code. That results in very good prediction performance. The C solution is to either write a separate function for each instruction, which takes a lot of time, hard to read, and hard to debug. Or you can write macros, which will take longer to write, be harder to read, and even harder to debug. \u003Cspan\u003E\u003Cimg alt=\u0022:/\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/ZNGIcon1.png\u0022 title=\u0022:/\u0022\u003E\u00A0Or you just byte the bullet, write messy switch for each instruction, and hope that performance just won\u0027t matter for such a project. (Which is probably true, but it still stings.)\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EYour other option is to write templated code in C\u002B\u002B. In this case, you can pull all of your register and memory code into common templated structs with getters and setters, which, being templated statics, will get inlined in each version of your operation. And now you write just one version of ADD instruction, templatized on memory/register type, that uses the same getters/setters as every other instruction. You end up with clean, readable code that is very cache and pipeline friendly, and performs as well as if you\u0027ve written the interpreter in assembly.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EOf course, if you\u0027re making your own scripting language, you can design its features around being friendly to simple C code. Whether or not that\u0027s a limitation in any particular case will depend. But there are definitely good reasons to bring out heavy guns for interpreter if you aren\u0027t squeamish about templates. The C\u002B\u002B20 concepts will make this\u00A0even better.\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Cheif Operations Director","CreatedById":183218,"CreatedDateTime":"2018-08-16T01:31:36Z","Content":"\n\u003Cp\u003E\nGood grief\n\u003C/p\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-16T07:10:53Z","Content":"\n\u003Cp\u003E\nHehe :-) It is not at all as complicated as it may seem here. People have mastered coding, are mastering coding and will continue to do so. Just start and be one of them !\n\u003C/p\u003E\n"},{"CreatedByName":"steve_v","CreatedById":69272,"CreatedDateTime":"2018-08-16T08:11:15Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223434488\u0022 data-ipsquote-contentid=\u0022177400\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221534378108\u0022 data-ipsquote-userid=\u002264714\u0022 data-ipsquote-username=\u0022Gargamel\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, Gargamel said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf you are thinking about writing your own programming language, have read this thread, and understood at least 80% of what each and every post was talking about, then you are probably read to tackle your own language.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf you have read this thread, and understood at least 80% of what each and every post was talking about, you\u0027ve probably already realised that it\u0027s a whole lot easier and more productive to learn an existing language than it is to write a new one. \u003Cspan\u003E\u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EI can see the appeal as a learning exercise, but for practical use, \u003Cem\u003Ewhy\u003C/em\u003E?\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Green Baron","CreatedById":107381,"CreatedDateTime":"2018-08-16T08:41:55Z","Content":"\n\u003Cp\u003E\nI think \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E wasn\u0027t aware initially. It happens that we ask questions that seem devious to the more experienced. That is natural.\n\u003C/p\u003E\n\u003Cp\u003E\nPeople do invent old wheels every day, for fun, exercise, practice, private use, etc. No problem ... \u003Cspan\u003E:-)\u003C/span\u003E\n\u003C/p\u003E\n"}]}