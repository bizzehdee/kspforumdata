{"TopicId":88348,"ForumId":44,"TopicTitle":"How does Aerodynamic Simulation work?","CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-10-24T00:40:05Z","PageNum":1,"Articles":[{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-10-24T00:40:05Z","Content":"\n\u003Cp\u003EObviously we all know how the stock Kerbal drag system is horrible and bad. We also know that FAR is a great replacement because it is able to work for a ship/plane of any shape.\u003C/p\u003E\u003Cp\u003EBut how does that work? How does it compare to \u003Ca href=\u0022https://en.wikipedia.org/wiki/X-Plane_(simulator)\u0022 rel=\u0022external nofollow\u0022\u003EX-Plane\u003C/a\u003E? X-Plane uses [\u003Ca href=\u0022https://en.wikipedia.org/wiki/Blade_element_theory\u0022 rel=\u0022external nofollow\u0022\u003EBlade Element Theory\u003C/a\u003E] the shape of the vehicle to simulate the air; while other simulators like \u003Ca href=\u0022https://en.wikipedia.org/wiki/Microsoft_Flight_Simulator_X\u0022 rel=\u0022external nofollow\u0022\u003EMicrosoft Flight Simulator \u003C/a\u003Eand \u003Ca href=\u0022https://en.wikipedia.org/wiki/Orbiter_(simulator)/\u0022 rel=\u0022external nofollow\u0022\u003EOrbiter\u003C/a\u003E use predefined conditions for each plane, making them useless for design work. Does FAR just use predefined conditions for each part to simulate craft on any shape, or does it do something more advanced?\u003C/p\u003E\u003Cp\u003EAnd how accurately does FAR model the real life aerodynamics?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-24T02:46:49Z\u0022 title=\u002210/24/2014 02:46  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 24, 2014\u003C/time\u003E by GregroxMun\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-10-24T08:02:08Z","Content":"\n\u003Cp\u003Elots of them use table lookup and interpolation between the two nearest samples (which is how math libraries handle things like trig and square roots). what i did (or rather started to do) was use simplified physics models for the vital parts of the aircraft, such as wings and fusalage segments. i then determine the four forces (thrust, drag, lift, gravity) operating on each one. linear forces just use the sum of all the forces on all physics models, i think angular forces just take the cross product between the position of the object and the force, and sum the results for all objects. it works for the most part, but its too simple to handle things like supersonic/hypersonic flight.\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2014-10-24T16:34:47Z","Content":"\n\u003Cp\u003EIf you want to know how FAR works you\u0027d be better off asking Ferram. He did some explaining in the FAR thread.\u003C/p\u003E\n"},{"CreatedByName":"paul23","CreatedById":120544,"CreatedDateTime":"2014-10-26T02:34:43Z","Content":"\n\u003Cp\u003ENormal simulations use FEA -finite element analysis-. Where they simply solve the differental equations numerically, there are many ways to solve \u003Ca href=\u0022https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations\u0022 rel=\u0022external nofollow\u0022\u003Edifferential equation numerically\u003C/a\u003E. The simplistic (and terrible, comparable to using bubble sort in programming) way is just calculate it step-by-step from an initial value (that\u0027s the forward euler method as described on the wikipedia article).\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-10-26T04:09:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022paul23\u0022 data-cite=\u0022paul23\u0022\u003E\u003Cdiv\u003ENormal simulations use FEA -finite element analysis-. Where they simply solve the differental equations numerically, there are many ways to solve \u003Ca href=\u0022https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations\u0022 rel=\u0022external nofollow\u0022\u003Edifferential equation numerically\u003C/a\u003E. The simplistic (and terrible, comparable to using bubble sort in programming) way is just calculate it step-by-step from an initial value (that\u0027s the forward euler method as described on the wikipedia article).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd if you try to apply this to a real wing, you\u0027ll watch the simulation fail miserably. The problem is that there are a crap ton of vortex states generated by any air foil, and they come in all shapes and sizes. So if you use a fixed grid FEA, you end up missing separation layer, and generating almost no lift. If you simply check for vortex condition and sub-tesselate your grid, you end up with too many elements to do anything with and your simulation stalls.\u003C/p\u003E\u003Cp\u003EWhat people really end up doing is a horrible monstrosity stitched from FEA, particles, and a whole bunch of heuristics. And they still, generally, end up working just for specific kinds of geometries. For a game, it might be sufficient to do laminar flow (inviscid, incompressible) FEA and hacking in a fake separation layer that\u0027s going to be treated as a boundary by your FEA. It won\u0027t be perfect, and you would never, ever do something like this for a proper engineering simulation, but it might be close enough for a simulation game.\u003C/p\u003E\u003Cp\u003EFluid dynamics is just one of these problems, you know?\u003C/p\u003E\u003Cp\u003EAs for FAR, I haven\u0027t looked at it too closely, but as far as I know, it\u0027s a relatively simple version of blade element with some pre-defined polars for the blade elements. Anything sensible for a game like KSP will be some variation on that, to be honest.\u003C/p\u003E\n"}]}