{"TopicId":125738,"ForumId":44,"TopicTitle":"Making every image possible","CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-17T18:58:07Z","PageNum":1,"Articles":[{"CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-17T18:58:07Z","Content":"\nHello there!\u003Cbr\u003E\n\u003Cbr\u003E\nA while a go a friend and I started a project in which we had the idea to make every combination of pixels so it would form one mega picture.\u003Cbr\u003E\n\u003Cbr\u003E\nThis sounds very vague and impossible perhaps but something similar happened to [URL]https://libraryofbabel.info/[/URL] \u003Cbr\u003E\n\u003Cbr\u003E\n\u0022[I]The universe (which others call the Library) is composed of an indefinite, perhaps infinite number of hexagonal galleries\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6The arrangement of the galleries is always the same: Twenty bookshelves, five to each side, line four of the hexagon\u0026#39;s six sides\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6each bookshelf holds thirty-two books identical in format; each book contains four hundred ten pages; each page, forty lines; each line, approximately eighty black letters.\u0022[/I]\u003Cbr\u003E\n\u003Cbr\u003E\nWith this lay out there are an near infinite (or so it seems) amount of possible sentences. I had a similar idea: Replace letters with pixels and pages/books with images.\u003Cbr\u003E\n\u003Cbr\u003E\nNow since I know there will be a lot of problems and challenges to face I thought it would be good to start off small:\u003Cbr\u003E\n[SIZE=4][B][I]\u003Cbr\u003E\nGoals:[/I][/B][/SIZE]\u003Cbr\u003E\n\u003Cbr\u003E\n[U]Colours and basic scale\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nComputer generate all combinations with:\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 2 colours: black and white\u003Cbr\u003E\n[IMG]https://upload.wikimedia.org/wikipedia/commons/6/66/Bilevel_1bit_palette.png[/IMG]\u003Cbr\u003E\n50x50 pixels with 2 colours: black and white\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 4 colours: black, dark grey, light grey and white\u003Cbr\u003E\n[IMG]https://upload.wikimedia.org/wikipedia/commons/3/35/Grayscale_2bit_palette.png[/IMG]\u003Cbr\u003E\n50x50 pixels with 4 colours: black, dark grey, light grey and white\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 8 colours: black, blue, green, cyan, red, pink, yellow and white\u003Cbr\u003E\n[IMG]https://upload.wikimedia.org/wikipedia/commons/e/ed/RGB_3bits_palette.png[/IMG]\u003Cbr\u003E\n50x50 pixels with 8 colours: black, blue, green, cyan, red, pink, yellow and white\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate colour/size goal:\u003Cbr\u003E\n\u003Cbr\u003E\n24 bit, 250x250 pixels\u003Cbr\u003E\n[/SIZE]\u003Cbr\u003E\n[U]\u003Cbr\u003E\nSearch and generation\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nUsing an algorithm to generate pixels, must be reversible so you can search from \u0026#39;shelve\u0026#39; to \u0026#39;page of a book\u0026#39; and the other way around of course.\u003Cbr\u003E\n\u003Cbr\u003E\nMake a program that generates pixels in the above algorithm\u003Cbr\u003E\n\u003Cbr\u003E\nMaybe use and (X, Y) coordination system(?):\u003Cbr\u003E\n[LIST]\u003Cbr\u003E\n[*]each pixel is a point \u003Cbr\u003E\n[*]each image is a point \u003Cbr\u003E\n[*]each section is a point \u003Cbr\u003E\n[/LIST]\u003Cbr\u003E\n\u003Cbr\u003E\nMake a \u0026#39;super picture\u0026#39; one big picture with all the pictures in it. The super picture and sub pictures could count as separate pictures[IMG]http://i57.tinypic.com/28v7nkh.jpg[/IMG]\u003Cbr\u003E\nthough this would take a lot of clicking if your picture is in the 5000th layer, perhaps making layers of 100 tiles (instead of the above 4 tiles on a layer)\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate search and algorithm goal:\u003Cbr\u003E\n\u003Cbr\u003E\nEasy to use search engine and reversible algorithm (which yields the same results every time)[/SIZE]\u003Cbr\u003E\n[U]\u003Cbr\u003E\nFinishing\u003Cbr\u003E\n\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nMaking the actual site (easier said than done)\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate Finalizing goal:\u003Cbr\u003E\n\u003Cbr\u003E\nMaking a slick looking site which functions well\u003Cbr\u003E\n\u003Cbr\u003E\n[B][SIZE=4]\u003Cbr\u003E\nUltimate Main goal:\u003Cbr\u003E\n\u003Cbr\u003E\nMaking a site which is able to generate every image and will yield the same result every time, and an easy to use user interface.[/SIZE][/B][/SIZE]\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nAll tips and criticism is welcome (as long as you tell what is right or wrong, not just \u0026#39;bad idea\u0026#39;)\n"},{"CreatedByName":"fredinno","CreatedById":143381,"CreatedDateTime":"2015-11-17T20:05:59Z","Content":"\n[quote name=\u0027ToukieToucan\u0027]Hello there!\u003Cbr\u003E\n\u003Cbr\u003E\nA while a go a friend and I started a project in which we had the idea to make every combination of pixels so it would form one mega picture.\u003Cbr\u003E\n\u003Cbr\u003E\nThis sounds very vague and impossible perhaps but something similar happened to [URL]https://libraryofbabel.info/[/URL] \u003Cbr\u003E\n\u003Cbr\u003E\n\u0022[I]The universe (which others call the Library) is composed of an indefinite, perhaps infinite number of hexagonal galleries\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6The arrangement of the galleries is always the same: Twenty bookshelves, five to each side, line four of the hexagon\u0026#39;s six sides\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6each bookshelf holds thirty-two books identical in format; each book contains four hundred ten pages; each page, forty lines; each line, approximately eighty black letters.\u0022[/I]\u003Cbr\u003E\n\u003Cbr\u003E\nWith this lay out there are an near infinite (or so it seems) amount of possible sentences. I had a similar idea: Replace letters with pixels and pages/books with images.\u003Cbr\u003E\n\u003Cbr\u003E\nNow since I know there will be a lot of problems and challenges to face I thought it would be good to start off small:\u003Cbr\u003E\n[SIZE=4][B][I]\u003Cbr\u003E\nGoals:[/I][/B][/SIZE]\u003Cbr\u003E\n\u003Cbr\u003E\n[U]Colours and basic scale\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nComputer generate all combinations with:\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 2 colours: black and white\u003Cbr\u003E\n[URL]https://upload.wikimedia.org/wikipedia/commons/6/66/Bilevel_1bit_palette.png[/URL]\u003Cbr\u003E\n50x50 pixels with 2 colours: black and white\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 4 colours: black, dark grey, light grey and white\u003Cbr\u003E\n[URL]https://upload.wikimedia.org/wikipedia/commons/3/35/Grayscale_2bit_palette.png[/URL]\u003Cbr\u003E\n50x50 pixels with 4 colours: black, dark grey, light grey and white\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n10x10 pixels with 8 colours: black, blue, green, cyan, red, pink, yellow and white\u003Cbr\u003E\n[URL]https://upload.wikimedia.org/wikipedia/commons/e/ed/RGB_3bits_palette.png[/URL]\u003Cbr\u003E\n50x50 pixels with 8 colours: black, blue, green, cyan, red, pink, yellow and white\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate colour/size goal:\u003Cbr\u003E\n\u003Cbr\u003E\n24 bit, 250x250 pixels\u003Cbr\u003E\n[/SIZE]\u003Cbr\u003E\n[U]\u003Cbr\u003E\nSearch and generation\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nUsing an algorithm to generate pixels, must be reversible so you can search from \u0026#39;shelve\u0026#39; to \u0026#39;page of a book\u0026#39; and the other way around of course.\u003Cbr\u003E\n\u003Cbr\u003E\nMake a program that generates pixels in the above algorithm\u003Cbr\u003E\n\u003Cbr\u003E\nMaybe use and (X, Y) coordination system(?):\u003Cbr\u003E\n[LIST]\u003Cbr\u003E\n[*]each pixel is a point\u003Cbr\u003E\n[*]each image is a point\u003Cbr\u003E\n[*]each section is a point\u003Cbr\u003E\n[/LIST]\u003Cbr\u003E\n\u003Cbr\u003E\nMake a \u0026#39;super picture\u0026#39; one big picture with all the pictures in it. The super picture and sub pictures could count as separate pictures[URL]http://i57.tinypic.com/28v7nkh.jpg[/URL]\u003Cbr\u003E\nthough this would take a lot of clicking if your picture is in the 5000th layer, perhaps making layers of 100 tiles (instead of the above 4 tiles on a layer)\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate search and algorithm goal:\u003Cbr\u003E\n\u003Cbr\u003E\nEasy to use search engine and reversible algorithm (which yields the same results every time)[/SIZE]\u003Cbr\u003E\n[U]\u003Cbr\u003E\nFinishing\u003Cbr\u003E\n\u003Cbr\u003E\n[/U]\u003Cbr\u003E\nMaking the actual site (easier said than done)\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n[SIZE=3]Ultimate Finalizing goal:\u003Cbr\u003E\n\u003Cbr\u003E\nMaking a slick looking site which functions well\u003Cbr\u003E\n\u003Cbr\u003E\n[B][SIZE=4]\u003Cbr\u003E\nUltimate Main goal:\u003Cbr\u003E\n\u003Cbr\u003E\nMaking a site which is able to generate every image and will yield the same result every time, and an easy to use user interface.[/SIZE][/B][/SIZE]\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nAll tips and criticism is welcome (as long as you tell what is right or wrong, not just \u0026#39;bad idea\u0026#39;)[/QUOTE]\u003Cbr\u003E\nYou have too much time on your hand.\n"},{"CreatedByName":"ZetaX","CreatedById":60692,"CreatedDateTime":"2015-11-17T20:46:33Z","Content":"\nIn principle you only need one thing: an invertible hash function. Then you use that function and interpret the output as a bitmap. One such function is to just take the index of the string in a lexicon, ordered lexicographically. Or easier to implement: interpret it as a Base36, Base64 or whatever_such_thing number and use that. Cryptography will give you many more that are not easily reverted.\u003Cbr\u003E\n\u003Cbr\u003E\nBut in reality this will lead to all pictures being very very boring (emptyness and/or noise). Such as the pages from your link: purely random gibberish.\n"},{"CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-17T21:04:00Z","Content":"\n[quote name=\u0027ZetaX\u0027]In principle you only need one thing: an invertible hash function. Then you use that function and interpret the output as a bitmap. One such function is to just take the index of the string in a lexicon, ordered lexicographically. Or easier to implement: interpret it as a Base36, Base64 or whatever_such_thing number and use that. Cryptography will give you many more that are not easily reverted.\u003Cbr\u003E\n\u003Cbr\u003E\nBut in reality this will lead to all pictures being very very boring (emptyness and/or noise). Such as the pages from your link: purely random gibberish.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThanks that looks very interesting (and helpful) though I\u0026#39;ll need to look up what all those terms mean (okay, I looked the terms up but still don\u0026#39;t really get all those terms, I would appriciate it if you could explain them a bit less technical since I know basicly nothing about computer science) . About the second part: I do understand that there will be a lot of noise but if you were to find a \u0022real\u0022 image (what would define a real image? Something that looks like an easily recognizable object or just a general shape? I guess you could say the noise is just as real as an image of a nice vase since they were both generated and that there was no specific intention of making \u0026#39;that\u0026#39; image) then it would feel like you\u0026#39;ve found a treasure.\u003Cbr\u003E\n\u003Cbr\u003E\nBut yes noise is also part of the I guess you could call it an artwork.\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-17T21:15:18Z\u0022 title=\u002211/17/2015 09:15  PM\u0022 data-short=\u00228 yr\u0022\u003ENovember 17, 2015\u003C/time\u003E by ToukieToucan\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"InterCity","CreatedById":98462,"CreatedDateTime":"2015-11-17T21:31:15Z","Content":"\nWell, I\u0026#39;m not a programmer (just a doctor), but your basic concept seems correct. From my experience with java, I\u0026#39;d advise you to give each colour a number code like this:\u003Cbr\u003E\n\u003Cbr\u003E\n[CODE]\u003Cbr\u003E\nint Black = 1;\u003Cbr\u003E\nint White = 0;\u003Cbr\u003E\nint Red = 2;\u003Cbr\u003E\nint Blue = 3;\u003Cbr\u003E\nint Green = 4;\u003Cbr\u003E\n.\u003Cbr\u003E\n.\u003Cbr\u003E\n.\u003Cbr\u003E\n[/code] \u003Cbr\u003E\n\u003Cbr\u003E\nThen dump it in an XML?\u003Cbr\u003E\n\u003Cbr\u003E\n[code]\u003Cbr\u003E\n\u0026lt;Picture\u0026gt;\u003Cbr\u003E\n\u0026lt;column\u0026gt;\u003Cbr\u003E\n1.0.0.1.0.1.0.1.0.1\u003Cbr\u003E\n\u0026lt;/column\u0026gt;\u003Cbr\u003E\n\u0026lt;column\u0026gt;\u003Cbr\u003E\n/* ... */\u003Cbr\u003E\n\u0026lt;/column\u0026gt;\u003Cbr\u003E\n\u0026lt;/picture\u0026gt;\u003Cbr\u003E\n...\u003Cbr\u003E\n[/code]\u003Cbr\u003E\n\u003Cbr\u003E\nIn my experience, the XML is much easier to work with than a bitmap, and you can get that bitmap by just making the program read the XML and dump it there. If you want to get the single ints, just use some equivalent of String.split() (In PHP it\u0026#39;s explode(), IIRC) and the \u0022matches()\u0022 keyword (preg_match in PHP) to get it together.\u003Cbr\u003E\nHope this helps...\n"},{"CreatedByName":"0111narwhalz","CreatedById":110660,"CreatedDateTime":"2015-11-17T22:44:05Z","Content":"\nSo, (2[SUP]24[/SUP])*250[SUP]2[/SUP], or 1.048576*10[SUP]12[/SUP] images. Each pixel would need 64 bits to contain its entire information (24 for colour, 8 for X-coord, 8 for Y-coord). There\u0026#39;s 62500 pixels, so 64*250[SUP]2[/SUP] bits, or 4000000 bits if you define each pixel individually. That means you could have as many as 4.194304*10[SUP]18[/SUP] bits in total. This\u0026#39;ll be ~4Eb, or 500TB. Of course, this is assuming that each pixel has a coordinate, rather than a continual stream of color (and Kraken help you if you miss a bit). Considering that few (if any) hard drives greater than 100TB exist, you\u0026#39;ll need at least 6 drives to store your Library. Now, if you had an algorithm, then you could simply get an index number which would generate your image. But the algorithm might be...entertaining to write.\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2015-11-17T23:04:08Z","Content":"\n[quote name=\u0027ToukieToucan\u0027]Now since I know there will be a lot of problems and challenges to face I thought it would be good to start off small\u003Cbr\u003E\n(...)\u003Cbr\u003E\n(...)\u003Cbr\u003E\n50x50 pixels with 8 colours: black, blue, green, cyan, red, pink, yellow and white\u003Cbr\u003E\n(...)\u003Cbr\u003E\n24 bit, 250x250 pixels\u003Cbr\u003E\n[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nYou\u0026#39;re joking, right?\u003Cbr\u003E\n\u003Cbr\u003E\n1 pixels, 24 bits [I]alone[/I] is already 2[sup]24[/sup] combinations, or equal to 16,777,216 combinations. Then you want to do [I]each[/I] of those 16 million combinations over a grid of 256 * 256 (let\u0026#39;s round up to the nearest power of two) pixels or 2[sup]16[/sup] pixels in total (65,536). Now, [I]each[/I] of those pixels can have those 16 million combinations, so you get a total of (2[sup]24[/sup])[sup]2[sup]16[/sup][/sup] combinations. That\u0026#39;s... a lot.\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-11-18T01:38:59Z","Content":"\nYou do realize that people who have made that site have already made an image version of it, right?\n"},{"CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-18T14:01:06Z","Content":"\n[quote name=\u0027K^2\u0027]You do realize that people who have made that site have already made an image version of it, right?[/QUOTE]\u003Cbr\u003E\nThough making your own is the challenge...\n"},{"CreatedByName":"wumpus","CreatedById":133850,"CreatedDateTime":"2015-11-18T15:55:13Z","Content":"\n[quote name=\u0027K^2\u0027]You do realize that people who have made that site have already made an image version of it, right?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nDepends. Do you mean they decode the image for you or you simply feed the random number generator to your image browser. If the later, you could claim they already have a movie version as well.\u003Cbr\u003E\n\u003Cbr\u003E\nWe had a movie version in the twentieth century. We called it \u0022static\u0022 and sometimes saw it on TV. You might still hear the audio parts sometime.\n"},{"CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-18T16:02:48Z","Content":"\n[quote name=\u0027wumpus\u0027]Depends. Do you mean they decode the image for you or you simply feed the random number generator to your image browser. If the later, you could claim they already have a movie version as well.\u003Cbr\u003E\n\u003Cbr\u003E\nWe had a movie version in the twentieth century. We called it \u0022static\u0022 and sometimes saw it on TV. You might still hear the audio parts sometime.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nVery interesting, though the movie/static version would be infinitly bigger than the picture version since every frame will be different (or the same if you\u0026#39;re lucky) and say you have 60 frames per second and a 10 second movie you\u0026#39;d have 600 pictures which would all be random.\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-11-18T22:58:32Z","Content":"\n[quote name=\u0027wumpus\u0027]Depends. Do you mean they decode the image for you or you simply feed the random number generator to your image browser.[/QUOTE]\u003Cbr\u003E\nYou can provide it with the image, and it will give you a seed that generates it. You can also use random seed, which does, indeed, produce static. But that\u0026#39;s exactly the same behavior as the text version.\n"},{"CreatedByName":"CleverWalrus","CreatedById":11812,"CreatedDateTime":"2015-11-19T19:35:12Z","Content":"\nHello ToukieToucan,\u003Cbr\u003E\n\u003Cbr\u003E\nSend me a PM with your skype or email address.\u003Cbr\u003E\nI\u0026#39;ll gladly spend a few hours helping your out with your project, it\u0026#39;s complex but not as much as you think.\u003Cbr\u003E\n\u003Cbr\u003E\nPS: Storing the images is a very bad idea, you would need a huge storage. I would simply generate them on the fly from an hash.\n"},{"CreatedByName":"ToukieToucan","CreatedById":150771,"CreatedDateTime":"2015-11-19T20:38:58Z","Content":"\nI\u0026#39;ll PM you my email, though I was not planning to store all the images but was more going to rely on pseudo random generators so the generator will always give the same results (as I understand).\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-21T17:27:14Z","Content":"\nThat won\u0026#39;t be enough. Pseudo RNGs usually gives a \u0026#39;random\u0026#39; values in the form of a 32 or 64 bit floating point numbers.\u003Cbr\u003E\n\u003Cbr\u003E\nAs Kerbart in post #7 wrote correctly there\u0026#39;ll be (2[SUP]24[/SUP])[SUP]2[SUP]16[/SUP][/SUP] (~1.55 * 10^231) possible pixel combinations and you need an RNG which can output all of these combinations. But floating point numbers are limited in precision, they can\u0026#39;t store that many different values. The computer will round them to the next number it can store in a memory.\u003Cbr\u003E\n\u003Cbr\u003E\nYou\u0026#39;ll need an RNG which works with so-called \u0026#39;big integers\u0026#39;. Afaik there\u0026#39;s none and big integers are [I]slow[/I]. Also the number of combinations are so huge that you\u0026#39;ll see patterns in the generated data caused by the design of the RNG algorithm (that\u0026#39;s one of the reasons why they are called [I]pseudo[/I] random).\u003Cbr\u003E\n\u003Cbr\u003E\nAfaik there\u0026#39;re no RNGs which can handle that large numbers. You\u0026#39;ll need to come up with your own one.\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-21T17:39:26Z","Content":"\nWe already have a way of uniquely identifying every possible image with a specific number. It\u0026#39;s called a bitmap.\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-21T17:41:17Z","Content":"\nThat is already ruled out. You would need 500 TB storage for it.\n"},{"CreatedByName":"ZetaX","CreatedById":60692,"CreatedDateTime":"2015-11-21T17:47:17Z","Content":"\n[quote name=\u0027*Aqua*\u0027]You\u0026#39;ll need an RNG which works with so-called \u0026#39;big integers\u0026#39;. Afaik there\u0026#39;s none and big integers are [I]slow[/I]. Also the number of combinations are so huge that you\u0026#39;ll see patterns in the generated data caused by the design of the RNG algorithm (that\u0026#39;s one of the reasons why they are called [I]pseudo[/I] random).[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThat\u0026#39;s all wrong. The principles RNGs are based on generalize to arbitrarily high number. See for example the Mersenne twister, but almost any other should do. You might have to find some library or code it yourself (depending on what language you use), though.\u003Cbr\u003E\nFor some older ones (quadratic congruential generators and such) you might get patterns, but modern ones are made to avoid those as good as possible. Even if there are patterns, they would only be visible after huge amount of uses, where \u0022huge\u0022 is a number much bigger than the number if requests I expect that page to get (or, if done right, higher than the amount of atoms in this planet).\u003Cbr\u003E\n\u003Cbr\u003E\nBig integers are a non-issue as well. Naive implmentations (of something like 100 000\u002B digit numbers) are slow, but we have fast fourier transform-based multiplication and such. But I don\u0026#39;t think you would even need that. Take a 1024 bit number, which is very small in comparision to what would already be possible, and you should never encounter a problem. That will be mroe than enough data per picture to work with.\u003Cbr\u003E\n\u003Cbr\u003E\nIn total, this is just an elaborate version of my first post on this.\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-22T10:58:06Z\u0022 title=\u002211/22/2015 10:58  AM\u0022 data-short=\u00228 yr\u0022\u003ENovember 22, 2015\u003C/time\u003E by ZetaX\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-21T17:52:43Z","Content":"\n[quote name=\u0027ZetaX\u0027]The principles RNGs are absed on generalize to arbitrarily high number.[/QUOTE]\u003Cbr\u003E\nMy dictionary doesn\u0026#39;t know \u0022absed\u0022. What does it mean?\n"},{"CreatedByName":"nohelmet","CreatedById":99742,"CreatedDateTime":"2015-11-22T02:13:46Z","Content":"\n[quote name=\u0027Yourself\u0027]We already have a way of uniquely identifying every possible image with a specific number. It\u0026#39;s called a bitmap.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nNailed it.\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-22T03:27:43Z","Content":"\n[quote name=\u0027*Aqua*\u0027]That is already ruled out. You would need 500 TB storage for it.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nIt is 100% impossible to assign a unique integer to every possible image without using at least as much memory as the bitmaps themselves. A bitmap is the smallest generic representation capable of encoding all possible images.\u003Cbr\u003E\n\u003Cbr\u003E\nIf you\u0026#39;re only interested in representing a small subset of all images, it\u0026#39;s easily possible to do better and there\u0026#39;s various techniques for doing so; just about any lossless compression algorithm will do. However, there is no single algorithm which is guaranteed to encode an arbitrary image using less space than a simple bitmap.\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027*Aqua*\u0027]My dictionary doesn\u0026#39;t know \u0022absed\u0022. What does it mean?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nIt\u0026#39;s a typo of \u0022based\u0022.\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-22T04:23:06Z","Content":"\nWait, are we talking about the same bitmap? I was under the impression that a bitmap image (.bmp) was meant.\n"},{"CreatedByName":"jf0","CreatedById":148341,"CreatedDateTime":"2015-11-22T05:13:27Z","Content":"\nThere is a \u0026#39;maths trick\u0026#39; that came to be called \u0026#39;Tuppers self referential formula\u0026#39;, that when plotted, apparently appears to draw a picture of itself. But it is actually just a method of decoding a given constant into a bitmap image. given the right constant it would \u0026#39;draw\u0026#39; any possible picture of a certain size. \u003Cbr\u003E\n\u003Cbr\u003E\nIf you want to go from a \u0026#39;number\u0026#39; to a bitmap, just take the bits that represent that number and interperet them as the bits of the bitmap. That is all a bitmap (image made of pixels) is. You will be dissapointed though, most will just look like random noise.\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-22T06:38:16Z","Content":"\n[quote name=\u0027*Aqua*\u0027]Wait, are we talking about the same bitmap? I was under the impression that a bitmap image (.bmp) was meant.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nYes, that\u0026#39;s what I\u0026#39;m referring to.\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027jf0\u0027]There is a \u0026#39;maths trick\u0026#39; that came to be called \u0026#39;Tuppers self referential formula\u0026#39;, that when plotted, apparently appears to draw a picture of itself. But it is actually just a method of decoding a given constant into a bitmap image. given the right constant it would \u0026#39;draw\u0026#39; any possible picture of a certain size. \u003Cbr\u003E\n\u003Cbr\u003E\nIf you want to go from a \u0026#39;number\u0026#39; to a bitmap, just take the bits that represent that number and interperet them as the bits of the bitmap. That is all a bitmap (image made of pixels) is. You will be dissapointed though, most will just look like random noise.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nIndeed. In fact, any file can be encoded as an integer. We sometimes joke at work that software engineering is just the practice of discovering large integers that happen to do what you want when you execute them as a program.\n"},{"CreatedByName":"ZetaX","CreatedById":60692,"CreatedDateTime":"2015-11-22T10:57:42Z","Content":"\n[quote name=\u0027*Aqua*\u0027]My dictionary doesn\u0026#39;t know \u0022absed\u0022. What does it mean?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\n*based (as someone already said)\n"}]}