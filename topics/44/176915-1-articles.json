{"TopicId":176915,"ForumId":44,"TopicTitle":"Probability Puzzle #2","CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-07-22T09:25:35Z","PageNum":1,"Articles":[{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-07-22T09:25:35Z","Content":"\n\u003Cp\u003E\nWith the other thread in mind:\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed9132678722\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/176822-probability-puzzle/\u0026amp;do=embed\u0022 style=\u0022height:226px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ll post up this question. Starting a new thread to keep the discussions separate, as they are different. \u00A0 Again some of you will get this quickly, some won\u0027t, so spoiler tags please if you don\u0027t mind.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSince we\u0027re on a PG rated forum, I\u0027m going to go less\u003Cem\u003E Deer Hunter\u003C/em\u003E here, and more \u003Cem\u003EToy Story\u003C/em\u003E.\u00A0 I believe I first read about this as one of those stupid interview questions the big tech companies used to ask.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou and a competitor are given a (one) revolver that has 6 chambers in the cylinder.\u00A0\u00A0 The Game master has loaded 2 bullets, in consecutive chambers into and spun the cylinder so that the chamber that rests under the firing hammer is random (purely random).\u00A0\u00A0 The gun is mounted so that when the trigger is pulled, it will always hit the target.\u00A0\u00A0\u00A0 The object of the game is to be the \u003Cem\u003E\u003Cstrong\u003Elast\u003C/strong\u003E\u003C/em\u003E person to hit the target.\u00A0 You have no way of knowing the location of the bullets in the cylinder.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nYou win the coin toss, and are allowed to choose if you want to shoot first or second.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat do you choose and why?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-22T09:26:01Z\u0022 title=\u002207/22/2018 09:26  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 22, 2018\u003C/time\u003E by Gargamel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Superfluous J","CreatedById":73725,"CreatedDateTime":"2018-07-22T09:46:59Z","Content":"\n\u003Cp\u003E\nIf somoene tells me that because of some sort of expectance-based theory of whateveritis that my analysis is incorrect, I\u0027m going to go all Deer Hunter on you.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWell there are 6 possibilities, B for Bullet, E for Empty:\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nBBEEEE - First pull shoots, first person loses.\n\u003C/li\u003E\n\u003Cli\u003E\nBEEEEB - First pull shoots, first person loses.\n\u003C/li\u003E\n\u003Cli\u003E\nEEEEBB - 5th pull shoots, first person loses.\n\u003C/li\u003E\n\u003Cli\u003E\nEEEBBE - 4th pull shoots, second person loses.\n\u003C/li\u003E\n\u003Cli\u003E\nEEBBEE - 3rd pull shoots, first person loses.\n\u003C/li\u003E\n\u003Cli\u003E\nEBBEEE - 2nd pull shoots, second person loses.\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nSo you want to go 2nd.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"mikegarrison","CreatedById":137807,"CreatedDateTime":"2018-07-22T09:49:29Z","Content":"\n\u003Cp\u003E\nThat one is really intuitively obvious.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n1/3 of the time the first person auto-loses. The other 2/3 of the time, it\u0027s 50/50 whether to go first or not. So going first means a 2/3 chance of losing.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-07-22T12:12:35Z","Content":"\n\u003Cp\u003E\nWho is the target?\n\u003C/p\u003E\n"},{"CreatedByName":"Xd the great","CreatedById":188222,"CreatedDateTime":"2018-07-22T12:43:29Z","Content":"\n\u003Cp\u003E\nShoot first?\n\u003C/p\u003E\n\u003Cp\u003E\nIf the hammer hits one of the bullet chamber, boom! I win.\n\u003C/p\u003E\n\u003Cp\u003E\nIf the hammer hits 2 or 4 spaces from the first bullet, I win.\n\u003C/p\u003E\n\u003Cp\u003E\nSo thats 4/6, or 2/3 of winning.\n\u003C/p\u003E\n\u003Cp\u003E\nCase closed.\n\u003C/p\u003E\n\u003Cp\u003E\nI assumed that the revolver cannot be spun and that it always rotates in the same direction, which is usually the normal life.\n\u003C/p\u003E\n"},{"CreatedByName":"magnemoe","CreatedById":57801,"CreatedDateTime":"2018-07-22T12:51:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223419991\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532252819\u0022 data-ipsquote-userid=\u002273725\u0022 data-ipsquote-username=\u00225thHorseman\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, 5thHorseman said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf somoene tells me that because of some sort of expectance-based theory of whateveritis that my analysis is incorrect, I\u0027m going to go all Deer Hunter on you.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Ca href=\u0022#\u0022 rel=\u0022\u0022\u003E\u00A0\u003C/a\u003E \u003Cspan\u003EHide contents\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWell there are 6 possibilities, B for Bullet, E for Empty:\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nBBEEEE - First pull shoots, first person loses.\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nBEEEEB - First pull shoots, first person loses.\u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nEEEEBB - 5th pull shoots, first person loses.\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nEEEBBE - 4th pull shoots, second person loses.\u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nEEBBEE - 3rd pull shoots, first person loses.\u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003E\nEBBEEE - 2nd pull shoots, second person loses\u003Cspan\u003E\uFEFF\u003C/span\u003E.\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nSo you want to go 2nd.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou are correct,\u00A0intuitive I wanted to go first, But see that second is far better as if first fire you win.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-07-22T21:49:47Z","Content":"\n\u003Cp\u003E\nYeah, this problem is solved by brute force the easiest. There\u0027s some clever math one can do to arrive at the same result, which may generalize better, but I don\u0027t see a reason to bother with it.\n\u003C/p\u003E\n"},{"CreatedByName":"Cunjo Carl","CreatedById":162109,"CreatedDateTime":"2018-07-22T23:16:33Z","Content":"\n\u003Cp\u003E\nHey, this was a fun one! I got a formula for probability I\u0027m happy with. I\u0027ll pose a follow-on question, though... Is it better for you if the ordeal is done with a 5-shooter or a 6-shooter?\n\u003C/p\u003E\n\u003Cp\u003E\nMy answer:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nProb for second player win = \u003Csup\u003E1\u002Bfloor(numChambers/2)\u003C/sup\u003E/\u003Csub\u003EnumChambers\u003C/sub\u003E\u003C/p\u003E\n\u003Cp\u003E\n6 shooter narrowly edges out 5.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-25T00:51:52Z\u0022 title=\u002207/25/2018 12:51  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 25, 2018\u003C/time\u003E by Cunjo Carl\u003C/strong\u003E\n\u003Cbr\u003EFixing a poor variable name choice. We\u0026#039;ve all been there!\n\u003C/span\u003E\n"},{"CreatedByName":"Superfluous J","CreatedById":73725,"CreatedDateTime":"2018-07-22T23:47:56Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420379\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532301393\u0022 data-ipsquote-userid=\u0022162109\u0022 data-ipsquote-username=\u0022Cunjo Carl\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n29 minutes ago, Cunjo Carl said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHey, this was a fun one! I got a formula for probability I\u0027m happy with. I\u0027ll pose a follow-on question, though... Is it better for you if the ordeal is done with a 5-shooter or a 6-shooter?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSame analysis I did for the first question below.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Col\u003E\u003Cli\u003E\nBBEEE - first loses\n\u003C/li\u003E\n\u003Cli\u003E\nBEEEB - first loses\n\u003C/li\u003E\n\u003Cli\u003E\nEEEBB - second loses\n\u003C/li\u003E\n\u003Cli\u003E\nEEBBE - first loses\n\u003C/li\u003E\n\u003Cli\u003E\nEBBEE -second loses\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nSo you still want to go second.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Reactordrone","CreatedById":110060,"CreatedDateTime":"2018-07-23T01:03:57Z","Content":"\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nif you label the chambers with rounds in as 1 and 2, if you go first the second shooter wins when the hammer drops first on chambers 6,4,2 and 1. That\u0027s four out of six so better to go second.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nSeems logical.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-23T07:03:07Z\u0022 title=\u002207/23/2018 07:03  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 23, 2018\u003C/time\u003E by Reactordrone\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-07-23T05:13:27Z","Content":"\n\u003Cp\u003E\nHeh-heh, formula-schmormula.\n\u003C/p\u003E\n\u003Cp\u003E\nOnly Monte-Carlo, only hardcore.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;vector\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;iostream\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;cstdlib\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ctime\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\nint const\n\tDEFAULT_TEST_COUNT = 100,\n\tDEFAULT_CHAMBER_COUNT = 6,\n\tDEFAULT_ROUND_COUNT = 2,\n\tDEFAULT_PLAYER_COUNT = 2;\n\nchar const\n\tMARK_EMPTY = \u0027.\u0027,\n\tMARK_LOADED = \u0027o\u0027,\n\n\tMARK_CLICK = \u0027.\u0027,\n\tMARK_BANG = \u0027*\u0027,\n\n\tSEPARATOR = \u0027\\t\u0027;\n\nstd::string const\n\tTXT_PLAYER = \u0022\\tPlayer #\u0022,\n\tTXT_WINS = \u0022 wins!\u0022,\n\n\tTXT_NO_CHAMPION = \u0022No champion.\u0022,\n\tTXT_CHAMPION = \u0022The champion is \u0022;\n\n\nclass CTest final\n\t{\n\tprivate:\n\n\t\tstatic std::vector \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_arrResult;\n\n\t\tstatic int m_nPlayerCount;\n\n\t\tint m_nWinner = -1;\n\n\t\tstd::vector \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;bool\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m_arrChamber;\n\n\tpublic:\n\n\t\tCTest(int const nChamberCount)\n\t\t\t{\n\t\t\tm_arrChamber.resize(nChamberCount, false);\n\t\t\t}\n\n\t\tstatic void run\n\t\t\t(\n\t\t\tint const nPlayerCount,\n\t\t\tint const nChamberCount,\n\t\t\tint const nRoundCount,\n\t\t\tint const nTestCount\n\t\t\t)\n\t\t\t{\n\t\t\tm_nPlayerCount = nPlayerCount;\n\n\t\t\tstd::srand(std::time(nullptr));\n\n\t\t\tm_arrResult.resize(nPlayerCount, 0);\n\n\t\t\tint nPlayerIndex;\n\n\t\t\tfor (int i = 0 ; i \u0026lt; nTestCount; \u002B\u002Bi)\n\t\t\t\t{\n\t\t\t\tCTest objTest(nChamberCount);\n\n\t\t\t\tobjTest.load(nRoundCount);\n\n\t\t\t\tstd::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; SEPARATOR;\n\n\t\t\t\tnPlayerIndex = objTest.runTest();\n\n\t\t\t\tm_arrResult[nPlayerIndex]\u002B\u002B;\n\n\t\t\t\tstd::cout \u0026lt;\u0026lt; TXT_PLAYER \u0026lt;\u0026lt; nPlayerIndex \u0026lt;\u0026lt; TXT_WINS \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; std::endl;\n\t\t\t\t}\n\n\n\t\t\tshowResult();\n\t\t\t}\n\n\n\t\tvoid load(int nRoundCount)\n\t\t\t{\n\t\t\tif (nRoundCount \u0026lt;= 0)\n\t\t\t\treturn;\n\n\t\t\tint const nChamberCount = m_arrChamber.size();\n\n\t\t\tif (nRoundCount \u0026gt;= nChamberCount)\n\t\t\t\t{\n\t\t\t\tm_arrChamber = std::vector \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;bool\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E (m_arrChamber.size(), true);\n\n\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\tint nChamberIndex = std::rand() % nChamberCount;\n\n\t\t\tfor (; nRoundCount \u0026gt; 0; --nRoundCount)\n\t\t\t\t{\n\t\t\t\tm_arrChamber[nChamberIndex] = true;\n\n\t\t\t\tif (\u002B\u002BnChamberIndex \u0026gt;= nChamberCount)\n\t\t\t\t\tnChamberIndex = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\tvoid showChambers()\n\t\t\t{\n\t\t\tfor (bool const bLoaded : m_arrChamber)\n\t\t\t\tstd::cout \u0026lt;\u0026lt; (bLoaded ? MARK_LOADED : MARK_EMPTY);\n\n\t\t\tstd::cout \u0026lt;\u0026lt; SEPARATOR;\n\t\t\t}\n\n\t\tint runTest()\n\t\t\t{\n\t\t\tshowChambers();\n\n\t\t\tbool bLoaded;\n\n\t\t\tint nPlayerIndex = 0;\n\n\t\t\tfor (int i = 0, n = m_arrChamber.size(); i \u0026lt; n; \u002B\u002Bi)\n\t\t\t\t{\n\t\t\t\tbLoaded = m_arrChamber.at(i);\n\n\t\t\t\tstd::cout \u0026lt;\u0026lt; (bLoaded ? MARK_BANG : MARK_CLICK);\n\n\t\t\t\tif (bLoaded)\n\t\t\t\t\treturn nPlayerIndex;\n\n\t\t\t\tif (\u002B\u002BnPlayerIndex \u0026gt;= m_nPlayerCount)\n\t\t\t\t\tnPlayerIndex = 0;\n\t\t\t\t}\n\n\t\t\treturn -1;\n\t\t\t}\n\n\n\t\tstatic void showResult()\n\t\t\t{\n\t\t\tint nResult, nMaxResult = -1;\n\n\t\t\tint const n = m_arrResult.size();\n\n\t\t\tfor (int i = 0; i \u0026lt; n; \u002B\u002Bi)\n\t\t\t\t{\n\t\t\t\tnResult = m_arrResult.at(i);\n\n\t\t\t\tif (nResult \u0026gt; nMaxResult)\n\t\t\t\t\tnMaxResult = nResult;\n\n\t\t\t\tstd::cout \u0026lt;\u0026lt; TXT_PLAYER \u0026lt;\u0026lt; i \u0026lt;\u0026lt; SEPARATOR \u0026lt;\u0026lt; nResult \u0026lt;\u0026lt; std::endl;\n\t\t\t\t}\n\n\t\t\tint nChampionIndex = -1;\n\n\t\t\tif (nMaxResult \u0026gt;= 0)\n\t\t\t\t{\n\t\t\t\tfor (int i = 0; i \u0026lt; n; \u002B\u002Bi)\n\t\t\t\t\t{\n\t\t\t\t\tnResult = m_arrResult.at(i);\n\n\t\t\t\t\tif (nResult \u0026lt; nMaxResult)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (nResult \u0026gt; nMaxResult)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tnChampionIndex = i;\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\tnChampionIndex = nChampionIndex \u0026lt; 0 ? i : -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tstd::cout \u0026lt;\u0026lt; std::endl;\n\n\t\t\tif (nChampionIndex \u0026gt;= 0)\n\t\t\t\tstd::cout \u0026lt;\u0026lt; TXT_CHAMPION \u0026lt;\u0026lt; TXT_PLAYER \u0026lt;\u0026lt; nChampionIndex;\n\t\t\telse\n\t\t\t\tstd::cout \u0026lt;\u0026lt; TXT_NO_CHAMPION;\n\n\t\t\tstd::cout \u0026lt;\u0026lt; std::endl;\n\t\t\t}\n\n\n\t};\n\n\nstd::vector \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;int\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E CTest::m_arrResult;\n\nint CTest::m_nPlayerCount = 0;\n\n\nint main()\n\t{\n\tCTest::run\n\t\t(\n\t\tDEFAULT_PLAYER_COUNT,\n\t\tDEFAULT_CHAMBER_COUNT,\n\t\tDEFAULT_ROUND_COUNT,\n\t\tDEFAULT_TEST_COUNT\n\t\t);\n\n\treturn 0;\n\t}\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nResults.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E0\to....o\t*\tPlayer #0 wins!\n\n1\t.oo...\t.*\tPlayer #1 wins!\n\n2\to....o\t*\tPlayer #0 wins!\n\n3\t...oo.\t...*\tPlayer #1 wins!\n\n4\too....\t*\tPlayer #0 wins!\n\n5\to....o\t*\tPlayer #0 wins!\n\n6\t.oo...\t.*\tPlayer #1 wins!\n\n7\to....o\t*\tPlayer #0 wins!\n\n8\to....o\t*\tPlayer #0 wins!\n\n9\t....oo\t....*\tPlayer #0 wins!\n\n10\to....o\t*\tPlayer #0 wins!\n\n11\t.oo...\t.*\tPlayer #1 wins!\n\n12\t..oo..\t..*\tPlayer #0 wins!\n\n13\t...oo.\t...*\tPlayer #1 wins!\n\n14\to....o\t*\tPlayer #0 wins!\n\n15\to....o\t*\tPlayer #0 wins!\n\n16\t...oo.\t...*\tPlayer #1 wins!\n\n17\t...oo.\t...*\tPlayer #1 wins!\n\n18\to....o\t*\tPlayer #0 wins!\n\n19\t...oo.\t...*\tPlayer #1 wins!\n\n20\t.oo...\t.*\tPlayer #1 wins!\n\n21\t.oo...\t.*\tPlayer #1 wins!\n\n22\t.oo...\t.*\tPlayer #1 wins!\n\n23\t.oo...\t.*\tPlayer #1 wins!\n\n24\too....\t*\tPlayer #0 wins!\n\n25\too....\t*\tPlayer #0 wins!\n\n26\t....oo\t....*\tPlayer #0 wins!\n\n27\t..oo..\t..*\tPlayer #0 wins!\n\n28\t..oo..\t..*\tPlayer #0 wins!\n\n29\to....o\t*\tPlayer #0 wins!\n\n30\t..oo..\t..*\tPlayer #0 wins!\n\n31\t....oo\t....*\tPlayer #0 wins!\n\n32\too....\t*\tPlayer #0 wins!\n\n33\t...oo.\t...*\tPlayer #1 wins!\n\n34\t...oo.\t...*\tPlayer #1 wins!\n\n35\t....oo\t....*\tPlayer #0 wins!\n\n36\t...oo.\t...*\tPlayer #1 wins!\n\n37\t...oo.\t...*\tPlayer #1 wins!\n\n38\t....oo\t....*\tPlayer #0 wins!\n\n39\to....o\t*\tPlayer #0 wins!\n\n40\to....o\t*\tPlayer #0 wins!\n\n41\t....oo\t....*\tPlayer #0 wins!\n\n42\t..oo..\t..*\tPlayer #0 wins!\n\n43\t...oo.\t...*\tPlayer #1 wins!\n\n44\t.oo...\t.*\tPlayer #1 wins!\n\n45\to....o\t*\tPlayer #0 wins!\n\n46\too....\t*\tPlayer #0 wins!\n\n47\t..oo..\t..*\tPlayer #0 wins!\n\n48\t....oo\t....*\tPlayer #0 wins!\n\n49\t...oo.\t...*\tPlayer #1 wins!\n\n50\t.oo...\t.*\tPlayer #1 wins!\n\n51\t....oo\t....*\tPlayer #0 wins!\n\n52\t....oo\t....*\tPlayer #0 wins!\n\n53\t..oo..\t..*\tPlayer #0 wins!\n\n54\t...oo.\t...*\tPlayer #1 wins!\n\n55\t..oo..\t..*\tPlayer #0 wins!\n\n56\too....\t*\tPlayer #0 wins!\n\n57\t...oo.\t...*\tPlayer #1 wins!\n\n58\t.oo...\t.*\tPlayer #1 wins!\n\n59\too....\t*\tPlayer #0 wins!\n\n60\t....oo\t....*\tPlayer #0 wins!\n\n61\t...oo.\t...*\tPlayer #1 wins!\n\n62\too....\t*\tPlayer #0 wins!\n\n63\t...oo.\t...*\tPlayer #1 wins!\n\n64\too....\t*\tPlayer #0 wins!\n\n65\to....o\t*\tPlayer #0 wins!\n\n66\to....o\t*\tPlayer #0 wins!\n\n67\too....\t*\tPlayer #0 wins!\n\n68\t.oo...\t.*\tPlayer #1 wins!\n\n69\t....oo\t....*\tPlayer #0 wins!\n\n70\t..oo..\t..*\tPlayer #0 wins!\n\n71\t.oo...\t.*\tPlayer #1 wins!\n\n72\t..oo..\t..*\tPlayer #0 wins!\n\n73\too....\t*\tPlayer #0 wins!\n\n74\t..oo..\t..*\tPlayer #0 wins!\n\n75\to....o\t*\tPlayer #0 wins!\n\n76\t..oo..\t..*\tPlayer #0 wins!\n\n77\to....o\t*\tPlayer #0 wins!\n\n78\to....o\t*\tPlayer #0 wins!\n\n79\t..oo..\t..*\tPlayer #0 wins!\n\n80\t..oo..\t..*\tPlayer #0 wins!\n\n81\t....oo\t....*\tPlayer #0 wins!\n\n82\t..oo..\t..*\tPlayer #0 wins!\n\n83\t...oo.\t...*\tPlayer #1 wins!\n\n84\t..oo..\t..*\tPlayer #0 wins!\n\n85\t.oo...\t.*\tPlayer #1 wins!\n\n86\t..oo..\t..*\tPlayer #0 wins!\n\n87\to....o\t*\tPlayer #0 wins!\n\n88\t.oo...\t.*\tPlayer #1 wins!\n\n89\t.oo...\t.*\tPlayer #1 wins!\n\n90\too....\t*\tPlayer #0 wins!\n\n91\t.oo...\t.*\tPlayer #1 wins!\n\n92\t.oo...\t.*\tPlayer #1 wins!\n\n93\too....\t*\tPlayer #0 wins!\n\n94\too....\t*\tPlayer #0 wins!\n\n95\t...oo.\t...*\tPlayer #1 wins!\n\n96\t.oo...\t.*\tPlayer #1 wins!\n\n97\t..oo..\t..*\tPlayer #0 wins!\n\n98\t....oo\t....*\tPlayer #0 wins!\n\n99\t.oo...\t.*\tPlayer #1 wins!\n\n\tPlayer #0\t64\n\tPlayer #1\t36\n\nThe champion is \tPlayer #0\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E0\to....o\t*\tPlayer #0 wins!\n\n1\t.oo...\t.*\tPlayer #1 wins!\n\n2\t....oo\t....*\tPlayer #0 wins!\n\n3\too....\t*\tPlayer #0 wins!\n\n4\t..oo..\t..*\tPlayer #0 wins!\n\n5\t....oo\t....*\tPlayer #0 wins!\n\n6\t...oo.\t...*\tPlayer #1 wins!\n\n7\t.oo...\t.*\tPlayer #1 wins!\n\n8\t....oo\t....*\tPlayer #0 wins!\n\n9\t.oo...\t.*\tPlayer #1 wins!\n\n10\to....o\t*\tPlayer #0 wins!\n\n11\t...oo.\t...*\tPlayer #1 wins!\n\n12\t....oo\t....*\tPlayer #0 wins!\n\n13\t.oo...\t.*\tPlayer #1 wins!\n\n14\t...oo.\t...*\tPlayer #1 wins!\n\n15\t.oo...\t.*\tPlayer #1 wins!\n\n16\t...oo.\t...*\tPlayer #1 wins!\n\n17\t.oo...\t.*\tPlayer #1 wins!\n\n18\to....o\t*\tPlayer #0 wins!\n\n19\t...oo.\t...*\tPlayer #1 wins!\n\n20\t....oo\t....*\tPlayer #0 wins!\n\n21\too....\t*\tPlayer #0 wins!\n\n22\t...oo.\t...*\tPlayer #1 wins!\n\n23\t..oo..\t..*\tPlayer #0 wins!\n\n24\t..oo..\t..*\tPlayer #0 wins!\n\n25\to....o\t*\tPlayer #0 wins!\n\n26\to....o\t*\tPlayer #0 wins!\n\n27\to....o\t*\tPlayer #0 wins!\n\n28\t..oo..\t..*\tPlayer #0 wins!\n\n29\t...oo.\t...*\tPlayer #1 wins!\n\n30\t.oo...\t.*\tPlayer #1 wins!\n\n31\t..oo..\t..*\tPlayer #0 wins!\n\n32\t.oo...\t.*\tPlayer #1 wins!\n\n33\t....oo\t....*\tPlayer #0 wins!\n\n34\t...oo.\t...*\tPlayer #1 wins!\n\n35\t.oo...\t.*\tPlayer #1 wins!\n\n36\t...oo.\t...*\tPlayer #1 wins!\n\n37\t...oo.\t...*\tPlayer #1 wins!\n\n38\t...oo.\t...*\tPlayer #1 wins!\n\n39\t....oo\t....*\tPlayer #0 wins!\n\n40\t...oo.\t...*\tPlayer #1 wins!\n\n41\to....o\t*\tPlayer #0 wins!\n\n42\t...oo.\t...*\tPlayer #1 wins!\n\n43\t...oo.\t...*\tPlayer #1 wins!\n\n44\t.oo...\t.*\tPlayer #1 wins!\n\n45\t..oo..\t..*\tPlayer #0 wins!\n\n46\too....\t*\tPlayer #0 wins!\n\n47\to....o\t*\tPlayer #0 wins!\n\n48\t..oo..\t..*\tPlayer #0 wins!\n\n49\to....o\t*\tPlayer #0 wins!\n\n50\t.oo...\t.*\tPlayer #1 wins!\n\n51\t.oo...\t.*\tPlayer #1 wins!\n\n52\t..oo..\t..*\tPlayer #0 wins!\n\n53\t..oo..\t..*\tPlayer #0 wins!\n\n54\too....\t*\tPlayer #0 wins!\n\n55\t.oo...\t.*\tPlayer #1 wins!\n\n56\t..oo..\t..*\tPlayer #0 wins!\n\n57\t...oo.\t...*\tPlayer #1 wins!\n\n58\too....\t*\tPlayer #0 wins!\n\n59\t...oo.\t...*\tPlayer #1 wins!\n\n60\t..oo..\t..*\tPlayer #0 wins!\n\n61\to....o\t*\tPlayer #0 wins!\n\n62\too....\t*\tPlayer #0 wins!\n\n63\too....\t*\tPlayer #0 wins!\n\n64\t....oo\t....*\tPlayer #0 wins!\n\n65\t...oo.\t...*\tPlayer #1 wins!\n\n66\t..oo..\t..*\tPlayer #0 wins!\n\n67\t..oo..\t..*\tPlayer #0 wins!\n\n68\to....o\t*\tPlayer #0 wins!\n\n69\t.oo...\t.*\tPlayer #1 wins!\n\n70\t..oo..\t..*\tPlayer #0 wins!\n\n71\to....o\t*\tPlayer #0 wins!\n\n72\t....oo\t....*\tPlayer #0 wins!\n\n73\t..oo..\t..*\tPlayer #0 wins!\n\n74\t..oo..\t..*\tPlayer #0 wins!\n\n75\too....\t*\tPlayer #0 wins!\n\n76\t.oo...\t.*\tPlayer #1 wins!\n\n77\t.oo...\t.*\tPlayer #1 wins!\n\n78\t.oo...\t.*\tPlayer #1 wins!\n\n79\too....\t*\tPlayer #0 wins!\n\n80\t.oo...\t.*\tPlayer #1 wins!\n\n81\too....\t*\tPlayer #0 wins!\n\n82\t...oo.\t...*\tPlayer #1 wins!\n\n83\too....\t*\tPlayer #0 wins!\n\n84\t.oo...\t.*\tPlayer #1 wins!\n\n85\t....oo\t....*\tPlayer #0 wins!\n\n86\too....\t*\tPlayer #0 wins!\n\n87\t.oo...\t.*\tPlayer #1 wins!\n\n88\too....\t*\tPlayer #0 wins!\n\n89\too....\t*\tPlayer #0 wins!\n\n90\t...oo.\t...*\tPlayer #1 wins!\n\n91\t....oo\t....*\tPlayer #0 wins!\n\n92\t....oo\t....*\tPlayer #0 wins!\n\n93\t....oo\t....*\tPlayer #0 wins!\n\n94\t...oo.\t...*\tPlayer #1 wins!\n\n95\t....oo\t....*\tPlayer #0 wins!\n\n96\t.oo...\t.*\tPlayer #1 wins!\n\n97\t....oo\t....*\tPlayer #0 wins!\n\n98\t.oo...\t.*\tPlayer #1 wins!\n\n99\t..oo..\t..*\tPlayer #0 wins!\n\n\tPlayer #0\t58\n\tPlayer #1\t42\n\nThe champion is \tPlayer #0\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E0\too....\t*\tPlayer #0 wins!\n\n1\t...oo.\t...*\tPlayer #1 wins!\n\n2\too....\t*\tPlayer #0 wins!\n\n3\too....\t*\tPlayer #0 wins!\n\n4\too....\t*\tPlayer #0 wins!\n\n5\t.oo...\t.*\tPlayer #1 wins!\n\n6\t.oo...\t.*\tPlayer #1 wins!\n\n7\t...oo.\t...*\tPlayer #1 wins!\n\n8\t.oo...\t.*\tPlayer #1 wins!\n\n9\t...oo.\t...*\tPlayer #1 wins!\n\n10\t.oo...\t.*\tPlayer #1 wins!\n\n11\t...oo.\t...*\tPlayer #1 wins!\n\n12\t.oo...\t.*\tPlayer #1 wins!\n\n13\t..oo..\t..*\tPlayer #0 wins!\n\n14\to....o\t*\tPlayer #0 wins!\n\n15\t....oo\t....*\tPlayer #0 wins!\n\n16\too....\t*\tPlayer #0 wins!\n\n17\too....\t*\tPlayer #0 wins!\n\n18\t..oo..\t..*\tPlayer #0 wins!\n\n19\t...oo.\t...*\tPlayer #1 wins!\n\n20\too....\t*\tPlayer #0 wins!\n\n21\t.oo...\t.*\tPlayer #1 wins!\n\n22\t....oo\t....*\tPlayer #0 wins!\n\n23\t...oo.\t...*\tPlayer #1 wins!\n\n24\t...oo.\t...*\tPlayer #1 wins!\n\n25\t..oo..\t..*\tPlayer #0 wins!\n\n26\too....\t*\tPlayer #0 wins!\n\n27\too....\t*\tPlayer #0 wins!\n\n28\too....\t*\tPlayer #0 wins!\n\n29\t..oo..\t..*\tPlayer #0 wins!\n\n30\t....oo\t....*\tPlayer #0 wins!\n\n31\t..oo..\t..*\tPlayer #0 wins!\n\n32\to....o\t*\tPlayer #0 wins!\n\n33\to....o\t*\tPlayer #0 wins!\n\n34\t....oo\t....*\tPlayer #0 wins!\n\n35\t....oo\t....*\tPlayer #0 wins!\n\n36\t..oo..\t..*\tPlayer #0 wins!\n\n37\t...oo.\t...*\tPlayer #1 wins!\n\n38\t....oo\t....*\tPlayer #0 wins!\n\n39\too....\t*\tPlayer #0 wins!\n\n40\t.oo...\t.*\tPlayer #1 wins!\n\n41\too....\t*\tPlayer #0 wins!\n\n42\t....oo\t....*\tPlayer #0 wins!\n\n43\too....\t*\tPlayer #0 wins!\n\n44\to....o\t*\tPlayer #0 wins!\n\n45\t....oo\t....*\tPlayer #0 wins!\n\n46\to....o\t*\tPlayer #0 wins!\n\n47\to....o\t*\tPlayer #0 wins!\n\n48\t....oo\t....*\tPlayer #0 wins!\n\n49\t...oo.\t...*\tPlayer #1 wins!\n\n50\too....\t*\tPlayer #0 wins!\n\n51\t....oo\t....*\tPlayer #0 wins!\n\n52\t....oo\t....*\tPlayer #0 wins!\n\n53\t..oo..\t..*\tPlayer #0 wins!\n\n54\t....oo\t....*\tPlayer #0 wins!\n\n55\too....\t*\tPlayer #0 wins!\n\n56\t..oo..\t..*\tPlayer #0 wins!\n\n57\too....\t*\tPlayer #0 wins!\n\n58\t....oo\t....*\tPlayer #0 wins!\n\n59\to....o\t*\tPlayer #0 wins!\n\n60\t.oo...\t.*\tPlayer #1 wins!\n\n61\t..oo..\t..*\tPlayer #0 wins!\n\n62\too....\t*\tPlayer #0 wins!\n\n63\t.oo...\t.*\tPlayer #1 wins!\n\n64\t..oo..\t..*\tPlayer #0 wins!\n\n65\t.oo...\t.*\tPlayer #1 wins!\n\n66\t...oo.\t...*\tPlayer #1 wins!\n\n67\too....\t*\tPlayer #0 wins!\n\n68\t.oo...\t.*\tPlayer #1 wins!\n\n69\t...oo.\t...*\tPlayer #1 wins!\n\n70\to....o\t*\tPlayer #0 wins!\n\n71\t.oo...\t.*\tPlayer #1 wins!\n\n72\to....o\t*\tPlayer #0 wins!\n\n73\t...oo.\t...*\tPlayer #1 wins!\n\n74\t..oo..\t..*\tPlayer #0 wins!\n\n75\t...oo.\t...*\tPlayer #1 wins!\n\n76\t..oo..\t..*\tPlayer #0 wins!\n\n77\to....o\t*\tPlayer #0 wins!\n\n78\too....\t*\tPlayer #0 wins!\n\n79\to....o\t*\tPlayer #0 wins!\n\n80\t..oo..\t..*\tPlayer #0 wins!\n\n81\to....o\t*\tPlayer #0 wins!\n\n82\t..oo..\t..*\tPlayer #0 wins!\n\n83\t..oo..\t..*\tPlayer #0 wins!\n\n84\t....oo\t....*\tPlayer #0 wins!\n\n85\t...oo.\t...*\tPlayer #1 wins!\n\n86\t..oo..\t..*\tPlayer #0 wins!\n\n87\t...oo.\t...*\tPlayer #1 wins!\n\n88\t.oo...\t.*\tPlayer #1 wins!\n\n89\too....\t*\tPlayer #0 wins!\n\n90\t.oo...\t.*\tPlayer #1 wins!\n\n91\to....o\t*\tPlayer #0 wins!\n\n92\to....o\t*\tPlayer #0 wins!\n\n93\t..oo..\t..*\tPlayer #0 wins!\n\n94\t....oo\t....*\tPlayer #0 wins!\n\n95\t.oo...\t.*\tPlayer #1 wins!\n\n96\t..oo..\t..*\tPlayer #0 wins!\n\n97\t....oo\t....*\tPlayer #0 wins!\n\n98\t.oo...\t.*\tPlayer #1 wins!\n\n99\to....o\t*\tPlayer #0 wins!\n\n\tPlayer #0\t69\n\tPlayer #1\t31\n\nThe champion is \tPlayer #0\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n3:0\n\u003C/p\u003E\n\u003Cp\u003E\nGame master wins.\n\u003C/p\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-07-23T05:23:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 minutes ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOnly Monte-Carlo, only hardcore.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nVery cool, overly complicated way to do it, but very cool.\n\u003C/p\u003E\n\u003Cp\u003E\nAside from, I believe, you have the win condition backwards.\u00A0\u00A0\u00A0 First person to fire the gun loses.\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420379\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532301393\u0022 data-ipsquote-userid=\u0022162109\u0022 data-ipsquote-username=\u0022Cunjo Carl\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, Cunjo Carl said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIs it better for you if the ordeal is done with a 5-shooter or a 6-shooter?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think you fell into the trap of the question.\u00A0 Not sure though.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-07-23T05:25:49Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420523\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532323416\u0022 data-ipsquote-userid=\u002264714\u0022 data-ipsquote-username=\u0022Gargamel\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, Gargamel said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAside from, I believe, you have the win condition backwards.\u00A0\u00A0\u00A0 First person to fire the gun loses.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nHm... Yes, you are right.\u003Cbr\u003E\nI thought they are shooting each other or playing Russian roulette, so in this case\u00A0the first = the last.\n\u003C/p\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-07-23T05:27:11Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420524\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532323549\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nplaying Russian roulette,\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell, yes that is the scenario, technically, but I wanted to avoid that here on the forums.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-07-23T07:42:02Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Echar const\n\tMARK_EMPTY = \u0027.\u0027,\n\tMARK_LOADED = \u0027o\u0027,\n\n\tMARK_CLICK = \u0027.\u0027,\n\tMARK_BANG = \u0027*\u0027,\n\n\tSEPARATOR = \u0027\\t\u0027;\u003C/span\u003E\u003C/pre\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPrefer:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Eenum class Mark : char\n{\n\tEMPTY = \u0027.\u0027,\n\tLOADED = \u0027o\u0027,\n \tCLICK = \u0027.\u0027,\n\tBANG = \u0027*\u0027,\n\tSEPARATOR = \u0027\\t\u0027\n};\n\n// And purely for convenience\nstd::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; stream, const Mark mark)\n{\n\treturn stream \u0026lt;\u0026lt; static_cast\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;char\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(mark);\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nPlacing defaults in global scope is also not great. When you\u0027re forced to do something like this, consider at least putting them into anonymous namespace. That will at least prevent linker from trying to keep track of them. Using constexpr is another good way to reduce overhead of global constants.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Eint const nChamberCount = m_arrChamber.size();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPrefer:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Econst size_t nChamberCount = m_arrChamber.size();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nUsing int will force a completely unnecessary type conversion. Some people would also argue for use of auto here, but I can see both sides. Specifying size_t is more informative.\n\u003C/p\u003E\n\u003Cp\u003E\nIn general, most places people use int, they should probably be using size_t. It will automatically conform to the size of register, and because of that, optimizes much, much better. If you have a simple counter loop, you almost always want to have size_t as your counter. Notable exceptions: You need signed value or that 32 bit footprint for cache-heavy applications.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Em_arrChamber = std::vector \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;bool\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E (m_arrChamber.size(), true);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Em_arrChamber.assign(m_arrChamber.size(), true);\u003C/span\u003E\u003C/pre\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Eint nChamberIndex = std::rand() % nChamberCount;\n \nfor (; nRoundCount \u0026gt; 0; --nRoundCount)\n\t{\n\t\tm_arrChamber[nChamberIndex] = true;\n \n\t\tif (\u002B\u002BnChamberIndex \u0026gt;= nChamberCount)\n\t\t\tnChamberIndex = 0;\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBesides the fact that this should probably use\u00A0\u003Ca href=\u0022https://en.cppreference.com/w/cpp/header/random\u0022 rel=\u0022external nofollow\u0022\u003E\u0026lt;random\u0026gt;\u003C/a\u003E\u00A0rather than std::rand, using branches in loops like this, when you have wraparound, is rarely a good idea. Predictions on these kinds of branches tend to be bad, and it\u0027s a lot cheaper to use a bit of extra algebra.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Efor (size_t i = 0; i \u0026lt; nRoundCount; \u002B\u002Bi)\n{\n\tm_arrChamber[(nChamberIndex \u002B i) % nChamberCount] = true;\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420516\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532322807\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003Efor (int i = 0 ; i \u0026lt; nTestCount; \u002B\u002Bi)\n\t{\n\t\tCTest objTest(nChamberCount);\n\t\t//...\n\t}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is entirely unnecessary. Each constructor of CTest implicitly constructs a std::vector, followed by explicit resizing, and destroys all of that in the destructor. So you end up with nTestCount malloc/free pairs, where one would fully suffice. The array can be trivially reused with a call to std::vector::assign for a fraction of a cost of a malloc.\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027s also zero reason not to use for-each-style loop in runTest(), like you did in showChambers(). They have an identical structure with respect to their use of the bLoaded value.\n\u003C/p\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-07-23T09:02:40Z","Content":"\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPrefer:\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\n\u003Cspan class=\u0022pln\u0022\u003Eenum class Mark : char\n{\n\tEMPTY = \u0027.\u0027,\n\tLOADED = \u0027o\u0027,\n \tCLICK = \u0027.\u0027,\n\tBANG = \u0027*\u0027,\n\tSEPARATOR = \u0027\\t\u0027\n};\u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/span\u003E\u003C/pre\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nA matter of taste.\u003Cbr\u003E\nI find disgusting using enums like consts (because there is no enumeration here, and because in real project I would read them from settings storing in a map).\u003Cbr\u003E\nThough I\u0027m aware about such style.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan class=\u0022pln\u0022\u003E// And purely for convenience std::ostream\u0026amp; operator\u0026lt;\u0026lt;(std::ostream\u0026amp; stream, const Mark mark) { return stream \u0026lt;\u0026lt; static_cast\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;char\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(mark); }\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUnnecessary complication.\u003Cbr\u003E\nI don\u0027t need to implement a separate type, while I would store these values in a map in\u00A0 real project.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPlacing defaults in global scope is also not great.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSo, don\u0027t place them in a multi-module project.\u003Cbr\u003E\nHere is a single-file Hello World, without headers or so. We should not complicate it unduly. Though you may if you wish.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhen you\u0027re forced to do something like this, consider at least putting them into anonymous namespace.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAnonymous namespaces are the way to chaos. I always name them.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUsing constexpr is another good way to reduce overhead of global constants.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDon\u0027t forget to do this writing a hundred-files emulator of revolver shooting.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUsing int will force a completely unnecessary type conversion.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis type conversion happens once on compilation.\u003Cbr\u003E\nI don\u0027t argue\u00A0that size_t is more common, but I prefer to avoid excessive macros when possible.\u003Cbr\u003E\nAll three compilers and frameworks which I\u0027ve\u00A0used, treat this alike, and I don\u0027t need to guess about their difference.\n\u003C/p\u003E\n\u003Cp\u003E\nThough, I don\u0027t argue against size_t itself. In my experience I prefer clear types.\n\u003C/p\u003E\n\u003Cp\u003E\n(You don\u0027t need to tell me about different containers with different possible types of size_t or particular features of Watcom-C or so).\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBesides the fact that this should probably use\u00A0\u003Ca href=\u0022https://en.cppreference.com/w/cpp/header/random\u0022 rel=\u0022external nofollow\u0022\u003E\u0026lt;random\u0026gt;\u003C/a\u003E\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBesides the fact that it should definitely use a normal sane library implementation of randoms (like Alglib or so) if it were a serious project.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nusing branches in loops like this, when you have wraparound, is rarely a good idea.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is exactly that case when it\u0027s a good idea.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThi\u003Cspan\u003E\uFEFF\u003C/span\u003Es is entirely unnecessary. Each constructor of CTest implicitly constructs a std::vector, followed by explicit resizing, and destroys all of that in the destructor. So you end up with nTestCount malloc/free pairs, where one would fully suffi\u003Cspan\u003E\uFEFF\u003C/span\u003Ece. The array can be trivially reused with a call to std::vector::assign for a fraction of a cost of a malloc.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nEvery time you use a local string in a loop, one kitten dies somewhere. Functors and lambdas just kill\u0027em with fire.\n\u003C/p\u003E\n\u003Cp\u003E\nWith 10 mln tests it works just fine, about 20\u00A0s (with commented output).\u003Cbr\u003E\nLet me don\u0027t check at 1 bln, as unlike you I don\u0027t want to wait maybe an hour when it finishes.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThere\u0027s also zero reason not to use for-each-style loop in runTest(), like you did in showChambers().\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThere was exactly one\u00A0reason to do this because originally \u0022i\u0022 was used there, and then left it as is.\u003Cbr\u003E\nBut undoubtedly your heroic efforts put on checking someone\u0027s\u00A0half-hour breakfast helloworld do you credit.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-23T09:07:31Z\u0022 title=\u002207/23/2018 09:07  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 23, 2018\u003C/time\u003E by kerbiloid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Superfluous J","CreatedById":73725,"CreatedDateTime":"2018-07-23T09:44:26Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420566\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532331722\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPlacing defaults in global scope is also not great...\n\u003C/p\u003E\n\u003Cp\u003E\nUsing int will force a completely unnecessary type conversion...\n\u003C/p\u003E\n\u003Cp\u003E\n...most places people use int, they should probably be using size_t.\n\u003C/p\u003E\n\u003Cp\u003E\n...this should probably use\u00A0\u003Ca href=\u0022https://en.cppreference.com/w/cpp/header/random\u0022 rel=\u0022external nofollow\u0022\u003E\u0026lt;random\u0026gt;\u003C/a\u003E\u00A0rather than std::rand...\n\u003C/p\u003E\n\u003Cp\u003E\nThe array can be trivially reused with a call to std::vector::assign for a fraction of a cost of a malloc.\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027s also zero reason not to use for-each-style loop...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis is why I don\u0027t like to open source my code.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2018-07-23T10:18:13Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420595\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532336560\u0022 data-ipsquote-userid=\u0022129408\u0022 data-ipsquote-username=\u0022kerbiloid\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n42 minutes ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#fafafa;color:#353c41;font-size:14px;\u0022\u003EThis type conversion happens once on compilation.\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNonsense. std::vector::size does a trivial return on a size_t member holding occupancy. Compiled to an x64 target, that\u0027s a 64 bit field. And since it\u0027s a template class, compiler has full access to the internals in every translation unit. Writing const size_t size = m_vector.size() simply creates an alias if there are no side effects. (e.g. resizing). That means the same register will be used whether it\u0027s your code using this alias variable, or internal code of the std::vector class. When you write const int size = m_vector.size(), compiler is still probably going to keep it in the register, but now it is\u00A0\u003Cem\u003Eforced\u003C/em\u003E\u00A0to use distinct registers for your int value and internal size_t value, even if there are no side effects that would warrant it. And that dramatically reduces ability of the optimizer to make your code better. There are only so many registers to go around, and at some point, it will mean that memory is being accessed when it doesn\u0027t need to be. On a critical path, that\u0027s a 10x loss in performance, because you thought the type conversion is taken care of by compiler.\n\u003C/p\u003E\n\u003Cp\u003E\nCoding styles exist for a reason. Some of it is purely readability, like \u0022const int\u0022 vs \u0022int const\u0022. But a lot of it is performance-driven. And because not all of us dive into specs and compiler design deep enough to know exactly how each case is going to be handled, maintaining good style must be adhered to as matter of habit. If your excuse for writing sloppy code is that it\u0027s not critical for it to be clean or efficient, then you\u0027ll write crap code in places where it does need to be clean and efficient.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n42 minutes ago, kerbiloid said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#fafafa;color:#353c41;font-size:14px;\u0022\u003EEvery time you use a local string in a loop, one kitten dies somewhere.\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSmall strings are allocated on the stack. This is implementation-specific, but on most compilers you can expect at least 15 characters for free. So declaring them in a loop or creating a bunch of temps is perfectly fine. Instantiating a class in a loop because you didn\u0027t think to use vector::assign isn\u0027t. Not only is it cleaner, idiomatic code, it would be literally easier to write.\n\u003C/p\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2018-07-23T10:43:39Z","Content":"\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nNonsense\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nhappens when you have to convert your nice and pure size_t into an int used by something another which clearly uses signed int.\u003Cbr\u003E\nSo, either you convert it in the loop defiinition, or in situ. Both cases are bad.\u003Cbr\u003E\nSo, you would address your complains to frameworks developers. I just follow the path appeared to be less painful in my practice.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nCoding styles exist for a reason.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nExactly! Don\u0027t forget to recall this before criticising someone\u0027s coding style.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSome of it is purely readability, like \u0022const int\u0022 vs \u0022int const\u0022.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nExactly this is not purely. Almost, but not absolutely.\u003Cbr\u003E\nOriginally I was using \u0022const type\u0022, until some guru (not you) had demonstrated cases when this leads to ambiguity.\u003Cbr\u003E\nBut mostly they are equal, yes.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBut a lot of it is performance-driven. \u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAnd in most cases your style means nothing in comparison with some, say, ADO call.\u003Cbr\u003E\nOr when you use a recommended stream instead of old-style printf and realize that it works much slower.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd because not all of us dive into specs and compiler design deep enough to know exactly how each case is going to be handled, maintaining good style must be adhered to as matter of habit.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAnd sometimes this includes ignoring of purists\u0027 fantasies having a little common with real practice.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420633\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532341093\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSmall strings are allocated on the stack\u003Cspan\u003E\uFEFF\u003C/span\u003E. This is implementation-specific, but on most compilers you can expect at least 15 characters for free. So declaring them in a loop or creating a bunch of temps is perfectly fine. Instantiating a class in a loop because you didn\u0027t think to use vector::assign isn\u0027t. Not only is it cleaner, idiomatic code, it would be literally easier to write.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIndeed. I should spend two hours more optimizing a helloworld.\n\u003C/p\u003E\n\u003Cp\u003E\nIRL a programmer should find a balance between efforts and overoptimization.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nP.S.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57710-k2/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257710\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57710-k2/\u0022 rel=\u0022\u0022\u003E@K^2\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMwahaha. \u0022size_t-schmize_t\u0022, blah-blah-blah\n\u003C/p\u003E\n\u003Cp\u003E\nHere is the definition of std::vector.size() in my IDE:\n\u003C/p\u003E\n\u003Cpre\u003E\n\n\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E    \u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003Einline\u003C/span\u003E\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003Esize()\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003Econst\u003C/span\u003E\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E{\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003Ereturn\u003C/span\u003E\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E\u003Cspan style=\u0022color:#800000;\u0022\u003Ed\u003C/span\u003E-\u0026gt;\u003Cspan style=\u0022color:#800000;\u0022\u003Esize\u003C/span\u003E;\u003Cspan style=\u0022color:#c0c0c0;\u0022\u003E \u003C/span\u003E}\u003C/pre\u003E\n\u003Cpre\u003E\n\nSo, int which I use is by definition the native type for this loop.\nCode purists are a kind of grammar pedants.\u003C/pre\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-24T03:36:17Z\u0022 title=\u002207/24/2018 03:36  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 24, 2018\u003C/time\u003E by kerbiloid\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Cunjo Carl","CreatedById":162109,"CreatedDateTime":"2018-07-23T20:35:57Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223420523\u0022 data-ipsquote-contentid=\u0022176915\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221532323416\u0022 data-ipsquote-userid=\u002264714\u0022 data-ipsquote-username=\u0022Gargamel\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/22/2018 at 10:23 PM, Gargamel said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI think you fell into the trap of the question.\u00A0 Not sure though.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nHmm... Well, mind checking my analysis? It feels right, so if my result is wrong, it\u0027s probably because my understanding of the problem statement is wrong. Maybe you can spot where?\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow since we can\u0027t make circles out of text, imagine we have the chambers laid out in a row, starting from the first chamber to be fired and proceeding so that they\u0027ll be fired (or dry fired) in the order they\u0027re written. (For mental images, on a S\u0026amp;W, this would be starting on the top-right chamber and proceeding clockwise). Laid out, it might look like this\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EX O O O O X\u00A0\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E \u003C/span\u003EIn which case player 2 will win, or it may look like this\u003Cbr\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003EO O O X X O\u00A0 \u003C/strong\u003E\u003C/span\u003EIn which case player 1 will win.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EKey:\u003Cbr\u003E\nX\u003C/span\u003E\u003C/strong\u003E Chamber has live round in it\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EO\u003C/span\u003E\u003C/strong\u003E Chamber is empty\n\u003C/p\u003E\n\u003Cp\u003E\nLet\u0027s write out who will win for each starting position. Chambers (again) fired from left to right.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003EO O O O X X\u00A0\u003C/strong\u003E\u00A0\u003C/span\u003E 6 chamber\u003Cbr\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E2 1 2 1 2 2\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003EO O O X X\u00A0\u00A0\u00A0\u00A0\u003C/strong\u003E\u003C/span\u003E 5 chamber\u003Cbr\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003E1 2 1 2 2\u003C/strong\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow we notice the pattern, two positions will always win for player 2, and the remaining will win in an alternating pattern starting with player 1. So, we can write out the formula and simplify.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003E\u00A0O O O O O O O O X X\u003C/strong\u003E\u003C/span\u003E\u003Cbr\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u003Cstrong\u003E[ \u0026lt;- 2 1 2 1 2 1]2 2\u003C/strong\u003E\u003C/span\u003E\u00A0\u00A0 (The pattern)\u003Cbr\u003E\u003Cbr\u003E\nnumPositionsPlayerTwoWinsFrom = numBullets\u002Bfloor((numChambers-numBullets)/2)\u003Cbr\u003E\nPlugging in 2 bullets, and simplifying:\u003Cbr\u003E\nnumPositionsPlayerTwoWinsFrom = 1\u002Bfloor(numChambers/2)\n\u003C/p\u003E\n\u003Cp\u003E\nFinally, converting this into a win chance by normalizing (dividing by the total number of starting positions)...\u003Cbr\u003E\nplayerTwoWinChance = 1\u002Bfloor(numChambers/2) / numChambers\n\u003C/p\u003E\n\u003Cp\u003E\n5-shot = 3/5 = 60%\u003Cbr\u003E\n6-shot = 4/6 = 67%\u003Cbr\u003E\n7-shot = 4/7 = 57%\u003Cbr\u003E\n8-shot = 5/8 = 63%\u003Cbr\u003E\n9-shot = 5/9 = 56% (surprisingly a real thing)\u003Cbr\u003E\n...\u003Cbr\u003E\nn-shot = 1/2 = 50% (isn\u0027t a real thing, but should be)\n\u003C/p\u003E\n\u003Cp\u003E\nNow of course the real winners will be the people who figure out you can, without firing, repeatedly cycle most double-action revolvers onto the next round by pulling the trigger 3/4 the way and slowly releasing! Just always pick the same chamber your opponent did last time, and you\u0027re guaranteed a win! (Said to be a silly, don\u0027t really do this plz,thx.)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-25T00:55:28Z\u0022 title=\u002207/25/2018 12:55  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 25, 2018\u003C/time\u003E by Cunjo Carl\u003C/strong\u003E\n\u003Cbr\u003Ecleanup\n\u003C/span\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2018-07-24T07:16:04Z","Content":"\n\u003Cp\u003E\nThere\u0027s a much simpler way to go about it.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nPlayer one is given a random cylinder, so it\u0027s a 2/6 chance he will fire a bullet.\u00A0\u00A0 So 1/3.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow, we need to look at the layout of the gun.\n\u003C/p\u003E\n\u003Cp\u003E\nXX0000\n\u003C/p\u003E\n\u003Cp\u003E\nSince we know that the second player will only get a turn if the first player does not fire, that eliminates the possibility that the cylinder is currently on chamber 2.\n\u003C/p\u003E\n\u003Cp\u003E\nSo now we have 4 empty chambers, and 1 full chamber left as possibilities.\n\u003C/p\u003E\n\u003Cp\u003E\nSo player two has a 1/5 chance of firing a bullet.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003C/p\u003E\n\u003Cbr\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/162109-cunjo-carl/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022162109\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/162109-cunjo-carl/\u0022 rel=\u0022\u0022\u003E@Cunjo Carl\u003C/a\u003E Where I think you fell into the trap, and I say I think, because I don\u0027t really follow your explanation, is that if you do the the math without considering the cylinder and bullet positions, you still get 1/3 for the first player, but if you eliminate one empty chamber, then the math becomes 2/5.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Cunjo Carl","CreatedById":162109,"CreatedDateTime":"2018-07-24T15:35:24Z","Content":"\n\u003Cp\u003E\nOh, cool! There\u0027s a difference between our results so it looks like we\u0027ll get to have the question turned around on its asker \u003Cspan\u003E\u003Cimg alt=\u0022:D\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 title=\u0022:D\u0022\u003E . Nothing to do but keep going back and forth to see who hits their target first, eh?\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EYeah, whether you attack the problem constructively or deductively I guess is a matter of taste. I went constructive because I wanted the general solution, and as always, it took 10 times longer to write out than it did to scratch on paper! I agree, it looks more complicated written out. Either works of course, but I think there\u0027s a little wrinkle missing from yours... \u003C/span\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003EThat being that the position isn\u0027t randomized each time, instead we\u0027re firing the chambers in sequential order. If player one didn\u0027t hit a live round on her first try, then she must have started over one of the four empties. Only one of these 4 empties has a live round following it (because the live rounds are adjacent), so player two will actually only have a 1 in 4 chance of hitting a live round on her first try! Looking at the whole thing:\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003ERound \u00A0\u00A0 Player \u00A0\u00A0\u00A0\u00A0 LossChance\u00A0\u00A0 LossChance(distributed)\u003C/span\u003E\u003Cbr\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u00A0 1\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 2/6 = 1/3 \u00A0\u00A0\u00A0 2/6\u00A0 =\u00A0 2/6\u003Cbr\u003E\n\u00A0 2\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 2\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1/4\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 2/12 =\u00A0 1/6 \u00A0 = (1 - 1/3)*(1/4)\u003Cbr\u003E\n\u00A0 3\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1/3\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 6/36 =\u00A0 1/6\u00A0\u00A0 = (1 - 1/3)*(1 - 1/4)*(1/3)\u003Cbr\u003E\n\u00A0 4\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 2\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1/2\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 12/72 =\u00A0 1/6 \u00A0 = (1 - 1/3)*(1 - 1/4)*(1 - 1/3)*(1/2)\u003Cbr\u003E\n\u00A0 5\u00A0\u00A0\u00A0\u00A0 \u00A0\u00A0 1\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 1\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 12/72 =\u00A0 1/6 \u00A0 = (1 - 1/3)*(1 - 1/4)*(1 - 1/3)*(1 - 1/2)*1\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nHere \u0022LossChance\u0022 is the chance of this player losing given we\u0027re already on this round. LossChance(distributed) is the chance of losing on this particular round from the start of the game. Summing up the player 1 loss chances (player 2 win chances) we get 4/6 or a 66% chance!\u00A0 There\u0027s an interesting symmetry that pops up... that 1/6 just seems to fall out of the math from this perspective.\n\u003C/p\u003E\n\u003Cp\u003E\nHopefully the idea is passing across, but if it\u0027s not let me know and I\u0027ll give it another go. Cheers!\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-07-25T01:01:36Z\u0022 title=\u002207/25/2018 01:01  AM\u0022 data-short=\u00225 yr\u0022\u003EJuly 25, 2018\u003C/time\u003E by Cunjo Carl\u003C/strong\u003E\n\u003Cbr\u003Ecleanup\n\u003C/span\u003E\n"}]}