{"TopicId":60366,"ForumId":44,"TopicTitle":"Calculate the position of a planet at a given time","CreatedByName":"yaur","CreatedById":97407,"CreatedDateTime":"2014-01-19T00:13:40Z","PageNum":1,"Articles":[{"CreatedByName":"yaur","CreatedById":97407,"CreatedDateTime":"2014-01-19T00:13:40Z","Content":"\n\u003Cp\u003EI\u0027m trying to work out how to figure out the position of a planet given a time. I\u0027ve googled quite a bit and so far the best I\u0027ve come up with is \u003Ca href=\u0022http://www.stjarnhimlen.se/comp/ppcomp.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.stjarnhimlen.se/comp/ppcomp.html\u003C/a\u003E this has good math but requires an iterative method to work out \u0022true anamoly\u0022 for a given time. This is obviously not what KSP does or warping at x10000 wouldn\u0027t be possible. Since my end product is tol that can answer questions like \u0022when will eve block the view of Duna from Kerbin\u0022 I am hoping someone here knows how KSP calculates position in orbit/true anomaly.\u003C/p\u003E\n"},{"CreatedByName":"Aghanim","CreatedById":76587,"CreatedDateTime":"2014-01-19T00:25:34Z","Content":"\n\u003Cp\u003EKSP uses patched conic approximation while real space like in the link uses n-body calculation, as far as I know KSP uses patched conic because they doesn\u0027t need to be iterative, but it could use an equation (?) \u003C/p\u003E\u003Cp\u003EThe others might know more about this than me\u003C/p\u003E\n"},{"CreatedByName":"tntristan12","CreatedById":7005,"CreatedDateTime":"2014-01-19T00:25:51Z","Content":"\n\u003Cp\u003EI\u0027m assuming you only want/need this for elliptical orbits, right?\u003C/p\u003E\u003Cp\u003EEDIT:\u003C/p\u003E\u003Cp\u003EIf so, you\u0027ll want to use Kepler\u0027s equation for elliptical orbits:\u003C/p\u003E\u003Cp\u003EM(t) = E - e*sin*(E)\u003C/p\u003E\u003Cp\u003EM(t) is the mean anomaly of the orbit:\u003C/p\u003E\u003Cp\u003EM(t) = sqrt(mu / a^3) * (t - tau)\u003C/p\u003E\u003Cp\u003Ewhere mu is the gravitational parameter of the sun, a is the planet\u0027s semi-major axis, and (t - tau) is the time that has elapsed since the planet\u0027s last passage of periapse.\u003C/p\u003E\u003Cp\u003EE is called the Elliptical Anomaly, and can be found as a function of true anomaly nu (the angle traversed by the planet since last passage of periapse as viewed by the sun)\u003C/p\u003E\u003Cp\u003Etan(nu/2) = sqrt((1\u002Be)/(1-e)) * tan(E/2)\u003C/p\u003E\u003Cp\u003Eand e is the eccentricity of the planet\u0027s orbit.\u003C/p\u003E\u003Cp\u003EIf you know mu, a, e, and nu (which can be calculated from the conic section equation), you can calculate the time elapsed since last periapse. Using a root finding algorithm like Newton\u0027s method (*very* fast algorithm - requires one or two iterations usually - if you set E = M for the initial guess if e is small or E = pi if e \u0026gt; 0.8) to find E given (t - tau) and back-solve for nu.\u003C/p\u003E\u003Cp\u003EHope that helps!\u003C/p\u003E\u003Cp\u003EEDIT 2: Make sure you keep E in radians!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-19T00:56:43Z\u0022 title=\u002201/19/2014 12:56  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 19, 2014\u003C/time\u003E by tntristan12\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"yaur","CreatedById":97407,"CreatedDateTime":"2014-01-19T00:36:33Z","Content":"\n\u003Cp\u003ECorrect, only for elliptical. I was under the impression that patched conics wouldn\u0027t really matter here other than the lack of perturbations in orbits.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-19T00:49:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022yaur\u0022 data-cite=\u0022yaur\u0022\u003E\u003Cdiv\u003ECorrect, only for elliptical. I was under the impression that patched conics wouldn\u0027t really matter here other than the lack of perturbations in orbits.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat\u0027s the problem here? You can compute mean anomaly. You can compute true anomaly from that. The orbit can be any conic section, it doesn\u0027t matter. (You do have to be careful with periods of hyperbolic orbits, but if you are comfortable with complex math, equations generalize to this case as well.)\u003C/p\u003E\u003Cp\u003EThe difficulty is with real planets/moons only, because their orbital elements evolve over time. In KSP, orbital elements are fixed, so equations are very simple.\u003C/p\u003E\n"},{"CreatedByName":"Z-Man","CreatedById":96549,"CreatedDateTime":"2014-01-20T09:44:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022yaur\u0022 data-cite=\u0022yaur\u0022\u003E\u003Cdiv\u003Ethis has good math but requires an iterative method to work out \u0022true anamoly\u0022 for a given time. This is obviously not what KSP does or warping at x10000 wouldn\u0027t be possible.\u003C/div\u003E\u003C/blockquote\u003EWrong assumption. Iterative methods are the only thing you can use to get the position in a given orbit at a specific time. So that is what KSP does. For most orbits, it does not require too many iterations. Plus, for high warp speeds, solving the equations with the desired precision that way is much faster than solving the equations of motion numerically brute force style.\u003Cp\u003EThere is a way to avoid iteratively solving for the true anomaly from the mean anomaly: Ask a different question \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Not \u0022Where is the planet at time T?\u0022 but \u0022When will the planet be at position X that I know is on the orbit?\u0022. That can be solved \u0022exactly\u0022, you need to calculate the mean from the true anomaly then.\u003C/p\u003E\u003Cp\u003EQuotes around \u0022exactly\u0022 because you still need trigonometry and square roots. Guess how those have to be calculated in the end.\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2014-01-20T18:37:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022yaur\u0022 data-cite=\u0022yaur\u0022\u003E\u003Cdiv\u003EI\u0027m trying to work out how to figure out the position of a planet given a time. I\u0027ve googled quite a bit and so far the best I\u0027ve come up with is \u003Ca href=\u0022http://www.stjarnhimlen.se/comp/ppcomp.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.stjarnhimlen.se/comp/ppcomp.html\u003C/a\u003E this has good math but requires an iterative method to work out \u0022true anamoly\u0022 for a given time. This is obviously not what KSP does or warping at x10000 wouldn\u0027t be possible. Since my end product is tol that can answer questions like \u0022when will eve block the view of Duna from Kerbin\u0022 I am hoping someone here knows how KSP calculates position in orbit/true anomaly.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDon\u0027t worry about the iteration for eccentric anomaly, it should converge very quickly. At least in my experience (using this sort of formula -- Kepler\u0027s equation -- for the bodies in stock KSP), if it hasn\u0027t converged (difference of less than ~ 10\u003Csup\u003E-12\u003C/sup\u003E between iterations, say) within half a dozen iterations, something is wrong. If your given time can get large compared to the period of the orbit you\u0027re computing, do make sure to bring the mean anomaly back into the range 0 .. 2*pi. A large mean anomaly will hurt convergence.\u003C/p\u003E\u003Cp\u003EI\u0027m pretty sure KSP does something very much like this. Time warping is not an issue -- since everything in the game follows conic sections, the game needs to do this every frame for every vessel and body in the game. It doesn\u0027t matter if the time difference between frames is 1/60 second or thousands of seconds, the effort required is the same. And any modern computer should be able to do hundreds of thousands of these calculations in a second, without even getting into multithreading, etc.\u003C/p\u003E\n"}]}