{"TopicId":81290,"ForumId":44,"TopicTitle":"Ascent Optimization as an Optimal Policy Problem","CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-08-10T05:17:56Z","PageNum":1,"Articles":[{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-08-10T05:17:56Z","Content":"\n\u003Cp\u003EThe recent discussion on optimal ascent problem has reminded me that I saw some interesting ways of dealing with optimization problems in finance that I wanted to try out. I\u0027ve put together some basic Mathematica code as a proof of concept, and actually got nice results out of it that I wanted to share.\u003C/p\u003E\u003Cp\u003EThe idea behind optimal policy approach is that you start out with policy function, which is the desired outputs based on current state. In case of rocket\u0027s ascent in KSP, the outputs are going to be the thrust and attitude of the rocket, while the state will be the altitude and horizontal and vertical velocities. Once we have a policy function, we can compute state evolution, from which we can compute an integral that we wish to optimize. Again, in KSP we would compute trajectory the rocket follows under given policy, and use it to estimate delta-V required to reach orbit. Once we have that, we can vary the policy function to try and optimize the result.\u003C/p\u003E\u003Cp\u003EThere are two major obstacles in doing this in KSP. First, we have three input variables and two output variables. That is a \u003Cem\u003Ehuge\u003C/em\u003E space of available policy functions. Second is the fact that we need to establish boundary conditions, which is tricky as stated. Fortunately, both of these are resolved if we re-formulate the problem. Instead of looking at velocity as the state, we\u0027ll consider it to be the desired output. After all, for a given ascent profile, there will be a unique horizontal and vertical velocity for each altitude, and thrust can be computed from the way these vary with altitude.\u003C/p\u003E\u003Cp\u003EFinal obstacle is the fact that we are dealing with a continuous range of variables. The simple solution is to use parametrized polynomial approximations and then the search space for optimization consists only of the parameters.\u003C/p\u003E\u003Cp\u003ELets start with the 1D problem of vertical ascent, which we know analytic solution to, and state it explicitly.\u003C/p\u003E\u003Cp\u003EGiven altitude h, we wish to find optimal ascent velocity v(h) that is most fuel efficient. In other words, we wish to minimize integral over T(t)dt, where T is thrust and t is time. We shall now compute the necessary thrust in units of rocket mass.\u003C/p\u003E\u003Cp\u003ET(t) = g \u002B k(h) v\u00C3\u201A\u00C2\u00B2 \u002B dv/dt\u003C/p\u003E\u003Cp\u003EHere, k(h) is drag coefficient, k(h) = k\u003Csub\u003E0\u003C/sub\u003Ee\u003Csup\u003E-h/H\u003C/sup\u003E for some scale height H. Now we shall take dv/dt using chain rule.\u003C/p\u003E\u003Cp\u003Edv/dt = (\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161h)(dh/dt)\u003C/p\u003E\u003Cp\u003EI shall denote \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161h as v\u0027(h), and, of course, dh/dt = v(h).\u003C/p\u003E\u003Cp\u003ET(h) = g \u002B k\u003Csub\u003E0\u003C/sub\u003Ee\u003Csup\u003E-h/H\u003C/sup\u003Ev\u00C3\u201A\u00C2\u00B2(h) \u002B v\u0027(h)v(h)\u003C/p\u003E\u003Cp\u003EOf course, we are interested in integral over T(t)dt, but noting that dt = dh/v(h), we can re-write it as an integral (T(h)/v(h))dh, which we can integrate over having only the policy function v(h) at hand.\u003C/p\u003E\u003Cp\u003EFinally, we need to specify the parametrized form for v(h). For simplicity, I\u0027ve used Legendre polynomials, L\u003Csub\u003En\u003C/sub\u003E(x).\u003C/p\u003E\u003Cp\u003Ev(x) = v\u003Csub\u003E0\u003C/sub\u003E \u002B (v\u003Csub\u003Emax\u003C/sub\u003E - v\u003Csub\u003E0\u003C/sub\u003E)(a L\u003Csub\u003E3\u003C/sub\u003E(x) \u002B b L\u003Csub\u003E5\u003C/sub\u003E(x) \u002B c L\u003Csub\u003E7\u003C/sub\u003E(x) \u002B (1 - a - b - c)L\u003Csub\u003E1\u003C/sub\u003E(x))\u003C/p\u003E\u003Cp\u003EThis means that velocity will vary from v\u003Csub\u003E0\u003C/sub\u003E to v\u003Csub\u003Emax\u003C/sub\u003E for x = h/h\u003Csub\u003Emax\u003C/sub\u003E from 0 to 1. Since this is to serve as a proof of concept, we\u0027ll assume that v\u003Csub\u003E0\u003C/sub\u003E and v\u003Csub\u003Emax\u003C/sub\u003E are the terminal velocities at h = 0 and h = h\u003Csub\u003Emax\u003C/sub\u003E respectively. If the approach is valid, minimizing integral of T(t)dt with respect to parameters a, b, c should produce terminal velocity curve as the policy function. And, of course, it does.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://oi61.tinypic.com/10p7wcl.jpg\u0022 alt=\u002210p7wcl.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe result of optimization is in gray, while the terminal velocity plot is in green.\u003C/p\u003E\u003Cp\u003ENow, for a more useful problem. The policy is replaced with a pair of functions v\u003Csub\u003Ex\u003C/sub\u003E(h) and v\u003Csub\u003Ey\u003C/sub\u003E(h). The thrust function T(h) is far more complex, but is derived in the similar way. The integral we optimize is still (T(h)/v\u003Csub\u003Ey\u003C/sub\u003E(h))dh. But the best part is our ability to set initial and final velocities. At h = 0, both v\u003Csub\u003Ex\u003C/sub\u003E and v\u003Csub\u003Ey\u003C/sub\u003E are zero. At h = 80km, v\u003Csub\u003Ey\u003C/sub\u003E is zero, while v\u003Csub\u003Ex\u003C/sub\u003E is orbital. Please note, I did ignore Coriolis force and rotation of the planet. Other parameters are set to Kerbin from sea level. The parametrization for v\u003Csub\u003Ex\u003C/sub\u003E(h) is very similar to v(h) above. In fact, it\u0027s the same, with v\u003Csub\u003E0\u003C/sub\u003E = 0. Parametrization for v\u003Csub\u003Ey\u003C/sub\u003E is way more complex, because I needed an asymmetric function with zeros at both ends.\u003C/p\u003E\u003Cp\u003EI\u0027m not going to go through all of the results and potential problems, mostly because I want to build a finished version that accounts for all of KSP physics first, but I do have a rough result for the ascent profile. This is the angle of rocket\u0027s velocity with respect to horizon from sea level to the 80km orbit.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://oi59.tinypic.com/szzxiu.jpg\u0022 alt=\u0022szzxiu.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EAs expected, it is 90\u00C3\u201A\u00C2\u00B0 off the pad, and 0\u00C3\u201A\u00C2\u00B0 in orbit. The gravity turn does, in fact, begin immediately, but it is more gradual than some people have suggested. Of course, the TWR for this ascent peaks at roughly 3:1. I have not considered caps on thrust yet.\u003C/p\u003E\u003Cp\u003EThe great thing about this approach is that it is light weight enough to be used on the fly. Once I have all the gremlins worked out and have it working with thrust cap and variable I\u003Csub\u003ESP\u003C/sub\u003E, it\u0027d be nice to see if this can be written into a plugin that does automatic ascents in KSP.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-11T01:49:06Z\u0022 title=\u002208/11/2014 01:49  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 11, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Z-Man","CreatedById":96549,"CreatedDateTime":"2014-08-10T13:51:30Z","Content":"\n\u003Cp\u003EVery nice. I see a small problem at the end of orbital insertion, though, probably not big enough to cause worry and easy enough to fix if it turns out to be relevant. Since you want v\u003Csub\u003Ey\u003C/sub\u003E = 0 at the end, you naturally have dh/dt = 0. If you have any x-acceleration at the end (and you should have), you have\u003C/p\u003E\u003Cp\u003Edv\u003Csub\u003Ex\u003C/sub\u003E/dt \u0026gt; 0\u003C/p\u003E\u003Cp\u003Eand in the parameter target function\u003C/p\u003E\u003Cp\u003Edv\u003Csub\u003Ex\u003C/sub\u003E/dh = dv\u003Csub\u003Ex\u003C/sub\u003E/dt / (dh/dt)\u003C/p\u003E\u003Cp\u003EWhich would be infinite and the polynomial parametrization can\u0027t deliver that.\u003C/p\u003E\u003Cp\u003EThe problem should manifest itself in the T(h) function: if the above is right, it should go to zero for h = h\u003Csub\u003Emax\u003C/sub\u003E, which may not be terribly optimal.\u003C/p\u003E\u003Cp\u003EEasy solution: Add to the v\u003Csub\u003Ey\u003C/sub\u003E target function\u003C/p\u003E\u003Cp\u003Ed * ((h\u003Csub\u003Emax\u003C/sub\u003E-h)^(1/3) - h\u003Csub\u003Emax\u003C/sub\u003E^(1/3))\u003C/p\u003E\u003Cp\u003Ed being a new parameter. I hope the exponent 1/3 is right, it should be what allows for a finite acceleration at the end.\u003C/p\u003E\n"},{"CreatedByName":"indroth","CreatedById":115621,"CreatedDateTime":"2014-08-10T18:10:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ET(h) = g \u002B k\u003Csub\u003E0\u003C/sub\u003Ee\u003Csup\u003E-h/H\u003C/sup\u003E \u002B v\u0027(h)v(h)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EShouldn\u0027t there be a v\u003Csup\u003E2\u003C/sup\u003E in there? Or am I missing something?\u003C/p\u003E\n"},{"CreatedByName":"Ralathon","CreatedById":71537,"CreatedDateTime":"2014-08-10T19:42:57Z","Content":"\n\u003Cp\u003ELooking forward to the finished method. What kind of steering losses are you looking at with that derived curve? I imagine people who use the Ferram Aerospace Research addon wouldn\u0027t want to see angles more than a few degrees from prograde due to aerodynamic stress.\u003C/p\u003E\n"},{"CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2014-08-10T20:08:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ralathon\u0022 data-cite=\u0022Ralathon\u0022\u003E\u003Cdiv\u003EWhat kind of steering losses are you looking at with that derived curve? I imagine people who use the Ferram Aerospace Research addon wouldn\u0027t want to see angles more than a few degrees from prograde due to aerodynamic stress.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELooks reasonably gentle to me. 75\u00C3\u201A\u00C2\u00B0 by 10km, 55\u00C3\u201A\u00C2\u00B0 by 20km -- just try it.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-08-11T01:48:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ralathon\u0022 data-cite=\u0022Ralathon\u0022\u003E\u003Cdiv\u003ELooking forward to the finished method. What kind of steering losses are you looking at with that derived curve? I imagine people who use the Ferram Aerospace Research addon wouldn\u0027t want to see angles more than a few degrees from prograde due to aerodynamic stress.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo idea. Though, there are a couple of places where thrust vector differs significantly from velocity vector, so I think this wouldn\u0027t work well in FAR. I\u0027d have to take a look at FAR model and take it into account to get a somewhat different profile. As it is, this is just for vanilla drag.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Z-Man\u0022 data-cite=\u0022Z-Man\u0022\u003E\u003Cdiv\u003EThe problem should manifest itself in the T(h) function: if the above is right, it should go to zero for h = h\u003Csub\u003Emax\u003C/sub\u003E, which may not be terribly optimal.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHm. It has no problem getting \u0022infinite\u0022 thrust off the pad, to quickly build up to terminal velocity. Shouldn\u0027t it work the same way for h\u003Csub\u003Emax\u003C/sub\u003E by your logic? The other thing is that rocket is directed to burn mostly down at the top. So it might make sense for throttle to ease off. It seems that situation here is similar to a landing burn, where you start burning towards the planet/moon initially in the beginning. (Constant altitude descent method.)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022indroth\u0022 data-cite=\u0022indroth\u0022\u003E\u003Cdiv\u003EShouldn\u0027t there be a v2 in there? Or am I missing something?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIndeed, there should be. I\u0027ll edit it in.\u003C/p\u003E\n"},{"CreatedByName":"Z-Man","CreatedById":96549,"CreatedDateTime":"2014-08-11T05:58:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIt has no problem getting \u0022infinite\u0022 thrust off the pad, to quickly build up to terminal velocity.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou built that in explicitly with the v\u003Csub\u003E0\u003C/sub\u003E parameter for v\u003Csub\u003Ey\u003C/sub\u003E. If you force that to zero, If you take that out (and I think you should, now that you brought attention to it) you only get finite thrust at the start. The same is true at the end: You can only get the behaviour out of the process that you explicitly allow for in the parametrization.\u003C/p\u003E\u003Cp\u003EBut yeah, if you only optimize for total dv spent without TWR limitations, easing the throttle down at the end may be a good thing, Oberth and all. And even with TWR limitations, Kerbin has such an insane atmosphere thickness to radius ratio that just leaving the atmosphere gives you more than enough time to push to orbit efficiently even with lower thrust.\u003C/p\u003E\u003Cp\u003EMaybe h is not the best argument to parametrize after? Maybe the total energy per mass ( g h \u002B (v\u003Csub\u003Ex\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E \u002B v\u003Csub\u003Ey\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E)/2 ) or some modification would be better? If the rocket is not increasing that one steadily, it\u0027s doing something wrong \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"CjStaal","CreatedById":112518,"CreatedDateTime":"2014-08-11T06:14:07Z","Content":"\n\u003Cp\u003EThis is brilliant. I would hope you could formulate one that would work with FAR as well though, since that\u0027s more realistic, there might be a solution already online for earth based trajectories that you can derive off of for kerbal trajectories.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-08-11T08:52:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Z-Man\u0022 data-cite=\u0022Z-Man\u0022\u003E\u003Cdiv\u003EYou built that in explicitly with the v\u003Csub\u003E0\u003C/sub\u003E parameter for v\u003Csub\u003Ey\u003C/sub\u003E.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot for the 2D case. In the 2D case, vertical velocity is precisely zero both at sea level and at target altitude. Which is precisely what you want from an ascent that takes you to circular orbit. Thrust is still extremely large at takeoff. And that\u0027s precisely because initial velocity is zero. In vertical ascent case, it\u0027s well known that thrust needs to be infinite to bring up ascent velocity to terminal instantly, thereafter settling on TWR of 2:1. The results I\u0027m getting agree with that. Rocket blasts straight up, achieves terminal velocity, then starts to pitch over to initiate gravity turn.\u003C/p\u003E\u003Cp\u003EP.S. Lets forget all the terms that obviously aren\u0027t going to contribute to an infinite result. T\u003Csub\u003Ey\u003C/sub\u003E(h) = v\u0027(h)v(h). Yes, v(h) goes to zero as h goes to zero. But v\u0027(h) can, and does, diverge. Precisely at zero, the result is actually undefined. But there is a limit. And lim T\u003Csub\u003Ey\u003C/sub\u003E(h) as h goes to 0 can be zero, finite, or infinite. In this particular case, it does happen to diverge to infinity. At h very small, but above zero, I get a numerical result that\u0027s finite, but very large.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-11T09:02:45Z\u0022 title=\u002208/11/2014 09:02  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 11, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Z-Man","CreatedById":96549,"CreatedDateTime":"2014-08-11T11:04:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ENot for the 2D case. In the 2D case, vertical velocity is precisely zero both at sea level and at target altitude.\u003Cp\u003EAnd you\u0027re also absolutely correct about getting a divergent thrust at liftoff even then from the term that gives v\u003Csub\u003Ex\u003C/sub\u003E approximately proportional to h at the start. I hadn\u0027t noticed. That is definitely going to bite you in the rear later when you want to add TWR limits, though. You have no term there that would produce constant thrust (\u0026gt;1, that is) at the start. Choose your parametrization wisely, is all I\u0027m saying.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cdiv\u003EAh, right. I misread what you wrote in your original post then when you said you set v\u003Csub\u003E0\u003C/sub\u003E to 0 specifically for v\u003Csub\u003Ex\u003C/sub\u003E. And didn\u0027t you also say TWR peaks at 3?\u003C/div\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-08-11T11:55:36Z","Content":"\n\u003Cp\u003ETWR starts off infinite, drops to a value of approximately 2 during early ascent, but then climbs to a bit past 3 as the rocket settles into gravity turn. Once well into gravity turn, TWR starts to drop again. It\u0027s somewhere between 1 and 2 through most of the ascent.\u003C/p\u003E\u003Cp\u003EI think I\u0027ll have to go full Lagrange on the max throttle. I can\u0027t think of any good way to enforce the limit other than doing formal constraint. So the integral will be [T(h)/(I\u003Csub\u003ESP\u003C/sub\u003E(h)v\u003Csub\u003Ey\u003C/sub\u003E(h)) \u002B \u00C3\u017D\u00C2\u00BB(h)(T(h) - T\u003Csub\u003Emax\u003C/sub\u003E)]dh. And I\u0027ll just have to solve for \u00C3\u017D\u00C2\u00BB(h) at every integration point.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-08-23T10:42:27Z","Content":"\n\u003Cp\u003E@K^2\u003C/p\u003E\u003Cp\u003EVery interesting approach. Lookig forward so see your progress.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CjStaal\u0022 data-cite=\u0022CjStaal\u0022\u003E\u003Cdiv\u003EThis is brilliant. I would hope you could formulate one that would work with FAR as well though, since that\u0027s more realistic, there might be a solution already online for earth based trajectories that you can derive off of for kerbal trajectories.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA major factor of this theoretical ascent optimization is drag.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere#Drag\u0022 rel=\u0022external nofollow\u0022\u003EStock drag\u003C/a\u003E is very simple for rockets of all buildforms and easily put into a formula.\u003C/p\u003E\u003Cp\u003EFar\u0027s drag calculation way more complex and depends much more on the form of the rocket and unil someone will come up with a reasonable way to theoretically calculate FAR-drag in a simulation, there will not be such a thing.\u003C/p\u003E\u003Cp\u003EMaybe one could use the FAR-sourcecode itself for such an Optimizer. ;-)\u003C/p\u003E\n"}]}