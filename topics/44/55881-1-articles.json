{"TopicId":55881,"ForumId":44,"TopicTitle":"Help with my project in Programming","CreatedByName":"Wampa842","CreatedById":85841,"CreatedDateTime":"2013-12-12T07:25:41Z","PageNum":1,"Articles":[{"CreatedByName":"Wampa842","CreatedById":85841,"CreatedDateTime":"2013-12-12T07:25:41Z","Content":"\n\u003Cp\u003EI have a school assignment to write a more-or-less useful program in Pascal (don\u0027t ask why Pascal). My idea is to make an orbital calculator for Kerbin which takes in \u003Cem\u003Esome\u003C/em\u003E data, and returns whatever can be calculated from those variables and the constants of Kerbin and its SoI.\u003C/p\u003E\u003Cp\u003EThese input data are:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EApoapsis\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPeriapsis\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAngle from semi-major axis (both deg and rad will do, I can cross-convert them)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EVelocity at apoapsis (if empty, it\u0027ll be calculated)\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESome outputs that I\u0027d like to calculate:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003ECurrent velocity *\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EVelocity at apoapsis and periapsis *\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECurrent angular velocity *\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EEccentricity of the trajectory\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EHow much faster/slower the craft is compared to Kerbin\u0027s rotation\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EWhether the orbit is kerbosynchronous or semi-synchronous, or close to that\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EWhether the craft is on an escape/re-entry/collision trajectory\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EThe minimal delta-v required for an escape and a re-entry (Pe \u0026lt; 20km) from the periapsis and apoapsis, respectively\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe results marked with an asterisk are the ones I cannot write up a formula for, and this being the largest community of rocketeers that I am part of, I thought maybe some scientists can help me out.\u003C/p\u003E\u003Cp\u003ECheers,\u003C/p\u003E\u003Cp\u003EWampa842\u003C/p\u003E\n"},{"CreatedByName":"Kilmeister","CreatedById":65062,"CreatedDateTime":"2013-12-12T07:50:06Z","Content":"\n\u003Cp\u003E\u0026lt;Apology\u0026gt;Why Pascal?\u0026lt;/Apology\u0026gt;\u003C/p\u003E\u003Cp\u003EI\u0027m guessing it\u0027s an intro to programming or a concept course. Personally, I would just analyze some of the mods that already include all this info to obtain the formulas, but I\u0027m a programmer and that\u0027s what I do. I\u0027m sure someone here will give you a better answer, but I had to respond to the Pascal thing ;P\u003C/p\u003E\n"},{"CreatedByName":"DaveofDefeat","CreatedById":58539,"CreatedDateTime":"2013-12-12T08:02:42Z","Content":"\n\u003Cp\u003EMan I\u0027m sorry I can\u0027t help but I just had to comment on the pascal thing. I can\u0027t even think of a place that would teach pascal. Most entry level programming is java, and everything else is c\u002B\u002B and c Sharp.\u003C/p\u003E\u003Cp\u003EBut yea find the equations and maybe make a simple GUI to input your values. Idk if pascal has any support for GUI.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-12T08:32:25Z","Content":"\n\u003Cp\u003EI\u0027m going to use the following notation.\u003C/p\u003E\u003Cp\u003ER = planet\u0027s radius.\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00C2\u00BC = GM = gravitational parameter.\u003C/p\u003E\u003Cp\u003Er = h \u002B R = distance from center of the planet. h is altitude.\u003C/p\u003E\u003Cp\u003Er\u003Csub\u003Ea\u003C/sub\u003E = h\u003Csub\u003Ea\u003C/sub\u003E \u002B R = apoapsis.\u003C/p\u003E\u003Cp\u003Er\u003Csub\u003Ep\u003C/sub\u003E = h\u003Csub\u003Ep\u003C/sub\u003E \u002B R = periapsis.\u003C/p\u003E\u003Cp\u003Ea = (r\u003Csub\u003Ea\u003C/sub\u003E \u002B r\u003Csub\u003Ep\u003C/sub\u003E)/2 = semi-major axis.\u003C/p\u003E\u003Cp\u003EUsing these, you can find velocity at any point along the orbit using virial. (You can derive this equation from energy and angular momentum conservation, but it takes a bit of work.)\u003C/p\u003E\u003Cp\u003Ev\u00C3\u201A\u00C2\u00B2 = \u00C3\u017D\u00C2\u00BC(2/r - 1/a)\u003C/p\u003E\u003Cp\u003EThis will work for apoapsis and periapsis velocities as well. Just substitute r = r\u003Csub\u003Ea/p\u003C/sub\u003E. (Note that this even works for hyperbolic trajectory if you use the convention where a \u0026lt; 0 for hyperbolic trajectories.)\u003C/p\u003E\u003Cp\u003EAngular velocity follows from angular momentum conservation, which essentially tells you that \u00C3\u00E2\u20AC\u00B0r\u00C3\u201A\u00C2\u00B2 is a constant. This is equivalent to Kepler\u0027s Second Law. So you know that \u00C3\u00E2\u20AC\u00B0r\u00C3\u201A\u00C2\u00B2 = \u00C3\u00E2\u20AC\u00B0\u003Csub\u003Ep\u003C/sub\u003Er\u003Csub\u003Ep\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2. And at periapsis, angular velocity is just \u00C3\u00E2\u20AC\u00B0\u003Csub\u003Ep\u003C/sub\u003E=v\u003Csub\u003Ep\u003C/sub\u003E/r\u003Csub\u003Ep\u003C/sub\u003E, because r and v are orthogonal at apsides. That gives you general formula.\u003C/p\u003E\u003Cp\u003E\u00C3\u00E2\u20AC\u00B0 = v\u003Csub\u003Ep\u003C/sub\u003E r\u003Csub\u003Ep\u003C/sub\u003E/r\u00C3\u201A\u00C2\u00B2\u003C/p\u003E\u003Cp\u003EAgain, since periapsis is defined for parabolic trajectories, this will work even if your craft is on an escape trajectory.\u003C/p\u003E\u003Cp\u003EAnd you should be able to compute everything else from that. Have fun.\u003C/p\u003E\n"},{"CreatedByName":"Wampa842","CreatedById":85841,"CreatedDateTime":"2013-12-12T10:03:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI\u0027m going to use the following notation.\u003Cp\u003E-snip snip snip-\u003C/p\u003E\u003Cp\u003EAnd you should be able to compute everything else from that. Have fun.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat just about answers it, thanks. Some (or much, much more than \u0027some\u0027) research and leaning over my desk later I should be able to implement this in Pascal.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022\\\u0022 data-cite=\u0022\\\u0022\u003E\u003Cdiv\u003EWhy Pascal?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo be honest, I have no idea why. The IT school I attend teaches Programming theory using Borland Pascal and Object Pascal, claiming it is the best for learning. That may be true, but I will be knee-deep in it when I have to learn C# or C\u002B\u002B throughout the summer before I start university.\u003C/p\u003E\n"},{"CreatedByName":"Komonyi","CreatedById":54996,"CreatedDateTime":"2013-12-12T10:16:14Z","Content":"\n\u003Cp\u003EAhh, it\u0027s so funny when so called programmers laugh when they hear something about Pascal. They only know that old blue IDE. Their knowledge is so limited:(\u003C/p\u003E\u003Cp\u003EWell, the thing is that Pascal\u0027s life didn\u0027t stop there. It\u0027s still upgraded, offers you almost the same as nowdays popular languages offer. You might want to check out Free Pascal and Lazarus.\u003C/p\u003E\u003Cp\u003EAnother thing is that Delphi is basicly Pascal. Quite good language too. Not to mention that this is developed by a large company, and they are developing something very great, called Firemonkey, which offers you to compile your code to any platform you want. If this project will be a success, today\u0027s most popular language will be the Delphi.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-12T10:52:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wampa842\u0022 data-cite=\u0022Wampa842\u0022\u003E\u003Cdiv\u003ETo be honest, I have no idea why. The IT school I attend teaches Programming theory using Borland Pascal and Object Pascal, claiming it is the best for learning. That may be true, but I will be knee-deep in it when I have to learn C# or C\u002B\u002B throughout the summer before I start university.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENah, don\u0027t worry. Transition from Borland Pascal to C or from Object Pascal/Delphi to C\u002B\u002B is extremely smooth. Get yourself a \u003Ca href=\u0022https://www.amazon.com/C-Pocket-Reference-Kyle-Loudon/dp/0596004966/ref=sr_1_1?ie=UTF8\u0026amp;qid=1386844958\u0026amp;sr=8-1\u0026amp;keywords=c%2B%2B\u002Bpocket\u002Breference\u0022 rel=\u0022external nofollow\u0022\u003EC\u002B\u002B Pocket Reference\u003C/a\u003E. That will let you quickly look up the syntax, and that covers almost all of the important differences. I\u0027d start early, though. There is no reason why you can\u0027t be writing some simple C\u002B\u002B programs right now to be ready when you have to do this for class.\u003C/p\u003E\u003Cp\u003EC# is a bit different, because it compiles to CLR binary, rather than machine binary, which means memory management is a lot more like Java, and that leads to slightly different approach to programming. But still, for most introductory level stuff, it\u0027s going to feel like just a syntax difference. In fact, when you start doing more advanced things with memory, C# might seem way easier, because it\u0027s a lot better at making sure you aren\u0027t creating leaks or seg-faults.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-12-12T13:07:12Z","Content":"\n\u003Cp\u003Ei think they started me with c. no \u002B\u002B, no # just c. i learned c\u002B\u002B on my own. then a few years ago i discovered lua. those are my most fluent languages. did some vb too but dont remember any of it. i could learn others but i can get by with what i know. c# looks easy enough, but i dont like the idea of running not machine code (same applies to java, which i will not be learning). lua is kind of exempt because its usually used to extend a machine executable, though i do a lot of stand alone stuff just because its an easy language to use.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-12T14:29:15Z","Content":"\n\u003Cp\u003EVirtual machine has a lot of advantages. It\u0027s very useful to know how to code for one. Understanding garbage collection in Java and C# is also very useful for larger C\u002B\u002B projects. Memory management in general is an interesting subject.\u003C/p\u003E\n"},{"CreatedByName":"Kilmeister","CreatedById":65062,"CreatedDateTime":"2013-12-12T14:40:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Komonyi\u0022 data-cite=\u0022Komonyi\u0022\u003E\u003Cdiv\u003EAhh, it\u0027s so funny when so called programmers laugh when they hear something about Pascal. They only know that old blue IDE. Their knowledge is so limited:(\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECall it nostalgia then \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. Last time I dealt with pascal was like 17 years ago. SO... half my life ago!\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-12T16:05:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Komonyi\u0022 data-cite=\u0022Komonyi\u0022\u003E\u003Cdiv\u003Eand they are developing something very great, called Firemonkey, which offers you to compile your code to any platform you want.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, so it wil lfinally be able to do what GCC could do with C code since the 80s. About time.\u003C/p\u003E\n"},{"CreatedByName":"Komonyi","CreatedById":54996,"CreatedDateTime":"2013-12-12T21:37:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EAh, so it wil lfinally be able to do what GCC could do with C code since the 80s. About time.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmm, maybe I\u0027m the stupid here, but e.g. iOS or Android didn\u0027t exist in the 80s.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-12-12T21:44:23Z","Content":"\n\u003Cp\u003Ei think gcc can compile for arm which actually did exist in the 80s.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/ARM_architecture#History\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/ARM_architecture#History\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EiOS and Android werent around yet though (and i bet they were compiled with gcc).\u003C/p\u003E\u003Cp\u003Egcc is awesome.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-12T21:50:41Z\u0022 title=\u002212/12/2013 09:50  PM\u0022 data-short=\u002210 yr\u0022\u003EDecember 12, 2013\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-12T22:21:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Komonyi\u0022 data-cite=\u0022Komonyi\u0022\u003E\u003Cdiv\u003EHmm, maybe I\u0027m the stupid here, but e.g. iOS or Android didn\u0027t exist in the 80s.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd because they didn\u0027t exist, nobody wanted to compile for them. So the statement was still true. And since GCC compilers are being kept up to date to this day, the statement stayed true.\u003C/p\u003E\u003Cp\u003EBesides, you don\u0027t compile to the platform. You compile to an architecture. And as Nuke pointed out, ARM already existed in the 80s. As well as MIPS and x86, which are your other options on Android. iOS is strictly ARM or derivatives, if I\u0027m not mistaken.\u003C/p\u003E\u003Cp\u003EThe linker, of course, needs to know a few things about target platform to dress up your compiled code properly. And the linkers in GCC package have been able to make executable code for these mobile platforms, as well as many, many others, for pretty much as long as these platforms have been around. People who keep GNU up to date tend to be very good at making sure the functionality is updated as soon as there is new development in architecture or operating systems. Of course, if you happen to need code for a platform it can\u0027t link for, you still have options. You can get it to dump just binary that you can dress up for a particular OS yourself, or it can give you code compiled to assembly, but not assembled or linked, so you can use native assembler and linker. Et cetera. You\u0027d be very hard pressed to come up with a modern platform, even an obscure one, that you can\u0027t build code for using GCC tools.\u003C/p\u003E\u003Cp\u003EGCC also gives you a choice of languages. C, C\u002B\u002B, Objective-C, Ada, and Java are standard. A number of other languages are also available, including Pascal. It\u0027s not standard, but you can get it. Because it\u0027s part of the GCC package, it can compile and link to any platform that the other GCC compilers can handle. So yeah, you can already build iOS and Android code using GCC Pascal.\u003C/p\u003E\n"},{"CreatedByName":"Wampa842","CreatedById":85841,"CreatedDateTime":"2013-12-13T16:24:38Z","Content":"\n\u003Cp\u003EPlease, let\u0027s not turn this into an argument over the best programming language. They all have their ups and downs.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-13T19:12:17Z","Content":"\n\u003Cp\u003ENobody\u0027s been arguing about programming languages for about a page. We\u0027ve been talking architectures, compilers, and development tools in general.\u003C/p\u003E\n"},{"CreatedByName":"arthurreis","CreatedById":96747,"CreatedDateTime":"2013-12-15T00:37:12Z","Content":"\n\u003Cp\u003EProgramming languages apart, another approach you could use is a set of coupled differential equations and a numeric calculation method (such as Euler\u0027s). For instance, at any given time, the resultant force of a body on \u0022free\u0022 orbit should be:\u003C/p\u003E\u003Cp\u003EFr= Mb*a = -G*Mb*Mp/r^2\u003C/p\u003E\u003Cp\u003EBut, if there are any other forces, for instance, let say attrition (proportional to the velocity of the ship, Fa=-c*v, c being a constant), you can easily sum to the equation above.\u003C/p\u003E\u003Cp\u003EFr=Mb*a= -G*Mb*Mp/r^2 -c*v\u003C/p\u003E\u003Cp\u003Ethus\u003C/p\u003E\u003Cp\u003Ea=-g*Mp/r^2 - c*v/Mb\u003C/p\u003E\u003Cp\u003ESo, you know the acceleration at that instance! As the acceleration is the derivative of the velocity (hence the differential equations approach) a=dv/dt, the velocity is now v= v0 \u002B a*dt (v0 being the speed at a prior moment) aaand.. the velocity is the derivative of the position! So x=x0\u002Bv*dt\u003C/p\u003E\u003Cp\u003ETo the programming part, you should first set you initial conditions (let\u0027s say speed and position) and basically build a loop increasing the time by a dt factor each iteration. Inside the loop you calculate the instantaneous accel, speed and position, using the last known data and so on (Euler\u0027s method).\u003C/p\u003E\u003Cp\u003EMaybe this is not a very high-school-ish level technique, but is a damn powerful numeric solution (three body problem, anyone?)\u003C/p\u003E\u003Cp\u003EBy the way, small tip: planet orbits are bi-dimensional (at least), therefore a there are 2 components to speed (vx, vy), position (x, y) and acceleration \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-12-15T03:38:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arthurreis\u0022 data-cite=\u0022arthurreis\u0022\u003E\u003Cdiv\u003Ea numeric calculation method (such as Euler\u0027s)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEuler is pretty much the worst choice you can make for an orbital mechanics problem. (There are two ways to do Euler for second order, and one of them is the absolute worst way to integrate orbital motion.)\u003C/p\u003E\u003Cp\u003EIf you want a method that\u0027s just as simple, yet gives you far, far better precision, go with Verlet.\u003C/p\u003E\n"},{"CreatedByName":"arthurreis","CreatedById":96747,"CreatedDateTime":"2013-12-21T23:32:54Z","Content":"\n\u003Cp\u003EIt\u0027s the simplest, IMO. I do preffer using methods with higher order errors functions, but for a HS project it\u0027s good enough.\u003C/p\u003E\n"},{"CreatedByName":"CrashTestDummy","CreatedById":76468,"CreatedDateTime":"2014-04-16T14:30:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DaveofDefeat\u0022 data-cite=\u0022DaveofDefeat\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EBut yea find the equations and maybe make a simple GUI to input your values. Idk if pascal has any support for GUI.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI once wrote an x\u0027s and o\u0027s program in Pascal. I was able to construct a basic UI using the graphics module. (the alternative would have been ascii x\u0027s and o\u0027s - oh the horror!)\u003C/p\u003E\u003Cp\u003EDon\u0027t recall there being any mouse support but I would be surprised if there isn\u0027t. \u003C/p\u003E\u003Cp\u003EIt was a long, long time ago so its all a bit foggy. The only thing I remember for sure is that I wrote the source code with a hammer, a chisel and a large slab of granite.\u003C/p\u003E\n"},{"CreatedByName":"PakledHostage","CreatedById":8059,"CreatedDateTime":"2014-04-16T15:28:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CrashTestDummy\u0022 data-cite=\u0022CrashTestDummy\u0022\u003E\u003Cdiv\u003EThe only thing I remember for sure is that I wrote the source code with a hammer, a chisel and a large slab of granite.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/20000/8000/700/28703/28703.strip.gif\u0022 alt=\u002228703.strip.gif\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Z-Man","CreatedById":96549,"CreatedDateTime":"2014-04-16T15:48:37Z","Content":"\n\u003Cp\u003EI learned to program on this thing:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://de.wikipedia.org/wiki/Kosmos_CP1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://de.wikipedia.org/wiki/Kosmos_CP1\u003C/a\u003E (Could not find an English description)\u003C/p\u003E\u003Cp\u003E1 kBit of usable memory! 1 Register! 8 Bits! Code as readable as assembler and as fast as an interpreted language!\u003C/p\u003E\u003Cp\u003EGood times.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-16T19:49:40Z","Content":"\n\u003Cp\u003Ethe software for the agc was knitted by old ladies, quite literally.\u003C/p\u003E\n"},{"CreatedByName":"Palladium Corp","CreatedById":99996,"CreatedDateTime":"2014-04-21T19:42:17Z","Content":"\n\u003Cp\u003EI had a similar idea for an orbital calculator in pascal. It was to have a 2d GUI and everything. I was writing it at school, but quickly gave up when I realised that the graphics unit hadn\u0027t been installed on the machines there. (I am learning pascal for my A-levels btw)\u003C/p\u003E\u003Cp\u003EI\u0027m tempted to give it another go.\u003C/p\u003E\n"}]}