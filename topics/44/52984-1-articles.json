{"TopicId":52984,"ForumId":44,"TopicTitle":"How does KSP calculate drag?","CreatedByName":"Xoxix","CreatedById":25372,"CreatedDateTime":"2013-11-13T16:43:40Z","PageNum":1,"Articles":[{"CreatedByName":"Xoxix","CreatedById":25372,"CreatedDateTime":"2013-11-13T16:43:40Z","Content":"\n\u003Cp\u003EI\u0027m building a numerical model of KSP for a physics project. (i haven\u0027t a clue why my teacher lets me use a game for a school project either \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI want to research the influence of launch angles and the timing of the in my ascent. For this, i need to know how drag is calculated in KSP.\u003C/p\u003E\u003Cp\u003EDoes it (I\u0027m pretty sure it does) or where does it differ from the real thing?\u003C/p\u003E\n"},{"CreatedByName":"Black_Tomcat","CreatedById":63718,"CreatedDateTime":"2013-11-13T17:00:45Z","Content":"\n\u003Cp\u003EIt differs quite greatly from the real thing, it really is just a placeholder right now.\u003C/p\u003E\u003Cp\u003EIt is calculated using the drag coefficient and the weight of the part (yep, the weight).\u003C/p\u003E\u003Cp\u003EHere in the wiki is the whole formula: \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Xoxix","CreatedById":25372,"CreatedDateTime":"2013-11-14T15:02:58Z","Content":"\n\u003Cp\u003Ethanks!\u003C/p\u003E\u003Cp\u003Ehow could I look over the wiki...\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-14T15:33:34Z","Content":"\n\u003Cp\u003EReal atmospheric drag can be modeled extremely well using F\u003Csub\u003Ed\u003C/sub\u003E = C\u003Csub\u003Ed\u003C/sub\u003E P\u003Csub\u003Edyn\u003C/sub\u003E A. Here, P\u003Csub\u003Edyn\u003C/sub\u003E = (1/2) \u00C3\u00C2v\u00C3\u201A\u00C2\u00B2 is dynamic pressure of the air flow of density \u00C3\u00C2 and velocity v. C\u003Csub\u003Ed\u003C/sub\u003E is the drag coefficient. KSP uses a fairly small constant value for C\u003Csub\u003Ed\u003C/sub\u003E specified for each part. Furthermore, real C\u003Csub\u003Ed\u003C/sub\u003E depends a bit on velocity. It\u0027s going to be fairly constant at subsonic speeds, spike through the transonic region, settle on a new nearly-constant value in the supersonic, and start climbing again in hypersonic. Finally, A is the cross-section area as per the article linked above.\u003C/p\u003E\u003Cp\u003EThe way you\u0027d typically use this is bunch together some of these constants, like k = (1/2) C\u003Csub\u003Ed\u003C/sub\u003E A. That way, drag is simply F\u003Csub\u003Ed\u003C/sub\u003E = k\u00C3\u00C2v\u00C3\u201A\u00C2\u00B2. You can then experimentally measure k by measuring terminal velocity. Since at terminal velocity drag cancels weight, mg = F\u003Csub\u003Ed\u003C/sub\u003E = k\u00C3\u00C2v\u003Csub\u003Et\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2, or k = mg/(\u00C3\u00C2v\u003Csub\u003Et\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2). The reason this works is that most imperfections of the model are absorbed into the value of C\u003Csub\u003Ed\u003C/sub\u003E. If you were to try and compute it from the shape of the object, you are likely to end up being way off. But if you establish it experimentally, the rest of the equation works extremely well, and you can apply it towards anything from a bullet to a rocket.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-14T15:42:31Z\u0022 title=\u002211/14/2013 03:42  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 14, 2013\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Traches","CreatedById":79229,"CreatedDateTime":"2013-11-14T16:12:49Z","Content":"\n\u003Cp\u003EIf you\u0027re doing a physics project and want a better drag model, you should look into a mod called \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/20451-0-22-Ferram-Aerospace-Research-v0-10-Aerodynamics-Fixes-For-Planes-Rockets\u0022 rel=\u0022external nofollow\u0022\u003EFerram Aerospace Research\u003C/a\u003E. KSP\u0027s stock drag model is not even remotely realistic; a full tank creates more drag than an empty one, nose cones actually add drag rather than reduce it, and you can create infinite gliders by flapping control surfaces. FAR fixes that.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-11-15T11:42:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EReal atmospheric drag can be modeled extremely well using F\u003Csub\u003Ed\u003C/sub\u003E = C\u003Csub\u003Ed\u003C/sub\u003E P\u003Csub\u003Edyn\u003C/sub\u003E A. Here, P\u003Csub\u003Edyn\u003C/sub\u003E = (1/2) \u00C3\u00C2v\u00C3\u201A\u00C2\u00B2 is dynamic pressure of the air flow of density \u00C3\u00C2 and velocity v. C\u003Csub\u003Ed\u003C/sub\u003E is the drag coefficient. KSP uses a fairly small constant value for C\u003Csub\u003Ed\u003C/sub\u003E specified for each part. Furthermore, real C\u003Csub\u003Ed\u003C/sub\u003E depends a bit on velocity. It\u0027s going to be fairly constant at subsonic speeds, spike through the transonic region, settle on a new nearly-constant value in the supersonic, and start climbing again in hypersonic. Finally, A is the cross-section area as per the article linked above.\u003Cp\u003EThe way you\u0027d typically use this is bunch together some of these constants, like k = (1/2) C\u003Csub\u003Ed\u003C/sub\u003E A. That way, drag is simply F\u003Csub\u003Ed\u003C/sub\u003E = k\u00C3\u00C2v\u00C3\u201A\u00C2\u00B2. You can then experimentally measure k by measuring terminal velocity. Since at terminal velocity drag cancels weight, mg = F\u003Csub\u003Ed\u003C/sub\u003E = k\u00C3\u00C2v\u003Csub\u003Et\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2, or k = mg/(\u00C3\u00C2v\u003Csub\u003Et\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2). The reason this works is that most imperfections of the model are absorbed into the value of C\u003Csub\u003Ed\u003C/sub\u003E. If you were to try and compute it from the shape of the object, you are likely to end up being way off. But if you establish it experimentally, the rest of the equation works extremely well, and you can apply it towards anything from a bullet to a rocket.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EcD is a lets see what happens variable. when you design an aerospace structure its usually a big unknown, and has to be determined experimentally. literally stick it in the wind tunnel and see what it could do. you control all the variables so its easy to determine the cD from the data with math. you can then determine which regime of flight the structure is most useful. in a simulation this is probibly best represented as a curve (probibly based on a real world analog like a concorde fusalage or a naca 2412 airfoil) in the velocity domain from standstill into hypersonic. \u003C/p\u003E\u003Cp\u003Ecross sectional area can be tested procedurally in real time. the wind vector will always be changing so just using a dimensionless area area doesn\u0027t quite work out. the wind will always change aoa on the pitch and yaw axis and therefore the area exposed will not be constant. so in my last attempt at a flight model i used values for the cross section on all 3 orthogonal planes, placed into a vector and then dotted with the normalized wind vector (which was rotated into model space). i was rather happy with the result. \u003C/p\u003E\u003Cp\u003Eactually the hardest thing i had with my drag model was barometric pressure calculations. i started with a flat gradient, but apparently that is not a very accurate model for a planet\u0027s atmosphere. tempurature is a factor as well as density. i learned that real world avionics were calibrated around a more scientifically accurate model, so i used the standard atmosphere. looking around i found one for mars as well. \u003C/p\u003E\u003Cp\u003Ethats about as far as i got. my blob model as i now call it has one major problem, there is only one blob. i never got around to implementing multi-blob systems. im not sure what to do about blobs in front of other blobs. my theory is once you figure out the exposed cross sectional area for all the blobs, use that as the radius for a circle centered on the blob in the plane perpendicular to the wind vector. circle-circle intersection can be used to determine what factor overlaps between any two circles, just check every circle against every other circle and store the factor of overlap somewhere with subsequent factors multplied into it. then its just the sum of all the areas times all the factors. with that data i can not only determine total linear drag for the whole system, but also drag for each blob individually, giving me a means to compute torque induced by drag for the whole system. i never got around to implementing this idea, since i suck at math.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-15T23:33:45Z\u0022 title=\u002211/15/2013 11:33  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 15, 2013\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003Cbr\u003Eoops\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-15T22:08:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nuke\u0022 data-cite=\u0022Nuke\u0022\u003E\u003Cdiv\u003Ecross sectional area can be tested procedurally in real time. the wind vector will always be changing so just using a dimensionless area area doesn\u0027t quite work out. the wind will always change aoa on the bitch and yaw axis and therefore the area exposed will not be constant. so in my last attempt at a flight model i used values for the cross section on all 3 orthogonal planes, placed into a vector and then dotted with the normalized wind vector (which was rotated into model space). i was rather happy with the result.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s basically what I did, except that C\u003Csub\u003ED\u003C/sub\u003E can also be different in different directions, so I absorbed the (1/2)AC\u003Csub\u003ED\u003C/sub\u003E into a single value, and built a drag tensor D out of it. Then the total drag was just \u00C3\u00C2(vDv). This probably isn\u0027t accurate enough for a real flight simulation, but for a game it works great.\u003C/p\u003E\u003Cp\u003EBut no, unfortunately, you can\u0027t use a bunch of these, one for each part, to figure out the total. Not in general. For an airplane, having drag center for fuselage and one for each lifting surface works well enough. I\u0027ve built a pretty nifty simulator based on this idea. But if, say, your fuselage is built out of parts, you can\u0027t just look at how much of each \u0022blob\u0022 is exposed. The total quadratic drag is due to a combination of a form drag and skin drag. For a long narrow body, nearly all of the form drag comes from the end points, but nearly all of the skin drag comes from the length of the object. And you can\u0027t really tell how much of your C\u003Csub\u003ED\u003C/sub\u003E is due to form and how much is due to skin.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-11-15T23:52:16Z","Content":"\n\u003Cp\u003Ethats good to know. didnt want to implement a complex system that probibly doesn\u0027t work. since my game is not going to be a building game, i just need a way to describe the aircraft to the flight model. so a small number of blobs with no occlusion should be a sufficient abstraction.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-16T00:51:42Z","Content":"\n\u003Cp\u003EYup. And the only reason you need more than one is because difference in drag/lift on wings during turn is actually a significant effect while flying. Say you are in level flight and you decide to yaw left using the pedals. Plane ends up banking left as well. Why? Because your right wing is moving just a little faster than your left wing and generates just a little bit more drag. If you don\u0027t take this into account in your flight model, the plane will actually bank \u003Cem\u003Eright\u003C/em\u003E due to torque from the rudder. On the other hand, when performing a roll, you\u0027ll also end up experiencing different drag on two wings, since the wing that generates less lift generates less drag as well. So all of these effects work together.\u003C/p\u003E\u003Cp\u003EIn principle, if you have a very simple airplane, you might only need the drag tensor for the body, and for the wings just do F\u003Csub\u003ED\u003C/sub\u003E = F\u003Csub\u003EL\u003C/sub\u003E/Constant. Except, you want to reduce lift past critical AoA only after you computed drag, so drag of stalled wing remains high. But with a more complex aircraft, you probably want to have engines have their own drag tensor, for example. Adding landing gear with its own drag tensor that turns \u0022on\u0022 and \u0022off\u0022 when gear is deployed or retracted is also a good idea.\u003C/p\u003E\u003Cp\u003EBut I don\u0027t know exactly what sort of craft you were planning on modeling. If it\u0027s something different from conventional airplanes, it might be way off.\u003C/p\u003E\u003Cp\u003EBy the way, having a bit of flight experience helps a lot. So if you are serious about writing a good flight model, you might want to invest in a few flight lessons. Just enough to get a feel for it.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-11-16T02:06:41Z","Content":"\n\u003Cp\u003Ewhat i have in mind is a ground to orbit (perhaps beyond) combat flight sim in a scifi universe. so aircraft will essentially be aerospace fighters.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-16T02:23:19Z","Content":"\n\u003Cp\u003EThat\u0027s... Different. You\u0027ll have to get transitions between different regimes right, each with its own characteristics. With an airplane, you just aren\u0027t ever going to have to model the belly-forward flight correctly. With a re-entering SSTO fighter, you really do. And the problem there is that center of pressure is going to move as you change the AoA.\u003C/p\u003E\u003Cp\u003EOk, here is what I would do. I would still have only one form/skin drag computation per ship. I would model each lifting surface with one or more center of lift points. These would generate their own drag, but only lift-related. The fact that you might be re-entering belly-forward, with wings generating much of your shock wave, I would absorb into the body drag. The body drag object is going to be way more complicated now, however. I\u0027d still keep 3 axes, but with each one I\u0027d associate a center of drag and a C\u003Csub\u003ED\u003C/sub\u003E curve. The later should depend on velocity and absorb the effects of wave drag in transonic regions and increasing drag in hypersonic. Keeping in mind that transition regions are going to depend on speed of sound in your atmosphere, which depends primarily on temperature.\u003C/p\u003E\u003Cp\u003EThis is a pretty complicated model, but doable.\u003C/p\u003E\u003Cp\u003EI was playing around with building an orbital combat game myself, but I wasn\u0027t really planning to touch atmosphere, at least initially. I got basic planet rendering going, and was working on ships. Got swamped in building ship computer systems. I wanted the thing to be very customizable, down to the firmware running on each ship.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-11-16T23:38:19Z","Content":"\n\u003Cp\u003Eits also going to make weapons systems interesting. some weapons wont be possible to use in certain flight regimes. conventional guns for example probibly wont work past supersonic. some guns will fire scramjet and rocket equipped rounds so they can operate at higher mach numbers. space combat will feature recoil effects, and there will be some recoilless weapons. rounds fired will follow ballistic arcs. there will also be missiles and laser weapons as well. heat will be an issue, especially in space where you dont have airflow cooling the weapons, so care needs to be taken not to overheat, which causes jams and weapon failures (both accuracy reducing and weapon destroying). in space im going to use arc compensated telescopic gunsights so that very long shots can be pulled off.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-17T01:31:25Z","Content":"\n\u003Cp\u003EFor space combat, take a look at how Babylon 5: I\u0027ve Found Her handled it. It\u0027s a free game, so just search for it. Go through tutorials. The way they did targeting system is pretty much perfect. Also, save for unrealistic accelerations and fighter dV resource, this is probably the most realistic space combat game I\u0027ve ever seen.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2013-11-17T01:58:47Z","Content":"\n\u003Cp\u003Eil be sure to check it out (its already downloading), b5 was awesome. i will probibly also need to also take some liberties with propulsion as well, such as engines with ridiculously high isp and exotic propellants like metallic hydrogen. engines will also be dual mode and capable of running on a large number of atmospheric compositions, so no propellant need be used while in the atmosphere. ships will have a compact fusion reactor of sorts to augment thrust through thermal or ionization effects. theres really no way around that, space fighters in general tend to spit in the face of hard sci-fi, so there will be some handwavium and unobtanium in there.\u003C/p\u003E\n"},{"CreatedByName":"CaptKasper","CreatedById":93730,"CreatedDateTime":"2013-11-19T19:05:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EYup. And the only reason you need more than one is because difference in drag/lift on wings during turn is actually a significant effect while flying. Say you are in level flight and you decide to yaw left using the pedals. Plane ends up banking left as well. Why? Because your right wing is moving just a little faster than your left wing and generates just a little bit more \u003Cstrong\u003Edrag\u003C/strong\u003E. If you don\u0027t take this into account in your flight model, the plane will actually bank \u003Cem\u003Eright\u003C/em\u003E due to torque from the rudder. On the other hand, when performing a roll, you\u0027ll also end up experiencing different drag on two wings, since the wing that generates less lift generates less drag as well. So all of these effects work together.\u003Cp\u003EBy the way, having a bit of flight experience helps a lot. So if you are serious about writing a good flight model, you might want to invest in a few flight lessons. Just enough to get a feel for it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe reason an aircraft banks when yawing is because the outside wing in the yaw has an increased velocity of the relative wind. This generates more lift on the outside wing L=V\u003Csup\u003E2\u003C/sup\u003E(D)(S)(AoA)/2. The reason the aircraft then yaws back is due to adverse yaw. For instance, if you yaw left your right wing will rise due to the increase in lift on the right wing in respect to the lift on the left wing. The aircraft then yaws back to the right because of adverse yaw. Adverse yaw is caused by induced drag on the raised wing. There is an increase of induced drag on the right wing because of the increase in lift. Any lift generated with a positive Angle of Attack will create an increase in induced drag.\u003C/p\u003E\n"},{"CreatedByName":"PakledHostage","CreatedById":8059,"CreatedDateTime":"2013-11-19T20:58:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CaptKasper\u0022 data-cite=\u0022CaptKasper\u0022\u003E\u003Cdiv\u003EThe reason an aircraft banks when yawing is because the outside wing in the yaw has an increased velocity of the relative wind.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYaw-roll coupling in fixed wing aircraft is a complex subject. You are partly right but there are additional geometric and aerodynamic factors as well. In addition to induced drag and airspeed effects, there are induced angle of attack, pressure and geometric factors that also come into play. These are a consequence of wing dihedral angle, wing sweep angle, pressure fields induced by the location of engine nacelles and fuselage on the wing, etc. The vertical stabilizer plays a roll as well. Some aircraft (including most commercial airliners) even require active damping systems to damp out oscillations about their yaw-roll axes that result from their configurations.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-20T01:00:06Z\u0022 title=\u002211/20/2013 01:00  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 20, 2013\u003C/time\u003E by PakledHostage\u003C/strong\u003E\n\u003Cbr\u003ETried to clarify a sentence\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-11-20T11:01:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CaptKasper\u0022 data-cite=\u0022CaptKasper\u0022\u003E\u003Cdiv\u003EThe reason an aircraft banks when yawing is [...]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI mistyped \u0022drag\u0022 instead of \u0022lift\u0022 where you highlighted, yes.\u003C/p\u003E\n"},{"CreatedByName":"Requiem762","CreatedById":82185,"CreatedDateTime":"2013-11-20T13:16:55Z","Content":"\n\u003Cp\u003EEach part is assigned a number that says how much drag it has.\u003C/p\u003E\n"},{"CreatedByName":"PlonioFludrasco","CreatedById":98915,"CreatedDateTime":"2014-01-31T11:15:03Z","Content":"\n\u003Cp\u003ECross sectional area (A) is calculated as 0.008 x mass (m).\u003C/p\u003E\u003Cp\u003EThe question is: the considered mass is the dry mass (then it remains constant until you jettison something) or the fuel mass is included?\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-31T17:34:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PlonioFludrasco\u0022 data-cite=\u0022PlonioFludrasco\u0022\u003E\u003Cdiv\u003ECross sectional area (A) is calculated as 0.008 x mass (m).\u003Cp\u003EThe question is: the considered mass is the dry mass (then it remains constant until you jettison something) or the fuel mass is included?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFuel mass is included. So the drag changes as fuel is used up, but terminal velocity remains the same. (Except for minor variations in drag coefficient.)\u003C/p\u003E\n"},{"CreatedByName":"ThinkOutsideTheHangar","CreatedById":100722,"CreatedDateTime":"2014-02-01T16:02:21Z","Content":"\n\u003Cp\u003EKSP just assigns a drag value to each part. So yes, a pancake shaped rocket could go into space. Try the Ferram Aerospace Research addon if you want realistic aerodynamics.\u003C/p\u003E\n"}]}