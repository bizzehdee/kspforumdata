{"TopicId":183804,"ForumId":36,"TopicTitle":"[WIP] ParallelTasker","CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-16T21:38:57Z","PageNum":1,"Articles":[{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-16T21:38:57Z","Content":"\n\u003Cp\u003E\nHere\u0027s a lightweight WIP modder\u0027s plugin that allows the use of multithreading for repeated tasks with synchronization to other tasks and Unity scripts. This could prove useful for physics heavy mods like \u003Cabbr title=\u0022Ferram Aerospace Research (mod)\u0022\u003EFAR\u003C/abbr\u003E that at the moment run in a single thread to make use of multiple cores provided the physics code can be made threadsafe. To help with this, tasks have optional delegates executed on the main thread before and after the multithreaded task which can be used to transfer data between threads. In case of dependencies, start and end times are flexible. If you don\u0027t have any dependencies, you can start the task at the very start of Update event and apply the calculated forces at the very end of the same Update event, or even delay the end time until the start of LateUpdate! Execution times of a single frame (or 1 FixedUpdate loop) are possible. As ever, bugs are possible.\n\u003C/p\u003E\n\u003Ch1\u003E\nParallel Tasker\n\u003C/h1\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EParallel Tasker\u003C/strong\u003E is a plugin for Unity (see \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/Unity/ParallelTasker/Assets/Scenes/Test.unity\u0022 rel=\u0022external nofollow\u0022\u003ETest\u003C/a\u003E) and Kerbal Space Program that can execute supplied tasks in parallel between any possible combination of defined times (see Task Timing below). \u003Cstrong\u003EParallel Tasker\u003C/strong\u003E is expected to be used through \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/ParallelTasker.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Ccode\u003EParallelTasker.ParallelTasker\u003C/code\u003E\u003C/a\u003E as a hard dependency for other plugins. Times are determined by script execution orders of \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/PTSynchronizer.cs\u0022 rel=\u0022external nofollow\u0022\u003EPTSynchronizers\u003C/a\u003E and exported in Asset Bundle \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/GameData/ParallelTasker/Assets/synchronizers.pt\u0022 rel=\u0022external nofollow\u0022\u003Esynchronizers.pt\u003C/a\u003E (yes, asset bundles also export script execution orders). This offers a very lightweight and consistent method to signalize timings of Update events. In addition, \u003Cstrong\u003EParallel Tasker\u003C/strong\u003E itself does not generate any garbage while executing tasks except for creating new ones (removed tasks are reused). If no tasks need to be started or ended at a specific time, then that task controller is unsubscribed from receiving the synchronizer events. All classes are defined in \u003Ccode\u003EParallelTasker\u003C/code\u003E namespace.\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cspan style=\u0022font-size:22px;\u0022\u003EGet the source code: \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cspan style=\u0022font-size:22px;\u0022\u003ELicense: GPL3\u003C/span\u003E\n\u003C/p\u003E\n\u003Ch2\u003E\nParallelTasker\n\u003C/h2\u003E\n\u003Cp\u003E\nThe API can be found in a static \u003Ccode\u003EParallelTasker\u003C/code\u003E class.\n\u003C/p\u003E\n\u003Ch3\u003E\nProperties\n\u003C/h3\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EResetTasksOnSceneChange\u003C/span\u003E\u003C/pre\u003E\na property to disable/enable task clearing on scene changes to be used in case some tasks rely on \u003Ccode\u003EGameObject\u003C/code\u003Es that may no longer be available in different scenes. Default: \u003Ccode\u003Etrue\u003C/code\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Ch3\u003E\nSubscriptions\n\u003C/h3\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESubscriptionStatus\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E taskGroup\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nsynchronizer subscription status of task controller that runs at time \u003Ccode\u003EtaskGroup\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESubscriptionStatus\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTUpdateEvent\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E updateEvent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTEventTime\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E eventTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\noverload of the above.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESubscribe\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E timePair\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E handler\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nsubscribe \u003Ccode\u003Ehandler\u003C/code\u003E to receive \u003Ccode\u003EtimePair\u003C/code\u003E update event, remove with \u003Ccode\u003EUnsubscribe\u003C/code\u003E otherwise anything the \u003Ccode\u003Ehandler\u003C/code\u003E encloses may not be garbage collected.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESubscribe\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTUpdateEvent\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E updateEvent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTEventTime\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E eventTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E handler\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\noverload of the above.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnsubscribe\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E timePair\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E handler\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nunsubscribe \u003Ccode\u003Ehandler\u003C/code\u003E from receiving update events at \u003Ccode\u003EtimePair\u003C/code\u003E time.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnsubscribe\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTUpdateEvent\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E updateEvent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTEventTime\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E eventTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E handler\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\noverload of the above.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Ch3\u003E\nTasks\n\u003C/h3\u003E\n\u003Cp\u003E\nAdding a task requires a start \u003Ccode\u003EstartTime\u003C/code\u003E and end \u003Ccode\u003EendTime\u003C/code\u003E time defined by \u003Ccode\u003EPTTimePair\u003C/code\u003E. Removing a specific task only requires its \u003Ccode\u003EstartTime\u003C/code\u003E since that is where it is registered internally. Note that (for now) the \u003Ccode\u003EstartTime\u003C/code\u003E is not referenced in \u003Ccode\u003EPTTask\u003C/code\u003E.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAddTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E endTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nadd a task \u003Ccode\u003Etask\u003C/code\u003E to be executed. Returns the added task, in this case \u003Ccode\u003Etask\u003C/code\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAddTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E endTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Euint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E period \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nadd a task with no \u003Ccode\u003Einitialize\u003C/code\u003E and \u003Ccode\u003Efinalize\u003C/code\u003E with execution period \u003Ccode\u003Eperiod\u003C/code\u003E to the current task list. Returns the added task.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAddTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E endTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E initializer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Euint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E period \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nadd a task with \u003Ccode\u003Efinalize\u003C/code\u003E with execution period \u003Ccode\u003Eperiod\u003C/code\u003E to the current task list. Returns the added task.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAddTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E endTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E finalizer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Euint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E period \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nadd a task with no \u003Ccode\u003Einitialize\u003C/code\u003E with execution period \u003Ccode\u003Eperiod\u003C/code\u003E to the current task list. Returns the added task.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAddTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E endTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E initializer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E finalizer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Euint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E period \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nadd a complete task with execution period \u003Ccode\u003Eperiod\u003C/code\u003E to the current task list. Returns the added task.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ERemoveTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTTask\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nremove \u003Ccode\u003Etask\u003C/code\u003E from \u003Ccode\u003Egroup\u003C/code\u003E task list. Returns success/failure of removal.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Ebool\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ERemoveTask\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E task\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\n\u003Cspan\u003Er\u003C/span\u003Eemove the first task with \u003Ccode\u003EPTTask.main == task\u003C/code\u003E from the \u003Ccode\u003Egroup\u003C/code\u003E task list. Returns success/failure of removal.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EClearTasks\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003C/pre\u003E\nclear all current tasks.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EClearTasks\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E startTime\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nclear all tasks starting at \u003Ccode\u003EstartTime\u003C/code\u003E time.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Ch3\u003E\nLogging\n\u003C/h3\u003E\n\u003Cp\u003E\nThe provided logging API is threadsafe so you won\u0027t get mangled log entries. Logs are flushed every frame at \u003Ccode\u003ELateUpdate.Start\u003C/code\u003E. Logging API is similar to Unity\u0027s but does not contain overloads with \u003Ccode\u003EUnityEngine.Object\u003C/code\u003E arguments since Unity API is not thread safe and thus should not be used in multi threading. Use sparingly since most tasks will be executed 10s of times per second.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject message\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a normal \u003Ccode\u003Emessage\u003C/code\u003E, only if compiled with \u003Ccode\u003EDEBUG\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EDebugFormat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring format\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E params object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E args\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a formatted \u003Ccode\u003Eformat\u003C/code\u003E message with arguments \u003Ccode\u003Eargs\u003C/code\u003E, only if compiled with \u003Ccode\u003EDEBUG\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject message\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a normal \u003Ccode\u003Emessage\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogFormat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring format\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E params object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E args\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a formatted \u003Ccode\u003Eformat\u003C/code\u003E message with arguments \u003Ccode\u003Eargs\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogError\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject message\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog an error \u003Ccode\u003Emessage\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogErrorFormat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring format\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E params object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E args\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a formatted error \u003Ccode\u003Eformat\u003C/code\u003E message with arguments \u003Ccode\u003Eargs\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogWarning\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject message\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a warning \u003Ccode\u003Emessage\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogWarningFormat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring format\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E params object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E args\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog a formatted warning \u003Ccode\u003Eformat\u003C/code\u003E message with arguments \u003Ccode\u003Eargs\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELogException\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EException\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E exception\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003C/pre\u003E\nlog an exception \u003Ccode\u003Eexception\u003C/code\u003E.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Ch2\u003E\nTask Timing\n\u003C/h2\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EParallel Tasker\u003C/strong\u003E consists of 3 Update events \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/PTEventTime.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Ccode\u003EPTUpdateEvent\u003C/code\u003E\u003C/a\u003E and 9 possible timers \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/PTEventTime.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Ccode\u003EPTEventTime\u003C/code\u003E\u003C/a\u003E. Any possible combination of those values is a valid start or end time for the task. Though mixing \u003Ccode\u003EFixedUpdate\u003C/code\u003E with \u003Ccode\u003EUpdate\u003C/code\u003E or \u003Ccode\u003ELateUpdate\u003C/code\u003E may not make much sense since they run on different timers. Each combination of timing is guaranteed to finish the tasks ending at that time before starting new ones. If start and end times are equal, the task will be finished in the next Update event. Any task with an end time before start time will finish in the next Update event (i.e. start in \u003Ccode\u003ELateUpdate\u003C/code\u003E and end in \u003Ccode\u003EUpdate\u003C/code\u003E or end with a lower \u003Ccode\u003EPTEventTime\u003C/code\u003E)\n\u003C/p\u003E\n\u003Ch3\u003E\nUpdate Events\n\u003C/h3\u003E\n\u003Cp\u003E\nThey are standard Unity Update events:\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eenum\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTUpdateEvent\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EUpdate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003ELateUpdate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EFixedUpdate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003Ch3\u003E\nTimers\n\u003C/h3\u003E\n\u003Cp\u003E\nCurrent timers are based on \u003Ca href=\u0022https://kerbalspaceprogram.com/api/script_order.html\u0022 rel=\u0022\u0022\u003EKSP Script Execution Order\u003C/a\u003E:\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eenum\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPTEventTime\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EStart\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E8008\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EPrecalc\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E101\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EEarly\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E99\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EEarlyish\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003ENormal\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EFashionablyLate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E7\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EFlightIntegrator\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E9\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003ELate\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E19\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan\u003EEnd\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E8008\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003Ch3\u003E\nDefault Dequeue Order\n\u003C/h3\u003E\n\u003Cp\u003E\nThe default dequeue order depends on \u003Ccode\u003EEnum.GetValues(Type)\u003C/code\u003E so it may change in the future. It currently is:\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nUpdate.Normal\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.FashionablyLate\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.FlightIntegrator\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.Late\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.End\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.Start\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.Precalc\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.Early\n\u003C/li\u003E\n\u003Cli\u003E\nUpdate.Earlyish\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Normal\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.FashionablyLate\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.FlightIntegrator\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Late\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.End\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Start\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Precalc\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Early\n\u003C/li\u003E\n\u003Cli\u003E\nLateUpdate.Earlyish\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Normal\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.FashionablyLate\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.FlightIntegrator\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Late\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.End\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Start\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Precalc\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Early\n\u003C/li\u003E\n\u003Cli\u003E\nFixedUpdate.Earlyish\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nTasks that need to be ended are given priority.\n\u003C/p\u003E\n\u003Ch2\u003E\n\u003Cstrong\u003EParallel Tasker\u003C/strong\u003E Tasks\n\u003C/h2\u003E\n\u003Cp\u003E\nEach task \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/PTTasks.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Ccode\u003EPTTask\u003C/code\u003E\u003C/a\u003E can be queued for any of the start and end times and consists of 3 functions, unsigned integer and \u003Ca href=\u0022https://github.com/dkavolis/ParallelTasker/blob/master/ParallelTasker/PTEventTime.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Ccode\u003EPTTimePair\u003C/code\u003E\u003C/a\u003E:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E initialize\u003C/span\u003E\u003C/pre\u003E\n(optional) a function that returns \u003Ccode\u003Eobject\u003C/code\u003E, guaranteed to run before any other task function. This can be used to copy data from the main thread to be passed to \u003Ccode\u003Emain\u003C/code\u003E. It is always executed on the main thread.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EFunc\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eobject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E object\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E main\u003C/span\u003E\u003C/pre\u003E\na function that takes a single \u003Ccode\u003Eobject\u003C/code\u003E (from \u003Ccode\u003Einitialize\u003C/code\u003E) as an argument and returns \u003Ccode\u003Eobject\u003C/code\u003E. This function is executed in a different thread and thus should be made thread safe. Guaranteed to run after \u003Ccode\u003Einitialize\u003C/code\u003E and before \u003Ccode\u003Efinalize\u003C/code\u003E of this task.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EAction\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;object\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E finalize\u003C/span\u003E\u003C/pre\u003E\n(optional) a void function that takes a single \u003Ccode\u003Eobject\u003C/code\u003E (from \u003Ccode\u003Emain\u003C/code\u003E) as an argument, guaranteed to be executed after \u003Ccode\u003Einitialize\u003C/code\u003E and \u003Ccode\u003Emain\u003C/code\u003E. Always executed on the main thread. This can be used to copy data from the thread back to the main thread.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003Euint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E period\u003C/span\u003E\u003C/pre\u003E\nhow often this task is executed, i.e. \u003Ccode\u003Eperiod\u003C/code\u003E of 1 will execute this task on every Update event. Default: 1.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EPTTimePair\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EEndTime\u003C/span\u003E\u003C/pre\u003E\nread only (until dynamic subscription can be made to work consistently) end time of this task (one of \u003Ccode\u003EPTUpdateEvent\u003C/code\u003E and \u003Ccode\u003EPTEventTime\u003C/code\u003E combinations).\n\u003C/li\u003E\n\u003C/ul\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2019-04-17T01:47:45Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223585094\u0022 data-ipsquote-contentid=\u0022183804\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555450737\u0022 data-ipsquote-userid=\u0022192697\u0022 data-ipsquote-username=\u0022dkavolis\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, dkavolis said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nmods like \u003Cabbr title=\u0022Ferram Aerospace Research (mod)\u0022\u003EFAR\u003C/abbr\u003E that at the moment run in a single \u003Cspan\u003E\uFEFF\u003C/span\u003Ethrea\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003C/span\u003E\u003C/span\u003Ed\u003Cspan\u003E\uFEFF\u003C/span\u003E\u003Cspan\u003E\uFEFF\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u003Cabbr title=\u0022Ferram Aerospace Research (mod)\u0022\u003EFAR\u003C/abbr\u003E is multithreaded\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-17T06:22:14Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223585222\u0022 data-ipsquote-contentid=\u0022183804\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555465665\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cabbr title=\u0022Ferram Aerospace Research (mod)\u0022\u003EFAR\u003C/abbr\u003E is multithreaded\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOnly voxelization is, physics are still done on the main thread\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2019-04-17T06:24:15Z","Content":"\n\u003Cp\u003E\nBecause interacting with an unity object property from a thread is a recipe for a disaster.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-04-17T06:48:33Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223585290\u0022 data-ipsquote-contentid=\u0022183804\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221555482255\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n13 minutes ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBecause interacting with an unity object property from a thread is a recipe for a disaster.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUnless you work on a copy of data without any Unity Objects in it and apply it afterwards which is what this plugin can do. \u003Ca href=\u0022https://docs.unity3d.com/Manual/JobSystem.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity Job System\u003C/a\u003E is similar. But this lets you choose specific time when to get back to the main thread. I\u0027ll try making at least the simulation part of \u003Cabbr title=\u0022Ferram Aerospace Research (mod)\u0022\u003EFAR\u003C/abbr\u003E threadsafe for more useful plots.\n\u003C/p\u003E\n"},{"CreatedByName":"Sir Mortimer","CreatedById":190461,"CreatedDateTime":"2019-05-26T16:39:18Z","Content":"\n\u003Cp\u003E\nNice, I\u2019ll definitely look into this.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, maybe you want to reconsider your license. Using GPL for anything that\u2019s supposed to be a hard requirement won\u2019t help winning a\u00A0popularity contest.\n\u003C/p\u003E\n"},{"CreatedByName":"IgorZ","CreatedById":155445,"CreatedDateTime":"2019-05-28T05:18:03Z","Content":"\n\u003Cp\u003E\nHa! I was baking this idea for a while. Good to see that someone has actually implemented it! There are couple of ideas where parallel calculation could be a deal breaker.\n\u003C/p\u003E\n"},{"CreatedByName":"dkavolis","CreatedById":192697,"CreatedDateTime":"2019-05-28T05:57:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223606240\u0022 data-ipsquote-contentid=\u0022183804\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221559020683\u0022 data-ipsquote-userid=\u0022155445\u0022 data-ipsquote-username=\u0022IgorZ\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n37 minutes ago, IgorZ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHa! I was baking this idea for a while. Good to see that someone has actually implemented it! There are couple of ideas where parallel calculation could be a deal breaker.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUntil KSP updates to Unity 2018.3\u002B and we get ECS, jobs system and Burst compiler which should be faster than my implementation.\n\u003C/p\u003E\n"}]}