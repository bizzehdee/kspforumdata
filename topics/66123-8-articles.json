{"TopicId":66123,"ForumId":55,"TopicTitle":"Unity 5 [Is now available]","CreatedByName":"NoMrBond","CreatedById":69263,"CreatedDateTime":"2014-03-18T08:47:05Z","PageNum":8,"Articles":[{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2015-04-05T21:40:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EFunny how it was just months since they stated that unity5 was absolutely first priority. It was such high priority that they would halt everything else as soon as they got access to it, so that they could use all resources to get it ported over to unity5. Then suddenly soon after they announced 1.0 instead....\u003Cp\u003EAnd this is why it to me makes absolutely zero sense to suddenly rush towards 1.0. The more they add to the current version, the more they will have to fix when they finally get to porting it over.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESQUAD never made a legally-binding contract or promise that they would port the game to U5 as soon as it became available. Technical and corporate issues in the background could also have caused a change of plans anyway.\u003C/p\u003E\u003Cp\u003EAlso, in a software engineering environment, it\u0027s not always a good idea to immediately jump to the latests and greatest version as soon as it comes out, because new versions will inevitably come with its own quirks and bugs.\u003C/p\u003E\u003Cp\u003ETo use a concrete example: I\u0027m a software engineer at a company that makes mass spectrometers, and our instruments are based on a custom-made industrial PC running Linux and Java. Our newest instruments are still using older versions of Java because our software team already knows those versions well enough to keep the software running efficiently and to implement relatively new features in a safe and robust manner. If we switched to using the latest versions of Java, many of our libraries and dependencies will break, and furthermore, many of our customers\u0027 instruments would break very badly (these things are worth a quarter of a million dollars per unit). We would end up spending more time trying to fix our own workflow to fit the new update instead of responding to customer issues in a timely manner.\u003C/p\u003E\u003Cp\u003EKSP may not be a mission-critical application, but the principle is the same: at a major milestone, one does not simply introduce more unknown variables in the development process by switching to an untested and unfamiliar update to a component software engine/library/module.\u003C/p\u003E\n"},{"CreatedByName":"John FX","CreatedById":59415,"CreatedDateTime":"2015-04-05T23:11:56Z","Content":"\n\u003Cp\u003EMyself, I\u0027m happy waiting for U5 until 1.0 is released, bugfixed (1.1) and new features are added (1.2) and then some more stuff (1.X)\u003C/p\u003E\u003Cp\u003EFor something as special as native 64 bit, hardware phys-x etc I reckon it would be worth calling it KSP 2.0.\u003C/p\u003E\u003Cp\u003EWe may even get clouds...\u003C/p\u003E\n"},{"CreatedByName":"Eric S","CreatedById":57117,"CreatedDateTime":"2015-04-06T00:54:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EThere are even unity 4 games that properly do 64bit without any stability issues. A perfect example is the new cities: skylines which is only available in 64bit and was made in unity4. It also properly uses all cores of the CPU as well.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, skylines switched over to Unity 5 in late beta. In addition, there were already games using the 64bit client back when there were bugs that would have prevented KSP from running for more than a few minutes at a time. Different games use different feature sets, so unless the games are using the same feature sets, you really can\u0027t say that just because game X using engine Y is stable that game Z should be as well. The same goes for how easily the game can be ported from U4 to U5. KSP uses PhysX, which is one of the few parts of U5 that is not backwards compatible with U4.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EFunny how it was just months since they stated that unity5 was absolutely first priority.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESource? I\u0027ve seen comments that they\u0027re very excited about Unity 5, one tweet that said that Unity5 would be a high priority after it was released, but nothing stating absolutely first priority.\u003C/p\u003E\u003Cp\u003EAlso, the release version of Unity 5 didn\u0027t land until Squad was well into the 1.0 development cycle. Switching directions at that point probably would have been bad.\u003C/p\u003E\n"},{"CreatedByName":"Beduino","CreatedById":81326,"CreatedDateTime":"2015-04-06T00:58:43Z","Content":"\n\u003Cp\u003EJust out of curiosity this shows what changed in unity5 physics. \u003Ca href=\u0022http://docs.unity3d.com/Manual/UpgradeGuide5-Physics.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Manual/UpgradeGuide5-Physics.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt will probably break these things in KSP:\u003C/p\u003E\u003Cp\u003E- joints between parts and related parameters. \u003C/p\u003E\u003Cp\u003E- terrain physics material properties.\u003C/p\u003E\u003Cp\u003E- raycasting if any.\u003C/p\u003E\u003Cp\u003E- kerbal ragdolls.\u003C/p\u003E\u003Cp\u003E- wheels\u003C/p\u003E\u003Cp\u003EIt mentions this: \u0022Unity 5.0 physics could be expected to work up to 2x faster than in previous versions\u0022\u003C/p\u003E\u003Cp\u003EAlso unity5 is completely written to support 64 bit game releases\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T02:38:53Z\u0022 title=\u002204/06/2015 02:38  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Beduino\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"boxman","CreatedById":61559,"CreatedDateTime":"2015-04-06T01:41:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Eric S\u0022 data-cite=\u0022Eric S\u0022\u003E\u003Cdiv\u003EActually, skylines switched over to Unity 5 in late beta. In addition, there were already games using the 64bit client back when there were bugs that would have prevented KSP from running for more than a few minutes at a time. Different games use different feature sets, so unless the games are using the same feature sets, you really can\u0027t say that just because game X using engine Y is stable that game Z should be as well. The same goes for how easily the game can be ported from U4 to U5. KSP uses PhysX, which is one of the few parts of U5 that is not backwards compatible with U4.\u003Cp\u003ESource? I\u0027ve seen comments that they\u0027re very excited about Unity 5, one tweet that said that Unity5 would be a high priority after it was released, but nothing stating absolutely first priority.\u003C/p\u003E\u003Cp\u003EAlso, the release version of Unity 5 didn\u0027t land until Squad was well into the 1.0 development cycle. Switching directions at that point probably would have been bad.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe source is KSPTV/Squadcast.\u003C/p\u003E\n"},{"CreatedByName":"kenbobo","CreatedById":70629,"CreatedDateTime":"2015-04-06T01:50:37Z","Content":"\n\u003Cp\u003EI\u0027ve moved my projects from unity 4.6.1f1 or whatever and it has had no problems, and new projects are seamless. The 64 bit edition runs a bit faster with a plane, and some mountain terrain, but other than that i see no difference.\u003C/p\u003E\n"},{"CreatedByName":"boxman","CreatedById":61559,"CreatedDateTime":"2015-04-06T01:50:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sumghai\u0022 data-cite=\u0022sumghai\u0022\u003E\u003Cdiv\u003ESQUAD never made a legally-binding contract or promise that they would port the game to U5 as soon as it became available. Technical and corporate issues in the background could also have caused a change of plans anyway.\u003Cp\u003EAlso, in a software engineering environment, it\u0027s not always a good idea to immediately jump to the latests and greatest version as soon as it comes out, because new versions will inevitably come with its own quirks and bugs.\u003C/p\u003E\u003Cp\u003ETo use a concrete example: I\u0027m a software engineer at a company that makes mass spectrometers, and our instruments are based on a custom-made industrial PC running Linux and Java. Our newest instruments are still using older versions of Java because our software team already knows those versions well enough to keep the software running efficiently and to implement relatively new features in a safe and robust manner. If we switched to using the latest versions of Java, many of our libraries and dependencies will break, and furthermore, many of our customers\u0027 instruments would break very badly (these things are worth a quarter of a million dollars per unit). We would end up spending more time trying to fix our own workflow to fit the new update instead of responding to customer issues in a timely manner.\u003C/p\u003E\u003Cp\u003EKSP may not be a mission-critical application, but the principle is the same: at a major milestone, one does not simply introduce more unknown variables in the development process by switching to an untested and unfamiliar update to a component software engine/library/module.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI never said they made a legally binding contract. I was just quoting what squad/community manager stated on the Squadcast last year. \u003C/p\u003E\u003Cp\u003EAnd if you are a software developer you should also understand that it is not a wise idea to rush towards 1.0 release until a port has been done, the code has been optimized and everything being bug tested to make sure it is as bugfree as possible. Alot of the features they are planning to put into the game after 1.0 will bring new bugs and quite possible break our save games, ships and mods and same thing will happen when they port it to unity5. It would make sense to get the code more or less frozen by the time it reaches 1.0, so that the chances of that happening is minimal. Instead they are now adding a bunch of features and releasing 1.0 without it even being in beta to make sure it actually does not break the game further. \u003C/p\u003E\u003Cp\u003EThe current version of KSP is seen as the most unstable version in ages thanks to memory issues. The addition of new features like IVA scenes will make this even worse and yet they are going ahead with 1.0.\u003C/p\u003E\n"},{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2015-04-06T02:08:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EI never said they made a legally binding contract. I was just quoting what squad/community manager stated on the Squadcast last year. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUnless there\u0027s a transcript accurately describing word-for-word what was actually said, it is more likely that the alleged statement you\u0027re quoting was an off-the-cuff musing rather than an official announcement.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EAnd if you are a software developer you should also understand that it is not a wise idea to rush towards 1.0 release until a port has been done,\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESwitching to a new engine (or even a newer major version of an engine) late in the 1.0 development cycle is a very bad move.\u003C/p\u003E\u003Cp\u003ESQUAD isn\u0027t rushing to 1.0 - they steadily and patiently making sure 1.0 works using the existing Unity 4 engine that they\u0027re familiar with.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003Ethe code has been optimized and everything being bug tested to make sure it is as bugfree as possible.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGiven that Unity 5 is still relatively new in the software ecosystem, there will be bugs that the Unity devs will not have caught.\u003C/p\u003E\u003Cp\u003EAnd even if Unity 5 is truly bug-free, those optimizations won\u0027t be of immediate help to SQUAD, who will need to spend a long time understanding the new systems (for instance, the new Physx 3 is very different from the Physx 2.x that SQUAD is used to). \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EAlot of the features they are planning to put into the game after 1.0 will bring new bugs and quite possible break our save games, ships and mods and same thing will happen when they port it to unity5.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhenever a new version of any software comes out, expect things to break.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EIt would make sense to get the code more or less frozen by the time it reaches 1.0, so that the chances of that happening is minimal. Instead they are now adding a bunch of features and releasing 1.0 without it even being in beta to make sure it actually does not break the game further.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhile I agree that the beta period for KSP isn\u0027t as extensive as one would like it to be, your suggestion that SQUAD should port the game over to Unity 5 for 1.0 would compound the development process even more.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EThe current version of KSP is seen as the most unstable version in ages thanks to memory issues.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECould you provide verifiable statistics and specific bug reports to verify this claim?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003EThe addition of new features like IVA scenes will make this even worse\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIVA scenes are not new - they were first introduced in KSP 0.17 back in September 2012\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022boxman\u0022 data-cite=\u0022boxman\u0022\u003E\u003Cdiv\u003Eand yet they are going ahead with 1.0.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESQUAD has decided that, given their familiarity with Unity 4.x, that they\u0027re reasonably confident that the current version of the game engine they have access to would be sufficient to support their original vision for the game, as well as fix most of the problems they are aware of up to this point in time.\u003C/p\u003E\n"},{"CreatedByName":"Beduino","CreatedById":81326,"CreatedDateTime":"2015-04-06T02:37:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Beduino\u0022 data-cite=\u0022Beduino\u0022\u003E\u003Cdiv\u003EJust out of curiosity this shows what changed in unity5 physics. \u003Ca href=\u0022http://docs.unity3d.com/Manual/UpgradeGuide5-Physics.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Manual/UpgradeGuide5-Physics.html\u003C/a\u003E\u003Cp\u003EIt will probably break these things in KSP:\u003C/p\u003E\u003Cp\u003E- joints between parts and related parameters. \u003C/p\u003E\u003Cp\u003E- terrain physics material properties.\u003C/p\u003E\u003Cp\u003E- raycasting if any.\u003C/p\u003E\u003Cp\u003E- kerbal ragdolls.\u003C/p\u003E\u003Cp\u003E- wheels\u003C/p\u003E\u003Cp\u003EIt mentions this: \u0022Unity 5.0 physics could be expected to work up to 2x faster than in previous versions\u0022\u003C/p\u003E\u003Cp\u003EAlso unity5 is completely written to support 64 bit game releases\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was having fun these days learning Unity 5 so I decided to test the physics performance.\u003C/p\u003E\u003Cp\u003ECreated the physics equivalent of a ship with 800 parts plus the associated joints of different kinds. \u003C/p\u003E\u003Cp\u003EShadows \u002B Material.\u003C/p\u003E\u003Cp\u003EPretty surprising results while still in the unity editor the fps is around 60 even when madly hitting the physics parts so they are not at rest.\u003C/p\u003E\u003Cp\u003ESo if this isn\u0027t a \u0022silver bullet\u0022 it at least is shining like one.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/13532547/unity5physics.png\u0022 alt=\u0022unity5physics.png\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T02:58:41Z\u0022 title=\u002204/06/2015 02:58  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Beduino\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Random Tank","CreatedById":104325,"CreatedDateTime":"2015-04-06T02:43:29Z","Content":"\n\u003Cp\u003EVoted for the wrong option on the Poll.... *face-desk*\u003C/p\u003E\u003Cp\u003EAnyway, Optimization and bug fixing are the most important thing to do in KSP\u0027s development; I strongly agree that is should be ported over, and final versions should not be released until it is ported. \u003C/p\u003E\u003Cp\u003EThe release state of the game should allow people even with not-amazing PC\u0027s to at least build decent size ships (500 parts) with serious lag, and for a game that advertises its \u0022Modability\u0022 as a feature, it should definitely have 64-bit, and some better texture management and load on demand textures too; plus some features to reduce the physics lag, like part welding and disabling part physics in some situations.\u003C/p\u003E\u003Cp\u003EBut that\u0027s all a bit late now... :\\\u003C/p\u003E\n"},{"CreatedByName":"cpast","CreatedById":112846,"CreatedDateTime":"2015-04-06T03:33:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Random Tank\u0022 data-cite=\u0022Random Tank\u0022\u003E\u003Cdiv\u003EAnyway, Optimization and bug fixing are the most important thing to do in KSP\u0027s development; I strongly agree that is should be ported over, and final versions should not be released until it is ported. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThose two clauses are in direct opposition to each other. Changing engines is the precise opposite of \u0022optimization\u0022 and *especially* \u0022bug fixing.\u0022 The point of doing optimization and bug fixing is that you make minor changes to code. You don\u0027t do big things; you only change things if you absolutely have to. Switching engines creates new bugs. It\u0027s changing the code from something where the team has a pretty good sense how things work and what to do, and has incorporated all sorts of tweaks to fix issues, into an incompatible physics engine and a new game engine. It\u0027s not a simple task. If it were, this would be Unity 4.4 (I think). Likewise, the kind of optimization you do late in the release cycle is as unobtrusive as possible; big changes have heavy bug potential.\u003C/p\u003E\u003Cp\u003EIt\u0027s entirely possible that, had this come out six months ago, Squad would have changed over. Had it come out in December, Squad might have considered investing some dev time into seeing how it works, and trying to hack a port together to see how it runs (and see if it\u0027s a bugsplosion, a won\u0027t-compile-splosion, or runs decently well). But it came out in March, well into the final push for release. At that point, no matter what Squad had said about U5 a year ago, it\u0027d be *insane* to go all-in on U5. I wouldn\u0027t be surprised if they tried compiling against U5, but if there were *any* serious issues, you\u0027d be crazy to put off your 1.0 to change the game engine when you\u0027re nearing release (keep in mind, Squad also had and has a much better idea of the status of KSP\u0027s development than forumers; I suspect they knew they were nearing experimentals).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T03:39:07Z\u0022 title=\u002204/06/2015 03:39  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by cpast\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2015-04-06T05:55:00Z","Content":"\n\u003Cp\u003EIsn\u0027t SQUAD under notice saying they will not ever use PhysX\u0027s gpu feature? The rationale being that they end up having more issues with having two codebases to maintain (those who have a physx enabled gpu... and those who don\u0027t).\u003C/p\u003E\u003Cp\u003EPhysX, no matter how you spin it, is just an interface for hardware. Saying using \u0022the latest version\u0022 will automatically make your code uber fast is like saying using DX11 on a DX9 card will make it run faster. I \u0022guess\u0022 later versions did interface with more recent CPU architecture... Nvida seriously thought they could get away with not maintaining their codebase?\u003C/p\u003E\u003Cp\u003E*A new note on this.\u003C/p\u003E\u003Cp\u003EUnity Devs state that they \u0022improved\u0022 upon raw PhysX which makes it hard to understand how much of the code was still legacy x87. If all of it was, then yeah, you would see a significant speed increase, if only some of it was the difference would be significantly less.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T06:34:42Z\u0022 title=\u002204/06/2015 06:34  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Fel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Alshain","CreatedById":110959,"CreatedDateTime":"2015-04-06T06:09:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Fel\u0022 data-cite=\u0022Fel\u0022\u003E\u003Cdiv\u003EIsn\u0027t SQUAD under notice saying they will not ever use PhysX\u0027s gpu feature? The rationale being that they end up having more issues with having two codebases to maintain (those who have a physx enabled gpu... and those who don\u0027t)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat doesn\u0027t really make sense. For one thing, there wouldn\u0027t be two code bases, even if they needed to do something special for PhysX hardware acceleration. There are programming techniques to do this sort of thing (see \u003Ca href=\u0022https://en.wikipedia.org/wiki/Subtyping\u0022 rel=\u0022external nofollow\u0022\u003ESubtype Polymorphism\u003C/a\u003E).\u003C/p\u003E\u003Cp\u003EFor a second, PhysX hardware acceleration is just that, hardware acceleration. The PhysX processing is shipped off to the GPU so the CPU doesn\u0027t have to do the work. It\u0027s kind of like having extra CPU power. I don\u0027t think the program running the PhysX engine has do anything special except turn it on, it is built into the engine, however Unity 4 uses a version of the PhysX engine that doesn\u0027t support it. You DirectX analogy is flawed, a more accurate one would be like saying a multi-core processor running supported code will run faster than a single core processor... which is true.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T06:14:15Z\u0022 title=\u002204/06/2015 06:14  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Alshain\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Climberfx","CreatedById":57126,"CreatedDateTime":"2015-04-06T06:19:17Z","Content":"\n\u003Cp\u003EDon\u0027t mistake Physics (KSP have in code on CPU), with PhysX (Nvidia proprietary code to direct access the video board, but not AMD, just Nvidia)\u003C/p\u003E\u003Cp\u003EAnd KSP does NOT have PhysX. Never had and possibly will never have but here i\u0027m just speculating!\u003C/p\u003E\u003Cp\u003EAMD users must be included, everyone must be included.\u003C/p\u003E\u003Cp\u003EAnd you are wrong Alshain, you must write code directly to PhysX. Is a proprietary from Nvidia and run only on Nvidia and is not equal other codes. Is not just turn on and off in Unity compiler thing.\u003C/p\u003E\u003Cp\u003EJust because majority games have a button to turn it on and off, don\u0027t think there is equal in game programing.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T06:22:29Z\u0022 title=\u002204/06/2015 06:22  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Climberfx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2015-04-06T06:26:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Alshain\u0022 data-cite=\u0022Alshain\u0022\u003E\u003Cdiv\u003EThat doesn\u0027t really make sense. For one thing, there wouldn\u0027t be two code bases, even if they needed to do something special for PhysX hardware acceleration. There are programming techniques to do this sort of thing (see \u003Ca href=\u0022https://en.wikipedia.org/wiki/Subtyping\u0022 rel=\u0022external nofollow\u0022\u003ESubtype Polymorphism\u003C/a\u003E).\u003Cp\u003EFor a second, PhysX hardware acceleration is just that, hardware acceleration. The PhysX processing is shipped off to the GPU so the CPU doesn\u0027t have to do the work. I don\u0027t think the program running the PhysX engine has do anything special except turn it on, it is built into the engine, however Unity 4 uses a version of the PhysX engine that doesn\u0027t support it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s just bad jargon, the issue is that problems with non-gpu accelerated users WOULD be different from problems with GPU accelerated users, call it what you want, you\u0027ll still end up maintaining two different sections of code. (Err, I was wrong here... problems in Linux / Mac / Windows versions are different... so 6 different sections ;p)\u003C/p\u003E\u003Cp\u003EPhysX is 100% about hardware acceleration, initially a poorly sold sub-unit (Physics Processing Unit) and later Nvidia\u0027s lovechild...\u003C/p\u003E\u003Cp\u003EIn more research it seems Unity also had the same notion; they had a FULLY CAPABLE of using GPU PhysX... but they did not use the GPU because that would create problems between platforms... unity 5 looks to be the same.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://blogs.unity3d.com/2014/07/08/high-performance-physics-in-unity-5/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://blogs.unity3d.com/2014/07/08/high-performance-physics-in-unity-5/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYeah... it really sounds like the whole GPU offloading is \u0022if we feel like it\u0022 rather than \u0022doing it now\u0022 (and more so, this would be THEIR bland of offloading; likely using something like opencl)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T06:31:12Z\u0022 title=\u002204/06/2015 06:31  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Fel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2015-04-06T09:17:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Climberfx\u0022 data-cite=\u0022Climberfx\u0022\u003E\u003Cdiv\u003EDon\u0027t mistake Physics (KSP have in code on CPU), with PhysX (Nvidia proprietary code to direct access the video board, but not AMD, just Nvidia)\u003Cp\u003EAnd KSP does NOT have PhysX. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPhysX is automagically executed on the cpu on systems that don\u0027t have an nvidia graphics card. \u003Ca href=\u0022https://en.wikipedia.org/wiki/PhysX\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/PhysX\u003C/a\u003E \u003C/p\u003E\u003Cp\u003EUnity has physx, and KSP uses it for at least some parts of the physics simulation. \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/PhysX\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/PhysX\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Climberfx","CreatedById":57126,"CreatedDateTime":"2015-04-06T09:52:54Z","Content":"\n\u003Cp\u003EKSP use only CPU to calculate all the physics. If it use \u0022Physx\u0022 that are in Unity3D (and that wiki link don\u0027t prove anything), is the CPU type only. Even if you have an Nvidia GPU, it won\u0027t use it at all.\u003C/p\u003E\u003Cp\u003EThe best way to advance that on KSP would be by Open CL, that run in all type of video cards, not Nvidia only. And have practically the same type of acceleration/optimization.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/Fo3MghCykkU?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022459\u0022 height=\u0022344\u0022 src=\u0022https://www.youtube.com/embed/8jGZv1YYe2c?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T09:55:25Z\u0022 title=\u002204/06/2015 09:55  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Climberfx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2015-04-06T10:43:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Climberfx\u0022 data-cite=\u0022Climberfx\u0022\u003E\u003Cdiv\u003EKSP use only CPU to calculate all the physics. If it use \u0022Physx\u0022 that are in Unity3D (and that wiki link don\u0027t prove anything), \u003Cp\u003Eis the CPU type only. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe cpu type of Physx. In other words it is physx, as opposed to \u0022ksp does not have physx\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-04-06T10:51:30Z","Content":"\n\u003Cp\u003EPhysX is the physics engine used by Unity and thus KSP. It exists in several forms, and GPU-acceleration is only a small subset of that, which KSP doesn\u0027t use it. Nor should it.\u003C/p\u003E\u003Cp\u003EGPU acceleration only helps when simulating many independent rigidbodies, like in the second video ClimberFX linked above. Such a simulation can effectively use one thread per body, and a GPU has a lot of parallel processors for highly threaded operations. KSP\u0027s physics are a bit different, the parts of a vessel aren\u0027t independent but are instead chained and constrained. It is not clear that that sort of calculation is easily threadable like independent bodies are, there are scholarly papers about attempts to make them so but no real-life implementations as far as I know.\u003C/p\u003E\u003Cp\u003EWhether GPU-accelerated PhysX or OpenCL doesn\u0027t really matter if the task isn\u0027t threadable in the first place; in such a case it\u0027s better to keep it on the CPU where a single thread executes more quickly. I think at best we\u0027ll see one physics thread per active vessel inside the physics bubble.\u003C/p\u003E\n"},{"CreatedByName":"Beduino","CreatedById":81326,"CreatedDateTime":"2015-04-06T14:07:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Red Iron Crown\u0022 data-cite=\u0022Red Iron Crown\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhether GPU-accelerated PhysX or OpenCL doesn\u0027t really matter if the task isn\u0027t threadable in the first place; in such a case it\u0027s better to keep it on the CPU where a single thread executes more quickly. I think at best we\u0027ll see one physics thread per active vessel inside the physics bubble.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually PhysX can use multiple threads on CPU too.\u003C/p\u003E\u003Cp\u003EHere\u0027s a simulation of KSP like physics in Unity 5. It\u0027s somewhat the equivalent of 5 KSP Ships with 265 parts each.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u00225 contraptions containing each 265 mesh colliders cylinders (approximately) and associated breakable joints with collisions between bodies enabled. Total of 1325 cylinders. \u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E30 FPS while recording\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E60 FPS when not recording\u0022\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/PoqHu-BCyBA?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T14:12:58Z\u0022 title=\u002204/06/2015 02:12  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Beduino\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-04-06T14:11:23Z","Content":"\n\u003Cp\u003ENever said it couldn\u0027t. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E Just that a single KSP vessel is not easily threadable. (That demo is pretty impressive all the same!)\u003C/p\u003E\n"},{"CreatedByName":"Climberfx","CreatedById":57126,"CreatedDateTime":"2015-04-06T14:20:00Z","Content":"\n\u003Cp\u003EI think that is not the same level of interaction. This just colide and fall. like the ones i show too.\u003C/p\u003E\u003Cp\u003EThe KSP have a massive trust on bottom of the pieces, and must stay together, and function accordingly.\u003C/p\u003E\u003Cp\u003EThis small diference that requires today one core to \u0022rule than all\u0022. In an organized manner.\u003C/p\u003E\u003Cp\u003EThe moment multiple ones try to do the interaction, the results start to break a part.\u003C/p\u003E\u003Cp\u003EBut is not impossible do solve this in near future...\u003C/p\u003E\n"},{"CreatedByName":"Beduino","CreatedById":81326,"CreatedDateTime":"2015-04-06T14:21:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Climberfx\u0022 data-cite=\u0022Climberfx\u0022\u003E\u003Cdiv\u003EI think that is not the same level of interaction. This just colide and fall. like the ones i show too.\u003Cp\u003EThe KSP have a massive trust on bottom of the pieces, and must stay together, and function accordingly.\u003C/p\u003E\u003Cp\u003EThis small diference that requires today one core to \u0022rule than all\u0022. In an organized manner.\u003C/p\u003E\u003Cp\u003EThe moment multiple ones try to do the interaction, the results start to break a part.\u003C/p\u003E\u003Cp\u003EBut is not impossible do solve this in near future...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe (ill try to do more tests on that) but that doesn\u0027t explain why simple stationary orbital stations with 250-500 parts are already lagging hell in KSP.\u003C/p\u003E\u003Cp\u003EBut anyway what you see as a rocket is just a bunch of cylinders attached together with joints with a force applied, much like in the test video.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-06T14:24:26Z\u0022 title=\u002204/06/2015 02:24  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 6, 2015\u003C/time\u003E by Beduino\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Climberfx","CreatedById":57126,"CreatedDateTime":"2015-04-06T14:28:11Z","Content":"\n\u003Cp\u003EWell, i do not know how KSP is programed...\u003C/p\u003E\u003Cp\u003ECan\u0027t tell.\u003C/p\u003E\u003Cp\u003EBut even an orbital station, have it\u0027s wobbling effect occurring in between all the parts...\u003C/p\u003E\u003Cp\u003ESome times in the past, when i oversized some stations and docked a lot of other vessels on it, i try to aim the station (rotate) at a specific direction, with RCS and RW, it start to wobble and then explode.\u003C/p\u003E\u003Cp\u003EMan...\u003C/p\u003E\u003Cp\u003EThe quicksave saved me.\u003C/p\u003E\u003Cp\u003EImagine in this little demos you are using a plane, in game, you have planets, and orbits. Is a different calcule. Not only a one axis gravity...\u003C/p\u003E\n"},{"CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2015-04-06T14:33:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Beduino\u0022 data-cite=\u0022Beduino\u0022\u003E\u003Cdiv\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6Here\u0027s a simulation of KSP like physics in Unity 5\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot to be that guy, but I\u0027ve seen several attempts to show U5 handling the physics much better than we know KSP currently does, which is great. Could you please run the \u003Cem\u003Eexact same\u003C/em\u003E simulation in U4 and post the results similarly, so we can compare the two side-by-side?\u003C/p\u003E\u003Cp\u003EIf the U5 sim runs great, that\u0027s great\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6but if the U4 sim runs great too, then it\u0027s meaningless, and the performance bottleneck is something \u003Cem\u003Ebesides\u003C/em\u003E just a U4/U5 thing.\u003C/p\u003E\u003Cp\u003ENow, I say that as someone who would \u003Cem\u003Elove\u003C/em\u003E for U5 to be the big performance breakthrough, simple as that. But the devil is in the details, and it depends on exactly \u003Cem\u003Ewhat\u003C/em\u003E KSP is doing and \u003Cem\u003Ehow\u003C/em\u003E it goes about doing it. And even then, as others have said, it may not be as simple a task as just switching. The\u0027yve admitted to kludging some stuff to get U4 to work\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6well, at least partly like they want. All of that will have to be evaluated as to whether it ports smoothly, ports at all, needs re-written, or even needs to be used at all.\u003C/p\u003E\n"}]}