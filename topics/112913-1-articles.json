{"TopicId":112913,"ForumId":29,"TopicTitle":"[Answered] Detecting tab switches in the Astronaut Complex","CreatedByName":"JonDahm","CreatedById":145757,"CreatedDateTime":"2015-06-14T04:43:25Z","PageNum":1,"Articles":[{"CreatedByName":"JonDahm","CreatedById":145757,"CreatedDateTime":"2015-06-14T04:43:25Z","Content":"\n\u003Cp\u003EIs there any way to detect when the users switch tabs in the Astronaut Complex between available, assigned, and KIA kerbals? I can\u0027t find any hooks to execute code whenever the tab switches, and I really don\u0027t want to have to poll in an OnGUI method.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-20T02:04:03Z\u0022 title=\u002206/20/2015 02:04  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 20, 2015\u003C/time\u003E by JonDahm\u003C/strong\u003E\n\u003Cbr\u003EMarking as answered.\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-06-14T07:11:47Z","Content":"\n\u003Cp\u003EYou can build yourself a way in. This example attaches a simple MonoBehaviour to each list which invokes a callback when MonoBehaviour.OnEnable is called:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class ListenerInstaller : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public Action\u0026lt;AstronautComplexTest.Panel\u0026gt; CallbackAction;\u003Cbr\u003E\u003Cbr\u003E    private class ListenForOnEnable : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public Callback Callback;\u003Cbr\u003E        private void OnEnable() { if (Callback != null) Callback(); }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        if (CallbackAction == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogError(\u0022No CallbackAction set\u0022);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        AddCallbackToPanel(\u0022panel_available\u0022, AstronautComplexTest.Panel.Available);\u003Cbr\u003E        AddCallbackToPanel(\u0022panel_assigned\u0022, AstronautComplexTest.Panel.Assigned);\u003Cbr\u003E        AddCallbackToPanel(\u0022panel_kia\u0022, AstronautComplexTest.Panel.Missing);\u003Cbr\u003E\u003Cbr\u003E        CallbackAction(AstronautComplexTest.Panel.Available);\u003Cbr\u003E\u003Cbr\u003E        Destroy(this);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void AddCallbackToPanel(string panelName, AstronautComplexTest.Panel which)\u003Cbr\u003E    {\u003Cbr\u003E        var panel = FindPanel(panelName);\u003Cbr\u003E        if (panel == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogError(\u0022Couldn\u0027t find a panel called \u0022 \u002B panelName);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        panel.gameObject.AddComponent\u0026lt;ListenForOnEnable\u0026gt;().Callback = () =\u0026gt; CallbackAction(which);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private UIPanel FindPanel(string name)\u003Cbr\u003E    {\u003Cbr\u003E        return GetComponentsInChildren\u0026lt;UIPanel\u0026gt;().FirstOrDefault(p =\u0026gt; p.name == name);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public static void Install(Action\u0026lt;AstronautComplexTest.Panel\u0026gt; callback)\u003Cbr\u003E    {\u003Cbr\u003E        var complex = UIManager.instance.gameObject.GetComponentsInChildren\u0026lt;CMAstronautComplex\u0026gt;(true).FirstOrDefault();\u003Cbr\u003E        if (complex == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogError(\u0022Didn\u0027t find CMAstronautComplex\u0022);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        complex.transform.Find(\u0022CrewPanels/panel_enlisted\u0022).gameObject.AddComponent\u0026lt;ListenerInstaller\u0026gt;().CallbackAction =\u003Cbr\u003E            callback;\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.SpaceCentre, false)]\u003Cbr\u003Epublic class AstronautComplexTest : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public enum Panel\u003Cbr\u003E    {\u003Cbr\u003E        Available,\u003Cbr\u003E        Assigned,\u003Cbr\u003E        Missing\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        ListenerInstaller.Install(OnActivePanelChanged);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void OnActivePanelChanged(Panel which)\u003Cbr\u003E    {\u003Cbr\u003E        Debug.LogWarning(\u0022Panel changed to \u0022 \u002B which);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"JonDahm","CreatedById":145757,"CreatedDateTime":"2015-06-20T00:24:22Z","Content":"\n\u003Cp\u003EThank you so much, EvilReeper! That worked perfectly!\u003C/p\u003E\n"}]}