{"TopicId":86653,"ForumId":36,"TopicTitle":"MODEL, NODE, and all the 0.25 faff","CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-09T14:40:15Z","PageNum":1,"Articles":[{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-09T14:40:15Z","Content":"\n\u003Cp\u003EAs many part modders and users of KW in particular may have noticed, something big, and tiny, happened this update in KSP. To explain it\u0027s best to step back\u003C/p\u003E\u003Cp\u003E0.20 introduced the GameDatabase, and changed how cfg files worked. In the beginning! Well in the beginning it was even worse; but Slightly after that! The way cfg files worked is that you\u0027d have a file called part.cfg and in it you would have all the keys and nodes to define the part; though early on there weren\u0027t even nodes because everything was based on modules. In 0.17 or so PartModules were added, and the MODULE node was born to define them, somewhere around here RESOURCE was also added and that was most of it. Now fast forward to 0.20, and the big change.\u003C/p\u003E\u003Cp\u003EPART{}, Now we could define any node in any cfg file, and any number of them, it was great! a bit nasty because /everything/ had to change, but it really wasn\u0027t that bad, and it came along with two new nodes inside PART, MODEL, and NODE. NODE was promptly forgotten because it simply didn\u0027t work and really wasn\u0027t anywhere near working either, but MODEL has found a lot of use in welding and asset reuse, however. Do not mistake, MODEL was also broken.\u003C/p\u003E\u003Cp\u003EMODEL suffered from a surprisingly simple error which turned out to stem from the same place as many of NODE\u0027s glitches. MODEL didn\u0027t fit into the paradigm of part loading as KSP wanted it to be, and Squad hadn\u0027t jammed it into the right place in the process, the result\u003C/p\u003E\u003Cp\u003EPART.rescaleFactor has been applied to MODEL nodes twice, starting with their inception in 0.20, and ending in 0.24.2\u003C/p\u003E\u003Cp\u003EThe impact of that if you wanted to scale an asset, anything other than 1:1, you had to do some weird stuff. My preferred method was the X*Y=1 method, say for a 2:1 scale you\u0027d set PART.rescaleFactor=2, and PART.MODEL.scale=0.5,0.5,0.5, or the other way round, I forget. The other option was to leave PART.MODEL.scale=1, etc, and set PART.rescaleFactor to the square root of the multiplier you want, in this example 1.414213562etc, it\u0027s all in floats so you only need a bitdepth of 16.\u003C/p\u003E\u003Cp\u003EThat\u0027s gone.\u003C/p\u003E\u003Cp\u003EIt works now\u003C/p\u003E\u003Cp\u003EAnd this is a bit of a problem.\u003C/p\u003E\u003Cp\u003ENow, if you have the numbers manipulated as described above, you are specifically not going to get what you want. KW Rocketry has, or had, I haven\u0027t checked since discussing the issues with somebody making a patch for it yesterday. The solution is easy, because of the glitch with MODEL we had to manipulate the numbers in a certain way to get the result we wanted, and now we don\u0027t. To fix your parts simply put in the \u003Cstrong\u003Enormal\u003C/strong\u003E numbers as were originally intended. If you are not going to try to use NODE then put the intended multiplier in rescaleFactor, and leave all the MODEL.scale fields at 1,1,1; this way KSP will automagically scale the attachnodes and FX nodes and CoMOffsets and etc, and you won\u0027t have to fix these yourself.\u003C/p\u003E\u003Cp\u003EOn to the larger bag of worms.\u003C/p\u003E\u003Cp\u003ENODE allows, theoretically, for attachnodes to be defined by transform gameobjects defined and positioned in the Unity Editor and compiled into the .mu file. This is a lot easier and more reliable than the PART.node_* method. However~\u003C/p\u003E\u003Cp\u003ENODE was originally announced as ATTACH, suffice to say ATTACH DOES NOT EXIST, it\u0027s here where the expletives start btw, insert them of your own accord since I can\u0027t include them due to forum policy.\u003C/p\u003E\u003Cp\u003ESo for a good, well, until about June, it was assumed that ATTACH was so incredibly broken that nothing happened; and nothing did happen, because ATTACH DOES NOT EXIST.\u003C/p\u003E\u003Cp\u003EMoving forward from there it was noted that NODE.size was completely ignored. Prior to 0.24 that didn\u0027t matter, but 0.24 came out slightly before it was realized that ATTACH DOES NOT EXIST, and 0.24 introduced joint strengthening based on the size of the attach node, so it did matter.\u003C/p\u003E\u003Cp\u003EIt was shortly after that discovered that NODE could not be used to define a given attachnode as being that part\u0027s srfattachnode, aka node_attach or the node that positions and orients the part when placed on the surface of another part. This in particular has not been fixed yet, but more about that later.\u003C/p\u003E\u003Cp\u003EThen it was discovered that NODE was, and still is completely bypassed by rescaleFactor, the situation has improved though, now NODE is impacted by the MODEL.scale values of the MODEL that the transform exists in, this is functional but rescaleFactor does not apply to NODEs, while it does apply to MODEL, but not somehow not the transforms in the MODEL, I\u0027m a bit confused by that myself but the result is that if you wish to use NODE, rescaleFactor must equal 1, and if you want to scale the part you must use MODEL, which then means that any coordinates defined in the cfg file will be wrong, unless you compensate by hand! Yay math! Ffffffff.\u003C/p\u003E\u003Cp\u003ESo glad that doesn\u0027t apply to me, I won\u0027t have coordinates in my cfgs once I figure out this last bit.\u003C/p\u003E\u003Cp\u003EI don\u0027t yet have it pinned down and I don\u0027t understand why, I\u0027ll be doing more testing on friday. About 2 thirds of my NODEs render correctly in the world, in the right place, snap the right way, are the right size; but they won\u0027t.... attach... I\u0027ve confirmed it\u0027s not related to colliders, they don\u0027t attach even with the node way off floating in air and with collision allowed, they only snap in the correct orientation; I really just don\u0027t know. But some of them do work! And I don\u0027t know why they work either!\u003C/p\u003E\u003Cp\u003ENow, I mentioned that you cannot define srfAttachNodes via NODE, and really that is supposed to work, the feature\u0027s just missing the critical bit and by luck this one thing was something I could do myself.\u003C/p\u003E\u003Cp\u003ETada! SrFix, it locates all parts which do not have a srfAttachNode but do have an AttachNode that qualifies to be one, and makes that node be it for that part.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://kerbalstuff.com/mod/258/SrFix\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalstuff.com/mod/258/SrFix\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIf I, or any of you, can figure out that one last hitch of the nodes not noding, then NODE will finally (with srfix\u0027s assistance) be fully viable, with an adequate dose of caveats\u003C/p\u003E\u003Cp\u003EFinal note; so far as I can tell the appropriate orientation of the transform is with the blue arrow pointing away from where the other part should attach.\u003C/p\u003E\u003Cp\u003EHOPE! I can feel it!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-11T02:24:13Z\u0022 title=\u002210/11/2014 02:24  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 11, 2014\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-10-09T15:46:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003Enow NODE is impacted by the MODEL.scale values of the MODEL that the transform exists in, this is functional but rescaleFactor does not apply to NODEs, while it does apply to MODEL, but not somehow not the transforms in the MODEL, I\u0027m a bit confused by that myself but the result is that if you wish to use NODE, rescaleFactor must equal 1, and if you want to scale the part you must use MODEL,\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was wondering about that thanks.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003Ewhich then means that any coordinates defined in the cfg file will be wrong, unless you compensate by hand! \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat coordinates are you referring to?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EAbout 2 thirds of my NODEs render correctly in the world, in the right place, snap the right way, are the right size; but they won\u0027t.... attach... I\u0027ve confirmed it\u0027s not related to colliders, they don\u0027t attach even with the node way off floating in air and with collision allowed, they only snap in the correct orientation; I really just don\u0027t know. But some of them do work! And I don\u0027t know why they work either!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI had this once, and in my case it was misspelled node names.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003ENow, I mentioned that you cannot define srfAttachNodes via NODE\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESorry to treat you like an idiot. You probably know this, but are you using hinge_joint?\u003C/p\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2014-10-09T15:55:30Z","Content":"\n\u003Cp\u003EGreys, about nodes not attaching things: are you referring to the behavior where only the first and last nodes defined in a part file will allow parent-style attachments?\u003C/p\u003E\u003Cp\u003EFor example, TweakableEverything adds a third node to the inline docking port. However, this node can only be used for child-style attachments. That is, if I place another part, and then fetch an inline docking port, I can still only attach it to the ship by the \u0022top\u0022 or \u0022bottom\u0022 nodes: the new node that I added in the middle doesn\u0027t work (it sorta looks like it does; it snaps on but the part stays greyed out and if you launch or save etc, it\u0027s gone). If I attach it by the \u0022top\u0022 or \u0022bottom\u0022 node, I can then attach new parts as children to the \u0022middle\u0022 node.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-10-09T17:04:49Z","Content":"\n\u003Cp\u003EI see your text on the screen but I have \u003Cem\u003Eno clue\u003C/em\u003E what you are saying. Still, it looks like you really researched all this and made us a nice little fix in a compact package which, until I am told it is not needed, will be installed now.\u003C/p\u003E\n"},{"CreatedByName":"Ruedii","CreatedById":57704,"CreatedDateTime":"2014-10-09T17:47:34Z","Content":"\n\u003Cp\u003EI was thinking to see if there is a way to do this with module manager. Do you think it\u0027s possible?\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-10-09T18:07:04Z","Content":"\n\u003Cp\u003Emaybe, but without the ability to set variables, manipulate them, and then use them in place of normal config data during a MM patch process, it might be a little bit difficult. What we really need is a MM style plugin that implements a sequential scripting system similar to the windows batch file system with environment variable I/O.\u003C/p\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2014-10-09T19:41:50Z","Content":"\n\u003Cp\u003EModuleManager patches can be used for \u0022quick fixes\u0022 to the scaling issues for some/many parts, but it needs to be designed specifically to the method that the part creator was using. ModuleManager doesn\u0027t handle any of the data in its target forms, so doing math on the vectors isn\u0027t a thing at this point. I made such a patch for KW Rocketry, because both Kyle \u0026amp; Winston are incapacitated at the moment, but since a \u0022one-size fits all\u0022 solution doesn\u0027t really work, the best way forward for users is to wait for part authors to fix things.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-09T20:30:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022toadicus\u0022 data-cite=\u0022toadicus\u0022\u003E\u003Cdiv\u003EGreys, about nodes not attaching things: are you referring to the behavior where only the first and last nodes defined in a part file will allow parent-style attachments?\u003Cp\u003EFor example, TweakableEverything adds a third node to the inline docking port. However, this node can only be used for child-style attachments. That is, if I place another part, and then fetch an inline docking port, I can still only attach it to the ship by the \u0022top\u0022 or \u0022bottom\u0022 nodes: the new node that I added in the middle doesn\u0027t work (it sorta looks like it does; it snaps on but the part stays greyed out and if you launch or save etc, it\u0027s gone). If I attach it by the \u0022top\u0022 or \u0022bottom\u0022 node, I can then attach new parts as children to the \u0022middle\u0022 node.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYanno, that could totally definitely be it; however for me it\u0027s the Last Two defined nodes in the cfg file that do work, testing, testing\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EWhat coordinates are you referring to?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- node definitions ---\u003Cbr\u003Enode_stack_top = 0.0, 0.7783, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// --- FX definitions ---\u003Cbr\u003E\u003Cbr\u003Efx_exhaustLight_blue = 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, power\u003Cbr\u003Efx_smokeTrail_light  = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, power\u003Cbr\u003Efx_exhaustSparks_flameout = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, flameout\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEdit: Now of course, the coordinate 0, 0, 0 never scales, unless you do something which cannot be done except by code, scale from somewhere other than the origin\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-09T20:36:09Z\u0022 title=\u002210/09/2014 08:36  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 9, 2014\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-10-09T20:47:47Z","Content":"\n\u003Cp\u003EThanks for your explanation. I should have realised it wasn\u0027t a simple a config mistake from all the class lingo.\u003C/p\u003E\u003Cp\u003EAnyway I\u0027ll add this to the dev compilation now. Could you make the dl link a little more prominent?\u003C/p\u003E\n"},{"CreatedByName":"slumpie","CreatedById":121922,"CreatedDateTime":"2014-10-09T21:58:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EI\u0027m a bit confused by that myself but the result is that if you wish to use NODE, rescaleFactor must equal 1, and if you want to scale the part you must use MODEL, which then means that any coordinates defined in the cfg file will be wrong, unless you compensate by hand! Yay math! Ffffffff.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe I\u0027m misunderstanding something, but using scale outside of MODEL should work as well, shouldn\u0027t it?\u003C/p\u003E\u003Cp\u003EEDIT: Instead of \u0022compensating by hand\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-09T22:03:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022slumpie\u0022 data-cite=\u0022slumpie\u0022\u003E\u003Cdiv\u003EMaybe I\u0027m misunderstanding something, but using scale outside of MODEL should work as well, shouldn\u0027t it?\u003Cp\u003EEDIT: Instead of \u0022compensating by hand\u0022.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Escale outside of MODEL is a completely unrelated thing; it multiplies the coordinate space of the part; which Only moves things that are defined by coordinates in the cfg file.\u003C/p\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2014-10-09T22:15:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EYanno, that could totally definitely be it; however for me it\u0027s the Last Two defined nodes in the cfg file that do work, testing, testing\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETweakableDockingNode does this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E!node_stack_bottom = DELETE\u003Cbr\u003E\u003Cbr\u003Enode_stack_tdn = 0, 0, -.671, 0, 0, 1, 1\u003Cbr\u003Enode_stack_bottom = 0.0, -0.5753132, 0.0, 0.0, 1.0, 0.0, 1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELast time I checked, it behaved exactly as I described. Granted, that\u0027s been a few months... but the order [node_stack_top, node_stack_tdn, node_stack_bottom] worked for me then, and for the users who reported / helped fix the problem.\u003C/p\u003E\n"},{"CreatedByName":"slumpie","CreatedById":121922,"CreatedDateTime":"2014-10-09T23:15:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003Escale outside of MODEL is a completely unrelated thing; it multiplies the coordinate space of the part; which Only moves things that are defined by coordinates in the cfg file.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn this case I don\u0027t see what you mean with this:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Ewhich then means that any\u003Cspan style=\u0022font-size:12px;\u0022\u003E \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003Ecoordinates\u003C/span\u003E\u003C/strong\u003E defined in the cfg file will be wrong, unless you \u003Cstrong\u003Ecompensate by hand\u003C/strong\u003E! Yay math! Ffffffff.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat coordinates? I thought you meant the ones for the node definitions in the config file.\u003C/p\u003E\u003Cp\u003EI just thought that as an alternative you could use scale outside MODEL, instead of recalculating all the node coordinates.\u003C/p\u003E\u003Cp\u003E--------------\u003C/p\u003E\u003Cp\u003EEDIT:\u003C/p\u003E\u003Cp\u003ELet\u0027s say NODE is used on your parts. \u003C/p\u003E\u003Cp\u003EIf you want to rescale a part, you would do that by using scale inside MODEL together with rF=1, right?\u003C/p\u003E\u003Cp\u003EIf you start with this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODEL\u003C/pre\u003E\u003Cp\u003E[INDENT]{\u003Cbr\u003Emodel = something\u003Cbr\u003Escale = 1, 1, 1\u003Cbr\u003E}\u003Cbr\u003E[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E[B]scale = 1[/B]\u003Cbr\u003ErescaleFactor = 1\u003Cbr\u003Enode_stack_bottom = 0.2378, -1.4321, 0.4567, 0, -1, 0, 2\u003Cbr\u003ENODE\u003Cbr\u003E{\u003Cbr\u003E name = top\u003Cbr\u003E transform = topTransform\u003Cbr\u003E size = 1.0\u003Cbr\u003E method = FIXED_JOINT\u003Cbr\u003E}\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd then if you want to scale it by the factor 3.75:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODEL\u003C/pre\u003E\u003Cp\u003E[INDENT]{\u003Cbr\u003Emodel = something\u003Cbr\u003Escale = 3.75, 3.75, 3.75\u003Cbr\u003E}\u003Cbr\u003E[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E[B]scale = 3.75[/B]\u003Cbr\u003ErescaleFactor = 1\u003Cbr\u003Enode_stack_bottom = 0.2378, -1.4321, 0.4567, 0, -1, 0, 2\u003Cbr\u003ENODE\u003Cbr\u003E{\u003Cbr\u003E name = top\u003Cbr\u003E transform = topTransform\u003Cbr\u003E size = 1.0\u003Cbr\u003E method = FIXED_JOINT\u003Cbr\u003E}\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E*note changed scale factor*\u003C/p\u003E\u003Cp\u003EIt\u0027s easier this way to adjust coordinates, isn\u0027t it?\u003C/p\u003E\u003Cp\u003EAlthough it\u0027s questionable how often this will actually be the case. Why defining nodes in the model and in the config.\u003C/p\u003E\u003Cp\u003EI mean if as example FX coordinates were actually working, then...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-10T00:12:28Z\u0022 title=\u002210/10/2014 12:12  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 10, 2014\u003C/time\u003E by slumpie\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2014-10-10T00:31:48Z","Content":"\n\u003Cp\u003ESo, if I\u0027m right in thinking that Greys is saying that PART.scale applies scalar transforms to cfg-local coordinates (e.g. node_stack_... entries), I think slumpie is right, and I also think that Squad should formally deprecate either scale or rescaleFactor and roll its function into the other.\u003C/p\u003E\u003Cp\u003ECurrently:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EPART.MODEL.scale - A PART\u0027s MODEL\u0027s scale value applies to both the actual size of the part model and cfg-local coordinates.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.scale - A PART\u0027s scale value applies only to the cfg-local coordinates, e.g. node_stack_XXX.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.rescaleFactor - A PART\u0027s rescaleFactor value applies applies only to the actual size of the part model.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo, if you scale your part with PART.MODEL.scale, no worries. Leave the other two alone. If you further scale your part with PART.MODEL.scale \u003Cem\u003Eand\u003C/em\u003E PART.rescaleFactor, change PART.scale to match.\u003C/p\u003E\u003Cp\u003EIt seems to me like the best way to solve this would be:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EPART.MODEL.scale - A PART\u0027s MODEL\u0027s scale value applies to both the actual size of the part model and cfg-local coordinates.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.scale - A PART\u0027s scale value applies to both the actual size of the part model and cfg-local coordinates.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.rescaleFactor - OBSOLETE. No longer applies any transformations.\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI can\u0027t think of a compelling reason to keep the scale of the node coordinates and the part size separately. On the other hand, I\u0027ve never built a part ever, so what do I know?\u003C/p\u003E\n"},{"CreatedByName":"slumpie","CreatedById":121922,"CreatedDateTime":"2014-10-10T00:57:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022toadicus\u0022 data-cite=\u0022toadicus\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ECurrently:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EPART.MODEL.scale - A PART\u0027s MODEL\u0027s scale value applies to both the actual size of the part model and cfg-local coordinates. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.scale - A PART\u0027s scale value applies only to the cfg-local coordinates, e.g. node_stack_XXX. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPART.rescaleFactor - A PART\u0027s rescaleFactor value applies applies only to the actual size of the part model. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEhm, no you got that wrong.\u003C/p\u003E\u003Cp\u003EMODEL scale - Only applies to MODEL (the part size), to NODE and to the MODULE objects (unless you meant that with local(?) coordinates...). \u003C/p\u003E\u003Cp\u003Escale - Only applies to coordinates in the config\u003C/p\u003E\u003Cp\u003ErescaleFactor - Applies to mesh (if used), to coordinates in the config, to MODEL and to MODULEs, but not NODE (according to Greys, I didn\u0027t test this).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-10T01:10:18Z\u0022 title=\u002210/10/2014 01:10  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 10, 2014\u003C/time\u003E by slumpie\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"raidernick","CreatedById":97711,"CreatedDateTime":"2014-10-10T01:22:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022slumpie\u0022 data-cite=\u0022slumpie\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIf you start with this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODEL\u003C/pre\u003E\u003Cp\u003E[INDENT]{\u003Cbr\u003Emodel = something\u003Cbr\u003Escale = 1, 1, 1\u003Cbr\u003E}\u003Cbr\u003E[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E[B]scale = 1[/B]\u003Cbr\u003ErescaleFactor = 1\u003Cbr\u003Enode_stack_bottom = 0.2378, -1.4321, 0.4567, 0, -1, 0, 2\u003Cbr\u003ENODE\u003Cbr\u003E{\u003Cbr\u003E name = top\u003Cbr\u003E transform = topTransform\u003Cbr\u003E size = 1.0\u003Cbr\u003E method = FIXED_JOINT\u003Cbr\u003E}\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd then if you want to scale it by the factor 3.75:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODEL\u003C/pre\u003E\u003Cp\u003E[INDENT]{\u003Cbr\u003Emodel = something\u003Cbr\u003Escale = 3.75, 3.75, 3.75\u003Cbr\u003E}\u003Cbr\u003E[/INDENT]\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E[B]scale = 3.75[/B]\u003Cbr\u003ErescaleFactor = 1\u003Cbr\u003Enode_stack_bottom = 0.2378, -1.4321, 0.4567, 0, -1, 0, 2\u003Cbr\u003ENODE\u003Cbr\u003E{\u003Cbr\u003E name = top\u003Cbr\u003E transform = topTransform\u003Cbr\u003E size = 1.0\u003Cbr\u003E method = FIXED_JOINT\u003Cbr\u003E}\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E*note changed scale factor*\u003C/p\u003E\u003Cp\u003EIt\u0027s easier this way to adjust coordinates, isn\u0027t it?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is how I scale all of my parts/nodes and have not had any issues with it. Having avoided the use of rescalefactor means the parts weren\u0027t broken by the update. I think it\u0027s better practice to scale it this way rather than using rescalefactor.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-10T01:38:56Z","Content":"\n\u003Cp\u003ERight, rescaleFactor applies to everything, except weirdly NODE. In the following picture I had the same .mu file in 3 sizes with MODEL.scale=1,1,1, and 3 values of rescaleFactor, using NODE blocks\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://cdn.mediacru.sh/WH6O7nPz20BU.png\u0022 alt=\u0022WH6O7nPz20BU.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EDon\u0027t mind the red, development in progress.\u003C/p\u003E\u003Cp\u003EThis immediately stuck out when I made the change realizing that MODEL had been fixed, the very first run was pretty confusing; with the rescale^2 glitch fixed XY=1 was actually true, so all 3 parts were the same size, but their nodes varied wildly, upon correcting the scales I was faced with that image and gave up for the day.\u003C/p\u003E\u003Cp\u003EAdmittedly the result is less asinine than I initially believed; for some reason I jumped to the conclusion that MODEL was driving the scale of NODES, when really NODES are based on transforms in the model that MODEL is loading; so really it\u0027s just that all of the scales are being applied in the correct order to result in NODE\u0027s transforms being where they aught\u0027; except for the part where rescaleFactor is bypassed.\u003C/p\u003E\u003Cp\u003Escale applies only to the coordinate space, and I for one fully support taking scale under the bridge and setting it on fire. I don\u0027t see any way that scale contributes to the game anymore; and arguably it was a bad solution for what it was added for\u003C/p\u003E\u003Cp\u003Eand what it was added for is the fact that prior to .mu files, KSP would load any .dae file and assume that their coordinate space was in meters; so if you gave it a coordinate space in feet, you might set the scale to 3.28~, the holes in this logic are large enough to fly a small mountain through.\u003C/p\u003E\u003Cp\u003Edeprecate scale \u002B\u002B\u003C/p\u003E\u003Cp\u003EEdit: I have recompiled and patched SrFix successfully; but I don\u0027t have time to package it; will be available in about 14 hours\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-10T02:34:23Z\u0022 title=\u002210/10/2014 02:34  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 10, 2014\u003C/time\u003E by Greys\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Supernovy","CreatedById":29617,"CreatedDateTime":"2014-10-10T04:39:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI don\u0027t yet have it pinned down and I don\u0027t understand why, I\u0027ll be doing more testing on friday. About 2 thirds of my NODEs render correctly in the world, in the right place, snap the right way, are the right size; but they won\u0027t.... attach... I\u0027ve confirmed it\u0027s not related to colliders, they don\u0027t attach even with the node way off floating in air and with collision allowed, they only snap in the correct orientation; I really just don\u0027t know. But some of them do work! And I don\u0027t know why they work either!\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDo your nodes point in multiple directions? Because you may be running into a really really old bug where having nodes in different directions in the wrong order in the config would cause exactly that - snapping, but it would prevent actual attachment. Since they\u0027re evidently not in the config, I don\u0027t know what can help with that.\u003C/p\u003E\u003Cp\u003EI can\u0027t remember the details, but it was something like you had to make the very last two defined nodes the top and bottom ones.\u003C/p\u003E\n"},{"CreatedByName":"slumpie","CreatedById":121922,"CreatedDateTime":"2014-10-10T15:37:55Z","Content":"\n\u003Cp\u003EThree possibilities/rules:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EOnly nodes that are defined to be on the \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Esame axis\u003C/span\u003E AND are \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Eat the end\u003C/span\u003E of the node_stack list will attach properly if used as first attachment point of a part.\u003Cbr\u003E\u003Cul\u003E\u003Cli\u003ENote: There is no limit, you can have as many node_stacks as you want as long as they share the same axis. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*]If NODE is used only the NODE definitions with the \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Esame axis\u003C/span\u003E AND which are \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Eat the end\u003C/span\u003E of the list can be used as first attachment point.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003ENote: If NODE and node coordinates are used, then only the last NODE transforms with the same axis will have this ability, no matter if you followed the first rule or not. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*] node_attach DOES WORK in combination with node_stack or NODE.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003ESo far \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Ethe only workaround\u003C/span\u003E for parts that are meant to be attachable on two different axis! \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe only workaround is to follow the first two rules for all NODE or node_stack definitions and then to add node_attach. Surface attachment can be messy though...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-10T17:35:31Z\u0022 title=\u002210/10/2014 05:35  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 10, 2014\u003C/time\u003E by slumpie\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-10-11T02:22:06Z","Content":"\n\u003Cp\u003E\nok so that was more than 14 hours, by about 12 hours, but here\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ESrFix\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nupdated to 0.25, fixed the remnant nodeball for the srf node\n\u003C/p\u003E\n\u003Cp\u003E\nStill testing on how to make all the nodes work; thanks for the suggestions about what to try.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-05-04T15:46:21Z\u0022 title=\u002205/04/2021 03:46  PM\u0022 data-short=\u00223 yr\u0022\u003EMay 4, 2021\u003C/time\u003E by Snark\u003C/strong\u003E\n\u003Cbr\u003ELink to defunct website removed by moderator\n\u003C/span\u003E\n"},{"CreatedByName":"slumpie","CreatedById":121922,"CreatedDateTime":"2014-10-11T10:22:06Z","Content":"\n\u003Cp\u003EWell, that weren\u0027t really suggestions. \u003C/p\u003E\u003Cp\u003EI pretty much just listed the results of my testing. \u003C/p\u003E\u003Cp\u003EWhat I found interesting is that I couldn\u0027t replicate the limitation of one or two nodes. I think I had about six nodes sharing an axis and they all worked. NOTE: With sharing an axis I don\u0027t mean them being on the same position vector (understandable?), I\u0027m actually talking about the node defining axis being parallel to each other.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2015-01-06T12:05:10Z","Content":"\n\u003Cp\u003EAm I understanding correctly that HINGE_JOINTs aren\u0027t working with this yet?\u003C/p\u003E\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-01-06T12:59:06Z","Content":"\n\u003Cp\u003EBeen systematically hacking away at how to use MODEL without the revert bug doing it\u0027s evilness and finally found the correct combination.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\tMODEL\u003Cbr\u003E\t{\u003Cbr\u003E\t\tmodel = KashCorp/BoxBases/Assets/kapcubecab2\u003Cbr\u003E\t\tscale = 1.25, 1.25, 1.25\u003Cbr\u003E\t}\u003Cbr\u003E\tscale = 1.25\u003Cbr\u003E\trescaleFactor = 1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe scale in Unity for the model is of course 1,1,1.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2015-05-19T20:46:44Z","Content":"\n\u003Cp\u003EIs this fix still necessary?\u003C/p\u003E\n"},{"CreatedByName":"raidernick","CreatedById":97711,"CreatedDateTime":"2015-05-19T20:57:48Z","Content":"\n\u003Cp\u003EYes, if you use model nodes and rescalefactor is not 1 when you revert or load saves parts change size.\u003C/p\u003E\n"}]}