{"TopicId":26519,"ForumId":36,"TopicTitle":"Creating a Config File for my Plasma Rocket","CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-12T12:44:22Z","PageNum":1,"Articles":[{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-12T12:44:22Z","Content":"\n\u003Cp\u003EHowdy all!\u003C/p\u003E\u003Cp\u003EFirst post. Been a long time support of KSP and am now finally getting into playing around with config files and the like. I\u0027m trying to work out how to translate the numbers I\u0027ve run for a VASIMR style engine into the config file. Here is what i\u0027m working with:\u003C/p\u003E\u003Cp\u003EFirst I started by deciding the size of my powerplants radiator. For this system I went with a 200m2 radiator. Using this formula:\u003C/p\u003E\u003Cp\u003ERadiator Area * (Emissivity * Boltzman Constant * Temperature^4) = 200 * (0.95*(5.670373*0.00000001)*1173.15^4 = 20,407,011.47 watts OR 20.41 MW.\u003C/p\u003E\u003Cp\u003EI then divided this by 4. Why 4 you ask? Because through research (that was pointed out by Ken Burnside of Attack Vector: Tactical fame) I understand that for every watt of useful power, there\u0027s 4 watts of waste heat. This gives me 5.10 MW of useable output.\u003C/p\u003E\u003Cp\u003EFurther research into VASIMR has it sitting around 60% efficient right now, so taking 60% of 5.10 MW, I\u0027ve now got 3.06 MW going to my actual thruster.\u003C/p\u003E\u003Cp\u003EI set my ISP values for Low to 400 sec, medium 2550 sec and high to 5500 sec. \u003C/p\u003E\u003Cp\u003ERunning the numbers based on the power going into the thrust beam using:\u003C/p\u003E\u003Cp\u003E(2 * Thrust Power ) / (Isp * 9.81)\u003C/p\u003E\u003Cp\u003EI came up with thrust for Low to be 1.56 kN, medium 0.24 kN and high to be 0.11 kN\u003C/p\u003E\u003Cp\u003ETotal waste heat is going to be 17.35 MW ((20.41-5.10) \u002B (5.10-3.06))\u003C/p\u003E\u003Cp\u003EWhich is more than covered by the system as it\u0027s designed right now...So, sorry for the long winded post, but yeah..there is my dilemma. \u003C/p\u003E\u003Cp\u003EAs I understand it right now, in the config file I can specify Max Thrust, Minimum Thrust, Heat Production, and fuel consumption. What I can figure out is how I get the variable parts in there within the ranges I\u0027ve specified. I\u0027m sure to there are lots of mistakes in my assumptions, and there\u0027s a lot of debate as to whether or not VASIMR is viable anyway, but it\u0027d be neat to simulate all of this and see hhow it might work in real time. The reactor is assumed to be a nuclear fission reactor. Also, I am assuming a lot of research shrunk the reactors down to manageable sizes, but even assuming 500 kilograms per megawatt, this reactor at 20.41 MW output is 10,200kg! But, anyway...Hopefully some of the brains out there that have been doing this for a minute can help me along!\u003C/p\u003E\u003Cp\u003EThanks in advance!\u003C/p\u003E\u003Cp\u003EV/R\u003C/p\u003E\u003Cp\u003EBrad McKinstrys\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-12T15:06:32Z","Content":"\n\u003Cp\u003EAre you trying to make it so you can adjust the ISP and thrust separately from the throttle? If so then you\u0027ll need a plugin to actually accomplish that, as KSP be default doesn\u0027t support multiple ISPs and thrusts except based on atmospheric pressure and speed respectively.\u003C/p\u003E\u003Cp\u003EA good way to accomplish this is using a GUI slider to change the ISP and thrust by taking the slider\u0027s value, doing some math (probably with a floatCurve) and then outputting the values for the engine to use. I just finished my heat sink plugin and I think we (Puffin Technologies) were going to work on a VSAMIR engine but we\u0027d be willing to work together on this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-12T15:07:06Z","Content":"\n\u003Cp\u003EI think i\u0027m starting to figure this out a little bit...the problem is though, getting a power source to work for it. \u003C/p\u003E\u003Cp\u003EAfter referencing this thread:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/26354-Ion-Engine-consumes-more-energy-than-it-should?p=321868\u0026amp;viewfull=1#post321868\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/showthread.php/26354-Ion-Engine-consumes-more-energy-than-it-should?p=321868\u0026amp;viewfull=1#post321868\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt looks like the ratio would be energy: 7,698,888 electricity per second for every 0.398 kg/s propellant usage in Low gear (1.56 kN / 400 sec Isp)\u003C/p\u003E\u003Cp\u003EThat way, when multiplied, the energy used per second when the engine is at full thrust is 3,061,051. Still pluggin\u0027 away.\u003C/p\u003E\u003Cp\u003EBrad McKinstry\u003C/p\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-12T19:00:56Z","Content":"\n\u003Cp\u003EOrbitus,\u003C/p\u003E\u003Cp\u003ESounds awesome! I\u0027ll be more than happy to lend whatever knowledge and stuff like that! I\u0027m getting ready to start modeling the parts to the ship I\u0027ve envisaged in the next couple of days. Right now i\u0027m looking at a total of four total modules. Actually, make that 5. It\u0027ll be the Drive section, Waste Heat Array/Power Plant Module, Propellant Module, Spin Hab module and Flight Module. May change, but that\u0027s the general idea so far. Will post some stuff as I get things working.\u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-12T22:30:25Z","Content":"\n\u003Cp\u003ESounds good. I\u0027ll see what Mekan1k wants to do (if he wants to do some models or configs or whatever) so we can split the workload effectively. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-13T19:14:51Z","Content":"\n\u003Cp\u003ESo, some good news. I\u0027ve programmed the functions to allow all of this stuff to be generated. The bad news is, it\u0027s not a loop right now, and it\u0027s also using the Dark GDK. I haven\u0027t written the bits for limiting the users Isp input range yet either. Actually, there\u0027s zero input right now. it\u0027s all just hard coded. I\u0027m going to try my hand at coding it for Kerbal. Will let you know!\u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-13T21:33:53Z","Content":"\n\u003Cp\u003EIf you don\u0027t already I\u0027d recommend downloading \u003Ca href=\u0022http://unity3d.com/\u0022 rel=\u0022external nofollow\u0022\u003EUnity\u003C/a\u003E because it includes a custom version of Monodevelop (programming software) with Unity syntax and debug capability built in. I hate having to program without syntax assistance... :/\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-05-13T22:03:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003EIf you don\u0027t already I\u0027d recommend downloading \u003Ca href=\u0022http://unity3d.com/\u0022 rel=\u0022external nofollow\u0022\u003EUnity\u003C/a\u003E because it includes a custom version of Monodevelop (programming software) with Unity syntax and debug capability built in. I hate having to program without syntax assistance... :/\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks! You just made my day. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI was looking with some trepidation at the annoying task of installing .Net, GTK for .Net, and MonoDevelop. You just clued me in that since I\u0027ve installed Unity, I already have it. There it is, right in the Start menu!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-13T22:38:26Z\u0022 title=\u002205/13/2013 10:38  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 13, 2013\u003C/time\u003E by nyrath\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-14T17:55:29Z","Content":"\n\u003Cp\u003EAwesome! So, I\u0027ve started coding this in Unity using the Monodevelop software, and it\u0027s a pretty awesome tool! Now, the problem is...I\u0027m trying to get it to display a console window with the results of the function that I\u0027ve coded and it\u0027s not showing me any output. There are no errors, warnings only because I\u0027ve specified some initial values that haven\u0027t been used yet, and no window showing me the output I\u0027m telling it to print to the screen. I would like to see that the output matches what I\u0027ve coded, been looking through the unity stuff, but can\u0027t really find a clear cut \u0027put this in there and it\u0027ll print to the screen!\u0027. I\u0027m learning this on the fly and as I go with my \u0027intro to programming\u0027 class I\u0027m taking right now...appreciate the patience!\u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-14T22:05:29Z","Content":"\n\u003Cp\u003EIf you want to print something to the log, use\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint (\u0022text here\u0022\u002BvariableYouWantToPrint\u002B\u0022any other text\u0022);\u003C/pre\u003E\u003Cp\u003E It\u0027ll print every frame so your log may get full, but you can use some boolean logic to limit the printing.\u003C/p\u003E\u003Cp\u003EI can work on the GUI, so if you can get the math working then that should be it. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I\u0027ll send you the GUI code once it\u0027s finished so you can add it into the main class.\u003C/p\u003E\u003Cp\u003EI let Mek know (not too late I hope) so he might be working on some models.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEdit:\u003C/strong\u003E I\u0027d also take a look at the floatCurve class (which is what KSP uses for atmosphere-based ISP) and use that to determine the settings (high ISP, low thrust or low ISP, high thrust)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPField]public floatCurve isp;\u003Cbr\u003E[KSPField] public floatCurve thrust; //or whatever you want to name the variables\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand then \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/*engine component, found using GetComponent*/.maxThrust = thrust.Evaluate(/*GUI slider variable here*/);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand the same thing for ISP.\u003C/p\u003E\u003Cp\u003EIn the config files those will be\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE {\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E[INDENT]name = VSAMIR //or whatever you named the class in Monodevelop\u003Cbr\u003Eisp\u003Cbr\u003E{\u003Cbr\u003Ekey = 0 600 //high ISP setting\u003Cbr\u003Ekey = 1 250 //low ISP setting\u003Cbr\u003E}\u003Cbr\u003Ethrust\u003Cbr\u003E{\u003Cbr\u003Ekey = 0 25 //low thrust setting\u003Cbr\u003Ekey = 1 250 //high thrust setting\u003Cbr\u003E}[/INDENT]\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-14T22:19:02Z\u0022 title=\u002205/14/2013 10:19  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 14, 2013\u003C/time\u003E by OrbitusII\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-15T02:46:56Z","Content":"\n\u003Cp\u003ERock on! Okay, I\u0027ll work on finishing up the code tonight and then post it for you here. I\u0027ll have to dig around to find the log as well to make sure all the math is functioning right. I\u0027ve got it working in the C\u002B\u002B code, but I really ant to visually see it in the C# code to make sure I didn\u0027t mess anything up. Bear in mind this is going to be the first real program I\u0027ve written, so...it\u0027ll probably be woefully inefficient, but it\u0027ll pump out all the data needed, so...that\u0027s the bonus, right? Heheh...\u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\u003Cp\u003EAlso, I\u0027ve done zero modeling so far, as I\u0027ve really been interested in the code side of the house, so let\u0027s just have Mek do the modeling. If he wants I can help, but I\u0027m having fun tinkering right now with code...a lot of fun, probably more than I should be.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-15T02:52:10Z\u0022 title=\u002205/15/2013 02:52  AM\u0022 data-short=\u002211 yr\u0022\u003EMay 15, 2013\u003C/time\u003E by BradMick\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-15T14:21:21Z","Content":"\n\u003Cp\u003ESounds good, he already had something in the works so it should simplify things a little \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"SunJumper","CreatedById":27062,"CreatedDateTime":"2013-05-15T14:23:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BradMick\u0022 data-cite=\u0022BradMick\u0022\u003E\u003Cdiv\u003EHowdy all!\u003Cp\u003EFirst post. Been a long time support of KSP and am now finally getting into playing around with config files and the like. I\u0027m trying to work out how to translate the numbers I\u0027ve run for a VASIMR style engine into the config file. Here is what i\u0027m working with:\u003C/p\u003E\u003Cp\u003EFirst I started by deciding the size of my powerplants radiator. For this system I went with a 200m2 radiator. Using this formula:\u003C/p\u003E\u003Cp\u003ERadiator Area * (Emissivity * Boltzman Constant * Temperature^4) = 200 * (0.95*(5.670373*0.00000001)*1173.15^4 = 20,407,011.47 watts OR 20.41 MW.\u003C/p\u003E\u003Cp\u003EI then divided this by 4. Why 4 you ask? Because through research (that was pointed out by Ken Burnside of Attack Vector: Tactical fame) \u003Cstrong\u003EI understand that for every watt of useful power, there\u0027s 4 watts of waste heat. T\u003C/strong\u003Ehis gives me 5.10 MW of useable output.\u003C/p\u003E\u003Cp\u003EFurther research into VASIMR has it sitting around 60% efficient right now, so taking 60% of 5.10 MW, I\u0027ve now got 3.06 MW going to my actual thruster.\u003C/p\u003E\u003Cp\u003EI set my ISP values for Low to 400 sec, medium 2550 sec and high to 5500 sec. \u003C/p\u003E\u003Cp\u003ERunning the numbers based on the power going into the thrust beam using:\u003C/p\u003E\u003Cp\u003E(2 * Thrust Power ) / (Isp * 9.81)\u003C/p\u003E\u003Cp\u003EI came up with thrust for Low to be 1.56 kN, medium 0.24 kN and high to be 0.11 kN\u003C/p\u003E\u003Cp\u003ETotal waste heat is going to be 17.35 MW ((20.41-5.10) \u002B (5.10-3.06))\u003C/p\u003E\u003Cp\u003EWhich is more than covered by the system as it\u0027s designed right now...So, sorry for the long winded post, but yeah..there is my dilemma. \u003C/p\u003E\u003Cp\u003EAs I understand it right now, in the config file I can specify Max Thrust, Minimum Thrust, Heat Production, and fuel consumption. What I can figure out is how I get the variable parts in there within the ranges I\u0027ve specified. I\u0027m sure to there are lots of mistakes in my assumptions, and there\u0027s a lot of debate as to whether or not VASIMR is viable anyway, but it\u0027d be neat to simulate all of this and see hhow it might work in real time. The reactor is assumed to be a nuclear fission reactor. Also, I am assuming a lot of research shrunk the reactors down to manageable sizes, but even assuming 500 kilograms per megawatt, this reactor at 20.41 MW output is 10,200kg! But, anyway...Hopefully some of the brains out there that have been doing this for a minute can help me along!\u003C/p\u003E\u003Cp\u003EThanks in advance!\u003C/p\u003E\u003Cp\u003EV/R\u003C/p\u003E\u003Cp\u003EBrad McKinstrys\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf the usable energy:waste heat ratio is 1:4, you\u0027ll have to divide by five, not four.\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-15T14:48:30Z","Content":"\n\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//GUI stuff\u003Cbr\u003Eprivate float setting;\u003Cbr\u003Eprivate Rect _windowPos = new Rect();\u003Cbr\u003E// Use this for initialization\u003Cbr\u003Epublic override void OnStart ()\u003Cbr\u003E{\u003Cbr\u003E        //cut or copy and paste this into the OnStart function\u003Cbr\u003E\tRenderingManager.AddToPostDrawQueue(0, OnDraw);\u003Cbr\u003E}\u003Cbr\u003E//OnDraw and OnWindow are new, needed functions, so copy and paste the whole thing for both\u003Cbr\u003Eprivate void OnDraw ()\u003Cbr\u003E{\u003Cbr\u003E\tif(this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E\t{\u003Cbr\u003E\t\t_windowPos = GUILayout.Window(78, _windowPos, OnWindow, \u0022VSAMIR Manager\u0022); \u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003Eprivate void OnWindow(int WindowID)\u003Cbr\u003E{\u003Cbr\u003E\tGUILayout.BeginHorizontal(GUILayout.Width(350f));\u003Cbr\u003E\tGUILayout.Label(\u0022High ISP... ...Balance... ...High Thrust\u0022);\u003Cbr\u003E\tGUILayout.HorizontalSlider(setting, 0, 1);\u003Cbr\u003E\tGUILayout.EndHorizontal();\u003Cbr\u003E\tGUILayout.DragWindow();\u003Cbr\u003E}\u003Cbr\u003E//in public override void OnUpdate()\u003Cbr\u003E//use \u0022\u0026lt;the name of your floatCurve variable\u0026gt;.Evaluate(setting);\u0022\u003Cbr\u003E//to get the value from the floatCurve and assign it\u003Cbr\u003E//to the engine component\u0027s corresponding variable.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"nyrath","CreatedById":61886,"CreatedDateTime":"2013-05-15T16:44:25Z","Content":"\n\u003Cp\u003EThanks OrbitusII! That will come in handy\u003C/p\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-15T20:23:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003E\u003Cbr\u003Enamespace cSharpHelloWorld\u003Cbr\u003E{\u003Cbr\u003E    class Program\u003Cbr\u003E    {\u003Cbr\u003E        static double radiatorWasteHeatCapacity(double radiatorArea, double radiatorEmissivity, double boltzmanConstant, double radiatorTemp)\u003Cbr\u003E        {\u003Cbr\u003E            double maxReactorOutput = radiatorArea * (radiatorEmissivity * boltzmanConstant * Math.Pow(radiatorTemp, 4)) * 0.000001;\u003Cbr\u003E\u003Cbr\u003E            return maxReactorOutput;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double reactorOutput(double maxReactorOutput, double wasteHeatFraction)\u003Cbr\u003E        {\u003Cbr\u003E            double useableReactorPower = maxReactorOutput * (1 - wasteHeatFraction);\u003Cbr\u003E\u003Cbr\u003E            return useableReactorPower;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double thrusterOutputPower(double useableReactorPower, double thrusterEfficiency)\u003Cbr\u003E        {\u003Cbr\u003E            double thrusterPower = useableReactorPower * thrusterEfficiency;\u003Cbr\u003E\u003Cbr\u003E            return thrusterPower;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double wasteHeat(double maxReactorOutput, double useableReactorPower, double thrusterPower)\u003Cbr\u003E        {\u003Cbr\u003E            double systemWasteHeat = (maxReactorOutput - useableReactorPower) \u002B (useableReactorPower - thrusterPower);\u003Cbr\u003E\u003Cbr\u003E            return systemWasteHeat;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static void Main()\u003Cbr\u003E        {\u003Cbr\u003E            double minimumIsp = 400; //Isp in seconds\u003Cbr\u003E            double maximumIsp = 5500; //Isp in seconds\u003Cbr\u003E            double currentIsp = 400; //the thrusters current set Isp \u0026lt;-- needs to be driven by a slider\u003Cbr\u003E\u003Cbr\u003E            double radiatorArea = 200; //the systems radiator area in square meters\u003Cbr\u003E            double radiatorTemp = 1173.15; //radiator temperature in Kelvin (celsius \u002B 273.15)\u003Cbr\u003E            double radiatorEmissivity = 0.95; //the radiators emissivity, dimensionless. For carbon ~0.95\u003Cbr\u003E            double boltzmanConstant = 5.670373 * 0.00000001; //the boltzman constant!\u003Cbr\u003E            double wasteHeatFraction = 0.75; //this is the percentage of the output that is waste heat\u003Cbr\u003E            double thrusterEfficiency = 0.60; //for a Plasma Thruster (VASIMR) currently at about 0.60            \u003Cbr\u003E\u003Cbr\u003E            double maxReactorOutput = radiatorWasteHeatCapacity(radiatorArea, radiatorEmissivity, boltzmanConstant, radiatorTemp); //determined through a function!\u003Cbr\u003E            double useableReactorPower = reactorOutput(maxReactorOutput, wasteHeatFraction); //this is the actual useable power from the reactor after subtracting out waste heat. For a Fission reactor, around 0.75 is the waste heat, and for a Fusion Reactor around 0.05 to 0.25\u003Cbr\u003E            double thrusterPower = thrusterOutputPower(useableReactorPower, thrusterEfficiency); //the amount of power available in the thrust beam\u003Cbr\u003E            double systemWasteHeat = wasteHeat(maxReactorOutput, useableReactorPower, thrusterPower); //the systems (reactor \u002B thruster(s)) total waste heat output\u003Cbr\u003E            double thrust; //the thrusters current level of thrust in kilonewtons (kN)\u003Cbr\u003E            double mDot; //the thrusters mass mDot (propellant mass flow rate) in kg/s\u003Cbr\u003E\u003Cbr\u003E            Console.WriteLine(\u0022{0} {1} {2} {3} {4} {5}\u0022, \u0022Radiator Area: \u0022, radiatorArea, \u0022Radiator Temp: \u0022, radiatorTemp, \u0022Radiator Emissivity: \u0022, radiatorEmissivity);\u003Cbr\u003E            Console.WriteLine(\u0022{0} {1} {2}\u0022, \u0022Maximum Reactor Output:\u0022, maxReactorOutput, \u0022 MW\u0022);\u003Cbr\u003E            Console.WriteLine(\u0022{0} {1} {2}\u0022, \u0022Useable Reactor Power: \u0022, useableReactorPower, \u0022 MW\u0022);\u003Cbr\u003E            Console.WriteLine(\u0022{0} {1} {2}\u0022, \u0022Thruster Output Power: \u0022, thrusterPower, \u0022 MW\u0022);\u003Cbr\u003E            Console.WriteLine(\u0022{0} {1} {2}\u0022, \u0022Total Waste Heat: \u0022, systemWasteHeat, \u0022 MW\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            Console.WriteLine(\u0022Press any key to exit.\u0022);\u003Cbr\u003E            Console.ReadKey();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHere\u0027s what I accomplished today...which isn\u0027t as much as I wanted. I\u0027ve put this all together in visual studio just so I could actually wet my teeth on the actual syntax and flow of C# (it\u0027s enough different from C\u002B\u002B, and my knowledge there is ridiculously rudimentary at this point) that it was a little bit of an uphill fight, but I at least got the functions working. I\u0027ll work on it some more tomorrow, but I wanted to at least show some progress on this. Basically I just have to finish up the parts that will get integrated into the slider, which that looks like it\u0027ll be fun to do for sure. Anyway, any hints/tips/tricks/etc. would be awesome! I\u0027m learning as I go here and enjoying every minute of it. \u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-15T21:05:26Z","Content":"\n\u003Cp\u003ENice, I haven\u0027t done anything with C\u002B\u002B personally but it looks like the syntax is fairly similar, although once you put the math and everything in you will have to define your class as a partModule (which is just \u0022public class className: PartModule\u0022)\u003C/p\u003E\n"},{"CreatedByName":"BradMick","CreatedById":66019,"CreatedDateTime":"2013-05-18T06:10:14Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003E\u003Cbr\u003Epublic class plasmaThruster : MonoBehaviour \u003Cbr\u003E{\u003Cbr\u003E\tstatic double radiatorWasteHeatCapacity(double radiatorArea, double radiatorEmissivity, double boltzmanConstant, float radiatorTemp)\u003Cbr\u003E        {\u003Cbr\u003E            double maxReactorOutput = radiatorArea * (radiatorEmissivity * boltzmanConstant * Mathf.Pow(radiatorTemp, 4)) * 0.000001;\u003Cbr\u003E\u003Cbr\u003E            return maxReactorOutput;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double reactorOutput(double maxReactorOutput, double wasteHeatFraction)\u003Cbr\u003E        {\u003Cbr\u003E            double useableReactorPower = maxReactorOutput * (1 - wasteHeatFraction);\u003Cbr\u003E\u003Cbr\u003E            return useableReactorPower;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double thrusterOutputPower(double useableReactorPower, double thrusterEfficiency)\u003Cbr\u003E        {\u003Cbr\u003E            double thrusterPower = useableReactorPower * thrusterEfficiency;\u003Cbr\u003E\u003Cbr\u003E            return thrusterPower;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double wasteHeat(double maxReactorOutput, double useableReactorPower, double thrusterPower)\u003Cbr\u003E        {\u003Cbr\u003E            double systemWasteHeat = (maxReactorOutput - useableReactorPower) \u002B (useableReactorPower - thrusterPower);\u003Cbr\u003E\u003Cbr\u003E            return systemWasteHeat;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double thrustOutput(double thrusterPower, double currentIsp)\u003Cbr\u003E        {\u003Cbr\u003E            double thrust = ((2 * (thrusterPower / 0.000001)) / (currentIsp * 9.81)) * 0.001;\u003Cbr\u003E\u003Cbr\u003E            return thrust;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        static double thrusterPropellantFlow(double thrust, double currentIsp)\u003Cbr\u003E        {\u003Cbr\u003E            double mDot = (thrust / 0.001) / (currentIsp * 9.81);\u003Cbr\u003E\u003Cbr\u003E            return mDot;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        static void Main()\u003Cbr\u003E        {\u003Cbr\u003E            //double minimumIsp = 400; //Isp in seconds\u003Cbr\u003E            //double maximumIsp = 5500; //Isp in seconds\u003Cbr\u003E            double currentIsp = 400; //the thrusters current set Isp \u0026lt;-- needs to be driven by a slider\u003Cbr\u003E\u003Cbr\u003E            double radiatorArea = 200; //the systems radiator area in square meters\u003Cbr\u003E            float radiatorTemp = 1173.15f; //radiator temperature in Kelvin (celsius \u002B 273.15)\u003Cbr\u003E            double radiatorEmissivity = 0.95; //the radiators emissivity, dimensionless. For carbon ~0.95\u003Cbr\u003E            double boltzmanConstant = 5.670373 * 0.00000001; //the boltzman constant!\u003Cbr\u003E            double wasteHeatFraction = 0.75; //this is the percentage of the output that is waste heat\u003Cbr\u003E            double thrusterEfficiency = 0.60; //for a Plasma Thruster (VASIMR) currently at about 0.60            \u003Cbr\u003E\u003Cbr\u003E            double maxReactorOutput = radiatorWasteHeatCapacity(radiatorArea, radiatorEmissivity, boltzmanConstant, radiatorTemp); //determined through a function!\u003Cbr\u003E            double useableReactorPower = reactorOutput(maxReactorOutput, wasteHeatFraction); //this is the actual useable power from the reactor after subtracting out waste heat. For a Fission reactor, around 0.75 is the waste heat, and for a Fusion Reactor around 0.05 to 0.25\u003Cbr\u003E            double thrusterPower = thrusterOutputPower(useableReactorPower, thrusterEfficiency); //the amount of power available in the thrust beam\u003Cbr\u003E            double systemWasteHeat = wasteHeat(maxReactorOutput, useableReactorPower, thrusterPower); //the systems (reactor \u002B thruster(s)) total waste heat output\u003Cbr\u003E            double thrust = thrustOutput(thrusterPower, currentIsp); //the thrusters current level of thrust in kilonewtons (kN)\u003Cbr\u003E            double mDot = thrusterPropellantFlow(thrust, currentIsp); //the thrusters mass mDot (propellant mass flow rate) in kg/s\u003Cbr\u003E\t}\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo, here\u0027s the completed set of functions for the thruster. I\u0027m starting to play with figuring out how to put this all together with the GUI stuff, but I\u0027m not really 100% with what goes where inside of the GUI code. Essentially the slider needs drive currentIsp. A small function needs to be written to make sure that currentIsp cannot go higher than maximumIsp and minimumIsp. Really, it\u0027d be something like: (maximumIsp - minimumIsp) / 100 = slider setting, then currentSliderSetting * sliderSetting = currentIsp. Just spit-balling that off the top of my head. Well, except that 0 on the slider would equal 400 and 100 would equal 5500. So, that logic needs to be built in there too. So, really it\u0027d be if currentSliderSetting = 0, set to minimumIsp, and then minimumIsp \u002B (sliderSetting * currentSliderSetting) = currentIsp. So that way it\u0027s not going lower than the minimum and and then just adds the sliderSetting to the minimumIsp value. The neat thing, after playing with it in Excel, is that no logic check for exceeding the maximum is required, because at 100% it\u0027ll total up to 5500 for the Isp. \u003C/p\u003E\u003Cp\u003EAnyway, gonna keep plugging away, but the integration may need to be bounced into your court now. \u003C/p\u003E\u003Cp\u003EBrad\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-18T15:22:13Z","Content":"\n\u003Cp\u003EThe good thing about floatCurves is that once they\u0027re defined all you need to do is give them values in the config file and evaluate the current value based on input from a float.\u003C/p\u003E\u003Cp\u003EIf you look at my post on the previous page with the floatCurve information this\u0027ll make sense\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153 all you need to do is define the time and value for each key in the floatCurve through the config file, then floatCurveName.Evaluate will take the time you put in and return the value for that time. It\u0027s your standard algebraic function and it helps minimize the amount of code in use, plus the code I posted above will automatically constrain the ISP and thrust values to whatever you set the min and max to.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//in config file:\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E     name = ModuleName\u003Cbr\u003E     isp\u003Cbr\u003E     {\u003Cbr\u003E     key = 0 400\u003Cbr\u003E     key = 1 5500\u003Cbr\u003E     }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003EYou can use math to figure out what the thrust will be based off of the ISP value, but using floatCurves will simplify the code and your job immensely.\u003C/p\u003E\u003Cp\u003EI\u0027d also use floats, not doubles. Sure, you can switch between the two, but using a consistent type to begin with will also simplify the code. Floats may have floating-point number errors, but they are used the most in KSP and plugin code. Your class also needs to be either a non-derived class or derived from PartModule depending on the purpose of this bit of code.\u003C/p\u003E\n"}]}