{"TopicId":59040,"ForumId":36,"TopicTitle":"[WIP] Jebnix - A kOS Alternative","CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:35:42Z","PageNum":6,"Articles":[{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-10T20:51:12Z","Content":"\n\u003Cp\u003EI suppose that\u0027s true. I may put it in anyway and let people decide whether or not they want to use it. The implementation of a DO... WHILE loop is almost identical to that of a WHILE loop, so it\u0027s something I could whip up and test in only a few minutes.\u003C/p\u003E\u003Cp\u003EI\u0027ve had a thought about FOR loops. It could be done similar to how it is done in Visual Basic:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x from 0 to 5 step 1\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor [control variable] from [start] to [end] [opt:step [count]]\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EUsing the STEP keyword is optional. Without it, the value is stepped by 1 or -1, depending upon whether the end value is larger than the start.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-10T23:50:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EI am not sure what direction you want to take kOS, but looking at it from the point of wanting to develop a compact and easy language I might not bother with \u003Cem\u003Edo... loops\u003C/em\u003E at all. People can substitute it with barely any code themselves.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOn a second thought, I won\u0027t bother adding DO...WHILE. Not yet, anyway.\u003C/p\u003E\n"},{"CreatedByName":"John FX","CreatedById":59415,"CreatedDateTime":"2014-03-11T12:05:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EOn a second thought, I won\u0027t bother adding DO...WHILE. Not yet, anyway.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe functionality is so close to while...do{} that I\u0060d not bother either until well after first release.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-11T13:53:23Z","Content":"\n\u003Cp\u003EIf you\u0027re going to make a different version of the kosscript language from what\u0027s in erendrake\u0027s version, it\u0027s probably a good idea to pick a naming convention for the fork of the language you\u0027re making. Just so people writing scripts can say things like \u0022this program is written in jebscript not kosscript\u0022 (or whatever ends up being the names).\u003C/p\u003E\u003Cp\u003EBasically there\u0027s a long tradition of being able to divorce the naming of the language variant from the naming of one particular program that implements it, so that if you change a language a lot in your implementation it\u0027s a good idea to give it a different name so you don\u0027t have to refer to it as \u0022the version of the language that that program does instead of the version that this program does.\u0022\u003C/p\u003E\n"},{"CreatedByName":"jxi24","CreatedById":102030,"CreatedDateTime":"2014-03-11T13:58:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EI suppose that\u0027s true. I may put it in anyway and let people decide whether or not they want to use it. The implementation of a DO... WHILE loop is almost identical to that of a WHILE loop, so it\u0027s something I could whip up and test in only a few minutes.\u003Cp\u003EI\u0027ve had a thought about FOR loops. It could be done similar to how it is done in Visual Basic:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x from 0 to 5 step 1\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor [control variable] from [start] to [end] [opt:step [count]]\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat about using syntax similar to Python?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x in range(0,5,1):\u003Cbr\u003E\u003Cbr\u003Efor [control variable] in range([start],[end],(opt:step [count]))\u003Cbr\u003E\u003Cbr\u003Efor x in list:\u003Cbr\u003E\u003Cbr\u003Efor [control variable] in [array]:\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI have always found the syntax of Python to be one of the easiest to understand what a given command does.\u003C/p\u003E\n"},{"CreatedByName":"drtedastro","CreatedById":70911,"CreatedDateTime":"2014-03-11T15:03:41Z","Content":"\n\u003Cp\u003Efor x from 0 to 5 step 1, is pretty darn easy....\u003C/p\u003E\u003Cp\u003Eseems to be pretty much based on what people are used to, learned first or have stuck with.....\u003C/p\u003E\u003Cp\u003Echeers.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-11T19:33:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jxi24\u0022 data-cite=\u0022jxi24\u0022\u003E\u003Cdiv\u003EWhat about using syntax similar to Python?\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x in range(0,5,1):\u003Cbr\u003E\u003Cbr\u003Efor [control variable] in range([start],[end],(opt:step [count]))\u003Cbr\u003E\u003Cbr\u003Efor x in list:\u003Cbr\u003E\u003Cbr\u003Efor [control variable] in [array]:\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI have always found the syntax of Python to be one of the easiest to understand what a given command does.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s a really good idea. I might do that, thanks!\u003C/p\u003E\u003Cp\u003EIt will depend on how easy it is to code in relation to the VB-based idea, and whether it fits well within the existing syntax of the language. But I will look into it.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-11T19:35:49Z\u0022 title=\u002203/11/2014 07:35  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 11, 2014\u003C/time\u003E by woodywood245\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-11T19:34:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIf you\u0027re going to make a different version of the kosscript language from what\u0027s in erendrake\u0027s version, it\u0027s probably a good idea to pick a naming convention for the fork of the language you\u0027re making. Just so people writing scripts can say things like \u0022this program is written in jebscript not kosscript\u0022 (or whatever ends up being the names).\u003Cp\u003EBasically there\u0027s a long tradition of being able to divorce the naming of the language variant from the naming of one particular program that implements it, so that if you change a language a lot in your implementation it\u0027s a good idea to give it a different name so you don\u0027t have to refer to it as \u0022the version of the language that that program does instead of the version that this program does.\u0022\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m calling my version of the language KerboScript\u002B\u002B.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-11T21:14:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EThat\u0027s a really good idea. I might do that, thanks!\u003Cp\u003EIt will depend on how easy it is to code in relation to the VB-based idea, and whether it fits well within the existing syntax of the language. But I will look into it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor maximum flexibility, I\u0027d prefer something akin to the C for loop, which is so versatile you can use it for everything.\u003C/p\u003E\u003Cp\u003EHere\u0027s the starting setup,\u003C/p\u003E\u003Cp\u003EHere\u0027s the boolean check between iterations.\u003C/p\u003E\u003Cp\u003EHere\u0027s the thing to increment each time.\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2014-03-11T22:38:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EIt could be done similar to how it is done in Visual Basic:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x from 0 to 5 step 1\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor [control variable] from [start] to [end] [opt:step [count]]\u003Cbr\u003E{\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI like the Basic approach. It is nice and... basic.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-12T17:14:18Z","Content":"\n\u003Cp\u003EGiven the opinions given, and the simplicity in syntax, I think I\u0027m going to go with a Visual Basic-like for-loop. It will be much easier to parse that way.\u003C/p\u003E\u003Cp\u003EThis is far easier to parse with my setup than anything else:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor [expression] from [expression] to [expression] [opt:step [expression]] { }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-12T21:00:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EGiven the opinions given, and the simplicity in syntax, I think I\u0027m going to go with a Visual Basic-like for-loop. It will be much easier to parse that way.\u003Cp\u003EThis is far easier to parse with my setup than anything else:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor [expression] from [expression] to [expression] [opt:step [expression]] { }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut the important question is when do the expressions get evaluated? Up front before the first loop iteration (making them effectively a static constant once the loop is executing), or again and again each loop iteration (making the expression capable of containing live dynamic logic in it).\u003C/p\u003E\u003Cp\u003EThat\u0027s a difference that is more than just syntactic sugar. If a for loop must have a fixed number of iterations before it starts, that actually affects the sorts of algorithms a for loop can be used for.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-12T21:05:08Z\u0022 title=\u002203/12/2014 09:05  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 12, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-12T21:32:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EBut the important question is when do the expressions get evaluated? Up front before the first loop iteration (making them effectively a static constant once the loop is executing), or again and again each loop iteration (making the expression capable of containing live dynamic logic in it).\u003Cp\u003EThat\u0027s a difference that is more than just syntactic sugar. If a for loop must have a fixed number of iterations before it starts, that actually affects the sorts of algorithms a for loop can be used for.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf labeling the expressions A, B, C, and D respectively, then...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor A from B to C step D \u003Cbr\u003E{ \u003Cbr\u003E   // your code here\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E... is functionally identical to...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset A to B.\u003Cbr\u003Ewhile A \u0026lt;= C\u003Cbr\u003E{\u003Cbr\u003E   // your code here\u003Cbr\u003E   set A to A \u002B D.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u0022SET x TO y.\u0022 requires that the expression x evaluate to a variable, whether it exists or not. The reason I say \u0022expression\u0022 is because \u0022a[b\u002Bc]\u0022 is a valid expression, representing a location in an array. Expression y must simply evaluate fully. Therefore, A must evaluate to a variable, while B, C, and D must simply fully evaluate to a value of some kind.\u003C/p\u003E\u003Cp\u003ESetting A to B is run only once, before the loop begins. Then, expression A \u0026lt;= B is evaluated. If it evaluates as TRUE, the loop executes. At the end of the loop, A is incremented/decremented according to D, if it exists. Otherwise, D is set to 1, the sign is inferred from B and C (via D = A - B \u0026gt;= 0 ? 1 : -1) and the increment/decrements happens accordingly. Then the loop starts back at the beginning, evaluating A \u0026gt;= C.\u003C/p\u003E\u003Cp\u003EI hope that makes sense and answers your question.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-13T03:48:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EIf labeling the expressions A, B, C, and D respectively, then...\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor A from B to C step D \u003Cbr\u003E{ \u003Cbr\u003E   // your code here\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E... is functionally identical to...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset A to B.\u003Cbr\u003Ewhile A \u0026lt;= C\u003Cbr\u003E{\u003Cbr\u003E   // your code here\u003Cbr\u003E   set A to A \u002B D.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u0022SET x TO y.\u0022 requires that the expression x evaluate to a variable, whether it exists or not. The reason I say \u0022expression\u0022 is because \u0022a[b\u002Bc]\u0022 is a valid expression, representing a location in an array. Expression y must simply evaluate fully. Therefore, A must evaluate to a variable, while B, C, and D must simply fully evaluate to a value of some kind.\u003C/p\u003E\u003Cp\u003ESetting A to B is run only once, before the loop begins. Then, expression A \u0026lt;= B is evaluated. If it evaluates as TRUE, the loop executes. At the end of the loop, A is incremented/decremented according to D, if it exists. Otherwise, D is set to 1, the sign is inferred from B and C (via D = A - B \u0026gt;= 0 ? 1 : -1) and the increment/decrements happens accordingly. Then the loop starts back at the beginning, evaluating A \u0026gt;= C.\u003C/p\u003E\u003Cp\u003EI hope that makes sense and answers your question.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot really. It doesn\u0027t clarify what this does:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset endp to 5.\u003Cbr\u003Eset incr to 1.\u003Cbr\u003EFOR A from 1 to endp STEP incr {\u003Cbr\u003E  print \u0022A is now \u0022 \u002B A.\u003Cbr\u003E  set endp to 40.\u003Cbr\u003E  set incr to A.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf the expressions in the for syntax evaluate up front once, then it does this:\u003C/p\u003E\u003Cp\u003EA is now 1\u003C/p\u003E\u003Cp\u003EA is now 2\u003C/p\u003E\u003Cp\u003EA is now 3\u003C/p\u003E\u003Cp\u003EA is now 4\u003C/p\u003E\u003Cp\u003EA is now 5\u003C/p\u003E\u003Cp\u003EIf they evaluate each time dynamically, then it does this:\u003C/p\u003E\u003Cp\u003EA is now 1\u003C/p\u003E\u003Cp\u003EA is now 2\u003C/p\u003E\u003Cp\u003EA is now 4\u003C/p\u003E\u003Cp\u003EA is now 8\u003C/p\u003E\u003Cp\u003EA is now 16\u003C/p\u003E\u003Cp\u003EA is now 32\u003C/p\u003E\u003Cp\u003EDoes changing the value of endp or incr inside the loop body do anything to the checks, or have those expressions already been evaluated into a final answer by then and only the final answer is remembered?\u003C/p\u003E\u003Cp\u003EThat was my question.\u003C/p\u003E\u003Cp\u003EAnother example of where the two approaches differ is what happens when you insert or delete from the very list that you are iterating over.\u003C/p\u003E\u003Cp\u003EIf you use a for loop to iterate from 1 to list:length, and the purpose of the loop is to insert some items into the list whenever an item is found that fits certain criteria, then when does the loop stop? If list:length was originally 10, but your loop added 2 items to the list as it goes, does it stop at the original value of 10 or does it re-evaluate the expression list:length each time so it stops at 12?\u003C/p\u003E\u003Cp\u003EThat\u0027s the meat of my question.\u003C/p\u003E\n"},{"CreatedByName":"drtedastro","CreatedById":70911,"CreatedDateTime":"2014-03-13T03:52:16Z","Content":"\n\u003Cp\u003ESo, is the \u0022\u002B\u0022 being looked at in a numerical operand case or as a string modifier, or \u0027both\u0027???\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-13T08:14:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003ENot really. It doesn\u0027t clarify what this does:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset endp to 5.\u003Cbr\u003Eset incr to 1.\u003Cbr\u003EFOR A from 1 to endp STEP incr {\u003Cbr\u003E  print \u0022A is now \u0022 \u002B A.\u003Cbr\u003E  set endp to 40.\u003Cbr\u003E  set incr to A.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf the expressions in the for syntax evaluate up front once, then it does this:\u003C/p\u003E\u003Cp\u003EA is now 1\u003C/p\u003E\u003Cp\u003EA is now 2\u003C/p\u003E\u003Cp\u003EA is now 3\u003C/p\u003E\u003Cp\u003EA is now 4\u003C/p\u003E\u003Cp\u003EA is now 5\u003C/p\u003E\u003Cp\u003EIf they evaluate each time dynamically, then it does this:\u003C/p\u003E\u003Cp\u003EA is now 1\u003C/p\u003E\u003Cp\u003EA is now 2\u003C/p\u003E\u003Cp\u003EA is now 4\u003C/p\u003E\u003Cp\u003EA is now 8\u003C/p\u003E\u003Cp\u003EA is now 16\u003C/p\u003E\u003Cp\u003EA is now 32\u003C/p\u003E\u003Cp\u003EDoes changing the value of endp or incr inside the loop body do anything to the checks, or have those expressions already been evaluated into a final answer by then and only the final answer is remembered?\u003C/p\u003E\u003Cp\u003EThat was my question.\u003C/p\u003E\u003Cp\u003EAnother example of where the two approaches differ is what happens when you insert or delete from the very list that you are iterating over.\u003C/p\u003E\u003Cp\u003EIf you use a for loop to iterate from 1 to list:length, and the purpose of the loop is to insert some items into the list whenever an item is found that fits certain criteria, then when does the loop stop? If list:length was originally 10, but your loop added 2 items to the list as it goes, does it stop at the original value of 10 or does it re-evaluate the expression list:length each time so it stops at 12?\u003C/p\u003E\u003Cp\u003EThat\u0027s the meat of my question.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGiven the code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset endp to 5.\u003Cbr\u003Eset incr to 1.\u003Cbr\u003EFOR A from 1 to endp STEP incr {\u003Cbr\u003E  print \u0022A is now \u0022 \u002B A.\u003Cbr\u003E  set endp to 40.\u003Cbr\u003E  set incr to A.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYour output would be:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EA is now 1.\u003Cbr\u003EA is now 2.\u003Cbr\u003EA is now 4.\u003Cbr\u003EA is now 8.\u003Cbr\u003EA is now 16.\u003Cbr\u003EA is now 32.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EA, endp, and incr are stored as variables just like any other variable. Each time through the loop, they are evaluated for that one time. The values that are provided at the beginning of the loop only matter for the first time through. They are not remembered, and the expressions are evaluated every time through.\u003C/p\u003E\u003Cp\u003ETherefore, if you start looping through an array of 10 elements, and add 10 more elements onto the end, but tell it not to stop until the end of the array is reached, then you will stop after 20 elements.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-13T08:30:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022drtedastro\u0022 data-cite=\u0022drtedastro\u0022\u003E\u003Cdiv\u003ESo, is the \u0022\u002B\u0022 being looked at in a numerical operand case or as a string modifier, or \u0027both\u0027???\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe \u002B operator is playing three rolls: as the addition operator, the string concatenation operator, and the unary \u0022positive\u0022 operator. Which it uses is determined by context. Most of the operators use a set of rules, where, in the case of A ~ B, where A and B are operands, and ~ is an operator, if A or B is a string, do one thing. If A or B is an integer, do something else. If A or B is a double, do a third thing. In any other case (like A and B are both strings), cast them to some predefined type and perform the correct operation:\u003C/p\u003E\u003Cp\u003EExample: the binary \u002B operator\u003C/p\u003E\u003Cp\u003EIf A is a string, or B is a string, convert A and B to strings and concatenate. Return a string.\u003C/p\u003E\u003Cp\u003EOtherwise... \u003C/p\u003E\u003Cp\u003EIf A is a double, or B is a double, convert A and B to doubles and add. Return a double.\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is an integer, or B is an integer, convert A and B to integers and add. Return an integer.\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is a boolean, or B is a boolean, convert A and B to integers, add them, and convert back to a boolean (non-zero is true, zero is false)\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is an ordered pair, or B is an ordered pair, convert A and B to ordered pairs and perform a element-wise addition. Return an ordered pair.\u003C/p\u003E\u003Cp\u003EExample: the binary - operator\u003C/p\u003E\u003Cp\u003EIf A is a double, or B is a double, convert A and B to doubles and subtract the B from the A. Return a double.\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is an integer, or B is an integer, convert A and B to integers and subtract the B from the A. Return an integer.\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is a boolean, or B is a boolean, convert A and B to integers, subtract B from A, and convert back to a boolean (non-zero is true, zero is false)\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EIf A is an ordered pair, or B is an ordered pair, convert A and B to ordered pairs and perform an element-wise subtraction. Return an ordered pair.\u003C/p\u003E\u003Cp\u003EOtherwise...\u003C/p\u003E\u003Cp\u003EConvert A and B to doubles, regardless of type, and subtract B from A. Return a double.\u003C/p\u003E\u003Cp\u003ESource code for these operations can be found here (this link takes you to the file and line number where operator overloads begin): \u003Ca href=\u0022https://github.com/griderd/Jebnix/blob/master/Jebnix/Types/Value.cs#L279\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix/blob/master/Jebnix/Types/Value.cs#L279\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThat\u0027s why there\u0027s a difference between \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u00222\u002B2=\u0022 \u002B (2 \u002B 2).\u003C/pre\u003E\u003Cp\u003E and \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u00222\u002B2=\u0022 \u002B 2 \u002B 2.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOperations are performed using order of operations, and left to right, just like most ordinary math. The first code results in \u00222\u002B2=4\u0022, while the second results in \u00222\u002B2=22\u0022. The first expression has the evaulator perform the operation in the parentheses first (integer addition), then the operation outside (string concatenation). The second expression has the evaluator perform the operations left to right, starting with a string concatenation, which results in a string, followed by another.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-13T08:38:11Z\u0022 title=\u002203/13/2014 08:38  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 13, 2014\u003C/time\u003E by woodywood245\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"drtedastro","CreatedById":70911,"CreatedDateTime":"2014-03-13T08:36:53Z","Content":"\n\u003Cp\u003EMost excellent. Thanks Woodywood245....\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-13T14:55:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EA, endp, and incr are stored as variables just like any other variable.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I knew that. But THIS:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eand the expressions are evaluated every time through.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIs what hadn\u0027t been specified until now. It\u0027s basically the difference between whether is is SETting the end condition to the expression or LOCKing the end condition to the expression. Now it\u0027s clear.\u003C/p\u003E\u003Cp\u003EAlthough it does bring up another question: does it check the sign of the increment again each time too? If someone did something utterly ridiculous and say started a loop going from A to B step C, in which A \u0026lt; B, and then partway through changed B to a small number such that A \u0026gt; B, would the loop know to reverse the direction of the increment C? Or is the direction of the increment only determined once up front and then it stays that way? You basically said that the programmer doesn\u0027t need to specify the sign of C because the system automatically chooses whether to add or subtract C based on whether A \u0026lt;B or A \u0026gt; B. But is that decision re-evaluated each time as well as the expression C being re-evaluated?\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-13T18:47:23Z","Content":"\n\u003Cp\u003EIt never changes the expressions it\u0027s provided, and if no increment value is provided via STEP, the increment value is statically determined only once ahead of the loop, and then set as a constant literal.\u003C/p\u003E\u003Cp\u003EI\u0027ll put it this way: Jebnix stores the expression tokens it needs and pushes them as metadata onto the call stack at the top of the loop. Whenever the end of the loop is reached, the expressions are popped off the call stack, and evaluated to determine whether to continue the loop. The expressions never change from the original ones they\u0027re given, and the variables only change according to what they are told to do.\u003C/p\u003E\u003Cp\u003ELoops in Jebnix will operate EXACTLY the same as loops in C/C\u002B\u002B/Java/C#/Visual Basic, and pretty much any other language you would come across.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-13T21:15:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ELoops in Jebnix will operate EXACTLY the same as loops in C/C\u002B\u002B/Java/C#/Visual Basic, and pretty much any other language you would come across.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGiven what you said here that is false.\u003C/p\u003E\u003Cp\u003EBut at any rate it seems like it will be easy to work with and I can always resort to a more raw approach using an \u0022until\u0022 loop when I want to make the sorts of for loops that this structure doesn\u0027t support.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-13T23:00:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EGiven what you said here that is false.\u003Cp\u003EBut at any rate it seems like it will be easy to work with and I can always resort to a more raw approach using an \u0022until\u0022 loop when I want to make the sorts of for loops that this structure doesn\u0027t support.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe definition of a \u003Cem\u003Efor\u003C/em\u003E loop, according to \u003Ca href=\u0022http://en.cppreference.com/w/cpp/language/for\u0022 rel=\u0022external nofollow\u0022\u003Ecppreference.com\u003C/a\u003E: \u0022Executes \u003Cem\u003Einit-statement once\u003C/em\u003E, then executes \u003Cem\u003Estatement\u003C/em\u003E and \u003Cem\u003Eiteration_expression\u003C/em\u003E repeatedly, until the value of \u003Cem\u003Econdition\u003C/em\u003E becomes false. The test takes place before each iteration.\u0022\u003C/p\u003E\u003Cp\u003EC/C\u002B\u002B Syntax:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Efor ([I]init-statement[/I]; [I]condition[/I]; [I]iteration_expression[/I]) [I]statement[/I]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhich is equivalent to:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[I]init_statement[/I];\u003Cbr\u003Ewhile ([I]condition[/I]) {\u003Cbr\u003E     [I]statement[/I]\u003Cbr\u003E     [I]iteration_expression[/I];\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn Visual Basic.Net, according to \u003Ca href=\u0022http://msdn.microsoft.com/en-us/library/5z06z1kb(v=vs.110).aspx\u0022 rel=\u0022external nofollow\u0022\u003EMSDN\u003C/a\u003E:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EFor counter [ As datatype ] = start To end [ Step step ]\u003Cbr\u003E    [ statements ]\u003Cbr\u003E    [ Continue For ]\u003Cbr\u003E    [ statements ]\u003Cbr\u003E    [ Exit For ]\u003Cbr\u003E    [ statements ]\u003Cbr\u003ENext [ counter ]\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETechnical Implementation\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EWhen a For...Next loop starts, Visual Basic evaluates start, end, and step. Visual Basic evaluates these values only at this time and then assigns start to counter. Before the statement block runs, Visual Basic compares counter to end. If counter is already larger than the end value (or smaller if step is negative), the For loop ends and control passes to the statement that follows the Next statement. Otherwise, the statement block runs.\u003C/p\u003E\u003Cp\u003EEach time Visual Basic encounters the Next statement, it increments counter by step and returns to the For statement. Again it compares counter to end, and again it either runs the block or exits the loop, depending on the result. This process continues until counter passes end or an Exit For statement is encountered.\u003C/p\u003E\u003Cp\u003EThe loop doesn\u0027t stop until counter has passed end. If counter is equal to end, the loop continues. The comparison that determines whether to run the block is counter \u0026lt;= end if step is positive and counter \u0026gt;= end if step is negative.\u003C/p\u003E\u003Cp\u003EIf you change the value of counter while inside a loop, your code might be more difficult to read and debug. Changing the value of start, end, or step doesn\u0027t affect the iteration values that were determined when the loop was first entered.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStep Argument\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe value of step can be either positive or negative. This parameter determines loop processing according to the following table:\u003C/p\u003E\u003Cp\u003E[table=width: 500, class: grid]\u003C/p\u003E\u003Cp\u003E[tr]\u003C/p\u003E\u003Cp\u003E [td]\u003Cstrong\u003EStep value\u003C/strong\u003E[/td]\u003C/p\u003E\u003Cp\u003E [td]\u003Cstrong\u003ELoop executes if\u003C/strong\u003E[/td]\u003C/p\u003E\u003Cp\u003E[/tr]\u003C/p\u003E\u003Cp\u003E[tr]\u003C/p\u003E\u003Cp\u003E [td]Positive or zero[/td]\u003C/p\u003E\u003Cp\u003E [td]counter \u0026lt;= end[/td]\u003C/p\u003E\u003Cp\u003E[/tr]\u003C/p\u003E\u003Cp\u003E[tr]\u003C/p\u003E\u003Cp\u003E [td]Negative[/td]\u003C/p\u003E\u003Cp\u003E [td]counter \u0026gt;= end[/td]\u003C/p\u003E\u003Cp\u003E[/tr]\u003C/p\u003E\u003Cp\u003E[/table]\u003C/p\u003E\u003Cp\u003EThe default value of step is 1.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn KerboScript\u002B\u002B:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EIf labeling the expressions A, B, C, and D respectively, then...\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor A from B to C step D \u003Cbr\u003E{ \u003Cbr\u003E   // your code here\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E... is functionally identical to...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[B]set[/B] A to B.\u003Cbr\u003Ewhile A \u0026lt;= C\u003Cbr\u003E{\u003Cbr\u003E   // your code here\u003Cbr\u003E   set A to A \u002B D.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u0022SET x TO y.\u0022 requires that the expression x evaluate to a variable, whether it exists or not. The reason I say \u0022expression\u0022 is because \u0022a[b\u002Bc]\u0022 is a valid expression, representing a location in an array. Expression y must simply evaluate fully. Therefore, A must evaluate to a variable, while B, C, and D must simply fully evaluate to a value of some kind.\u003C/p\u003E\u003Cp\u003ESetting A to B is run only once, before the loop begins. Then, expression A \u0026lt;= B is evaluated. If it evaluates as TRUE, the loop executes. At the end of the loop, \u003Cstrong\u003EA is incremented/decremented according to D, if it exists. Otherwise, D is set to 1, the sign is inferred from B and C (via D = A - B \u0026gt;= 0 ? 1 : -1) and the increment/decrements happens accordingly\u003C/strong\u003E. Then the loop starts back at the beginning, evaluating A \u0026gt;= C.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf the value of D is not given, it is assigned once, ahead of the loop executing, based upon the values of B and C. By default it is set to 1, or -1. The ternary expression I gave is actually wrong, I meant it as \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ED = C - B \u0026gt;= 0 ? 1 : -1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x from 1 to 5 { }\u003Cbr\u003Efor y from 5 to 1 { }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs equivalent to:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor x from 1 to 5 step 1 { }\u003Cbr\u003Efor y from 5 to 1 step -1 { }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs equivalent to:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset x to 1.\u003Cbr\u003Ewhile x \u0026lt; 5\u003Cbr\u003E{\u003Cbr\u003E     set x to x \u002B 1.\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eset y to 5.\u003Cbr\u003Ewhile y \u0026gt; 5\u003Cbr\u003E{\u003Cbr\u003E     set y to y \u002B -1.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhile these....\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset a to 5.\u003Cbr\u003Efor x = 1 to a step 1\u003Cbr\u003E{\u003Cbr\u003E     if x \u0026gt; 3 \u003Cbr\u003E     { \u003Cbr\u003E          set x to 10.        // loop ends after this line\u003Cbr\u003E     } \u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E// this is an infinite loop\u003Cbr\u003Efor x = 1 to a step 1\u003Cbr\u003E{\u003Cbr\u003E     if x \u0026gt; 3 { set x to -5. }   \u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor x = 0 to a step 3\u003Cbr\u003E{\u003Cbr\u003E     if x \u0026gt; 2 { set a to 10. }\u003Cbr\u003E     print x.\u003Cbr\u003E}\u003Cbr\u003E// this loop prints:\u003Cbr\u003E// 0\u003Cbr\u003E// 3\u003Cbr\u003E// 6\u003Cbr\u003E// 9\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAre equivalent to, in C/C\u002B\u002B:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eint x, a = 5;\u003Cbr\u003Efor (x = 1; x \u0026lt; a; x\u002B\u002B)\u003Cbr\u003E{\u003Cbr\u003E     if (x \u0026gt; 3)\u003Cbr\u003E          x = 10;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor (x = 1; x \u0026lt; a; x\u002B\u002B)\u003Cbr\u003E{\u003Cbr\u003E     if (x \u0026gt; 3)\u003Cbr\u003E          x = -5;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efor (x = 0; x \u0026lt; a; x\u002B=3)\u003Cbr\u003E{\u003Cbr\u003E     if (x \u0026gt; 2)\u003Cbr\u003E          a = 10;\u003Cbr\u003E     printf(\u0022%i\\n\u0022, x);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"jxi24","CreatedById":102030,"CreatedDateTime":"2014-03-14T15:03:01Z","Content":"\n\u003Cp\u003EContinuing on the discussion of how loops will be implimented, will there be a break statement? I see there is a return function mentioned, but no break function mentioned in the first post.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-03-14T16:26:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jxi24\u0022 data-cite=\u0022jxi24\u0022\u003E\u003Cdiv\u003EContinuing on the discussion of how loops will be implimented, will there be a break statement? I see there is a return function mentioned, but no break function mentioned in the first post.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe break statement as well as the continue statement will be implemented.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-03-14T19:08:10Z","Content":"\n\u003Cp\u003EI assumed the cases where the C approach to for loops do a thing the visual basic approach does not were obvious and I didn\u0027t want to spend a whole post outlining them, but since they apparently weren\u0027t, I\u0027ll have to do that now.\u003C/p\u003E\u003Cp\u003EIn your proposed system, the loop MUST have exactly one counter variable, no more and no less. It MUST be a number or at least an object like an iterator for which the operators \u002B, -, \u0026lt;=, and \u0026gt;= are implemented. In a C\u002B\u002B for loop the initializer can be any statement you feel like and can even be omitted. If you\u0027d like to design a loop that tracks using a pointer, you can. If you\u0027d like to use a loop that tracks using a reference, you can.\u003C/p\u003E\u003Cp\u003EIn your proposed system, the ending condition MUST be of the form A \u0026lt;= expr or A \u0026gt;= expr, where A is the counter variable. In the C\u002B\u002B approach you can use any particular boolean expression you feel like, and it can contain any combination of ands and ors, and it doesn\u0027t have to be a numerical check where \u0022\u0026lt;=\u0022 and \u0022\u0026gt;=\u0022 make sense. You could, for example, test for whether or not nextNode == NULL when traversing a list or tree.\u0027\u003C/p\u003E\u003Cp\u003EIn your proposed system, the incrementer must be of the form A = A \u002B C, or A = A - C, where A is the loop counter and C is the step. Any other type of increment is not supported. You can\u0027t walk a tree for example by having an incrementer that says A = A.getNextNode().\u003C/p\u003E\u003Cp\u003EHere\u0027s a simple example of a thing that I don\u0027t think your proposed for loop supports that C, C\u002B\u002B, and Java do support:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Binary search on an already sorted array of strings for the index of the hit, or return -1 if no hit found:\u003Cbr\u003E// assume the following variables exist before starting:\u003Cbr\u003E// char needle[] = \u0022some string I\u0027m looking for\u0022;\u003Cbr\u003E// char *haystack[] is a sorted array of the strings being searched\u003Cbr\u003E// int haystackSize is the length of the haystack array.\u003Cbr\u003E// int min, max. middle, cmp;\u003Cbr\u003Efor( min=0, max=haystackSize ;\u003Cbr\u003E      min \u0026lt;= max || cmp != 0 ; \u003Cbr\u003E      (cmp\u0026lt;0 ? max = min \u002B middle : min = min \u002B middle) )\u003Cbr\u003E{\u003Cbr\u003E  middle = ((max-min)\u002B1) / 2;\u003Cbr\u003E  cmp = strcmp( needle, haystack[middle] );\u003Cbr\u003E}\u003Cbr\u003Eif( cmp == 0 ) {\u003Cbr\u003E  // hit was found at index \u0022middle\u0022.\u003Cbr\u003E} else {\u003Cbr\u003E  // hit was not found.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote: I haven\u0027t compiled and tested that. It\u0027s written from memory about how the basic algorithm works and it could include things like off-by-one errors and such. My goal was not to write perfectly debugged code but to show an example of how the for loop is truly open-ended and unrestricted in C/C\u002B\u002B/Java much more so than what you\u0027re proposing, precisely because it does *less* built-in logic and therefore doesn\u0027t dictate anything about how the loop is required to work.\u003C/p\u003E\u003Cp\u003EArguments have been made that this is a bad feature of those languages and it makes the FOR loop confusing. I\u0027m not trying to enter that argument. I don\u0027t agree with it, but I also don\u0027t care as much about it. What I do care about is that you made the claim that you can do all the same things with the FOR loop you\u0027re proposing that can be done in C/C\u002B\u002B/Java and that this claim shows a large misunderstanding of how the FOR loop works in those languages. In those languages, the FOR loop is nothing more than a way of re-writing a WHILE loop with some of the code moved from the body to the header, and as such it doesn\u0027t dictate anything about the actual algorithm.\u003C/p\u003E\u003Cp\u003EWhich is why I said that that I could cover the cases that your for loop doesn\u0027t cover, but C/C\u002B\u002B/Java for loops do cover, by using an UNTIL instead. an UNTIL is just a WHILE with an implied \u0022not\u0022 applied to the boolean check.\u003C/p\u003E\u003Cp\u003EIf you were going with the sort of FOR loop that exist in C/C\u002B\u002B/Java, than ANY code of the following format:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EstuffAAA.\u003Cbr\u003EUNTIL stuffBBB {\u003Cbr\u003E  stuffCCC.\u003Cbr\u003E  stuffDDD.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ECould be re-written as:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor( stuffAAA ;  not( stuffBBB ) ;  stuffDDD ) {\u003Cbr\u003E  stuffCCC.\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFor any arbitrary stuffAAA, stuffBBB, stuffCCC, and stuffDDD. Regardless of whether that stuff includes counting a variable up or down across a range of numbers.\u003C/p\u003E\n"}]}