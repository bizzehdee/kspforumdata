{"TopicId":82141,"ForumId":36,"TopicTitle":"[WIP] KSP Threading System: Multithreading Utility, Now with Pre-release for Modders!","CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-19T17:36:46Z","PageNum":1,"Articles":[{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-19T17:36:46Z","Content":"\n\u003Cp\u003EThis is a little project I started up after becoming frustrated at seeing KSP slow down even with CPU usage only at ~27%. The intent is to create a simple dependency that plugin authors can bundle (much like ModuleManager) that can be used to handle multithreading within KSP while maintaining sync with Unity\u0027s various functions (Update, LateUpdate and FixedUpdate). With this utility managing the worker threads, plugin authors don\u0027t need to worry about synchronizing-based issues and will only need to create thread-safe code in order to make good use of multithreading.\u003C/p\u003E\u003Cp\u003EFurther, due to the way it is implemented, it will allow plugin authors to start a task at the beginning of one of the Unity loops and end it at the very end of that loop; i.e. you can start a physics-related function at the beginning of FixedUpdate, let it run in another thread, and then it will sync up with the Unity thread at the end of FixedUpdate. Which means you don\u0027t have to stick to the main thread to keep things running in real-time as opposed to lagging by a frame.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/ferram4/KSPTS/releases/tag/v0.0.1-pre\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EDemonstration and Experimentation Pre-Release for Modders Only\u003C/span\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/ferram4/KSPTS\u0022 rel=\u0022external nofollow\u0022\u003ESource\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/ferram4/KSPTS/blob/master/LICENSE\u0022 rel=\u0022external nofollow\u0022\u003ELicense\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis is currently a work-in-progress and is certainly not ready for public release, given that it has not been heavily tested. However, the above version is available for any interested modders to try playing around with, and I certainly welcome feedback on this.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003EFunctions to register with KSPTS:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003Cbr\u003Eobject PreFunction()\u003Cbr\u003E{\u003Cbr\u003E //Do stuff that isn\u0027t necessarily thread-safe\u003Cbr\u003E //example: getting state for a PartModule that requires lots of Unity functions\u003Cbr\u003E return someObjectFromPre;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E//This is the stuff we want somewhere other than the main Unity thread\u003Cbr\u003Eobject ThreadedTask(object someObjectFromPre)\u003Cbr\u003E{\u003Cbr\u003E //Do stuff that is thread-safe in parallel with main KSP thread\u003Cbr\u003E //example: doing aerodynamic calculations on data passed through using someObjectFromPre\u003Cbr\u003E return threadedTaskOutputObject;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E//Runs after the threaded task is finished in main Unity thread; optional function used to do something with data\u003Cbr\u003Evoid PostFunction(object threadedTaskOutputObject)\u003Cbr\u003E{\u003Cbr\u003E //Do something that isn\u0027t necessarily thread-safe with the output of ThreadedTask\u003Cbr\u003E //example: taking results of aerodynamic calculations and applying forces to the relevant Part\u003Cbr\u003E}\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//Runs first in main Unity thread; optional function used to set up data for threaded task\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EA note: the pre- and post-functions are not strictly necessary, since data can be accessed across threads, but it makes things cleaner and provides a place to run not-thread-safe code that is necessary for interfacing with Unity / KSP.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/ferram4/KSPTS/blob/master/KSPTSDemo/KSPTSDemo.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EExample of how to use these sort of things\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EWith the current state of this in mind, are there any plugin authors who would be interested in using something like this / sees related features that they\u0027d like / thinks they have a better way of doing X, Y, or Z / thinks my naming scheme is bad and should change to something else?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-20T14:39:37Z\u0022 title=\u002208/20/2014 02:39  PM\u0022 data-short=\u00229 yr\u0022\u003EAugust 20, 2014\u003C/time\u003E by ferram4\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mrBlaQ","CreatedById":99871,"CreatedDateTime":"2014-08-19T17:39:12Z","Content":"\n\u003Cp\u003EOh man, I\u0027d love to see MechJeb using this. The DV read-out just chugs. Thanks for your contribution, Ferram4!\u003C/p\u003E\n"},{"CreatedByName":"KAO","CreatedById":30795,"CreatedDateTime":"2014-08-19T20:25:14Z","Content":"\n\u003Cp\u003EI hope this project will gain the momentum and attention it should receive! I\u0027ve been hoping for multi-threading since 0.15.2\u003C/p\u003E\n"},{"CreatedByName":"MK3424","CreatedById":19932,"CreatedDateTime":"2014-08-19T20:41:34Z","Content":"\n\u003Cp\u003EWOW! this really catches my eyes!\u003C/p\u003E\u003Cp\u003EI wonder if the devs ever heard of LOOM?\u003C/p\u003E\u003Cp\u003E(not the rubber bands ofcourse)\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://u3d.as/content/michiel-frankfort/loom-multi-threading-framework-v1-7/4fx\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://u3d.as/content/michiel-frankfort/loom-multi-threading-framework-v1-7/4fx\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Evideo example:\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/kM0Mubh0CWA?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-20T03:44:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mrBlaQ\u0022 data-cite=\u0022mrBlaQ\u0022\u003E\u003Cdiv\u003EOh man, I\u0027d love to see MechJeb using this. The DV read-out just chugs. Thanks for your contribution, Ferram4!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, another use for this! I\u0027ve noticed the dV readout being slow, and I suspect that it can be multi-threaded, but I think that getting the data to the thread might be a little bit complicated in that situation. Especially if it requires a large amount of operations that can\u0027t be multithreaded.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KAO\u0022 data-cite=\u0022KAO\u0022\u003E\u003Cdiv\u003EI hope this project will gain the momentum and attention it should receive! I\u0027ve been hoping for multi-threading since 0.15.2\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt won\u0027t be able to multithread the stock game, unfortunately, nor will it function without modders implementing code to make use of it. Multithreading is not magical. That said, hopefully it ends up as useful as I think it will be.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MK3424\u0022 data-cite=\u0022MK3424\u0022\u003E\u003Cdiv\u003EWOW! this really catches my eyes!\u003Cp\u003EI wonder if the devs ever heard of LOOM?\u003C/p\u003E\u003Cp\u003E(not the rubber bands ofcourse)\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://u3d.as/content/michiel-frankfort/loom-multi-threading-framework-v1-7/4fx\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://u3d.as/content/michiel-frankfort/loom-multi-threading-framework-v1-7/4fx\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Evideo example:\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/kM0Mubh0CWA?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELOOM seems surprisingly similar to what I\u0027m working on here, but it\u0027s quite a bit more general than this project. In any case, the same caveats that apply to LOOM apply here.\u003C/p\u003E\u003Cp\u003ESo an update on progress:\u003C/p\u003E\u003Cp\u003EI switched from having dedicated thread groups for each loop (Update, FixedUpdate, LateUpdate) to instead having a single thread pool with a group of prioritized queues of tasks leading into it. This should allow it to take less memory overhead for threads while allowing greater throughput, while also allowing me to change priority as necessary to keep thigns running smoothly, such as giving all unfinished Update() tasks get highest priority into the thread pool as Update() finishes up.\u003C/p\u003E\n"},{"CreatedByName":"Tinweasele","CreatedById":67627,"CreatedDateTime":"2014-08-20T13:51:22Z","Content":"\n\u003Cp\u003EScansat load and ORS resource detectors come to mind.\u003C/p\u003E\n"},{"CreatedByName":"Stevie_D","CreatedById":103007,"CreatedDateTime":"2014-08-20T13:58:46Z","Content":"\n\u003Cp\u003EThat\u0027s a stunning idea, Ferram. The only drawback to DLing all the mods a person wants at the moment is the insane amount of slowdown lagging up the game. To change that would be to enable the modding community to really have a sense of \u0022Have at it!\u0022 and not worry about concepts for our mods adding to other people\u0027s mods slowing everything down. Kudos! I REALLY hope you succeed with this, as a modder and more importantly as a KSP player. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-20T14:42:05Z","Content":"\n\u003Cp\u003ESo, while it\u0027s certainly not battle-tested enough to allow full redistribution rights, it is likely stable enough for modders to start poking around and seeing what they can do with it. To that end, I\u0027ve made a pre-release version available. I\u0027d be quite happy to hear what modders think of this where it currently stands.\u003C/p\u003E\u003Cp\u003EAs for users, don\u0027t bother downloading the plugin, it is not useful to you alone; it requires exploitation by a mod before it can provide any benefit.\u003C/p\u003E\n"},{"CreatedByName":"R0cketC0der","CreatedById":106748,"CreatedDateTime":"2014-08-20T15:21:47Z","Content":"\n\u003Cp\u003ENice project, I hope it gets implemented in many CPU-intensive mods. By the way I think you should clarify in the OP that this won\u0027t make any part of the stock game multithreaded and that it is purely meant as a resource for modders to enhance the performance of their mods, because I think some people might missunderstand it otherwise.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-20T15:27:16Z","Content":"\n\u003Cp\u003EIt mentions that it\u0027s for plugin authors, and the entire OP focuses on how it allows plugin authors to do X, Y, and Z; if it was capable of rewriting code like that, I logically wouldn\u0027t need to mention to plugin authors anything.\u003C/p\u003E\u003Cp\u003EI\u0027m not concerned about that kind of misunderstanding, since it basically falls under, \u0022didn\u0027t read the OP at all.\u0022\u003C/p\u003E\n"},{"CreatedByName":"Padishar","CreatedById":97386,"CreatedDateTime":"2014-08-20T15:55:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mrBlaQ\u0022 data-cite=\u0022mrBlaQ\u0022\u003E\u003Cdiv\u003EOh man, I\u0027d love to see MechJeb using this. The DV read-out just chugs. Thanks for your contribution, Ferram4!\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003EAh, another use for this! I\u0027ve noticed the dV readout being slow, and I suspect that it can be multi-threaded, but I think that getting the data to the thread might be a little bit complicated in that situation. Especially if it requires a large amount of operations that can\u0027t be multithreaded.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKER runs the deltaV simulation in a background thread (using ThreadPool.QueueUserWorkItem). Getting the data basically involves creating a copy of the part tree with all the data that may be needed by the simulation. This is done in the main thread during an Update call (if a simulation run has been requested in the UI handling function) and then the work item is queued. Once the work item completes it signals that the output data is available and the main thread reads the data (again in the Update call). I have a very rough library version of this \u0022background operation\u0022 mechanism separated out but I\u0027ve not touched it for months and it\u0027s quite a way from being publishable.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003EI switched from having dedicated thread groups for each loop (Update, FixedUpdate, LateUpdate) to instead having a single thread pool with a group of prioritized queues of tasks leading into it. This should allow it to take less memory overhead for threads while allowing greater throughput, while also allowing me to change priority as necessary to keep thigns running smoothly, such as giving all unfinished Update() tasks get highest priority into the thread pool as Update() finishes up.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI can certainly see the attraction of this sort of system for the sort of use you (presumably) intend it for. Firing off an aero calculation for each part during Update and then waiting for them all to have finished during LateUpdate (or possibly at the end of the Update loop as you describe) sounds ideal for FAR though is probably less useful for KER (or MJ) as the calculations can take significantly longer than a frame (sometimes many frames) and it isn\u0027t obvious how to parallelise the implementation of the simulation code. Have you integrated this into FAR yet?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003ESo, while it\u0027s certainly not battle-tested enough to allow full redistribution rights, it is likely stable enough for modders to start poking around and seeing what they can do with it. To that end, I\u0027ve made a pre-release version available. I\u0027d be quite happy to hear what modders think of this where it currently stands.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, it sounds interesting and I\u0027ll definitely take a look due to a general interest in multithreading. The most awkward thing when doing multithreaded stuff in KSP/Unity is that you have to limit your interaction with KSP/Unity objects to the main thread or you risk all kinds of horrible bugs/crashes when things change underneath you. The PrepareSimulation code in KER is what does the building of the private data structures and it needs to access lots of core game objects; Parts, AttachNodes, PartModules (engines) etc. though it may be possible to get some of this off the main thread (and maybe split it across multiple cores) by careful splitting of it into smaller tasks that can be run in the background. This could potentially move quite a bit of the PrepareSimulation processing off the main thread though the extra overhead of the task queuing and the extra encoding of object reference information (e.g. part-\u0026gt;part links) may defeat the point.\u003C/p\u003E\u003Cp\u003EIn terms of the simulation itself, there are a few things that could be parallelised but it will take considerable effort for an unknown benefit. E.g. when working out which \u0022active\u0022 engines still have access to fuel, the recursive scan of the (private version of the) part tree could be done by a separate task for each engine, but, in general, most of the bits that could be parallelised in this way aren\u0027t very complex and the extra threading overhead would probably drown out any improvement.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-08-21T02:54:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Padishar\u0022 data-cite=\u0022Padishar\u0022\u003E\u003Cdiv\u003EI can certainly see the attraction of this sort of system for the sort of use you (presumably) intend it for. Firing off an aero calculation for each part during Update and then waiting for them all to have finished during LateUpdate (or possibly at the end of the Update loop as you describe) sounds ideal for FAR though is probably less useful for KER (or MJ) as the calculations can take significantly longer than a frame (sometimes many frames) and it isn\u0027t obvious how to parallelise the implementation of the simulation code. Have you integrated this into FAR yet?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI haven\u0027t started refactoring FAR to be thread-safe to take advantage of this, and it would have to run its code in FixedUpdate, not Update (whether the results are returned at the end of FixedUpdate or if they\u0027re allowed to wait until the next FixedUpdate to take advantage of the unused processor time while the physics engine chugs is something I\u0027ll leave up to the user). I\u0027d actually considered implementing this straight into it, but I figured that if anyone else wanted to make use of the system and duplicated the code we\u0027d end up with the overhead of all the controllers and threads eating up any performance benefits.\u003C/p\u003E\u003Cp\u003ECurrently, I can see it having uses for the aerodynamics code in FAR, for some planned heat distribution code in DRE, for an overhaul to the way AJE calculates jet properties, probably some of the work that kOS does, and likely for some moderate GUI applications, where the calculations are heavy enough to warrant being sent to a thread pool, but are still needed in a timely fashion.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EWell, it sounds interesting and I\u0027ll definitely take a look due to a general interest in multithreading. The most awkward thing when doing multithreaded stuff in KSP/Unity is that you have to limit your interaction with KSP/Unity objects to the main thread or you risk all kinds of horrible bugs/crashes when things change underneath you.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhich is really the frustrating thing with this. I\u0027ll have to do some experiments to see if there are any Unity classes / structs that can be used outside the main thread and in what forms, so that hopefully we don\u0027t have to scrap everything.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIn terms of the simulation itself, there are a few things that could be parallelised but it will take considerable effort for an unknown benefit. E.g. when working out which \u0022active\u0022 engines still have access to fuel, the recursive scan of the (private version of the) part tree could be done by a separate task for each engine, but, in general, most of the bits that could be parallelised in this way aren\u0027t very complex and the extra threading overhead would probably drown out any improvement.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, I can see that. If there\u0027s really no reason for the task to be tightly-synced with the main thread, you\u0027re probably better of implementing your own threading solution.\u003C/p\u003E\n"},{"CreatedByName":"rhoark","CreatedById":57151,"CreatedDateTime":"2014-09-16T14:22:21Z","Content":"\n\u003Cp\u003EI will use this so hard.\u003C/p\u003E\n"},{"CreatedByName":"Sean Mirrsen","CreatedById":3873,"CreatedDateTime":"2014-09-16T14:28:21Z","Content":"\n\u003Cp\u003EFerram, for \u0022calculations heavy enough to use another thread\u0022, have you considered taking a second look at raycasting or some other methods for detecting the geometry of the craft in FAR versus the airflow? I recall you trying it at one point, and it didn\u0027t work very well - could it work better with this?\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2014-09-16T14:36:37Z","Content":"\n\u003Cp\u003EOne thing I don\u0027t really like about the implementation is that you don\u0027t seem to have to implement an interface. It just seems to work by using magic method names.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-09-16T17:48:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Sean Mirrsen\u0022 data-cite=\u0022Sean Mirrsen\u0022\u003E\u003Cdiv\u003EFerram, for \u0022calculations heavy enough to use another thread\u0022, have you considered taking a second look at raycasting or some other methods for detecting the geometry of the craft in FAR versus the airflow? I recall you trying it at one point, and it didn\u0027t work very well - could it work better with this?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDepends. Lots of those things depend on if I can separate out the Unity classes and their methods, since those can\u0027t be used outside of the main thread.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022blizzy78\u0022 data-cite=\u0022blizzy78\u0022\u003E\u003Cdiv\u003EOne thing I don\u0027t really like about the implementation is that you don\u0027t seem to have to implement an interface. It just seems to work by using magic method names.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll admit that I\u0027m somewhat confused by your complaint; this certainly doesn\u0027t work by using magic method names, you need to register each of the methods before they will be called, because I think Unity\u0027s magic method name stuff is silly. Would you mind pointing to where you\u0027d like to see a change?\u003C/p\u003E\n"},{"CreatedByName":"Valerian","CreatedById":124076,"CreatedDateTime":"2014-10-16T06:37:31Z","Content":"\n\u003Cp\u003EI will definitely use that!\u003C/p\u003E\n"},{"CreatedByName":"S1gmoid","CreatedById":124382,"CreatedDateTime":"2014-10-19T18:23:22Z","Content":"\n\u003Cp\u003ESo this means that before forking off to a thread, you have to create a deep copy in the main thread of any game data you want to use?\u003C/p\u003E\n"},{"CreatedByName":"Padishar","CreatedById":97386,"CreatedDateTime":"2014-10-19T20:13:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022S1gmoid\u0022 data-cite=\u0022S1gmoid\u0022\u003E\u003Cdiv\u003ESo this means that before forking off to a thread, you have to create a deep copy in the main thread of any game data you want to use?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, yes and no. Basically, you need to be certain that any changes the core game might make to its data structures can\u0027t cause problems for your code. The easiest way to do this is to avoid accessing any Unity/KSP objects from other threads but, theoretically, this isn\u0027t the only way. E.g. if you know for certain that the main thread is currently running your code in, for example, FixedUpdate, then you can be sure that KSP and/or Unity aren\u0027t going to be changing any data and, as long as you stop accessing the data before the main thread leaves your FixedUpdate routine and goes back into KSP/Unity code, then everything should remain happy. However, this places very significant constraints on what you can do with multi-threading, basically reducing it to using multiple threads to speed up small bits of code that would otherwise be done by a single thread in a single plugin function. If you have considerable knowledge of the internal workings of Unity then you may be able to extend this usage depending on what KSP/Unity data you need to access but it is almost certainly much easier (and less prone to changes in KSP/Unity completely breaking your code in very hard to diagnose ways) to copy the data you require for your other threads to access.\u003C/p\u003E\n"},{"CreatedByName":"S1gmoid","CreatedById":124382,"CreatedDateTime":"2014-10-20T00:11:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Padishar\u0022 data-cite=\u0022Padishar\u0022\u003E\u003Cdiv\u003EHowever, this places very significant constraints on what you can do with multi-threading, basically reducing it to using multiple threads to speed up small bits of code that would otherwise be done by a single thread in a single plugin function. If you have considerable knowledge of the internal workings of Unity then you may be able to extend this usage depending on what KSP/Unity data you need to access but it is almost certainly much easier (and less prone to changes in KSP/Unity completely breaking your code in very hard to diagnose ways) to copy the data you require for your other threads to access.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHm... makes sense. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI am completely new to Unity... anyway, from my previous experience I\u0027d say that since we\u0027re talking about a game, normally I\u0027d want to stay synchronized to the main loop anyway so I can update in time for each Vsync... for truly \u0022parallel running\u0022 logic (though I\u0027d be hard pressed to name any right now), I guess it might be best to utilize these synchronization points as uplinks and downlinks, ie. update UIs and gather data for the long-running thread...\u003C/p\u003E\n"},{"CreatedByName":"NAMROG","CreatedById":41280,"CreatedDateTime":"2015-12-24T04:41:07Z","Content":"\n\u003Cp\u003E\nSooo, this is a fairly old thing, but I recently found it searching through the forums. I\u0027m kind of curious. If I wanted KSP to perform its physics on multiple threads, would there be a way to use this?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOr, better yet, could I modify FAR to use it?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-12-24T04:42:46Z\u0022 title=\u002212/24/2015 04:42  AM\u0022 data-short=\u00228 yr\u0022\u003EDecember 24, 2015\u003C/time\u003E by NAMROG\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2015-12-24T06:02:29Z","Content":"\n\u003Cp\u003E\nPerform what physics? The part modelling physics? No.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis is a system for syncing thread-safe operations (most commonly math heavy operations) to the Unity update cycles.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2019-03-26T16:28:21Z","Content":"\n\u003Cp\u003E\nI can\u0027t believe I\u0027m necro\u0027ing such an old thread \u003Cspan\u003E\u003Cspan\u003E:-)\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003EAnyway, I\u0027m wondering if any mods use this, or if there is even a released version anywhere.\u00A0 There isn\u0027t a released version on Github.\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003EI need to add threading to at least one mod, (coroutines aren\u0027t cutting it for this mod)\u00A0 and rather than reinventing the wheel, I\u0027d like to use this.\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003E\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/21328-ferram4/\u0026amp;do=hovercard\u0022 data-mentionid=\u002221328\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/21328-ferram4/\u0022 rel=\u0022\u0022\u003E@ferram4\u003C/a\u003E\u00A0The license currently prevents me from distributing this (it\u0027s an ARR).\u00A0 Can we discuss this via PM if you like?\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"smotheredrun","CreatedById":165894,"CreatedDateTime":"2019-04-12T01:29:09Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223569197\u0022 data-ipsquote-contentid=\u002282141\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221553617701\u0022 data-ipsquote-userid=\u0022129964\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 3/26/2019 at 11:28 AM, linuxgurugamer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI can\u0027t believe I\u0027m necro\u0027ing such an old thread \u003Cspan\u003E\u003Cspan\u003E:-)\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003EAnyway, I\u0027m wondering if any mods use this, or if there is even a released version anywhere.\u00A0 There isn\u0027t a released version on Github.\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003EI need to add threading to at least one mod, (coroutines aren\u0027t cutting it for this mod)\u00A0 and rather than reinventing the wheel, I\u0027d like to use this.\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan\u003E\u003Cspan\u003E\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/21328-ferram4/\u0026amp;do=hovercard\u0022 data-mentionid=\u002221328\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/21328-ferram4/\u0022 rel=\u0022\u0022\u003E@ferram4\u003C/a\u003E\u00A0The license currently prevents me from distributing this (it\u0027s an ARR).\u00A0 Can we discuss this via PM if you like?\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPlease!!\n\u003C/p\u003E\n"}]}