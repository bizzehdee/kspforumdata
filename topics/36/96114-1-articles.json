{"TopicId":96114,"ForumId":36,"TopicTitle":"Editor Toolbar Modding Guide","CreatedByName":"Romfarer","CreatedById":20387,"CreatedDateTime":"2015-01-09T16:44:58Z","PageNum":1,"Articles":[{"CreatedByName":"Romfarer","CreatedById":20387,"CreatedDateTime":"2015-01-09T16:44:58Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EEditor Toolbar Modding Guide:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe editor toolbar runs of the class PartCategorizer. Each button on the toolbar is handled by the class PartCategorizer.Category and the actual button is a PartCategorizerButton. There are a myriad of ways to customize your custom filters using these classes but for simplicity i have added two static methods to PartCategorizer which simplifies the process of adding custom filters.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EHow to add a simple custom filter:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe following code example explains how to add a simple custom filter.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//instantiate the icon\u003Cbr\u003EIcon myIcon = new PartCategorizer.Icon(\u0022my icon\u0022, iconTexture_normal, iconTexture_selected);\u003Cbr\u003E\u003Cbr\u003E//add a custom filter to the toolbar\u003Cbr\u003ECategory myFilter = PartCategorizer.AddCustomFilter(\u0022my filter\u0022, myIcon, Color.yellow);\u003Cbr\u003E\u003Cbr\u003E//add subcategories to the filter you just added\u003Cbr\u003EPartCategorizer.AddCustomSubcategoryFilter(myFilter, \u0022filter 1\u0022, myIcon, p =\u0026gt; p.name.Contains(\u0022engine\u0022));\u003Cbr\u003EPartCategorizer.AddCustomSubcategoryFilter(myFilter, \u0022filter 2\u0022, myIcon, p =\u0026gt; p.name.Contains(\u0022fuel\u0022));\u003Cbr\u003EPartCategorizer.AddCustomSubcategoryFilter(myFilter, \u0022filter 3\u0022, myIcon, p =\u0026gt; p.name.Contains(\u0022wing\u0022));\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELets break it down \u0022line by line\u0022\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EIcon myIcon = new PartCategorizer.Icon(\u0022my icon\u0022, iconTexture_normal, iconTexture_selected);\u003Cbr\u003E\u003Cbr\u003Eand the signature...\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// Constructor for Icon\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022name\u0022\u0026gt;The identifier of the icon\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022iconNormal\u0022\u0026gt;The \u0022normal\u0022 state of the icon\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022iconSelected\u0022\u0026gt;The \u0022selected\u0022 state of the icon\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022simple\u0022\u0026gt;If true you only have to specify the selected state of the icon. A black \u0022normal\u0022 state will be generated automatically.\u0026lt;/param\u0026gt;\u003Cbr\u003Epublic Icon(string name, Texture iconNormal, Texture iconSelected, bool simple = false)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIcons are instantiated using the PartCategorizer.Icon class. It\u0027s signature is Icon(string name, Texture iconNormal, Texture iconSelected, bool simple = false). \u0022name\u0022 is not really important when instantiating the icons via code like this. But if you had loaded the icon by placing it in GameData\\Squad\\PartList\\SimpleIcons or Icons this would be the identifier used to retrieve the icon with PartCategorizer.Instance.GetIcon(\u0022myIcon\u0022); That said you can choose wether to instantiate the icon by code (leaving it for your button only) or put it in those folders and make it available for everyone to use on their custom categories.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Estatic public Category AddCustomFilter(string filterName, Icon icon, Color colorButton)\u003Cbr\u003E\u003Cbr\u003Eand the signature...\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// Adds a filter to the \u0022right side\u0022 toolbar list.\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022filterName\u0022\u0026gt;The name of the filter which will appear on the tooltip\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022icon\u0022\u0026gt;The icon for the button\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022colorButton\u0022\u0026gt;The color of the button\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;returns\u0026gt;A reference to the Category wrapper\u0026lt;/returns\u0026gt;\u003Cbr\u003Estatic public Category AddCustomFilter(string filterName, Icon icon, Color colorButton)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe signature is pretty much self explanatory.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPartCategorizer.AddCustomSubcategoryFilter(myFilter, \u0022filter 1\u0022, myIcon, p =\u0026gt; p.name.Contains(\u0022engine\u0022));\u003Cbr\u003E\u003Cbr\u003Eand the signature...\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// Adds a filter subcategory to the given filter which will appear on the right side of the toolbar\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022mainFilter\u0022\u0026gt;The filter (Category) you are adding this filter to\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022subFilterName\u0022\u0026gt;The name of the filter which will appear on the tooltip\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022icon\u0022\u0026gt;The icon for the button\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;param name=\u0022exclusionFilter\u0022\u0026gt;Lambda expression which specifies which parts to show when this filter is active\u0026lt;/param\u0026gt;\u003Cbr\u003E/// \u0026lt;returns\u0026gt;A reference to the Category wrapper\u0026lt;/returns\u0026gt;\u003Cbr\u003Estatic public Category AddCustomSubcategoryFilter(Category mainFilter, string subFilterName, Icon icon, Func\u0026lt;AvailablePart, bool\u0026gt; exclusionFilter)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis is almost the same as the method to add a main filter. Except the exclusionFilter which is the whole point of the filter. In this simple example i have specified the expression p =\u0026gt; p.name.Contains(\u0022engine\u0022). All this does is filter out all parts where \u0022engine\u0022 appears in the part name. \u0022p\u0022 is a reference to AvailablePart and you can use any of it\u0027s fields to filter parts. \u003C/p\u003E\u003Cp\u003ESome additional examples:\u003C/p\u003E\u003Cp\u003Ep =\u0026gt; p.moduleInfos.Exists(q =\u0026gt; q.moduleName == \u0022Parachute\u0022)\u003C/p\u003E\u003Cp\u003EThis will filter out all parts that has a partModule called \u0022Parachute\u0022.\u003C/p\u003E\u003Cp\u003Ep =\u0026gt; p.resourceInfos.Exists(q =\u0026gt; q.resourceName == \u0022Liquid Fuel\u0022)\u003C/p\u003E\u003Cp\u003EThis will filter out all parts containing \u0022Liquid Fuel\u0022.\u003C/p\u003E\u003Cp\u003Ep =\u0026gt; p.manufacturer == \u0022Probodobodyne Inc\u0022\u003C/p\u003E\u003Cp\u003EThis will filter out all parts made by Probodobodyne Inc.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EWhen to add custom filters:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe editor toolbar is ready to receive custom filters when this GameEvent is fired. GameEvents.onGUIEditorToolbarReady\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EHow to add auto generated filters:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EYou may also want to make filters in a more automated way.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//instantiate the icon\u003Cbr\u003EIcon myIcon = new PartCategorizer.Icon(\u0022my icon\u0022, PartCategorizer.Instance.fallbackIcon.iconNormal, \u003Cbr\u003E\u003Cbr\u003EPartCategorizer.Instance.fallbackIcon.iconSelected);\u003Cbr\u003E\u003Cbr\u003E//add a custom filter to the toolbar\u003Cbr\u003ECategory myFilter = PartCategorizer.AddCustomFilter(\u0022my resource filter\u0022, myIcon, Color.yellow);\u003Cbr\u003E\u003Cbr\u003E//Get a unique list of available resources\u003Cbr\u003EList\u0026lt;String\u0026gt; resources = new List\u0026lt;string\u0026gt;();\u003Cbr\u003Eforeach (AvailablePart ap in PartLoader.LoadedPartsList)\u003Cbr\u003E    foreach (AvailablePart.ResourceInfo apr in ap.resourceInfos)\u003Cbr\u003E        if (!resources.Contains(apr.resourceName))\u003Cbr\u003E            resources.Add(apr.resourceName);\u003Cbr\u003E\u003Cbr\u003Eforeach (string str in resources)\u003Cbr\u003E{\u003Cbr\u003E    string myResourceName = str; //It is imperitive to declare this\u003Cbr\u003E    //add subcategories to the filter you just added\u003Cbr\u003E    PartCategorizer.AddCustomSubcategoryFilter(myFilter, \u0022filter by \u0022 \u002B myResourceName, myIcon, p =\u0026gt; p.resourceInfos.Exists(q =\u0026gt; q.resourceName == myResourceName));\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis is basically the same code we use to generate the stock resource filter and it filters parts by the resource it holds. Keep in mind, when you generate filters like this, it is important to declare the myResourceName string within the for loop.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-01-28T02:33:46Z","Content":"\n\u003Cp\u003ESome comments from my experience with making Filter Extensions\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EAfter adding a new category, occasionally they may have the GUI elements that appear in a user defined category (part drop zone, little red x\u0027s on each part). Force setting every new category to have a displayType of \u0022PartsList\u0022 (\u003Ca href=\u0022https://github.com/Crzyrndm/FilterExtension/blob/master/FilterExtension/ConfigNodes/customCategory.cs#L75\u0022 rel=\u0022external nofollow\u0022\u003Ecode\u003C/a\u003E reference) prevents this.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EThe event is halted for all plugins if any errors occur which is rather annoying when your entire plugin depends on it. Polling PartCategorizer.Ready() inside the editor is more robust and Co-routines can be used to keep it relatively efficient (\u003Ca href=\u0022https://github.com/Crzyrndm/FilterExtension/blob/master/FilterExtension/stateCheck.cs\u0022 rel=\u0022external nofollow\u0022\u003Ecode\u003C/a\u003E reference). Whether that flag is set high before or after the event completes I have not investigated. (\u003Cstrong\u003EUpdate:\u003C/strong\u003E The event completes first the \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Efirst\u003C/span\u003E time the editor is entered. All subsequent entries have the flag being set first. Initialisation \u003Cstrong\u003Etwo\u003C/strong\u003E frames after the flag is set seems to be free of any errors)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPartCategorizerButton.SetIcon can be used to change the icon of any category/subcategory, however the button needs to be refreshed before the new icon will be visible (\u003Ca href=\u0022https://github.com/Crzyrndm/FilterExtension/blob/master/FilterExtension/Core.cs#L273\u0022 rel=\u0022external nofollow\u0022\u003Ecode\u003C/a\u003E reference. Credit to stupid_chris for that section of code)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdding a sub-category that has no parts available breaks the part selection pane (not tested with parts hidden by tech, but this does not seem to cause the same breakages as I haven\u0027t had any bug reports on it)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDon\u0027t ever add a new (sub)category and then attempt to edit it\u0027s icon in the same Update(). Things break, alot\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-30T09:54:35Z\u0022 title=\u002201/30/2015 09:54  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 30, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-03-16T20:06:24Z","Content":"\n\u003Cp\u003ESo other than a few minor niggles, working with the part filtering system has been a rather pleasant experience.\u003C/p\u003E\u003Cp\u003EThe 0.90 update also included a part sorting mechanism, but it seems to be much less open. Being able to alter the sorting system would be very useful so any insight into how the sorting is enacted would be useful\u003C/p\u003E\n"},{"CreatedByName":"jandcando","CreatedById":66121,"CreatedDateTime":"2015-05-01T02:25:18Z","Content":"\n\u003Cp\u003ECould someone help me to get this filter I\u0027m working on to load? When I go to the VAB, I see no new buttons for filtering.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.MainMenu , true)]\u003Cbr\u003E    public class II_Icons : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private void addIIfilter()\u003Cbr\u003E        {\u003Cbr\u003E            //Loading Textures\u003Cbr\u003E            Texture2D unselected = new Texture2D(32, 32);\u003Cbr\u003E            Texture2D selected = new Texture2D(32, 32);\u003Cbr\u003E            unselected.LoadImage(File.ReadAllBytes(\u0022GameData/ImpossibleInnovations/Plugins/PluginData/SmallLogo.png\u0022));\u003Cbr\u003E            selected.LoadImage(File.ReadAllBytes(\u0022GameData/ImpossibleInnovations/Plugins/PluginData/SmallLogoON.png\u0022));\u003Cbr\u003E            RUI.Icons.Selectable.Icon filterIcon = new RUI.Icons.Selectable.Icon(\u0022II_filter_icon\u0022, selected, unselected); //Defining filterIcon\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            PartCategorizer.Category IIfilter = PartCategorizer.AddCustomFilter(\u0022Impossible_Innovations\u0022, filterIcon, Color.white);\u003Cbr\u003E\u003Cbr\u003E            //filters for all II parts, II Tanks, Engines, and CL-20 Boosters\u003Cbr\u003E            PartCategorizer.AddCustomSubcategoryFilter(IIfilter, \u0022All Impossible Innovations Parts\u0022, filterIcon, o =\u0026gt; o.manufacturer == \u0022Impossible Innovations\u0022);\u003Cbr\u003E            PartCategorizer.AddCustomSubcategoryFilter(IIfilter, \u0022Tanks\u0022, filterIcon, p =\u0026gt; p.resourceInfos.Exists(q =\u0026gt; q.resourceName == \u0022Deuterium\u0022 || q.resourceName == \u0022Tritium\u0022) \u0026amp;\u0026amp; p.manufacturer == \u0022Impossible Innovations\u0022);\u003Cbr\u003E            PartCategorizer.AddCustomSubcategoryFilter(IIfilter, \u0022Engines\u0022, filterIcon, r =\u0026gt; r.name.Contains(\u0022Fusion Engine\u0022) \u0026amp;\u0026amp; r.manufacturer == \u0022Impossible Innovations\u0022);\u003Cbr\u003E            PartCategorizer.AddCustomSubcategoryFilter(IIfilter, \u0022CL-20 Boosters\u0022, filterIcon, s =\u0026gt; s.resourceInfos.Exists(t =\u0026gt; t.resourceName == \u0022CL-20\u0022) \u0026amp;\u0026amp; s.manufacturer == \u0022Impossible Innovations\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-01T02:27:24Z\u0022 title=\u002205/01/2015 02:27  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 1, 2015\u003C/time\u003E by jandcando\u003C/strong\u003E\n\u003Cbr\u003Eadded code comments\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-05-01T02:33:27Z","Content":"\n\u003Cp\u003EYou\u0027re not subscribing addIIFilter to the GameEvent listed in the OP (In Awake: GameEvents.OnGUIEditorToolbarReady.Add(addIIFilter); )\u003C/p\u003E\n"},{"CreatedByName":"jandcando","CreatedById":66121,"CreatedDateTime":"2015-05-01T02:44:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003EYou\u0027re not subscribing addIIFilter to the GameEvent listed in the OP (In Awake: GameEvents.OnGUIEditorToolbarReady.Add(addIIFilter); )\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh, sorry about that silly mistake. I\u0027m still learning my way around you could say.\u003C/p\u003E\u003Cp\u003EI\u0027m surprised you replied so quickly. That\u0027s awesome.\u003C/p\u003E\n"}]}