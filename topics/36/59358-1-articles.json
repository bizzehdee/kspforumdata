{"TopicId":59358,"ForumId":36,"TopicTitle":"OpenParticleEmitter: Kethane-derived alternate particles module","CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-01-08T23:52:38Z","PageNum":1,"Articles":[{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-01-08T23:52:38Z","Content":"\n\u003Cp\u003EThis is the particles module used in Kethane for drill smoke and spark effects. It allows for particle emitters to be defined entirely in part config files, which is immensely useful when extending the behavior of existing parts. It otherwise functions very much like an ordinary Unity particle system.\u003C/p\u003E\u003Cp\u003EThe greatest limitation of this code is that it does not account for the floating origin system, so emitters in motion will have undesirable behavior. It works well for stationary emitters.\u003C/p\u003E\u003Cp\u003EThis source is released under the \u003Ca href=\u0022http://opensource.org/licenses/BSD-2-Clause\u0022 rel=\u0022external nofollow\u0022\u003EBSD 2-Clause\u003C/a\u003E license.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E/**\u003Cbr\u003E * Copyright (c) 2014, Majiir\u003Cbr\u003E * All rights reserved.\u003Cbr\u003E * \u003Cbr\u003E * Redistribution and use in source and binary forms, with or without modification, are permitted \u003Cbr\u003E * provided that the following conditions are met:\u003Cbr\u003E * \u003Cbr\u003E * 1. Redistributions of source code must retain the above copyright notice, this list of \u003Cbr\u003E * conditions and the following disclaimer.\u003Cbr\u003E * \u003Cbr\u003E * 2. Redistributions in binary form must reproduce the above copyright notice, this list of \u003Cbr\u003E * conditions and the following disclaimer in the documentation and/or other materials provided \u003Cbr\u003E * with the distribution.\u003Cbr\u003E * \u003Cbr\u003E * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u0022AS IS\u0022 AND ANY EXPRESS OR \u003Cbr\u003E * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\u003Cbr\u003E * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR \u003Cbr\u003E * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \u003Cbr\u003E * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \u003Cbr\u003E * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY \u003Cbr\u003E * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR \u003Cbr\u003E * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \u003Cbr\u003E * POSSIBILITY OF SUCH DAMAGE.\u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class OpenParticleEmitter : PartModule\u003Cbr\u003E{\u003Cbr\u003E    #region Particle property bindings\u003Cbr\u003E\u003Cbr\u003E    public float AngularVelocity\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.angularVelocity; }\u003Cbr\u003E        set { emitter.angularVelocity = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float CameraVelocityScale\u003Cbr\u003E    {\u003Cbr\u003E        get { return renderer.cameraVelocityScale; }\u003Cbr\u003E        set { renderer.cameraVelocityScale = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Color ColorAnimation1\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.colorAnimation[0]; }\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            var colors = animator.colorAnimation;\u003Cbr\u003E            colors[0] = value;\u003Cbr\u003E            animator.colorAnimation = colors;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Color ColorAnimation2\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.colorAnimation[1]; }\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            var colors = animator.colorAnimation;\u003Cbr\u003E            colors[1] = value;\u003Cbr\u003E            animator.colorAnimation = colors;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Color ColorAnimation3\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.colorAnimation[2]; }\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            var colors = animator.colorAnimation;\u003Cbr\u003E            colors[2] = value;\u003Cbr\u003E            animator.colorAnimation = colors;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Color ColorAnimation4\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.colorAnimation[3]; }\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            var colors = animator.colorAnimation;\u003Cbr\u003E            colors[3] = value;\u003Cbr\u003E            animator.colorAnimation = colors;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Color ColorAnimation5\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.colorAnimation[4]; }\u003Cbr\u003E        set\u003Cbr\u003E        {\u003Cbr\u003E            var colors = animator.colorAnimation;\u003Cbr\u003E            colors[4] = value;\u003Cbr\u003E            animator.colorAnimation = colors;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float Damping\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.damping; }\u003Cbr\u003E        set { animator.damping = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public bool Emit\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.emit; }\u003Cbr\u003E        set { emitter.emit = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float EmitterVelocityScale\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.emitterVelocityScale; }\u003Cbr\u003E        set { emitter.emitterVelocityScale = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 Force\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.force; }\u003Cbr\u003E        set { animator.force = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float LengthScale\u003Cbr\u003E    {\u003Cbr\u003E        get { return renderer.lengthScale; }\u003Cbr\u003E        set { renderer.lengthScale = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 LocalRotationAxis\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.localRotationAxis; }\u003Cbr\u003E        set { animator.localRotationAxis = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 LocalVelocity\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.localVelocity; }\u003Cbr\u003E        set { emitter.localVelocity = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MaxEmission\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.maxEmission; }\u003Cbr\u003E        set { emitter.maxEmission = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MaxEnergy\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.maxEnergy; }\u003Cbr\u003E        set { emitter.maxEnergy = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MaxParticleSize\u003Cbr\u003E    {\u003Cbr\u003E        get { return renderer.maxParticleSize; }\u003Cbr\u003E        set { renderer.maxParticleSize = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MaxSize\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.maxSize; }\u003Cbr\u003E        set { emitter.maxSize = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MinEmission\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.minEmission; }\u003Cbr\u003E        set { emitter.minEmission = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MinEnergy\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.minEnergy; }\u003Cbr\u003E        set { emitter.minEnergy = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float MinSize\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.minSize; }\u003Cbr\u003E        set { emitter.minSize = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float RandomAngularVelocity\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.rndAngularVelocity; }\u003Cbr\u003E        set { emitter.rndAngularVelocity = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 RandomForce\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.rndForce; }\u003Cbr\u003E        set { animator.rndForce = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public bool RandomRotation\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.rndRotation; }\u003Cbr\u003E        set { emitter.rndRotation = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 RandomVelocity\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.rndVelocity; }\u003Cbr\u003E        set { emitter.rndVelocity = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public ParticleRenderMode RenderMode\u003Cbr\u003E    {\u003Cbr\u003E        get { return renderer.particleRenderMode; }\u003Cbr\u003E        set { renderer.particleRenderMode = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float SizeGrow\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.sizeGrow; }\u003Cbr\u003E        set { animator.sizeGrow = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public bool UseWorldSpace\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.useWorldSpace; }\u003Cbr\u003E        set { emitter.useWorldSpace = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public float VelocityScale\u003Cbr\u003E    {\u003Cbr\u003E        get { return renderer.velocityScale; }\u003Cbr\u003E        set { renderer.velocityScale = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 WorldRotationAxis\u003Cbr\u003E    {\u003Cbr\u003E        get { return animator.worldRotationAxis; }\u003Cbr\u003E        set { animator.worldRotationAxis = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 WorldVelocity\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.worldVelocity; }\u003Cbr\u003E        set { emitter.worldVelocity = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    #endregion\u003Cbr\u003E\u003Cbr\u003E    public Vector3 EmitterPosition\u003Cbr\u003E    {\u003Cbr\u003E        get { return obj.transform.localPosition; }\u003Cbr\u003E        set { obj.transform.localPosition = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Vector3 EmitterScale\u003Cbr\u003E    {\u003Cbr\u003E        get { return obj.transform.localScale; }\u003Cbr\u003E        set { obj.transform.localScale = value; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public Transform EmitterTransform\u003Cbr\u003E    {\u003Cbr\u003E        get { return obj.transform; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public int ParticleCount\u003Cbr\u003E    {\u003Cbr\u003E        get { return emitter.particleCount; }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPField(isPersistant = false)]\u003Cbr\u003E    public String Label;\u003Cbr\u003E\u003Cbr\u003E    public ConfigNode config;\u003Cbr\u003E\u003Cbr\u003E    private GameObject obj;\u003Cbr\u003E    private ParticleAnimator animator;\u003Cbr\u003E    private ParticleEmitter emitter;\u003Cbr\u003E    private new ParticleRenderer renderer;\u003Cbr\u003E\u003Cbr\u003E    public override void OnLoad(ConfigNode config)\u003Cbr\u003E    {\u003Cbr\u003E        if (this.config == null)\u003Cbr\u003E        {\u003Cbr\u003E            this.config = new ConfigNode();\u003Cbr\u003E            config.CopyTo(this.config);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        if (state == StartState.Editor) { return; }\u003Cbr\u003E        Setup();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public void Setup()\u003Cbr\u003E    {\u003Cbr\u003E        if (part.partInfo == null) { return; }\u003Cbr\u003E        if (obj != null) { return; }\u003Cbr\u003E\u003Cbr\u003E        var shaderName = config.GetValue(\u0022ShaderName\u0022);\u003Cbr\u003E        var textureName = config.GetValue(\u0022TextureName\u0022);\u003Cbr\u003E\u003Cbr\u003E        obj = GameObject.CreatePrimitive(PrimitiveType.Sphere);\u003Cbr\u003E        obj.collider.enabled = false;\u003Cbr\u003E        obj.renderer.material.color = new Color(0, 0, 0, 0);\u003Cbr\u003E        obj.renderer.material.shader = Shader.Find(\u0022Transparent/Diffuse\u0022);\u003Cbr\u003E        obj.transform.parent = part.transform;\u003Cbr\u003E        obj.transform.localRotation = Quaternion.identity;\u003Cbr\u003E\u003Cbr\u003E        animator = (ParticleAnimator)obj.AddComponent\u0026lt;ParticleAnimator\u0026gt;();\u003Cbr\u003E        emitter = (ParticleEmitter)obj.AddComponent(\u0022MeshParticleEmitter\u0022);\u003Cbr\u003E        renderer = (ParticleRenderer)obj.AddComponent\u0026lt;ParticleRenderer\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E        var material = new Material(Shader.Find(shaderName));\u003Cbr\u003E        material.mainTexture = GameDatabase.Instance.GetTexture(textureName, false);\u003Cbr\u003E        material.color = Color.white;\u003Cbr\u003E\u003Cbr\u003E        renderer.materials = new Material[] { material };\u003Cbr\u003E        animator.colorAnimation = new Color[5];\u003Cbr\u003E\u003Cbr\u003E        if (Misc.Parse(config.GetValue(\u0022Collision\u0022), false))\u003Cbr\u003E        {\u003Cbr\u003E            obj.AddComponent(\u0022WorldParticleCollider\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        AngularVelocity         = Misc.Parse(config.GetValue(\u0022AngularVelocity\u0022), 0f);\u003Cbr\u003E        CameraVelocityScale     = Misc.Parse(config.GetValue(\u0022CameraVelocityScale\u0022), 0f);\u003Cbr\u003E        ColorAnimation1         = ConfigNode.ParseColor(config.GetValue(\u0022ColorAnimation1\u0022));\u003Cbr\u003E        ColorAnimation2         = ConfigNode.ParseColor(config.GetValue(\u0022ColorAnimation2\u0022));\u003Cbr\u003E        ColorAnimation3         = ConfigNode.ParseColor(config.GetValue(\u0022ColorAnimation3\u0022));\u003Cbr\u003E        ColorAnimation4         = ConfigNode.ParseColor(config.GetValue(\u0022ColorAnimation4\u0022));\u003Cbr\u003E        ColorAnimation5         = ConfigNode.ParseColor(config.GetValue(\u0022ColorAnimation5\u0022));\u003Cbr\u003E        Damping                 = Misc.Parse(config.GetValue(\u0022Damping\u0022), 1f);\u003Cbr\u003E        Emit                    = Misc.Parse(config.GetValue(\u0022Emit\u0022), true);\u003Cbr\u003E        EmitterVelocityScale    = Misc.Parse(config.GetValue(\u0022EmitterVelocityScale\u0022), 1f);\u003Cbr\u003E        Force                   = Misc.Parse(config.GetValue(\u0022Force\u0022), Vector3.zero);\u003Cbr\u003E        LengthScale             = Misc.Parse(config.GetValue(\u0022LengthScale\u0022), 1f);\u003Cbr\u003E        LocalRotationAxis       = Misc.Parse(config.GetValue(\u0022LocalRotationAxis\u0022), Vector3.zero);\u003Cbr\u003E        LocalVelocity           = Misc.Parse(config.GetValue(\u0022LocalVelocity\u0022), Vector3.zero);\u003Cbr\u003E        MaxEmission             = Misc.Parse(config.GetValue(\u0022MaxEmission\u0022), 0f);\u003Cbr\u003E        MaxEnergy               = Misc.Parse(config.GetValue(\u0022MaxEnergy\u0022), 0f);\u003Cbr\u003E        MaxParticleSize         = Misc.Parse(config.GetValue(\u0022MaxParticleSize\u0022), 0f);\u003Cbr\u003E        MaxSize                 = Misc.Parse(config.GetValue(\u0022MaxSize\u0022), 0f);\u003Cbr\u003E        MinEmission             = Misc.Parse(config.GetValue(\u0022MinEmission\u0022), 0f);\u003Cbr\u003E        MinEnergy               = Misc.Parse(config.GetValue(\u0022MinEnergy\u0022), 0f);\u003Cbr\u003E        MinSize                 = Misc.Parse(config.GetValue(\u0022MinSize\u0022), 0f);\u003Cbr\u003E        RandomAngularVelocity   = Misc.Parse(config.GetValue(\u0022RandomAngularVelocity\u0022), 0f);\u003Cbr\u003E        RandomForce             = Misc.Parse(config.GetValue(\u0022RandomForce\u0022), Vector3.zero);\u003Cbr\u003E        RandomRotation          = Misc.Parse(config.GetValue(\u0022RandomRotation\u0022), false);\u003Cbr\u003E        RandomVelocity          = Misc.Parse(config.GetValue(\u0022RandomVelocity\u0022), Vector3.zero);\u003Cbr\u003E        RenderMode              = Misc.Parse(config.GetValue(\u0022RenderMode\u0022), ParticleRenderMode.Billboard);\u003Cbr\u003E        SizeGrow                = Misc.Parse(config.GetValue(\u0022SizeGrow\u0022), 0f);\u003Cbr\u003E        UseWorldSpace           = Misc.Parse(config.GetValue(\u0022UseWorldSpace\u0022), false);\u003Cbr\u003E        VelocityScale           = Misc.Parse(config.GetValue(\u0022VelocityScale\u0022), 0f);\u003Cbr\u003E        WorldRotationAxis       = Misc.Parse(config.GetValue(\u0022WorldRotationAxis\u0022), Vector3.zero);\u003Cbr\u003E        WorldVelocity           = Misc.Parse(config.GetValue(\u0022WorldVelocity\u0022), Vector3.zero);\u003Cbr\u003E\u003Cbr\u003E        EmitterPosition         = Misc.Parse(config.GetValue(\u0022EmitterPosition\u0022), Vector3.zero);\u003Cbr\u003E        EmitterScale            = Misc.Parse(config.GetValue(\u0022EmitterScale\u0022), Vector3.zero);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    #region Parsing utility methods\u003Cbr\u003E\u003Cbr\u003E    private static class Misc\u003Cbr\u003E    {\u003Cbr\u003E        public static float Parse(string s, float defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            float value;\u003Cbr\u003E            if (!float.TryParse(s, out value))\u003Cbr\u003E            {\u003Cbr\u003E                value = defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E            return value;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static double Parse(string s, double defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            double value;\u003Cbr\u003E            if (!double.TryParse(s, out value))\u003Cbr\u003E            {\u003Cbr\u003E                value = defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E            return value;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static int Parse(string s, int defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            int value;\u003Cbr\u003E            if (!int.TryParse(s, out value))\u003Cbr\u003E            {\u003Cbr\u003E                value = defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E            return value;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static bool Parse(string s, bool defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            bool value;\u003Cbr\u003E            if (!bool.TryParse(s, out value))\u003Cbr\u003E            {\u003Cbr\u003E                value = defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E            return value;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static Vector3 Parse(string s, Vector3 defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                return ConfigNode.ParseVector3(s);\u003Cbr\u003E            }\u003Cbr\u003E            catch\u003Cbr\u003E            {\u003Cbr\u003E                return defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static Color32 Parse(string s, Color32 defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            if (s == null) { return defaultValue; }\u003Cbr\u003E            return ConfigNode.ParseColor32(s);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static ParticleRenderMode Parse(string s, ParticleRenderMode defaultValue)\u003Cbr\u003E        {\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                return (ParticleRenderMode)Enum.Parse(typeof(ParticleRenderMode), s);\u003Cbr\u003E            }\u003Cbr\u003E            catch\u003Cbr\u003E            {\u003Cbr\u003E                return defaultValue;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    #endregion\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"skykooler","CreatedById":60459,"CreatedDateTime":"2014-01-09T03:45:13Z","Content":"\n\u003Cp\u003EOk, now I kind of want to make a volcano with this.\u003C/p\u003E\n"},{"CreatedByName":"seanth","CreatedById":79989,"CreatedDateTime":"2014-01-22T05:34:48Z","Content":"\n\u003Cp\u003EThe code is super appreciated, but why not also just release a dll and provide usage documentation?\u003C/p\u003E\n"}]}