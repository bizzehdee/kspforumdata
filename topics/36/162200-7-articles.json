{"TopicId":162200,"ForumId":36,"TopicTitle":"[WIP][1.8.1, 1.9.1, 1.10.1, 1.11.0\u20132, 1.12.2\u20135] Principia\u2014version \u200E\u200EKleene, released 2024-07-05\u2014n-Body and Extended Body Gravitation","CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-05T00:19:35Z","PageNum":7,"Articles":[{"CreatedByName":"asmi","CreatedById":59068,"CreatedDateTime":"2014-02-18T22:17:21Z","Content":"\n\u003Cp\u003EWhy can\u0027t you calculate acceleration mechanically? I mean calculate vessel\u0027s PMI, and then get all engines\u0027 thrust vectors in local space (i.e. vessel coordinates) and calculate both rotational and translational accelerations? It doesn\u0027t sound too complicated to me... It won\u0027t be that simple for predicting maneuvers though since you have to take into account what control system would do (i.e. thrust vectoring, CMGs, RCS), but again you could just assume neutral control to the maneuver vector (like existing system does).\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-18T23:39:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022asmi\u0022 data-cite=\u0022asmi\u0022\u003E\u003Cdiv\u003EWhy can\u0027t you calculate acceleration mechanically? I mean calculate vessel\u0027s PMI, and then get all engines\u0027 thrust vectors in local space (i.e. vessel coordinates) and calculate both rotational and translational accelerations? It doesn\u0027t sound too complicated to me... It won\u0027t be that simple for predicting maneuvers though since you have to take into account what control system would do (i.e. thrust vectoring, CMGs, RCS), but again you could just assume neutral control to the maneuver vector (like existing system does).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat\u0027s a PMI? EDIT: Oh, it\u0027s just the off-diagonal entries of the inertia symmetric bilinear form. Engineers have weird naming conventions when it comes to mathematics. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EMy original intention for off-rails was to derive the proper acceleration of the vessel from first principles by talking to the engines as you say, but as discussed earlier, there are lots of sources of proper acceleration: besides engines, you have decouplers, collisions/getting out and pushing, engine exhaust, explosions etc. So computing the acceleration from first principles entails knowing what can exert thrust. This would break compatibility, and would lead me to effectively writing my own physics engine. Since this is definitely beyond the scope of this mod, I have to grab the acceleration from Unity. As Unity is bad at physics (and the KSP layer is pretty lousy too), I will have to postprocess things.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-21T18:15:37Z\u0022 title=\u002202/21/2014 06:15  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 21, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-19T19:04:19Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EStatus update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI have successfully implemented the integration of proper acceleration for the active vessel when off-rails.\u003C/p\u003E\u003Cp\u003EFurther experimentation on proper acceleration has led me to the following conclusions:\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EThere is a bias in proper acceleration coming from some improperly initialised variable in KSP. Indeed, when loading a vessel in LKO, I observe a strong bias in proper acceleration (~20 mm s\u003Csup\u003E-2\u003C/sup\u003E). This bias is observed independently of the way proper acceleration is computed (differentiating position twice, differentiating any of the numerous velocities, etc.) and geometric accelerations have been checked from first principles (the difference in geometric acceleration depending on the point of the vessel it is computed at is negligible). The bias is reduced to below 1 mm s\u003Csup\u003E-2\u003C/sup\u003E when warping then coming out of warp. It should be noted that the strong bias is not seen in Vessel.perturbation, but Vessel.perturbation consistently has a bias of 4 mm s\u003Csup\u003E-2\u003C/sup\u003E. As I have attempted to compute the proper acceleration in many different ways and all were consistent with each other and inconsistent with Vessel.perturbation, I assume Vessel.perturbation is mostly nonsense.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAccelerations below 1 mm s\u003Csup\u003E-2\u003C/sup\u003E are biased, unavoidable, unusable in stock, and should be clamped to 0. The acceleration from low-thrust engines will have to be fetched by hand.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EIt had previously been mentioned that spinning the ship accelerates it. If spinning the ship with angular velocity \u003Cstrong\u003E\u003Cem\u003E\u00C3\u00E2\u20AC\u00B0\u003C/em\u003E\u003C/strong\u003E produces a phantom acceleration \u003Cstrong\u003E\u003Cem\u003Ea\u003C/em\u003E\u003C/strong\u003E, then spinning it with angular velocity -\u003Cstrong\u003E\u003Cem\u003E\u00C3\u00E2\u20AC\u00B0\u003C/em\u003E\u003C/strong\u003E produces a phantom acceleration -\u003Cstrong\u003E\u003Cem\u003Ea\u003C/em\u003E\u003C/strong\u003E. The direction of \u003Cstrong\u003E\u003Cem\u003Ea\u003C/em\u003E\u003C/strong\u003E does not seem to bear any relation to \u003Cstrong\u003E\u003Cem\u003E\u00C3\u00E2\u20AC\u00B0\u003C/em\u003E\u003C/strong\u003E.\u003Cbr\u003EEDIT: It seems \u003Cstrong\u003E\u003Cem\u003Ea\u003C/em\u003E\u003C/strong\u003E is either prograde or retrograde.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe number of astrophysicists here seems to have doubled recently.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-20T07:58:48Z\u0022 title=\u002202/20/2014 07:58  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 20, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"KvickFlygarn87","CreatedById":76314,"CreatedDateTime":"2014-02-19T19:30:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EThe number of astrophysicists here seems to have doubled recently.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E*Facepalm*\u003C/p\u003E\u003Cp\u003EAlso, good read, kudoz.\u003C/p\u003E\n"},{"CreatedByName":"noblehallett","CreatedById":104018,"CreatedDateTime":"2014-02-20T22:08:36Z","Content":"\n\u003Cp\u003EHow is the numerical integration handled as far as units? Is the numerical integration being doing done directly on the in-game untis or is there a unit conversion done to allow for speedier calculations? Are you tracking energy and momentum conservation and are you finding that the SPRK is handling orbits well? I see you have reference the Chambers paper, have you looked at possibly using the Bulirsch\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Stoer algorithm for handling close encounters with other bodies aka inside SoI? In my experience the Bulirsch\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Stoer Symplectic Integrator introduces less error when close to other bodies than a RK integrator, but the down side is that it can be slow because of step-size prediction.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-21T02:20:14Z","Content":"\n\u003Cp\u003EWelcome to the fora!\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ECaveat lector\u003C/em\u003E: I am not an astrophysicist nor a numerical analyst, I am an undergraduate student in mathematics whose only experience in numerics stems from taking a couple of courses on numerical mathematics, so the statements below reflect my incompetence.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022noblehallett\u0022 data-cite=\u0022noblehallett\u0022\u003E\u003Cdiv\u003EHow is the numerical integration handled as far as units? Is the numerical integration being doing done directly on the in-game untis or is there a unit conversion done to allow for speedier calculations?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI fail to understand how unit conversion would speed up the calculation. They are currently done in an inertial reference frame whose origin lies near the sun. The units are those used by KSP (m for \u003Cstrong\u003Eq\u003C/strong\u003E, m/s for \u003Cstrong\u003Ev\u003C/strong\u003E). Should I switch to furlongs and furlongs per fortnight? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E The reference frame being nonrotating, it is necessary to rotate the result of the integration to use it in KSP, whose reference frame sometimes rotates.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAre you tracking energy and momentum conservation and are you finding that the SPRK is handling orbits well?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/63536-0-23-Alternis-Kerbol-Release-thread-v0-1-Jan-3-New-version-cloud-update?p=891996\u0026amp;viewfull=1#post891996\u0022 rel=\u0022external nofollow\u0022\u003EMy experiments on simulating the Alternis Kerbol system with a satellite in LKO\u003C/a\u003E seemed to show that it performed well as far as errors in \u003Cem\u003EH\u003C/em\u003E, \u003Cem\u003E\u003Cstrong\u003Ep\u003C/strong\u003E\u003C/em\u003E and \u003Cem\u003E\u003Cstrong\u003EL\u003C/strong\u003E\u003C/em\u003E are concerned (the results were similar for reasonably larger timesteps; fifth order convergence was observed). In the current prototype, the timestep is such that the error should be no more a few unit roundoffs anyway.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI see you have reference the Chambers paper, have you looked at possibly using the Bulirsch\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Stoer algorithm for handling close encounters with other bodies aka inside SoI? In my experience the Bulirsch\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Stoer Symplectic Integrator introduces less error when close to other bodies than a RK integrator, but the down side is that it can be slow because of step-size prediction.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have not implemented the smarter integrators yet, but this will be the next step after fixing a few bugs with the moving around of off-rails vessels and a bit of refactoring (the last thing I want is my codebase turning into a mess of spaghetti code before it is even playable).\u003C/p\u003E\u003Cp\u003EI\u0027ll start by implementing the Saha \u0026amp; Tremaine stuff (individual timesteps and separation of the Hamiltonian in \u003Cem\u003EH\u003C/em\u003E = (\u003Cem\u003ET\u003C/em\u003E \u002B \u003Cem\u003EV\u003C/em\u003E\u003Csub\u003ESun\u003C/sub\u003E) \u002B \u003Cem\u003EV\u003C/em\u003E\u003Csub\u003Einteraction\u003C/sub\u003E rather than \u003Cem\u003EH\u003C/em\u003E = \u003Cem\u003ET\u003C/em\u003E \u002B \u003Cem\u003EV\u003C/em\u003E), generalising it to higher orders, and then I\u0027ll see whether it is good enough at the timesteps I will use.\u003C/p\u003E\u003Cp\u003EIf the Saha \u0026amp; Tremaine integrator is not good enough (I suspect this will only be a problem for the dynamic integration, the main integration is almost solved by the current SPRK integrator already, so I\u0027ll be able to use comparatively small timesteps with Saha \u0026amp; Tremaine) I\u0027ll look into the Chambers paper.\u003C/p\u003E\u003Cp\u003EAs for the choice close-encounter integrator, I think I\u0027ll go with the usual method of implementing a few integrators and seeing how they behave in-game.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-21T02:26:25Z\u0022 title=\u002202/21/2014 02:26  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 21, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arq","CreatedById":71084,"CreatedDateTime":"2014-02-21T06:43:48Z","Content":"\n\u003Cp\u003EI started working on some more advanced orbital simulations a few weeks ago. It\u0027s nothing quite so ambitious or well-organized as this project and I don\u0027t work on it often, so I\u0027m excited to see where this goes. Best of luck to you, eggrobin! I\u0027ll be keeping an eye on this.\u003C/p\u003E\n"},{"CreatedByName":"Messelink","CreatedById":104253,"CreatedDateTime":"2014-02-23T19:32:02Z","Content":"\n\u003Cp\u003ESorry if this has been brought up before, I haven\u0027t read the whole thread. I just saw that you were writing your own integrators and wanted to make sure you were aware of the work done by \u003Ca href=\u0022https://en.wikipedia.org/wiki/Sverre_Aarseth\u0022 rel=\u0022external nofollow\u0022\u003ESverre Aarseth\u003C/a\u003E, specifically the \u003Ca href=\u0022http://www.ast.cam.ac.uk/~sverre/web/pages/nbody.htm\u0022 rel=\u0022external nofollow\u0022\u003ENBODY libraries\u003C/a\u003E. NBODY6 has a version that makes use of the GPU for the calculations. I haven\u0027t been able to locate NBODY7 of which the wikipedia page speaks though. Good luck!\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-23T22:57:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Messelink\u0022 data-cite=\u0022Messelink\u0022\u003E\u003Cdiv\u003ESorry if this has been brought up before, I haven\u0027t read the whole thread. I just saw that you were writing your own integrators and wanted to make sure you were aware of the work done by \u003Ca href=\u0022https://en.wikipedia.org/wiki/Sverre_Aarseth\u0022 rel=\u0022external nofollow\u0022\u003ESverre Aarseth\u003C/a\u003E, specifically the \u003Ca href=\u0022http://www.ast.cam.ac.uk/~sverre/web/pages/nbody.htm\u0022 rel=\u0022external nofollow\u0022\u003ENBODY libraries\u003C/a\u003E. NBODY6 has a version that makes use of the GPU for the calculations. I haven\u0027t been able to locate NBODY7 of which the wikipedia page speaks though. Good luck!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I don\u0027t really feel like interfacing with FORTRAN, I want to add some effects beyond point-mass gravitation (thrust, drag etc.) and writing the integrators is the fun part. It seems it is the easy part too (it\u0027s just maths, physics and numerics; the rest involves writing untestable code to interface with an undocumented, buggy and ill-designed API). Speaking of which,\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStatus update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EIt turns out I have trouble properly setting the position when off-rails (finding out where the reference frame actually is is hard).\u003C/p\u003E\u003Cp\u003EHowever, there are some nicer news: I seem to have found the source of the phantom acceleration bias (not the ones arising from rotation, the bias that is removed by timewarping). The floating origin sometimes floats several km away from the ship, so that\u0027s probably just floating-point inaccuracies (the usual Kraken). If that hypothesis turns out to be true, this particular acceleration bias will be easy to fix, just reset the floating origin often enough.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-24T17:17:20Z\u0022 title=\u002202/24/2014 05:17  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 24, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2014-02-24T12:58:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EThe floating origin sometimes floats several km away from the ship, so that\u0027s probably just floating-point inaccuracies (the usual Kraken). \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t know much about these things and this might be unrelated to what you are doing, but i\u0027m pretty sure i remember Harvester saying the floating origin is \u0027reset\u0027 to the position of the ship every 6km or so (so within that 6km range the ship does move relative to the floating origin).\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-24T13:11:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rkman\u0022 data-cite=\u0022rkman\u0022\u003E\u003Cdiv\u003EI don\u0027t know much about these things and this might be unrelated to what you are doing, but i\u0027m pretty sure i remember Harvester saying the floating origin is \u0027reset\u0027 to the position of the ship every 6km or so (so within that 6km range the ship does move relative to the floating origin).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf that is the case (and experiments show it could be the case) it\u0027s pretty silly. They cut physics off at 2.5 km from the ship due in part to floating point inaccuracies, but they allow the ship to be 6 km away from the origin. Frankly, there is no good reason for the ship not to always be at the origin.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-02-24T13:35:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EThey cut physics off at 2.5 km from the ship due in part to floating point inaccuracies[..]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI highly doubt that this 2.5km had anything to do with floating point inaccuracies. They had to choose an arbitrary distance to free up system resources (physics, part logic \u0026amp; rendering) and 2.5-3km seems far enough to make sure the player isn\u0027t interacting with the other ship anymore.\u003C/p\u003E\u003Cp\u003EBtw, there is a public property \u0022threshold\u0022 in FloatingOrigin, so you might want to test whether a smaller value would improve accuracy.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-24T14:35:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003EI highly doubt that this 2.5km had anything to do with floating point inaccuracies. They had to choose an arbitrary distance to free up system resources (physics, part logic \u0026amp; rendering) and 2.5-3km seems far enough to make sure the player isn\u0027t interacting with the other ship anymore.\u003Cp\u003EBtw, there is a public property \u0022threshold\u0022 in FloatingOrigin, so you might want to test whether a smaller value would improve accuracy.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGood points. There\u0027s also setOffset or whatever it\u0027s called, which would enable me to manually set the origin to the ship\u0027s position as often as possible (since all the physics takes place within a sphere, the only sensible location for the origin is at the center of this sphere).\u003C/p\u003E\u003Cp\u003EAnyway, my main concern at the moment is setting the position correctly when off-rails. What I\u0027m doing at the moment differs significantly from Unity\u0027s calculations (i\u0027m diverging from Unity by 1 m after 10 s, so something\u0027s wrong).\u003C/p\u003E\n"},{"CreatedByName":"thorfinn","CreatedById":8349,"CreatedDateTime":"2014-02-24T22:04:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EFrankly, there is no good reason for the ship not to always be at the origin.\u003C/span\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKrakensbane was a patch of an already existing system, I suspect they would have had to rewrite lots of things from scratch to keep the ship always at the origin.\u003C/p\u003E\u003Cp\u003EAlso, remember that it cuts in only above a certain speed - I don\u0027t know where it\u0027s defined, I tried to get into the KSP code a couple times and never had the patience to really manage anything useful.\u003C/p\u003E\u003Cp\u003EOh, by the way, since you\u0027re rewriting dozens of things if you happen to stumble on a way to rewrite the ASAS logic, please tell us (and tell Ferram before anyone else)\u003C/p\u003E\n"},{"CreatedByName":"sgt_flyer","CreatedById":57690,"CreatedDateTime":"2014-02-24T22:11:44Z","Content":"\n\u003Cp\u003ERegarding krakensbane activation speed, it seems to be around 700m/s (as seen while playing with krakendrives - they all fail quite spectaculary when we use them to slow down below this speed) -\u003C/p\u003E\u003Cp\u003E one way to verify if krakensbane code affects your calculations would be to see if you still experience the variation with orbital speeds under 700m/s\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-24T22:16:42Z\u0022 title=\u002202/24/2014 10:16  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 24, 2014\u003C/time\u003E by sgt_flyer\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-24T22:14:00Z","Content":"\n\u003Cp\u003EThe Krakensbane code is managed in the Krakensbane class, and if you can grab a reference to the instance using some type of \u0022find gameobject\u0022 function you might be able to set the velocity cutoff through the public variable MaxV. By default, it\u0027s 750 m/s relative to whatever frame you\u0027re in (rotating or inertial). I know because FAR used to freak out after hitting that velocity shortly after Krakensbane was implemented.\u003C/p\u003E\u003Cp\u003EFor the FloatingOrigin class, I wonder if setting the \u0022continuous\u0022 variable to true would have the same effect as constantly resetting the origin position, if it isn\u0027t set to true already. I do recall that passing 6km used to cause the ship to jump around due to the floating origin shifting if it was slightly deformed, but that doesn\u0027t seem to happen anymore, so I suspect the floating origin is always moving with the ship now.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-24T22:59:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003EThe Krakensbane code is managed in the Krakensbane class, and if you can grab a reference to the instance using some type of \u0022find gameobject\u0022 function you might be able to set the velocity cutoff through the public variable MaxV. By default, it\u0027s 750 m/s relative to whatever frame you\u0027re in (rotating or inertial). I know because FAR used to freak out after hitting that velocity shortly after Krakensbane was implemented.\u003Cp\u003EFor the FloatingOrigin class, I wonder if setting the \u0022continuous\u0022 variable to true would have the same effect as constantly resetting the origin position, if it isn\u0027t set to true already. I do recall that passing 6km used to cause the ship to jump around due to the floating origin shifting if it was slightly deformed, but that doesn\u0027t seem to happen anymore, so I suspect the floating origin is always moving with the ship now.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, it is easy to check that the floating origin isn\u0027t with the ship: just trace the ship\u0027s worldpos. One easily sees that the origin tends to be a few km away until you timewarp (it is properly reset by timewarp). I\u0027m not having any issues with Krakensbane at the moment.\u003C/p\u003E\u003Cp\u003EIt seems the planets aren\u0027t quite where I put them though and this (or something else) is causing problems when trying to set the vessel\u0027s position when off-rails. This is driving me ever so slightly insane. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_huh.gif\u0022 alt=\u0022:confused:\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"BrianMcNett","CreatedById":91783,"CreatedDateTime":"2014-02-27T16:58:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EPhysics engines are not made to handle physics: no-one cares if your bullets are slightly too energetic or pick up angular momentum in a first-person shooter.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is so true! I\u0027m stealing it.\u003C/p\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-02T15:56:42Z","Content":"\n\u003Cp\u003EHey!\u003C/p\u003E\u003Cp\u003EI\u0027m working on something similar, but more from a computational point of view than providing new gameplay. I\u0027m using a Hermite integrator (pumped by a 6th order Yoshida), and I\u0027m using octrees and their duals to cluster distant sources (ie, FMM)-- getting that to run in realtime on a beefy graphics card should be possible albeit not trivial... I\u0027m working with OpenCL and F#, but I\u0027d be very interested in any kind of visualization features in-game if/when you are ready to share the source.\u003C/p\u003E\u003Cp\u003EIf you haven\u0027t read it, this book is awesome;\u003C/p\u003E\u003Cp\u003EGravitational N-Body Simulations, Sverre J Aarseth, Cambridge University Press (2003)\u003C/p\u003E\u003Cp\u003EAarseth is something of a legend among stellar dynamicists and has devoted a long career to the N-body problem.\u003C/p\u003E\u003Cp\u003EEDIT; Found the source on github, good stuff! I applaud your \u0022daring\u0022 use of unicode!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-02T16:31:21Z\u0022 title=\u002203/02/2014 04:31  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 2, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-04T02:13:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027m working on something similar, but more from a computational point of view than providing new gameplay. I\u0027m using a Hermite integrator (pumped by a 6th order Yoshida), and I\u0027m using octrees and their duals to cluster distant sources (ie, FMM)-- getting that to run in realtime on a beefy graphics card should be possible albeit not trivial... I\u0027m working with OpenCL and F#, but I\u0027d be very interested in any kind of visualization features in-game if/when you are ready to share the source.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor KSP, where you have about 20 massive bodies, FMM is probably not worth it. Realtime \u003Cem\u003Eis\u003C/em\u003E completely trivial, it\u0027s the 100_000_000x that you need for dynamic trajectory predictions that might be an issue. I don\u0027t intend to do GPGPU.\u003C/p\u003E\u003Cp\u003EI\u0027m not familiar with Hermite integrators; what is the idea behind those?\u003C/p\u003E\u003Cp\u003ENote that you \u003Cem\u003Ecan\u003C/em\u003E write plugins for KSP entirely in F# if you want (or in C\u002B\u002B/CLI; you need wrappers in one of the other three languages for VB.NET because of case insensitivity). It seems people aren\u0027t quite aware of that, I\u0027ll probably write a PSA about it at some point.\u003C/p\u003E\u003Cp\u003EWhile testing that I discovered that \u003Cstrong\u003Easmi\u003C/strong\u003E was right when conjecturing that Unity doesn\u0027t support mixed-mode DLLs, so if I want to use native code (which would be really nice since you lose vectorisation when using CLR) I\u0027ll have to use DllImports and mess with marshalling by hand. On the upside with this approach you know where the thunks are.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI applaud your \u0022daring\u0022 use of unicode!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWelcome to the nineties! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Admittedly some languages lagged behind, like Ada which only had Unicode identifiers in Ada 2005, but it compensates by having the following in Ada.Numerics:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u00C3\u00E2\u201A\u00AC  : constant := Pi;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEDIT\u003C/p\u003E\u003Cp\u003EAlso, it\u0027s been a while since I\u0027ve done a\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStatus update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI have started doing some refactoring since the sphaghettiness of the code was getting on my nerves.\u003C/p\u003E\u003Cp\u003EI have written strongly typed wrappers for the numerous reference frames spawned by KSP (direct vs. indirect, rotating vs. inertial, world vs. body-centric, etc.) as I have had numerous bugs due to a misplaced xzy, rotation, translation, scaling, inertial force etc.\u003C/p\u003E\u003Cp\u003EOf course, since KSP has the brilliant idea of using \u003Cem\u003Eboth\u003C/em\u003E direct and indirect reference frames, I needed distinct types for vectors, bivectors and trivectors (basically I had to strongly type Grassmann algebras; there can be no cross product, only wedge products, commutators and left and right actions of alternating forms---where \u003Cimg src=\u0022http://mathurl.com/ncnhkgd.png\u0022 alt=\u0022ncnhkgd.png\u0022\u003E is identified with \u003Cimg src=\u0022http://mathurl.com/pynpdhk.png\u0022 alt=\u0022pynpdhk.png\u0022\u003E through the inner product, and \u003Cimg src=\u0022http://mathurl.com/ogat7w6.png\u0022 alt=\u0022ogat7w6.png\u0022\u003E is identified with \u003Cimg src=\u0022http://mathurl.com/qcv7ksx.png\u0022 alt=\u0022qcv7ksx.png\u0022\u003E).\u003C/p\u003E\u003Cp\u003EI do not think I will implement strong typing for physical quantities yet (though I\u0027d like to), since C# generics are not powerful enough for that; I would need C\u002B\u002B templates. I\u0027ll do that when I rewrite things in C\u002B\u002B/CLI.\u003C/p\u003E\u003Cp\u003EThe next step is to implement my own versor, since Unity\u0027s Quaternion is in single-precision float and KSP\u0027s QuaternionD is broken.\u003C/p\u003E\u003Cp\u003EThe rest should be more straightforward refactoring.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-04T02:55:55Z\u0022 title=\u002203/04/2014 02:55  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 4, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-04T12:51:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EFor KSP, where you have about 20 massive bodies, FMM is probably not worth it. Realtime \u003Cem\u003Eis\u003C/em\u003E completely trivial, it\u0027s the 100_000_000x that you need for dynamic trajectory predictions that might be an issue. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re quite right about multipole not being worth it for stock KSP; not only are we dealing with low N but the system is very flat and the rotational aspect completely dominates phase space. On that note, 2D/4D clustering using volumetric 3D space partitioning (octrees) is just silly. If we define a system of say 5 gas giants in the 0.5 \u0026lt; M_Jup \u0026lt; 6 range and put more than an Earth-mass of moons in orbit around each, plus trojans and spartans at the L-points and add a considerable sphere of scattered objects, well \u003Cem\u003Ethen\u003C/em\u003E FMM might be good \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 alt=\u0022:cool:\u0022\u003E (one can dream, right)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI don\u0027t intend to do GPGPU.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMost sane people would not intend to do that. However, in my case, I think I have strong reasons to; but that\u0027s what all crazies say. If I can realise the very simple Yoshida scheme, a 6th order integrator using seven force computations, and parallelize it to the (time) performance of a 3 force computation scheme, it will definitely be worth it. yo6 is essentially the leapfrog called in a pre-3,1,3-corr pattern, which hints at a parallel model . This is what I\u0027m currently working on, but I\u0027m worried about portability despite (or perhaps due to) the grandiose claims by Apple, AMD and nVidia regarding OpenCL.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027m not familiar with Hermite integrators; what is the idea behind those?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA good explanation is here: \u003Ca href=\u0022http://www.artcompsci.org/kali/vol/two_body_problem_2/ch11.html#rdocsect76\u0022 rel=\u0022external nofollow\u0022\u003Ein volume 2, chapter 11\u003C/a\u003E of a lengthy tutorial on the n-body problem that Hut and Makino wrote. The book was never finished, which is a shame because it\u0027s awesome as an introduction for people from other disciplines. \u003C/p\u003E\u003Cp\u003EIn short, it\u0027s a generalization of the leapfrog with nice properties (such as 4th order behaviour). I\u0027m not sure on this one, but I believe there is a way to describe all these \u0022leapfrog in higher orders\u0022 algorithms in terms of partitioned RK schemes, although they quite elegantly escape dependencies on the vectorized representation. Again, that might hint at interesting things -- perhaps a general concurrency scheme for a class of partitioned RK algorithms, which would be pretty awesome. It\u0027s interesting to note how symplectic schemes could arise from a separate branch of reasoning that doesn\u0027t use a Hamiltonian; Aarseth has more on the history in his seminal 2003 work. I\u0027ve seen Yoshida referenced everywhere in the litterature, so I guess I better read up on Lie algebras and Baker\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Campbell\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Hausdorff in order to understand his work ....\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E[snip]\u003C/p\u003E\u003Cp\u003E[...]\u003C/p\u003E\u003Cp\u003EWelcome to the nineties! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Admittedly some languages lagged behind, like Ada which only had Unicode identifiers in Ada 2005, but it compensates by having the following in Ada.Numerics:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u00C3\u00E2\u201A\u00AC  : constant := Pi;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think you\u0027d be surprised at how many companies enforce strict C89 lexical standards in 2014, even if you\u0027re coding something like C# in a fully utf-8 environment. I\u0027ve even seen source control systems that reject check-ins if you don\u0027t use strictly alphanumeric US ASCII extended by only precisely a set of characters from the host language (operators etc). And this in Europe! Inconceivable! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E: To elaborate a bit for the forum and give some praise to Hut and Makino; I really do recommend anyone seriously interested in implementing n-body systems to read (and code along) with the narrative. I\u0027m a computer scientist and amateur astronomer and as such I found everything they had to say about software and development to be rather retro, even for 2007, but skipping those parts gave me a surprisingly detailed understanding of both the physics and math involved in stellar dynamics. I had a layman conceptual understanding and I\u0027d seen animations of such simulations, but after a week of reading/math/coding I was able to move on to Aarseth\u0027s rather compact style and managed to read some more recent papers on the subject, where I have to take the theoretical physics on good faith but can check the numerical bits with general mathematical tools (such as Taylor series and recurrence relations). If you do read the tutorial, do note that I\u0027m one of those who \u003Cstrong\u003Ereally\u003C/strong\u003E think there should be hats on those f\u0027s! Otherwise you are proving structural equality between E an v!\u003C/p\u003E\u003Cp\u003ECheck it out (like eggrobin said: welcome to the nineties!): \u003Ca href=\u0022http://www.artcompsci.org/kali/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.artcompsci.org/kali/\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-04T16:11:23Z\u0022 title=\u002203/04/2014 04:11  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 4, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003Cbr\u003EHut and Makino are great!\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-04T22:41:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003EYou\u0027re quite right about multipole not being worth it for stock KSP; not only are we dealing with low N but the system is very flat and the rotational aspect completely dominates phase space. On that note, 2D/4D clustering using volumetric 3D space partitioning (octrees) is just silly. If we define a system of say 5 gas giants in the 0.5 \u0026lt; M_Jup \u0026lt; 6 range and put more than an Earth-mass of moons in orbit around each, plus trojans and spartans at the L-points and add a considerable sphere of scattered objects, well \u003Cem\u003Ethen\u003C/em\u003E FMM might be good \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 alt=\u0022:cool:\u0022\u003E (one can dream, right)\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWe\u0027ll have asteroids to deal with in 0.24, so that\u0027s not completely out of scope. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI believe there is a way to describe all these \u0022leapfrog in higher orders\u0022 algorithms in terms of partitioned RK schemes,\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u0022leapfrog in higher orders\u0022 is pretty much what SPRKs are about, though a stricter generalisation of leapfrog is an FSAL SPRK. They give some really nice explanations for the idea behind the SPRKs in this book though, rather than expressing them all as a bunch of coefficients. I think I\u0027ll add it to the recommended reading section, it looks pretty accessible.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI\u0027ve seen Yoshida referenced everywhere in the litterature, so I guess I better read up on Lie algebras and Baker\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Campbell\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Hausdorff in order to understand his work ....\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027ll have a hard time doing that, since papers about symplectic integrators assume you know what this is all about and general treatments of the Baker-Campbell-Hausdorff formula fail to mention the relation to Hamiltonian mechanics. Here\u0027s a rough outline, you should be able to fill in the blanks from \u003Cem\u003EWikipedia\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003E-- Notations: \u003C/p\u003E\u003Cp\u003EM is the phase space, in this case \u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u003Csup\u003E3N\u003C/sup\u003E\u00C3\u0192\u00E2\u20AC\u201D(\u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u003Csup\u003E3N\u003C/sup\u003E)\u003Csup\u003E*\u003C/sup\u003E; \u003C/p\u003E\u003Cp\u003E{ . , . } : C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M)\u003Csup\u003E2\u003C/sup\u003E \u00C3\u00A2\u00E2\u20AC\u00A0\u00E2\u20AC\u2122 C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M) is the Poisson bracket;\u003C/p\u003E\u003Cp\u003E{f, . } := g \u00C3\u00A2\u00E2\u20AC\u00A0\u00C2\u00A6 {f, g}, \u003Cem\u003Ei.e.\u003C/em\u003E, {f, . } g = {f, g}, so that {f, . } is a linear endomorphism of the space C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M) of smooth functions of the phase space.\u003C/p\u003E\u003Cp\u003EWe want the solution \u003Cstrong\u003Ez\u003C/strong\u003E to \u003Cstrong\u003Ez\u003C/strong\u003E\u0027 = -{H, \u003Cstrong\u003Ez\u003C/strong\u003E} (Hamilton\u0027s equations, where \u003Cstrong\u003Ez\u003C/strong\u003E = (\u003Cstrong\u003Eq\u003C/strong\u003E, \u003Cstrong\u003Ep\u003C/strong\u003E) are the generalised coordinates).\u003C/p\u003E\u003Cp\u003EIt is of course given by the exponential of the linear operator applied to the initial conditions, \u003Cstrong\u003Ez\u003C/strong\u003E = exp(-t {H, . }) \u003Cstrong\u003Ez\u003C/strong\u003E\u003Csub\u003E0\u003C/sub\u003E, so that \u003Cstrong\u003Ez\u003C/strong\u003E(\u00C3\u00E2\u20AC\u017E) = exp(-{\u00C3\u00E2\u20AC\u017E H, . }) \u003Cstrong\u003Ez\u003C/strong\u003E\u003Csub\u003E0\u003C/sub\u003E, where \u00C3\u00E2\u20AC\u017E is the timestep.\u003C/p\u003E\u003Cp\u003EWe take smooth functions f(\u003Cstrong\u003Eq\u003C/strong\u003E, \u003Cstrong\u003Ep\u003C/strong\u003E) and g(\u003Cstrong\u003Eq\u003C/strong\u003E, \u003Cstrong\u003Ep\u003C/strong\u003E) in C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M) (H, \u003Cstrong\u003Ez\u003C/strong\u003E = \u003Cstrong\u003Eid\u003C/strong\u003E, \u003Cstrong\u003EL\u003C/strong\u003E, \u003Cstrong\u003Ep\u003C/strong\u003E, the Lagrangian \u00C3\u00A2\u00E2\u20AC\u017E\u00E2\u20AC\u2122, T, V, are examples of such functions) and look at the commutator of the linear operators {f, . } and {g, . }:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[{f, . }, {g, . }] = {f, . } {g, . } - {g, . } {f, . } \u003Cbr\u003E                   = {f, {g, . }} - {g, {f, . }} \u003Cbr\u003E                   = {f, {g, . }} \u002B {g, { . , f}}      -- As the Poisson bracket is antisymmetric,\u003Cbr\u003E                   = - { . , {f, g}}                   -- As the Poisson bracket satisfies the Jacobi identity,\u003Cbr\u003E                   = {{f, g}, . }                      -- Antisymmetry.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt follows that the commutator on the operators of the form {f, . } works essentially like the Poisson bracket, so it will satisfy the Jacobi identity too. It is bilinear and alternating, and the {f, . }s form a vector space, so it is a Lie algebra.\u003C/p\u003E\u003Cp\u003ENote that we actually started with the Lie algebra (C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M), { . , . }), whose the Lie bracket was the Poisson bracket (a Poisson algebra, mathematicians have creative naming conventions), what we just did was taking the adjoint representation (see the relevant \u003Cem\u003EWikipedia\u003C/em\u003E article), thus getting a subalgebra of End(C\u003Csup\u003E\u00C3\u00A2\u00CB\u2020\u00C5\u00BE\u003C/sup\u003E(M)). The usual notation for the adjoint representation is ad f := {f, . }; I\u0027ll use this notation from now on, the brackets are getting rather cumbersome.\u003C/p\u003E\u003Cp\u003EBack to the problem at hand, finding exp(\u00C3\u00E2\u20AC\u017E ad H). We have H = T \u002B V (or some other partition of the Hamiltonian). We want to know how to write exp(\u00C3\u00E2\u20AC\u017E ad(T \u002B V)) = exp(\u00C3\u00E2\u20AC\u017E ad T \u002B \u00C3\u00E2\u20AC\u017E ad V) as a function of exp(\u00C3\u00E2\u20AC\u017E ad T) and exp(\u00C3\u00E2\u20AC\u017E ad V), the separate evolutions. ad T and ad V don\u0027t commute, so it\u0027s not just the product. The Baker-Campbell-Hausdorff formula tells you just that: it says\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elog(exp(\u00C3\u00E2\u20AC\u017E ad T) exp(\u00C3\u00E2\u20AC\u017E ad V)) = \u00C3\u00E2\u20AC\u017E ad T \u002B \u00C3\u00E2\u20AC\u017E ad V \u002B 1/2 [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V] \u002B 1/12 [\u00C3\u00E2\u20AC\u017E ad T, [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V]] - 1/12 [\u00C3\u00E2\u20AC\u017E ad V, [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V]] \u002B ...\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI think this should enable you to read Yoshida\u0027s works.\u003C/p\u003E\u003Cp\u003EI would recommend starting with Yoshida\u0027s \u003Ca href=\u0022http://articles.adsabs.harvard.edu/cgi-bin/nph-iarticle_query?1992IAUS..152..407Y\u0026amp;defaultprint=YES\u0026amp;filetype=.pdf\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cem\u003ESymplectic Integrators for Hamiltonian Systems: Basic Theory\u003C/em\u003E\u003C/a\u003E [Yoshida 1992] in order to see the general definitions and ideas, his 1990 paper \u003Cem\u003EConstruction of higher order symplectic integrators\u003C/em\u003E focuses only on proving that such integrators exist, with no concern for efficiency, and only talks about even-order integrators. See the discussion with Wisdom at the end of [Yoshida 1992].\u003C/p\u003E\u003Cp\u003EThe main idea is the same as for Runge-Kutta (see my introduction linked in the OP) except instead of trying to match terms in the Taylor expansion of the solution, you try to match terms in the Baker-Campbell-Hausdorff formula: the convergence rate is for the Hamiltonian here. Of course you do that by composing symplectic maps so that you don\u0027t have an energy drift. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI think you\u0027d be surprised at how many companies enforce strict C89 lexical standards in 2014, even if you\u0027re coding something like C# in a fully utf-8 environment. I\u0027ve even seen source control systems that reject check-ins if you don\u0027t use strictly alphanumeric US ASCII extended by only precisely a set of characters from the host language (operators etc). And this in Europe! Inconceivable! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWe\u0027ll always have Mordac.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Ethere should be hats on those f\u0027s!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhich f\u0027s?\u003C/p\u003E\u003Cp\u003EUnrelated: while investigating formalisations of physical quantities and reference frames, I found \u003Ca href=\u0022http://terrytao.wordpress.com/2012/12/29/a-mathematical-formalisation-of-dimensional-analysis/\u0022 rel=\u0022external nofollow\u0022\u003Ethis fascinating post by Terence Tao\u003C/a\u003E. It turns out that deep down formalising them works similarly. The post is pretty enlightening: it give a clue as to how to formalise the fact an average of temperatures makes sense, a difference of temperatures makes sense, a sum of temperature differences makes sense, but a sum of temperatures doesn\u0027t (or similarly, why a barycenter makes sense while a sum of positions doesn\u0027t).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-05T10:06:22Z\u0022 title=\u002203/05/2014 10:06  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 5, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003Cbr\u003Esigns.\n\u003C/span\u003E\n"},{"CreatedByName":"Pockrtplanesairways","CreatedById":101834,"CreatedDateTime":"2014-03-04T23:44:22Z","Content":"\n\u003Cp\u003EI\u0027m still in algebra and failing.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-05T00:05:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Pockrtplanesairways\u0022 data-cite=\u0022Pockrtplanesairways\u0022\u003E\u003Cdiv\u003EI\u0027m still in algebra and failing.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf the date of birth in your profile is accurate, I would be rather surprised if you understood the above post. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI would however wholeheartedly recommend reading the bits of Feynman linked in the OP, I first learned calculus there when I was about your age. His style is very pleasant and his explanations are quite intuitive.\u003C/p\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-05T00:19:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EWe\u0027ll have asteroids to deal with in 0.24, so that\u0027s not completely out of scope. \u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E \u003Cp\u003EI didn\u0027t know that. Cool!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E We want to know how to write exp(\u00C3\u00E2\u20AC\u017E ad(T \u002B V)) = exp(\u00C3\u00E2\u20AC\u017E ad T \u002B \u00C3\u00E2\u20AC\u017E ad V) as a function of exp(\u00C3\u00E2\u20AC\u017E ad T) and exp(\u00C3\u00E2\u20AC\u017E ad V), the separate evolutions. ad T and ad V don\u0027t commute, so it\u0027s not just the product. The Baker-Campbell-Hausdorff formula tells you just that: it says\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elog(exp(\u00C3\u00E2\u20AC\u017E ad T) exp(\u00C3\u00E2\u20AC\u017E ad V)) = \u00C3\u00E2\u20AC\u017E ad T \u002B \u00C3\u00E2\u20AC\u017E ad V \u002B 1/2 [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V] \u002B 1/12 [\u00C3\u00E2\u20AC\u017E ad T, [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V]] - 1/12 [\u00C3\u00E2\u20AC\u017E ad V, [\u00C3\u00E2\u20AC\u017E ad T, \u00C3\u00E2\u20AC\u017E ad V]] \u002B ...\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI think this should enable you to read Yoshida\u0027s \u003Cem\u003EConstruction of higher order symplectic integrators\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat made sense to me, thanks! So there really is a connection to derivations in algebras in all this; to me that\u0027s really cool. Coming from a background in category theory as applied in computer science, it makes sense for me to think in terms of Der (or indeed modules on rings). Wikipedia can be surprisingly helpful when it comes to natural sciences and abstract nonsense. This all does look like bad news for my proposed parallelization scheme, though; if my intuition serves me right here then non-commutative ad T and ad V implies a concurrency barrier-- ie that would say that the order of evaluation is critical to the choice of coefficients. If so, it would also explain why all parallel integrators I have found \u0022in the wild\u0022 are strictly data parallel! (EDIT: Yup, Equations 17, 24-26 of the Yoshida article linked pretty much spell that out in plain!)\u003C/p\u003E\u003Cp\u003E This is cool stuff, I\u0027m learning tons! \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhich f\u0027s?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ef(E, V) = f(E)\u003C/p\u003E\u003Cp\u003EThere\u0027s a dialouge in the Kali Book about how this sloppy formula might mean something very different to a student of another field; indeed to me that formula is saying something about morphisms and commuting diagrams that can only be true if the morphism mapping E and V is fully contained in morphism mapping only E (the \u00C3\u00A2\u00E2\u20AC\u00A0\u00E2\u20AC\u2122 direction) and f(E) contains no objects not in f(.,V) (the \u00C3\u00A2\u00E2\u20AC\u00A0\u00C2 direction). For example, in a programming language that has currying and first-class functions, there is exactly one function satisfying the previous; the identity function.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-05T02:14:23Z\u0022 title=\u002203/05/2014 02:14  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 5, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003Cbr\u003EYoshida is pretty smart\n\u003C/span\u003E\n"}]}