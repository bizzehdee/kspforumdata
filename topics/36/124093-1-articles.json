{"TopicId":124093,"ForumId":36,"TopicTitle":"Editor and thumbnail questions","CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2015-10-30T14:47:47Z","PageNum":1,"Articles":[{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2015-10-30T14:47:47Z","Content":"\n\u003Cp\u003EHi,\u003C/p\u003E\u003Cp\u003Efirst, thanks to all who\u0027ve answered my questions in the past.\u003C/p\u003E\u003Cp\u003ENow, two new ones:\u003C/p\u003E\u003Cp\u003E1. Is it possible to know if a currently loaded craft in the editor has been changed since it was loaded or last saved?\u003C/p\u003E\u003Cp\u003E2. I\u0027m currently using the CraftThumbnail.TakeSnapshot function to get a square picture of a ship. The problem is that it only has the ability to take a square picture, and I\u0027d like to somehow be able to take a rectangular picture (ie: 16:10). Is there any way to do this?\u003C/p\u003E\u003Cp\u003EThanks in advance\u003C/p\u003E\u003Cp\u003ELGG\u003C/p\u003E\u003Cp\u003EJust answered my first question:\u003C/p\u003E\u003Cp\u003E GameEvents.onEditorShipModified.Add(onCraftChange);\u003C/p\u003E\u003Cp\u003E private void onCraftChange(ShipConstruct craft) {}\u003C/p\u003E\u003Cp\u003Eand this for when a ship is loaded:\u003C/p\u003E\u003Cp\u003EGameEvents.onEditorLoad\u003C/p\u003E\u003Cp\u003ENow I need to figure out how to know when a ship was saved. Answers would be welcome (if I don\u0027t get it first)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-30T15:49:29Z\u0022 title=\u002210/30/2015 03:49  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 30, 2015\u003C/time\u003E by linuxgurugamer\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-10-30T23:19:46Z","Content":"\n\u003Cp\u003EHmm, I don\u0027t know if it would work in the editor, but there is a way to create a new camera and place the camera output into a texture which can have a separate width/height which, I think, can then be exported similar to the taking of a screenshot.\u003C/p\u003E\u003Cp\u003EI would look into how that plugin (oh what\u0027s the name of it... crud, my brain isn\u0027t cooperating... that mod which created those blueprint-like images of your craft...) did it and take inspiration from that. \u003Cem\u003EIt\u003C/em\u003E was able to automatically detect the cubic dimensions of the craft and alter the size of the view area and, ultimately, the size of the exported image based on the vessel\u0027s dimensions and keep track of changes to the craft while the viewing area was visible.\u003C/p\u003E\u003Cp\u003EI suspect that the VesselView plugin, for in-flight and, with JSI, MFD-style views of the craft in wire-frame, could provide some tips on such things, but again I don\u0027t know if it would function quite right in the editor.\u003C/p\u003E\u003Cp\u003EEverything else you\u0027re looking for is likely already in an event that\u0027s fired. The plugin that allows you to keep a history of your craft\u0027s saves (again, I\u0027m blanking on the details) surely needed to get a hold of craft saving times to do its thing.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-30T23:22:02Z\u0022 title=\u002210/30/2015 11:22  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 30, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2015-11-01T23:04:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEverything else you\u0027re looking for is likely already in an event that\u0027s fired. The plugin that allows you to keep a history of your craft\u0027s saves (again, I\u0027m blanking on the details) surely needed to get a hold of craft saving times to do its thing.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re thinking of CraftHistory, and I\u0027ve already looked at that, I\u0027m also contacting SpaceTiger about it. Unfortunately, he overloads the \u0022save\u0022 button, and if I do that, our mods will conflict with each other.\u003C/p\u003E\u003Cp\u003EI don\u0027t understand why there is GameEvent.onEditorLoad and not something similar for saving.\u003C/p\u003E\u003Cp\u003ELGG\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-11-02T07:32:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022linuxgurugamer\u0022 data-cite=\u0022linuxgurugamer\u0022\u003E\u003Cdiv\u003EYou\u0027re thinking of CraftHistory, and I\u0027ve already looked at that, I\u0027m also contacting SpaceTiger about it. Unfortunately, he overloads the \u0022save\u0022 button, and if I do that, our mods will conflict with each other.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOnly because he does not call the original method and instead overwrites what\u0027s already there. There are a number of ways around it. The easiest one is just to use a lower level callback directly:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EditorAny, false)]\u003Cbr\u003Epublic class CraftHistoryButtonCallbackLowLevel : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        EditorLogic.fetch.loadBtn.AddValueChangedDelegate(OnLoadButtonClicked);\u003Cbr\u003E        EditorLogic.fetch.saveBtn.AddValueChangedDelegate(OnSaveButtonClicked);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnSaveButtonClicked(IUIObject uiObject)\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Save button was clicked\u0022);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnLoadButtonClicked(IUIObject uiObject)\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Load button was clicked\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnother is to do something similar to him, but store the details of the target method and call it yourself. I\u0027ve built in a delay here so that his addon runs first (if installed), and then any changes he\u0027s made are captured for reuse:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EditorAny, false)]\u003Cbr\u003Epublic class CraftHistoryButtonCallback : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private IEnumerator Start()\u003Cbr\u003E    {\u003Cbr\u003E        yield return new WaitForEndOfFrame();\u003Cbr\u003E\u003Cbr\u003E        gameObject.AddComponent\u0026lt;EditorHooks\u0026gt;().OnEditorSave \u002B= OnShipSaved;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnShipSaved()\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Callback for OnShipSaved received\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Epublic class EditorHooks : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public event Callback OnEditorSave = delegate { };\u003Cbr\u003E\u003Cbr\u003E    private MonoBehaviour _originalSaveScript;\u003Cbr\u003E    private string _originalSaveMethodName;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void Awake()\u003Cbr\u003E    {\u003Cbr\u003E        var logic = EditorLogic.fetch;\u003Cbr\u003E\u003Cbr\u003E        _originalSaveMethodName = logic.saveBtn.methodToInvoke;\u003Cbr\u003E        _originalSaveScript = logic.saveBtn.scriptWithMethodToInvoke;\u003Cbr\u003E\u003Cbr\u003E        logic.saveBtn.scriptWithMethodToInvoke = this;\u003Cbr\u003E        logic.saveBtn.methodToInvoke = \u0022HookedEditorSave\u0022;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void HookedEditorSave()\u003Cbr\u003E    {\u003Cbr\u003E        OnEditorSave();\u003Cbr\u003E\u003Cbr\u003E        // disabled because CraftHistory has overloaded \u0022saveCraft\u0022 method and Unity complains\u003Cbr\u003E        //_originalSaveScript.SendMessage(_originalSaveMethodName, SendMessageOptions.RequireReceiver);\u003Cbr\u003E\u003Cbr\u003E        // because we don\u0027t know whether the target method is potentially static, public etc ... we do know we\u0027re looking\u003Cbr\u003E        // for one that takes no arguments\u003Cbr\u003E        var methodInfo = _originalSaveScript.GetType()\u003Cbr\u003E            .GetMethod(_originalSaveMethodName,\u003Cbr\u003E                BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic,\u003Cbr\u003E                null, new Type[] {}, null);\u003Cbr\u003E\u003Cbr\u003E        if (methodInfo == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogWarning(\u0022Did not find a method called \u0022 \u002B _originalSaveMethodName \u002B \u0022 on \u0022 \u002B\u003Cbr\u003E                                _originalSaveScript.GetType().FullName);\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            methodInfo.Invoke(_originalSaveScript, new object[] {});\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2015-11-02T16:07:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EOnly because he does not call the original method and instead overwrites what\u0027s already there. There are a number of ways around it. The easiest one is just to use a lower level callback directly:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EditorAny, false)]\u003Cbr\u003Epublic class CraftHistoryButtonCallbackLowLevel : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        EditorLogic.fetch.loadBtn.AddValueChangedDelegate(OnLoadButtonClicked);\u003Cbr\u003E        EditorLogic.fetch.saveBtn.AddValueChangedDelegate(OnSaveButtonClicked);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnSaveButtonClicked(IUIObject uiObject)\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Save button was clicked\u0022);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnLoadButtonClicked(IUIObject uiObject)\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Load button was clicked\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnother is to do something similar to him, but store the details of the target method and call it yourself. I\u0027ve built in a delay here so that his addon runs first (if installed), and then any changes he\u0027s made are captured for reuse:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EditorAny, false)]\u003Cbr\u003Epublic class CraftHistoryButtonCallback : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private IEnumerator Start()\u003Cbr\u003E    {\u003Cbr\u003E        yield return new WaitForEndOfFrame();\u003Cbr\u003E\u003Cbr\u003E        gameObject.AddComponent\u0026lt;EditorHooks\u0026gt;().OnEditorSave \u002B= OnShipSaved;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnShipSaved()\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022Callback for OnShipSaved received\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Epublic class EditorHooks : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public event Callback OnEditorSave = delegate { };\u003Cbr\u003E\u003Cbr\u003E    private MonoBehaviour _originalSaveScript;\u003Cbr\u003E    private string _originalSaveMethodName;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void Awake()\u003Cbr\u003E    {\u003Cbr\u003E        var logic = EditorLogic.fetch;\u003Cbr\u003E\u003Cbr\u003E        _originalSaveMethodName = logic.saveBtn.methodToInvoke;\u003Cbr\u003E        _originalSaveScript = logic.saveBtn.scriptWithMethodToInvoke;\u003Cbr\u003E\u003Cbr\u003E        logic.saveBtn.scriptWithMethodToInvoke = this;\u003Cbr\u003E        logic.saveBtn.methodToInvoke = \u0022HookedEditorSave\u0022;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void HookedEditorSave()\u003Cbr\u003E    {\u003Cbr\u003E        OnEditorSave();\u003Cbr\u003E\u003Cbr\u003E        // disabled because CraftHistory has overloaded \u0022saveCraft\u0022 method and Unity complains\u003Cbr\u003E        //_originalSaveScript.SendMessage(_originalSaveMethodName, SendMessageOptions.RequireReceiver);\u003Cbr\u003E\u003Cbr\u003E        // because we don\u0027t know whether the target method is potentially static, public etc ... we do know we\u0027re looking\u003Cbr\u003E        // for one that takes no arguments\u003Cbr\u003E        var methodInfo = _originalSaveScript.GetType()\u003Cbr\u003E            .GetMethod(_originalSaveMethodName,\u003Cbr\u003E                BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic,\u003Cbr\u003E                null, new Type[] {}, null);\u003Cbr\u003E\u003Cbr\u003E        if (methodInfo == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogWarning(\u0022Did not find a method called \u0022 \u002B _originalSaveMethodName \u002B \u0022 on \u0022 \u002B\u003Cbr\u003E                                _originalSaveScript.GetType().FullName);\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            methodInfo.Invoke(_originalSaveScript, new object[] {});\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks.\u003C/p\u003E\u003Cp\u003EYour ideas (especially the first one) are great. This is getting much deeper into Unity than I have ever gone, will be a big help for me when I need it.\u003C/p\u003E\u003Cp\u003EThanks alot\u003C/p\u003E\u003Cp\u003ELGG\u003C/p\u003E\n"}]}