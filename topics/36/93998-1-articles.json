{"TopicId":93998,"ForumId":36,"TopicTitle":"Simple Module-Manager Plugin","CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-21T14:42:33Z","PageNum":1,"Articles":[{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-21T14:42:33Z","Content":"\n\u003Cp\u003EI want to make a plugin that performs simple modifications to all parts. All it would do is scale all drag coefficient values by:\u003C/p\u003E\u003Cp\u003EC_d_new = C_d_old / mass * Cross-sectional-Area / 0.008\u003C/p\u003E\u003Cp\u003EHow would i got about doing this? Do i even need a compiler, or can i write the modifications for module-manager to perform? Furthermore, can mass and cross-sectional area be taken dynamically from the part information or do i have to know the values for each part?\u003C/p\u003E\n"},{"CreatedByName":"Starman4308","CreatedById":122674,"CreatedDateTime":"2014-12-21T15:08:03Z","Content":"\n\u003Cp\u003EArkie, what you\u0027re trying to do is ambiguous, particularly at the cross-sectional area part. If you assume a certain orientation, you might be able to write a MM config which scales the minimum_drag and maximum_drag values so that the math works out to give you a sane drag value. This would essentially be stock aero with drag values cleverly scaled to divide out the mass and hard-coded 0.008, and instead use some default Cd*cross-section. However, if you plan to do anything like exposed cross-sectional area, or orientation-dependent cross-section, you\u0027re going to need to write a plugin.\u003C/p\u003E\u003Cp\u003EEDIT: I\u0027m not sure how much math you can do in an MM config, so there\u0027s a good chance you would have to plug in the values into a spreadsheet, and then manually patch the drag values for each and every part. I know you can do some things using math in MM configs, but you\u0027d need to parse out the object size out of the part config, and that\u0027s no easy task.\u003C/p\u003E\u003Cp\u003EAlso, aerodynamics under such an MM config-based model would be downright weird. You\u0027ve destroyed the \u0022drag centered at mass\u0022 assumption which makes stock aero kinda work, and it\u0027s still not going to act like a realistic aerodynamics model.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-21T15:12:06Z\u0022 title=\u002212/21/2014 03:12  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 21, 2014\u003C/time\u003E by Starman4308\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-21T16:06:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starman4308\u0022 data-cite=\u0022Starman4308\u0022\u003E\u003Cdiv\u003EArkie, what you\u0027re trying to do is ambiguous, particularly at the cross-sectional area part. If you assume a certain orientation, you might be able to write a MM config which scales the minimum_drag and maximum_drag values so that the math works out to give you a sane drag value. This would essentially be stock aero with drag values cleverly scaled to divide out the mass and hard-coded 0.008, and instead use some default Cd*cross-section. However, if you plan to do anything like exposed cross-sectional area, or orientation-dependent cross-section, you\u0027re going to need to write a plugin.\u003Cp\u003EEDIT: I\u0027m not sure how much math you can do in an MM config, so there\u0027s a good chance you would have to plug in the values into a spreadsheet, and then manually patch the drag values for each and every part. I know you can do some things using math in MM configs, but you\u0027d need to parse out the object size out of the part config, and that\u0027s no easy task.\u003C/p\u003E\u003Cp\u003EAlso, aerodynamics under such an MM config-based model would be downright weird. You\u0027ve destroyed the \u0022drag centered at mass\u0022 assumption which makes stock aero kinda work, and it\u0027s still not going to act like a realistic aerodynamics model.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo if i can call part diameter dynamically, then i can calculate cross sectional area (assuming zero AoA) i.e. A_c = pi D^2 /4. Is there a way to dynamically call part diameter and part mass? \u003C/p\u003E\u003Cp\u003EExactly, i\u0027m trying to undo the assumption of A = 0.008 m, by adjusting C_d (instead of changing how KSP treats aerodynamics altogether like NEAR and FAR). This would create some interesting phenomena, such as longer fuel tanks having reduced drag while shorter parts assembled to the same length would have more drag proportional to the square of the number of parts.\u003C/p\u003E\u003Cp\u003EYeah, i\u0027m worried about that. I was thinking maybe i should just try to manually do this via part file edits and see what happens. I dont agree that it would destroy the drag centered at mass assumption. The center of mass wouldnt change (obviously); the center of drag/lift would though...\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-21T17:41:50Z","Content":"\n\u003Cp\u003ESo I\u0027ve gotten this to work:\u003C/p\u003E\u003Cp\u003E@PART[fuelTank]\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E@minimum_drag = 0.122718463\u003C/p\u003E\u003Cp\u003E@maximum_drag = 0.122718463\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EHowever, i\u0027d like to be able to calculate the given value dynamically:\u003C/p\u003E\u003Cp\u003E@PART[fuelTank]\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E@diameter = 1.25\u003C/p\u003E\u003Cp\u003E@minimum_drag *= 3.14159*@diameter^2/4/0.008/@mass\u003C/p\u003E\u003Cp\u003E@maximum_drag *= 3.14159*@diameter^2/4/0.008/@mass\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EOr something like that, where diameter i have to define (since its not in there). \u003C/p\u003E\u003Cp\u003EIs there a way to call part properties dynamically?\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-12-21T21:44:17Z","Content":"\n\u003Cp\u003EAnd how do you plan to find out diameter?\u003C/p\u003E\u003Cp\u003EAlso, you do realize mass changes in flight, right? Resources get added or removed.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-21T22:38:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EAnd how do you plan to find out diameter?\u003Cp\u003EAlso, you do realize mass changes in flight, right? Resources get added or removed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDiameter is available for standard parts, but i would have to manually add a new field called diameter. Alternatively, i could ignore it.\u003C/p\u003E\u003Cp\u003EI am aware of that, but Starwaster\u0027s stock drag fix takes care of this \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/84978-0-90-Stock-Drag-Fix-Dec-16-2014\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/84978-0-90-Stock-Drag-Fix-Dec-16-2014\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI am looking to take care of the fact that drag coefficients are unrealistically large, especially for heavy parts, since drag is proportional to mass, by scaling drag coeffiicents by mass to remove dependency.\u003C/p\u003E\u003Cp\u003EI think with my fix combined with Starwaster\u0027s would make stock terminal velocities closer to NEAR or FAR, without the added complexity. Though, apparently Maxmaps announced new update will have (improved) aerodynamics so it might be obsolete soon...\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-22T09:14:32Z","Content":"\n\u003Cp\u003EI think you\u0027d definitely need to write a plugin for that. Currently we don\u0027t have the ability to reference other part parameters in complex equations. The best you can do it maybe use some advanced MM patching stuff to reference the parameter\u0027s old value to calculate the new one, but that would be the limit currently.\u003C/p\u003E\n"},{"CreatedByName":"arkie87","CreatedById":103434,"CreatedDateTime":"2014-12-22T15:10:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EI think you\u0027d definitely need to write a plugin for that. Currently we don\u0027t have the ability to reference other part parameters in complex equations. The best you can do it maybe use some advanced MM patching stuff to reference the parameter\u0027s old value to calculate the new one, but that would be the limit currently.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo I asked Sarbian and he gave me this format:\u003C/p\u003E\u003Cp\u003ESo it is possible to dynamically call the parts mass. Part diameter doesnt exist, so i would have to write a patch for each part or group of parts to add a diameter property.\u003C/p\u003E\u003Cp\u003E@Part[*]:Final\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E@maximum_drag /=#$mass$\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\n"}]}