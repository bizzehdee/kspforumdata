{"TopicId":59040,"ForumId":36,"TopicTitle":"[WIP] Jebnix - A kOS Alternative","CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:35:42Z","PageNum":1,"Articles":[{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:35:42Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv style=\u0022text-align:center;\u0022\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EJebnix - A kOS Alternative\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EA \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Efew months\u003C/span\u003E year and a half ago, I considered writing a kOS alternative that could do what kOS does and more. As the kOS situation deteriorated, I\u0027ve decided it\u0027s about time I get to work. This thread is to serve as a place for discussion during the active development of this project. I want the kOS community and KSP community at large to be participants in the development of this mod. Without your support and encouragement, projects like this aren\u0027t possible. Also, I\u0027m sure there are more than a few people that know the Kerboscript language even better than I do and can help me get the implementation details right.\u003C/p\u003E\u003Cp\u003EGithub Repository: \u003Ca href=\u0022https://github.com/griderd/Jebnix\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EOfficial (incomplete, more of a to-do list) Feature List: \u003Ca href=\u0022https://github.com/griderd/Jebnix/wiki/Official-Features\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix/wiki/Official-Features\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EGoal: Jebnix will do everything kOS can do, using an enhanced version of the kOS language, while fixing many of the bugs and problems in kOS\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003EI\u0027m still working on the feature list, but this is what I hope to accomplish:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003ECompatibility with KerboScript 0.9x\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EAn enhanced language capability.\u003C/strong\u003E Think of it as KerboScript\u002B\u002B.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ESimplified codebase.\u003C/strong\u003E I\u0027m starting from scratch,\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EFormal language specification, and implementation details.\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EBetter error handling\u003C/strong\u003E, which provides the script name and location of the error, and what the problem actually is (\u0022Missing \u0027.\u0027\u0022, \u0022Bracket mismatch\u0022, etc).\u003Cbr\u003E\u003Cimg src=\u0022http://i1269.photobucket.com/albums/jj600/woodywood245/Jebnix/Screenshot2014-02-23162958.png\u0022 alt=\u0022Screenshot2014-02-23162958.png\u0022\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ERuntime exception handling.\u003C/strong\u003E A TRY... CATCH block would be handy.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EELSE and IF ELSE blocks.\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EEnhanced WHEN... THEN capability.\u003C/strong\u003E Unambiguously allows an entire block of code to be executed on a WHEN... THEN instance.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EPersistant WHEN... THEN.\u003C/strong\u003E Sometimes you want to fire a WHEN... THEN event more than once, which means you usually have to put it in a loop. To avoid this, WHENEVER... THEN will do the same as WHEN... THEN but will not go away once it\u0027s been fired.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EVariable scope.\u003C/strong\u003E Variables created with the LOCAL keyword would exist in their local scope. If defined inside of a block, they would be removed once the block ends. If defined in the global area of a script, they exist as long as the script is running. Variables created without the LOCAL keyword exist as global variables like normal.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EArrays\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EReturn values.\u003C/strong\u003E Scripts would be able to return values that could be assigned directly from scripts. You would no longer have to assign to a global variable before exiting. Instead, the \u0022RETURN\u0022 keyword would be used. As a result, the RUN keyword would not be necessary to run a script.\u003Cbr\u003E\u003Cdiv\u003E\u003Cbr\u003Eset x to subscript().\u003Cbr\u003E\u003Cbr\u003E// subscript.txt\u003Cbr\u003Ereturn apoapsis.\u003Cbr\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003C/pre\u003E\u003Cp\u003E\u003Cbr\u003EIn this script, x would be assigned the apoapsis. The RUN keyword becomes unnecessary with the parentheses there. The engine would see the parentheses, and based on context determine that this is a function call. It would then search the internal and external function lists for a function named \u0022subscript\u0022. When it doesn\u0027t find it, it looks through the file list for a script called \u0022subscript\u0022 and executes that instead. The RETURN keyword pushes the apoapsis onto the stack, and it is popped off again and assigned to x later on.\u003Cbr\u003E\u003C/p\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ENew operators.\u003C/strong\u003E Operators for not-equal, bitwise AND and OR, bitwise and logical NOT.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EEnumerators.\u003C/strong\u003E Enumerators could be created in scripts, and would also be utilized in the runtime. STATUS would no longer return string values, but would return an identifier. These identifiers could still be compared to string representations for backwards compatibility.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EBoolean values.\u003C/strong\u003E Boolean variables would be able to be assigned from TRUE and FALSE keywords and would not be string value anymore.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ELeaving scripts early.\u003C/strong\u003E The RETURN keyword would also allow you to leave scripts early by simply using the RETURN keyword with no value.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EString escape sequences.\u003C/strong\u003E Escape sequences in strings would be readily available. Imagine being able to put quotes in strings, and new line characters too!\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EString operations.\u003C/strong\u003E Functions like TOLOWER(), TOUPPER(), LENGTH(), and SUBSTRING() would be helpful.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EUser prompts.\u003C/strong\u003E Being able to prompt the user for input is important in any program. Even the Apollo astronauts had an \u0022Are you sure?\u0022 prompt in their software.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EExtended math and physics functions.\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EExpandable memory\u003C/strong\u003E Instead of adding another computer because you ran out of space, just add a small \u0022Memory module\u0022 part that would expand the existing volume.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EDistance delay.\u003C/strong\u003E User input would be delayed by the appropriate time unless the craft had Kerbals. All COPY TO/FROM ARCHIVE calls would also have the delay. This could be turned off in a settings file. Perhaps direct compatibility with RemoteTech.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EMultitasking.\u003C/strong\u003E Multiple scripts running, each on its own process, each with its own memory space (no sharing variables).\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EInterprocess and intercomputer communication.\u003C/strong\u003E Threads and computers could send and receive messages to each other without using a convoluted hack involving the LOG keyword.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EA MEMDUMP keyword\u003C/strong\u003E that would dump the state of a process in a human-readable format to the ARCHIVE.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EScript names storable in variables as function pointers.\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ESubroutines blocks with a SUB or FUNCTION keyword.\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EEasier pitch/yaw/roll system\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003ELibrary functions will include:\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EBasic math functions:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003Eabs - Absolute value\u003C/p\u003E\u003Cp\u003Emod - Modulus (though this can be achieved with the % operator)\u003C/p\u003E\u003Cp\u003Efloor - Rounds a number up to an integer.\u003C/p\u003E\u003Cp\u003Eceiling - Rounds a number down to an integer.\u003C/p\u003E\u003Cp\u003Eround - Rounds a number.\u003C/p\u003E\u003Cp\u003Eround - Rounds a number to a given decimal place.\u003C/p\u003E\u003Cp\u003Esqrt - Square root\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003ETrig functions:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003Eradtodeg - Converts radians to degrees\u003C/p\u003E\u003Cp\u003Edegtorad - Converts degrees to radians\u003C/p\u003E\u003Cp\u003Esin - Sine function for degrees\u003C/p\u003E\u003Cp\u003Ecos - Cosine function for degrees\u003C/p\u003E\u003Cp\u003Etan - Tangent function for degrees\u003C/p\u003E\u003Cp\u003Esinr - Sine function for radians\u003C/p\u003E\u003Cp\u003Ecosr - Cosine function for radians\u003C/p\u003E\u003Cp\u003Etanr - Tangent function for radians\u003C/p\u003E\u003Cp\u003Easin - Arcsine function for degress\u003C/p\u003E\u003Cp\u003Eacos - Arccosine function for degrees\u003C/p\u003E\u003Cp\u003Eatan - Arctangent function for degrees\u003C/p\u003E\u003Cp\u003Eatan2 - Two-argument arctangent function for degrees\u003C/p\u003E\u003Cp\u003Easinr - Arcsine function for radians\u003C/p\u003E\u003Cp\u003Eacosr - Arccosine function for radians\u003C/p\u003E\u003Cp\u003Eatanr - Arctangent function for radians\u003C/p\u003E\u003Cp\u003Eatan2r - Two-argument arctangent function for radians\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003ELogarithmic Functions:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003Elog - Logarithm base 10\u003C/p\u003E\u003Cp\u003Elogx - Logarithm base x.\u003C/p\u003E\u003Cp\u003Eln - Logarithm base e.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EAlso provided are constant values:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003Epi - The value pi.\u003C/p\u003E\u003Cp\u003Ee - The value e.\u003C/p\u003E\u003Cp\u003EGravitationalConstant - the gravitational constant (6.67384\u00C3\u0192\u00E2\u20AC\u201D10^-11 m^3 kg^-1 s^-2)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EJebnix will also include\u003C/strong\u003E a modularized system. The Jebnix computer will exist in one DLL, while the KerboScript\u002B\u002B engine will exist in another DLL. This will allow me to modify one without disrupting the other, and for myself and others to interchange scripting engines, or add additional scripting engines to the existing system. More detail to come.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cstrong\u003EBut kOS has gotten better! Why another one?\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EkOS has improved significantly over the last year, and continues to do so. However, there are still a variety of features that are missing and may never be added (user-defined functions, for instance). Some things, like functions, are left out of the current version of kOS because of architectural limitations: it would require an entire rewrite to implement those features. Jebnix is being written with a very different architecture, starting from the ground up.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EWhere I am Now\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI am currently working on the scripting engine portion of the system. This includes the language parser and interpreter.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETesting:\u003C/strong\u003E UNTIL/WHILE loops\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ECurrently coding:\u003C/strong\u003E Redesigning entire system to be compiled.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EDetailed design:\u003C/strong\u003E Compiled LOCK system\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EPreliminary design:\u003C/strong\u003E FOR loops and FOREACH loops\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EConceptualizing:\u003C/strong\u003E Basic encapsulation\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-07T21:08:37Z\u0022 title=\u002202/07/2015 09:08  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 7, 2015\u003C/time\u003E by woodywood245\u003C/strong\u003E\n\u003Cbr\u003EUpdated info\n\u003C/span\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:52:51Z","Content":"\n\u003Cp\u003EAt the moment, I\u0027m working on my variant-type structure, which will handle operations between different types.\u003C/p\u003E\u003Cp\u003EkOS is by definition a loosely-typed programming language, though I\u0027m not entirely sure if it\u0027s implemented that way in kOS.\u003C/p\u003E\u003Cp\u003EMost operators, such as subtraction, multiplication, and division, cannot be performed on string values. Bitwise operations cannot be performed on strings or floating-points. I prefer to control the implementation of operations myself because I know what the result will be, and so will the user.\u003C/p\u003E\u003Cp\u003EI have two choices:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EThrow an exception in the event an invalid operation is performed. Or...\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECast the variant to a valid type and then perform the operation. (Strings that cannot be parsed are interpreted as 0 or False depending on the type.)\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-06T09:29:53Z","Content":"\n\u003Cp\u003ELet me wish every success with your endeavour. This is going to implement some of the improvements I needed and suggested for kOS.\u003C/p\u003E\u003Cp\u003EOther features (I don\u0027t see yet in the OP) I would like Jebnix to support:\u003C/p\u003E\u003Cp\u003E- multidimensional dynamic arrays of typed variables (typed variables being any kind Jebnix will support, so e.g. including vectors);\u003C/p\u003E\u003Cp\u003E- allow input interaction with user (at least, a basic keyboard \u0022INPUT\u0022 statement);\u003C/p\u003E\u003Cp\u003E- ability to run compiled code (at least, include a pre-processor to parse kerboscript in advance, if possible optimize for execution speed, and store the parsed code while waiting for it to be run).\u003C/p\u003E\n"},{"CreatedByName":"KvickFlygarn87","CreatedById":76314,"CreatedDateTime":"2014-01-06T20:12:49Z","Content":"\n\u003Cp\u003EHere\u0027s a suggestion: Orbital archives - You can move your scripts to satellites in orbit. To not make this redundant, limit the storage in the normal archives and force line of sight where you want to move it.\u003C/p\u003E\u003Cp\u003EAlso, hard drive part - larger storage.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T21:01:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003ELet me wish every success with your endeavour. This is going to implement some of the improvements I needed and suggested for kOS.\u003Cp\u003EOther features (I don\u0027t see yet in the OP) I would like Jebnix to support:\u003C/p\u003E\u003Cp\u003E- multidimensional dynamic arrays of typed variables (typed variables being any kind Jebnix will support, so e.g. including vectors);\u003C/p\u003E\u003Cp\u003E- allow input interaction with user (at least, a basic keyboard \u0022INPUT\u0022 statement);\u003C/p\u003E\u003Cp\u003E- ability to run compiled code (at least, include a pre-processor to parse kerboscript in advance, if possible optimize for execution speed, and store the parsed code while waiting for it to be run).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EArrays are definately going to be part of Jebnix. I forgot to add it to the list. Oops.\u003C/p\u003E\u003Cp\u003EAlso, user interaction is included with \u0022user prompts\u0022 that already appears in the list. I was thinking of going with a PROMPT(), but INPUT works even better.\u003C/p\u003E\u003Cp\u003EThe compiled code thing is something I\u0027ve thought about for a while, and I\u0027m currently working on a separate, more complex scripting engine that would do that natively. A future update may incorporate the other scripting engine.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-06T22:42:03Z","Content":"\n\u003Cp\u003EGiven the above, I wish I could be of help. Coding Jebnix parts would actually be far beyond my ability (at least for now), but I believe I may at least help with testing, and possibly some debugging in future. \u003C/p\u003E\u003Cp\u003EAm I correct in guessing Jebnix is being developed in C#, just like kOS? If so, I will put some time in reading kOS sourcecode to have a start.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T23:08:18Z","Content":"\n\u003Cp\u003EThe only thing I\u0027ll probably need help with is writing the KSP UI, but I\u0027m saving that for last. Testing is going to be done with the Windows console and a mockup console in a window.\u003C/p\u003E\u003Cp\u003EThe plugin is being written in C#, but I don\u0027t know how much reading kOS will help, since I am starting from scratch. The last few times I tried reading the kOS source code I couldn\u0027t make head or tails of most of it, and I\u0027ve been programming for more than half my life, and been using C# as my primary language for close to five years. So good luck there.\u003C/p\u003E\u003Cp\u003EI will be looking for testers and debuggers in the coming weeks, and will keep you in mind. I\u0027m going to try to get as much done in the next couple weeks as I can, before the new college semester starts and I go back to class. Things will move more slowly then.\u003C/p\u003E\n"},{"CreatedByName":"John FX","CreatedById":59415,"CreatedDateTime":"2014-01-07T12:26:47Z","Content":"\n\u003Cp\u003EI hope this goes well for you. kOS is awesome and if you implement the features planned here then your mod will be more awesome.\u003C/p\u003E\u003Cp\u003Ereturn values...\u003C/p\u003E\u003Cp\u003Earrays...\u003C/p\u003E\n"},{"CreatedByName":"nothke","CreatedById":51185,"CreatedDateTime":"2014-01-07T18:37:33Z","Content":"\n\u003Cp\u003EI am in full support of this mod.\u003C/p\u003E\u003Cp\u003EWhat kind of parts are you planning to have? CPU and additive hard drives separately? In-line and radial? If you need my modeling services I\u0027m available for a few parts.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-07T20:14:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nothke\u0022 data-cite=\u0022nothke\u0022\u003E\u003Cdiv\u003EI am in full support of this mod.\u003Cp\u003EWhat kind of parts are you planning to have? CPU and additive hard drives separately? In-line and radial? If you need my modeling services I\u0027m available for a few parts.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThank you very much for your support! I am a big fan of your work!\u003C/p\u003E\u003Cp\u003EI\u0027d like to have CPU parts in 1.25, 2.5, 3.75, and 5 meter sizes, as well as a radial/probe part. I\u0027d like hard drive parts to be radial and be able to fit on the CPU parts nicely so everything looks like it goes together.\u003C/p\u003E\u003Cp\u003EI\u0027d also like the CPU part to be somewhat reminiscent of the Saturn V Instrument Unit (\u003Ca href=\u0022https://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u003C/a\u003E). I \u003Cem\u003Ecan\u003C/em\u003E make the parts, and while and I like modeling (but not texturing), I just don\u0027t particularly like making parts for KSP. Which is why I have a whole list of parts I\u0027d like to make but at the same time, I don\u0027t really want to make them and write the code instead.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-07T21:58:34Z\u0022 title=\u002201/07/2014 09:58  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 7, 2014\u003C/time\u003E by woodywood245\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-07T23:32:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027d like to have CPU parts in 1.25, 2.5, 3.75, and 5 meter sizes, as well as a radial/probe part. I\u0027d like hard drive parts to be radial and be able to fit on the CPU parts nicely so everything looks like it goes together.\u003C/p\u003E\u003Cp\u003EI\u0027d also like the CPU part to be somewhat reminiscent of the Saturn V Instrument Unit (\u003Ca href=\u0022https://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u003C/a\u003E).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat would be really nice, and I have no doubt about nothke\u0027s ability to make those parts a reality. However, the Saturn V IU to me seems like a ring able to hold, support and power the instruments, rather than a cilinder \u0022block\u0022 with a fixed set of instruments inside. That IU should actually allow, in KSP, to hold other instruments just as easily (to name, any part with existing mods that provide data and guidance, like MechJeb, Kerbal Engineer Redux, Protractor...as well as some of the measurement tools from standard KSP). Therefore, I believe this \u0022unit\u0022 should be modelled as:\u003C/p\u003E\u003Cp\u003E- a set of rings, in varying diameters, to hold and support instruments of different kinds (Jebnix or not related);\u003C/p\u003E\u003Cp\u003E- a set of instruments, to be internally attached to a IU ring, to provide CPU power and harddisk storage, specific to Jebnix.\u003C/p\u003E\n"},{"CreatedByName":"check","CreatedById":71875,"CreatedDateTime":"2014-01-07T23:44:47Z","Content":"\n\u003Cp\u003EI\u0027m all for this. I was very into kOS until it was abandoned (or but on hold, or whatever)... It has so much potential.\u003C/p\u003E\u003Cp\u003EA couple of suggestions:\u003C/p\u003E\u003Cp\u003EGoto statements.\u003C/p\u003E\u003Cp\u003EThe ability to plot points or lines or circles to make simple graphics.\u003C/p\u003E\u003Cp\u003EAbility to read attitude from the nav ball and not KSPs raw, native, crazy, unhelpful coordinate system.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-08T00:31:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022check\u0022 data-cite=\u0022check\u0022\u003E\u003Cdiv\u003EI\u0027m all for this. I was very into kOS until it was abandoned (or but on hold, or whatever)... It has so much potential.\u003Cp\u003EA couple of suggestions:\u003C/p\u003E\u003Cp\u003EGoto statements.\u003C/p\u003E\u003Cp\u003EThe ability to plot points or lines or circles to make simple graphics.\u003C/p\u003E\u003Cp\u003EAbility to read attitude from the nav ball and not KSPs raw, native, crazy, unhelpful coordinate system.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGOTO probably will never happen. Personally, I\u0027m against them, and I\u0027d like to move towards a more structured, procedural language with functions/methods/subroutines that can in themselves have their own functions. I thought about GOTO statements for a moment, but decided against it.\u003C/p\u003E\u003Cp\u003EEventually I do want to have a second, graphical UI for plotting and graphing, but that will have to come in the future. However, the plans do exist.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-08T00:38:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EThat would be really nice, and I have no doubt about nothke\u0027s ability to make those parts a reality. However, the Saturn V IU to me seems like a ring able to hold, support and power the instruments, rather than a cilinder \u0022block\u0022 with a fixed set of instruments inside. That IU should actually allow, in KSP, to hold other instruments just as easily (to name, any part with existing mods that provide data and guidance, like MechJeb, Kerbal Engineer Redux, Protractor...as well as some of the measurement tools from standard KSP). Therefore, I believe this \u0022unit\u0022 should be modelled as:\u003Cp\u003E- a set of rings, in varying diameters, to hold and support instruments of different kinds (Jebnix or not related);\u003C/p\u003E\u003Cp\u003E- a set of instruments, to be internally attached to a IU ring, to provide CPU power and harddisk storage, specific to Jebnix.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe set of rings in varying diameters to support instruments of different kinds already exists in the form of kothke\u0027s 6s tube system. There are only two sizes of that at the moment, and you have to open the doors to really get at what\u0027s inside. The idea with the IU for the model was more of a fun aesthetic throwback and less of a realism thing. Personally, I find a cylinder as thick as the kOS one a little cumbersome to look at when you consider that the AGC fit into a 2 cubic foot area.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-08T02:26:25Z\u0022 title=\u002201/08/2014 02:26  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 8, 2014\u003C/time\u003E by woodywood245\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"John FX","CreatedById":59415,"CreatedDateTime":"2014-01-08T02:06:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EThat would be really nice, and I have no doubt about nothke\u0027s ability to make those parts a reality. However, the Saturn V IU to me seems like a ring able to hold, support and power the instruments, rather than a cilinder \u0022block\u0022 with a fixed set of instruments inside. That IU should actually allow, in KSP, to hold other instruments just as easily (to name, any part with existing mods that provide data and guidance, like MechJeb, Kerbal Engineer Redux, Protractor...as well as some of the measurement tools from standard KSP). Therefore, I believe this \u0022unit\u0022 should be modelled as:\u003Cp\u003E- a set of rings, in varying diameters, to hold and support instruments of different kinds (Jebnix or not related);\u003C/p\u003E\u003Cp\u003E- a set of instruments, to be internally attached to a IU ring, to provide CPU power and harddisk storage, specific to Jebnix.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0060ve been trying to get a proper interstage made as part of procedural fairings. If the jebnix could be a part to be added radially that would be great. The current kOS unit is sort of a ring but for very small craft.\u003C/p\u003E\u003Cp\u003EI second having a \u0060normal\u0060 coordinate system. Also some ability to directly control pitch up or down, roll left or right, and yaw left and right. [set ship:pitch to pitch-5. lock ship:yaw to nextnode. set ship:roll to 0.] would be cool.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-08T03:09:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022John FX\u0022 data-cite=\u0022John FX\u0022\u003E\u003Cdiv\u003EI\u0060ve been trying to get a proper interstage made as part of procedural fairings. If the jebnix could be a part to be added radially that would be great. The current kOS unit is sort of a ring but for very small craft.\u003Cp\u003EI second having a \u0060normal\u0060 coordinate system. Also some ability to directly control pitch up or down, roll left or right, and yaw left and right. [set ship:pitch to pitch-5. lock ship:yaw to nextnode. set ship:roll to 0.] would be cool.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will look into a \u0022normal\u0022 coordinate system, though \u0022normal\u0022 is in the eye of the programmer. I will still have to maintain the standard coordinate system for backwards compatibility purposes, of course.\u003C/p\u003E\n"},{"CreatedByName":"deadshot462","CreatedById":13659,"CreatedDateTime":"2014-01-08T03:15:03Z","Content":"\n\u003Cp\u003EGood luck, this looks great. I was hoping someone would continue with the KOS-style update.\u003C/p\u003E\u003Cp\u003ECould you add an option for a directional alt-radar? Instead of reading straight down, maybe read distance to ground from the ship\u0027s bottom depending on its orientation relative to the ground?\u003C/p\u003E\n"},{"CreatedByName":"nothke","CreatedById":51185,"CreatedDateTime":"2014-01-08T03:39:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022deadshot462\u0022 data-cite=\u0022deadshot462\u0022\u003E\u003Cdiv\u003EGood luck, this looks great. I was hoping someone would continue with the KOS-style update.\u003Cp\u003ECould you add an option for a directional alt-radar? Instead of reading straight down, maybe read distance to ground from the ship\u0027s bottom depending on its orientation relative to the ground?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat just sounds like a normal laser rangefinder. I could make a rangefinder part that would output the distance to nearest object, something similar to lazor\u0027s lidar, but the data could be used in a Jebnix program. Hell, now I see something like a wiremod only for KSP xD Parts interconnected by the computer, screens, sensors.. =P\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027d also like the CPU part to be somewhat reminiscent of the Saturn V Instrument Unit (\u003Ca href=\u0022https://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Saturn_V_Instrument_Unit\u003C/a\u003E). I \u003Cem\u003Ecan\u003C/em\u003E make the parts, and while and I like modeling (but not texturing), I just don\u0027t particularly like making parts for KSP. Which is why I have a whole list of parts I\u0027d like to make but at the same time, I don\u0027t really want to make them and write the code instead.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat would be appropriate, yes, but the reaction wheel rings (the advanced 2m SAS part especially) are already reminiscent of the Apollo IU. About the modular system diomeda was talking about, interestingly, the early Apollo mockups had a sort of like a plug-in system where individual instruments would be inserted in a frame: \u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/SaturnC-1_InstrumentUnitExploded.jpg/468px-SaturnC-1_InstrumentUnitExploded.jpg\u0022 alt=\u0022468px-SaturnC-1_InstrumentUnitExploded.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe apollo guidance computer on the other hand looked like this:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://twimgs.com/ddj/ddj/images/ddj0006hc/0101hc001f4.gif\u0022 alt=\u00220101hc001f4.gif\u0022\u003E\u003C/p\u003E\u003Cp\u003E(the computer casing on the left, and the cockpit interface on the right)\u003C/p\u003E\u003Cp\u003EThe casing looks like something that could be radially attached to the ship in KSP =P\u003C/p\u003E\u003Cp\u003EThe Shuttle computer was designed to fit in one of the racks:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://upload.wikimedia.org/wikipedia/commons/f/ff/Space_Shuttle_General_Purpose_Computer.jpg\u0022 alt=\u0022Space_Shuttle_General_Purpose_Computer.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003E(older version on the right used 2 slots)\u003C/p\u003E\u003Cp\u003EThis format is quite similar to my MIX drawers\u003C/p\u003E\u003Cp\u003EWhile on the ISS, astronauts simply use laptops (Thinkpad 750s with special cooling cause heated air doesn\u0027t move in microgravity) for controlling and displaying data of onboard systems and apparently there is a central computer too.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://images.spaceref.com/news/08.17.00.shuttle.PGSC.jpg\u0022 alt=\u002208.17.00.shuttle.PGSC.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.space.com/images/i/000/002/556/i02/070614_iss_computer_02.jpg?1292265821\u0022 alt=\u0022070614_iss_computer_02.jpg?1292265821\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-08T03:58:25Z\u0022 title=\u002201/08/2014 03:58  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 8, 2014\u003C/time\u003E by nothke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HoneyFox","CreatedById":19237,"CreatedDateTime":"2014-01-08T04:34:41Z","Content":"\n\u003Cp\u003EI would hope to see some script system available on per-part basis... unlike kOS which seems to be for whole vessel.\u003C/p\u003E\u003Cp\u003Eso that we can write simpler and modular scripts, not a lot of things all combined in one script.\u003C/p\u003E\u003Cp\u003Eexamples can be:\u003C/p\u003E\u003Cp\u003E1. Write a simple script for solar panels so they automatically retract when getting into atmosphere.\u003C/p\u003E\u003Cp\u003E2. Write a simple script for ladders to extend when the vessel is landed and retract automatically when it\u0027s not.\u003C/p\u003E\u003Cp\u003E3. Write a simple script for lights so they switch on/off according to the lighting condition (whether sunlight exists or not).\u003C/p\u003E\u003Cp\u003E... and maybe more.\u003C/p\u003E\n"},{"CreatedByName":"MaHuJa","CreatedById":58370,"CreatedDateTime":"2014-01-08T06:18:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EThe last few times I tried reading the kOS source code I couldn\u0027t make head or tails of most of it, and I\u0027ve been programming for more than half my life, and been using C# as my primary language for close to five years. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo me that is somewhat funny because looking at the kOS code (and creating the first .23 hotfix) was my first time touching C#, and I got a decent handle on how the code works.\u003C/p\u003E\u003Cp\u003EI\u0027m working on creating my own thing though, as a fork of kOS, but ditching kerboscript - at least as a main language, I\u0027m undecided if I\u0027ll keep it as a fallback language for compatibility. Doing so would allow me to incorporate non-language improvements to kOS itself pretty easily.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-08T08:30:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EThe set of rings in varying diameters to support instruments of different kinds already exists in the form of kothke\u0027s 6s tube system. There are only two sizes of that at the moment, and you have to open the doors to really get at what\u0027s inside. The idea with the IU for the model was more of a fun aesthetic throwback and less of a realism thing. Personally, I find a cylinder as thick as the kOS one a little cumbersome to look at when you consider that the AGC fit into a 2 cubic foot area.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOf course you\u0027re right, and I thought about it. Nothke\u0027s 6s tubes do work for this purpose. Clearly, we would want to see them in all diameter sizes, or to have them fitting diameter and height procedurally. But also, should those tubes be textured differently then a \u0022all-purpose storage compartment\u0022, when used in this fashion? Yes or no, your\u0027s and nothke\u0027s take. What I really was about, is the modular system instead of those cylinder parts that kOS uses.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-08T08:48:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HoneyFox\u0022 data-cite=\u0022HoneyFox\u0022\u003E\u003Cdiv\u003EI would hope to see some script system available on per-part basis... unlike kOS which seems to be for whole vessel.\u003Cp\u003Eso that we can write simpler and modular scripts, not a lot of things all combined in one script.\u003C/p\u003E\u003Cp\u003Eexamples can be:\u003C/p\u003E\u003Cp\u003E1. Write a simple script for solar panels so they automatically retract when getting into atmosphere.\u003C/p\u003E\u003Cp\u003E2. Write a simple script for ladders to extend when the vessel is landed and retract automatically when it\u0027s not.\u003C/p\u003E\u003Cp\u003E3. Write a simple script for lights so they switch on/off according to the lighting condition (whether sunlight exists or not).\u003C/p\u003E\u003Cp\u003E... and maybe more.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat concept is interesting. I see that not much in the way of a \u0022distributed intelligence\u0022 to each single part, but about specific actions for each part triggered by different events, all those \u0022scripts\u0022 active concurrently within Jebnix CPU. \u003C/p\u003E\u003Cp\u003EBut to implement that, I hope those actions can be executed independently of the standard 10 action groups \u002B standard switches, or we run out of possible actions pretty fast.\u003C/p\u003E\n"},{"CreatedByName":"John FX","CreatedById":59415,"CreatedDateTime":"2014-01-08T11:16:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EI will look into a \u0022normal\u0022 coordinate system, though \u0022normal\u0022 is in the eye of the programmer. I will still have to maintain the standard coordinate system for backwards compatibility purposes, of course.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhen I say \u0060normal\u0060 I mean, if you look at your navball, you could just type the numbers into KOS verbatim and it would point that way. Of course you would need to keep the current system for legacy, the main point in my post was direct relative control. Being able to say pitch the nose up 5 degrees or yaw right 10 degrees from your current position, which is currently impossible in KOS AFAIK. You currently either use SAS or set a heading and the program autosteers.\u003C/p\u003E\u003Cp\u003EEDIT : One more thing that has always bugged me about KOS it the way it checks orientation without active engines. Currently it seems that it is only when there is an active engine can KOS can tell which way is up. If you just have a pod with seperatrons or a chute and landing legs then KOS will just spin wildly if you say \u0060lock steering to retrograde\u0060 or similar until an engine is ignited. If you have no engines then that is it. No steering for you. Another reason I would like direct control over steering.\u003C/p\u003E\u003Cp\u003EWhat I do like is the way it looks at engines for direction as that gives you your thrust vector and that is the way I want a GC to check for which way is up (especially with tweakables now) but when there are no engines I\u0060d like it to have a backup which will take facing from either the active pod or docking port.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-08T12:31:16Z\u0022 title=\u002201/08/2014 12:31  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 8, 2014\u003C/time\u003E by John FX\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-08T12:42:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022John FX\u0022 data-cite=\u0022John FX\u0022\u003E\u003Cdiv\u003EBeing able to say pitch the nose up 5 degrees or yaw right 10 degrees from your current position, which is currently impossible in KOS AFAIK. You currently either use SAS or set a heading and the program autosteers.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis would really be a major improvement over kOS. It would make programming much easier to be able to enter angles directly (Pitch, Roll, Yaw), instead of rotational vectors from a reference direction, as in UP \u002B R(0,0,180) \u002B R(0,pitch,0). It took me days to figure how kOS (and KSP) handles the internal frame of reference and it remains an unneeded complication to me. Just as KSP keeps that reference for internal purposes only, but shows angles that are consistent with the relative orientation of the craft (IRT the main body), the same approach would be best if used by Jebnix.\u003C/p\u003E\n"},{"CreatedByName":"Zander","CreatedById":76100,"CreatedDateTime":"2014-01-08T13:05:33Z","Content":"\n\u003Cp\u003EPlease make sure it can maneuver the ship using the gimbals and not the torque. Kos can only manipulate the torque so those of us using realism mods with no torque in parts need the OS to be able to access the engine gimbals and move them to the same degree the keyboard can.\u003C/p\u003E\n"}]}