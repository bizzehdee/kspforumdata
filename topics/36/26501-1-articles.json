{"TopicId":26501,"ForumId":36,"TopicTitle":"Reading control inputs","CreatedByName":"Pixel of Life","CreatedById":45646,"CreatedDateTime":"2013-05-12T08:21:31Z","PageNum":1,"Articles":[{"CreatedByName":"Pixel of Life","CreatedById":45646,"CreatedDateTime":"2013-05-12T08:21:31Z","Content":"\n\u003Cp\u003EHow would I make a plugin read the player\u0027s control inputs (aileron, elevator and rudder)? Also, how can I pass that information to the craft\u0027s control surfaces without having the default controls getting in the way? (Read: How do I override the default controls with a plugin and control the spacecraft through said plugin?)\u003C/p\u003E\u003Cp\u003EI\u0027m trying to write a plugin that takes the player\u0027s input, then does some fancy stuff with it and eventually passes the values to the spacecraft.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-12T10:58:58Z","Content":"\n\u003Cp\u003EUse of the fly by wire system is detailed here: \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Module_code_examples#Fly-by-wire\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Module_code_examples#Fly-by-wire\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFor reading the controls you\u0027d normally use:\u003C/p\u003E\u003Cp\u003Evessel.ctrlState.* (pitch, roll, yaw)\u003C/p\u003E\u003Cp\u003Eas that accounts for fly by wire, trim etc.\u003C/p\u003E\u003Cp\u003EBut if you\u0027re after the player input directly then I\u0027m not sure where that is. You can probably check for it yourself though, the keycodes are in GameSettings and the Input commands are detailed here: \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/Input.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Documentation/ScriptReference/Input.html\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Pixel of Life","CreatedById":45646,"CreatedDateTime":"2013-05-12T11:40:31Z","Content":"\n\u003Cp\u003EWell, here\u0027s the code I\u0027ve got at the moment:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://pastebin.com/j07cXEfv\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://pastebin.com/j07cXEfv\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThat works. It prints the pitch control value in the debug console. What I\u0027m trying to do now (as you can probably see) is dividing the input by 2 and then sending it out to the control surfaces. For example, pulling the stick fully back should only give 50% deflection on the elevators. Is there a way to do that? I\u0027d imagine there is since Ferram\u0027s Aerospace Research mod has these dynamically adjusting control surfaces that move the less the faster you fly. I had a look at his source code but couldn\u0027t figure it out.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-12T14:05:19Z","Content":"\n\u003Cp\u003EAs far as I know FAR re-implements control surfaces from scratch, so his code isn\u0027t going to be much use.\u003C/p\u003E\u003Cp\u003EIt depends on the order of executation and how many FlightControlState objects there are as to whether you can get away with code like that. Try s.pitch = FlightInputHandler.state.pitch / 2\u003C/p\u003E\u003Cp\u003EYou may also need to move the callback to OnStart as I didn\u0027t think vessel exists when OnAwake is called.\u003C/p\u003E\u003Cp\u003EOtherwise you\u0027ll have to monitor the input keys.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-12T14:12:05Z\u0022 title=\u002205/12/2013 02:12  PM\u0022 data-short=\u002211 yr\u0022\u003EMay 12, 2013\u003C/time\u003E by EndlessWaves\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Pixel of Life","CreatedById":45646,"CreatedDateTime":"2013-05-12T14:36:45Z","Content":"\n\u003Cp\u003EThanks! I got the breakthrough I\u0027ve been looking for. I tried the \u003Cstrong\u003Es.pitch = FlightInputHandler.state.pitch / 2\u003C/strong\u003E one to tell the game directly what to do. It worked. Then I moved the \u003Cstrong\u003EFlightInputHandler.state.pitch / 2\u003C/strong\u003E part to the OnFixedUpdate method, told it to store the value in a variable, then had the FlightCtrlState class take the value from that variable, divide it by 2 and then send it to the actual controls. It worked as well! Time to code a simple speed-sensitive pitch control just to be sure it works.\u003C/p\u003E\n"}]}