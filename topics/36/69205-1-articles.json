{"TopicId":69205,"ForumId":36,"TopicTitle":"[WIP] Advanced Reaction Control","CreatedByName":"ThePsuedoMonkey","CreatedById":58589,"CreatedDateTime":"2014-04-13T04:40:56Z","PageNum":1,"Articles":[{"CreatedByName":"ThePsuedoMonkey","CreatedById":58589,"CreatedDateTime":"2014-04-13T04:40:56Z","Content":"\n\u003Cp\u003EI\u0027m looking to try and improve the stock reaction control systems, specifically by adding more diverse thrusters and to allow some tweaking to their performance. So far I\u0027ve modeled and textured a set of RCS thrusters that I am reasonably satisfied with, and are fairly similar to the stock variants in terms of polygon count, size, and texture resolution. I\u0027ve kind of hit a wall as far as modeling and texturing is concerned, so it would help me out to have some feedback on what I\u0027ve done so far.\u003C/p\u003E\u003Cblockquote lang=\u0022en\u0022\u003E\u003Ca href=\u0022//imgur.com/a/3snV2\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv style=\u0022text-align:center;\u0022\u003E\u003Ca href=\u0022https://drive.google.com/file/d/0B6828vVl_-ZoRENLMWNYMlRUbW8/edit?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EDownload\u003C/span\u003E\u003C/a\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve yet to do anything with the reaction wheels, but I\u0027m starting to work on writing a plugin to handle tweaking of the RCS thrusters. I\u0027m not familiar with Assembly yet, so I\u0027m currently only using a modified version of TweakableRCS by Toadicus. It probably won\u0027t even work as it is now, but I thought I\u0027d include it in case someone would be interested (or willing to offer any tips).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// TweakableRCS \u00C3\u201A\u00C2\u00A9 2014 toadicus\u003Cbr\u003E//\u003Cbr\u003E// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. To view a\u003Cbr\u003E// copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/\u003Cbr\u003E\u003Cbr\u003Eusing KSP;\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace AdvancedRCS\u003Cbr\u003E{\u003Cbr\u003E\tpublic class ModuleAdvancedRCS : PartModule\u003Cbr\u003E\t{\u003Cbr\u003E\t\tprotected ModuleRCS RCSModule;\u003Cbr\u003E\u003Cbr\u003E\t\t// Stores whether the RCS block should start enabled or not.\u003Cbr\u003E\t\t[KSPField(isPersistant = true, guiName = \u0022Thruster\u0022, guiActive = false, guiActiveEditor = true)]\u003Cbr\u003E\t\t[UI_Toggle(enabledText = \u0022Enabled\u0022, disabledText = \u0022Disabled\u0022)]\u003Cbr\u003E\t\tpublic bool startEnabled;\u003Cbr\u003E\t\t// Stores the last state of startEnabled so we can tell if it\u0027s changed.\u003Cbr\u003E\t\tprotected bool startEnabledState;\u003Cbr\u003E\u003Cbr\u003E\t\t// Stores our ISP modifier for the reaction control thruster.\u003Cbr\u003E\t\t[KSPField(isPersistant = true, guiName = \u0022Catalyst Mass\u0022, guiActiveEditor = true, guiActive = true)]\u003Cbr\u003E\t\t[UI_FloatRange(minValue = 0.005f, maxValue = 0.025f, stepIncrement = 0.005f)]\u003Cbr\u003E\t\tpublic float catalystMass;\u003Cbr\u003E\u003Cbr\u003E\t\t// Stores our thrust modifier for the reaction control thruster.\u003Cbr\u003E\t\t[KSPField(isPersistant = true, guiName = \u0022Thruster Upgrade Factor\u0022, guiActiveEditor = true, guiActive = true)]\u003Cbr\u003E\t\t[UI_FloatRange(minValue = 0.25f, maxValue = 2.00f, stepIncrement = 0.25f)]\u003Cbr\u003E\t\tpublic float thrustModifier;\u003Cbr\u003E\u003Cbr\u003E\t\tprotected float baseThrusterISP;\u003Cbr\u003E\t\tprotected float baseThrusterPower;\u003Cbr\u003E\t\tprotected float baseThrusterMass;\u003Cbr\u003E\u003Cbr\u003E\t\t// Stores the initial values for the ISP and thrust modifiers.\u003Cbr\u003E\t\tpublic ModuleAdvancedRCS()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tthis.startEnabled = true;\u003Cbr\u003E\t\t\tthis.catalystMass = 0.015f;\u003Cbr\u003E\t\t\tthis.thrustModifier = 1.00f;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tpublic override void OnStart(StartState state)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tbase.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E\t\t\tthis.RCSModule = base.part.Modules.OfType\u0026lt;ModuleRCS\u0026gt;().FirstOrDefault();\u003Cbr\u003E\u003Cbr\u003E\t\t\tthis.startEnabledState = !this.startEnabled;\u003Cbr\u003E\u003Cbr\u003E\t\t\tthis.baseThrusterPower = this.RCSModule.thrusterPower;\u003Cbr\u003E\t\t\tthis.baseThrusterISP = this.RCSModule.thrusterISP0;\u003Cbr\u003E\t\t\tthis.baseThrusterMass = this.RCSModule.thrusterMass;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t// Runs late in the update cycle\u003Cbr\u003E\t\tpublic void LateUpdate()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\t// If we\u0027re in the editor...\u003Cbr\u003E\t\t\tif (HighLogic.LoadedSceneIsEditor)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\t// ...and if our startEnabled state has changed...\u003Cbr\u003E\t\t\t\tif (this.startEnabled != this.startEnabledState)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t// ...refresh startEnabledState\u003Cbr\u003E\t\t\t\t\tthis.startEnabledState = this.startEnabled;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\t\t// ...and if we\u0027re starting enabled...\u003Cbr\u003E\t\t\t\t\tif (this.startEnabled)\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\t// ...set the reaction control module to active\u003Cbr\u003E\t\t\t\t\t\tthis.RCSModule.isEnabled = true;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\t// ...otherwise, we\u0027re starting disabled...\u003Cbr\u003E\t\t\t\t\telse\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\t// ...set the reaction control module to disabled\u003Cbr\u003E\t\t\t\t\t\tthis.RCSModule.isEnabled = false;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\tif (HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tthis.RCSModule.thrusterPower = this.baseThrusterPower * this.thrustModifier;\u003Cbr\u003E\t\t\t\t// The ISP modifier is a logrithmic function, with a range from approximately 75.3% to 111.5% of the original value.\u003Cbr\u003E\t\t\t\tthis.RCSModule.thrusterISP0 = this.baseThrusterISP0 * (LN(this.catalystMass) * 0.225f \u002B 1.945f);\u003Cbr\u003E\t\t\t\t// Overrides the thruster mass based on a linear function of the chosen options.\u003Cbr\u003E\t\t\t\tthis.RCSModule.thrusterMass = this.baseThrusterMass * (this.thrustModifier * 0.6f \u002B 0.4f) \u002B (this.catalystMass - 0.015f);\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tforeach (FXGroup fx in this.RCSModule.thrusterFX)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tfx.Power *= this.thrustModifier / 2.0f;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n"}]}