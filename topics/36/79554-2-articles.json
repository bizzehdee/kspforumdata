{"TopicId":79554,"ForumId":36,"TopicTitle":"[0.90] TestFlight [0.4.6.1][04FEB15] -Configurable, extensible, parts research \u0026amp; reliability system","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T00:33:29Z","PageNum":2,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T02:12:44Z","Content":"\n\u003Cp\u003EIntroducing the TestFlight Master Status Display (MSD). The MSD is how you track the status of TestFlight enabled parts on your vessel. It lets you see, at a glance, the status of all the parts, their accumulated flight data, and any failures that have occurred.\u003C/p\u003E\u003Cblockquote lang=\u0022en\u0022\u003E\u003Ca href=\u0022//imgur.com/a/AWWyn\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-28T04:09:22Z","Content":"\n\u003Cp\u003EThis is just looking better and better every time!! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T05:37:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EThis is just looking better and better every time!! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks!\u003C/p\u003E\u003Cp\u003EI have put together a proper introduction video the the mod. Enjoy!\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/_6mBrQB0Ek4?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T18:10:34Z","Content":"\n\u003Cp\u003EMy plan is to make the first alpha release sometime today, assuming I can figure out how to get a toolbar button loaded and operational.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-28T23:44:45Z","Content":"\n\u003Cp\u003EFirst alpha version of TestFlight has now been released! You can find v0.1.0 on the GitHub page, as linked in the Original Post, and below.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003Ev0.1.0 Alpha\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.1.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.1.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EPlease, \u003Cstrong\u003Eplease\u003C/strong\u003E, note that this is an initial alpha release and is no doubt buggy as hell. Don\u0027t use it in any save game that you care about, and fully expect newer versions to break your saves.\u003C/p\u003E\u003Cp\u003EThis initial release only contains a few failure modules for engines and fuel tanks. I plan to expand the system in the future. I welcome any ideas on failure types people would like to see implemented.\u003C/p\u003E\u003Cp\u003EI have done major edits to the original post to summarize all the information, and what not. Please take a moment to look it over.\u003C/p\u003E\u003Cp\u003EAny feedback, questions, etc please post. Thanks!\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-29T01:45:36Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EExtending TestFlight - A Guide for Modders\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ETestFlight is a mod for KSP, but TestFlight itself is designed to be moddable as well. This allows other modders the ability to extend the TestFlight system by adding new modules for Data Recording, Reliability checks, and Failure Modes. This documentation is geared towards modders who want to extend the TestFlight system in some way.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECore Architecture\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ETestFlight works on a per-part basis and is comprised of four basic modules. \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlight Core\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe core module which runs the entire system for that part. TestFlightCore can not be extended.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFlightDataRecorder\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EIn a nutshell, TestFlight is a system whereby you fly parts and they record data. The FlightDataRecorder module is what handles recording of the flight data. If you want to control how data is recorded, then you can extend FlightDataRecorder to make your own recorder. The base module is very simple, and simply records data as long as the part is enabled.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightReliability\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThis module is responsible for determining the part\u0027s reliability. The base TestFlightReliability module simply determines reliability based on the collected flight data. By creating your own Reliability module, you can add to or remove from this base reliability based on other criteria. For example maybe you want a part to become less reliable as it gets hotter. There can be multiple Reliability modules on a part, and the TestFlightCore simply polls them all, and adds up the reported reliability from each into a total reliability.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightFailure\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe module most likely to be extended, the TestFlightFailure module defines a specific failure that can occur on a part. Maybe the part explodes, or leaks fuels, or shuts down. Whatever you want to happen as a possible failure on the part, you can do it by making a Failure module.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EWriting Your Own Modules\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EWriting your own modules to extend TestFlight is very easy. Simply make a standard KSP PartModule, and Implement the required TestFlightAPI Interface for the TestFlight module you want to make. IFlightDataRecorder, ITestFlightReliability, or ITestFlightFailure. To make things even easier, you can inherit from the base TestFlight module for each, where most of the work to interface with the overall system will be handled for you, and you just need to implement the specific logic for your module.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECommon Data Structures\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightData\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic struct TestFlightData\u003Cbr\u003E{\u003Cbr\u003E        // Scope is a combination of the current SOI and the Situation, always lowercase.\u003Cbr\u003E        // EG \u0022kerbin_atmosphere\u0022 or \u0022mun_space\u0022\u003Cbr\u003E        // The one exception is \u0022deep-space\u0022 which applies regardless of the SOI if you are deep enough into space\u003Cbr\u003E\tpublic string scope;\u003Cbr\u003E        // The total accumulated flight data for the part\u003Cbr\u003E\tpublic float flightData;\u003Cbr\u003E        // The specific flight time, in seconds, of this part instance\u003Cbr\u003E\tpublic int flightTime;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Cem\u003ETestFlightData\u003C/em\u003E structure is used to move flight data around between modules.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightFailureDetails\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic struct TestFlightFailureDetails\u003Cbr\u003E{\u003Cbr\u003E        // Human friendly title to display in the MSD for the failure.  25 characters max\u003Cbr\u003E        public string failureTitle;\u003Cbr\u003E        // \u0022minor\u0022, \u0022failure\u0022, or \u0022major\u0022 used to indicate the severity of the failure to the player\u003Cbr\u003E\t\tpublic string severity;\u003Cbr\u003E        // chances of the failure occuring relative to other failure modules on the same part\u003Cbr\u003E        // This should never be anything except:\u003Cbr\u003E        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common\u003Cbr\u003E\t\tpublic int weight;\u003Cbr\u003E        // \u0022mechanical\u0022 indicates a physical failure that requires physical repair\u003Cbr\u003E        // \u0022software\u0022 indicates a software or electric failure that might be fixed remotely by code\u003Cbr\u003E\t\tpublic string failureType;\u003Cbr\u003E        // Indicates in broad sense, is it ever possible to attempt a repair under some condition?\u003Cbr\u003E        public bool canBeRepaired;\u003Cbr\u003E        // Repair details\u003Cbr\u003E        // Time required to complete repairs.  Not currently supported.\u003Cbr\u003E        public int repairTimeRequired;\u003Cbr\u003E        // For mechanical failures\u003Cbr\u003E        // Does the repair require that a Kerbal be EVA to repair the part?\u003Cbr\u003E        public bool requiresEVA;\u003Cbr\u003E        // Can the part be repaired while the vessel is in flight?\u003Cbr\u003E        public bool canBeRepairedInFlight;\u003Cbr\u003E        // Can the part be repaired when the vessel is landed on the surface?\u003Cbr\u003E        public bool canBeRepairedOnLanded;\u003Cbr\u003E        // Can the part be repaired when the vessel is splashed down in the water?\u003Cbr\u003E        public bool canBeRepairedOnSplashed;\u003Cbr\u003E        // How many spare parts does it take to attempt repair?\u003Cbr\u003E        public int sparePartsRequired;\u003Cbr\u003E        // For software failures\u003Cbr\u003E        // Can the part be repaired by remote?\u003Cbr\u003E        public bool canBeRepairedByRemote;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis structure closely, but not exactly, mimics the variables contained in the config module for a failure. It is used to allow communication of failure details between modules that need it.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EInterfaces\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EIFlightDataRecorder\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic interface IFlightDataRecorder\u003Cbr\u003E{\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Called frequently by TestFlightCore to ask the module for the current flight data.\u003Cbr\u003E        /// The module should only return the currently active scope\u0027s data, and should return the most up\u003Cbr\u003E        /// to date data it has.\u003Cbr\u003E        /// This method should only RETURN the current flight data, not calculate it.  Calculation\u003Cbr\u003E        /// should be done in DoFlightUpdate()\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;The current flight data.\u0026lt;/returns\u0026gt;\u003Cbr\u003E\t\tTestFlightData GetCurrentFlightData();\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Initializes the flight data on a newly instanced part from the stored persistent flight data.\u003Cbr\u003E        /// This data should only be accepted the first time ever.\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022allFlightData\u0022\u0026gt;A list of all TestFlightData stored for the part, once for each known scope\u0026lt;/param\u0026gt;\u003Cbr\u003E        void InitializeFlightData(List\u0026lt;TestFlightData\u0026gt; allFlightData);\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Called to set what is considered \u0022deep-space\u0022 altitude\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022newThreshold\u0022\u0026gt;New threshold.\u0026lt;/param\u0026gt;\u003Cbr\u003E        void SetDeepSpaceThreshold(double newThreshold);\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Called frequently by TestFlightCore to let the DataRecorder do an update cycle to calulate the current flight data.\u003Cbr\u003E        /// This is where the calculation of current data based on paremeters (such as elapsed MET) should occur.\u003Cbr\u003E        /// Generally this will be called immediately prior to GetcurrentFlightData() so that the DataRecorder\u003Cbr\u003E        /// can be up to date.\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022missionStartTime\u0022\u0026gt;Mission start time in seconds.\u0026lt;/param\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022flightDataMultiplier\u0022\u0026gt;Global Flight data multiplier.  A user setting which should modify the internal collection rate.  Amount of collected data should be multiplied against this.  Base is 1.0 IE no modification.\u0026lt;/param\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022flightDataEngineerMultiplier\u0022\u0026gt;Flight data engineer multiplier.  A user setting mutiplier that makes the engineer bonus more or less.  1.0 is base.\u0026lt;/param\u0026gt;\u003Cbr\u003E        void DoFlightUpdate(double missionStartTime, double flightDataMultiplier, double flightDataEngineerMultiplier);\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Returns the current data situation, \u0022atmosphere\u0022, \u0022space\u0022, or \u0022deep-space\u0022\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;The Situation of the current data scope\u0026lt;/returns\u0026gt;\u003Cbr\u003E        string GetDataSituation();\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Returns current SOI\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;The current SOI for the data scope\u0026lt;/returns\u0026gt;\u003Cbr\u003E        string GetDataBody();\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EITestFlightReliability\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic interface ITestFlightReliability\u003Cbr\u003E{\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Gets the current reliability of the part as calculated based on the given flightData\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;The current reliability.  Can be negative in order to reduce overall reliability from other Reliability modules.\u0026lt;/returns\u0026gt;\u003Cbr\u003E        /// \u0026lt;param name=\u0022flightData\u0022\u0026gt;Flight data on which to calculate reliability.\u0026lt;/param\u0026gt;\u003Cbr\u003E        float GetCurrentReliability(TestFlightData flightData);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EITestFlightFailure\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic interface ITestFlightFailure\u003Cbr\u003E{\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Gets the details of the failure encapsulated by this module.  In most cases you can let the base class take care of this unless oyu need to do somethign special\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;The failure details.\u0026lt;/returns\u0026gt;\u003Cbr\u003E\tTestFlightFailureDetails GetFailureDetails();\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Triggers the failure controlled by the failure module\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        void DoFailure();\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Asks the repair module if all condtions have been met for the player to attempt repair of the failure.  Here the module can verify things such as the conditions (landed, eva, splashed), parts requirements, etc\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if this instance can attempt repair; otherwise, \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;.\u0026lt;/returns\u0026gt;\u003Cbr\u003E        bool CanAttemptRepair();\u003Cbr\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E\t/// Trigger a repair ATTEMPT of the module\u0027s failure.  It is the module\u0027s responsability to take care of any consumable resources, data transmission, etc required to perform the repair\u003Cbr\u003E\t/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E\t/// \u0026lt;returns\u0026gt;Should return true if the failure was repaired, false otherwise\u0026lt;/returns\u0026gt;\u003Cbr\u003E        bool AttemptRepair();\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EProject Setup - Compiling Against DLLs, etc\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EAt the current time I haven\u0027t exactly worked out how to deal with requiring a mod to compile against the TestFlightAPI DLL or how to handle versioning etc. I am open to any suggestions and help on this anyone can give. I\u0027m not too knowledgeable in this area. Since it works through interfaces, in theory you should not even need to compile against the DLL at all. As long as you implement the proper interfaces, you should be good. However compiling against the DLL is probably easier, and it lets you use the base classes that do most of the work for you rather than having to implement them yourself. Again, thoughts and suggestion on this are most appreciated.\u003C/p\u003E\u003Cp\u003EThe intention is to through various alpha tests, get the API to a stable spot whereby it will change only infrequently, so it won\u0027t be a burden to anyone to keep up with it.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-29T01:46:47Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EPart Configs\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EIn order to add the TestFlight system to a part, you simply need to make an appropriate config for the part, just like with many other mods using ModuleManager. An example config with documentation is given below. If you have any questions, please let me know.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ESample Part Config\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E@PART[liquidEngine]:AFTER[Squad]\u003Cbr\u003E{\u003Cbr\u003E\t// The TestFlightCore module is, well, the core of the entire system and controls all the other pieces\u003Cbr\u003E\t// Every part that uses TestFlight *must* have a TestFlightCore module or it won\u0027t connect to the \u003Cbr\u003E\t// overall system.\u003Cbr\u003E\t// There should only ever be a SINGLE TestFlightCore module on a part.\u003Cbr\u003E    MODULE\u003Cbr\u003E    {\u003Cbr\u003E        name = TestFlightCore\u003Cbr\u003E        // By leaving these two frequencies at 0, we simply let the global frequency take over\u003Cbr\u003E        // We could however make this one part poll, or check for failures, LESS often by setting higher values here\u003Cbr\u003E        pollingInterval = 0\u003Cbr\u003E        failureCheckFrequency = 0\u003Cbr\u003E    }\u003Cbr\u003E\t// The TestFlightRecorder module is the second module required by the system.  This module is responsible\u003Cbr\u003E    // for collecting flight data, and thus the system is pretty useless without it.  This module defines\u003Cbr\u003E    // how the part gains flight data over time.  \u003Cbr\u003E    // There are different types of FlightRecorder modules, and mods can add new ones.\u003Cbr\u003E\t// There should only ever be a SINGLE TestFlightRecorder module on a part.\u003Cbr\u003E    MODULE\u003Cbr\u003E    {\u003Cbr\u003E        name = FlightDataRecorder_Engine\u003Cbr\u003E        // The data multiplier indicates, ROUGHLY, how many points of Flight Data\u003Cbr\u003E        // is accumulated per second of Mission Elapsed Time\u003Cbr\u003E        flightDataMultiplier = 10\u003Cbr\u003E        // The data engineer modifier is a bonus per level of engineer skill available in the vessel\u0027s crew\u003Cbr\u003E        flightDataEngineerModifier = 0.25\u003Cbr\u003E    }\u003Cbr\u003E\t// The TestFlightReliability module is responsible for calculating the reliability of the part based\u003Cbr\u003E\t// on flight data and given scope.  Again, there can be multiple of these modules, each canculating\u003Cbr\u003E\t// reliability differently.  \u003Cbr\u003E\t// You can have MULTIPLE Reliability modules on a single part.\u003Cbr\u003E    MODULE\u003Cbr\u003E    {\u003Cbr\u003E        name = TestFlightReliability\u003Cbr\u003E        // factor and multiplier control the difficulty curve of the realiabilty value\u003Cbr\u003E        // reliability = (flightData * realiabilityMultiplier) ^ (1/reliabilityFactor)\u003Cbr\u003E        reliabilityFactor = 2\u003Cbr\u003E        reliabilityMultipler = 3\u003Cbr\u003E        // The module can have one or more RELIABILITY_BODY nodes.  Each defines the min and max reliability\u003Cbr\u003E        // for a given \u0022Scope\u0022.\u003Cbr\u003E        RELIABILITY_BODY\u003Cbr\u003E        {\u003Cbr\u003E            scope = kerbin_atmosphere\u003Cbr\u003E            minReliability = 50\u003Cbr\u003E            maxReliability = 98\u003Cbr\u003E        }\u003Cbr\u003E        RELIABILITY_BODY\u003Cbr\u003E        {\u003Cbr\u003E            scope = kerbin_space\u003Cbr\u003E            minReliability = 35\u003Cbr\u003E            maxReliability = 95\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\t// The TestFlightFailure module is the last type of module in the system.  Each TestFlightFailure module\u003Cbr\u003E\t// defines a specific type of failure that can occur, and is responsible for causing that failure when\u003Cbr\u003E\t// told to, and for repairing the failure when told to.\u003Cbr\u003E    MODULE\u003Cbr\u003E    {\u003Cbr\u003E        name = TestFlightFailure_ShutdownEngine\u003Cbr\u003E        // User friendly name to identify the failure in the MSD.  Maximum of 25 characters!\u003Cbr\u003E        failureTitle = Engine Shutdown\u003Cbr\u003E        // Failure type can be either \u0022mechanical\u0022 or \u0022software\u0022.\u003Cbr\u003E        // Mechanical failures are physical failures of parts and require a Kerbal on site to repair it\u003Cbr\u003E        // Software failures are electrical or software glitches and can be repaired remotely\u003Cbr\u003E        failureType = mechanical\u003Cbr\u003E        // Severity of the failure: minor, failure, major\u003Cbr\u003E        // As a rule of thumb, minor failures should only hinder a vessel or mission, but not directly put it in danger\u003Cbr\u003E        severity = major\u003Cbr\u003E        // ** PLEASE USE ONLY THESE WEIGHTS **\u003Cbr\u003E        // The weight of the failure is how likely it is to occur RELATIVE to other failures defined on the same part\u003Cbr\u003E        // 2 = Rare, 4 = Seldom, 8 = Average, 16 = Often, 32 = Common\u003Cbr\u003E        weight = 4\u003Cbr\u003E        // If the failure can be repaired, then a REPAIR node mst be defined\u003Cbr\u003E        // If no FAILURE node is defined then hte failure can not be repaired\u003Cbr\u003E        REPAIR\u003Cbr\u003E        {\u003Cbr\u003E        \t// For PHYSICAL failures\u003Cbr\u003E            canBeRepairedOnLanded = True\u003Cbr\u003E            canBeRepairedOnSplashed = False\u003Cbr\u003E            canBeRepairedInFlight = True\u003Cbr\u003E            requiresEVA = False\u003Cbr\u003E            sparePartsRequired = 10\u003Cbr\u003E            // For SOFTWARE failures\u003Cbr\u003E            // canBeRepairedByRemote\u003Cbr\u003E            // dataScale\u003Cbr\u003E            // dataSize\u003Cbr\u003E            // For all failures\u003Cbr\u003E            repairChance = 100\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-29T03:22:55Z","Content":"\n\u003Cp\u003ESo for the next release I am working on getting as much of the core functionality in place as possible. By that I mean as many included modules for things like Failures and Reliability as I can, so with nothing but a base install of TestFlight you have a solid experience without any required additional mods.\u003C/p\u003E\u003Cp\u003EI am also working on improving the UI and introducing requirements for part repairs.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-29T17:34:00Z","Content":"\n\u003Cp\u003EI\u0027m going to be making some changes to the Failure interface. As I have started working on implementing repair systems for the failures, I have come to the conclusion that I don\u0027t like the interface as it stands.\u003C/p\u003E\u003Cp\u003EThe current interface was designed mainly to offload most of the \u0022verification\u0022 work to the TestFlightCore. The theory being the more TestFlight itself could handle, the less the mod author has to handle and that is always a good thing. Unfortunately the system as designed this way is not flexible enough to my liking and while it does make it easier on the mod authors, it also stifles creativity.\u003C/p\u003E\u003Cp\u003ESo I am going to be re-working the failure interface a bit. It will now be the responsibility of the failure module to determine for itself if the repair requirements have been met or not, and communicate that back to TestFlight.\u003C/p\u003E\u003Cp\u003EI will update the documentation once I am done.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T03:08:28Z","Content":"\n\u003Cp\u003EJust some updates to the OP formatting.\u003C/p\u003E\n"},{"CreatedByName":"Shad0wCatcher","CreatedById":98819,"CreatedDateTime":"2014-12-30T03:15:14Z","Content":"\n\u003Cp\u003ELooks interesting.\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-30T04:00:01Z","Content":"\n\u003Cp\u003ERather than specifying individual parts, would it be feasible to say make a MM cfg apply to all engines that use liquidfuel for instance and only specify specific ones if something different from \u0022standard\u0022 is wanted for those parts?\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T04:01:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003ERather than specifying individual parts, would it be feasible to say make a MM cfg apply to all engines that use liquidfuel for instance and only specify specific ones if something different from \u0022standard\u0022 is wanted for those parts?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETotally, and in fact that was how I started. I actually don\u0027t recall why I split them out.\u003C/p\u003E\n"},{"CreatedByName":"Joeythompson31","CreatedById":126465,"CreatedDateTime":"2014-12-30T07:38:50Z","Content":"\n\u003Cp\u003Ethis is awesome great job!!!\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-30T08:19:11Z","Content":"\n\u003Cp\u003EGreat! And sounds like we\u0027re thinking alike there \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E It should also make it automatically apply to mods as well then \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Nowater","CreatedById":115217,"CreatedDateTime":"2014-12-30T08:46:15Z","Content":"\n\u003Cp\u003EWooohooo very nice...downloading...\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T16:23:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EGreat! And sounds like we\u0027re thinking alike there \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E It should also make it automatically apply to mods as well then \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell you get too broad with the matching and things might get .. weird. Like you can apply the config to everything with an Engine module, but then you aren\u0027t distinguishing between Solid Rockets and Liquid Rockets, which you should. Also I think a more fun setup will have some engines more reliable and some less. I think providing large sweep configs is \u003Cstrong\u003Ecertainly doable\u003C/strong\u003E and I will try to get to that point for popular parts pack, but I also think that in the end the best experience will come from tighter tuning and integration from authors.\u003C/p\u003E\u003Cp\u003EBTW I remember now why I had separated them. At the time I was unsure how to apply a config only to liquid engines and another to solid rockets, and I wanted them to have different base reliabilities. So I split them into manual entries rather than a wildcard. I am still learning ModuleManager. I know now I could have done something like @PART[liquidEngine*] but I didn\u0027t know that at the time.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Joeythompson31\u0022 data-cite=\u0022Joeythompson31\u0022\u003E\u003Cdiv\u003Ethis is awesome great job!!!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThank you very much. Still early days and a lot of work to do.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nowater\u0022 data-cite=\u0022Nowater\u0022\u003E\u003Cdiv\u003EWooohooo very nice...downloading...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPlease let me know if you run into any issues or have feedback once you have tried it out. Still a lot of work to do, and there are no doubt tons of bugs at this point \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-30T16:52:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EWell you get too broad with the matching and things might get .. weird. Like you can apply the config to everything with an Engine module, but then you aren\u0027t distinguishing between Solid Rockets and Liquid Rockets, which you should. Also I think a more fun setup will have some engines more reliable and some less. I think providing large sweep configs is \u003Cstrong\u003Ecertainly doable\u003C/strong\u003E and I will try to get to that point for popular parts pack, but I also think that in the end the best experience will come from tighter tuning and integration from authors.\u003Cp\u003EBTW I remember now why I had separated them. At the time I was unsure how to apply a config only to liquid engines and another to solid rockets, and I wanted them to have different base reliabilities. So I split them into manual entries rather than a wildcard. I am still learning ModuleManager. I know now I could have done something like @PART[liquidEngine*] but I didn\u0027t know that at the time.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThank you very much. Still early days and a lot of work to do.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EPlease let me know if you run into any issues or have feedback once you have tried it out. Still a lot of work to do, and there are no doubt tons of bugs at this point \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was actually doing some of that last night using MM\u0027s HAS command to check for propellant to designate one setting \u0027group\u0027 for any part that uses liguidfuel propellant since only an engine would have propellant and another that use solidfuel propellant. ie. @PART[*]:HAS[@PROPELLANT[LiquidFuel]] \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ESide note question, to remove a chance of explosion on a part would that portion of the cfg code just be removed for that part or is there a veritable setting that needs to be changed instead? I\u0027m adding a reliability for water tanks from TAC-LS for a chance to leak but doesn\u0027t seem likely water would explode. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T17:00:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EI was actually doing some of that last night using MM\u0027s HAS command to check for propellant to designate one setting \u0027group\u0027 for any part that uses liguidfuel propellant since only an engine would have propellant and another that use solidfuel propellant. ie. @PART[*]:HAS[@PROPELLANT[LiquidFuel]] \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh very cool! Like I Said still learning the real tricks and power of MM so I didn\u0027t know you could do that!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003ESide note question, to remove a chance of explosion on a part would that portion of the cfg code just be removed for that part or is there a veritable setting that needs to be changed instead? I\u0027m adding a reliability for water tanks from TAC-LS for a chance to leak but doesn\u0027t seem likely water would explode. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EJust remove the TestFlightFailure_Explode module from the part you don\u0027t want to have any chance of exploding. Basically the system will select from any failure module on the part, so just put on only the ones you want it to choose from.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T19:30:03Z","Content":"\n\u003Cp\u003EAdded a list of current available core TestFlight modules to the Original Post, and here as well for reference:\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ECurrent Core Modules\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EWhile the system can be extended by other mods, TestFlight itself ships with a core set of modules. This is its current state.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECore Data Recorder Modules\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cem\u003EFlightDataRecorder\u003C/em\u003E - Records data at a low rate at all times\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003EFlightDataRecorder_Engine\u003C/em\u003E - Records data only when an engine is active and thrusting\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003EFlightDataRecorder_Resource\u003C/em\u003E - Records data only while the part has stored resources. Once empty (with threshold) it stops recording data\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECore Reliability Modules\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cem\u003ETestFlightReliability\u003C/em\u003E - Standard reliability calculation based on flight data. Reliability calculated on an increasingly sharper curve.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECore Failure Modules\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_Explode\u003C/em\u003E - Part explodes when failure occurs\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_LiquidFuelLeak\u003C/em\u003E - Part leaks LiquidFuel when failure occurs. A large initial leak followed by a small per second leak until repaired.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_LockGimbal\u003C/em\u003E - The engine\u0027s gimbal fails and gimbal range is set to 0 until repaired\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_ReducedMaxThrust\u003C/em\u003E - The engine\u0027s maximum thrust is reduced by 50% until repaired\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_ResourceLeak\u003C/em\u003E - Part leaks either a random stored resource, or a specified one. Large initial leak followed by a small per second leak until repaired.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cem\u003ETestFlightFailure_ShutdownEngine\u003C/em\u003E - Engine shuts down until repaired and restarted.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENOTE Some of these are coming in the next release.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EAdded a poll to help me focus my time after I finish up the current work on fleshing out the repair system. I would appreciate everyone\u0027s thoughts. Thanks for your support!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-30T19:18:53Z\u0022 title=\u002212/30/2014 07:18  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 30, 2014\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-30T19:38:51Z","Content":"\n\u003Cp\u003EWhile I\u0027m certainly no expert I\u0027m more that happy to provide suggestions for MM code that you could use if that would help \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Here are some which I hope may benefit you:\u003C/p\u003E\u003Cp\u003EAdd the engine testing to all engines that use liquid fuel:\u003C/p\u003E\u003Cp\u003E@PART[*]:HAS[@MODULE[ModuleEngines],@PROPELLANT[LiquidFuel]]\u003C/p\u003E\u003Cp\u003EAdd the same to all engines to use solid fuel:\u003C/p\u003E\u003Cp\u003E@PART[*]:HAS[@MODULE[ModuleEngines],@PROPELLANT[solidFuel]]\u003C/p\u003E\u003Cp\u003EAdd the fuel tank stuff to all parts listed as a fuel tank that contain any resource (ie not fuel line, etc.):\u003C/p\u003E\u003Cp\u003E@PART[*]:HAS[#category[FuelTank],@RESOURCE[*]]\u003C/p\u003E\u003Cp\u003EAdd tank stuff for any oxygen tank except for command modules (call them a protected emergency system \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E ):\u003C/p\u003E\u003Cp\u003E@PART[*]:HAS[@RESOURCE[Oxygen],!MODULE[ModuleCommand]]\u003C/p\u003E\u003Cp\u003Esame idea for water:\u003C/p\u003E\u003Cp\u003E@PART[*]:HAS[@RESOURCE[Water],!MODULE[ModuleCommand]]\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T19:44:32Z","Content":"\n\u003Cp\u003EWow HAS Category..that is cool! Thanks JeffreyCor those are helpful indeed.\u003C/p\u003E\u003Cp\u003EIts no surprise ModuleManager is by far the most used KSP AddOn. It really is amazingly powerful.\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2014-12-30T21:04:22Z","Content":"\n\u003Cp\u003EHaving a problem with the GUI not showing up in any screen. Clicking the toolbar icon just quickly flashes a small square but nothing more. Debug pops a \u0022[Log]: TestFlightManagerScenario: Removing 0 vessels from Master Status\u0022 entry a few times after clicking the button but that\u0027s all. Possible conflict or corrupt download?\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-30T21:42:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EHaving a problem with the GUI not showing up in any screen. Clicking the toolbar icon just quickly flashes a small square but nothing more. Debug pops a \u0022[Log]: TestFlightManagerScenario: Removing 0 vessels from Master Status\u0022 entry a few times after clicking the button but that\u0027s all. Possible conflict or corrupt download?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf it isn\u0027t showing up, it sounds like it isn\u0027t detecting any parts with TestFlight status. Could be your configs if you have been making your own, or could (likely) be a bug. Can I get a full dump of your log on Dropbox or something?\u003C/p\u003E\n"},{"CreatedByName":"8749236","CreatedById":27470,"CreatedDateTime":"2014-12-31T00:27:41Z","Content":"\n\u003Cp\u003EJust noticed this thread today...\u003C/p\u003E\u003Cp\u003EAnd noticed I was working on a similar mod, except it is complicated for dev but simpler for players =S...\u003C/p\u003E\u003Cp\u003EShould I just throw away my project and cheers?\u003C/p\u003E\n"}]}