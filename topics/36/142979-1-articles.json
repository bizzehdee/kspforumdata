{"TopicId":142979,"ForumId":36,"TopicTitle":"[1.1.3] kIPC - Inter-Process(or) Communication between kOS and KRPC - v0.2.0-beta now available!","CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-02T17:15:41Z","PageNum":1,"Articles":[{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-02T17:15:41Z","Content":"\n\u003Cp\u003E\nSo I finally\u00A0started playing with the kOS mod a couple of months ago, and started writing a comprehensive maneuver planning library for it. \u00A0This hit a brick wall pretty quickly when I tried to implement an interplanetary transfer planner in it using a Kerboscript port of Alexmoon\u0027s Transfer Window Planner and encountered processing times of... about 15 minutes.\n\u003C/p\u003E\n\u003Cp\u003E\nThen I decided it was finally time to play with kRPC. \u00A0Should be easy enough, I write Python professionally anyways. \u00A0But then it occurred to me:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nI have a ton of existing kOS code that already works and I\u0027d spend some time just rewriting it.\n\u003C/li\u003E\n\u003Cli\u003E\nkOS has some advantages over kRPC when it comes to craft control -- namely latency.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nI\u0027ve started writing my first-ever KSP plugin to try to implement a bridge between the two. \u00A0The timing couldn\u0027t be better either -- I discovered that \u003Ca href=\u0022https://github.com/KSP-KOS/KOS/pull/1667\u0022 rel=\u0022external nofollow\u0022\u003EkOS\u0027s external API support is so new, it\u0027s not even in a released version of kOS yet\u003C/a\u003E. \u00A0So I\u0027ve compiled that build of kOS myself from source\u00A0(which hopefully won\u0027t be a requirement by the time I release, I hear kOS 1.0.0 is right around the corner).\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ENote: The below developer build will\u00A0\u003Cem\u003ENOT\u003C/em\u003E\u00A0work without (not-yet-released) kOS 1.0.0. \u00A0It should work with the latest release candidate in the kOS thread.\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNow includes client libraries (with thanks to \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76528-djungelorm/\u0026amp;do=hovercard\u0022 data-mentionid=\u002276528\u0022 href=\u0022%7B___base_url___%7D/index.php?/profile/76528-djungelorm/\u0022 rel=\u0022\u0022\u003E@djungelorm\u003C/a\u003E\u00A0for assistance)\n\u003C/p\u003E\n\u003Cp\u003E\nA beta build is available at\u00A0\u003Ca href=\u0022https://github.com/dewiniaid/ksp-kipc/releases/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/dewiniaid/ksp-kipc/releases/\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAPI documentation for this release can be located at\u00A0\u003Ca href=\u0022https://github.com/dewiniaid/ksp-kipc/blob/v0.2.0-beta/doc/index.md\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/dewiniaid/ksp-kipc/blob/v0.2.0-beta/doc/index.md\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nLicensed GPLv3.\n\u003C/p\u003E\n\u003Cp\u003E\nOld history is spoilered below.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EDesign/Architecture:\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMost of the below is no longer accurate as I\u0027m going to be more or less mirroring kOS\u0027s upcoming communications API\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cs\u003EMy original idea was a sort of message queue. \u00A0I\u0027m foregoing that for now due to possible memory management concerns -- if a kOS script decided to send its position every frame and nothing was listening to the other end it\u0027d get messy pretty quickly and I don\u0027t want to deal with the idea of buffers too much. \u00A0So what I\u0027m using instead (unless I get better suggestions)\u00A0is somewhat similar, minus the queue:\u003C/s\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cs\u003EEach kOS Processor has a single \u0022inbound\u0022 and \u0022outbound\u0022 message.\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003E\u0022Acknowledging\u0022 a message clears it out.\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003EFrom the kOS side, there are functions to retrieve the current processor\u0027s inbound message (\u0022Receiving\u0022) if any, and\u00A0set (\u0022Sending\u0022) or cancel its outbound message\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003E\u003Cspan style=\u0022line-height:1.6;\u0022\u003EFrom both kOS and kRPC, there are API functions that set or cancel \u003C/span\u003E\u003Ci style=\u0022line-height:1.6;\u0022\u003Eany\u003C/i\u003E\u003Cspan style=\u0022line-height:1.6;\u0022\u003E\u00A0processor\u0027s inbound message (\u0022Sending\u0022 to that processor) or retrieve its current outbound message (\u0022Receiving\u0022 from that processor)\u003C/span\u003E\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003E\u003Cspan style=\u0022line-height:1.6;\u0022\u003EThe API won\u0027t let you send a message to a processor that already has a message waiting. \u00A0On the kOS side, it also won\u0027t let you send a message if your existing sent message is waiting. \u00A0This is to prevent a message from being overwritten before its seen by its intended destination. \u00A0Methods exist to cancel messages in both of these cases.\u003C/span\u003E\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003ESince mixing kOS and KRPC with multiple message senders/etc introduces the potential of race conditions and other pitfalls of asynchronous coding, there are API methods to do things like \u0022Cancel a processor\u0027s incoming message, but only if I\u0027m the sender\u0022 or \u0022Acknowledge a message, but only if it\u0027s this message ID.\u0022\u003C/s\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u003Cstrong\u003EMessage Data:\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAs far as I can tell (maybe\u00A0a KRPC developer (paging \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76528-djungelorm/\u0026amp;do=hovercard\u0022 data-mentionid=\u002276528\u0022 href=\u0022%7B___base_url___%7D/index.php?/profile/76528-djungelorm/\u0022 rel=\u0022external\u0022\u003E@djungelorm\u003C/a\u003E ) can chime in?), there isn\u0027t a good way to accommodate the transfer of\u00A0variably-typed data over KRPC. \u00A0\u003Cs\u003EI considered a standard serialization format (i.e. just sending JSON) but that would end up with its own problems (like needing to\u00A0converting a reference to a vessel back to an actual vessel). \u00A0So instead:\u003C/s\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u003Cs\u003EA message always has -- as its sole data\u00A0element -- a collection\u00A0of some form.\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003ECollections all have the same representation, but they\u00A0have a property to determine what kind of collection they are intended to represent (list, dict, queue or stack).\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003ECollections have a property to return a list of their member argument types and a bunch of methods to retrieve the Nth argument (for reading a message) or append an argument of a specified type (for writing a message).\u003C/s\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cs\u003EThis unfortunately means a *lot* of method calls to retrieve or send all of the arguments of a message, particularly if the\u00A0\u003C/s\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u003Cs\u003EI considered -- as an alternative -- having a property for \u0027all of the string parameters\u0027, one for \u0027all of the integer parameters\u0027, etc. \u00A0But that seems like bad design (even though it\u0027d mean for lower protocol overhead).\u003C/s\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI suppose I could go back to the JSON serialization route, but add metadata that states \u0022These fields are actually vessel IDs\u0022, etc. to the result and a means to resolve them. \u00A0Hmm... \u00A0\u003Cstrong\u003E(Update: that\u0027s exactly what I\u0027m doing).\u003C/strong\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-07-23T14:30:46Z\u0022 title=\u002207/23/2016 02:30  PM\u0022 data-short=\u00227 yr\u0022\u003EJuly 23, 2016\u003C/time\u003E by dewin\u003C/strong\u003E\n\u003Cbr\u003E0.2.0\n\u003C/span\u003E\n"},{"CreatedByName":"komodo","CreatedById":102065,"CreatedDateTime":"2016-07-03T17:59:47Z","Content":"\n\u003Cp\u003E\nVery neat! I have been wanting to play more with both of these addons, as, as you say, they each do different things very well.\n\u003C/p\u003E\n\u003Cp\u003E\nI also can understand the difficulty with interfacing the two different communication methods, so that is very clever. I don\u0027t have any pointed feedback, as I haven\u0027t actually had a chance to use it as of yet, though \u0026gt;\u0026lt;\n\u003C/p\u003E\n"},{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-05T05:46:52Z","Content":"\n\u003Cp\u003E\nI opted to do JSON serialization anyways with some customization; the greater part of the last couple days has been trying to get a JSON library to actually work with KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nBut now, I\u0027ve got this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nPRINT \u0022--Running kIPC Test Script--\u0022.\nPRINT \u0022Testing basic type serialization.\u0022.\nFOR value IN LIST(True, False, 42, 1.234567890987654321, 1e-17, 1e\u002B17, \u0022A String\u0022) {\n\tPRINT value \u002B \u0022 =\u0026gt; \u0022 \u002B addons:kipc:serialize(value).\n}\n\n\nPRINT \u0022Testing reference type serialization.\u0022.\nFOR value IN LIST(ship, core:part, body) {\n\tPRINT value \u002B \u0022 =\u0026gt; \u0022 \u002B addons:kipc:serialize(value).\n}\n\nPRINT \u0022Testing collections.\u0022.\nLOCAL s IS STACK().\ns:push(1).\ns:push(2).\ns:push(3).\ns:push(4).\n\nFOR value IN LIST(\n\tLIST(1,2,3),\n\ts, \n\tQUEUE(1,2,3,4,5),\n\tLEXICON(\u0022only_strings\u0022, 1, \u0022more data\u0022, 2),\n\tLEXICON(\u0022mixed\u0022, 1, 2, 3),\n\tLEXICON(9,8,7,6),\n\tLIST(LIST(1,2,3),LEXICON(\u0022foo\u0022, \u0022bar\u0022))\n) {\n\tPRINT addons:kipc:serialize(value).\n}\n\nPRINT \u0022Testing references in collections.\u0022.\nLOCAL foo IS LIST(\u0022foolist\u0022).\nLOCAL bar IS LIST(\u0022barlist\u0022, foo).\n\nPRINT addons:kipc:serialize(LIST(foo, bar)).\nPRINT addons:kipc:serialize(LIST(bar, foo)).\n\nPRINT \u0022Possibly crashing momentarily...\u0022.\nWAIT 5.\nfoo:add(bar).\n\nPRINT addons:kipc:serialize(LIST(foo, bar)).\nPRINT addons:kipc:serialize(LIST(bar, foo)).\n\u003C/pre\u003E\n\u003Cp\u003E\nWhich produces this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E--Running kIPC Test Script--\nTesting basic type serialization.\nTrue =\u0026gt; true\nFalse =\u0026gt; false\n42 =\u0026gt; 42\n1.23456789098765 =\u0026gt; 1.2345678909876543\n1E-17 =\u0026gt; 1E-17\n1E\u002B17 =\u0026gt; 1E\u002B17\nA String =\u0026gt; \u0022A String\u0022\nTesting reference type serialization.\nSHIP(\u0022Test Rocket\u0022) =\u0026gt; {\u0022type\u0022:\u0022vessel\u0022,\u0022data\u0022:\u0022b422057f-e7de-4c1e-806f-6907e19f6e9a\u0022}\nPART(kOSMachine1m,uid=4294806512) =\u0026gt; {\u0022type\u0022:\u0022part\u0022,\u0022data\u0022:187191025}\nBODY(\u0022Kerbin\u0022) =\u0026gt; {\u0022type\u0022:\u0022body\u0022,\u0022data\u0022:1}\nTesting collections.\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[1,2,3]}\n{\u0022type\u0022:\u0022stack\u0022,\u0022data\u0022:[1,2,3,4]}\n{\u0022type\u0022:\u0022queue\u0022,\u0022data\u0022:[1,2,3,4,5]}\n{\u0022type\u0022:\u0022dict\u0022,\u0022data\u0022:{\u0022only_strings\u0022:1,\u0022more data\u0022:2},\u0022keys\u0022:[],\u0022values\u0022:[],\u0022sensitive\u0022:false}\n{\u0022type\u0022:\u0022dict\u0022,\u0022data\u0022:{\u0022mixed\u0022:1},\u0022keys\u0022:[2],\u0022values\u0022:[3],\u0022sensitive\u0022:false}\n{\u0022type\u0022:\u0022dict\u0022,\u0022data\u0022:{},\u0022keys\u0022:[9,7],\u0022values\u0022:[8,6],\u0022sensitive\u0022:false}\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[1,2,3]},{\u0022type\u0022:\u0022dict\u0022,\u0022data\u0022:{\u0022foo\u0022:\u0022bar\u0022},\u0022keys\u0022:[],\u0022values\u0022:[],\u0022sensitive\u0022:false}]}\nTesting references in collections.\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022foolist\u0022],\u0022ref\u0022:2},{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022barlist\u0022,{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:2}]}]}\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022barlist\u0022,{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022foolist\u0022],\u0022ref\u0022:3}]},{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:3}]}\nPossibly crashing momentarily...\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022foolist\u0022,{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022barlist\u0022,{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:2}],\u0022ref\u0022:3}],\u0022ref\u0022:2},{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:3}]}\n{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022barlist\u0022,{\u0022type\u0022:\u0022list\u0022,\u0022data\u0022:[\u0022foolist\u0022,{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:2}],\u0022ref\u0022:3}],\u0022ref\u0022:2},{\u0022type\u0022:\u0022reference\u0022,\u0022data\u0022:3}]}\nProgram ended.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nNotable here is: All of the more complicated types include enough metadata to reconstruct them, and... a list that contains itself can be properly represented without breaking the game due to recursion. \u00A0(Fun fact: PRINTing that same list instantly crashes KSP).\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-08T06:53:42Z","Content":"\n\u003Cp\u003E\nOver the last couple days I\u0027ve been rewriting the serialization code (and implementing the deserialization code) to be a bit more modular and generally less terrible.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve also learned that the upcoming probably-tomorrow kOS release includes a inter-processor/inter-vessel communication bit, so I\u0027m scrapping a giant portion of my plugin and rewriting it to solely be interoperability between kOS and kRPC... so all of the documentation that\u0027s listed here is most likely now wrong. \u00A0On the bright side, this should\u00A0\u003Cem\u003Edrastically\u003C/em\u003E\u00A0reduce development time.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-07-08T06:53:51Z\u0022 title=\u002207/08/2016 06:53  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 8, 2016\u003C/time\u003E by dewin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-11T04:47:00Z","Content":"\n\u003Cp\u003E\nSuper-early dev build is now available in the first post.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you ignore the bold text and complain that it doesn\u0027t work, you\u0027re in the wrong forum \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-13T03:49:21Z","Content":"\n\u003Cp\u003E\nVersion 0.1.1-dev2 is now available; links in the first post.\n\u003C/p\u003E\n\u003Ch2 style=\u0022margin-top:1em;margin-bottom:16px;line-height:1.5;font-size:24px;font-weight:600;padding-bottom:.3em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:\u0027-apple-system\u0027, BlinkMacSystemFont, \u0027Segoe UI\u0027, Roboto, Helvetica, Arial, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-style:normal;font-variant:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;\u0022\u003E\n0.1.1-dev2 (2016-07-12)\n\u003C/h2\u003E\n\u003Cul style=\u0022padding-left:2em;margin-top:0px;margin-bottom:16px;color:rgb(51,51,51);font-family:\u0027-apple-system\u0027, BlinkMacSystemFont, \u0027Segoe UI\u0027, Roboto, Helvetica, Arial, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-size:16px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:24px;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;\u0022\u003E\u003Cli\u003E\nAdded\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.GetMessages\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Eand\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.CountMessages\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Efor better control and information about the message queue.\n\u003C/li\u003E\n\u003Cli style=\u0022margin-top:.25em;\u0022\u003E\nAdded\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.ResolveBodies\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Eand\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.ResolveVessels\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Eto handle multiple bodies/vessels at once.\n\u003C/li\u003E\n\u003Cli style=\u0022margin-top:.25em;\u0022\u003E\nAdded\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.GetProcessor\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Eto retrieve the kOSProcessor of a single part (compare to\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.GetProcessors\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Ewhich receives all processors on a given vesse)\n\u003C/li\u003E\n\u003Cli style=\u0022margin-top:.25em;\u0022\u003E\nAdded\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EKIPC.GetPartsTagged\u003C/code\u003E\u003Cspan\u003E\u00A0\u003C/span\u003Eto find parts with a given\u003Cspan\u003E\u00A0\u003C/span\u003E\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:13.6px;padding:.2em 0px;margin:0px;\u0022\u003EkOSNameTag\u003C/code\u003E.\n\u003C/li\u003E\n\u003C/ul\u003E\n"},{"CreatedByName":"dewin","CreatedById":96372,"CreatedDateTime":"2016-07-23T14:33:23Z","Content":"\n\u003Cp\u003E\nVersion 0.2.0 beta is now available; links in the \u003Cabbr title=\u0022Original Post(er). The first post in a thread, or the person who posted it.\u0022\u003EOP\u003C/abbr\u003E.\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nAdded client libraries for C#, C\u002B\u002B and Java.\n\u003C/li\u003E\n\u003Cli\u003E\nAdded preliminary support for \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E and KSP-AVC. This release\u00A0does \u003Cem\u003Enot\u003C/em\u003E\u00A0include MiniAVC and\u00A0does \u003Cem\u003Enot\u003C/em\u003E\u00A0use the internet to check for version updates, but other providers of MiniAVC/KSP-AVC might\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nBarring any major issues, this is the same version that I\u0027ll have in the Release thread -- I\u0027m just delaying that until kOS\u0027s final release.\n\u003C/p\u003E\n"},{"CreatedByName":"gowthamn","CreatedById":167509,"CreatedDateTime":"2016-09-08T10:23:08Z","Content":"\n\u003Cp\u003E\nVery nice explanation of use cases in git. And KOS version 1 is out. Probably you can update the 1st post? Looking forward to use it.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-09-08T10:23:22Z\u0022 title=\u002209/08/2016 10:23  AM\u0022 data-short=\u00227 yr\u0022\u003ESeptember 8, 2016\u003C/time\u003E by gowthamn\u003C/strong\u003E\n\u003C/span\u003E\n"}]}