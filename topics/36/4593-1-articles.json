{"TopicId":4593,"ForumId":36,"TopicTitle":"Documenting thrustVector math","CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-16T21:42:57Z","PageNum":1,"Articles":[{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-16T21:42:57Z","Content":"\n\u003Cp\u003EThere isn\\\u0027t any specific documentation about how the thrustCenter and thrustVector works aside from a small snippet in the wiki:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E thrustCenter = x, y, z\u003C/p\u003E\u003Cp\u003E thrustVector = angx, angy, angz \u003C/p\u003E\u003Cp\u003EthrustCenter - Where the thrust comes from.\u003C/p\u003E\u003Cp\u003EthrustVector - And which direction it goes. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd a few scattered posts by users explaining how it works.\u003C/p\u003E\u003Cp\u003EI\\\u0027ve been trying to wrap my mind around it myself, both with messing with RCS thrusters and with \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/index.php?topic=4614.0\u0022 rel=\u0022external nofollow\u0022\u003Eearlier issues with radial liquid boosters damaging things below them.\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/vO9Vh.jpg\u0022 alt=\u0022vO9Vh.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003ENow as a starting point, we should define what setting would replicate the default thrust behavior - directly down from the scene origin and starting just below the engine itself.\u003C/p\u003E\u003Cp\u003EIf I am not mistaken (which is quite possible) that is:\u003C/p\u003E\u003Cp\u003E//Below lowers the origin of thrust \u0027below\u0027 the engine slightly\u003C/p\u003E\u003Cp\u003EthrustCenter = 0, -0.5, 0\u003C/p\u003E\u003Cp\u003E//Below sets the direction of thrust \u0027UP\u0027 - meaning which direction it will push the ship\u003C/p\u003E\u003Cp\u003EthrustVector = 0, 1, 0\u003C/p\u003E\u003Cp\u003E//and if you wanted to add a flame\u0026amp;smoke effect to display the thrust, you\\\u0027d use this:\u003C/p\u003E\u003Cp\u003Efx_exhaustFlame_blue = 0, -0.5, 0, 0, 1, 0, active\u003C/p\u003E\u003Cp\u003Efx_smokeTrail_light = 0, -0.5, 0, 0, 1, 0, active\u003C/p\u003E\u003Cp\u003E*Note: if you align the exhaust effects with the thrust, and then change the thrust, the exhaust typically moves with it without having to change the settings; This is useful, but sometimes confusing, so keep that in mind.\u003C/p\u003E\u003Cp\u003ENow, I have tried to set the thrustVector so that it thrusts \\\u0027down and out\\\u0027 at 45 degrees on the X axis (which would roughly match how the model is designed) but have not had much luck.\u003C/p\u003E\u003Cp\u003ESo, I call forth ye Trigonometry shamans to explain the mystic ways of the Vectors.\u003C/p\u003E\n"},{"CreatedByName":"Killerhurtz","CreatedById":320,"CreatedDateTime":"2011-12-16T23:08:34Z","Content":"\n\u003Cp\u003EYour assumptions were correct - if we take in account that your model was centered with the scene.\u003C/p\u003E\u003Cp\u003ENow, quick teaching on a vector:\u003C/p\u003E\u003Cp\u003EA vector is, simply put, an imaginary set of coordinates which give a scalar (be it distance, speed or force), an orientation (either polar coordinates or a set of cartesian) and a direction (which is positive or negative) IN RELATION TO A REFERENCIAL.\u003C/p\u003E\u003Cp\u003EA referencial is simply a reference point, in this case, the scene of the model.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EHowever, get this out of your mind: we do NOT have thrust vectoring in liquid engines, at least not in the conventional form. BUT. The thrust, when at rest, will ALWAYS point to the VECTORIAL DOWN - that is, the down in the frame of reference that is your model scene, which is defined by the ATTACH NODES. Which gives us an unorthodox method of thrust vectoring.\u003C/span\u003E WAS PROVEN WRONG\u003C/p\u003E\u003Cp\u003ELet me show you by building a snippet of a radial attachment node (because that\\\u0027s the simplest way - will elaborate on this later):\u003C/p\u003E\u003Cp\u003ESo we have this: \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Enode_attach = x, y, z, angx, angy, angz, size\u003C/pre\u003E\u003Cp\u003E \u003C/p\u003E\u003Cp\u003Ex, y, z and size are pretty straightforwards. How many units away from the SCENE origin should the attachment be in each direction, and the size. Something to keep in mind is that KSP uses the engineering references of Y-up, X-side and Z-front.\u003C/p\u003E\u003Cp\u003Eangx, angy and angz, however, is something else (and if you want my opinion, the wiki describes it wrong: it should be ptx, pty and ptz because of how it works. To wrap your head around this, it\\\u0027s pretty simple: figure this: you have a linear function. No start, no end, but all you know is that it passes by the absolute zero coordinate (0, 0, 0) AND the coordinates set by (ptx, pty and ptz. Your model follows that line, and is centered. In order to find out what coordinate ratio (because it\\\u0027s a line, [1, 1, 1] gives the same angle as [2, 2, 2]) you need, you are going to need to figure out your angle in relation to the plans.\u003C/p\u003E\u003Cp\u003ETo make things simple, let\\\u0027s say you want it angled outwards and left at 45 degrees each. Which gives a rotation of 45 degrees in the ZY plan and in the XY plan. Here comes the trigonometry: to figure out your ratio, simply calculate your sine and cosine of that angle, and use those values as your coordinates (it\\\u0027d be something else to explain why, but drop a PM and I may explain). Now, there\\\u0027s a reason I picked 45 degrees for simplicity. Since the tangent of 45 degrees is 1, it means cos = sin, which means your two values will always be identical. Long story short, your trio will look like this: 1, 1, 1 (which means the second point is at one unit in every direction). This will cause the game to align what is designed as \u0027up\u0027 in your part to line up with that function. \u003C/p\u003E\u003Cp\u003EOf course, now the MATHEMATICAL part of your part is correct - your model, however, might not be. When making liquid engines meant to go at an angle, you want to model\\\u0027s exhaust to be facing STRAIGHT DOWN and your model to be facing the Z axis (which is the Y axis in 3ds) when exporting. To make it easy, create your model and only at the VERY end, just before exporting, rotate the whole model (\u002Bcollision mesh) until the model points straight down as required (NOTE THE ANGLES AT WHICH YOU ROTATE - THEY ARE CRUCIAL FOR THE MATHEMATICAL PART IF YOU WANT TO AVOID TRIAL AND ERROR FOR LINING UP YOUR PART OR IF YOU WANT ACCURATE RESULTS)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Chr\u003E\u003Cp\u003EEND OF ANGLED LIQUIDS TUTORIAL\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Chr\u003E\u003Cp\u003EAddendums: When I was saying radial attachment was the simplest, it\\\u0027s because it\\\u0027s the only nodes that actually angles the part. If you want to have rotated STACKS, you will need to apply the rotation to the PARENT node.\u003C/p\u003E\u003Cp\u003EJust PM me if there\\\u0027s anything unclear.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-16T23:15:50Z","Content":"\n\u003Cp\u003EActually, we do have thrustVectoring open to Liquids now, just like solids, as of 0.13.\u003C/p\u003E\u003Cp\u003EThus it is probably best to actully vector the thrust and center, and leave the part attachments properly aligned, I would think.\u003C/p\u003E\n"},{"CreatedByName":"Killerhurtz","CreatedById":320,"CreatedDateTime":"2011-12-17T01:47:27Z","Content":"\n\u003Cp\u003EIt\\\u0027s not in the changelog, but if that\\\u0027s the case, thrustCenter works just like x, y, z and thustVector works just like ptx, pty and ptz.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-17T01:54:25Z","Content":"\n\u003Cp\u003EHe updated the changelog in the main thread, he didn\\\u0027t open up thrustCenter yet, but he did open vector.\u003C/p\u003E\u003Cp\u003EIf they work the exact same, how to you specify the direction of the thrust? by which quadrant you use the coordinates of (IE for the 45 degree slope, you\\\u0027d use the coordinates of the \\\u0027upper right\\\u0027 quadrant if its pushing down and to the left (assuming Z is the depth axis)?\u003C/p\u003E\n"},{"CreatedByName":"Killerhurtz","CreatedById":320,"CreatedDateTime":"2011-12-17T02:22:33Z","Content":"\n\u003Cp\u003ESee, that\\\u0027s the tricky part about rocketry: you assume that because the exhaust points a direction, the force goes that direction. However, remember that exhaust propels your rocket using the concept of Newton\\\u0027s third law of motion: the mutual forces of action and reaction between two bodies are equal, opposite and collinear. Exhaust goes out in a direction, the force it applies is actually in the OPPOSITE direction.\u003C/p\u003E\u003Cp\u003EBut yes, your guess was right. For an exhaust heading into the lower left quadrant, your force vector will be in the upper right. Your thrust vector is ALWAYS in the direction you want the FORCE to be applied. The best trick for this is to imagine an arrow starting from the origin and going where you want to go: the tip of the arrow is your vector.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-17T17:35:32Z","Content":"\n\u003Cp\u003EHere\\\u0027s a sample diagram of what he said, using thrustVector config instead of angling the model\\\u0027s connecting angle:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/N0utb.png\u0022 alt=\u0022N0utb.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-17T18:08:28Z","Content":"\n\u003Cp\u003Eexcept, this doesn\\\u0027t seem to translate into game properly, so I am not sure what is wrong in my example.\u003C/p\u003E\u003Cp\u003Enode_attach = -0.05, 0.0, 0.0, 1.0, 0.0, 0.0\u003C/p\u003E\u003Cp\u003Efx_exhaustFlame_blue = 0, -0.75, 0, -1, -1, 0, active\u003C/p\u003E\u003Cp\u003EthrustVector = 1, 1, 0\u003C/p\u003E\n"},{"CreatedByName":"Killerhurtz","CreatedById":320,"CreatedDateTime":"2011-12-17T19:51:33Z","Content":"\n\u003Cp\u003EWhat is wrong is that you forgot to take in mind what I had said: KSP assumes Y is up, Z is front and X is side. Standard engineering alignment. Took me a while to catch on too when I first learnt it (although arguably you can shenanigan your way around it if you do it right, it might just cause problems with some rotation parameters)\u003C/p\u003E\u003Cp\u003EOH also, the exhaust\\\u0027s particles are coded to go \u0027down\u0027. So by defining that node as down, your exhaust is going to appear to go up (I assume that\\\u0027s what you have noticed?)\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-17T20:11:39Z","Content":"\n\u003Cp\u003EIt doesnt use the axis relative to the part\\\u0027s origin? because this part is oriented where X is front and Z is side, as you can see with the attachment node, and it attaches correctly.\u003C/p\u003E\u003Cp\u003EBut even applying the Y axis according to this doesn\\\u0027t work as expected.\u003C/p\u003E\n"},{"CreatedByName":"trvtannenberg","CreatedById":8491,"CreatedDateTime":"2011-12-17T20:33:39Z","Content":"\n\u003Cp\u003EI figured out that thrustVector = 1, 1, 0 (same vector should be put into FX definitionswork) work as intended.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropbox.com/u/42102666/screenshot1.png\u0022 alt=\u0022screenshot1.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-17T22:52:00Z","Content":"\n\u003Cp\u003EThat does indeed make the exhaust look right, but there is no upwrd thrust. In fact, something may be broken because I can\\\u0027t see that it is adding any noticeable thrust in ANY direction.\u003C/p\u003E\u003Cp\u003EAlso, since the exhaust applied in that direction, I tried the opposite vecto for thrust, which is 225 degrees (if zero is on the x\u002B line, 180 is x-negative \u002B another 45 degrees is 225)\u003C/p\u003E\u003Cp\u003ETaking the sine and consine of 225, you get -0.71\u003C/p\u003E\u003Cp\u003EIf you use those as the thrustVector and leave exhaust at 1,1,0 you still do not get any thrust, but the exhaust is flipped over 180 degrees so that it looks to be going 45 degrees up and out.\u003C/p\u003E\u003Cp\u003ESomething is seriously not working as expected here.\u003C/p\u003E\n"},{"CreatedByName":"trvtannenberg","CreatedById":8491,"CreatedDateTime":"2011-12-17T23:38:38Z","Content":"\n\u003Cp\u003EthrustVector = -1, 1, 0 and thrustVector = 0.1, 1, 0 (but not anything larger than 0.1 in first number will work) work, but thrustVector = 1, 1, 0 (and thrustVector = 0.1, 0.1, 0) not work at all. This looks like bug.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-18T00:28:31Z","Content":"\n\u003Cp\u003ESo to be thorough before submitting a bug, I opened up the model to adjust things an check for errors:\u003C/p\u003E\u003Cp\u003EIt now is oriented \u0027Z up\u0027 in KSP since it faces positive Y in Blender.\u003C/p\u003E\u003Cp\u003Ehowever, when I exported it like this and adjusted the node_attach cfg parameter, it tried to connect reversed, with the flat part facing out. I had to set it to negative Z UP to make it connect right:\u003C/p\u003E\u003Cp\u003Enode_attach = 0.0, 0.0, 0.1, 0.0, 0.0, -1.0\u003C/p\u003E\u003Cp\u003ESo, something is causing the Z axis to be reversed on the connection\u003C/p\u003E\u003Cp\u003EAnyway, I thought I would start over with the expected values:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Efx_exhaustFlame_blue = 0, -0.75, 0, 0, 1, 1, active\u003C/p\u003E\u003Cp\u003EthrustVector = 0,1,1\u003C/p\u003E\u003Cp\u003EthrustVectoringCapable = True\u003C/p\u003E\u003Cp\u003EgimbalRange = 40\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E... and it works, 100% perfectly. Even setting the gimbal range to 40 keeps it from strafing the tank below it and doing damage.\u003C/p\u003E\u003Cp\u003ESo I reloaded the unedited model, and found that the model and collider both had a rotation applied to their X axis of 90 degrees. The game wasn\\\u0027t respecting this rotation visually, but it was messing up the thrustVector input.\u003C/p\u003E\u003Cp\u003ETwo things remain unclear to me, before we can call this case-closed:\u003C/p\u003E\u003Cp\u003EWhy is the attach node requiring -1 on the Z axis?\u003C/p\u003E\u003Cp\u003EAnd why is the exhaust FX not requring the \u0027reverse\u0027 of the thrustVector - can we now assume that exhaust implicitly factors this in, and you should set your VFX vectors to match your velocity vectors?\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2011-12-18T01:33:01Z","Content":"\n\u003Cp\u003Eactually from what I can tell, the numbers in your fx_whatever do not matter whatsoever, so long as its formatted properly to activate, it will then match itself to the engine exactly as it should.\u003C/p\u003E\u003Cp\u003EVery handy and makes it easy to test engines.. but also probably a bug.\u003C/p\u003E\u003Cp\u003EBecause the numbers do not affect the exhaust trail at all.\u003C/p\u003E\n"},{"CreatedByName":"foamyesque","CreatedById":2982,"CreatedDateTime":"2012-02-05T21:22:41Z","Content":"\n\u003Cp\u003ESomething I found out when trying to chase down results in an LES that did not match the math (specifically, the accelerations were far too low):\u003C/p\u003E\u003Cp\u003EKSP translates the thrustVector into actual thrust by simply multiplying it by the specified thrust in the .cfg. In essence it is assuming you are providing a unit vector.\u003C/p\u003E\u003Cp\u003EIf you are not-- for example, in the NovaPunch LES tower-- this has unwanted results. For an illustration of the effect, take the stock booster, clone it, and alter the thrust vector in the .cfgs to be 0, 0.1, 0 for one and 0, 10.0, 0 for the other. Compare the three boosters. =)\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2012-02-06T01:51:56Z","Content":"\n\u003Cp\u003ECan you be more plain on what you think the issue is with the NP escape tower?\u003C/p\u003E\u003Cp\u003Efor reference, its set to: thrustVector = 0.25, 0.435, 0\u003C/p\u003E\u003Cp\u003E(its supposed to be .95 on the Y axis for Cosine(15) but I had to change it to .435 for some reason I don\\\u0027t remember...)\u003C/p\u003E\n"},{"CreatedByName":"sarkun","CreatedById":10559,"CreatedDateTime":"2012-02-06T05:56:06Z","Content":"\n\u003Cp\u003EAre we talking about only the SRBs here or RCS as well? Cause I seem to have some different experiences with RCS\\\u0027s.\u003C/p\u003E\n"},{"CreatedByName":"foamyesque","CreatedById":2982,"CreatedDateTime":"2012-02-06T08:08:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tiberion\u0022 data-cite=\u0022Tiberion\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ECan you be more plain on what you think the issue is with the NP escape tower?\u003C/p\u003E\u003Cp\u003Efor reference, its set to: thrustVector = 0.25, 0.435, 0\u003C/p\u003E\u003Cp\u003E(its supposed to be .95 on the Y axis for Cosine(15) but I had to change it to .435 for some reason I don\\\u0027t remember...)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou have about half the vertical thrust that you should have. KSP assumes you\\\u0027re feeding it a unit vector (e.g., a length of 1), but if you work out the trig you\\\u0027ll see that yours has a hypotenuse of around 0.5.\u003C/p\u003E\u003Cp\u003EConsider each of the vector numbers as a multipler for the given axis. As long as you\\\u0027ve done your trig properly and use a unit vector, everything works out neatly; however, if you use a non-unit vector you can get arbitrarily large or small amounts of thrust in any given axis for any given rated thrust.\u003C/p\u003E\u003Cp\u003EIt looks like you were going for a 30-degree offset from vertical. The correct numbers for this are 0.5 and .866 (the sine and cosine of 30deg, respectively).\u003C/p\u003E\u003Cp\u003EIt\\\u0027s not a huge deal as long as your tower is behaving the way you want it to, Tiberion, but I was designing a tower that had to do a certain very specific job (e.g, pull the CM away from a stack that could be accelerating at up to 4\u003Cem\u003Eg\u003C/em\u003E), and the numbers I was using, which in the real world and in my calculations would have sufficed to generate around 5.5\u003Cem\u003Eg\u003C/em\u003E of acceleration in a 1\u003Cem\u003Eg\u003C/em\u003E environment, were failing to move things away from my test stack. The culprit was the 0.435 instead of 0.866.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2012-02-06T09:03:04Z","Content":"\n\u003Cp\u003EActually it was originally 45 and it wasn\\\u0027t lifting enough, so I reworked it to 15 degrees off vertical.\u003C/p\u003E\u003Cp\u003ESomething was bugging out the thrust origin (which we cannot move on liquids) so I had to shift the Y vector to the current one, it should be .95 or whatever for Cos(15) since X is set to Sin(15)\u003C/p\u003E\u003Cp\u003EIt wasn\\\u0027t really behaving as expected, but the current numbers were removing the Pod, tower, and parachute up and out in a satisfactory manner, so I went with it. So, was 0.25, 0.866, 0 working well for you?\u003C/p\u003E\n"},{"CreatedByName":"foamyesque","CreatedById":2982,"CreatedDateTime":"2012-02-06T09:34:28Z","Content":"\n\u003Cp\u003EUm, Tib, .25 .435 works out to a 30 degree angle, not 15. (Well, 29 degrees and assorted, but close enough)... I may have an older version of the tower, if you\\\u0027ve changed it to be cos/sin 15.\u003C/p\u003E\u003Cp\u003EI was re-designing it to Apollo LES specs, so I had a thrust (total between the two towers) of 667 kN, shifting a mass of approximately nine tonnes. On the original .25 .435 configuration, this produced a launch acceleration of around 3\u003Cem\u003Eg\u003C/em\u003E, which was far, far less than what I was expecting or what I got when I calculated the angles. Converting it into a unit vector .5, .866 configuration, which retained the 30 degree thrust angles, corrected the problem.\u003C/p\u003E\u003Cp\u003E.25 .866 would result in less lateral thrust (and hence the total thrusts would not work out to the rated thrust). It\\\u0027s mostly irrelevant given the neutralisation from the opposing tower that occurs, but it isn\\\u0027t technically correct.\u003C/p\u003E\n"},{"CreatedByName":"Tiberion","CreatedById":8356,"CreatedDateTime":"2012-02-06T17:34:36Z","Content":"\n\u003Cp\u003EWell, did some ingame testing.\u003C/p\u003E\u003Cp\u003EThe difference in practice of 30 degrees (0.5, 0.866, 0) and 15 degrees (0.26, 0.95, 0) was not noticeable. From a pad test, they both hit about 550m, and it still pulls to the west, landing right near the VAB building when \\\u0027chuting at the top of the trajectory.\u003C/p\u003E\u003Cp\u003EThe current number (0.25, 0.435, 0) indeed does result in about half of the velocity, peaking at 275m and landing halfway to the VAB.\u003C/p\u003E\u003Cp\u003ESo, point taken on the velocity vector math. I\\\u0027m not sure I like how much velocity it generates with the \\\u0027correct\\\u0027 numbers, but I\\\u0027ll probably use them and then tweak the thrust to get the desired results.\u003C/p\u003E\n"}]}