{"TopicId":162200,"ForumId":36,"TopicTitle":"[WIP][1.8.1, 1.9.1, 1.10.1, 1.11.0\u20132, 1.12.2\u20135] Principia\u2014version \u200E\u200EKleene, released 2024-07-05\u2014n-Body and Extended Body Gravitation","CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-05T00:19:35Z","PageNum":9,"Articles":[{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-20T16:20:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EIndeed, no GR here.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGR \u002B KMP would melt my brain.... \u0022Has he been here? Is he going to be here? Will he be here, as I\u0027m seeing him now, if I travel to the future, even though he has already been here from my point of view?\u0022\u003C/p\u003E\n"},{"CreatedByName":"Amaroq","CreatedById":57607,"CreatedDateTime":"2014-03-20T17:15:01Z","Content":"\n\u003Cp\u003EAiiee, wait, what, Jeb is here, but he\u0027s also there .. but .. ?!?\u003C/p\u003E\u003Cp\u003EMy brain would explode, but that\u0027s actually pretty close to what having a two-year-old in the house feels like, so I guess I\u0027m used to it. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-20T17:24:42Z","Content":"\n\u003Cp\u003EBy the way, I have coded up a data parallel version in F# of the NDSolve algorithm you (OP) referenced. I haven\u0027t run any real performance tests, in particular in a KSP context, but I could probably use equivalent test cases to those you have to see if there are any gains from a straight-forward parallel array solution. I\u0027m using .NET Async\u0026lt;T\u0026gt; and F# Array.Parallel, so I\u0027m not sure about the amount of marshalling and such going on ....\u003C/p\u003E\u003Cp\u003EThanks again for all the excellent references, my continued reading has made me something of a H. Yoshida fan \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis one had an interesting bit about softening: \u003Ca href=\u0022http://articles.adsabs.harvard.edu/cgi-bin/nph-iarticle_query?1991CeMDA..50...59K\u0026amp;defaultprint=YES\u0026amp;filetype=.pdf\u0022 rel=\u0022external nofollow\u0022\u003ESymplectic integrators and their application to dynamical astronomy \u003C/a\u003E(Kinos-h-i-ta, H., Yoshida, H., \u0026amp; Nakai, H.) \u003C/p\u003E\u003Cp\u003E(forum does \u003Cem\u003Enot\u003C/em\u003E like romaji)\u003C/p\u003E\u003Cp\u003EI\u0027ll try putting some tests together and see if I can integrate (uh, the software kind) your KSP stuff with my solution. I\u0027m not expecting all that much, but I\u0027ve purposely written it as to be easily convertible to OpenCL kernels. I have doubts about using the .NET thread pool inside the Unity process, it might just degenerate to context swapping...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-20T18:08:21Z\u0022 title=\u002203/20/2014 06:08  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 20, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003Cbr\u003Eforum context\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-20T23:10:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Amaroq\u0022 data-cite=\u0022Amaroq\u0022\u003E\u003Cdiv\u003EAiiee, wait, what, Jeb is here, but he\u0027s also there .. but .. ?!?\u003Cp\u003EMy brain would explode, but that\u0027s actually pretty close to what having a two-year-old in the house feels like, so I guess I\u0027m used to it. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou could accelerate to relativistic speeds, then slow down and go back. I you calculated your trajectory correctly, your two-year-old would be old enough not to make your brain explode, while you would have aged significantly less than him.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003EBy the way, I have coded up a data parallel version in F# of the NDSolve algorithm you (OP) referenced. I haven\u0027t run any real performance tests, in particular in a KSP context, but I could probably use equivalent test cases to those you have to see if there are any gains from a straight-forward parallel array solution. I\u0027m using .NET Async\u0026lt;T\u0026gt; and F# Array.Parallel, so I\u0027m not sure about the amount of marshalling and such going on ....\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA data-parallel integrator? That sounds interesting! Could you put up the source on GitHub?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThanks again for all the excellent references, my continued reading has made me something of a H. Yoshida fan \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re welcome! I should get around to writing a second explanatory post at some point... There is a lot of overlap with my answers to your questions, so that much work is already done.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThis one had an interesting bit about softening: \u003Ca href=\u0022http://articles.adsabs.harvard.edu/cgi-bin/nph-iarticle_query?1991CeMDA..50...59K\u0026amp;defaultprint=YES\u0026amp;filetype=.pdf\u0022 rel=\u0022external nofollow\u0022\u003ESymplectic integrators and their application to dynamical astronomy \u003C/a\u003E(Kinos-h-i-ta, H., Yoshida, H., \u0026amp; Nakai, H.) \u003C/p\u003E\u003Cp\u003E(forum does \u003Cem\u003Enot\u003C/em\u003E like romaji)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can add a cyrillic character: Kinosh\u00C3\u2018\u00E2\u20AC\u201Cta.\u003C/p\u003E\u003Cp\u003ESince you\u0027re the category theorist in the room, what do you think of the way the Geometry assembly (\u003Ca href=\u0022https://github.com/eggrobin/Principia/tree/master/CTSGeometry\u0022 rel=\u0022external nofollow\u0022\u003Enow called CTSGeometry\u003C/a\u003E) is structured? I\u0027ll be rewriting it in C\u002B\u002B/CLI to integrate (this word is too polysemic) physical quantities, but nothing fundamental should change.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-21T00:12:45Z\u0022 title=\u002203/21/2014 12:12  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 21, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-21T01:47:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EA data-parallel integrator? That sounds interesting! Could you put up the source on GitHub?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will be putting it up eventually, but it\u0027s an undocumented hard-coded hacking bonanza as it is \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EData parallel in this context is pretty simplistic, it\u0027s simply the observation that integration is partitioned with a single dependency across the computational front; it\u0027s independent in the number of objects and components. The relevant part looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ewhile (t \u0026lt; tmax) do\u003Cbr\u003E    let \u00C3\u017D\u00E2\u20ACqStage = ref (Array.zeroCreate hypDim)\u003Cbr\u003E    let \u00C3\u017D\u00E2\u20ACpStage = ref (Array.zeroCreate hypDim)\u003Cbr\u003E    for i = 1 to stages do\u003Cbr\u003E    let f = force(ks.kBodies())\u003Cbr\u003E    // closures (over immutable references to internal structures)\u003Cbr\u003E    let ap = fun ix e -\u0026gt; let e\u0027 = e \u002B \u00C3\u017D\u00E2\u20ACt * b.[i-1] * f.[ix]\u003Cbr\u003E                              p.[ix] \u0026lt;- pPrev.[ix] \u002B e\u0027\u003Cbr\u003E                              e\u0027\u003Cbr\u003E    let aq = fun ix e -\u0026gt; let e\u0027 = e \u002B \u00C3\u017D\u00E2\u20ACt * a.[i-1] * p.[ix]\u003Cbr\u003E                              q.[ix] \u0026lt;- qPrev.[ix] \u002B e\u0027\u003Cbr\u003E                              e\u0027\u003Cbr\u003E    // note the dependency of q on p; this is the computational front\u003Cbr\u003E    \u00C3\u017D\u00E2\u20ACpStage := Array.Parallel.mapi ap !\u00C3\u017D\u00E2\u20ACpStage\u003Cbr\u003E    \u00C3\u017D\u00E2\u20ACqStage := Array.Parallel.mapi aq !\u00C3\u017D\u00E2\u20ACqStage\u003Cbr\u003E    // Parallel compensated summation, independent in the \u0022phase space hypervector\u0022;\u003Cbr\u003E    // ie. for every component\u003Cbr\u003E    let sp = fun ix e -\u0026gt; let \u00C3\u017D\u00E2\u20ACp = e \u002B pErr.[ix]\u003Cbr\u003E                              p.[ix] \u0026lt;- pPrev.[ix] \u002B \u00C3\u017D\u00E2\u20ACp\u003Cbr\u003E                              pErr.[ix] \u0026lt;- (pPrev.[ix] - p.[ix]) \u002B \u00C3\u017D\u00E2\u20ACp\u003Cbr\u003E                              pPrev.[ix] \u0026lt;- p.[ix]\u003Cbr\u003E    let sq = fun ix e -\u0026gt; let \u00C3\u017D\u00E2\u20ACq = e \u002B qErr.[ix]\u003Cbr\u003E                              q.[ix] \u0026lt;- qPrev.[ix] \u002B \u00C3\u017D\u00E2\u20ACq\u003Cbr\u003E                              qErr.[ix] \u0026lt;- (qPrev.[ix] - q.[ix]) \u002B \u00C3\u017D\u00E2\u20ACq\u003Cbr\u003E                              qPrev.[ix] \u0026lt;- q.[ix]\u003Cbr\u003E    [ async { Array.Parallel.iteri sp !\u00C3\u017D\u00E2\u20ACpStage};\u003Cbr\u003E      async { Array.Parallel.iteri sq !\u00C3\u017D\u00E2\u20ACqStage} \u003Cbr\u003E    ] |\u0026gt; Async.Parallel |\u0026gt; Async.Ignore |\u0026gt; Async.RunSynchronously\u003Cbr\u003E    // time calculations (not async to avoid ref clutter, little gain)\u003Cbr\u003E    \u00C3\u017D\u00C2\u00B4t \u0026lt;- \u00C3\u017D\u00E2\u20ACt \u002B tErr\u003Cbr\u003E    t \u0026lt;- t \u002B \u00C3\u017D\u00C2\u00B4t\u003Cbr\u003E    tErr \u0026lt;- (tPrev - t) \u002B \u00C3\u017D\u00C2\u00B4t\u003Cbr\u003E    tPrev \u0026lt;- t                \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat being said, simplistic as it is, profiling reveals that 30% of the CPU time is spent in parallel computations (force calculations being the major contributor to the rest), so there is a significant gain in speed at the expense of eating lots of ram. It\u0027s really a great fit for GPGPU! Using octrees and FMM, the force calculations can be parallelized in a similar fashion, but then we\u0027re talking tree codes! \u003C/p\u003E\u003Cp\u003EMy next step is to formalize the above to a polymorphic parallel vector/matrix/array library to clean up the syntax and hide as much as possible of the asynchronous primitives.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESince you\u0027re the category theorist in the room, what do you think of the way the Geometry assembly (\u003Ca href=\u0022https://github.com/eggrobin/Principia/tree/master/CTSGeometry\u0022 rel=\u0022external nofollow\u0022\u003Enow called CTSGeometry\u003C/a\u003E) is structured? I\u0027ll be rewriting it in C\u002B\u002B/CLI to integrate (this word is too polysemic) physical quantities, but nothing fundamental should change.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m mostly impressed you have the patience for that working in C# \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EHonestly I don\u0027t know much about the interface towards Unity/KSP, so I can\u0027t say if the structure is suitable or not.... From a general stand-point it\u0027s what I would expect, and that\u0027s usually a good sign with code.\u003C/p\u003E\u003Cp\u003EI think any implementation of abstract algebra will only show it\u0027s efficacy when you start using it (eh, that\u0027s another of those \u0022did I just say that\u0022) -- I usually do that in typed functional languages since metaprogramming is more or less inherent to that style. Much of what you are doing would probably be a lot more concise in an ML style language (Haskell, F#/OCAML). The extreme is Haskell\u0027s type classes that lets you embed categories directly in the category of types-- operators (eg \u00C3\u00A2\u00CB\u2020\u00C2\u00A7) get their expected properties through simple instance declarations of the underlying types with minimal boilerplate coding. Once you\u0027ve coded the type classes, of course, but that\u0027s a lot less typing than OOP classes! \u003C/p\u003E\u003Cp\u003EF# measurement types work pretty well, but not so much when you do things like n\u003Csup\u003E3/2\u003C/sup\u003E... are they the same as the ones accessible from C\u002B\u002B I wonder?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-21T01:52:48Z\u0022 title=\u002203/21/2014 01:52  AM\u0022 data-short=\u002210 yr\u0022\u003EMarch 21, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-21T02:13:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003EI will be putting it up eventually, but it\u0027s an undocumented hard-coded hacking bonanza as it is \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003EData parallel in this context is pretty simplistic, it\u0027s simply the observation that integration is partitioned with a single dependency across the computational front; it\u0027s independent in the number of objects and components. The relevant part looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ewhile (t \u0026lt; tmax) do\u003Cbr\u003E    let \u00C3\u017D\u00E2\u20ACqStage = ref (Array.zeroCreate hypDim)\u003Cbr\u003E    let \u00C3\u017D\u00E2\u20ACpStage = ref (Array.zeroCreate hypDim)\u003Cbr\u003E    for i = 1 to stages do\u003Cbr\u003E    let f = force(ks.kBodies())\u003Cbr\u003E    // closures (over immutable references to internal structures)\u003Cbr\u003E    let ap = fun ix e -\u0026gt; let e\u0027 = e \u002B \u00C3\u017D\u00E2\u20ACt * b.[i-1] * f.[ix]\u003Cbr\u003E                              p.[ix] \u0026lt;- pPrev.[ix] \u002B e\u0027\u003Cbr\u003E                              e\u0027\u003Cbr\u003E    let aq = fun ix e -\u0026gt; let e\u0027 = e \u002B \u00C3\u017D\u00E2\u20ACt * a.[i-1] * p.[ix]\u003Cbr\u003E                              q.[ix] \u0026lt;- qPrev.[ix] \u002B e\u0027\u003Cbr\u003E                              e\u0027\u003Cbr\u003E    // note the dependency of q on p; this is the computational front\u003Cbr\u003E    \u00C3\u017D\u00E2\u20ACpStage := Array.Parallel.mapi ap !\u00C3\u017D\u00E2\u20ACpStage\u003Cbr\u003E    \u00C3\u017D\u00E2\u20ACqStage := Array.Parallel.mapi aq !\u00C3\u017D\u00E2\u20ACqStage\u003Cbr\u003E    // Parallel compensated summation, independent in the \u0022phase space hypervector\u0022;\u003Cbr\u003E    // ie. for every component\u003Cbr\u003E    let sp = fun ix e -\u0026gt; let \u00C3\u017D\u00E2\u20ACp = e \u002B pErr.[ix]\u003Cbr\u003E                              p.[ix] \u0026lt;- pPrev.[ix] \u002B \u00C3\u017D\u00E2\u20ACp\u003Cbr\u003E                              pErr.[ix] \u0026lt;- (pPrev.[ix] - p.[ix]) \u002B \u00C3\u017D\u00E2\u20ACp\u003Cbr\u003E                              pPrev.[ix] \u0026lt;- p.[ix]\u003Cbr\u003E    let sq = fun ix e -\u0026gt; let \u00C3\u017D\u00E2\u20ACq = e \u002B qErr.[ix]\u003Cbr\u003E                              q.[ix] \u0026lt;- qPrev.[ix] \u002B \u00C3\u017D\u00E2\u20ACq\u003Cbr\u003E                              qErr.[ix] \u0026lt;- (qPrev.[ix] - q.[ix]) \u002B \u00C3\u017D\u00E2\u20ACq\u003Cbr\u003E                              qPrev.[ix] \u0026lt;- q.[ix]\u003Cbr\u003E    [ async { Array.Parallel.iteri sp !\u00C3\u017D\u00E2\u20ACpStage};\u003Cbr\u003E      async { Array.Parallel.iteri sq !\u00C3\u017D\u00E2\u20ACqStage} \u003Cbr\u003E    ] |\u0026gt; Async.Parallel |\u0026gt; Async.Ignore |\u0026gt; Async.RunSynchronously\u003Cbr\u003E    // time calculations (not async to avoid ref clutter, little gain)\u003Cbr\u003E    \u00C3\u017D\u00C2\u00B4t \u0026lt;- \u00C3\u017D\u00E2\u20ACt \u002B tErr\u003Cbr\u003E    t \u0026lt;- t \u002B \u00C3\u017D\u00C2\u00B4t\u003Cbr\u003E    tErr \u0026lt;- (tPrev - t) \u002B \u00C3\u017D\u00C2\u00B4t\u003Cbr\u003E    tPrev \u0026lt;- t                \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat being said, simplistic as it is, profiling reveals that 30% of the CPU time is spent in parallel computations (force calculations being the major contributor to the rest), so there is a significant gain in speed at the expense of eating lots of ram. It\u0027s really a great fit for GPGPU! Using octrees and FMM, the force calculations can be parallelized in a similar fashion, but then we\u0027re talking tree codes! \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENeat! Force computation really takes most of time here (it\u0027s a division and a square root for every pair of bodies), so if you can parallelise that things are significantly sped up.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027m mostly impressed you have the patience for that working in C# \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m translating it to C\u002B\u002B now. At least I\u0027ll have header files so I can have an idea of how my types work without skimming over dozens of lines of implementation. I miss the package specifications of Ada...\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI think any implementation of abstract algebra will only show it\u0027s efficacy when you start using it (eh, that\u0027s another of those \u0022did I just say that\u0022) -- I usually do that in typed functional languages since metaprogramming is more or less inherent to that style. Much of what you are doing would probably be a lot more concise in an ML style language (Haskell, F#/OCAML). The extreme is Haskell\u0027s type classes that lets you embed categories directly in the category of types-- operators (eg \u00C3\u00A2\u00CB\u2020\u00C2\u00A7) get their expected properties through simple instance declarations of the underlying types with minimal boilerplate coding. Once you\u0027ve coded the type classes, of course, but that\u0027s a lot less typing than OOP classes! \u003C/p\u003E\u003Cp\u003EF# measurement types work pretty well, but not so much when you do things like n\u003Csup\u003E3/2\u003C/sup\u003E... are they the same as the ones accessible from C\u002B\u002B I wonder?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not very familiar with the languages you mention. It\u0027s nice that there is some support for units in F#, though it\u0027s more focused on units than on quantities; it\u0027s not quite coordinate-free enough \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003EC\u002B\u002B doesn\u0027t really have native support for that, but you can make your own and it\u0027s really powerful. You can take a look at my physical quantities here; note that this can\u0027t be done in C# (or other CLR languages) because I need templates:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/PhysicalQuantities.h\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/PhysicalQuantities.h\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/NamedQuantities.h\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/NamedQuantities.h\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/Units.h\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/Units.h\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/Constants.h\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/Constants.h\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EUsage (surprisingly intuitive):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/StaticTest.cpp\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/StaticTest.cpp\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EOf course, this really needs to be wrapped inside some affine spaces for stuff like absolute temperature/pressure/anything, but as elements of 1-dimensional vector spaces (multiplication of physical quantities is a tensor product, see [Tao 2012]) they work well.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI looked up type classes, and C\u002B\u002B templates are sort-of-kind of related to that (actually type classes are constraints on template parameters). They wanted to add that to C\u002B\u002B11, but \u003Ca href=\u0022https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)\u0022 rel=\u0022external nofollow\u0022\u003Eit didn\u0027t work out\u003C/a\u003E for C\u002B\u002B11, maybe it\u0027ll come in a future standard.\u003C/p\u003E\u003Cp\u003ENote that this would not add something fundamental on top of templates, it would just make specifications and compiler errors easier to read (there\u0027s concept maps and axioms on top of that, but it\u0027s another story); if you look at a C\u002B\u002B template, say\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[color=blue]template[/color]\u0026lt;[color=blue]typename[/color] [color=teal]T[/color]\u0026gt; [color=blue]void[/color] Foo([color=teal]T[/color]);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eyou can then call Foo(x) for all x whose type has all the operations used by the implementation of Foo, i.e., whose type is in the type class corresponding to these operations. So C\u002B\u002B has type classes, they\u0027re just implicit. I guess you could use static asserts to make them more explicit, but that\u0027s ugly.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI forgot to mention that my implementation of physical quantities is strongly influenced by [Kenniston 2002], with some differences in design (Dimensionless and double are not the same thing, there is a Unit type).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-21T12:46:33Z\u0022 title=\u002203/21/2014 12:46  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 21, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DiEvAl","CreatedById":66247,"CreatedDateTime":"2014-03-21T06:42:17Z","Content":"\n\u003Cp\u003EWill you add something like this? ;-)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Econst Unit\u0026lt;Length\u0026gt; Meter = Metre;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-21T12:53:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DiEvAl\u0022 data-cite=\u0022DiEvAl\u0022\u003E\u003Cdiv\u003EWill you add something like this? ;-)\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Econst Unit\u0026lt;Length\u0026gt; Meter = Metre;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is not the standard spelling as defined by the BIPM. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I might add it in a separate AmericanSpellings.h file though.\u003C/p\u003E\u003Cp\u003EAlso, did I seriously write\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[color=blue]const[/color] [color=teal]T[/color] Foo;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eeverywhere? This should be \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[color=teal]T[/color] [color=blue]const[/color] Foo;\u003C/pre\u003E\u003Cp\u003Eotherwise I\u0027ll go insane if I have to deal with pointers... *Opens Visual Studio*\u003C/p\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-21T13:32:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI miss the package specifications of Ada...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m looking at your indicated birth date and in that context that statement doesn\u0027t make a whole lot of sense \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EMost universities in the west had stopped teaching Ada by 2000, but I had picked it up as a preparation for Uni the years prior. I miss Ada too, but at least I have VHDL....\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIt\u0027s nice that there is some support for units in F#, though it\u0027s more focused on units than on quantities; it\u0027s not quite coordinate-free enough \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhich is precisely why I didn\u0027t use them in my code; I had to cast everything anyway in the end.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/StaticTest.cpp\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/eggrobin/Principia/blob/master/PhysicalQuantities/StaticTest.cpp\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat looks more or less exactly like what I was going for but found the measurements of F# to be lacking in. I would only want Dimensionless to be polymorphic over primitive and integral (there\u0027s that word again) types with simple values, such as complex numbers, but I think that would be difficult in a language without type inference; at least it would make parameters unwieldy with massive template tags and that kind of defeats the purpose.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI looked up type classes, and C\u002B\u002B templates are sort-of-kind of related to that (actually type classes are constraints on template parameters). They wanted to add that to C\u002B\u002B11, but \u003Ca href=\u0022https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)\u0022 rel=\u0022external nofollow\u0022\u003Eit didn\u0027t work out\u003C/a\u003E for C\u002B\u002B11, maybe it\u0027ll come in a future standard.\u003C/p\u003E\u003Cp\u003ENote that this would not add something fundamental on top of templates, it would just make specifications and compiler errors easier to read (there\u0027s concept maps and axioms on top of that, but it\u0027s another story); if you look at a C\u002B\u002B template.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are some important differences, the relationship between the proposed C\u002B\u002B11 Concepts and Haskell-style type classes is something like a catamorphism, which in this case roughly says you can express one in the other under a simple reduction/expansion (a \u0027fold\u0027). The following illustrates it rather nicely:\u003C/p\u003E\u003Cp\u003EHaskell: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eclass Functor f where\u003Cbr\u003E    fmap :: (a -\u0026gt;  -\u0026gt; f a -\u0026gt; f b\u003Cbr\u003E\u003Cbr\u003Einstance Functor List where\u003Cbr\u003E    fmap f Nil = Nil\u003Cbr\u003E    fmap f (Cons a as) = Cons (f a) (fmap f as)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EC\u002B\u002B11 Draft:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Econcept Functor\u0026lt;template\u0026lt;typename\u0026gt; class F\u0026gt; {\u003Cbr\u003E    template\u0026lt;typename A, typename B\u0026gt;\u003Cbr\u003E    function1\u0026lt;F\u0026lt;A\u0026gt;, F\u0026lt;B\u0026gt;\u0026gt; fmap (function1\u0026lt;A,B\u0026gt;);\u003Cbr\u003E}\u003Cbr\u003Etemplate\u0026lt;typename T\u0026gt;\u003Cbr\u003Eclass List {\u003Cbr\u003E    /* some implementation */\u003Cbr\u003E};\u003Cbr\u003Econcept_map Functor\u0026lt;List\u0026gt; {\u003Cbr\u003E    template\u0026lt;typename A, typename B\u0026gt;\u003Cbr\u003E    function1\u0026lt;List\u0026lt;A\u0026gt;, List\u0026lt;B\u0026gt;\u0026gt; fmap(function1\u0026lt;A,B\u0026gt; f) { /* some more implementation */ }\u003Cbr\u003E\u003Cbr\u003Econcept TypeConstructor\u0026lt;typename F\u0026gt; {\u003Cbr\u003Etemplate\u0026lt;typename T\u0026gt;\u003Cbr\u003E    class Rebind;\u003Cbr\u003E};\u003Cbr\u003E\u003Cbr\u003Econcept Functor\u0026lt;TypeConstructor F\u0026gt; {\u003Cbr\u003E    template\u0026lt;typename A, typename B\u0026gt;\u003Cbr\u003E    function1\u0026lt;F::Rebind\u0026lt;A\u0026gt;,F::Rebind\u0026lt;B\u0026gt;\u0026gt; fmap (function1\u0026lt;A,B\u0026gt;);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe C\u002B\u002B version has some technical issues with genericity, but even if it worked perfectly I think you can see why I prefer the inferred version in Haskell (that uses all models to simplify unification, where C\u002B\u002B only considers models when the parameter is evaluated; ie inference vs checking).\u003C/p\u003E\u003Cp\u003EEDIT: I have heard claims of correspondence between Concepts and type classes, but to accept that I would have to qualify that as \u0022correspondence under catamorphism\u0022 which is a statement at most as strong as correlation .... Purely a formal stand point, but I think it captures the structural difference in an important way. As to be expected from someone in to category theory, I suppose.\u003C/p\u003E\u003Cp\u003EEDIT2: OMG, I just realised how incredibly meta that was of me, giving fmap as an example of typing fold in higher kinds (I just described \u0027fmap fmap fmap\u0027 on functors!)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-21T14:57:41Z\u0022 title=\u002203/21/2014 02:57  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 21, 2014\u003C/time\u003E by SSR Kermit\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-21T15:15:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003EI\u0027m looking at your indicated birth date and in that context that statement doesn\u0027t make a whole lot of sense \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs mentioned a while ago on this thread:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EThat\u0027s the second language I learned (after VB6 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI actually have a copy of \u003Cem\u003EProgrammer en Ada 95\u003C/em\u003E (a translation of John Barnes\u0027s \u003Cem\u003EProgramming in Ada 95\u003C/em\u003E, I didn\u0027t speak English at the time) dated 2002.\u003C/p\u003E\u003Cp\u003EThis may be related to the fact that my father was chairman of the ARG until 2007 (he\u0027s actually the one who proposed Ada.Numerics.\u00C3\u00E2\u201A\u00AC (\u003Ca href=\u0022http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ais/ai-00388.txt?rev=1.8\u0022 rel=\u0022external nofollow\u0022\u003EAda Issue 388\u003C/a\u003E) in order to force tools to correctly support Unicode identifiers).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThat looks more or less exactly like what I was going for but found the measurements of F# to be lacking in. I would only want Dimensionless to be polymorphic over primitive and integral (there\u0027s that word again) types with simple values, such as complex numbers, but I think that would be difficult in a language without type inference; at least it would make parameters unwieldy with massive template tags and that kind of defeats the purpose.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, I might want to allow homemade quads as the underlying type in the future, as mentioned earlier on the thread.\u003C/p\u003E\u003Cp\u003EI\u0027ll see whether I want to make that a template parameter (I don\u0027t think it would be that unwieldy, boost does that for its quantities library, though it\u0027s admittedly not a paragon of legibility) or go with quads everywhere. For the moment I\u0027m fine with double.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThere are some important differences, the relationship between the proposed C\u002B\u002B11 Concepts and Haskell-style type classes is something like a catamorphism, which in this case roughly says you can express one in the other under a simple reduction/expansion (a \u0027fold\u0027).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s not really surprising that Haskell is better at category theory than C\u002B\u002B \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. Also, how many kinds of morphisms are there in category theory? Let me make up one: erythromorphism: a morphism written by a teaching assistant.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-21T15:39:25Z\u0022 title=\u002203/21/2014 03:39  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 21, 2014\u003C/time\u003E by eggrobin\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"SSR Kermit","CreatedById":82781,"CreatedDateTime":"2014-03-21T15:41:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022eggrobin\u0022 data-cite=\u0022eggrobin\u0022\u003E\u003Cdiv\u003EAs mentioned a while ago on this thread:\u003Cp\u003EI actually have a copy of \u003Cem\u003EProgrammer en Ada 95\u003C/em\u003E (a translation of John Barnes\u0027s \u003Cem\u003EProgramming in Ada 95\u003C/em\u003E, I didn\u0027t speak English at the time) dated 2002.\u003C/p\u003E\u003Cp\u003EThis may be related to the fact that my father was chairman of the ARG at the time (he\u0027s actually the one who proposed Ada.Numerics.\u00C3\u00E2\u201A\u00AC (\u003Ca href=\u0022http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ais/ai-00388.txt?rev=1.8\u0022 rel=\u0022external nofollow\u0022\u003EAda Issue 388\u003C/a\u003E) in order to force tools to correctly support Unicode identifiers).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENow it does make sense; including the unicode bit! I thought I did read the entire thread (as I have a habit of doing: see my post count for the consequence), but I must have skimmed parts.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAlso, how many kinds of morphisms are there in category theory? Let me make up one: erythromorphism: a morphism written by a teaching assistant.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are at least as many morphisms in the category of categories as there are morphisms in the category of syntax (where all morphisms are automorphisms), so that\u0027s \u003Cspan style=\u0022font-size:14px;\u0022\u003E\u00C3\u2014\u00C2\u003C/span\u003E\u003Csub\u003E3\u003C/sub\u003E or something ridiculous like that. Not that it means anything, even in the abstract sense :S\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-03-22T19:14:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SSR Kermit\u0022 data-cite=\u0022SSR Kermit\u0022\u003E\u003Cdiv\u003Eso that\u0027s \u003Cspan style=\u0022font-size:14px;\u0022\u003E\u00C3\u2014\u00C2\u003C/span\u003E\u003Csub\u003E3\u003C/sub\u003E or something ridiculous like that. Not that it means anything, even in the abstract sense :S\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt took me a while to figure out that this said alef 3 rather that 3^alef. bidirectional text is fun...\u003C/p\u003E\u003Cp\u003EYou should use ALEF SYMBOL (U\u002B2135) rather than HEBREW LETTER ALEF (U\u002B05D0).\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00B5\u003Csub\u003E3\u003C/sub\u003E\u003C/p\u003E\u003Cp\u003EI would insert a right-to-left override just for the fun of it, but the fora turn that into a *. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"NERVAfan","CreatedById":72817,"CreatedDateTime":"2014-03-28T04:55:22Z","Content":"\n\u003Cp\u003EThis looks like it will be an awesome mod.\u003C/p\u003E\u003Cp\u003EEagerly awaiting more news on this...\u003C/p\u003E\n"},{"CreatedByName":"toril","CreatedById":57196,"CreatedDateTime":"2014-03-28T18:33:29Z","Content":"\n\u003Cp\u003EWas playing around with this last night. I built it off of your github source in linux as getting all the things needed to do it in windows looked like a huge inconvenience besides being expensive. Outside of the stated problem with having to switch back and forth between keplarian and Newtonian physics for burns I think its very playable. Only repeatable bug I ran into is if your not in a stable orbit and you switch to Newtonian physics and accelerate time you instantly blow up throwing pieces at a rather incredible speed everywhere. But as I am just playing with source code and not anything released I have no clue as to whether any of the functions were working as planned just wanted to tell you I played with it and had fun \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003EAlso almost forgot, saw little to no difference in the games speed though I didn\u0027t have very many flights in progress so not seeing a big performance hit with just the planets and about 10 flights in progress.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-03-28T18:37:36Z\u0022 title=\u002203/28/2014 06:37  PM\u0022 data-short=\u002210 yr\u0022\u003EMarch 28, 2014\u003C/time\u003E by toril\u003C/strong\u003E\n\u003Cbr\u003Eperformance update\n\u003C/span\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2014-04-02T14:43:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003EThis is very cool, I\u0027m looking forward to seeing where this goes. I suppose I should try and answer this question:\u003Cp\u003EIt should be able to predict, but there are serious caveats to this. If the vehicle enters in an stable aerodynamic configuration the results should be predicted fairly accurately, though there might be some errors due to initial transient effects on atmospheric entry. However, if the vehicle is unstable, the results will be completely inaccurate; unstable aerodynamic configurations tend to follow highly chaotic motion, which makes them essentially unpredictable due to how much minor errors can affect the trajectory. This means that there needs to be a way to determine whether the predicted trajectory is that of a stable or unstable vehicle; I suspect the best way is to search for sudden changes in the orientation of the vehicle and color-code everything after that to designate the degree of chaos in the trajectory. If that also accounts for stability induced by creating a large amount of spin-stabilization, it would provide a fairly accurate way to estimate the effects of aerobraking.\u003C/p\u003E\u003Cp\u003EAs for the time to do this... it will likely be slow, since you\u0027d have to simulate it part-by-part for best results. A faster (but less accurate) solution would be to calculate out the vehicle\u0027s properties as best as you can at the hypersonic limit and use that, which works for Mach numbers \u0026gt; ~5 or so. This will work for most aerobraking in stock KSP and will certainly work for RSS.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAlternatively, given that this is a game, you could just use a random number generator to pump a chaotic oscillator and feed that into the third integral.\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2014-04-02T15:32:06Z","Content":"\n\u003Cp\u003ENo, I think that won\u0027t do. Principia is all about precise simulation and realism, \u0022this is a game\u0022 mentality doesn\u0027t really apply here. I think that Ferram\u0027s idea with calculating aerodynamics for high mach numbers would do, the model shouldn\u0027t diverge much from this at lower mach numbers if the vehicle is simple (say, a reentering capsule), and if it\u0027s not (a spaceplane), you probably have some degree of aerodynamic control anyway at that point.\u003C/p\u003E\n"},{"CreatedByName":"StevenRS11","CreatedById":83261,"CreatedDateTime":"2014-04-02T16:19:30Z","Content":"\n\u003Cp\u003EI uh, yes. Hmm... I think my brain leaked out of my nose, reading the OP. I salute your maths, and will now run very, very far away.\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-04-02T16:44:24Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003Eialdabaoth\u003C/strong\u003E: The \u0022this is a game\u0022 consideration is not absent from my thoughts in general, but \u003Cstrong\u003Eferram4\u003C/strong\u003E was answering a question about \u003Cem\u003Epredicting\u003C/em\u003E what the result of aerobraking will be or what the landing site after reentry will be. I\u0027m not in charge of simulating low-altitude atmospheric flight (\u003Cstrong\u003Eferram4\u003C/strong\u003E does that \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E), so if I want to predict it I have to be accurate, I can\u0027t just make something up.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022StevenRS11\u0022 data-cite=\u0022StevenRS11\u0022\u003E\u003Cdiv\u003EI uh, yes. Hmm... I think my brain leaked out of my nose.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou might want to consult a physician about that, I don\u0027t think that is entirely normal. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Guest","CreatedById":-1,"CreatedDateTime":"2014-04-02T21:10:33Z","Content":"\n\u003Cp\u003EClassic case of sudden algebra exposure. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I had that too, upon returning to my Uni after 3 weeks of sick leave... The only way to avoid that is to build up tolerance by starting with something easy (basic Boolean logic is a good start) and working your way up. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"thorfinn","CreatedById":8349,"CreatedDateTime":"2014-04-02T23:07:28Z","Content":"\n\u003Cp\u003EWell, since FAR can already chart L/D ratios in function of AoA and speed, could you try plotting three trajectories beginning at the entry interface? \u0022MAX LIFT UP\u0022 / \u0022ZERO LIFT\u0022 / \u0022MAX LIFT DOWN\u0022, maybe with dotted/red lines if instability or excessive loads are detected. This assumes that the craft is controlled all the way of course, but I don\u0027t think that predictions of uncontrolled reentries of unstable things would be of much interest.\u003C/p\u003E\u003Cp\u003ENo, no, better yet: plot a TARGET ELLIPSE on the planet! a red dot at the zero lift IP and the boundary at the maximum reachable distances (max crossrange, max/min downrange and mixes). Doesn\u0027t have to be realtime, one update every 10 seconds would be fine. It would be \u0026lt;robbaz\u0026gt;GLORIOUS\u0026lt;/robbaz\u0026gt;\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-04-02T23:54:51Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003Ethorfinn:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ELots of good ideas here!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022thorfinn\u0022 data-cite=\u0022thorfinn\u0022\u003E\u003Cdiv\u003EDoesn\u0027t have to be realtime, one update every 10 seconds would be fine.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is very true, it also applies to most of the dynamic integration (for medium-acceleration burns, updating the predicted trajectory every couple of seconds rather than every few frames would save a lot of resources and still look good I think).\u003C/p\u003E\u003Cp\u003EIt\u0027s been a while since I\u0027ve done a\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStatus update:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/eggrobin/Principia/tree/master/Quantities\u0022 rel=\u0022external nofollow\u0022\u003EQuantities\u003C/a\u003E library (C\u002B\u002B) is pretty much done and \u003Ca href=\u0022https://github.com/eggrobin/Principia/blob/master/QuantitiesTests/QuantitiesTests.cpp\u0022 rel=\u0022external nofollow\u0022\u003Etested\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EI am currently porting the C# Geometry assembly mentioned previously (now called CTSGeometry) to C\u002B\u002B in order to enable its use with these quantities.\u003C/p\u003E\n"},{"CreatedByName":"DiEvAl","CreatedById":66247,"CreatedDateTime":"2014-04-04T05:41:00Z","Content":"\n\u003Cp\u003EWhat does CTS in CTSGeometry mean?\u003C/p\u003E\n"},{"CreatedByName":"KvickFlygarn87","CreatedById":76314,"CreatedDateTime":"2014-04-04T06:03:53Z","Content":"\n\u003Cp\u003EWill N-body allow for small ships to orbit a far-out asteroid?\u003C/p\u003E\n"},{"CreatedByName":"thorfinn","CreatedById":8349,"CreatedDateTime":"2014-04-04T11:04:42Z","Content":"\n\u003Cp\u003EFerram says that future versions of FAR could dump tables of aerodynamic coefficients vs. various parameters to a text file; this at \u0022compile\u0022 time in the VAB, for now, I\u0027ve asked him whether they could be recreated in flight on demand.\u003C/p\u003E\u003Cp\u003EDo you think that could be enough to integrate flight trajectories with the simplifying assumptions made above? (i.e. following zero lift or maximum L/D or some other extremal point)?\u003C/p\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2014-04-04T11:21:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KvickFlygarn87\u0022 data-cite=\u0022KvickFlygarn87\u0022\u003E\u003Cdiv\u003EWill N-body allow for small ships to orbit a far-out asteroid?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe question is irrelevant. Remember the formula for speed (in a circular orbit)?\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://latex.codecogs.com/gif.download?v%3D%5Csqrt%7B%5Cfrac%7BGM%7D%7Br%7D%7D\u0022 alt=\u0022gif.download?v%3D%5Csqrt%7B%5Cfrac%7BGM%7D%7Br%7D%7D\u0022\u003E\u003C/p\u003E\u003Cp\u003EPlug in the numbers for a 5000 ton asteroid (and that\u0027s a fairly big one, as I understand) and you\u0027ll get G\u00C3\u0192\u00E2\u20AC\u201DM = 3.337\u00C3\u0192\u00E2\u20AC\u201D10\u003Csup\u003E-4\u003C/sup\u003E. Now, assume a close orbit of, say, 100m; your orbital speed will be 0.0018 m/s. One sneeze will give you escape velocity, basically.\u003C/p\u003E\n"}]}