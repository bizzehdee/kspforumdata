{"TopicId":51800,"ForumId":36,"TopicTitle":"Any doco on the .craft file format?","CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-11-04T04:08:01Z","PageNum":1,"Articles":[{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-11-04T04:08:01Z","Content":"\n\u003Cp\u003EHi all,\u003C/p\u003E\u003Cp\u003EI\u0027m mucking about with a script to write a sub-assembly .craft file so I can auto build an asparagus staged bunch of rockets of arbitrary size.\u003C/p\u003E\u003Cp\u003EHas anyone documented the .craft file format? My googling has not given me anything useful.\u003C/p\u003E\u003Cp\u003EWhat I have so far\u003C/p\u003E\u003Cp\u003E* the .craft file is a serialised file of heirarchical data\u003C/p\u003E\u003Cp\u003E* the main chunk is the PART which can contain EVENTS, ACTIONS, and MODULES\u003C/p\u003E\u003Cp\u003E* \u0022part\u0022 is the unique name of the part, made up of the name from the appropriate part.cfg file plus a 32 bit unsigned number that starts near 4,294,967,295 (0xFFFFFFFF) and decreases by a random amount for each part\u003C/p\u003E\u003Cp\u003E* \u0022pos\u0022 is the position coordinates in metres\u003C/p\u003E\u003Cp\u003E* \u0022istg\u0022 is the inverse staging number (highest number triggers first)\u003C/p\u003E\u003Cp\u003E* \u0022link\u0022 connects the PARTs with one one-way linked lists starting from the root PART and working outwards and downwards (usually) (no cycles, no two-way links)\u003C/p\u003E\u003Cp\u003E* \u0022sym\u0022 is an n-way linked list with all the other PARTs that share symmetry with this part. All parts that share symmetry have a \u0022sym\u0022 link to every other PART in that symmetry share.\u003C/p\u003E\u003Cp\u003E* \u0022attN\u0022 is a link which includes a designation of \u0022top\u0022 or \u0022bottom\u0022 to the PART stacked on the top or bottom of this PART. The stacked part has a corresponding attN link with \u0022bottom\u0022 or \u0022top\u0022 respectively\u003C/p\u003E\u003Cp\u003E* \u0022srfN\u0022 is a link to the PART that this PART is surface attached to (including a \u0022srfAttch\u0022 designation)\u003C/p\u003E\u003Cp\u003EWhat I\u0027m not so sure about\u003C/p\u003E\u003Cp\u003E* \u0022rot\u0022 is the rotation of each part expressed as 4 components of a unit vector. I\u0027ve been putting the x and z components of a unit vector pointing from one PART to its attached buddy in the 2nd and 4th components of this entry, and it seems to work out correctly most of the time.\u003C/p\u003E\u003Cp\u003E* \u0022dstg\u0022 - something to do with staging...\u003C/p\u003E\u003Cp\u003E* \u0022sidx\u0022 - some sort of index\u003C/p\u003E\u003Cp\u003E* \u0022sqor\u0022 - simplified quality of rockets?\u003C/p\u003E\u003Cp\u003E* \u0022attm\u0022 - something to do with attaching something\u003C/p\u003E\u003Cp\u003EAny hints?\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\n"},{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-11-05T23:52:03Z","Content":"\n\u003Cp\u003EI think I\u0027ve made a bit more progress.\u003C/p\u003E\u003Cp\u003E* \u0022sidx\u0022 is the symmetry index, starting at 0 for the first symmetrically placed part and going up to n-1 for each part in the n-way symmetry. Interestingly, in my test of just a central fuel tank surrounded by radial decouplers connected to an outer layer of fuel tanks, only the decouplers had sidx numbers, even though outer tanks had sym links with each other as well. The outer tanks were all sidx = 0.\u003C/p\u003E\u003Cp\u003E* \u0022rot\u0022 looks to be a unit vector at HALF the angle that the part is rotated to. (Unity engine weirdness? Someone using pi/360 instead of 2pi/360 to convert between degrees and radians?) I\u0027ve only done rotations in 2D at this stage (x/z plane) and can confirm that the 2nd element of the rot vector is the x component and the 4th is the z.\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2013-11-06T00:44:36Z","Content":"\n\u003Cp\u003EYou sure rot isn\u0027t a quaternion? Rotations are usually stored as quaternions in Unity/KSP. They\u0027re four-component and normalized.\u003C/p\u003E\n"},{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-11-06T04:09:00Z","Content":"\n\u003Cp\u003EYes, rot is a quaternion.\u003C/p\u003E\u003Cp\u003EI just read the wikipedia article on quaternions, then my brain fell out.\u003C/p\u003E\u003Cp\u003EThen I read the Unity doco about quaternions, and that said it is a vector [x,y,z,w] and \u0022Don\u0027t modify this directly unless you know quaternions inside out.\u0022\u003C/p\u003E\u003Cp\u003EThen I read a bunch of other articles about calculating to/from rotations and quaternions.\u003C/p\u003E\u003Cp\u003EThen I remembered that I\u0027m only working in 2D for the decouplers and tanks of my auto asparagus stager, so I can fudge it.\u003C/p\u003E\u003Cp\u003E(But I will probably have to work it out when I start connecting struts and fuel lines...)\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\u003Cp\u003ESo, I\u0027m going to fudge it\u003C/p\u003E\n"},{"CreatedByName":"Ryeesa","CreatedById":96235,"CreatedDateTime":"2013-12-11T02:04:17Z","Content":"\n\u003Cp\u003E\u003Cem\u003E* \u0022istg\u0022 is the inverse staging number (highest number triggers first)\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E* \u0022dstg\u0022 - something to do with staging...\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eit appears you are correct with istg\u003C/p\u003E\u003Cp\u003Ethe way it looks to me is:\u003C/p\u003E\u003Cp\u003Eistg : the stage in which part is activated (the orange stage groups on the side of your screen)\u003C/p\u003E\u003Cp\u003Edstg: the stage in which the part is attached in relation to decouplers; decouplers appear to get there own stage so the object attached will be 1 more than the decoupler\u003C/p\u003E\u003Cp\u003Eexample:\u003C/p\u003E\u003Cp\u003Eistg 0 = {\u003C/p\u003E\u003Cp\u003Edstg 0:\u003C/p\u003E\u003Cp\u003Ecommand module 1\u003C/p\u003E\u003Cp\u003Efuel tank 1\u003C/p\u003E\u003Cp\u003Eengine 1\u003C/p\u003E\u003Cp\u003Edstg 1:\u003C/p\u003E\u003Cp\u003Estack decoupler\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Eistg 1 = {\u003C/p\u003E\u003Cp\u003Edstg 2:\u003C/p\u003E\u003Cp\u003Efuel tank 2\u003C/p\u003E\u003Cp\u003Eengine 2\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Ehope that makes sense \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-12-15T03:16:40Z","Content":"\n\u003Cp\u003EThanks for that, Ryeesa.\u003C/p\u003E\u003Cp\u003EYes, you are absolutely correct.\u003C/p\u003E\u003Cp\u003Edstg is everything to do with decoupling.\u003C/p\u003E\u003Cp\u003E0 for the final module, 1 for the decouplers, 2 for the next stage parts, 3 for the next decouplers, 4 for the next stage parts, etc.\u003C/p\u003E\u003Cp\u003EJust to clarify, istg is only for parts with an activity like engines or decouplers - things that appear in the staging list in the VAB.\u003C/p\u003E\u003Cp\u003EWith fuel tanks, struts and fuel lines, the istg is set to the dstg.\u003C/p\u003E\u003Cp\u003EAlso, sidx is not to do with symmetry, but with staging. it is an index of all the things that activate in a particular stage.\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\n"},{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2013-12-15T03:26:05Z","Content":"\n\u003Cp\u003EBy the way, the asparagus staging script is coming along nicely.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/1286211/asparagus_mf_1.jpg\u0022 alt=\u0022asparagus_mf_1.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EFinally got it to the point where it generates a valid, properly staged, correct fuel flowing, asparagus launch subassembly that doesn\u0027t explode on the launch pad.\u003C/p\u003E\u003Cp\u003ENeeds a bit more refactoring so you can select which fuel tanks and which engines to use (it\u0027s limited to Jumbo-64s and Mainsails at the moment)\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\n"},{"CreatedByName":"mszegedy","CreatedById":102133,"CreatedDateTime":"2014-01-29T02:02:30Z","Content":"\n\u003Cp\u003EThank you for your work on decoding the format. My genetic algorithm will be much easier to write now. One note\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20ACI still can\u0027t figure out what sidx does. You said it\u0027s the symmetry index, and it makes sense, except for the fact that it seems to be assigned nearly at random. When I created a craft, the root part had sidx=-1, as well as the parts under it. The parts radially attached to it, in symmetry, have sidx=0. Then the parts radially attached to \u003Cem\u003Ethose\u003C/em\u003E have sidx=-1. If you radially attach a part to \u003Cem\u003Ethose\u003C/em\u003E, then sidx=0. If you radially attach a part to \u003Cem\u003Ethose,\u003C/em\u003E but without symmetry, then they\u0027ll have sidx=-1. If you radially attach parts to \u003Cem\u003Ethat\u003C/em\u003E \u003Cem\u003Ewith symmetry\u003C/em\u003E, then they\u0027ll have sidx=1. What? How does this work?\u003C/p\u003E\n"},{"CreatedByName":"markjustmark","CreatedById":91716,"CreatedDateTime":"2014-01-29T07:21:33Z","Content":"\n\u003Cp\u003EHi mszegedy,\u003C/p\u003E\u003Cp\u003Esidx has nothing to do with symmetry.\u003C/p\u003E\u003Cp\u003EIt is the index number of all the things that activate in a particular stage.\u003C/p\u003E\u003Cp\u003ESo, if you have four rockets that activate in a stage, they will all have the same istg number, and an sidx of 0, 1, 2, \u0026amp; 3 respectively.\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\n"},{"CreatedByName":"Ezriilc","CreatedById":34556,"CreatedDateTime":"2014-03-17T21:19:03Z","Content":"\n\u003Cp\u003EI realize this thread is a bit old, but it\u0027s right on topic for my latest project, and I\u0027d be grateful to get some more information on this.\u003C/p\u003E\u003Cp\u003EI\u0027ve read what\u0027s here over and over, and everything else Google can tell me, and I still just don\u0027t get what \u0022istg\u0022 and \u0022dstg\u0022 mean, with regards to various staging arrangements.\u003C/p\u003E\u003Cp\u003ECan anyone provide a deeper explanation of istg/dstg? I fully expect that I\u0027m simply missing something, so feel free to state the obvious. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003C/p\u003E\u003Cp\u003EIf it helps to know what I\u0027m doing, I\u0027m writing a script to parse ship .craft files into usable stats such as Thrust-to-weight ratio ASL, etc.. To do this, I need to know which engines are activated at launch, and which are not, and so far I\u0027m tripping over myself. I know this has been done for MechJeb, but I can\u0027t figure out how.\u003C/p\u003E\u003Cp\u003EThanks in advance!\u003C/p\u003E\n"},{"CreatedByName":"SlowThought","CreatedById":109317,"CreatedDateTime":"2014-04-22T23:11:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022markjustmark\u0022 data-cite=\u0022markjustmark\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhat I\u0027m not so sure about\u003C/p\u003E\u003Cp\u003E* \u0022rot\u0022 is the rotation of each part expressed as 4 components of a unit vector. I\u0027ve been putting the x and z components of a unit vector pointing from one PART to its attached buddy in the 2nd and 4th components of this entry, and it seems to work out correctly most of the time.\u003C/p\u003E\u003Cp\u003EMark\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI \u003Cstrong\u003Esuspect \u003C/strong\u003EKSP uses \u003Ca href=\u0022https://en.wikipedia.org/wiki/Quaternion\u0022 rel=\u0022external nofollow\u0022\u003Equaternions\u003C/a\u003E internally to express vectors. Your \u0022(x ? z) -\u0026gt; (0 x ? z)\u0022 mapping supports this. You can think of quaternions as an extension of complex numbers, with three different \u0022imaginary\u0022 directions, basically a 4D number. The complex extension works for the arithmetic. In this context it\u0027s better to think of the first component as a scalar, and the last 3 as a vector. Consider Newton\u0027s third law:\u003C/p\u003E\u003Cp\u003EF=ma -\u0026gt; (0 Fx Fy Fz) = (m 0 0 0)(0 ax ay az)\u003C/p\u003E\u003Cp\u003EQuaternions make sure the mixed vector scalar works out, and allows a common data type for the programmers to work with.\u003C/p\u003E\n"},{"CreatedByName":"Ezriilc","CreatedById":34556,"CreatedDateTime":"2014-04-23T02:10:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SlowThought\u0022 data-cite=\u0022SlowThought\u0022\u003E\u003Cdiv\u003EI \u003Cstrong\u003Esuspect \u003C/strong\u003EKSP uses \u003Ca href=\u0022https://en.wikipedia.org/wiki/Quaternion\u0022 rel=\u0022external nofollow\u0022\u003Equaternions\u003C/a\u003E internally to express vectors. Your \u0022(x ? z) -\u0026gt; (0 x ? z)\u0022 mapping supports this. You can think of quaternions as an extension of complex numbers, with three different \u0022imaginary\u0022 directions, basically a 4D number. The complex extension works for the arithmetic. In this context it\u0027s better to think of the first component as a scalar, and the last 3 as a vector. Consider Newton\u0027s third law:\u003Cp\u003EF=ma -\u0026gt; (0 Fx Fy Fz) = (m 0 0 0)(0 ax ay az)\u003C/p\u003E\u003Cp\u003EQuaternions make sure the mixed vector scalar works out, and allows a common data type for the programmers to work with.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for that input! It helps me quite a lot.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-04-23T02:35:34Z","Content":"\n\u003Cp\u003ENope, KSP uses vectors for vectors. It does, however, use quaternions for *orienations*, and quaternions are *not* simply 4-unit vectors (like you\u0027d use in a 4x4 rotation matrix).\u003C/p\u003E\u003Cp\u003EIf you see a 4-tuple, it\u0027s either a vec4 or a quaternion; vec4s are used for, e.g., colors (r, g, b, a), and quaternions for orientations. You might want to read up a bit on using quaternions for orientation, because dealing with them can be *quite* complex (they\u0027re a way of representing imaginary numbers, for pete\u0027s sake).\u003C/p\u003E\n"},{"CreatedByName":"SlowThought","CreatedById":109317,"CreatedDateTime":"2014-04-24T16:29:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003ENope, KSP uses vectors for vectors. It does, however, use quaternions for *orienations*\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI bow to the voice of experience; I\u0027ve not looked at what code is publicly available. IMHO, quaternions are easier to grok than vectors, at least in terms of how they represent the underlying physics (there are some that argue that vector calculus never would have been, but for the prejudice against \u003Ca href=\u0022https://en.wikipedia.org/wiki/William_Rowan_Hamilton\u0022 rel=\u0022external nofollow\u0022\u003Ethe Irishman who discovered quaternions\u003C/a\u003E). As you note, they are \u003Cem\u003Every\u003C/em\u003E convenient for describing orientation (which what \u003Cstrong\u003Emarkjustmark \u003C/strong\u003Eappears to have been dealing with).\u003C/p\u003E\u003Cp\u003EFWIW, twenty-something years ago I derived a common expression for all the basic orbits (elliptical, parabolic, hyperbolic) from a complex representation of Newton\u0027s 3rd law. My students weren\u0027t impressed (ok, they were terrified). I wish I could find my notes. I have made feeble attempts to do the same starting with quaternions, but not gotten anywhere.\u003C/p\u003E\u003Cp\u003EBottom line, \u003Cstrong\u003Emarkjustmark \u003C/strong\u003Ewas looking at a quaternion. Quats versus vectors borders on the religious. I am one of the Devout Few of the Q, but I\u0027m not very pious by nature \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Taverius","CreatedById":11815,"CreatedDateTime":"2014-06-05T01:26:34Z","Content":"\n\u003Cp\u003ESomething of a necro, but attm may have something to do with whether the part was attached in angle snap mode or not.\u003C/p\u003E\u003Cp\u003ERotation on a snapped part works somewhat differently in the editor.\u003C/p\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2014-07-04T17:08:08Z","Content":"\n\u003Cp\u003EThis is an old thread, but I\u0027m willing to make some scripting (edit: in fact, more like a .NET application) with crafts files, and I didn\u0027t wanted to make a new thread about it.\u003C/p\u003E\u003Cp\u003EI found this : \u003Ca href=\u0022https://kerbaldata.codeplex.com/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbaldata.codeplex.com/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBut I don\u0027t know if I can use it to create/get infos from a ship or a subassembly, is it even up to date?\u003C/p\u003E\u003Cp\u003EThis thread is probably the most useful source of informations I\u0027ve found with google. Do you guys know where I can learn more about craft file format?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-04T17:16:12Z\u0022 title=\u002207/04/2014 05:16  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 4, 2014\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ezriilc","CreatedById":34556,"CreatedDateTime":"2014-07-05T14:42:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lilleman\u0022 data-cite=\u0022Lilleman\u0022\u003E\u003Cdiv\u003EThis is an old thread, but I\u0027m willing to make some scripting (edit: in fact, more like a .NET application) with crafts files, and I didn\u0027t wanted to make a new thread about it.\u003Cp\u003EI found this : \u003Ca href=\u0022https://kerbaldata.codeplex.com/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbaldata.codeplex.com/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBut I don\u0027t know if I can use it to create/get infos from a ship or a subassembly, is it even up to date?\u003C/p\u003E\u003Cp\u003EThis thread is probably the most useful source of informations I\u0027ve found with google. Do you guys know where I can learn more about craft file format?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis thread is about all there is.\u003C/p\u003E\u003Cp\u003EEverything I\u0027ve learned and used building the \u0022Craft Kitchen\u0022 was gleaned mostly from my own tests. It turns the text into an array of config nodes, and then parses it into ship stats.\u003C/p\u003E\u003Cp\u003EI don\u0027t know if KerbalData is up to date, because I never used it. The only other similar project I know of is \u0022WebVAB\u0022, but that\u0027s getting a bit aged now.\u003C/p\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2014-07-05T19:22:53Z","Content":"\n\u003Cp\u003EOK, thanks for answering. \u003C/p\u003E\u003Cp\u003EI\u0027ve took a look at Craft Kitchen and WebVAB. Might be useful, I keep that in mind.\u003C/p\u003E\u003Cp\u003EI can\u0027t get the KerbalData dlls to work, so I\u0027ll go old-school and do everything \u0022by hand\u0022.\u003C/p\u003E\u003Cp\u003EFor now I want to create something like \u003Ca href=\u0022http://garycourt.github.io/korc/\u0022 rel=\u0022external nofollow\u0022\u003Ethis\u003C/a\u003E that will be capable of generating a craft file, or a subassembly. So it\u0027s more like creating a file from scratch, instead of getting informations from it.\u003C/p\u003E\u003Cp\u003EI just figured out how to correctly handle parts sizes, using values from part.cfg files, and positions. I have a quick idea on how symmetry and rotation work, but I presume staging and fueling will be a lot of fun...\u003C/p\u003E\u003Cp\u003EI do have a question about Craft Kitchen and the Files Fixer, regarding part IDs: Is this thing really almost random like said earlier in this thread? Just go from 0xFFFFFFFF and decrement randomly each time a part is added? I\u0027ve did some tests with random values using this \u0022theory\u0022: it works, but I don\u0027t know why and I don\u0027t like this.\u003C/p\u003E\u003Cp\u003EI\u0027ll post here if I found something interesting that hasn\u0027t being said already, or if I manage to code this correctly.\u003C/p\u003E\n"},{"CreatedByName":"Ezriilc","CreatedById":34556,"CreatedDateTime":"2014-07-06T14:17:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lilleman\u0022 data-cite=\u0022Lilleman\u0022\u003E\u003Cdiv\u003EOK, thanks for answering. \u003Cp\u003E...\u003C/p\u003E\u003Cp\u003EI do have a question about Craft Kitchen and the Files Fixer, regarding part IDs: Is this thing really almost random like said earlier in this thread? Just go from 0xFFFFFFFF and decrement randomly each time a part is added? I\u0027ve did some tests with random values using this \u0022theory\u0022: it works, but I don\u0027t know why and I don\u0027t like this.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo problem.\u003C/p\u003E\u003Cp\u003EAs for part IDs, I honestly have no idea. All I\u0027ve done is to look for duplicate IDs and remove them from the tree. I imagine that so long as the IDs have the correct number of digits, then it doesn\u0027t really matter how they are generated - but that\u0027s just a guess.\u003C/p\u003E\n"},{"CreatedByName":"Lilleman","CreatedById":112321,"CreatedDateTime":"2014-07-06T21:27:00Z","Content":"\n\u003Cp\u003EAfter some investigation, I can at least give some new informations.\u003C/p\u003E\u003Cp\u003EFirst, I can confirm what Mark said about istg, dstg, sidx and their relation with staging: \u003C/p\u003E\u003Cp\u003E-istg represent the stage number as you can see it in the VAB.\u003C/p\u003E\u003Cp\u003E-dstg has to do with vessel separation into several pieces. Mark explain this better than me, but basically, if you have a very basic rocket: pod\u002Bfueltank\u002Bengine\u002Bdecoupler\u002Bfueltank\u002Bengine, the first part (pod\u002Bfueltank\u002Bengine) will have dstg = 0, the decoupler dstg = 1, and the final part (fueltank\u002Bengine) will have dstg = 2.\u003C/p\u003E\u003Cp\u003E-sidx is an index for every part in the current stage that can be activated via staging. Start from 0 every stage. (Always at -1 for fuel tanks?)\u003C/p\u003E\u003Cp\u003E-sqor, honestly, no idea. But, I noticed that if sidx != -1, then sqor = istg, otherwise sqor = -1. (Always at -1 for fuel tanks?)\u003C/p\u003E\u003Cp\u003E-attm is for attachment mode (to be confirmed); 0 if the part is not attached radially to anything, 1 if it is.\u003C/p\u003E\u003Cp\u003E-attRot (attach rotation?) \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Eseems to always be 0,0,0,1\u003C/span\u003E (edit: ahem, I don\u0027t know what I was thinking. This is, as the name suggest it, the attach rotation, the one you get with WASD in the VAB. The rotation is applied from the attach\u0027s origin instead of the part\u0027s origin).\u003C/p\u003E\u003Cp\u003E-mir (mirror?) seems to always be 1,1,1.\u003C/p\u003E\u003Cp\u003EAbout the part size: Don\u0027t forget (like me) that part can be rescaled either to 1m scale or 1.25m, and you should be able to get correct parts positions.\u003C/p\u003E\u003Cp\u003EThe rotation quaternion can easily be handled with the standard .NET framework, with the help of System.Windows.Media.Media3D.Quaternion and System.Windows.Media.Media3D.Vector3D.\u003C/p\u003E\u003Cp\u003EOf course, I could have read the Wikipedia article about quaternion, and come up with an open-source solution, but meh, got this without having to learn a thing! Hooray!\u003C/p\u003E\u003Cp\u003ENow to make a list of every module, resource, event, action, etc... This will be long.\u003C/p\u003E\u003Cp\u003EIf you see something incorrect, let me know, I\u0027m not quite sure about all this yet.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-07T05:59:10Z\u0022 title=\u002207/07/2014 05:59  AM\u0022 data-short=\u002210 yr\u0022\u003EJuly 7, 2014\u003C/time\u003E by Lilleman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ezriilc","CreatedById":34556,"CreatedDateTime":"2014-07-07T11:20:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lilleman\u0022 data-cite=\u0022Lilleman\u0022\u003E\u003Cdiv\u003EAfter some investigation, I can at least give some new informations.\u003Cp\u003EFirst, I can confirm what Mark said about istg, dstg, sidx and their relation with staging: \u003C/p\u003E\u003Cp\u003E-istg represent the stage number as you can see it in the VAB.\u003C/p\u003E\u003Cp\u003E-dstg has to do with vessel separation into several pieces. Mark explain this better than me, but basically, if you have a very basic rocket: pod\u002Bfueltank\u002Bengine\u002Bdecoupler\u002Bfueltank\u002Bengine, the first part (pod\u002Bfueltank\u002Bengine) will have dstg = 0, the decoupler dstg = 1, and the final part (fueltank\u002Bengine) will have dstg = 2.\u003C/p\u003E\u003Cp\u003E-sidx is an index for every part in the current stage that can be activated via staging. Start from 0 every stage. (Always at -1 for fuel tanks?)\u003C/p\u003E\u003Cp\u003E-sqor, honestly, no idea. But, I noticed that if sidx != -1, then sqor = istg, otherwise sqor = -1. (Always at -1 for fuel tanks?)\u003C/p\u003E\u003Cp\u003E-attm is for attachment mode (to be confirmed); 0 if the part is not attached radially to anything, 1 if it is.\u003C/p\u003E\u003Cp\u003E-attRot (attach rotation?) \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Eseems to always be 0,0,0,1\u003C/span\u003E (edit: ahem, I don\u0027t know what I was thinking. This is, as the name suggest it, the attach rotation, the one you get with WASD in the VAB. The rotation is applied from the attach\u0027s origin instead of the part\u0027s origin).\u003C/p\u003E\u003Cp\u003E-mir (mirror?) seems to always be 1,1,1.\u003C/p\u003E\u003Cp\u003EAbout the part size: Don\u0027t forget (like me) that part can be rescaled either to 1m scale or 1.25m, and you should be able to get correct parts positions.\u003C/p\u003E\u003Cp\u003EThe rotation quaternion can easily be handled with the standard .NET framework, with the help of System.Windows.Media.Media3D.Quaternion and System.Windows.Media.Media3D.Vector3D.\u003C/p\u003E\u003Cp\u003EOf course, I could have read the Wikipedia article about quaternion, and come up with an open-source solution, but meh, got this without having to learn a thing! Hooray!\u003C/p\u003E\u003Cp\u003ENow to make a list of every module, resource, event, action, etc... This will be long.\u003C/p\u003E\u003Cp\u003EIf you see something incorrect, let me know, I\u0027m not quite sure about all this yet.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAn excellent summary - thanks!\u003C/p\u003E\n"}]}