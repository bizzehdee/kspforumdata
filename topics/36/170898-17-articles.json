{"TopicId":170898,"ForumId":36,"TopicTitle":"[WIP] Infernal Robotics - Next","CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-02-14T17:20:26Z","PageNum":17,"Articles":[{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-04T19:05:09Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223343150\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522707953\u0022 data-ipsquote-userid=\u0022182940\u0022 data-ipsquote-username=\u0022IMrChrisI\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn \u200E03\u200E.\u200E04\u200E.\u200E2018 at 12:25 AM, IMrChrisI said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHello :). Could we get angle translators? Torque input and 1:1 output and one free moving telescope? It will be very helpfull in building\u00A0machines \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u00A0.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCan you explain this a little bit more? What\u0027s the idea behind and... how should they work? Free moving telescope... Extendatron without motor? ... we haven\u0027t yet finished talking about free moving rotatrons and springs, dampers and things like that... could be an idea for extentions...\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2018-04-04T19:16:14Z","Content":"\n\u003Cp\u003E\nI wasn\u0027t sure to put my forward my ideas or not but here it goes ...\n\u003C/p\u003E\n\u003Cp\u003E\n1. Concerning joints\u00A0 : it is possible to put multiple joints to a single part,\u00A0 let unity simulate them as per usual and where \u0022outer\u0022 joints are the only ones with part\u0027s attachment nodes ?\n\u003C/p\u003E\n\u003Cp\u003E\n2. To build on previous\u00A0 question : is it possible to make new IR have part configs that can let \u0022aftermarket\u0022 users (such as \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0026amp;do=hovercard\u0022 data-mentionid=\u002276163\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0022 rel=\u0022\u0022\u003E@ZodiusInfuser\u003C/a\u003E ) write custom parts that have internally complex mechanics. Examples are helical motion drivers, spiral motion drivers,\u00A0 gearboxes (with one or multiple outputs). Math equations describing such motions may need to go into custom DLL modules (part.cfg may be insufficient) which is loaded by \u0022master DLL\u0022 IR itself.\n\u003C/p\u003E\n\u003Cp\u003E\n3. Would removing a joint (using Destroy() on it\u0027s component) make part connection between IR parts make them as rigid as any other \u0022normal\u0022 part ? Would parts translated/rotated with that joint stay at those positions after destroying joint ? This would be presented as \u0022fix\u0022 or \u0022freeze\u0022 function to player. IR constructs would be unusable until player \u0022reactivates\u0022 them but would be much more strong/rigid (even KJR may be notified about state of those parts and do it\u0027s magic on them, or not). I see this as the only way to have them as rigid as possible (i dabbled myself in C# trying to make simple robotic parts and noticed joints are the only way to go). This would make possible to have IR constructs not wobble too much during surface transports or launches.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-04T19:35:16Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223344961\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522869374\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 minutes ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n1. Concerning joints\u00A0 : it is possible to put multiple joints to a single part,\u00A0 let unity simulate them as per usual and where \u0022outer\u0022 joints are the only ones with part\u0027s attachment nodes ?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nToday you have multiple joints between parts. IR for example uses in most cases 2, in some situations up to 4 between the parts (due to limitations of the joint in unity). KSP itself does use 1 or 3 joints between parts (depending on the size of the node) and with autostruts does add even more.\n\u003C/p\u003E\n\u003Cp\u003E\nBut those joints are all attached to an object. What you are talking about would need multiple objects. And here comes the problem: objects need a mass, otherwise the joints don\u0027t work. It is better in KSP 1.4.x (because of the new unity used), but still not that easy to get good results. It may be possible to build something like that, but in the end I think it won\u0027t be as stable as it is now.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223344961\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522869374\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 minutes ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n2. To build on previous\u00A0 question : is it possible to make new IR have part configs that can let \u0022aftermarket\u0022 users (such as \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0026amp;do=hovercard\u0022 data-mentionid=\u002276163\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0022 rel=\u0022\u0022\u003E@ZodiusInfuser\u003C/a\u003E ) write custom parts that have internally complex mechanics. Examples are helical motion drivers, spiral motion drivers,\u00A0 gearboxes (with one or multiple outputs). Math equations describing such motions may need to go into custom DLL modules (part.cfg may be insufficient) which is loaded by \u0022master DLL\u0022 IR itself.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI doubt that you can get good results. I think you should do this by calculating it somewhere but not try to let unity simulate this. And then you simply build a part that gives you the same output... \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0026amp;do=hovercard\u0022 data-mentionid=\u002276163\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/76163-zodiusinfuser/\u0022 rel=\u0022\u0022\u003E@ZodiusInfuser\u003C/a\u003E\u00A0can tell you more about it. He is building wheels that fall into this category.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223344961\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522869374\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 minutes ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n3. Would removing a joint (using Destroy() on it\u0027s component) make part connection between IR parts make them as rigid as any other \u0022normal\u0022 part ? Would parts translated/rotated with that joint stay at those positions after destroying joint ? This would be presented as \u0022fix\u0022 or \u0022freeze\u0022 function to player. IR constructs would be unusable until player \u0022reactivates\u0022 them but would be much more strong/rigid (even KJR may be notified about state of those parts and do it\u0027s magic on them, or not). I see this as the only way to have them as rigid as possible (i dabbled myself in C# trying to make simple robotic parts and noticed joints are the only way to go). This would make possible to have IR constructs not wobble too much during surface transports or launches.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo. Removing the joint disconnects the parts. You have to add an additional one or modify it to make it rigid (or stronger).\n\u003C/p\u003E\n\u003Cp\u003E\nI was planing to build something like that (activate/deactivate joint lock)\u00A0into KJR (the version I built... maybe it will get merged back, but I cannot say if and when... I\u0027m still negotiating this). But what I can say: this is working with autostruts. If you lock an IR joint, autostrut is informed and can then build struts over this joint... if you then unlock the joint again, it removes those autostruts.\n\u003C/p\u003E\n\u003Cp\u003E\nAnother option would be to use IR-ActiveStruts... unfortunatelly I\u0027m not yet ready. I\u0027m currently rewriting the project completely. But it shouldn\u0027t take that long. This would offer a more visible option.\n\u003C/p\u003E\n\u003Cp\u003E\nBut after all I think the stability of the joints is already not that bad.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2018-04-04T20:29:56Z","Content":"\n\u003Cp\u003E\nThanks for the useful info !\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nRE point 2 : i was thinking along the lines of having custom motion parts that do not require rewriting IR. That way alternate complex/unusual joint groups can be added.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-04T20:49:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223344981\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522870516\u0022 data-ipsquote-userid=\u0022176740\u0022 data-ipsquote-username=\u0022Rudolf Meier\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Rudolf Meier said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI was planing to build something like that (activate/deactivate joint lock)\u00A0into KJR...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nok, I will add this now\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: it is in KJR and a new release is online (see first page for links) ... new IR release will support this, should be out soon, I\u0027m changing little things (cleaning and moving IK code into own module) ... I expect this to be online tomorrow\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-04T22:08:07Z\u0022 title=\u002204/04/2018 10:08  PM\u0022 data-short=\u00226 yr\u0022\u003EApril 4, 2018\u003C/time\u003E by Rudolf Meier\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"kcs123","CreatedById":127158,"CreatedDateTime":"2018-04-05T14:54:09Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223344981\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522870516\u0022 data-ipsquote-userid=\u0022176740\u0022 data-ipsquote-username=\u0022Rudolf Meier\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 hours ago, Rudolf Meier said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI was planing to build something like that (activate/deactivate joint lock)\u00A0into KJR\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nComing late to party, but would be possible, at least with powered IR parts to unlock/lock KJR joints just before starting to move and after you start to move such part ?\n\u003C/p\u003E\n\u003Cp\u003E\nWith option in \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E/\u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E right click menu to toggle such option if it is allowed to autolock for KJR or not. Meaning, if you have two poered IR parts attached to each other and some other craft parts when you start to move only one part other one would still be locked trough KJR if not powered and if you not have such option to toggle locking.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, in such case if I have that new option to allow KJR autolock on one part and not allow to autolock on second part, when first part start to move trough commands, KJR would disable lockong and all parts should move as intended because second IR part is not affected to autolock at all. Of course, you will have to be careful in craft design for what parts to allow autolock and for what parts to not.\n\u003C/p\u003E\n\u003Cp\u003E\nAnother alternative could be to put lock/unlock in action groups, so you can choose what part to unlock or lock before starting to move IR parts and after finished with it.\n\u003C/p\u003E\n\u003Cp\u003E\nIn theory, it should help to build stronger crafts that have movable IR parts, but on the other hand it could be another kraken bait.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-05T16:17:09Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223345748\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522940049\u0022 data-ipsquote-userid=\u0022127158\u0022 data-ipsquote-username=\u0022kcs123\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, kcs123 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nComing late to party, but would be possible, at least with powered IR parts to unlock/lock KJR joints just before starting to move and after you start to move such part ?\n\u003C/p\u003E\n\u003Cp\u003E\n...\n\u003C/p\u003E\n\u003Cp\u003E\nAnother alternative could be to put lock/unlock in action groups, so you can choose what part to unlock or lock before starting to move IR parts and after finished with it.\n\u003C/p\u003E\n\u003Cp\u003E\nIn theory, it should help to build stronger crafts that have movable IR parts, but on the other hand it could be another kraken bait.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nKSPs autostruts do have such a functionality and you can see how they use it in the \u0022klaw\u0022. My thoughts were, that I should take this as an example and do it similar. And this means, that the joint is\u00A0reconfiguring the auto-strut and KJR configuration when locked/unlocked. It\u0027s quite some work that has to be done for this reconfiguration. So I don\u0027t think it\u0027s a good idea to do it based on motor movements. But based on lock-states of the joints, that\u0027s something I think we should do. At least that\u0027s what the new version of IR that I will upload later this evening is doing and that\u0027s what the new KJR I did build supports now.\n\u003C/p\u003E\n"},{"CreatedByName":"kcs123","CreatedById":127158,"CreatedDateTime":"2018-04-05T19:16:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223345828\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522945029\u0022 data-ipsquote-userid=\u0022176740\u0022 data-ipsquote-username=\u0022Rudolf Meier\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Rudolf Meier said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt\u0027s quite some work that has to be done for this reconfiguration. So I don\u0027t think it\u0027s a good idea to do it based on motor movements. But based on lock-states of the joints, that\u0027s something I think we should do. At least that\u0027s what the new version of IR that I will upload later this evening is doing and that\u0027s what the new KJR I did build supports now.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell, you are the one who do all of hard work, so you are the one who knows what is plausible to do and what not. In such scenario having ability to lock/unlock joints trough action group would come handy.\u00A0 Maybe some kOS scripts in combination of new kOS GUI and IR parts might provide more user friendly usage from this new feature.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-05T19:20:18Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223346058\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522955812\u0022 data-ipsquote-userid=\u0022127158\u0022 data-ipsquote-username=\u0022kcs123\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, kcs123 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n...\u00A0having ability to lock/unlock joints trough action group would come handy. Maybe some kOS scripts in combination of new kOS GUI and IR parts might provide more user friendly usage from this new feature.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think there should be actions for that already... and if not, I can add them. I haven\u0027t tested those so far \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"specificplayer","CreatedById":187745,"CreatedDateTime":"2018-04-05T23:22:15Z","Content":"\n\u003Cp\u003E\nI install your version of IR and it doesn\u0027t have give me to option to tweak scale the parts in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, but when i install tweak scale separately it allows me to alter the parts in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, however upon launch parts explode or when i try to move even the simplest of servos the game crashes? Any reason why tweakscale wouldn\u0027t show in first place or is it not yet enabled?\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-05T23:31:04Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223346304\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522970535\u0022 data-ipsquote-userid=\u0022187745\u0022 data-ipsquote-username=\u0022specificplayer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 minutes ago, specificplayer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI install your version of IR and it doesn\u0027t have give me to option to tweak scale the parts in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, but when i install tweak scale separately it allows me to alter the parts in \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, however upon launch parts explode or when i try to move even the simplest of servos the game crashes? Any reason why tweakscale wouldn\u0027t show in first place or is it not yet enabled?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIR supports TweakScale, but it does not install it... you have to install it separately. And the explosions... this sounds as if you have installed KJR, but not the version I built, but an other one. You need the special version I made... (side note: I\u0027m currently negotiating with the original KJR developer about a pull request on Github)\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-05T23:44:56Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223345828\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522945029\u0022 data-ipsquote-userid=\u0022176740\u0022 data-ipsquote-username=\u0022Rudolf Meier\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, Rudolf Meier said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n... the new version of IR that I will upload later this evening ...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSorry for the delay... I run into problems. The new auto-strut and KJR mode seems to have a problem with time warping (should not be a big one after all) but while investigating this I found a bigger one... the Rotatrons are destroyed when going into time warp. It must be a problem with axis and things like that... but I thought I have fixed it in the past. Anyway... I need to fix this first.\n\u003C/p\u003E\n\u003Cp\u003E\n... the good news on the other side is, that all other functions I was working on are done and the code is almost fully cleaned up. I have now also included the collision functions.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd the ActiveStruts are also on a good level now... graphics / animation is done, linking also... now I only need to combine those two.\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: ok, it\u0027s clear now what the bug is... I didn\u0027t see this before... the auto-strut KJR problem is solved, but if you put multiple IR parts on top of each other, we get a problem in time warping... this could take some time to solve\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-05T23:56:54Z\u0022 title=\u002204/05/2018 11:56  PM\u0022 data-short=\u00226 yr\u0022\u003EApril 5, 2018\u003C/time\u003E by Rudolf Meier\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"specificplayer","CreatedById":187745,"CreatedDateTime":"2018-04-06T00:30:52Z","Content":"\n\u003Cp\u003E\nRemoving KJR fixed the exploding but i was still getting crashes, moved the IR mod over to my backup KSP and it worked, the only difference being older saves ( a few weeks old ) and it didnt crash when resizing? Now when trying to move each mod over individually to find the conflict they all worked fine... Then when i moved my new save over to the backup it stopped working. I the deleted the save and tried my backup again with just the mods and no save... it didnt work.\n\u003C/p\u003E\n\u003Cp\u003E\nGonna give up on my saves and start a new ksp, gonna redownload over night and see if it work and if my old save \u0022infected\u0022 it, kinda annoying how it was working and now i cant get it back.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThanks for your help and great work.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-06T07:53:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223346357\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221522974652\u0022 data-ipsquote-userid=\u0022187745\u0022 data-ipsquote-username=\u0022specificplayer\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, specificplayer said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nRemoving KJR fixed the exploding but i was still getting crashes, moved the IR mod over to my backup KSP and it worked, the only difference being older saves ( a few weeks old ) and it didnt crash when resizing? Now when trying to move each mod over individually to find the conflict they all worked fine... Then when i moved my new save over to the backup it stopped working. I the deleted the save and tried my backup again with just the mods and no save... it didnt work.\n\u003C/p\u003E\n\u003Cp\u003E\nGonna give up on my saves and start a new ksp, gonna redownload over night and see if it work and if my old save \u0022infected\u0022 it, kinda annoying how it was working and now i cant get it back.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThanks for your help and great work.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nare you loading new crafts? from \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003Evab\u003C/abbr\u003E or \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003Esph\u003C/abbr\u003E I guess?\u00A0and they have problems then? ... that shouldn\u0027t happen... I cannot say if loading works always, because here I think we could still find some bugs/problems (and the bug I\u0027m currently fixing is related to this... timewarp and loading). It\u0027s hard to find all combinations that can occur here... but still, it shouldn\u0027t happen\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-06T16:15:25Z","Content":"\n\u003Cp\u003E\nBeta3 is out - all features implemented (including the collision enabling per part -\u0026gt; only possible in editor)\n\u003C/p\u003E\n\u003Cp\u003E\nall bugs fixed, code cleaned...\n\u003C/p\u003E\n"},{"CreatedByName":"annihilator hd","CreatedById":36875,"CreatedDateTime":"2018-04-07T02:20:58Z","Content":"\n\u003Cp\u003E\nHi,\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI was wondering if there is anyway to stop the parts bending the further out they get / the more they are. I was trying to make an arm/crane on an older install and was hoping there would be some sort of way that the extenders can still go in and out but stay strong and not bend? I am using KJR.\n\u003C/p\u003E\n\u003Cp\u003E\nSorry if this has already been asked 1000x times but I\u0027m just trying to find a conclusive answer.\n\u003C/p\u003E\n\u003Cp\u003E\nImages:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://imgur.com/a/YwAIR\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://imgur.com/a/YwAIR\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Getsome2030","CreatedById":133641,"CreatedDateTime":"2018-04-07T05:47:02Z","Content":"\n\u003Cp\u003E\nSeems to be an issue with the \u0027Gantry Rail\u0022 part, I\u0027m using KSP 1.4.2 and the IR Beta 3. Attaching a Gantry Rail to a basic frame build consisting of some trusses,\u00A0 upon launching it explodes?\n\u003C/p\u003E\n"},{"CreatedByName":"=V=Heromant","CreatedById":187742,"CreatedDateTime":"2018-04-07T07:18:32Z","Content":"\n\u003Cp\u003E\nHi.\n\u003C/p\u003E\n\u003Cp\u003E\nI am very bad speak english and I have some difficulties for read all messages from that topic.\n\u003C/p\u003E\n\u003Cp\u003E\nI use old version IR (from \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003Eckan\u003C/abbr\u003E) with legacy parts. And I install that last betta version too. As result - I have a two IR items in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E menu. First menu item have inside old legacy parts and I can config its all parameters. Second item have inside all \u0022IR Next\u0022 parts and if I open it config window - that window is\u00A0empty. I can use only right click menu for that parts.\n\u003C/p\u003E\n\u003Cp\u003E\nI need uninstall old version IR or I can use both versions?\u00A0Help\u00A0please.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-07T07:19:14Z\u0022 title=\u002204/07/2018 07:19  AM\u0022 data-short=\u00226 yr\u0022\u003EApril 7, 2018\u003C/time\u003E by =V=Heromant\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tbankstemp","CreatedById":187813,"CreatedDateTime":"2018-04-07T13:46:18Z","Content":"\n\u003Cp\u003E\nI am having the same issue with the Gantry Rail in 1.4.2. I am also having things explode on load if there are multiple IR parts connected to each other. For instance, parts that one would make a robot arm with. Pistons, rotors,etc.\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-07T18:56:30Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223347654\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221523085512\u0022 data-ipsquote-userid=\u0022187742\u0022 data-ipsquote-username=\u0022=V=Heromant\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, =V=Heromant said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI use old version IR (from \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003Eckan\u003C/abbr\u003E) with legacy parts. And I install that last betta version too. As result - I have a two IR items in the \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E menu. First menu item have inside old legacy parts and I can config its all parameters. Second item have inside all \u0022IR Next\u0022 parts and if I open it config window - that window is\u00A0empty. I can use only right click menu for that parts.\n\u003C/p\u003E\n\u003Cp\u003E\nI need uninstall old version IR or I can use both versions?\u00A0Help\u00A0please.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nhi, no you can use the old IR and IR next at the same time. They don\u0027t affect each other. If the only part of a vessel is an IR next part, then the configuration window remains empty. Maybe that\u0027s the problem? (little but in the gui... but I wanted to change the gui a little bit anyway, that\u0027s why I didn\u0027t try to fix that for now)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223347800\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221523108778\u0022 data-ipsquote-userid=\u0022187813\u0022 data-ipsquote-username=\u0022tbankstemp\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, tbankstemp said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI am having the same issue with the Gantry Rail in 1.4.2. I am also having things explode on load if there are multiple IR parts connected to each other. For instance, parts that one would make a robot arm with. Pistons, rotors,etc.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nyes... Beta 3 seems to have some problems with translational joints (I guess)...\n\u003C/p\u003E\n"},{"CreatedByName":"Rudolf Meier","CreatedById":176740,"CreatedDateTime":"2018-04-07T21:49:38Z","Content":"\n\u003Cp\u003E\nPatch 1 for Beta 3 is online... there was a problem with position calculation in translational joints. I also removed some unneeded calls... and the rails don\u0027t explode anymore.\n\u003C/p\u003E\n"},{"CreatedByName":"tbankstemp","CreatedById":187813,"CreatedDateTime":"2018-04-07T22:09:05Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223348213\u0022 data-ipsquote-contentid=\u0022170898\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221523137778\u0022 data-ipsquote-userid=\u0022176740\u0022 data-ipsquote-username=\u0022Rudolf Meier\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, Rudolf Meier said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nPatch 1 for Beta 3 is online... there was a problem with position calculation in translational joints. I also removed some unneeded calls... and the rails don\u0027t explode anymore.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s awesome, thanks. Nice and quick too. I\u0027ll test out my big contraption in a few hours and report back.\u00A0 Thanks man.\n\u003C/p\u003E\n"},{"CreatedByName":"mexorsu","CreatedById":177565,"CreatedDateTime":"2018-04-07T22:45:58Z","Content":"\n\u003Cp\u003E\nHey Rudolf, can you please\u00A0add\u00A0(back) the IRWrapper.cs attached below? Not sure if its used in many mods but for sure KOS uses it and i miss that integration. I changed the code of original IRWrapper.cs from MagicSmokeIndustries/InfernalRobotics to accomodate new namespace, property/class name changes and other crazy \u0022refactorings\u0022 you did \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nI will admit I just tested it with rebuilt KOS, two expendatrons (to check groups ^^)\u00A0and\u00A0a single rotatron\u00A0so far, but all KOS \u0022suffixes\u0022 for IR\u00A0worked great on those parts and I also did break in VS debugger to check and validated that everything seems to map\u00A0nicely. Will do more testing tomorrow with more parts and let you know. Only thing is that in that form we\u0027d have to also merge that changes to API clients code, but to avoid that you\u0027d have to revert some of the refactorings you did in interfaces, to make it API compliant back. Anyway I also have a patch for KOS ready so assuming they will merge then KOS integration could work right away (currently using it in game).\n\u003C/p\u003E\n\u003Cp\u003E\nI do realise that probably you have some\u00A0\u0022new\u0026amp;improved\u0022\u00A0way for integration in mind and new shiny API you want to throw in later- but in the meantime you could at least merge this, wont hurt right? Might please some folks i guess.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, yeah I could refactor it more instead of just quickly patching the holes, but thought better to give you rough version now before you merge some more stuff and conflict the s**t out of my changes ^^\n\u003C/p\u003E\n\u003Cp\u003E\nAnyway, patch below, send me an email for more convenient form or just add me on github so that i can make PR and later refactor getting rid of duplicate type mappings etc:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\ndiff --git InfernalRobotics/InfernalRobotics/API/IRWrapper.cs InfernalRobotics/InfernalRobotics/API/IRWrapper.cs\u003Cbr\u003E\nnew file mode 100644\u003Cbr\u003E\nindex 0000000..67799f0\u003Cbr\u003E\n--- /dev/null\u003Cbr\u003E\n\u002B\u002B\u002B InfernalRobotics/InfernalRobotics/API/IRWrapper.cs\u003Cbr\u003E\n@@ -0,0 \u002B1,752 @@\u003Cbr\u003E\n\u002B\uFEFFusing System;\u003Cbr\u003E\n\u002Busing System.Collections;\u003Cbr\u003E\n\u002Busing System.Collections.Generic;\u003Cbr\u003E\n\u002Busing System.Linq;\u003Cbr\u003E\n\u002Busing System.Reflection;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002Bnamespace InfernalRobotics_v3\u003Cbr\u003E\n\u002B{\u003Cbr\u003E\n\u002B \u00A0 \u00A0public class IR3Wrapper\u003Cbr\u003E\n\u002B \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0private static bool isWrapped;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0private static bool? hasAssembly = null;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ServoControllerType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ControlGroupType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ServoType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ServoPartType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ServoMechanismType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static Type IR3ServoMotorType { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0protected internal static object ActualServoController { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static IR3API IR3Controller { get; set; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static bool AssemblyExists { get { return (IR3ServoControllerType != null); } }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static bool InstanceExists { get { return (IR3Controller != null); } }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static bool APIReady { get { return hasAssembly.HasValue \u0026amp;\u0026amp; hasAssembly.Value \u0026amp;\u0026amp; isWrapped \u0026amp;\u0026amp; IR3Controller.Ready; } }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static Type GetType(string name)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0Type type = null;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0AssemblyLoader.loadedAssemblies.TypeOperation(t =\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (t.FullName == name)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0type = t;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0});\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return type;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static bool InitWrapper()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0// Prevent the init function from continuing to initialize if InfernalRobotics is not installed.\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (hasAssembly == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Attempting to Grab IR3 Assembly...\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0hasAssembly = AssemblyLoader.loadedAssemblies.Any(a =\u0026gt; a.dllName.Equals(\u0022InfernalRobotics_v3\u0022));\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (hasAssembly.Value)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Found IR3 Assembly!\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0else\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Did not find IR3 Assembly.\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (!hasAssembly.Value)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isWrapped = false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return isWrapped;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isWrapped = false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0ActualServoController = null;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3Controller = null;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Attempting to Grab IR3 Types...\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ServoControllerType = GetType(\u0022InfernalRobotics_v3.Command.Controller\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ServoControllerType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022IR3 Version:{0}\u0022, IR3ServoControllerType.Assembly.GetName().Version.ToString());\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ServoMechanismType = GetType(\u0022InfernalRobotics_v3.Control.IServo\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ServoMechanismType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Failed to grab Mechanism Type\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ServoMotorType = GetType(\u0022InfernalRobotics_v3.Control.IMotor\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ServoMotorType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Failed to grab ServoMotor Type\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ServoType = GetType(\u0022InfernalRobotics_v3.Control.IServo\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ServoType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Failed to grab Servo Type\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ServoPartType = GetType(\u0022InfernalRobotics_v3.Control.IServo\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ServoType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Failed to grab ServoPart Type\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3ControlGroupType = GetType(\u0022InfernalRobotics_v3.Command.ControlGroup\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3ControlGroupType == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var IR3assembly = AssemblyLoader.loadedAssemblies.FirstOrDefault(a =\u0026gt; a.assembly.FullName.Contains(\u0022InfernalRobotics_v3\u0022));\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (IR3assembly == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] cannot find InfernalRobotics_v3.dll\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0foreach (Type t in IR3assembly.assembly.GetExportedTypes())\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Exported type: \u0022 \u002B t.FullName);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Failed to grab ControlGroup Type\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Got Assembly Types, grabbing Instance\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0try\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var propertyInfo = IR3ServoControllerType.GetProperty(\u0022Instance\u0022, BindingFlags.Public | BindingFlags.Static);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (propertyInfo == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022[IR3 Wrapper] Cannot find Instance Property\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0else\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0ActualServoController = propertyInfo.GetValue(null, null);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0catch (Exception e)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022No Instance found, \u0022 \u002B e.Message);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (ActualServoController == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Failed grabbing Instance\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Got Instance, Creating Wrapper Objects\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IR3Controller = new InfernalRoboticsAPI();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isWrapped = true;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return true;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#region Private Implementation\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0private class InfernalRoboticsAPI : IR3API\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo apiReady;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private object actualServoGroups;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public InfernalRoboticsAPI()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0DetermineReady();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0BuildServoGroups();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void BuildServoGroups()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var servoGroupsField = IR3ServoControllerType.GetField(\u0022ServoGroups\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (servoGroupsField == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Failed Getting ServoGroups fieldinfo\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0else if (IR3Wrapper.ActualServoController == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022ServoController Instance not found\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0else\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0actualServoGroups = servoGroupsField.GetValue(IR3Wrapper.ActualServoController);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void DetermineReady()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Getting APIReady Object\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0apiReady = IR3ServoControllerType.GetProperty(\u0022APIReady\u0022, BindingFlags.Public | BindingFlags.Static);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Success: \u0022 \u002B (apiReady != null));\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool Ready\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (apiReady == null || actualServoGroups == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return false;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return (bool)apiReady.GetValue(null, null);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public IList\u0026lt;IControlGroup\u0026gt; ServoGroups\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0BuildServoGroups();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return ExtractServoGroups(actualServoGroups);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private IList\u0026lt;IControlGroup\u0026gt; ExtractServoGroups(object servoGroups)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var listToReturn = new List\u0026lt;IControlGroup\u0026gt;();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (servoGroups == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return listToReturn;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0try\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0//iterate each \u0022value\u0022 in the dictionary\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0foreach (var item in (IList)servoGroups)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0listToReturn.Add(new IR3ControlGroup(item));\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0catch (Exception ex)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Cannot list ServoGroups: {0}\u0022, ex.Message);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return listToReturn;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0private class IR3ControlGroup : IControlGroup\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private readonly object actualControlGroup;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo nameProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo vesselProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo forwardKeyProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo expandedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo speedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo reverseKeyProperty;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveRightMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveLeftMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveCenterMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveNextPresetMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo movePrevPresetMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo stopMethod;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public IR3ControlGroup(object cg)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0actualControlGroup = cg;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0FindProperties();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0FindMethods();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void FindProperties()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0nameProperty = IR3ControlGroupType.GetProperty(\u0022Name\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0vesselProperty = IR3ControlGroupType.GetProperty(\u0022Vessel\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0forwardKeyProperty = IR3ControlGroupType.GetProperty(\u0022ForwardKey\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0reverseKeyProperty = IR3ControlGroupType.GetProperty(\u0022ReverseKey\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0speedProperty = IR3ControlGroupType.GetProperty(\u0022Speed\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0expandedProperty = IR3ControlGroupType.GetProperty(\u0022Expanded\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var servosProperty = IR3ControlGroupType.GetProperty(\u0022Servos\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0ActualServos = servosProperty.GetValue(actualControlGroup, null);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void FindMethods()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveRightMethod = IR3ControlGroupType.GetMethod(\u0022MoveRight\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveLeftMethod = IR3ControlGroupType.GetMethod(\u0022MoveLeft\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveCenterMethod = IR3ControlGroupType.GetMethod(\u0022MoveCenter\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveNextPresetMethod = IR3ControlGroupType.GetMethod(\u0022MoveNextPreset\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0movePrevPresetMethod = IR3ControlGroupType.GetMethod(\u0022MovePrevPreset\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0stopMethod = IR3ControlGroupType.GetMethod(\u0022Stop\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public string Name\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (string)nameProperty.GetValue(actualControlGroup, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { nameProperty.SetValue(actualControlGroup, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public Vessel Vessel\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return vesselProperty != null ? (Vessel)vesselProperty.GetValue(actualControlGroup, null) : null; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public string ForwardKey\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (string)forwardKeyProperty.GetValue(actualControlGroup, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { forwardKeyProperty.SetValue(actualControlGroup, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public string ReverseKey\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (string)reverseKeyProperty.GetValue(actualControlGroup, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { reverseKeyProperty.SetValue(actualControlGroup, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float Speed\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)speedProperty.GetValue(actualControlGroup, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { speedProperty.SetValue(actualControlGroup, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool Expanded\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (bool)expandedProperty.GetValue(actualControlGroup, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { expandedProperty.SetValue(actualControlGroup, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private object ActualServos { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public IList\u0026lt;IServo\u0026gt; Servos\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return ExtractServos(ActualServos);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveRight()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveRightMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveLeft()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveLeftMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveCenter()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveCenterMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveNextPreset()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveNextPresetMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MovePrevPreset()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0movePrevPresetMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void Stop()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0stopMethod.Invoke(actualControlGroup, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private IList\u0026lt;IServo\u0026gt; ExtractServos(object actualServos)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var listToReturn = new List\u0026lt;IServo\u0026gt;();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0if (actualServos == null)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return listToReturn;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0try\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0//iterate each key in the dictionary\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0foreach (var item in ((IList)actualServos))\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0listToReturn.Add(new IR3Servo(item));\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0catch (Exception ex)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(\u0022Error extracting from actualServos: {0}\u0022, ex.Message);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return listToReturn;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool Equals(IControlGroup other)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var controlGroup = other as IR3ControlGroup;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return controlGroup != null \u0026amp;\u0026amp; Equals(controlGroup);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0public class IR3Servo : IServo\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private object actualServoMotor;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo maxConfigPositionProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo minPositionProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo maxPositionProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo configSpeedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo speedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo currentSpeedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo accelerationProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo isMovingProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo isFreeMovingProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo isLockedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo isAxisInvertedProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo nameProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo highlightProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo positionProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo minConfigPositionProperty;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo UIDProperty;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private PropertyInfo HostPartProperty;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveRightMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveLeftMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveCenterMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveNextPresetMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo movePrevPresetMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo moveToMethod;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private MethodInfo stopMethod;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public IR3Servo(object s)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0actualServo = s;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0FindProperties();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0FindMethods();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void FindProperties()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0nameProperty = IR3ServoPartType.GetProperty(\u0022Name\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0highlightProperty = IR3ServoPartType.GetProperty(\u0022Highlight\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0UIDProperty = IR3ServoPartType.GetProperty(\u0022UID\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0HostPartProperty = IR3ServoPartType.GetProperty(\u0022HostPart\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var motorProperty = IR3ServoType.GetProperty(\u0022Motor\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0actualServoMotor = motorProperty.GetValue(actualServo, null);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0positionProperty = IR3ServoMechanismType.GetProperty(\u0022Position\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0minPositionProperty = IR3ServoMechanismType.GetProperty(\u0022MinPositionLimit\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0maxPositionProperty = IR3ServoMechanismType.GetProperty(\u0022MaxPositionLimit\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0minConfigPositionProperty = IR3ServoMechanismType.GetProperty(\u0022MinPosition\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0maxConfigPositionProperty = IR3ServoMechanismType.GetProperty(\u0022MaxPosition\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isMovingProperty = IR3ServoMechanismType.GetProperty(\u0022IsMoving\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isFreeMovingProperty = IR3ServoMechanismType.GetProperty(\u0022IsFreeMoving\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isLockedProperty = IR3ServoMechanismType.GetProperty(\u0022IsLocked\u0022);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0speedProperty = IR3ServoMotorType.GetProperty(\u0022SpeedLimit\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0configSpeedProperty = IR3ServoMotorType.GetProperty(\u0022DefaultSpeed\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0currentSpeedProperty = IR3ServoMotorType.GetProperty(\u0022Speed\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0accelerationProperty = IR3ServoMotorType.GetProperty(\u0022AccelerationLimit\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0isAxisInvertedProperty = IR3ServoMotorType.GetProperty(\u0022IsAxisInverted\u0022);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private void FindMethods()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveRightMethod = IR3ServoMotorType.GetMethod(\u0022MoveRight\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveLeftMethod = IR3ServoMotorType.GetMethod(\u0022MoveLeft\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveCenterMethod = IR3ServoMotorType.GetMethod(\u0022MoveCenter\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveNextPresetMethod = IR3ServoMotorType.GetMethod(\u0022MoveNextPreset\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0movePrevPresetMethod = IR3ServoMotorType.GetMethod(\u0022MovePrevPreset\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0stopMethod = IR3ServoMotorType.GetMethod(\u0022Stop\u0022, BindingFlags.Public | BindingFlags.Instance);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveToMethod = IR3ServoMotorType.GetMethod(\u0022MoveTo\u0022, new[] { typeof(float), typeof(float) });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0private readonly object actualServo;\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public string Name\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (string)nameProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { nameProperty.SetValue(actualServo, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public uint UID\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (uint)UIDProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public Part HostPart\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (Part)HostPartProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool Highlight\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0//get { return (bool)HighlightProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { highlightProperty.SetValue(actualServo, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float Position\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)positionProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float MinConfigPosition\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)minConfigPositionProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float MaxConfigPosition\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)maxConfigPositionProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float MinPosition\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)minPositionProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { minPositionProperty.SetValue(actualServo, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float MaxPosition\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)maxPositionProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { maxPositionProperty.SetValue(actualServo, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float ConfigSpeed\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)configSpeedProperty.GetValue(actualServoMotor, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float Speed\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)speedProperty.GetValue(actualServoMotor, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { speedProperty.SetValue(actualServoMotor, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float CurrentSpeed\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)currentSpeedProperty.GetValue(actualServoMotor, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { currentSpeedProperty.SetValue(actualServoMotor, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public float Acceleration\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (float)accelerationProperty.GetValue(actualServoMotor, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { accelerationProperty.SetValue(actualServoMotor, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool IsMoving\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (bool)isMovingProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool IsFreeMoving\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (bool)isFreeMovingProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool IsLocked\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (bool)isLockedProperty.GetValue(actualServo, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { isLockedProperty.SetValue(actualServo, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool IsAxisInverted\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0get { return (bool)isAxisInvertedProperty.GetValue(actualServoMotor, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0set { isAxisInvertedProperty.SetValue(actualServoMotor, value, null); }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveRight()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveRightMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveLeft()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveLeftMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveCenter()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveCenterMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveNextPreset()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveNextPresetMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MovePrevPreset()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0movePrevPresetMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void MoveTo(float position, float speed)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0moveToMethod.Invoke(actualServoMotor, new object[] { position, speed });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public void Stop()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0stopMethod.Invoke(actualServoMotor, new object[] { });\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public bool Equals(IServo other)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var servo = other as IR3Servo;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return servo != null \u0026amp;\u0026amp; Equals(servo);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public override bool Equals(object o)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var servo = o as IR3Servo;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return servo != null \u0026amp;\u0026amp; actualServo.Equals(servo.actualServo);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public override int GetHashCode()\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return (actualServo != null ? actualServo.GetHashCode() : 0);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public static bool operator ==(IR3Servo left, IR3Servo right)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return Equals(left, right);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0public static bool operator !=(IR3Servo left, IR3Servo right)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return !Equals(left, right);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0protected bool Equals(IR3Servo other)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0return Equals(actualServo, other.actualServo);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#endregion Private Implementation\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#region API Contract\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0public interface IR3API\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool Ready { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IList\u0026lt;IControlGroup\u0026gt; ServoGroups { get; }\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0public interface IControlGroup : IEquatable\u0026lt;IControlGroup\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string Name { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0//can only be used in Flight, null checking is mandatory\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0Vessel Vessel { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string ForwardKey { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string ReverseKey { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float Speed { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool Expanded { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0IList\u0026lt;IServo\u0026gt; Servos { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveRight();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveLeft();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveCenter();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveNextPreset();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MovePrevPreset();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void Stop();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0public interface IServo : IEquatable\u0026lt;IServo\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string Name { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0uint UID { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0Part HostPart { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool Highlight { set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float Position { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float MinConfigPosition { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float MaxConfigPosition { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float MinPosition { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float MaxPosition { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float ConfigSpeed { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float Speed { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float CurrentSpeed { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0float Acceleration { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool IsMoving { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool IsFreeMoving { get; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool IsLocked { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool IsAxisInverted { get; set; }\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveRight();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveLeft();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveCenter();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveNextPreset();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MovePrevPreset();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void MoveTo(float position, float speed);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0void Stop();\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0bool Equals(object o);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0int GetHashCode();\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#endregion API Contract\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#region Logging Stuff\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;summary\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// Some Structured logging to the debug file - ONLY RUNS WHEN DLL COMPILED IN DEBUG MODE\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;param name=\u0022message\u0022\u0026gt;Text to be printed - can be formatted as per string.format\u0026lt;/param\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;param name=\u0022strParams\u0022\u0026gt;Objects to feed into a string.format\u0026lt;/param\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0[System.Diagnostics.Conditional(\u0022DEBUG\u0022)]\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static void LogFormatted_DebugOnly(string message, params object[] strParams)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0LogFormatted(message, strParams);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;summary\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// Some Structured logging to the debug file\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;/summary\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;param name=\u0022message\u0022\u0026gt;Text to be printed - can be formatted as per string.format\u0026lt;/param\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0/// \u0026lt;param name=\u0022strParams\u0022\u0026gt;Objects to feed into a string.format\u0026lt;/param\u0026gt;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0internal static void LogFormatted(string message, params object[] strParams)\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0{\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var assemblyName = Assembly.GetExecutingAssembly().GetName().Name;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0var declaringType = MethodBase.GetCurrentMethod().DeclaringType;\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0message = string.Format(message, strParams);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string strMessageLine = declaringType != null ?\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string.Format(\u0022{0},{2}-{3},{1}\u0022, DateTime.Now, message, assemblyName, declaringType.Name) :\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0string.Format(\u0022{0},{2}-NO-DECLARE,{1}\u0022, DateTime.Now, message, assemblyName);\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0 \u00A0 \u00A0UnityEngine.Debug.Log(strMessageLine);\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0}\u003Cbr\u003E\n\u002B\u003Cbr\u003E\n\u002B \u00A0 \u00A0 \u00A0 \u00A0#endregion Logging Stuff\u003Cbr\u003E\n\u002B \u00A0 \u00A0}\u003Cbr\u003E\n\u002B}\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-07T22:52:19Z\u0022 title=\u002204/07/2018 10:52  PM\u0022 data-short=\u00226 yr\u0022\u003EApril 7, 2018\u003C/time\u003E by mexorsu\u003C/strong\u003E\n\u003Cbr\u003Eclarification\n\u003C/span\u003E\n"},{"CreatedByName":"tbankstemp","CreatedById":187813,"CreatedDateTime":"2018-04-08T01:09:46Z","Content":"\n\u003Cp\u003E\nOk, so I tested out some things and here are my findings.\n\u003C/p\u003E\n\u003Cp\u003E\n*The below were the only parts I\u0027ve tested*\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EWorking: \u003C/strong\u003E\u003Cbr\u003E\nRails are good. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003Cbr\u003E\nExtendatron - Basic and Half\u003Cbr\u003E\nJoint Pivotron - Basic and half\u003Cbr\u003E\u003Cbr\u003E\u003Cstrong\u003ENot Working:\u003C/strong\u003E\u003Cbr\u003E\nRotatron - Basic\u003Cbr\u003E\nRotatron - Uncontrolled\u003Cbr\u003E\nJoint Pivotron - Narrow angle\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI assume it would be the same/similar issue as the Rails were. Same explodey thingy happens. I can provide logs and crash.dmp if needed.\u003Cbr\u003E\u003Cbr\u003E\nThanks.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-04-08T01:17:39Z\u0022 title=\u002204/08/2018 01:17  AM\u0022 data-short=\u00226 yr\u0022\u003EApril 8, 2018\u003C/time\u003E by tbankstemp\u003C/strong\u003E\n\u003Cbr\u003EHit post on accident.\n\u003C/span\u003E\n"},{"CreatedByName":"Getsome2030","CreatedById":133641,"CreatedDateTime":"2018-04-08T05:02:11Z","Content":"\n\u003Cp\u003E\nGantry Rails, tested the patch and the craft doesn\u0027t explode, yeah! But trying to build a gantry craft with 1x Gantry Rail part moving north/south and another moving east/west it not working out that well. Gantry Rail moving east/west has no issue but then trying to move north/south\u00A0cause the whole craft to move instead of the Gantry Rail part.\n\u003C/p\u003E\n\u003Cp\u003E\nThe other issue I have about the Gantry Rail part and some of the other parts, Rotatron parts.\u00A0Why are the bottom attach nodes inverted? I change mine from:\u00A0node_stack_center = 0.0, -0.05, 0.0, 0.0, \u003Cstrong\u003E1.0\u003C/strong\u003E, 0.0, 2 to\u00A0node_stack_center = 0.0, -0.05, 0.0, 0.0, \u003Cstrong\u003E-1.0\u003C/strong\u003E, 0.0, 2 this works great (can node attach top and bottom instead of surface attach) with the \u0022original IR Gantry parts\u0022 for version 1.3.1 but if I try it in 1.4.2 with your Gantry parts we go back to exploding craft on launch.\n\u003C/p\u003E\n\u003Cp\u003E\nCheers\n\u003C/p\u003E\n"}]}