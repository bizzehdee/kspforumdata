{"TopicId":24002,"ForumId":36,"TopicTitle":"Computers n\u0026#039; such","CreatedByName":"Gweese_king","CreatedById":59396,"CreatedDateTime":"2013-04-25T07:57:26Z","PageNum":1,"Articles":[{"CreatedByName":"Gweese_king","CreatedById":59396,"CreatedDateTime":"2013-04-25T07:57:26Z","Content":"\n\u003Cp\u003EHello all,\u003C/p\u003E\u003Cp\u003EI am fairly new to the game and forum. It seems like KSP has a great community around it and attracts a lot of good natured folks. Im looking to get into some moding and was wondering if anyone has recommendations on learning how to write code and do computer programming. I live in the States (Maine) and work a schedule that affords me quite a bit of time off (three weeks on three weeks off) in a completely unrelated field to computers. I just built my first computer after a lot of research on parts and it came out great. So iv got this great computer and want to do more with it, but I dont know where to start. So any books, classes, or ideas for learning the computer language would be appreciated. Thanks!\u003C/p\u003E\n"},{"CreatedByName":"joppiesaus","CreatedById":57698,"CreatedDateTime":"2013-04-25T08:26:37Z","Content":"\n\u003Cp\u003EAre you on windows? KSP is written in Unity(Mono), so I reccomend microsoft visual C# express 2010. That\u0027s free and you can make a lot of cool applications. And you learn automaticly Mono, which is equal to C#.\u003C/p\u003E\n"},{"CreatedByName":"Gweese_king","CreatedById":59396,"CreatedDateTime":"2013-04-25T09:29:58Z","Content":"\n\u003Cp\u003EThanks a lot. I will check it out when I get home next week. I am running windows 7 64.\u003C/p\u003E\n"},{"CreatedByName":"ummwut","CreatedById":29846,"CreatedDateTime":"2013-04-25T11:09:39Z","Content":"\n\u003Cp\u003EIf you wanna start at the bottom, learn some assembly: \u003Ca href=\u0022http://www.avr-asm-download.de/beginner_en.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.avr-asm-download.de/beginner_en.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI learned assembly on an 8-bit AVR, and they are easy and cheap machines to code for, and an emulator/assembler (I recommend AVR studio) can be acquired easily. The skills you pick up also scale to other low-level coding, and you\u0027ll be more aware of things like pointers in higher-level coding.\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-04-25T12:25:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022joppiesaus\u0022 data-cite=\u0022joppiesaus\u0022\u003E\u003Cdiv\u003EAre you on windows? KSP is written in Unity(Mono), so I reccomend microsoft visual C# express 2010. That\u0027s free and you can make a lot of cool applications. And you learn automaticly Mono, which is equal to C#.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027ve mixed terms a lot there.\u003C/p\u003E\u003Cp\u003EKSP is built in top of Unity. This means that some of the KSP code is provided by Unity and common with other Unity-based projects (and Squad have used some of the tools provided by Unity to help develop the game). The actual languages KSP is written is are largely C# and C\u002B\u002B (the latter is a guess but very likely).\u003C/p\u003E\u003Cp\u003EComputer code itself consists of 0s and 1s specific to each class of hardware, this is obviously next to impossible to write so most programming language consist of more writeable code that gets converted to this by a compiler (or interpreter). Generally the trade off is between efficiency and productivity/flexibility. \u003C/p\u003E\u003Cp\u003EAssembly language is the lowest level language, exactly the same commands as the actual code but using letters rather than numbers. Used for the most speed critical things but slow to write anything of any size and very hardware specific.\u003C/p\u003E\u003Cp\u003EAt the other end of the spectrum something like Java, Python or C# is much slower performance wise but you can get far more done and it\u0027s can be compiled for different platforms on the fly - so you can write something which can run on both a phone and a PC with no effort on your part.\u003C/p\u003E\u003Cp\u003EWhich to go for depends on why you\u0027re learning programming but the high level end is likely to be easier - there are more people using them and they\u0027re more productive. Personally I\u0027m a fan of Java\u0027s documentation, Python\u0027s seems nice as well but the language didn\u0027t really gel with me.\u003C/p\u003E\u003Cp\u003EBasically my advice would be to find an area you\u0027re interested in and pick the language most other people in that area are using. If it\u0027s KSP plugin writing then C# is probably the best choice. Visual Studio 2010/2012 is OK, I prefer Xamarin Studio myself (formerly Monodevelop) but it\u0027s largely a matter of personal preference. SharpDevelop has it\u0027s followers as well. Try all three.\u003C/p\u003E\u003Cp\u003EMono/.NET (two different implementations of the same standards, they\u0027re essentially interchangeable) are the support structure for C# and other CLI languages (Visual Basic.net, IronPython, Boo etc.). They handle the platform specific changes that allows you to write code that runs on all supported platforms by providing the compilers, libraries etc.\u003C/p\u003E\n"},{"CreatedByName":"jfx","CreatedById":37282,"CreatedDateTime":"2013-04-25T13:27:21Z","Content":"\n\u003Cp\u003EThe chances that you will need asm for commercial software development are close to zero. Even small embedded devices (Stuff like automatic doors, high end fire alarms, cars) are usually programmed in some flavor of c. As a newcomer, who already is in another field: go for java or c#. The bulk of business applications utilizes these (from android apps to business application servers). After you\u0027ve got your feet on the ground branch out to c\u002B\u002B, or look into some of the languages with more abominable syntax/language features (php, javascript) if you are interested in web development.\u003C/p\u003E\u003Cp\u003EO\u0027reilly has a series called \u0022head first\u0022 where topics are covered in a fun, easy to remember approach - if you are a blank slate regarding software development you may profit from that.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-04-25T13:33:21Z\u0022 title=\u002204/25/2013 01:33  PM\u0022 data-short=\u002211 yr\u0022\u003EApril 25, 2013\u003C/time\u003E by jfx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"joppiesaus","CreatedById":57698,"CreatedDateTime":"2013-04-25T16:23:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EndlessWaves\u0022 data-cite=\u0022EndlessWaves\u0022\u003E\u003Cdiv\u003EYou\u0027ve mixed terms a lot there.\u003Cp\u003EKSP is built in top of Unity. This means that some of the KSP code is provided by Unity and common with other Unity-based projects (and Squad have used some of the tools provided by Unity to help develop the game). The actual languages KSP is written is are largely C# and C\u002B\u002B (the latter is a guess but very likely).\u003C/p\u003E\u003Cp\u003EComputer code itself consists of 0s and 1s specific to each class of hardware, this is obviously next to impossible to write so most programming language consist of more writeable code that gets converted to this by a compiler (or interpreter). Generally the trade off is between efficiency and productivity/flexibility. \u003C/p\u003E\u003Cp\u003EAssembly language is the lowest level language, exactly the same commands as the actual code but using letters rather than numbers. Used for the most speed critical things but slow to write anything of any size and very hardware specific.\u003C/p\u003E\u003Cp\u003EAt the other end of the spectrum something like Java, Python or C# is much slower performance wise but you can get far more done and it\u0027s can be compiled for different platforms on the fly - so you can write something which can run on both a phone and a PC with no effort on your part.\u003C/p\u003E\u003Cp\u003EWhich to go for depends on why you\u0027re learning programming but the high level end is likely to be easier - there are more people using them and they\u0027re more productive. Personally I\u0027m a fan of Java\u0027s documentation, Python\u0027s seems nice as well but the language didn\u0027t really gel with me.\u003C/p\u003E\u003Cp\u003EBasically my advice would be to find an area you\u0027re interested in and pick the language most other people in that area are using. If it\u0027s KSP plugin writing then C# is probably the best choice. Visual Studio 2010/2012 is OK, I prefer Xamarin Studio myself (formerly Monodevelop) but it\u0027s largely a matter of personal preference. SharpDevelop has it\u0027s followers as well. Try all three.\u003C/p\u003E\u003Cp\u003EMono/.NET (two different implementations of the same standards, they\u0027re essentially interchangeable) are the support structure for C# and other CLI languages (Visual Basic.net, IronPython, Boo etc.). They handle the platform specific changes that allows you to write code that runs on all supported platforms by providing the compilers, libraries etc.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eyou are right. I just wanted to explain what is good to learn if you want to make plugins fro KSP. I am not someone who code very long, I am just a kid that does C# and javascript for about a year.\u003C/p\u003E\n"},{"CreatedByName":"Liquid","CreatedById":36242,"CreatedDateTime":"2013-04-25T23:28:17Z","Content":"\n\u003Cp\u003EIf you start with the \u0022easy\u0022 languages (Python, Javascript, etc.), every new language will add new and confusing syntax/features and be hard to learn.\u003C/p\u003E\u003Cp\u003EI\u0027d say go and learn C\u002B\u002B first, it\u0027s not exactly rocket science (heh) and once you learn that, most other languages will be a cakewalk as most are pretty much subsets of C\u002B\u002B anyway, usually with simpler syntax. Other advantages are that C\u002B\u002B is extremely efficient (really only beaten by assembly) and works on every OS so you won\u0027t be limiting or locking yourself into a single platform.\u003C/p\u003E\n"},{"CreatedByName":"salsathegeek","CreatedById":8011,"CreatedDateTime":"2013-04-26T20:06:04Z","Content":"\n\u003Cp\u003EStrictly speaking, what EndlessWaves said isn\u0027t quite true. Different chip architectures have different flavors of assembly, and thus binary (what computers actually work with.) The best thing to do is ask how deep you want to go. If you want to get deep, start with C\u002B\u002B or C. Anything you can do in a modern language, you can do in one of those, since most modern languages have C or C\u002B\u002B behind them. You might have to get into the mucky details of the hardware, true, but you can still do most of what a modern language can accomplish. If you want to get really deep, go with assembly. Grab a cheap system on a chip and go to town. This will give you a stark, no sugar coating, picture of what\u0027s going on behind the scenes. Once you can do things like make a counter, something that multiples two numbers, something that adds three numbers, and something that can subtract two numbers, learn C or C\u002B\u002B, then you can mosey on up to Java, C#, and Python, or PHP, Ruby, Perl, and javascript if you want to code for the web. (HTML is NOT a programming language, anyone who tells you otherwise either doesn\u0027t know better, or is just an idiot.)\u003C/p\u003E\u003Cp\u003EIf you really want to get into, ask a CS professor or someone who does programming for a living some good books on coding practices. Languages are good and all, but if you have a firm foundation in best coding and testing practices, then you can code in anything. Speaking of testing, be prepared to do a lot of it.\u003C/p\u003E\u003Cp\u003EOn the other hand, you may like being in the graphics and modeling side. Grab Blender and GIMP. Both are open source and free. Both also have a learning curve that can be frustrating to beginners, but once you get Blender, it\u0027s a joy to model in. If you want to get into digital painting or something along those lines, I highly recommend buying Autodesk\u0027s Sketchbook Pro. It is incredibly nice and once you get used to the interface, it is very nice to use. Photoshop can be intimidating for a beginner, and it\u0027s pricey, even with the subscription, so I\u0027d hold off until you know for sure that this is something you want to do. I\u0027d stay away from most commercial 3-d software for that same reason as well (USD$3000 for 3dsMax, ouch.)\u003C/p\u003E\u003Cp\u003EThe hardest thing about modeling is UV mapping. On simple objects it can be a breeze, but the more complex the object, the harder it gets. The best thing is to start simple, start with a cube or a cylinder and go from there.\u003C/p\u003E\u003Cp\u003EWhat ever route you go I wish you luck. It can be infuriating at times, but when you make something awesome, it\u0027s worth it.\u003C/p\u003E\n"}]}