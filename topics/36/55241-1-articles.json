{"TopicId":55241,"ForumId":36,"TopicTitle":"TutorialOrbit101 source code","CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2013-12-04T23:22:20Z","PageNum":1,"Articles":[{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2013-12-04T23:22:20Z","Content":"\n\u003Cp\u003EHarvesteR has been posting this on the blog when they implemented in-game tutorials. The code must have gone lost with all the forum updates and whatnot, so here\u0027s a copy:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class TutorialOrbit101 : TutorialScenario\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E    Texture2D navBallVectors;\u003Cbr\u003E\u003Cbr\u003E    protected override void OnAssetSetup()\u003Cbr\u003E    {\u003Cbr\u003E        instructorPrefabName = \u0022Instructor_Gene\u0022;\u003Cbr\u003E\u003Cbr\u003E        navBallVectors = AssetBase.GetTexture(\u0022navBall_vectors\u0022);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    TutorialPage welcome, whatsAnOrbit, mapView, attitude1, attitude2, attitude3, navball,\u003Cbr\u003E                 waitForMap1, raiseAp1, waitForPeriapsis1, raiseAp2, raiseAp3a, raiseAp3b, raiseAp4, raiseAp5, raiseAp6,\u003Cbr\u003E                 waitForApoapsis1, raisePe1, raisePe2, raisePe3,\u003Cbr\u003E                 incChange1, incChange2, incChange3,\u003Cbr\u003E                 lowerPe1, lowerPe2, lowerPe3,\u003Cbr\u003E                 conclusion;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    protected override void OnTutorialSetup()\u003Cbr\u003E    {\u003Cbr\u003E        #region welcome\u003Cbr\u003E\u003Cbr\u003E        welcome = new TutorialPage(\u0022welcome\u0022);\u003Cbr\u003E        welcome.windowTitle = \u0022Orbiting 101\u0022;\u003Cbr\u003E        welcome.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.StopRepeatingEmote();\u003Cbr\u003E            InputLockManager.SetControlLock((ControlTypes.STAGING | ControlTypes.THROTTLE), \u0022Orbit101TutorialLock\u0022);\u003Cbr\u003E        };\u003Cbr\u003E        welcome.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Welcome to the Orbiting 101 training program! I\u0027m Wernher von Kerman, and I\u0027m going to teach you the basics of orbiting.\\n\\nI assume you\u0027ve already done the basic flight tutorials, and are now ready to learn how to get around in space. If you haven\u0027t done them, well, I hope you know what you\u0027re doing.\\n\\nLet\u0027s get started.\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Next\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(welcome);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region whatsAnOrbit\u003Cbr\u003E\u003Cbr\u003E        whatsAnOrbit = new TutorialPage(\u0022whatsAnOrbit\u0022);\u003Cbr\u003E        whatsAnOrbit.windowTitle = \u0022Orbiting 101 - Basics\u0022;\u003Cbr\u003E        whatsAnOrbit.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_smileA, 5f);\u003Cbr\u003E        };\u003Cbr\u003E        whatsAnOrbit.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Orbiting is really nothing more than free-falling. The only thing is that as you fall, you\u0027re moving so fast forward, you actually miss the ground. Because up here there is no atmosphere to slow you down, you will continue to free-fall endlessly around the planet, without having to use your engines.\\n\\nWe are currently on a low, almost circular orbit around Kerbin. To get a better view of your situation, press the \u0022 \u002B GameSettings.MAP_VIEW_TOGGLE.name \u002B \u0022 key to go into the Map View.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        whatsAnOrbit.SetAdvanceCondition((KFSMState st) =\u0026gt; { return MapView.MapIsEnabled; });\u003Cbr\u003E        Tutorial.AddPage(whatsAnOrbit);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region MapView\u003Cbr\u003E\u003Cbr\u003E        mapView = new TutorialPage(\u0022mapView\u0022);\u003Cbr\u003E        mapView.windowTitle = \u0022Orbiting 101 - The Map View\u0022;\u003Cbr\u003E        mapView.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_idle_lookAround, 5f);\u003Cbr\u003E        };\u003Cbr\u003E        mapView.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022This is the Map View. Here, you can see your ship\u0027s position and its current trajectory around the planet.\\n\\nUse the mouse to look around, to see your orbit from various angles. Also, hovering over the icons on the map will display more information about them.\\n\\nClose the map when you\u0027re ready (press the \u0022 \u002B GameSettings.MAP_VIEW_TOGGLE.name \u002B \u0022 key again), so we can proceed.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        mapView.SetAdvanceCondition((KFSMState st) =\u0026gt; { return !MapView.MapIsEnabled; });\u003Cbr\u003E        Tutorial.AddPage(mapView);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region attitude1\u003Cbr\u003E\u003Cbr\u003E        attitude1 = new TutorialPage(\u0022attitude1\u0022);\u003Cbr\u003E        attitude1.windowTitle = \u0022Orbiting 101 - Attitude and SAS\u0022;\u003Cbr\u003E        attitude1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_nodB, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        attitude1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Good, let\u0027s get practical now. I trust you already know your basic spacecraft controls... Up here, they\u0027re very much the same, only that the lack of an atmosphere makes the ship behave quite a bit differently. Because there is no drag slowing you down, for every input you apply, you\u0027ll have to apply an opposite one to come to a stop again.\\n\\nI\u0027m going to remotely nudge your attitude controls a little. Try to get the ship back under control afterwards.\\n\\nIf you find yourself totally out of control, hit \u0022 \u002B GameSettings.SAS_TOGGLE.name \u002B \u0022 to toggle the SAS on.\\n\\nAre you ready?\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Ready\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E\u003Cbr\u003E            GUI.enabled = true;\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(attitude1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region attitude2\u003Cbr\u003E\u003Cbr\u003E        attitude2 = new TutorialPage(\u0022attitude2\u0022);\u003Cbr\u003E        attitude2.windowTitle = \u0022Orbiting 101 - Attitude and SAS\u0022;\u003Cbr\u003E        attitude2.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_idle_wonder, 3f);\u003Cbr\u003E\u003Cbr\u003E            nudge = Random.onUnitSphere;\u003Cbr\u003E\u003Cbr\u003E            FlightInputHandler.OnFlyByWire \u002B= remoteNudge;\u003Cbr\u003E        };\u003Cbr\u003E        attitude2.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            if (Tutorial.TimeAtCurrentState \u0026lt; 3f)\u003Cbr\u003E            {\u003Cbr\u003E                GUILayout.Label(\u0022Ok, here we go...\u0022);\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                GUILayout.Label(\u0022There! You\u0027re in control now. Stop rotation using the Pitch, Yaw and Roll controls.\\n\\nI suggest you use the NavBall to orient yourself, instead of looking at the ship. The NavBall isn\u0027t affected by the camera rotation, so it should be easier to get your bearings through it than by looking at the outside.\u0022);\u003Cbr\u003E                GUILayout.Label(\u0022Still Rotating (\u0022 \u002B\u003Cbr\u003E                    (FlightGlobals.ActiveVessel.angularVelocity.magnitude * Mathf.Rad2Deg).ToString(\u00220.0\u0022) \u002B \u0022\u00C3\u201A\u00C2\u00B0/s)...\u0022,\u003Cbr\u003E                         GUI.skin.FindStyle(\u0022Bold Label\u0022));\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        attitude2.OnLeave = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            FlightInputHandler.OnFlyByWire -= remoteNudge;\u003Cbr\u003E        };\u003Cbr\u003E        attitude2.SetAdvanceCondition((KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            return Tutorial.TimeAtCurrentState \u0026gt; 4f \u0026amp;\u0026amp;\u003Cbr\u003E                   FlightGlobals.ActiveVessel.angularVelocity.magnitude \u0026lt; 0.05;\u003Cbr\u003E        });\u003Cbr\u003E        Tutorial.AddPage(attitude2);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region attitude3\u003Cbr\u003E\u003Cbr\u003E        attitude3 = new TutorialPage(\u0022attitude3\u0022);\u003Cbr\u003E        attitude3.windowTitle = \u0022Orbiting 101 - Attitude and SAS\u0022;\u003Cbr\u003E        attitude3.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_thumbsUp, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        attitude3.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Nicely Done!\\n\\nAttitude control is an essential skill for a spacecraft pilot. Master it, and you\u0027ll be well on your way to becoming an expert commander.\\n\\nYou can try this again if you want, or press Next if you\u0027re ready to move on.\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Try that again!\u0022)) Tutorial.GoToLastPage();\u003Cbr\u003E            if (GUILayout.Button(\u0022Ready\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E\u003Cbr\u003E            GUI.enabled = true;\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(attitude3);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region navBall\u003Cbr\u003E\u003Cbr\u003E        navball = new TutorialPage(\u0022navball\u0022);\u003Cbr\u003E        navball.windowTitle = \u0022Orbiting 101 - The NavBall\u0022;\u003Cbr\u003E        navball.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.StopRepeatingEmote();\u003Cbr\u003E        };\u003Cbr\u003E        navball.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, now let\u0027s have a look at the NavBall. You\u0027ve probably seen the symbols on it when you were spinning around.\\n\\n Here\u0027s what they mean:\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUI.color = XKCDColors.ElectricLime;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r1 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r1, navBallVectors, new Rect(0f, 0.5f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E            GUILayout.Label(\u0022Prograde Vector: It points towards your velocity vector. That is, it points to where you\u0027re going.\u0022);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUI.color = XKCDColors.ElectricLime;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r2 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r2, navBallVectors, new Rect(0.5f, 0.5f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E            GUILayout.Label(\u0022Retrograde Vector: It points directly away from your velocity.\u0022);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUI.color = Color.magenta;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r3 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r3, navBallVectors, new Rect(0f, 0f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E            GUILayout.Label(\u0022Prograde Waypoint Vector: It points towards your current Waypoint.\u0022);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUI.color = Color.magenta;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r4 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r4, navBallVectors, new Rect(0.5f, 0f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E            GUILayout.Label(\u0022Retrograde Waypoint Vector: It points directly away from your current Waypoint.\u0022);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Next\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(navball);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region waitForMap1\u003Cbr\u003E\u003Cbr\u003E        waitForMap1 = new TutorialPage(\u0022waitForMap1\u0022);\u003Cbr\u003E        waitForMap1.windowTitle = \u0022Orbiting 101\u0022;\u003Cbr\u003E        waitForMap1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_idle_sigh, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        waitForMap1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok!\\n\\nNow, let\u0027s try something a little more involved. Open your map again.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        waitForMap1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return MapView.MapIsEnabled; });\u003Cbr\u003E        Tutorial.AddPage(waitForMap1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp1\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        raiseAp1 = new TutorialPage(\u0022raiseAp\u0022);\u003Cbr\u003E        raiseAp1.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_nodA, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022What we want to do now is go through some of the basic maneuvers you\u0027ll need to know. Let\u0027s try raising your Apoapsis first.\\n\\nThe Apoapsis is the highest point in an orbit, and it\u0027s indicated by the node marked [Ap].\\n\\nThe best place to raise your apoapsis is at the Periapsis [Pe] node, which is the lowest point of your orbit. If you hover the mouse over Periapsis node, you\u0027ll see that we\u0027ll reach it node in a few minutes. Once there, we will face prograde and burn.\\n\\nPress \u0022 \u002B GameSettings.TIME_WARP_INCREASE.name \u002B \u0022 to speed up time a little, so we can get there faster.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return TimeWarp.CurrentRate \u0026gt; 1f; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region waitForPeriapsis1\u003Cbr\u003E\u003Cbr\u003E        waitForPeriapsis1 = new TutorialPage(\u0022waitForPeriapsis\u0022);\u003Cbr\u003E        waitForPeriapsis1.windowTitle = \u0022Orbiting 101 - Time Warp\u0022;\u003Cbr\u003E        waitForPeriapsis1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            TimeWarp.SetRate(1, false);\u003Cbr\u003E        };\u003Cbr\u003E        waitForPeriapsis1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, time is now passing \u0022 \u002B TimeWarp.CurrentRate.ToString(\u00220\u0022) \u002B \u0022 times faster than normal, we should be there in a few moments.\\n\\nYou can control time warp with the \u0022 \u002B GameSettings.TIME_WARP_INCREASE.name \u002B \u0022 and \u0022 \u002B GameSettings.TIME_WARP_DECREASE.name \u002B \u0022 keys, or click the arrows on the panel on the top left of the screen.\\n\\nThis time, I\u0027ll put us back to normal time just before we reach periapsis.\\n\\nOut of training though, you\u0027ll have to warp time down to 1x yourself, so don\u0027t go too fast or you might miss your mark.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        waitForPeriapsis1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.timeToPe \u0026lt; 60.0; });\u003Cbr\u003E        waitForPeriapsis1.onAdvanceConditionMet.OnEvent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            TimeWarp.SetRate(0, true);\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(waitForPeriapsis1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAP2\u003Cbr\u003E\u003Cbr\u003E        raiseAp2 = new TutorialPage(\u0022raiseAp3\u0022);\u003Cbr\u003E        raiseAp2.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp2.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_idle_sigh, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp2.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, we are a few seconds away from Periapsis now. Time to turn prograde and do our burn.\\n\\nHowever, instead of closing the map, let\u0027s just bring up the NavBall here, so we can see what\u0027s happening to our orbit as we accelerate.\\n\\nTo bring up the NavBall on the Map, click the little tab on the bottom-center of the screen, or press the Numpad Period key.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp2.SetAdvanceCondition((KFSMState st) =\u0026gt; { return MapView.ManeuverModeActive; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp2);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp3\u003Cbr\u003E\u003Cbr\u003E        raiseAp3a = new TutorialPage(\u0022raiseAp3\u0022);\u003Cbr\u003E        raiseAp3a.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp3a.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_nodA, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp3a.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Good. Time to do our burn. Turn the ship to face the Prograde Vector now.\\n\\nTurn SAS on if you need help maintaining stability.\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Remember, the prograde vector looks like this:\u0022);\u003Cbr\u003E            GUI.color = XKCDColors.ElectricLime;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r2 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r2, navBallVectors, new Rect(0.0f, 0.5f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E            GUILayout.Label(\u0022Make sure the ship is pointing towards it before accelerating.\u0022);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp3a.SetAdvanceCondition((KFSMState st) =\u0026gt; { return Mathf.Acos(Vector3.Dot(FlightGlobals.ActiveVessel.transform.up, FlightGlobals.ActiveVessel.obt_velocity.normalized)) * Mathf.Rad2Deg \u0026lt; 5f; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp3a);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp3b\u003Cbr\u003E\u003Cbr\u003E        raiseAp3b = new TutorialPage(\u0022raiseAp3b\u0022);\u003Cbr\u003E        raiseAp3b.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp3b.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_nodA, 0f);\u003Cbr\u003E\u003Cbr\u003E            FlightInputHandler.state.killRot = true;\u003Cbr\u003E            InputLockManager.SetControlLock(ControlTypes.STAGING, \u0022Orbit101TutorialLock\u0022);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp3b.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, we are now turned prograde. I\u0027ve engaged SAS for you to keep her steady. Go ahead and throttle up now.\u0022);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp3b.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightInputHandler.state.mainThrottle \u0026gt; 0.0f; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp3b);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp4\u003Cbr\u003E\u003Cbr\u003E        raiseAp4 = new TutorialPage(\u0022raiseAp4\u0022);\u003Cbr\u003E        raiseAp4.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp4.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp4.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Notice how the opposite side of your orbit starts to rise as you accelerate.\\n\\nKeep thrusting prograde until your apoapsis altitude reaches about 800,000m.\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Apoapsis Altitude: \u0022 \u002B FlightGlobals.ActiveVessel.orbit.ApA.ToString(\u0022N0\u0022) \u002B \u0022m\u0022, GUI.skin.FindStyle(\u0022Bold Label\u0022));\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp4.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.ApA \u0026gt;= 800000.0; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp4);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp5\u003Cbr\u003E\u003Cbr\u003E        raiseAp5 = new TutorialPage(\u0022raiseAp5\u0022);\u003Cbr\u003E        raiseAp5.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp5.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_thumbUp, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp5.OnUpdate = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            if (Tutorial.TimeAtCurrentState \u0026gt; 6f \u0026amp;\u0026amp; FlightInputHandler.state.mainThrottle != 0f)\u003Cbr\u003E            {\u003Cbr\u003E                FlightInputHandler.SetNeutralControls();\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp5.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, cut the throttle now!\\n\\nHold \u0022 \u002B GameSettings.THROTTLE_DOWN.name \u002B \u0022 or hit \u0022 \u002B GameSettings.THROTTLE_CUTOFF.name \u002B \u0022 to cut throttle immediately.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp5.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightInputHandler.state.mainThrottle == 0.0f; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp5);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raiseAp6\u003Cbr\u003E\u003Cbr\u003E        raiseAp6 = new TutorialPage(\u0022raiseAp6\u0022);\u003Cbr\u003E        raiseAp6.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        raiseAp6.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_thumbsUp, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp6.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Well Done!\\n\\nThis is how you raise your Apoapsis node.\\n\\nWith orbital maneuvers, pretty much everything you do will affect the opposite side of your orbit. So to raise the highest point (Apoapsis), you thrust forward (or prograde) at the lowest point (Periapsis). Similarly, to raise your Periapsis, you thrust prograde at Apoapsis. We\u0027re on our way to the Apoapsis now, so let\u0027s do just that.\\n\\nPress Next when ready, and I\u0027ll warp time to get us there quickly.\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Next\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E        };\u003Cbr\u003E        raiseAp6.SetAdvanceCondition((KFSMState st) =\u0026gt; { return TimeWarp.CurrentRate \u0026gt; 1f; });\u003Cbr\u003E        Tutorial.AddPage(raiseAp6);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region waitForApoapsis1\u003Cbr\u003E\u003Cbr\u003E        waitForApoapsis1 = new TutorialPage(\u0022waitForApoapsis1\u0022);\u003Cbr\u003E        waitForApoapsis1.windowTitle = \u0022Orbiting 101 - Essential Maneuvers\u0022;\u003Cbr\u003E        waitForApoapsis1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            TimeWarp.SetRate(3, false);\u003Cbr\u003E            instructor.PlayEmoteRepeating(instructor.anim_true_nodB, 0f);\u003Cbr\u003E        };\u003Cbr\u003E        waitForApoapsis1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, we\u0027re on our way to the Apoapsis node now. Notice how your ship loses speed as we rise. That\u0027s because we\u0027re climbing away from the planet, so we lose speed as we go higher, just as you would if you were climbing a hill back here on Kerbin.\\n\\nThe higher you are, the slower your orbit will be. Notice how the Mun\u0027s orbital speed is around 540m/s, while yours is far higher.\\n\\nWhen we reach Apoapsis, we will burn prograde again, to raise the Periapsis node and circularize our orbit.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        waitForPeriapsis1.OnFixedUpdate = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            if (FlightGlobals.ActiveVessel.orbit.timeToAp \u0026lt; 180f \u0026amp;\u0026amp; TimeWarp.CurrentRateIndex \u0026gt;= 3)\u003Cbr\u003E            {\u003Cbr\u003E                TimeWarp.SetRate(2, false);\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        waitForApoapsis1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.timeToAp \u0026lt; 60f; });\u003Cbr\u003E        waitForApoapsis1.onAdvanceConditionMet.OnEvent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            TimeWarp.SetRate(0, true);\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(waitForApoapsis1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raisePe1\u003Cbr\u003E\u003Cbr\u003E        raisePe1 = new TutorialPage(\u0022raisePe1\u0022);\u003Cbr\u003E        raisePe1.windowTitle = \u0022Orbiting 101 - Raise Periapsis\u0022;\u003Cbr\u003E        raisePe1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raisePe1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Ok, Here we are... Same as before, turn prograde and fire up those engines, and watch the Periapsis rise.\\n\\nMind that we are probably turned the other way right now, so the Prograde Vector might not be visible.\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Prograde Vector:\u0022);\u003Cbr\u003E            GUI.color = XKCDColors.ElectricLime;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r2 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r2, navBallVectors, new Rect(0.0f, 0.5f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E\u003Cbr\u003E            GUI.enabled = true;\u003Cbr\u003E        };\u003Cbr\u003E        raisePe1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightInputHandler.state.mainThrottle \u0026gt; 0.0f; });\u003Cbr\u003E        Tutorial.AddPage(raisePe1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raisePe2\u003Cbr\u003E\u003Cbr\u003E        raisePe2 = new TutorialPage(\u0022raisePe2\u0022);\u003Cbr\u003E        raisePe2.windowTitle = \u0022Orbiting 101 - Raise Periapsis\u0022;\u003Cbr\u003E        raisePe2.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raisePe2.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Keep burning prograde until the orbit is nearly circular...\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Periapsis Altitude: \u0022 \u002B FlightGlobals.ActiveVessel.orbit.PeA.ToString(\u0022N0\u0022) \u002B \u0022m\\n\\nEccentricity: \u0022 \u002B FlightGlobals.ActiveVessel.orbit.eccentricity.ToString(\u00220.000\u0022), GUI.skin.FindStyle(\u0022Bold Label\u0022));\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        raisePe2.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.PeA \u0026gt;= 750000.0; });\u003Cbr\u003E        Tutorial.AddPage(raisePe2);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region raisePe3\u003Cbr\u003E\u003Cbr\u003E        raisePe3 = new TutorialPage(\u0022raisePe3\u0022);\u003Cbr\u003E        raisePe3.windowTitle = \u0022Orbiting 101 - Raise Periapsis\u0022;\u003Cbr\u003E        raisePe3.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_true_thumbUp);\u003Cbr\u003E        };\u003Cbr\u003E        raisePe3.OnUpdate = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            if (Tutorial.TimeAtCurrentState \u0026gt; 5f \u0026amp;\u0026amp; FlightInputHandler.state.mainThrottle != 0f)\u003Cbr\u003E            {\u003Cbr\u003E                FlightInputHandler.SetNeutralControls();\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        raisePe3.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Nicely done!\\n\\nThis is how you change the size of your orbit. This maneuver should come in handy on many situations.\\n\\nNext, we\u0027ll look into changing your orbital inclination.\\n\\nPress Next when ready to proceed.\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Next\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(raisePe3);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region incChange1\u003Cbr\u003E\u003Cbr\u003E        incChange1 = new TutorialPage(\u0022incChange1\u0022);\u003Cbr\u003E        incChange1.windowTitle = \u0022Orbiting 101 - Inclination\u0022;\u003Cbr\u003E        incChange1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_idle_sigh);\u003Cbr\u003E        };\u003Cbr\u003E        incChange1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Your orbital inclination is the angle your orbit makes to Kerbin\u0027s Equator. If you\u0027ve managed to maintain a reasonable amount of control this far, we should still be in a nearly 0\u00C3\u201A\u00C2\u00B0 inclination orbit. That is, even though we\u0027ve changed the altitude of our orbit, it still has the same inclination as before.\\n\\nChanging inclination is done by thrusting in 90\u00C3\u201A\u00C2\u00B0 angles to your prograde vector, but without changing your pitch relative to the surface.\\n\\nOn our present, nearly equatorial orbit, prograde is due east. That means to increase our inclination, so that our orbit takes us into higher latitudes, we have to burn towards the North.\\n\\nLet\u0027s try that now: Turn the ship to heading 360\u00C3\u201A\u00C2\u00B0 and open the throttle.\u0022);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        incChange1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightInputHandler.state.mainThrottle \u0026gt; 0f; });\u003Cbr\u003E        Tutorial.AddPage(incChange1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region incChange2\u003Cbr\u003E\u003Cbr\u003E        incChange2 = new TutorialPage(\u0022incChange2\u0022);\u003Cbr\u003E        incChange2.windowTitle = \u0022Orbiting 101 - Inclination\u0022;\u003Cbr\u003E        incChange2.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_idle_sigh);\u003Cbr\u003E        };\u003Cbr\u003E        incChange2.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Notice how as you burn North, your orbit starts to tilt up, but the Periapsis and Apoapsis nodes remain mostly the same.\\n\\nThat is because we are accelerating on a completely new direction, so this maneuver doesn\u0027t add or take away any energy from the orbit.\\n\\nKeep accelerating North until your inclination is about 10\u00C3\u201A\u00C2\u00B0.\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Orbit Inclination: \u0022 \u002B FlightGlobals.ActiveVessel.orbit.inclination.ToString(\u00220.0\u0022) \u002B \u0022\u00C3\u201A\u00C2\u00B0\u0022, GUI.skin.FindStyle(\u0022Bold Label\u0022));\u003Cbr\u003E        };\u003Cbr\u003E        incChange2.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.inclination \u0026gt;= 10.0; });\u003Cbr\u003E        Tutorial.AddPage(incChange2);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region incChange3\u003Cbr\u003E\u003Cbr\u003E        incChange3 = new TutorialPage(\u0022incChange3\u0022);\u003Cbr\u003E        incChange3.windowTitle = \u0022Orbiting 101 - Inclination\u0022;\u003Cbr\u003E        incChange3.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_idle_sigh);\u003Cbr\u003E        };\u003Cbr\u003E        incChange3.OnUpdate = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            if (Tutorial.TimeAtCurrentState \u0026gt; 5f \u0026amp;\u0026amp; FlightInputHandler.state.mainThrottle != 0f)\u003Cbr\u003E            {\u003Cbr\u003E                FlightInputHandler.SetNeutralControls();\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        incChange3.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Good! This is how you change your orbital inclination.\\n\\nFor these maneuvers, it\u0027s always better to do it in the slowest parts of the orbit, so you don\u0027t have to spend as much delta-V to turn your orbit around. That also means inclination changes on larger orbits, such as we are on now, take less fuel than the same inclination change on a lower one.\\n\\nAlso, keep in mind that changing inclination doesn\u0027t necessarily mean accelerating to the north or south. It means accelerating on 90\u00C3\u201A\u00C2\u00B0 headings to your prograde vector, which on our nearly equatorial orbit, also happened to be towards the north.\\n\\nNext, let\u0027s look into the last essential maneuver you\u0027ll need to learn: Lowering our orbit.\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Proceed\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(incChange3);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region lowerPe1\u003Cbr\u003E\u003Cbr\u003E        lowerPe1 = new TutorialPage(\u0022lowerPe1\u0022);\u003Cbr\u003E        lowerPe1.windowTitle = \u0022Orbiting 101 - Lower Periapsis\u0022;\u003Cbr\u003E        lowerPe1.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        lowerPe1.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022As you can imagine, lowering your orbit\u0027s altitude is very much like raising it, only in reverse.\\n\\nBecause there\u0027s no air up here, we can use our main engines to decelerate as well as accelerate, because nothing says we have to be facing some direction or another.\\n\\nAlso, since our orbit is nearly circular, we can just turn retrograde and do our burn at any time now, so let\u0027s get to it.\\n\\nTurn towards the Retrograde Vector and start those engines up again.\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Retrograde Vector:\u0022);\u003Cbr\u003E            GUI.color = XKCDColors.ElectricLime;\u003Cbr\u003E            GUILayout.Label(\u0022\u0022, GUILayout.Width(32f), GUILayout.Height(32f));\u003Cbr\u003E            Rect r2 = GUILayoutUtility.GetLastRect();\u003Cbr\u003E            GUI.DrawTextureWithTexCoords(r2, navBallVectors, new Rect(0.5f, 0.5f, 0.5f, 0.5f));\u003Cbr\u003E            GUI.color = Color.white;\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        lowerPe1.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightInputHandler.state.mainThrottle \u0026gt; 0.0f; });\u003Cbr\u003E        Tutorial.AddPage(lowerPe1);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region lowerPe2\u003Cbr\u003E\u003Cbr\u003E        lowerPe2 = new TutorialPage(\u0022lowerPe2\u0022);\u003Cbr\u003E        lowerPe2.windowTitle = \u0022Orbiting 101 - Lower Periapsis\u0022;\u003Cbr\u003E        lowerPe2.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        lowerPe2.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022Keep burning retrograde until the Periapsis altitude is around 30,000m.\\n\\nTry getting it as close as possible this time. If you overshoot and get it too low, turn prograde and accelerate again.\u0022);\u003Cbr\u003E\u003Cbr\u003E            GUILayout.Label(\u0022Periapsis Altitude: \u0022 \u002B FlightGlobals.ActiveVessel.orbit.PeA.ToString(\u0022N0\u0022) \u002B \u0022m\u0022, GUI.skin.FindStyle(\u0022Bold Label\u0022));\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        lowerPe2.SetAdvanceCondition((KFSMState st) =\u0026gt; { return FlightGlobals.ActiveVessel.orbit.PeA \u0026lt;= 30000.0; });\u003Cbr\u003E        Tutorial.AddPage(lowerPe2);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region lowerPe3\u003Cbr\u003E\u003Cbr\u003E        lowerPe3 = new TutorialPage(\u0022lowerPe3\u0022);\u003Cbr\u003E        lowerPe3.windowTitle = \u0022Orbiting 101 - Lower Periapsis\u0022;\u003Cbr\u003E        lowerPe3.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_true_thumbUp);\u003Cbr\u003E        };\u003Cbr\u003E        lowerPe3.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022That\u0027s it! You\u0027re now on your way back.\\n\\n30,000m is low enough to be in the atmosphere, so you are now on a re-entry course to Kerbin. Once we\u0027re below 60,000m, the atmosphere will start slowing the ship down, so that it won\u0027t have enough velocity to rise back up again. \u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Next\u0022)) Tutorial.GoToNextPage();\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(lowerPe3);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E        #region conclusion\u003Cbr\u003E\u003Cbr\u003E        conclusion = new TutorialPage(\u0022conclusion\u0022);\u003Cbr\u003E        conclusion.windowTitle = \u0022Orbiting 101 - Complete!\u0022;\u003Cbr\u003E        conclusion.OnEnter = (KFSMState st) =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            instructor.PlayEmote(instructor.anim_true_smileB);\u003Cbr\u003E\u003Cbr\u003E        };\u003Cbr\u003E        conclusion.OnDrawContent = () =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.Label(\u0022This is the end of our lesson now. You can continue doing maneuvers on your own, or wait for periapsis and do a reentry and land. Don\u0027t forget to decouple the capsule and deploy the parachutes.\\n\\nSee you on the ground!\u0022);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (GUILayout.Button(\u0022Finish\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                Destroy(this);\u003Cbr\u003E            }\u003Cbr\u003E        };\u003Cbr\u003E        Tutorial.AddPage(conclusion);\u003Cbr\u003E\u003Cbr\u003E        #endregion\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        Tutorial.StartTutorial(welcome);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    void OnDestroy()\u003Cbr\u003E    {\u003Cbr\u003E        InputLockManager.RemoveControlLock(\u0022Orbit101TutorialLock\u0022);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    Vector3 nudge = Vector3.zero;\u003Cbr\u003E    void remoteNudge(FlightCtrlState fcst)\u003Cbr\u003E    {\u003Cbr\u003E        if (Tutorial.TimeAtCurrentState \u0026lt; 3f)\u003Cbr\u003E        {\u003Cbr\u003E            FlightInputHandler.state.pitch = nudge.x;\u003Cbr\u003E            FlightInputHandler.state.yaw = nudge.y;\u003Cbr\u003E            FlightInputHandler.state.roll = nudge.z;\u003Cbr\u003E            FlightGlobals.ActiveVessel.FeedInputFeed(FlightInputHandler.state);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Specialist290","CreatedById":58489,"CreatedDateTime":"2013-12-05T01:01:25Z","Content":"\n\u003Cp\u003ELocked at user\u0027s request.\u003C/p\u003E\n"}]}