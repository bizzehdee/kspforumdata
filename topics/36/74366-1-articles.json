{"TopicId":74366,"ForumId":36,"TopicTitle":"Protip for new modders - C# isn\u0026#039;t the only language you can use!","CreatedByName":"longbyte1","CreatedById":17521,"CreatedDateTime":"2014-06-07T02:42:47Z","PageNum":1,"Articles":[{"CreatedByName":"longbyte1","CreatedById":17521,"CreatedDateTime":"2014-06-07T02:42:47Z","Content":"\n\u003Cp\u003EI\u0027d just like to tell any new modders that C# isn\u0027t your only choice. Although it is indeed a powerful language that is familiar to Java veterans, you may have had a background with another family or group of languages. Some may look simpler or prettier for you. \u003Cstrong\u003EBasically any language that conforms to CLI specifications can be used to make KSP mods\u003C/strong\u003E, as long as a toolchain exists that can be configured correctly to work with Unity\u0027s .NET/Mono environment. To show what each language looks like, I\u0027ve posted a translated version of my very simple mod, [thread=81957]FloorIt[/thread]. I cannot guarantee that the examples will work.\u003C/p\u003E\u003Cp\u003EHere is a list of commonly used CLI languages that may be of interest to you:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EBoo \u003C/strong\u003E- Very similar to Python in syntax, but it\u0027s more focused towards .NET and C#-like typing. If you\u0027re familiar with Python, I recommend you use this language. SharpDevelop supports this language. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E[COLOR=#008000][B]namespace[/B][/COLOR] FloorIt\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E[COLOR=#008000][B]import[/B][/COLOR] System\u003Cbr\u003E[COLOR=#008000][B]import[/B][/COLOR] UnityEngine\u003Cbr\u003E[COLOR=#008000][B]import[/B][/COLOR] KSP\u003Cbr\u003E\u003Cbr\u003E[[COLOR=#191970]KSPAddon[/COLOR](KSPAddon.Startup.Flight, [COLOR=#000000][B]false[/B][/COLOR])]\u003Cbr\u003E[COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#0000ff][B]class[/B][/COLOR] [COLOR=#191970]FloorIt[/COLOR](MonoBehaviour):\u003Cbr\u003E\u003Cbr\u003E [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#0000ff][B]def[/B][/COLOR] [COLOR=#191970]Start[/COLOR]():\u003Cbr\u003E [COLOR=#800080]print[/COLOR]([COLOR=#0000ff]\u0027FloorIt enabled.\\nPress Z to turn the throttle up to 100%.\u0027[/COLOR])\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E [COLOR=#0000ff][B]private[/B][/COLOR] [COLOR=#0000ff][B]def[/B][/COLOR] [COLOR=#191970]Update[/COLOR]():\u003Cbr\u003E [COLOR=#0000ff][B]if[/B][/COLOR] Input.[COLOR=#191970]GetKeyDown[/COLOR](KeyCode.Z):\u003Cbr\u003E FlightInputHandler.state.mainThrottle = [COLOR=#00008b]1[/COLOR]\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EVisual Basic \u003C/strong\u003E- Supported by Microsoft, this language has a very strong/mature community. Very few special characters are used. This was actually the first programming language that I used. If you aren\u0027t really that into programming, I suggest you play around with VB before you delve into a more complex language like C#. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E[COLOR=#0000ff]Imports[/COLOR] UnityEngine\u003Cbr\u003E[COLOR=#0000ff]Imports[/COLOR] KSP\u003Cbr\u003E\u003Cbr\u003E[COLOR=#0000ff]Namespace[/COLOR] FloorIt\u003Cbr\u003E\u003Cbr\u003E \u0026lt;KSPAddon(KSPAddon.Startup.Flight, [COLOR=#0000ff]False[/COLOR])\u0026gt; _\u003Cbr\u003E [COLOR=#0000ff]Public[/COLOR] [COLOR=#0000ff]Class[/COLOR] FloorIt\u003Cbr\u003E [COLOR=#0000ff]Inherits[/COLOR] MonoBehaviour\u003Cbr\u003E [COLOR=#0000ff]Public[/COLOR] [COLOR=#0000ff]Sub[/COLOR] Start()\u003Cbr\u003E print(\u0022FloorIt enabled.\u0022 \u0026amp; vbLf \u0026amp; \u0022Press Z to turn the throttle up to 100%.\u0022)\u003Cbr\u003E [COLOR=#0000ff]End[/COLOR] [COLOR=#0000ff]Sub[/COLOR]\u003Cbr\u003E\u003Cbr\u003E [COLOR=#0000ff]Private[/COLOR] [COLOR=#0000ff]Sub[/COLOR] Update()\u003Cbr\u003E [COLOR=#0000ff]If[/COLOR] Input.GetKeyDown(KeyCode.Z) [COLOR=#0000ff]Then[/COLOR]\u003Cbr\u003E FlightInputHandler.state.mainThrottle = 1\u003Cbr\u003E [COLOR=#0000ff]End[/COLOR] [COLOR=#0000ff]If[/COLOR]\u003Cbr\u003E [COLOR=#0000ff]End[/COLOR] [COLOR=#0000ff]Sub[/COLOR]\u003Cbr\u003E\u003Cbr\u003E [COLOR=#0000ff]End[/COLOR] [COLOR=#0000ff]Class[/COLOR]\u003Cbr\u003E[COLOR=#0000ff]End[/COLOR] [COLOR=#0000ff]Namespace[/COLOR]\u003Cbr\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=#0000ff]Imports[/COLOR] System\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EIronPython \u003C/strong\u003E- Unlike Boo, IronPython is more faithful to Python in its weak typing. Unless you really really \u003Cem\u003Ereally \u003C/em\u003Ewant to keep Python\u0027s good old syntax and compatibility with your existing Python code, just use Boo. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EC\u002B\u002B/CLI \u003C/strong\u003E- This is the most powerful language and perhaps fastest of all CLI languages. This is not for the faint of heart. C\u002B\u002B veterans may find the syntax familiar, but additional reading is \u003Cem\u003Emandatory\u003C/em\u003E. I have never used C\u002B\u002B/CLI, and I don\u0027t know if anyone\u0027s successfully made a Unity plugin with it. But if you manage to, you could get some performance boosts. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EC#\u003C/strong\u003E - As said before, it\u0027s like Java and C\u002B\u002B combined. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003ENative\u003C/strong\u003E - You can create a native DLL file and interface it with C# using P/Invoke. This will only work with a single platform, but it will give you a significant performance boost if made correctly. I have never done this before, nor have I seen anyone do it apart from documentation and tutorials. Maybe the next FAR will do this, who knows?\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E\u003Cstrong\u003EUnityScript \u003C/strong\u003E- Similar syntax to JavaScript, but it is more object-oriented. Use MonoDevelop as an IDE if you want to compile to a DLL. C# is \u003Ca href=\u0022http://dentedpixel.com/developer-diary/c-vs-unityscript-which-is-faster/\u0022 rel=\u0022external nofollow\u0022\u003Eslightly faster\u003C/a\u003E than UnityScript, though. \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m surprised that these really are the only popular languages, I thought there were more. But anyway, that is the end of my PSA.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-07T17:29:55Z\u0022 title=\u002206/07/2014 05:29  PM\u0022 data-short=\u002210 yr\u0022\u003EJune 7, 2014\u003C/time\u003E by longbyte1\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JewelShisen","CreatedById":71737,"CreatedDateTime":"2014-06-07T03:55:44Z","Content":"\n\u003Cp\u003EDo you know if Lua would work?\u003C/p\u003E\n"},{"CreatedByName":"avivey","CreatedById":98217,"CreatedDateTime":"2014-06-07T04:50:49Z","Content":"\n\u003Cp\u003EI could only find lua interpreters that are embedded in .net; Not good for performance \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003EI could also find no compiler to any language that isn\u0027t statically typed, so I don\u0027t think vanilla lua (or anything) can be found.\u003C/p\u003E\u003Cp\u003EIronPython requires DLR, that I think isn\u0027t supported with Unity.\u003C/p\u003E\n"},{"CreatedByName":"Glyph","CreatedById":107405,"CreatedDateTime":"2014-06-07T13:42:10Z","Content":"\n\u003Cp\u003EIs it possible to use straight up Java (without using J#)? IKVM.NET would probably work but I wonder what the performance cost is? I think IKVM basically has a java runtime inside the .net runtime.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-06-07T13:55:11Z","Content":"\n\u003Cp\u003E\u003Cem\u003EWrites a list of Languages to code Unity mods with but doesn\u0027t mention \u003C/em\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/61494-Writing-Plugins-in-UnityScript\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cem\u003EUnityScript\u003C/em\u003E\u003C/a\u003E\u003Cem\u003E.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EBut yes, C# is the popular language for KSP modding and rightfully so, imho.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022longbyte1\u0022 data-cite=\u0022longbyte1\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003EC\u002B\u002B/CLI \u003C/strong\u003E- This is the most powerful language and perhaps fastest of all CLI languages.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat makes you think it is so much faster? It makes interop with native code very easy and \u0022direct\u0022, but otherwise the generated IL is pretty much the same as C# (At least telling from the disassembly of my mod). But using native stuff seems to also give you the same platform dependency drawback as using pure native code.\u003C/p\u003E\u003Cp\u003EAlso why those focus on performance? 90% of all mods don\u0027t care about perf anyway (kinda the opposite. Had quite a few cases of infinite exception spams, what regularly freezes the game for a few ms to write the log to the disk). And even if they do, they usually should identify that bottleneck and replace it with better scaling code. If someone wants to start a new mod, choose a language you are familiar with and can get help. That\u0027s usually C#.\u003C/p\u003E\n"},{"CreatedByName":"philotical","CreatedById":109390,"CreatedDateTime":"2014-06-07T14:25:43Z","Content":"\n\u003Cp\u003Eafaik JavaScript can be compiled as well..\u003C/p\u003E\u003Cp\u003EUnity definately is compatible.. many JS examples are online..\u003C/p\u003E\n"},{"CreatedByName":"RockoDyne","CreatedById":106891,"CreatedDateTime":"2014-06-07T15:34:37Z","Content":"\n\u003Cp\u003EOh boy, where to start.\u003C/p\u003E\u003Cp\u003ECaveat #1. If you are not using C#, Boo, or unityscript (and compiling using unity/mono), you will have to use visual studio or whatever other compiler you use. As far as I am aware, cross compatibility can and probably will be an issue as most of those dlls won\u0027t be using the mono CLR.\u003C/p\u003E\u003Cp\u003ECaveat #2. Only scripts compiled by unity can be monobehaviors, so no attaching a script to a gameobject without it being either C#, Boo, or US (this may only be in editor, but I\u0027m pretty sure it can\u0027t be done period).\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-06-07T15:54:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022RockoDyne\u0022 data-cite=\u0022RockoDyne\u0022\u003E\u003Cdiv\u003EOh boy, where to start.\u003Cp\u003ECaveat #1. If you are not using C#, Boo, or unityscript (and compiling using unity/mono), you will have to use visual studio or whatever other compiler you use. As far as I am aware, cross compatibility can and probably will be an issue as most of those dlls won\u0027t be using the mono CLR.\u003C/p\u003E\u003Cp\u003ECaveat #2. Only scripts compiled by unity can be monobehaviors, so no attaching a script to a gameobject without it being either C#, Boo, or US (this may only be in editor, but I\u0027m pretty sure it can\u0027t be done period).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBoth isn\u0027t correct. Mono is mostly compatible with .NET bytecode (since thats what it was supposed to be). The problem is that Unity uses a very outdated cut down version of the .NET class library. Yes you have to use .net 3.5, can\u0027t use a few types and should probably use an external tool to target a unity framework.\u003C/p\u003E\u003Cp\u003ESame for #2... you only need the correct references. And any reasonable KSP mod will include references to unityengine and ksp\u0027s Assembly-CSharp, so not a problem at all.\u003C/p\u003E\u003Cp\u003E@philotical: That\u0027s not real JS but their UnityScript.\u003C/p\u003E\n"},{"CreatedByName":"longbyte1","CreatedById":17521,"CreatedDateTime":"2014-06-07T17:36:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhat makes you think it is so much faster? It makes interop with native code very easy and \u0022direct\u0022, but otherwise the generated IL is pretty much the same as C# (At least telling from the disassembly of my mod). But using native stuff seems to also give you the same platform dependency drawback as using pure native code.\u003C/p\u003E\u003Cp\u003EAlso why those focus on performance? 90% of all mods don\u0027t care about perf anyway (kinda the opposite. Had quite a few cases of infinite exception spams, what regularly freezes the game for a few ms to write the log to the disk). And even if they do, they usually should identify that bottleneck and replace it with better scaling code. If someone wants to start a new mod, choose a language you are familiar with and can get help. That\u0027s usually C#.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHypothetically speaking, C\u002B\u002B/CLI, if used correctly, is more flexible in memory management. Sure, you can use the garbage collector, but you don\u0027t have to. But you are correct; usually, performance doesn\u0027t matter. Still, mods like FAR need as much performance as possible to keep framerates up.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-06-07T22:33:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022longbyte1\u0022 data-cite=\u0022longbyte1\u0022\u003E\u003Cdiv\u003EHypothetically speaking, C\u002B\u002B/CLI, if used correctly, is more flexible in memory management. Sure, you can use the garbage collector, but you don\u0027t have to.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt isn\u0027t, since its just cil byte code. All objects have to go on the heap and thus have to be garbage collected. And this is what my mods disassembly looks like. It could only use the stack for objects that are created and only used within the current method at all, but i would hope the .net JIT would make such an optimization anyway. The only advantage that C\u002B\u002B/CLI seems to have in terms of memory management is its deterministic object destruction, but that is nothing but wrapper around .Net commonly used IDisposable. GC has to do the cleanup nonetheless.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-06-07T22:56:55Z","Content":"\n\u003Cp\u003EC# generally outperforms C\u002B\u002B/CLI. I\u0027m also not convinced P/Invoke is going to be faster. Remember, the CLR revolves around C#, even if it is built to be widely compatible.\u003C/p\u003E\u003Cp\u003EThere\u0027s a big reason to use C# that has nothing to do with language features: It\u0027s what KSP uses. It\u0027s what the vast majority of mods use. Everything you\u0027re going to interface with was designed with C# in mind (even if Unity is bad at it). All the snippets of useful code you\u0027ll find are in C#. If you\u0027re interested in skilled modders peeking at your code and giving you advice or pull requests, you\u0027ll want C#. I do think C# has some advantages from a technical standpoint, but my point here is that you should not use a different language unless you have a substantial overriding reason to. \u0022I don\u0027t know C#\u0022 isn\u0027t a strong enough reason, in my opinion; it\u0027s not an unusual or difficult language. There might be a particular language feature you need, but those situations are very rare.\u003C/p\u003E\n"},{"CreatedByName":"RockoDyne","CreatedById":106891,"CreatedDateTime":"2014-06-08T02:37:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003EBoth isn\u0027t correct. Mono is mostly compatible with .NET bytecode (since thats what it was supposed to be). The problem is that Unity uses a very outdated cut down version of the .NET class library. Yes you have to use .net 3.5, can\u0027t use a few types and should probably use an external tool to target a unity framework.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA task not for the faint of heart and mostly for people who either are too pigheaded to pick up a new language or those doing it for the ****s and giggles.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ESame for #2... you only need the correct references. And any reasonable KSP mod will include references to unityengine and ksp\u0027s Assembly-CSharp, so not a problem at all.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EReferencing unityengine is one thing, but you can actually get update functions to work without black magic?\u003C/p\u003E\n"},{"CreatedByName":"Timbo","CreatedById":64420,"CreatedDateTime":"2014-06-26T00:00:27Z","Content":"\n\u003Cp\u003EI\u0027ve been messing around and trying to use Visual Basic to make a mod. (I know, I know -- I should use C# but I\u0027ve been using VB for many years and I\u0027m too lazy to switch). It took some fiddling and there was almost no discussion on the forums about how to do it, so I thought I would share my experience.\u003C/p\u003E\u003Cp\u003EI started by trying to make a standard VB.NET class library using this mod tutorial which was designed for C# and using a code converter to change the sample code from C# to VB.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Creating_your_first_module\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Creating_your_first_module\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EWhen I loaded KSP, I found the following in the output.log. (\u0022Thingamajig\u0022 is the name of my class)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E AssemblyLoader: Exception loading \u0027Thingamajig\u0027: System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded.\u003Cp\u003E at (wrapper managed-to-native) System.Reflection.Assembly:GetTypes (bool)\u003C/p\u003E\u003Cp\u003E at System.Reflection.Assembly.GetTypes () [0x00000] in :0\u003C/p\u003E\u003Cp\u003E at AssemblyLoader.LoadAssemblies () [0x00000] in :0\u003C/p\u003E\u003Cp\u003E Additional information about this exception:\u003C/p\u003E\u003Cp\u003E System.TypeLoadException: Could not load type \u0027Thingamajig.My.MyProject\u0027 from assembly \u0027Thingamajig, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027.\u003C/p\u003E\u003Cp\u003E System.TypeLoadException: Could not load type \u0027Thingamajig.My.MyProject\u002BThreadSafeObjectProvider\u00601[T]\u0027 from assembly \u0027Thingamajig, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027.\u003C/p\u003E\u003Cp\u003E System.TypeLoadException: Could not load type \u0027MyWebServices\u0027 from assembly \u0027Thingamajig, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027.\u003C/p\u003E\u003Cp\u003E System.TypeLoadException: Could not load type \u0027System.Configuration.ApplicationSettingsBase\u0027 from assembly \u0027System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\u0027.\u003C/p\u003E\u003Cp\u003E System.IO.FileNotFoundException: Could not load file or assembly \u0027Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027 or one of its dependencies.\u003C/p\u003E\u003Cp\u003E File name: \u0027Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI did some research and then asked for help on StackExchange\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://stackoverflow.com/questions/24412765/c-sharp-app-cant-find-types-from-a-vb-class-library/24413019#24413019\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://stackoverflow.com/questions/24412765/c-sharp-app-cant-find-types-from-a-vb-class-library/24413019#24413019\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBasically what is happening is KSP, being written in C#, does not include the classes that Visual Studio was automatically putting references to in my library. I may not be describing that completely accurately, but this is the gist of it. These include (there may be more, depending on the mod you write):\u003C/p\u003E\u003Cp\u003EMy.MyProject\u003C/p\u003E\u003Cp\u003EMyWebServices\u003C/p\u003E\u003Cp\u003ESystem.Configuration.ApplicationSettingsBase\u003C/p\u003E\u003Cp\u003EMicrosoft.VisualBasic\u003C/p\u003E\u003Cp\u003ESo the solution is to write the mod in VB using Visual Studio, but compile it manually. The command line options prevent the inclusion of the VB classes that KSP (and/or the Unity engine) do not understand. Here is the command line that worked for me:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EC:\\WINDOWS\\Microsoft.NET\\Framework\\v3.5\\Vbc.exe /sdkpath:C:\\KSP-Dev\\KSP_Data\\Managed /noconfig /verbose /novbruntimeref /imports:System,System.Reflection,System.Collections,System.Collections.Generic /nowarn:42016,41999,42017,42018,42019,42032,42036,42020,42021,42022 /optionstrict\u002B /rootnamespace:Thingamajig /define:\u0022_MyType=\\\u0022Empty\\\u0022\u0022 /reference:C:\\KSP-Dev\\KSP_Data\\Managed\\UnityEngine.dll,C:\\KSP-Dev\\KSP_Data\\Managed\\Assembly-CSharp.dll /target:library /out:\u0022C:\\KSP-Dev\\GameData\\Timbo\\Thingamajig\\Thingamajig.dll\u0022 \u0022C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\Thingamajig\\Thingamajig\\*.vb\u0022\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo make it easier, I converted this to a batch file (ahhhh, good old batch files. I\u0027m pleased to find a use for you after all these years...). Then I can copy the batch file and change the variables at the top for the particular mod I am working on. If the mod includes parts, the batch file can be configured to copy them to the appropriate directory too, or just do it manually.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E@echo off\u003Cp\u003Eset SOURCE=\u0022C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\Thingamajig\\Thingamajig\\*.vb\u0022\u003C/p\u003E\u003Cp\u003Eset DEST=\u0022C:\\KSP-Dev\\GameData\\Timbo\\Thingamajig\\Thingamajig.dll\u0022\u003C/p\u003E\u003Cp\u003Eset LIBS=C:\\KSP-Dev\\KSP_Data\\Managed\\UnityEngine.dll,C:\\KSP-Dev\\KSP_Data\\Managed\\Assembly-CSharp.dll\u003C/p\u003E\u003Cp\u003Eset SDK=\u0022C:\\KSP-Dev\\KSP_Data\\Managed\u0022\u003C/p\u003E\u003Cp\u003Eset NAMESPACE=\u0022Thingamajig\u0022\u003C/p\u003E\u003Cp\u003EC:\\WINDOWS\\Microsoft.NET\\Framework\\v3.5\\Vbc.exe /sdkpath:%SDK% /noconfig /verbose /novbruntimeref /imports:System,System.Reflection,System.Collections,System.Collections.Generic /nowarn:42016,41999,42017,42018,42019,42032,42036,42020,42021,42022 /optionstrict\u002B /rootnamespace:%NAMESPACE% /define:\u0022_MyType=\\\u0022Empty\\\u0022\u0022 /reference:%LIBS% /target:library /out:%DEST% %SOURCE%\u003C/p\u003E\u003Cp\u003Epause\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI hope this helps anyone wanting to write mods in VB.NET. But.... you (and I) really ought to just switch to C#\u003C/p\u003E\n"}]}