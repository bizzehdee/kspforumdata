{"TopicId":75938,"ForumId":36,"TopicTitle":"[1.0.x] [V1.9f] Kerbal Foundries wheels, anti-grav repulsors and tracks","CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-06-25T17:24:04Z","PageNum":68,"Articles":[{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-11T06:06:53Z","Content":"\n\u003Cp\u003EIt seems to me that a little generator that isn\u0027t producing any noticeable thrust (unless you strap on 30 billion of them, then you might be able to see a few numbers changing somewhere) wouldn\u0027t produce much noise at all. Might just need a little tweak to the noise settings. If you\u0027re running a ton of them, however, I could see that realistically making a bit of noise.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-11T07:55:40Z","Content":"\n\u003Cp\u003EThanks Gaalidas, that\u0027s brilliant. Good point about scaling small wheels down, they do not work well below a certain size. Maybe define three KF modules, one for small stuff that only scales up, one for mid size that hues either way etc.?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darren9\u0022 data-cite=\u0022Darren9\u0022\u003E\u003Cdiv\u003ESpeaking of the noise that little generator makes, I tried running eight of them to power that repulsor field thing - that was LOUD! Louder than a gaggle of boosters at lift-off when they all revved up to full power. I noticed in BD Armory he\u0027s got some code that reduces the noise of explosions when there\u0027s more than one, just thought I\u0027d mention that, you know, encase you\u0027ve got a few minutes with nothing to do or something \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EChance would be a fine thing \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E good idea, though, I\u0027ll poke about in the BDA code and see what I can find.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EIt seems to me that a little generator that isn\u0027t producing any noticeable thrust (unless you strap on 30 billion of them, then you might be able to see a few numbers changing somewhere) wouldn\u0027t produce much noise at all. Might just need a little tweak to the noise settings. If you\u0027re running a ton of them, however, I could see that realistically making a bit of noise.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll see if I can find a better noise, it\u0027s just running the stock jet sound at the moment (which is annoying). There\u0027s a better model knocking about too, I\u0027ll try and take it out.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-11T18:07:41Z","Content":"\n\u003Cp\u003EThat would be great, especially if the new model has textures defined for all the surfaces. The current model can\u0027t even be fully painted using KerbPaint because the white surfaces aren\u0027t textured.\u003C/p\u003E\u003Cp\u003EI\u0027ll look into some special definitions for extreme sized wheels. I\u0027m thinking those huge wheels should maybe have one level larger than they have for flexibility with large and heavy crafts, but should have a lot of room to shrink so they can be used with standard sized crafts. I\u0027ll create one for smaller wheels as well that gives them a single shrinking value and more room to expand, giving attention to the maximum that they \u003Cem\u003Ecan\u003C/em\u003E expand before their visual appearance becomes distorted (texture wise that is.)\u003C/p\u003E\u003Cp\u003EI\u0027m also thinking maybe the free scaling method should be looked at again. I remembered yesterday that even if you use a free-scale, you can define a maximum and minimum value that can be used and, while I was experimenting a while back with your original implementation, I discovered that recent updates to TS included two sets of buttons beside the scale slider, one for small increments and one for large increments. This makes it a lot easier to get the same scale value for multiple independently scaled parts, where in the old system you could easily get stuck with a slight difference and no way to sync it up due to the limitations of the step-size and the bar size. There simple wasn\u0027t enough pixels to make the selection specific enough.\u003C/p\u003E\u003Cp\u003EI\u0027ll mess around and update stuff when I get a chance. This github thing is making it a lot easier to contribute to this project.\u003C/p\u003E\u003Cp\u003EAnd... I can give a bit more time to it now that school is out for the holidays.\u003C/p\u003E\u003Cp\u003EEDIT: Okay, so I haven\u0027t heard back from the TweakScale people yet, so I went ahead and added the definition for that \u0022tweakScaleCorrector\u0022 variable in the part modules and did some testing. I discovered something a bit messed up. First of all, those long tracks do not respond very well when being manipulated in the scale. I am unsure if they were working right anyway before we implemented TS but, at full suspension, the \u0022wheels\u0022 parts were below the ground and the track was stretched down with it. The ride-height seemed to be stuck at one level while the suspension dropped to the floor (or below the floor as it seems). Upon testing the medium tracks (up-scaled to the maximum value I altered them to be able to reach) they seemed to be okay, except for a small problem with the bottom of the track clipping with the ground when the craft was stationary. However, upon trying to move around a bunch, I noticed that I was turning to the right constantly. Furthermore, the context entry in flight labeled \u0022TS\u0022 which I just code dived to find out corresponds with the current \u0022tweakScaleCorrector\u0022 value on that part was not the same for both, equally scaled, tracks. When the imbalance finally turned me on my back, it appeared that the tracks were compensating for the different in their corrector values but in reality one of them was trying to suspend about twice the distance than the other one.\u003C/p\u003E\u003Cp\u003EI don\u0027t know what this means yet, but I suspect it might have something to do with multiple instances of the same module in a part being manipulated by TweakScale\u0027s exponent system. My theory is that when it scans for the appropriate modules it finds all instances of that module, but when applying the exponent it isn\u0027t resetting its base value back to the defined value for each instance of the same module, thus causing the value to continue to be exponentially altered. As far as your plugin is concerned, the latest value is going to be used for all the calculations despite the different values for the different modules in the same part, so they all end up with super high \u0022tweakScaleCorrector\u0022 values upon launching. Doing some work on a calculator has revealed that it is quite plausible that this is what is happening. Every time it moves on to the next instance of the module, it already thinks that the new exponent is equal to the new scale, so it applies that new exponent to the current base, then again, and then again. For that long track, with all of it\u0027s \u0022wheels\u0022 that all get an exponent applied to them, but number that gets reported to your plugin in the end could end up as far as 9.512 (the decimal keeps going in seemingly random directions for a while, I cut it down for legibility) with only 5 wheel modules in the part. Since the plugin is tracking not only the single part with the module, but the other parts on the craft as well so that these things can work together, then that number likely gets added to when TweakScale continues working on the next part that it needs to scale, thus creating that imbalance that I experienced.\u003C/p\u003E\u003Cp\u003EAt this time, I am unsure how to deal with this. We might have to revert back to designating specific values for the variable to coincide with the scales we choose to implement. That would surely keep it from calculating the wrong values for multiple modules of the same name. Other possibilities would be to create a new module that would have only one responsibility: managing the \u0022tweakScaleCorrector\u0022 variable and passing that on to the other modules so that it doesn\u0027t compound itself. This options appeals to me just because I\u0027ve often create entire batch files to be called by my other batch utilities that have only one purpose: to define and manage environment variables. This could allow for each part to have that variable only defined in it once, and thus only manipulated by TweakScale once. You\u0027d just have to figure out how to update the rest of the modules that use that variable when they need it.\u003C/p\u003E\u003Cp\u003EAnyway, my brain is cooked now so I\u0027ll leave you with that for the moment until I get my second wind, so to speak.\u003C/p\u003E\u003Cp\u003EEDIT AGAIN:\u003C/p\u003E\u003Cp\u003EOkay, so I did some more research by code diving into the TweakScale source. It seems that if I prefix the variable name with a \u0022!\u0022 symbol it will cause the exponent to be calculated based on the default size for the part, and not on the current size. This makes a lot more sense, but it also isn\u0027t working quite right still. I got it to stop shooting \u0022tweakScaleCorrector\u0022 to abnormal heights, which is great. But, I\u0027m still getting mismatched values. I first launched a rover with two medium tracks up-scaled to 150%. The correction value was 2.8 on the right side, and 1.9 on the left. It should be 1.5 on both. I then launched the same craft with the tracks at default scale. I would expect that the corrector would be untouched and remain at 1. Instead, the left was at 1.3 and the right was at 1.9. So, it seems that even at the default level, the \u0022tweakScaleCorrector\u0022 is being manipulated by something. I don\u0027t see \u003Cem\u003Ehow\u003C/em\u003E it would be manipulated beyond what I have defined it to be in the exponent definition, and I don\u0027t see anywhere in your code that the value gets altered. Your code just uses it to calculate other things. I have verified that I put the correct value into the part configs as well, though so far no response as to whether I need to define them there or not. So, I\u0027m rather irritated and stumped. I\u0027m going to try it with some wheels next. If two parts are getting that much of an offset, imagine what the 6th wheel in a set will be boosted to.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-11T23:28:52Z\u0022 title=\u002212/11/2014 11:28  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 11, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-11T23:37:50Z","Content":"\n\u003Cp\u003ESadly I think Biotronic may have given up on TweakScale for real-life reasons (maybe he\u0027ll show up again in a month or two), I\u0027m just trying to make any sense of it because I really want your parts to be tweakscaleable and work right because they\u0027re so cool =)\u003C/p\u003E\u003Cp\u003EAnyhoo, I obviously don\u0027t understand what\u0027s going on in your code - but why do you need a TweakScaleCorrector variable in the first place? What does it do?\u003C/p\u003E\u003Cp\u003EIt seems to me the only real issue with the tracks in the past was that things like the suspension weren\u0027t changing with size (because the variable for suspension length, or however it works, wasn\u0027t defined in TWEAKSCALEEXPONENTS anywhere, and therefore not addressed by TS at all), but for the most part, when I tweakscale the currently-released tracks, they work. Their torque values are insanely high when scaled up, but they still work - no weird wheels going through the ground kind of stuff.\u003C/p\u003E\u003Cp\u003EOr, otherwise stated: what are the actual variables/values used by the MODULE{} at work in the wheels and tracks that need to change with the size of the part, and in what way(s) do they need to change when the part\u0027s larger or smaller?\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-11T23:55:31Z","Content":"\n\u003Cp\u003EAll good questions. I have an update: wheels work pretty well with this system, only one minor oddity. At a scale level of 0.75, \u0022tweakScaleCorrector\u0022 = 0.8. Shouldn\u0027t it equal 0.75? So that confuses me a bit. But, it seems that the really weird troubles are related to the tracks when it comes to these exponents. I still worry ever so slightly that the ERS level-indicator shows that even with the wheels I am slightly off balance still, but I\u0027m not too worried at this point about that little detail. Unfortunately the wheels and the tracks use the same modules, so we\u0027ll have to either sort this out or revert our support for tweakscale until we can get this resolved. One thing I thought of: if \u0022tweakScaleCorrector\u0022 could be equalized between all the parts in a wheel-group to the lowest value found similar to how we can modify the suspension and apply it to the group, then it might be possible to overcome this little oddity.\u003C/p\u003E\u003Cp\u003EAs to the question \u0022why do you need a TweakScaleCorrector variable in the first place?\u0022 well, that is a good question indeed. From what i can tell, it reduces the amount of work needed for a plugin like TweakScale to modify all these variables in a consistent way. If tweakscale only has to modify a single variable, and then we implement that variable into a bunch of different equations, we are effectively killing a dozen birds with one stone. (I always thought of that as having a ton of birds in a single nest, and throwing a really freakishly huge stone on top of it, though it does feel a bit like cheating.) Otherwise, TweakScale would need to adjust tons of variables and with the current weird effects we\u0027re getting with tracks, tracking down the errors would have been a real pain in the tailpipe. I still question why we need to reduce the workload though, cause in using one variable we limit the tweaking we can do to each equation that uses it. If TweakScale were modifying a bunch of other values separately, we could easily tell it to double something, while tripling another, and using the single exponent on still more, all in one go without modifying the source. It\u0027s a tradeoff either way.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T00:01:55Z\u0022 title=\u002212/12/2014 12:01  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-12T00:09:46Z","Content":"\n\u003Cp\u003EAh, you\u0027ve reached that \u0022TweakScale. What the deuce?!?! stage. Are you adding the TS stuff in the configs ahead of KF modules? The KF code does a lot of stuff on startup, so if the TS exponent hadn\u0027t already been changed by TS, as things are fired sequentially, bad stuff will happen.\u003C/p\u003E\u003Cp\u003EHell of a long day - also a little drunk - so that\u0027s about the best I can come up with right now. The long tracks are nothing special, other than having more KFWheel modules (which govern suspension movement) than other models. Push it all to Git though (genius, itsn\u0027t it! Thanks, Linus) and I\u0027ll see if I can offer any insights over the weekend.\u003C/p\u003E\u003Cp\u003EThanks, as ever!\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-12T00:13:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EAll good questions. I have an update: wheels work pretty well with this system, only one minor oddity. At a scale level of 0.75, \u0022tweakScaleCorrector\u0022 = 0.8. Shouldn\u0027t it equal 0.75? So that confuses me a bit. But, it seems that the really weird troubles are related to the tracks when it comes to these exponents. I still worry ever so slightly that the ERS level-indicator shows that even with the wheels I am slightly off balance still, but I\u0027m not too worried at this point about that little detail. Unfortunately the wheels and the tracks use the same modules, so we\u0027ll have to either sort this out or revert our support for tweakscale until we can get this resolved. One thing I thought of: if \u0022tweakScaleCorrector\u0022 could be equalized between all the parts in a wheel-group to the lowest value found similar to how we can modify the suspension and apply it to the group, then it might be possible to overcome this little oddity.\u003Cp\u003EAs to the question \u0022why do you need a TweakScaleCorrector variable in the first place?\u0022 well, that is a good question indeed. From what i can tell, it reduces the amount of work needed for a plugin like TweakScale to modify all these variables in a consistent way. If tweakscale only has to modify a single variable, and then we implement that variable into a bunch of different equations, we are effectively killing a dozen birds with one stone. (I always thought of that as having a ton of birds in a single nest, and throwing a really freakishly huge stone on top of it, though it does feel a bit like cheating.) Otherwise, TweakScale would need to adjust tons of variables and with the current weird effects we\u0027re getting with tracks, tracking down the errors would have been a real pain in the tailpipe. I still question why we need to reduce the workload though, cause in using one variable we limit the tweaking we can do to each equation that uses it. If TweakScale were modifying a bunch of other values separately, we could easily tell it to double something, while tripling another, and using the single exponent on still more, all in one go without modifying the source. It\u0027s a tradeoff either way.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOK, I think I understand - that makes sense, and if indeed TweakScale is messing up stuff when you have 8 wheel MODULE{} in one part (or whatever), then having it chew on only that one variable might address that, too. I just can\u0027t think of a part I\u0027ve seen that has two identical MODULE{} in it that would provide some kind of test case other than the wheels \u0026amp; tracks here. But maybe I\u0027m not understanding - do you mean that there need to be multiple of the same MODULE{} in a given part to make the wheels/tracks work, or do you mean that the same variable gets mentioned X times in \u003Cem\u003Eone \u003C/em\u003EMODULE{} (and therefore possibly borked by TS)? If it\u0027s the latter, I thought TS had a method of dealing with stuff like that so long as the same variable names are somehow nested (like different MaxThrust within a multi-mode engine MODULE{}, maybe?)...\u003C/p\u003E\u003Cp\u003EAre you using TS 1.44 to test all this? TS 1.47 produces some \u0022creative\u0022 numbers when you scale stuff, just in case that\u0027s the version you\u0027re using.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-12T05:21:17Z","Content":"\n\u003Cp\u003EReally? That\u0027s the first I\u0027ve heard of any issues with the latest tweakscale versions. I have yet to have any problems with it until now, but I\u0027m also a lot more conservative with my scaling. Well, that\u0027s interesting. might have to try and find a previous release to try out. I\u0027m just a bit curious why anyone would go back three versions? If 1.47 is the problem, I\u0027d think that 1.46 would be the logical step to take.\u003C/p\u003E\u003Cp\u003EAlso, here\u0027s a sample of what a track looks like in the part config:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E(just a small sample of where the wheels are defined)\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFModuleWheel\u003Cbr\u003E    tweakScaleCorrector = 1\u003Cbr\u003E    raycastError = 0.035\u003Cbr\u003E    springRate = 0.8\u003Cbr\u003E    damperRate = 0.05\u003Cbr\u003E    smoothSpeed = 8\u003Cbr\u003E    torqueCurve\u003Cbr\u003E    {\u003Cbr\u003E      key = 0 50 0 0\u003Cbr\u003E      key = 10 75 0 0\u003Cbr\u003E      key = 15 100 0 0\u003Cbr\u003E      key = 20 125 0 0\u003Cbr\u003E      key = 25 95 0 0\u003Cbr\u003E      key = 30 15 0 0\u003Cbr\u003E    }\u003Cbr\u003E    torqueSteeringCurve\u003Cbr\u003E    {\u003Cbr\u003E      key = 0 85 0 0\u003Cbr\u003E      key = 10 42 0 0\u003Cbr\u003E      key = 15 20 0 0\u003Cbr\u003E      key = 20 0 0 0\u003Cbr\u003E    }\u003Cbr\u003E    steeringCurve\u003Cbr\u003E    {\u003Cbr\u003E      key 0 0 0 0\u003Cbr\u003E    }\u003Cbr\u003E    brakeSteeringCurve\u003Cbr\u003E    {\u003Cbr\u003E      key = -25 -240 0 0\u003Cbr\u003E      key = -10 -120 0 0\u003Cbr\u003E      key = 0 0 0 0\u003Cbr\u003E      key = 10 120 0 0\u003Cbr\u003E      key = 25 240 0 0\u003Cbr\u003E    }\u003Cbr\u003E    brakingTorque = 70\u003Cbr\u003E    rollingResistance = 10\u003Cbr\u003E    maxRPM = 600\u003Cbr\u003E}\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFWheel\u003Cbr\u003E    tweakScaleCorrector = 1\u003Cbr\u003E    wheelName = RoadWheel1\u003Cbr\u003E    colliderName = WC1\u003Cbr\u003E    sustravName = Link1\u003Cbr\u003E    steeringName = Link1\u003Cbr\u003E    isIdler = false\u003Cbr\u003E    hasSteering = false\u003Cbr\u003E    rotationCorrection = 1.5\u003Cbr\u003E    smoothSpeed = 40\u003Cbr\u003E    wheelRotationX = 0\u003Cbr\u003E    wheelRotationY = 0\u003Cbr\u003E    wheelRotationZ = 1\u003Cbr\u003E    susTravAxis = Y    \u003Cbr\u003E}\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFWheel\u003Cbr\u003E    tweakScaleCorrector = 1\u003Cbr\u003E    wheelName = RoadWheel2\u003Cbr\u003E    colliderName = WC2\u003Cbr\u003E    sustravName = Link2\u003Cbr\u003E    steeringName = Link2\u003Cbr\u003E    isIdler = false\u003Cbr\u003E    hasSteering = false\u003Cbr\u003E    rotationCorrection = 1.5\u003Cbr\u003E    smoothSpeed = 40\u003Cbr\u003E    wheelRotationX = 0\u003Cbr\u003E    wheelRotationY = 0\u003Cbr\u003E    wheelRotationZ = 1\u003Cbr\u003E    susTravAxis = Y\u003Cbr\u003E}\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFWheel\u003Cbr\u003E    tweakScaleCorrector = 1\u003Cbr\u003E    wheelName = RoadWheel3\u003Cbr\u003E    colliderName = WC3\u003Cbr\u003E    sustravName = Link3\u003Cbr\u003E    steeringName = Link3\u003Cbr\u003E    isIdler = false\u003Cbr\u003E    hasSteering = false\u003Cbr\u003E    rotationCorrection = 1.5\u003Cbr\u003E    smoothSpeed = 40\u003Cbr\u003E    wheelRotationX = 0\u003Cbr\u003E    wheelRotationY = 0\u003Cbr\u003E    wheelRotationZ = 1\u003Cbr\u003E    susTravAxis = Y\u003Cbr\u003E}\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFWheel\u003Cbr\u003E    wheelName = SprocketF\u003Cbr\u003E    colliderName = wheelColliderSF\u003Cbr\u003E    sustravName = LinkF\u003Cbr\u003E    steeringName = LinkF\u003Cbr\u003E    isIdler = false\u003Cbr\u003E    hasSuspension = false\u003Cbr\u003E    hasSteering = false\u003Cbr\u003E    rotationCorrection = 1.5\u003Cbr\u003E    smoothSpeed = 40\u003Cbr\u003E    wheelRotationX = 0\u003Cbr\u003E    wheelRotationY = 0\u003Cbr\u003E    wheelRotationZ = 1\u003Cbr\u003E    susTravAxis = Y\u003Cbr\u003E}\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = KFWheel\u003Cbr\u003E    wheelName = SprocketR\u003Cbr\u003E    colliderName = wheelColliderSR\u003Cbr\u003E    sustravName = LinkR\u003Cbr\u003E    steeringName = LinkR\u003Cbr\u003E    isIdler = false\u003Cbr\u003E    hasSuspension = false\u003Cbr\u003E    hasSteering = false\u003Cbr\u003E    rotationCorrection = 1.5\u003Cbr\u003E    smoothSpeed = 40\u003Cbr\u003E    wheelRotationX = 0\u003Cbr\u003E    wheelRotationY = 0\u003Cbr\u003E    wheelRotationZ = 1\u003Cbr\u003E    susTravAxis = Y\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn that sample I\u0027ve already removed the corrector definition from a few of those \u0022wheels\u0022 that aren\u0027t actually being used as \u0022wheels\u0022 in that sense, and I\u0027ve been experimenting with some very detailed torque and steering settings in my personal copy, but overall it\u0027s pretty accurate to what is really in a standard track. Most of them actually don\u0027t have those \u0022sprocket\u0022 wheels.\u003C/p\u003E\u003Cp\u003EOn the topic of TS having stuff to handle multiple thrust settings and such... I\u0027ve not heard or seen anything like that, but it does remind me a lot of how Module Manager works. Unfortunately, that helps us very little in this case. The two mods handle their detection of modules and their variables quite differently from what I can tell, and the search parameters cannot be translated between them.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T05:29:11Z\u0022 title=\u002212/12/2014 05:29  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-12T11:03:54Z","Content":"\n\u003Cp\u003EAre you sure that putting the \u003Cspan style=\u0022color:#333333;\u0022\u003EtweakScaleCorrector \u003C/span\u003Eline in the config for the KF modules is the right thing to do? It\u0027s defaulted to 1 explicitly in the code (like a lot of the variables I use so you don\u0027t have to define them in the config unless you want something other than the default), and made available for TS to change. I\u0027m wondering if TS changes it, then it gets reparsed through the KFWheel config node back to 1. It may well explain the long track weirdness. I could be completely wrong, but I can\u0027t see much sense in redefining it? I\u0027ll do a bit of testing myself.\u003C/p\u003E\u003Cp\u003EThanks for pushing changes to Git, it makes life so much easier!\u003C/p\u003E\n"},{"CreatedByName":"EpicCybertronian","CreatedById":126715,"CreatedDateTime":"2014-12-12T14:41:32Z","Content":"\n\u003Cp\u003EWhen\u0027s the new track being added? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_ohmy.png\u0022 alt=\u0022:o\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-12T15:56:01Z","Content":"\n\u003Cp\u003EI think the TS stuff is one of the last bits to be sorted before I can think about sending the next release out. It\u0027s proving tricky, though, so difficult to give an exact timescale I\u0027m afraid.\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-12T18:58:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = KFModuleWheel\u003C/p\u003E\u003Cp\u003E tweakScaleCorrector = 1\u003C/p\u003E\u003Cp\u003E raycastError = 0.035\u003C/p\u003E\u003Cp\u003E springRate = 0.8\u003C/p\u003E\u003Cp\u003E damperRate = 0.05\u003C/p\u003E\u003Cp\u003E smoothSpeed = 8\u003C/p\u003E\u003Cp\u003E torqueCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = 0 50 0 0\u003C/p\u003E\u003Cp\u003E key = 10 75 0 0\u003C/p\u003E\u003Cp\u003E key = 15 100 0 0\u003C/p\u003E\u003Cp\u003E key = 20 125 0 0\u003C/p\u003E\u003Cp\u003E key = 25 95 0 0\u003C/p\u003E\u003Cp\u003E key = 30 15 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E torqueSteeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = 0 85 0 0\u003C/p\u003E\u003Cp\u003E key = 10 42 0 0\u003C/p\u003E\u003Cp\u003E key = 15 20 0 0\u003C/p\u003E\u003Cp\u003E key = 20 0 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E steeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key 0 0 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E brakeSteeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = -25 -240 0 0\u003C/p\u003E\u003Cp\u003E key = -10 -120 0 0\u003C/p\u003E\u003Cp\u003E key = 0 0 0 0\u003C/p\u003E\u003Cp\u003E key = 10 120 0 0\u003C/p\u003E\u003Cp\u003E key = 25 240 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E brakingTorque = 70\u003C/p\u003E\u003Cp\u003E rollingResistance = 10\u003C/p\u003E\u003Cp\u003E maxRPM = 600\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = KFWheel\u003C/p\u003E\u003Cp\u003E tweakScaleCorrector = 1\u003C/p\u003E\u003Cp\u003E wheelName = RoadWheel1\u003C/p\u003E\u003Cp\u003E colliderName = WC1\u003C/p\u003E\u003Cp\u003E sustravName = Link1\u003C/p\u003E\u003Cp\u003E steeringName = Link1\u003C/p\u003E\u003Cp\u003E isIdler = false\u003C/p\u003E\u003Cp\u003E hasSteering = false\u003C/p\u003E\u003Cp\u003E rotationCorrection = 1.5\u003C/p\u003E\u003Cp\u003E smoothSpeed = 40\u003C/p\u003E\u003Cp\u003E wheelRotationX = 0\u003C/p\u003E\u003Cp\u003E wheelRotationY = 0\u003C/p\u003E\u003Cp\u003E wheelRotationZ = 1\u003C/p\u003E\u003Cp\u003E susTravAxis = Y \u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = KFWheel\u003C/p\u003E\u003Cp\u003E wheelName = SprocketR\u003C/p\u003E\u003Cp\u003E colliderName = wheelColliderSR\u003C/p\u003E\u003Cp\u003E sustravName = LinkR\u003C/p\u003E\u003Cp\u003E steeringName = LinkR\u003C/p\u003E\u003Cp\u003E isIdler = false\u003C/p\u003E\u003Cp\u003E hasSuspension = false\u003C/p\u003E\u003Cp\u003E hasSteering = false\u003C/p\u003E\u003Cp\u003E rotationCorrection = 1.5\u003C/p\u003E\u003Cp\u003E smoothSpeed = 40\u003C/p\u003E\u003Cp\u003E wheelRotationX = 0\u003C/p\u003E\u003Cp\u003E wheelRotationY = 0\u003C/p\u003E\u003Cp\u003E wheelRotationZ = 1\u003C/p\u003E\u003Cp\u003E susTravAxis = Y\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EIn that sample I\u0027ve already removed the corrector definition from a few of those \u0022wheels\u0022 that aren\u0027t actually being used as \u0022wheels\u0022 in that sense, and I\u0027ve been experimenting with some very detailed torque and steering settings in my personal copy, but overall it\u0027s pretty accurate to what is really in a standard track. Most of them actually don\u0027t have those \u0022sprocket\u0022 wheels.\u003C/p\u003E\u003Cp\u003EOn the topic of TS having stuff to handle multiple thrust settings and such... I\u0027ve not heard or seen anything like that, but it does remind me a lot of how Module Manager works. Unfortunately, that helps us very little in this case. The two mods handle their detection of modules and their variables quite differently from what I can tell, and the search parameters cannot be translated between them.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E1.44 is the last really stable release - 1.45 and on introduced some features that interfere with other features (far as I can tell) in the presence of certain mods. 1.47\u0027s auto-scaling deal is also more or less broken for the moment - it works, but odd things seem to happen on spawns \u0026amp; reloads, masses go to infinity, stuff like that. Could be wrong, but I\u0027m pretty sure lots of people have had issues even with 1.47 on stock...\u003C/p\u003E\u003Cp\u003EAnyhoo, so here\u0027s what I\u0027m thinking for that code -I\u0027m going to make a bunch of guesses, so I\u0027m sure half of what I\u0027m about to say will be wrong, but:\u003C/p\u003E\u003Cp\u003EAs the MODULE{} is written now, I am going to assume that TweakScaleCorrector is only modifying the other variables that I can see in the code there. If it\u0027s being applied to stuff that\u0027s not in the MODULE{}, then this will be REALLY wrong, but you should be able to just write a TWEAKSCALEEXPONENTS{} fairly straightforwardly to deal with all of those MODULE{}s:\u003C/p\u003E\u003Cp\u003ETWEAKSCALEEXPONENTS\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003Ename = KFWheel\u003C/p\u003E\u003Cp\u003EraycastError = 1 // (scale linearly, I assume this has some relationship to model size?)\u003C/p\u003E\u003Cp\u003EspringRate = 1 // (also linear, assuming the \u0022rate\u0022 is a physical measurement and not a percent or fraction despite \u0022Rate\u0022)\u003C/p\u003E\u003Cp\u003EdamperRate = 1 // (also assuming linear with scaled size)\u003C/p\u003E\u003Cp\u003EsmoothSpeed = 1 // (also assuming this value should increase/decrease with scaled size - but if this is the maximum speed of the wheel, maybe not)\u003C/p\u003E\u003Cp\u003EbrakingTorque = 1 // (if this should scale in proportion to the \u003Cem\u003Emass \u003C/em\u003Eof the wheels, then change to 3)\u003C/p\u003E\u003Cp\u003ErollingResistance = 2 // (I am assuming this variable should scale with the surface area of the part)\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EThat SHOULD make all of those values do what I\u0027ve said in parentheses without any jiggery-pokery with TweakScaleCorrector and whanot. But again, that\u0027s assuming that your module is only using the variables I see in front of me to make the wheels work, and not using some other variable (not written here) that would need to change as a part gets bigger or smaller.\u003C/p\u003E\u003Cp\u003ESo this stuff:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E torqueCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = 0 50 0 0\u003C/p\u003E\u003Cp\u003E key = 10 75 0 0\u003C/p\u003E\u003Cp\u003E key = 15 100 0 0\u003C/p\u003E\u003Cp\u003E key = 20 125 0 0\u003C/p\u003E\u003Cp\u003E key = 25 95 0 0\u003C/p\u003E\u003Cp\u003E key = 30 15 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E torqueSteeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = 0 85 0 0\u003C/p\u003E\u003Cp\u003E key = 10 42 0 0\u003C/p\u003E\u003Cp\u003E key = 15 20 0 0\u003C/p\u003E\u003Cp\u003E key = 20 0 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E steeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key 0 0 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E brakeSteeringCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = -25 -240 0 0\u003C/p\u003E\u003Cp\u003E key = -10 -120 0 0\u003C/p\u003E\u003Cp\u003E key = 0 0 0 0\u003C/p\u003E\u003Cp\u003E key = 10 120 0 0\u003C/p\u003E\u003Cp\u003E key = 25 240 0 0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E... I don\u0027t know how to deal with, but if those are \u003Cem\u003Emultipliers \u003C/em\u003Erather than numerical values applied to the steering and braking etc. under certain conditions, then you don\u0027t need to deal with it (in theory) if they\u0027re just multiplying the same value that TS is going change around (like \u0022brakingTorque\u0022 or whatever) when scaling.\u003C/p\u003E\u003Cp\u003EWhat I don\u0027t see in there is a variable for the strength of suspension (which ought to scale probably cubically because it needs to match the mass of the part, which also scales cubically by default), unless that\u0027s what springRate does... I am assuming too that the Torque values are the only ones controlling the overall amoung of \u0022oomph\u0022 the track has.\u003C/p\u003E\u003Cp\u003ESo in short, I don\u0027t see what TweakScaleCorrector is doing that you can\u0027t just do with a normal TWEAKSCALEEXPONENTS{} definition, but it\u0027s obviously 99% likely that I\u0027m missing something..\u003C/p\u003E\u003Cp\u003EEDIT: ACtually TweakScale does seem to be able to handle lists of things, it does so with USI\u0027s resource converters by doing this, so maybe it could work with the various Curves too. If not, you could probably just make one variable that the module multiplies the curves by (like TweakScaleCorrector, but not applied to everything; just to each value of key = x x x x or something):\u003C/p\u003E\u003Cp\u003ETWEAKSCALEEXPONENTS\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = USI_ResourceConverter \u003C/p\u003E\u003Cp\u003E inputList\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E rate = 3\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E outputList\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E rate = 3\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E inputResources\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E rate = 3\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T19:15:45Z\u0022 title=\u002212/12/2014 07:15  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-12T19:23:39Z","Content":"\n\u003Cp\u003EGood thoughts; I tried that way, but it quickly gets unwieldy and unpredictable. I\u0027ve added tweakScaleCorrector so I can multiply or divide as appropriate within the code, and I have absolutely 100% certainty that if that one value has been set appropriately everything will work correctly. It\u0027s also needed to drive the suspension movement of the mesh, as for some reason the inverse transform function that gives you the raycast distance does not take into account the scale of the wheel collider - possibly because its own scale is unchanged; only that of its parent object (the part). Some values like the default suspension strength are baked into the model and not defined in the config, so tweakScaleCorrector is needed along with some code to change those too. Once you\u0027re that far down the line with a hard coded exponent, you might as well go the whole hog and do the rest so that\u0027s what I did. It\u0027s built-in TweakScale support, if you like..\u003C/p\u003E\u003Cp\u003EThanks for tips on TS version, I\u0027ve had all sorts of issues with the last few releases. I\u0027m actually running 1.47 though, which is the first one that hasn\u0027t gone absolutely crazy on me (though it still has its moments!). 1.44 was an unqualified disaster with the wheels for some reason.\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-12T19:26:12Z","Content":"\n\u003Cp\u003EEdited to remove spam... Huh. don\u0027t know why that posted twice...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-12T21:53:06Z\u0022 title=\u002212/12/2014 09:53  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 12, 2014\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Blarggnugget","CreatedById":131675,"CreatedDateTime":"2014-12-12T21:02:46Z","Content":"\n\u003Cp\u003Ecan I humbly suggest anti gravity drives? they could consume electricity but only provide enough lift to keep the ship at the level it started at, obviously applying thrust in any direction would move it. just think of the hack gravity cheat, but in part format that consumes vast amounts of electricity.\u003C/p\u003E\u003Cp\u003Eplease and thank you\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-12T21:36:57Z","Content":"\n\u003Cp\u003ESo, dealing with those curves and stuff would be totally nuts because there\u0027s very little we can do to differentiate one \u0022key = \u0022 from the one below or above it which looks exactly the same. If those curves were defined with a numeric marker, like \u0022key01 = , key02 = , etc.\u0022 then we could maybe handle it better.\u003C/p\u003E\u003Cp\u003EAnyway, I\u0027ve been doing soem more testing and i\u0027m not quite finished yet, but I may have managed to stabilize it even with tracks without any code changes to the plugin. Unfortunately, this means getting rid of the exponential and reinserting the specific values. However, I\u0027m not quite done yet. If I have to make another scaletype for tracks alone with more specific settings, I will. I\u0027m experimenting with something that isn\u0027t exactly documented, but might still work considering the many ways that tweakscale can be set up in a config (which seems a bit chaotic, but flexible too) which may allow me to fine-tune the exponents for specific types of parts without having to clone the modules in the code and give them separate names. One thing that does seem to be tripping me up a bit is the fact that the same variable name is used for both modules, but that might not be as bad as it seems. The real issue seems to be that it has to be redefined for both module types (the wheel itself and the drive/steering module.) if the variable could be defined once and used by both modules, then I could eliminate the multi-wheel module oddities by simply editing the variable for the drive/steering module. if that value for \u0022tweakScaleCorrector\u0022 could be read for both of those separate modules, then the problem is more or less solved. I\u0027m unsure if a \u0022public\u0022 variable like it is defined as in both modules makes it only public to everything on that page, or if it can be included in another page of code for the other module. I suspect that in reality, you would have to define it on a separate page of code (and thus it\u0027s own function, which means we\u0027d need a separate module to use it with the part configs) and then include it similar to how you include code from a DLL with your page of code.\u003C/p\u003E\u003Cp\u003EI have yet to take my programming class, so I\u0027m sure my terms are all incorrect, but it\u0027s basically going back to my variable-controller module I wrote about a few posts back (maybe more than a few, I\u0027ve been keyboard happy lately.)\u003C/p\u003E\u003Cp\u003ESo far, even though I\u0027ve had to go backwards in modularity by bringing back the specific values instead of exponents, I have been making progress and even the tracks are behaving properly from what I can tell. When I complete my tests, I\u0027ll update the files with my corrections unless you plan to do some more wide-spread changes to any of the current part configs. You can disregard most of my custom torque curves and such in the above posts. I was just showing that there were multiple modules of the same exact name in the part config. The curves I have are for testing a way to decrease the sudden jerk of speed when you first start moving that tends to make a rover, with loose suspensions, wobble forward and back wildly. Testing of that is going well, but now I can\u0027t get them to still speed up quickly. I\u0027m still fiddling. In the end, they might just be the most complicated entries for those parts you\u0027ll ever see.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-12T21:44:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003EAre you sure that putting the \u003Cspan style=\u0022color:#333333;\u0022\u003EtweakScaleCorrector \u003C/span\u003Eline in the config for the KF modules is the right thing to do? It\u0027s defaulted to 1 explicitly in the code (like a lot of the variables I use so you don\u0027t have to define them in the config unless you want something other than the default), and made available for TS to change. I\u0027m wondering if TS changes it, then it gets reparsed through the KFWheel config node back to 1. It may well explain the long track weirdness. I could be completely wrong, but I can\u0027t see much sense in redefining it? I\u0027ll do a bit of testing myself.\u003Cp\u003EThanks for pushing changes to Git, it makes life so much easier!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Emissed this post while I was taking some time off to manage my sanity. This stuff is really pushing the learning curve I\u0027m on right now. So, i have yet to get a response as to if I need to define that variable in every instance of every module it modifies. As in my above post, I question if we even need to scale it for both modules separately, or could simply scale it for the one. But, like in my last post, I think we may need to adjust the code to allow that to work. We really need a variable that is public enough to be accessible and editable in both modules without having multiple instances of the same variable, but while still making it local to the individual part. Couldn\u0027t we make a new module (call it KF_ScaleCorrector) which simply allows us to scale that variable and make it available to the rest of the plugin for the part it is defined in? I don\u0027t know how to do that, or I\u0027d have tried it already.\u003C/p\u003E\u003Cp\u003EEDIT: Another option is to do what IR does and define the exponents for every part within the part config itself, which makes it a lot less modular but, considering the wide array of different parts you are using the same modules for, might ease the oddities I\u0027m experiencing. Also, since I separated the KFScale into KFScaleM, KFScaleL, and KFScaleS (medium, large, small) but can\u0027t differentiate the exponents to apply only to a scaletype (testing a possible fix for that soon as I get my afternoon chiropractor session done) then I get some odd situations considering each part size has a different position in the list of possible scales for it\u0027s own personal \u0022scale of 1.0.\u0022 So, when I use the same set of corrector values for the M scale with with L scale, the default of 1.0 for the large wheels gets applied with a corrector value of 1.3 to correspond with it\u0027s position in the value list. And yes, it\u0027s 1.3, not 1.25 as expected. It seems that the corrector is being rounded to the nearest tenth. Either that, or the \u003Cem\u003Edispla\u003C/em\u003E\u003Cem\u003Ey\u003C/em\u003E is being rounded and the actual value is correct. Might have something to do with the format defined in the code? hmm...\u003C/p\u003E\u003Cp\u003EAnyway, I\u0027ll get to the bottom of this eventually even if I end up reverting back to something like your original part configs. I\u0027m in too deep to give up on it now.\u003C/p\u003E\u003Cp\u003EEDIT2: I have good news. Everything is working. First off, a question for you, lo-fi. What exactly is the \u0022tweakScaleCorrector\u0022 variable doing for the KFWheel module? Specifically, I\u0027m talking about what it does for the module when being used by the tracks. The reason is this: I did something that I was pretty sure would not work, but it did and flawlessly too. I took the \u0022TWEAKSCALEEXPONENT\u0022 nodes and stuck them inside the \u0022SCALETYPE\u0022 node so that the exponent settings would apply only to a part that uses that scaletype. I suspected that the way Scaletype worked was that at run time the scaletype defined in the module would be swapped for all the settings that corresponded to that scaletype. Sorta like creating an array of data and giving it a variable name, then only having to reference that variable name to get all the data from that array. Since you can put exponent definitions inside the TweakScale module, I figure that they could also be brought into the config along with the scaletype. I had little hopes for success, but it worked. For wheels, this was never really an issue, but for Tracks it was pretty big that I get this figured out. The issue of the exponent being multiplied beyond reason is still there, I\u0027ve just gone around it by not defining an exponent for the KFWheel module, which is causing the problems because it is defined over and over in some of the parts. For the tracks, any fixes for the torque going bonkers on scale would have more to do with the module that controls steering and driving. Since that one is never defined more than once, the corrector variable is only scaled once. I tested it out with two types of tracks on a single vehicle (the mole and the mediums, the mole ones scaled down to 50%, the mediums scaled up to 125%) and first off, I got no clipping with the ground which I got before when KFWheel was being adjusted, and I got no strange torque issues which is why we started this whole process in the beginning. So, I don\u0027t believe that the tracks really need anything to be done to KFWheel. The wheel parts, however, I am unsure about. That\u0027s why I ask about their supposed function. I know that we had problems with the wheels not even functioning when scaled before. Either way, the wheels are still making modifications to both modules since a wheel only defined each module once, and the tracks are only defining a modification for the drive/steering module and so far no odd behavior. This also means I can probably return to using an exponent instead of the specific values. This also eliminates issues with the different scaletype sizes putting the corrector value at the wrong level because of the difference in the value position in the range of possible values for scale.\u003C/p\u003E\u003Cp\u003EI\u0027m quite excited right now as you might imagine. One thing that still bugs me is that the TS reading in the context menu during flight shows that the tweakScaleCorrector is being rounded to the nearest tenth. I\u0027m considering not worrying too much about that, and instead changing the intervals between the scales to 20% hops instead of 25% hops so that the values will remain at the tenth decimal place-value. This would also expand the flexibility of the system. For the time being, I am going to update the repository with the new fixed settings.\u003C/p\u003E\u003Cp\u003EEDIT3: Scratch some of what I just said... I just looked at my experimental settings and it turns out the tracks \u003Cem\u003Ewere\u003C/em\u003E using the KFwheel modification, and they still performed flawlessly with the exponents being defined in the way I have defined them. I don\u0027t know how to explain it, but it\u0027s all working now. I haven\u0027t yet tested if I can return the exponent back to a single number, as currently it\u0027s specifying the value directly, but it\u0027s working as it is. I guess I\u0027m better at doing this than I thought.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-13T03:55:59Z\u0022 title=\u002212/13/2014 03:55  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 13, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-13T17:31:55Z","Content":"\n\u003Cp\u003EGood stuff! I\u0027m really confused, but it it works, great \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EI had a problem with the parts causing massive frame rate drop (.5 fps) due to log spam after getting the latest changes, but the log entry was something related to resource flow so I\u0027m doubly confused now. No idea what\u0027s going on, but I\u0027ll keep you posted. I need to turn off the crazy auto scale thing, it\u0027s driving me completely insane too!\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-13T19:27:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEDIT2: I have good news. Everything is working. First off, a question for you, lo-fi. What exactly is the \u0022tweakScaleCorrector\u0022 variable doing for the KFWheel module? Specifically, I\u0027m talking about what it does for the module when being used by the tracks. The reason is this: I did something that I was pretty sure would not work, but it did and flawlessly too. I took the \u0022TWEAKSCALEEXPONENT\u0022 nodes and stuck them inside the \u0022SCALETYPE\u0022 node so that the exponent settings would apply only to a part that uses that scaletype. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027d just like to point out that putting these inside the SCALETYPE is exactly what I suggested you do =) Glad it works, though I can\u0027t REALLY take any credit since I have no idea why it would work inside SCALETYPE and not out - except in the case that, for some reason, doing it outside the SCALETYPE was conflicting with some other variable somehow (because defined globally?). That doesn\u0027t really make sense though, so...\u003C/p\u003E\u003Cp\u003EDon\u0027t know what was wrong with TweakScale 1.44 related to the tracks, but it lacks the autoscale feature and seems stable...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-13T19:41:26Z\u0022 title=\u002212/13/2014 07:41  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 13, 2014\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-13T19:46:52Z","Content":"\n\u003Cp\u003EAutoscale is supposedly something that will be made into a toggle in the future. I downloaded the source which suggests that the change has already been made, but I don\u0027t see \u003Cem\u003Ehow\u003C/em\u003E the toggle is done, nor do I see any evidence that isn\u0027t actually a working toggle yet. Either way, the source fails to compile in its current state.\u003C/p\u003E\u003Cp\u003EHey, I saw this a few minutes ago and it reminded me of your side project to make auto-leveling landing legs. It seems that with some IR, a bunch of really small trusses, a plethora of cosmetic fuel lines, and some stock landing legs the effect of auto-leveling can be achieved. I\u0027d like to see this guy repeat the process on a more extreme incline, but this first video is a success: \u003Ca href=\u0022https://youtu.be/omiCTc7Z2lg\u0022 rel=\u0022external nofollow\u0022\u003ELink\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI haven\u0027t changed resource consumption at all, so that\u0027s totally on your end. The scaling, as it is currently (I switched to intervals of 0.2 instead of 0.25 so that the TS readout would be equal to the scale. I think it increases flexibility.) seems to be stable for the time being and I have had no issues with it in my tests. Granted, I have yet to test the long tracks which were producing some really strange results, but I don\u0027t think I\u0027ll have any problems. What I don\u0027t understand is \u003Cem\u003Ehow\u003C/em\u003E I fixed it in the end. All I did was re-evaluate how the exponents are applied to the different scaletypes. It\u0027s a mystery, but I\u0027m not going to try and solve \u003Cem\u003Ethat\u003C/em\u003E just yet. I barely understand how the code even works, I\u0027m just trusting SharpDevelop when it tells me that something is wonky.\u003C/p\u003E\u003Cp\u003EAlso, if you\u0027re confused about what just happened over the last few pages of my various updates, don\u0027t feel bad. I confuse myself all the time. It\u0027s the part of my brain that works, but I\u0027m not too sure how. If we have learned anything from Quantum Weirdness (I\u0027m not sure which quantum science it\u0027s contained in, but my astronomy professor called it that) it\u0027s that there are some things in the universe that we are not supposed to know about, and/or cannot ever witness. If we were to solve these mysteries, the way in which it works would no longer be true and we would be left knowing nothing. Case in point, the way that light can be a particle and a wave. If we run the tests, we see both particle interaction and wave interaction. \u003Cem\u003EIf we \u003C/em\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cem\u003Eobserve\u003C/em\u003E\u003C/span\u003E\u003Cem\u003E the tests,\u003C/em\u003E however, then light begins to behave in only one of those two ways with all other test specifications exactly the same. This is try both of in-person observations and remote observations. Both within the test space and from outside the test space. It does not matter. Once we have witnessed the test in progress, the physics of light no longer works the way it is supposed to. Look it up, I\u0027m not kidding you here.\u003C/p\u003E\u003Cp\u003EThe good news is that all those suggested changes to the plugin need not be looked into anymore. I do need to look into something though that is in my custom modifications to your code. i have worked action groups for ride height (both for repulsors and the wheels/tracks) however, when I use a plugin like AGX (Action Groups Extended) which automatically selects all objects of the same part on a craft when adding actions to a group (by default, can be overridden but not very easily), Each press can change the ride height by 5*[number of parts being changed] for the entire set. So, I hit my \u00221\u0022 button and if i have a 3-wheels per side setup of wheels, I move by 30 for each button press. I should only move by 5 whether I am activating a single wheel for the change, or all of them. So, it\u0027s a bit of a thing I\u0027ll have to look at. I have it worked really well for repulsors, but you handle the change of ride height differently for those. That\u0027s probably where my problem is. I\u0027ll need to construct the function differently based on the different ways that height is managed. I don\u0027t want to further bother you with figuring this out, though. I\u0027m going to do some fiddling with my personal copy of your code and I\u0027ll get back to you. Lord knows I\u0027ve broken your code enough times and been forced to re-merge from a fresh copy to fix it. I\u0027m dangerous that way.\u003C/p\u003E\u003Cp\u003EOn that note, I use SharpDevelop (free software) to do my modifications and compiles. It works pretty well, and it has been letting me know that you have a lot of redundant \u0022use\u0022 items at the top of your code pages. It seems that some of them are not actually necessary. It\u0027s also been revealing a number of more efficient ways to make certain equations and function calls. Overall, I don\u0027t think it matters since, once the binary is compiled and all is set in stone, it pretty much works at the speed it\u0027s going to work either way. Still, there are a lot of interesting ways to do things that I\u0027m discovering. Quite fascinating.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-13T19:48:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AccidentalDisassembly\u0022 data-cite=\u0022AccidentalDisassembly\u0022\u003E\u003Cdiv\u003EI\u0027d just like to point out that putting these inside the SCALETYPE is exactly what I suggested you do =) Glad it works, though I can\u0027t REALLY take any credit since I have no idea why it would work inside SCALETYPE and not out - except in the case that, for some reason, doing it outside the SCALETYPE was conflicting with some other variable somehow (because defined globally?). That doesn\u0027t really make sense though, so...\u003Cp\u003EDon\u0027t know what was wrong with TweakScale 1.44 related to the tracks, but it lacks the autoscale feature and seems stable...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think the lack of autoscale, which many people mistake as a bug when in fact it\u0027s a feature that wasn\u0027t made into a toggle like it should have been, is the only real benefit of it.\u003C/p\u003E\u003Cp\u003EAs for \u003Cem\u003Ewhy\u003C/em\u003E my fix works, I have no clue either. But, it \u003Cem\u003Edoes\u003C/em\u003E work and it actually allows me some extra flexibility in how I define the scales and their correction values. Otherwise, I was severely limited due to how lo-fi has bundled his various ways of handling tracks/wheels/whatever in the same modules rather than making dedicated modules for each one. it sounds wonderful when making the plugin efficient and making the configs easy to write for different styles of locomotion, but for modifying things from other plugins it\u0027s a nightmare. I\u0027m just glad that TweakScale was developed with enough flexibility to allow the scaled values to be defined in a plethora of different ways. It makes the learning curve really steep, but in the end it\u0027s worth it. It\u0027s a bit like the English language. There are \u003Cem\u003Eso\u003C/em\u003E many different ways to say the exact same thing with you take into account accents from all around the world (half of them in the USA alone) and the different spellings between USA and British, and even Canadian ways of doing things... well, you get the picture. It\u0027s a nightmare to learn, but once you get to a certain point in that learning curve you begin to realize it\u0027s incredibly difficult to \u003Cem\u003Ebreak\u003C/em\u003E the language (so to speak) and you can get away with almost anything and still be understood. Then begins the long and arduous task of learning all those various ways to say things in an attempt to master it. The difference here is that I probably won\u0027t die of old age before mastering the different ways to define scales in TweakScale.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-13T19:57:45Z\u0022 title=\u002212/13/2014 07:57  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 13, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-13T20:33:24Z","Content":"\n\u003Cp\u003EActually, I could make it a lot simpler... I have and idea, back to you shortly.\u003C/p\u003E\u003Cp\u003EThis, by the way, will be necessary because of what I\u0027m about to create next... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT: Gaalidas, please don\u0027t hate me, but... The KFWheel modules look for the instance of KFModuleWheel in the part and use a bunch of values from it. It seemed to make sense, seeing as having multiple instances of KFWheel in the part is tricky, to have tweakScaleCorrector as one of those values that KFWheel pulls out of KFModuleWheel. So, as there will only ever be on instance of KFModuleWheel in a part, that\u0027s the only one you need worry about in your TS configs. I should have realised sooner, I\u0027ve just been so busy and barely keeping up with your latest work on TS. Works beautifully for me, let me know how you get on. Great work, the attachment nodes are much better and the various TS size ranges work really well. We might get there eventually after all!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-13T23:26:10Z\u0022 title=\u002212/13/2014 11:26  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 13, 2014\u003C/time\u003E by lo-fi\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2014-12-14T00:22:41Z","Content":"\n\u003Cp\u003EWell, there are actual bugs in 1.47 too, especially related to part mass - both on stock and on modded stuff. With regard to the modded stuff, anyway, it would make parts with MFT on them (or FS fuel switching, possibly, not sure) gain mass every time their scale was changed, so they got up to the billions of tons pretty quick.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2014-12-14T08:31:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022lo-fi\u0022 data-cite=\u0022lo-fi\u0022\u003E\u003Cdiv\u003EActually, I could make it a lot simpler... I have and idea, back to you shortly.\u003Cp\u003EThis, by the way, will be necessary because of what I\u0027m about to create next... \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT: Gaalidas, please don\u0027t hate me, but... The KFWheel modules look for the instance of KFModuleWheel in the part and use a bunch of values from it. It seemed to make sense, seeing as having multiple instances of KFWheel in the part is tricky, to have tweakScaleCorrector as one of those values that KFWheel pulls out of KFModuleWheel. So, as there will only ever be on instance of KFModuleWheel in a part, that\u0027s the only one you need worry about in your TS configs. I should have realised sooner, I\u0027ve just been so busy and barely keeping up with your latest work on TS. Works beautifully for me, let me know how you get on. Great work, the attachment nodes are much better and the various TS size ranges work really well. We might get there eventually after all!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf that\u0027s the case, then I can remove any changes to that variable being applied to the KFWheel module. That simplifies things even further. In fact, before reading this message I synced up my github copy and noticed you\u0027d made a few adjustments. I\u0027m getting ready to test another tweak to my action group expansion. I\u0027ve probably broken them further, but I\u0027ve been so lucky with TS lately, I\u0027m feeling like it might have a shot at actually working right out of the box. Glad to hear you\u0027re happy with the TS scales available. I admit, I did not test every part to see if those values worked, I merely gave it a reasonable guess and tested a few of the parts to see what would happen. I then got lazy and said \u0022here goes nothing\u0022 with my github update.\u003C/p\u003E\u003Cp\u003EAlso, don\u0027t feel bad you\u0027ve barely been keeping up with me. I barely keep up with myself sometimes. I look back at my forum posts and think to myself \u0022Did I really type that? What was I thinking?!\u0022\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-14T08:33:14Z\u0022 title=\u002212/14/2014 08:33  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 14, 2014\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-12-14T11:05:23Z","Content":"\n\u003Cp\u003ECool, I\u0027ve added your AG updates too, though I made some modifications so it won\u0027t trigger parts with the same group number too. This was what was causing the giant leaps in the numbers when using AG\u0027s, so I\u0027ve made allowances in the ApplySettings method for dealing with that when triggered from an AG.\u003C/p\u003E\u003Cp\u003EThere may well be some unused Use statements, it\u0027ll be a hangover from earlier code versions. I can\u0027t find a similar function in VS Express 2012, but according to the docs the compiler won\u0027t bother to include them if they\u0027re not actually used. If you\u0027d like to remove them, go for it, though. Efficiency savings will always be good!\u003C/p\u003E\n"}]}