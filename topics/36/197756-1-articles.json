{"TopicId":197756,"ForumId":36,"TopicTitle":"[WIP] [Planning/Feedback] Tech Tag Foundation - Part Grouping for easier Tech Tree Creation","CreatedByName":"DeltaDizzy","CreatedById":150755,"CreatedDateTime":"2020-10-28T02:59:54Z","PageNum":1,"Articles":[{"CreatedByName":"DeltaDizzy","CreatedById":150755,"CreatedDateTime":"2020-10-28T02:59:54Z","Content":"\n\u003Cp style=\u0022text-align:center;\u0022\u003E\n\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003ET\u003C/strong\u003Eech\u00A0\u003Cstrong\u003ET\u003C/strong\u003Eag\u00A0\u003Cstrong\u003EF\u003C/strong\u003Eoundation\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EBackground\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nFor some time now, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/165574-kerbalkore/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022165574\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/165574-kerbalkore/\u0022 rel=\u0022\u0022\u003E@KerbalKore \u003C/a\u003E\u00A0and I have been working on a pseudo-historical tech tree (named CWPT)\u00A0, with parallel American, Soviet, and European branches. The vast majority of the US branch\u00A0 uses Bluedog Design Bureau. However, BDB has several hundred parts, and configuring each one individually would be a mammoth undertaking. In light of this, we decided to instead \u0027tag\u0027 every part, thus allowing us to use tags to group parts and greatly lessen the workload. Soon enough, I realized this could also be helpful for other tech trees wanting to incorporate BDB, resulting in the decision to split out the tags into a standalone mod to be released first (after the tree itself has had months of delays due to IRL circumstances).\u00A0 I also realized that the tags as they exist now are not the best suited for generic use, as they group parts into the real rockets/spacecraft. This makes sense if you aim for a historical-ish progression, but not so good for a purely gameplay/balancing-focused progression.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow it works\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nTTF is essentially a giant ModuleManager patch that adds a single line to all supported parts of each supported mod:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n@PART[name]:FIRST:NEEDS[mod]\n{\n\t%techtag = tagName\n}\u003C/pre\u003E\n\u003Cp\u003E\nThen, when a tech tree mod loads, it can assign parts to nodes based on the tag, instead of the part name:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E@PART:HAS[#techtag[tagName]]\n{\n\t@TechRequired = nodeName\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nPart modders are also given the option to allow the tags to be added directly into the part configs, as is being done with BDB.\u0027\n\u003C/p\u003E\n\u003Cp\u003E\nNOTE:\n\u003C/p\u003E\n\u003Cp\u003E\nIt shouldn\u0027t really be an issue, but any patches that use or affect the tags MUST run before LAST[TechTagFoundation].\u00A0 Any custom fields inserted into part configs throw log warnings if they are still there when KSP compiles the parts. To avoid log spam all tags are removed from all parts in the aforementioned ModuleManager pass.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EThe Point\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nCurrently, the tags are simply the names of rocket stages or spacecraft, meant to align with the original goals of CWPT.\u00A0 In the interest of easing the burden on other tech tree makers, I am asking what level of granularity and what \u0027categories\u0027 of tags should be used.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-10-28T03:24:27Z\u0022 title=\u002210/28/2020 03:24  AM\u0022 data-short=\u00223 yr\u0022\u003EOctober 28, 2020\u003C/time\u003E by DeltaDizzy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2020-10-28T03:19:16Z","Content":"\n\u003Cp\u003E\nThis is a very nice idea. I have been unhappy with EL\u0027s tech-tree arrangements but have yet to do anything about it. One of the reasons for that was me being all too aware of tech tree mods. A system like this would make it it so I can arrange EL parts how I see fit for stock, but also group them logically and thus support those tech tree mods out of the box.\n\u003C/p\u003E\n"},{"CreatedByName":"hemeac","CreatedById":59783,"CreatedDateTime":"2020-10-28T05:20:23Z","Content":"\n\u003Cp\u003E\nIf I knew a few months ago when I started my tech tree mod what I know now about \u003Cabbr title=\u0022Module Manager (mod)\u0022\u003E\u003Cabbr title=\u0022Module Manager (mod)\u0022\u003EMM\u003C/abbr\u003E\u003C/abbr\u003E patching, I would probably have tried using a tag system for part placement.\u00A0 Think this is a really great idea on making tech trees modding more accessible.\u00A0 I would probably implement one using two tags: Branch and Tier.\u00A0 So may see\u00A0 something like techBranch = engine; techTier = 2 as that would help with the fact that I am using part upgrades and could use techTier as a basis to automatically place the partupgrade nodes in a later part of the branch.\u00A0 In my internal documents that list the name of the tech tree names, I have about 30 branches that indicate different technology types such as cockpits, structural parts and wings, command modules, etc.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, really great to hear about your work on CWPT, that is something I would be really interesting in using in a future campaign.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-10-28T05:21:48Z\u0022 title=\u002210/28/2020 05:21  AM\u0022 data-short=\u00223 yr\u0022\u003EOctober 28, 2020\u003C/time\u003E by hemeac\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"JadeOfMaar","CreatedById":167617,"CreatedDateTime":"2020-10-31T17:32:11Z","Content":"\n\u003Cp\u003E\nI\u0027ve wound up providing support for 3 tech trees in OPT Spaceplane Parts. (Updating existing CTT support; and creating support for Tetrix and RP-0). Fuselages and wings bundle up very nicely. Those are most of the parts, but the challenge remains in that the engines are truly various in nature so they still end up scattered pretty widely. With that and the rising provision for tech branches specific to solid and hydrolox rocketry, I\u0027ve seen the potential need to also tag engines by their propellant and possibly their type, in a more flexible but precise way than targeting the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EengineType \u003C/span\u003Ekey inside \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EModuleEngines(FX) {}\u003C/span\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nI see OPT\u0027s engines as hydrolox (so they are placed accordingly in the hydrolox branch) meanwhile Airplane Plus\u0027 engines would remain \u003Cabbr title=\u0022Liquid Fuel and Oxidizer\u0022\u003E\u003Cabbr title=\u0022Liquid Fuel and Oxidizer\u0022\u003ELFO\u003C/abbr\u003E\u003C/abbr\u003E. OPT also has scramjet and TBCC engines, plus RP-0 has an actual \u003Cstrong\u003EScramjets \u003C/strong\u003Etech node so I populated that.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223873826\u0022 data-ipsquote-contentid=\u0022197756\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221603862423\u0022 data-ipsquote-userid=\u002259783\u0022 data-ipsquote-username=\u0022hemeac\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 10/28/2020 at 1:20 AM, hemeac said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo may see\u00A0 something like techBranch = engine; techTier = 2\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFollowing that I would see something like \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003EtechEngineFuel, techEngineType\u003C/span\u003E happening. It would be like the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Esubcategory = 0\u003C/span\u003E key/value you see in many part configs but actually useful in this case. This key pairing would allow for great precision whereas stock ( engineType) just has SOLID_BOOSTER, LIQUIDFUEL, TURBINE, NUCLEAR, ELECTRIC...\u00A0 but we would want to see:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022com\u0022\u003E// Choose one value for each key or don\u0027t set the key.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// The part can be targeted for defaults in the asbence of the key(s)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// First listed value is the default\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Propellant dimension\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\ntechEngineFuel \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E liquid\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E solid\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hydrogen\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E methane\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E mono\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E air\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E atm\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E metal\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E electric\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E exotic\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Class dimension\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\ntechEngineType \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rocket\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E hybridEngine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E propfan\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E turbojet\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E ramjet\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E scramjet\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E atomicjet\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E atomicrocket\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E ion\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E torch\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// * exotic is a catch-all for sci-fi and fantasy fuels like \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//  USI\u0027s Karborundum, WBI\u0027s Graviolium, OPT Dark Goo, Taurusfecallium...\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// * air vs atm is to distinguish between air-breathing engines \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// that rely on Oxygen or can do without. See IntakeAir vs IntakeAtm usage.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// * hybridEngine can refer to either hybrid solids that accept \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// SolidFuel \u002B a liquid Oxidizer, \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// or engines that are jet \u002B rocket like the RAPIER.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// * ramjet may not be popular now but I\u0027m making use of it myself in engine concepts.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-10-31T18:04:17Z\u0022 title=\u002210/31/2020 06:04  PM\u0022 data-short=\u00223 yr\u0022\u003EOctober 31, 2020\u003C/time\u003E by JadeOfMaar\u003C/strong\u003E\n\u003C/span\u003E\n"}]}