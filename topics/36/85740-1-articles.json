{"TopicId":85740,"ForumId":36,"TopicTitle":"PartReplacement Prototype v1","CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-09-30T03:01:53Z","PageNum":1,"Articles":[{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-09-30T03:01:53Z","Content":"\n\u003Cp\u003ETo anyone who has been following #KSPModders or myself over the last 3 days this is not much of a surprise, but I have been developing a proof of concept for a centralized project that will allow other mods to modify the behavior of certain classes in KSP\u0027s Part class, with minimal conflict between us.\u003C/p\u003E\u003Cp\u003EThe concept is simple, certain methods in Part are virtual, these can be overridden already, but the way that it currently works is that you must make a class which inherits from Part and then edit all the cfg files (or use an MM patch) to make every part you care about use your class. The problem here is that every part has only a single class such as this, so if there exist two projects which need to do this, they are inherently incompatible with each other. PartReplacement steps in to fix this, and replaces the class itself, but then offers an Event style system for other assemblies to tap in and access things happening, or change how those things happen. So the two projects instead of making their own Part replacement, interface with this one, and can now be compatible with each other. There do remain, and will always remain situations where there can be only one, but many of the reasons you would override Part are completely unrelated to each other.\u003C/p\u003E\u003Cp\u003EAs it stands this is only a prototype and proof of concept. In my testing it does function, and presents a standard for expansion; but it does not yet offer access to every virtual class in Part, as that is simply time consuming. I am only aware of a single bug in the current implementation, if during a flight the player reverts to launch, and presumably reverts to quicksave, some object reference is broken and an NRE spam results. I don\u0027t entirely understand where so I\u0027m not going to let that stand in the way.\u003C/p\u003E\u003Cp\u003EPlease understand that this is not ready for distribution to users\u003C/p\u003E\u003Cp\u003EPlease also understand that this is very much a Request For Comments\u003C/p\u003E\u003Cp\u003EPartReplacement is available here \u003Ca href=\u0022https://github.com/Greys0/Virgin-Kalactic/blob/master/Source/Virgin_Kalactic/BetterPart/PartReplacement.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Greys0/Virgin-Kalactic/blob/master/Source/Virgin_Kalactic/BetterPart/PartReplacement.cs\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThere are two classes contained, \u003C/p\u003E\u003Cp\u003E-PartTapIn, which via an MM patch is set to be the PART.module for all parts during the loading process\u003C/p\u003E\u003Cp\u003E-PartEventTypes, this contains the types that are instantiated in PartTapIn to form the event system, there are only two types currently but this will be expanded as necessary;\u003C/p\u003E\u003Cp\u003EThough I am trying to keep all the event types as generic as possible so they can be reused\u003C/p\u003E\u003Cp\u003EPartTapIn contains the instantiated events, OnRequestResource and OnResourceRequested, and a type casting funnel to cover the six different overloads of Part.requestResource(), bringing them all down to a single point.\u003C/p\u003E\u003Cp\u003EAt that point the request is passed to OnResourceRequested to be fulfilled, and the results are then broadcast to OnRequestResource. I personally find the nomenclature at this point a bit easily confused, if anybody has a better naming scheme for these two events I\u0027d be glad to hear it.\u003C/p\u003E\u003Cp\u003EWithout any other action, PartTapIn defaults to sending the OnResourceRequested event to the original handler from KSP, so until another assembly sets it otherwise, the original behavior is maintained.\u003C/p\u003E\u003Cp\u003ELike I said, I have not populated the rest of the virtual classes, but it should at this point only be a matter of deciding on an event type that will work for it, making that if needed, and then assembling the event instance and override.\u003C/p\u003E\u003Cp\u003EI have also updated my TrackResource system, entirely rewritten actually; to use this new interface and test that it works, you can see that here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/Greys0/Virgin-Kalactic/blob/master/Source/Virgin_Kalactic/TrackResource/TrackResource.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Greys0/Virgin-Kalactic/blob/master/Source/Virgin_Kalactic/TrackResource/TrackResource.cs\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYou can see on lines 43-46 how I add the ResourceStats instance to every part\u0027s OnRequestResource throughout the vessel; but if you were running from a PartModule you\u0027d only need the regular part reference\u003C/p\u003E\u003Cp\u003ESo, big questions, is this a good way to do this? How can I improve the nomenclature? What\u0027s the next most important method to expand this to? Anybody know where that object reference went? (error log to follow)\u003C/p\u003E\u003Cp\u003EReally anything.\u003C/p\u003E\u003Cp\u003ERegarding Licensing. I do not care whatsoever about having my name attached to this project, I\u0027m pretty proud of what I\u0027ve achieved and that\u0027s good enough. But, the reason this project exists is as a sort of solution to the There Can Only Be One problem that comes along with overriding Part, as such I really want to dissuade any competing PartReplacement projects. I have to begin with licensed this as all rights reserved to the Virgin Kalactic Group, I am willing to discuss changes to this.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-09-30T03:10:54Z","Content":"\n\u003Cp\u003EHere is the complete log exemplifying the NRE that results from reverting-to-launch\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://gist.github.com/Greys0/70fec163ca1677f17803\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://gist.github.com/Greys0/70fec163ca1677f17803\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ENullReferenceException: Object reference not set to an instance of an object\u003Cbr\u003E  at Part.requestResource (.Part origin, Int32 resourceID, ResourceFlowMode flowMode, Double demand, Int32 requestID) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at Part.RequestResource (System.String resourceName, Double demand, ResourceFlowMode flowMode) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at PartReplacement.PartEventTypes\u002BSingleCallBack3Arg\u00604[System.Double,System.String,System.Double,ResourceFlowMode].Invoke (System.String arg1, Double arg2, ResourceFlowMode arg3) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at PartReplacement.PartTapIn.RequestResource (System.String resourceName, Double demand, ResourceFlowMode flowMode) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at PartReplacement.PartTapIn.RequestResource (System.String resourceName, Double demand) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at PartReplacement.PartTapIn.RequestResource (Int32 resourceID, Double demand) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ModuleReactionWheel.ActiveUpdate () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ModuleReactionWheel.FixedUpdate () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"CaptRobau","CreatedById":41695,"CreatedDateTime":"2014-09-30T08:04:36Z","Content":"\n\u003Cp\u003ESo does this allow plugin developers to write plugins or part developer to write plugin-like changes?\u003C/p\u003E\n"},{"CreatedByName":"Justin Kerbice","CreatedById":101695,"CreatedDateTime":"2014-09-30T12:58:05Z","Content":"\n\u003Cp\u003E@CaptRobeau: is for plug-in developers, it allows to make something I may called a \u0022shared child class\u0022 among various plug-in (basic OO programming: you can create a child class from any existing classes, to add more features or specific feature, ie: make a ModuleEngines to use 3 propellants, and another plug-in which play with ModuleEngines class can do its stuff and both can work together, which is not possible basically)\u003C/p\u003E\u003Cp\u003E@Greys: I suggest you to find another title, PartReplacement is very confusing.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2014-09-30T21:14:10Z","Content":"\n\u003Cp\u003EOk so both of you are pretty far off, Justin is closer but critically incorrect, and I believe the best way to explain this is a short class on how plugins in KSP work\u003C/p\u003E\u003Cp\u003ECoding for KSP consists primarily of exploiting two mechanisms for making code run, MonoBehaviors, and PartModules, now the tricky part here is that almost everything is a monobehavior.\u003C/p\u003E\u003Cp\u003EMonobehavior is a class provided by Unity which has access to a set of event-like systems for making code run when you want it to, mostly by using the KSPAddon attribute to control what scene the code fires on, and specifically named methods that Unity looks for and executes as needed.\u003C/p\u003E\u003Cp\u003EPartModule is a class provided by KSP which is itself a monobehavior, with additional built in fields and methods that define a context, the big two are part, an instance of Part, and vessel, an instance of Vessel (you\u0027ll see this theme a lot in Squad\u0027s code)\u003C/p\u003E\u003Cp\u003EPartModules get executed by being added to a Part instance\u0027s Modules object (part.Modules), usually via cfg file. The intent of PartModules is to section off functionality so they can be applied to any part, and any part can have many of them, allowing for the mixing of features with minimal custom code.\u003C/p\u003E\u003Cp\u003EPartReplacement has Nothing to do with PartModules.\u003C/p\u003E\u003Cp\u003EAs mentioned there is a class Part which is instantiated for every part that actually exists. Now Part is what remains of an older system intended to allow for the reuse of functionality, Module, or PART{module=Part} in a cfg file. The problem with Modules is that the Part instance can only have one Module, so you can\u0027t mix features provided by Modules. Over time Squad has deprecated most of the Modules by converting their functions into PartModules, but there are a few notable remaining Modules, Part is likely to stay forever, but there\u0027s also FuelDuct and Strut, which are a weird sort of magical mystery box of disappointment and anger when you look into how they work.\u003C/p\u003E\u003Cp\u003EMuch of the base features that PartModules make use of to actually achieve stuff is defined within Part, or within Vessel. For example, if a PartModule wishes to charge a resource cost for the use of it\u0027s function, such as engines burning fuel to produce thrust, they do so via part.requestResource() (remember, lowercase p is the Part instance). This is all great unless you don\u0027t like how Squad decided to make something work, or want to expand upon it.\u003C/p\u003E\u003Cp\u003EIf you want to change the way something in Part works, you can, maybe. Because Modules are defined per part in the cfg file, you can make a class that inherits from Part (public class BetterPart : Part), and then change the cfg files to use your class instead. The limiting factor is whether you can override the methods that provide the function you want to change, and a good handful of them are Virtual, so you can override them, but most are not. The other limiting factor is that you cannot change signatures, if the class you\u0027re overriding took 3 arguments of these types and returned a float; you must also take 3 arguments of those types and return a float. You can of course add wholly new methods without issue, and this can be very useful for adding new functionality; or circumventing access levels.\u003C/p\u003E\u003Cp\u003EAnd here is the problem.\u003C/p\u003E\u003Cp\u003EThere Can Be Only One Module On A Part.\u003C/p\u003E\u003Cp\u003ESo if I make a class that inherits from Part, and you make a class that inherits from Part, and our classes do completely unrelated things to Part, only one of us gets to make a given part use our Module.\u003C/p\u003E\u003Cp\u003EThat is what PartReplacement solves. it Replaces Part and slips in a system that lets other assemblies insert changes to the Part instance through it. Thus, now two plugins that want to make unrelated changes to Part, can do so and be compatible with each other.\u003C/p\u003E\u003Cp\u003EPartReplacement is exactly what it is, if you found the name confusing it meant that you didn\u0027t understand what this project does.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-09-30T21:31:44Z","Content":"\n\u003Cp\u003Etl;dr It modularizes some things that PartModule doesn\u0027t already.\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2015-03-23T16:39:54Z","Content":"\n\u003Cp\u003EAs mentioned in the main Virgin Kalactic thread, I am releasing this project under MIT as of now, and will no longer be developing it myself. Repository is in the first post, if anybody cares, have at it.\u003C/p\u003E\n"}]}