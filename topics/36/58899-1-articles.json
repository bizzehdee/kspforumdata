{"TopicId":58899,"ForumId":36,"TopicTitle":"Need help developing a science station mod","CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-05T01:30:49Z","PageNum":1,"Articles":[{"CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-05T01:30:49Z","Content":"\n\u003Cp\u003EOk, I am working on a mod where I am attempting to make space stations more valuable in career mode. What I am doing is creating a new part/module that consumes electrical energy and a new resource \u0022Snacks\u0022 to gain science. The way it works is it calculates how long it has been running \u002B the amount of kerbals - their stupidity. My aim is for it to generate roughly \u002B100 science per Kerbin year in high Kerbin orbit (should be somewhat more if players manage to get it into orbit around other celestial bodies). The idea is that players could use it as a little surplus of science in-between interplanetary missions but not spam it. Requiring \u0022Snacks\u0022 also means players will have to do some station upkeep without resorting to hard mode methods like food and oxygen supply that kill kerbals.\u003C/p\u003E\u003Cp\u003ENow I have this 80% working already, even have custom models and everything but I am having problems with two things. One, the module is extended from theModuleScienceExperiment and simply sets the experiment basevalue, science cap, and datascale depending on how much \u0022research\u0022 has been done when the player activates the experiment. Part of my problem is I don\u0027t know how these values actually control the science. For example if I want the science gained to be exactly \u002B24 how would I manipulate the variables to reflect that?\u003C/p\u003E\u003Cp\u003ESecondly, once the experiment has been transmitted, it losses scientific value, that\u0027s fine for normal experiments but I need this one to be reset each time because it represents scientists doing different research projects each time. For example if the player has had the station in orbit for a year and sends \u002B100 data back to Kerbin, then waits another Kerbin year, rather than getting another \u002B100 like I want them to, they would get \u002B0 or \u002B50 since so far as the game is concerned the experiment has already been done. I need it to consistently return 100% of the science regardless of repeat experiments.\u003C/p\u003E\u003Cp\u003EThank you in advance for anyone who can help me figure this out : )\u003C/p\u003E\u003Cp\u003Ecode below\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// My first part!\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003Epublic class ScienceTrickle : ModuleScienceExperiment\u003Cbr\u003E{\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = false)]\u003Cbr\u003E\tprotected float last_active_time;\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = true)]\u003Cbr\u003E\tprotected bool IsEnabled;\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = false)]\u003Cbr\u003E\tprotected float ResearchTime;\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = true)]\u003Cbr\u003E\tprotected string CurrentPaper;\u003Cbr\u003E\u003Cbr\u003E\tprotected float crew_capacity_ratio;\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = false)]\u003Cbr\u003E\tprotected double StoredScience;\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = true, guiActive = true)]\u003Cbr\u003E\tprotected float RecordedData;\u003Cbr\u003E\u003Cbr\u003E\tprotected float LastCheckTime = 5;\u003Cbr\u003E    /// \u0026lt;summary\u0026gt;\u003Cbr\u003E    /// Called when the part is started by Unity.\u003Cbr\u003E    /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E    public override void OnStart(StartState state)\u003Cbr\u003E    {\u003Cbr\u003E\t\tbase.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E        // Check our crew\u003Cbr\u003E\t\tcrew_capacity_ratio = ((float)part.protoModuleCrew.Count) / ((float)part.CrewCapacity);\u003Cbr\u003E\u003Cbr\u003E\t\t//make sure we check the science when we startup\u003Cbr\u003E\t\tLastCheckTime = 5;\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\t//Begin Research Button\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Begin Research\u0022, active = true)]\u003Cbr\u003E\tpublic void BeginResearch() \u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (crew_capacity_ratio == 0) { return; }\u003Cbr\u003E\t\tlast_active_time = (float)Planetarium.GetUniversalTime();\u003Cbr\u003E\t\tStoredScience = 0;\u003Cbr\u003E\t\tRecordedData = 0;\u003Cbr\u003E\t\tIsEnabled = true;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t//Stop Research Button\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Stop Research\u0022, active = true)]\u003Cbr\u003E\tpublic void StopActivity() \u003Cbr\u003E\t{\u003Cbr\u003E\t\tIsEnabled = false;     \u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic void CheckFindings()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t/*\u003Cbr\u003E\t\t//find time passed\u003Cbr\u003E\t\tdouble now = Planetarium.GetUniversalTime();\u003Cbr\u003E\t\tdouble time_diff = Math.Round(now - last_active_time);\u003Cbr\u003E\t\t//correct negitive time (wait what does that even mean?!)\u003Cbr\u003E\t\tif(time_diff \u0026lt; 0) time_diff = 0;\u003Cbr\u003E\t\t*/\u003Cbr\u003E\t\t//set altitude mod\u003Cbr\u003E\t\tfloat altitude_multiplier = (float)(vessel.altitude / (vessel.mainBody.Radius));\u003Cbr\u003E\t\taltitude_multiplier = Math.Max (altitude_multiplier, 1);\u003Cbr\u003E\u003Cbr\u003E\t\t//crew mod\u003Cbr\u003E\t\tfloat CrewMod = 0;\u003Cbr\u003E\u003Cbr\u003E\t\t//calculate crew contributions\u003Cbr\u003E\t\tforeach (ProtoCrewMember proto_crew_member in part.protoModuleCrew)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tCrewMod \u002B= 1 - proto_crew_member.stupidity;\u003Cbr\u003E\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t//compute science gain  (should gain ~100 science per crew per kerbin year if in orbit around kerbin)\u003Cbr\u003E\t\tdouble science_to_add = /*time_diff*/ CrewMod;\u003Cbr\u003E\u003Cbr\u003E\t\t//add collected science\u003Cbr\u003E\t\tStoredScience \u002B= science_to_add;\u003Cbr\u003E\u003Cbr\u003E\t\tRecordedData = Mathf.Round((float)StoredScience);\u003Cbr\u003E\t\tbase.experiment.baseValue = (float)RecordedData;\u003Cbr\u003E\t\tbase.experiment.scienceCap = (float)RecordedData;\u003Cbr\u003E\t\tbase.experiment.dataScale = (float)RecordedData;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t//Always Update\u003Cbr\u003E\tpublic override void OnUpdate() \u003Cbr\u003E\t{\u003Cbr\u003E\t\t//if the modual is suposed to be making science!\u003Cbr\u003E\t\tif(IsEnabled)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tfloat ResourceDraw = part.protoModuleCrew.Count;\u003Cbr\u003E\t\t\tif(ResourceDraw \u0026gt; 0 \u0026amp;\u0026amp; part.RequestResource(\u0022ElectricCharge\u0022, ResourceDraw * 0.25f) \u0026gt;= ResourceDraw * 0.25f)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tResearchTime \u002B= (float)Planetarium.GetUniversalTime() - (float)last_active_time;\u003Cbr\u003E\t\t\t\tfloat Percent = (ResearchTime / 864000) * 100;\u003Cbr\u003E\t\t\t\tCurrentPaper = 0.01 * Math.Round(Percent * 100) \u002B \u0022%\u0022;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tif(ResearchTime \u0026gt;= 864000)\u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tif(part.RequestResource(\u0022Snacks\u0022, ResourceDraw) \u0026gt;= ResourceDraw)\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\tResearchTime = 0;\u003Cbr\u003E\t\t\t\t\t\tlast_active_time = (float)Planetarium.GetUniversalTime();\u003Cbr\u003E\t\t\t\t\t\tCheckFindings();\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\telse\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\t//shutdown if out of snacks\u003Cbr\u003E\t\t\t\t\t\tIsEnabled = false;\u003Cbr\u003E\t\t\t\t\t\tprint (\u0022Not enough snacks, shutting down\u0022);\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\t//shutdown if out of power\u003Cbr\u003E\t\t\t\tIsEnabled = false;\u003Cbr\u003E\t\t\t\tprint (\u0022Not enough power, shutting down\u0022);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tbase.OnUpdate();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t//In Game Update\u003Cbr\u003E\tpublic override void OnFixedUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t//last_active_time = (float)Planetarium.GetUniversalTime ();\u003Cbr\u003E\u003Cbr\u003E\t\tbase.OnUpdate();\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E/*\u003Cbr\u003E\u003Cbr\u003E   if (active_mode == 0) { // Science persistence\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E             ResearchAndDevelopment.Instance.Science = ResearchAndDevelopment.Instance.Science \u002B (float)StoredScience;\u003Cbr\u003E\u003Cbr\u003E*/\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-05T01:36:43Z\u0022 title=\u002201/05/2014 01:36  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 5, 2014\u003C/time\u003E by CiberX15\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"miracmert","CreatedById":67128,"CreatedDateTime":"2014-01-05T02:13:25Z","Content":"\n\u003Cp\u003EHey there! That sounds interesting, because the mod I will be making is adding cargo spaces in command pods so that player can decide how much \u0022snack\u0022 and oxygen will be stored in the space ship. My goal was to make space station resupply missions have a purpose. I cannot help with coding though, since I am newly learning C# . However, after you solve the problem and release your mod, my mod will be compatible with yours! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-01-05T03:48:41Z","Content":"\n\u003Cp\u003EWhat are you setting the science value cap at? If you put the base value at 100, you could put the cap at 5000 or something like that and see what happens.\u003C/p\u003E\n"},{"CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-05T05:15:06Z","Content":"\n\u003Cp\u003EAt the moment I am setting all of the values to the same number, this seems to return predictable numbers the first time I submit the data. It would really help if someone could explain what each variable does : { Can I assume The science value cap is the maximum amount of science that can be gained from an experiment at a given location/altitude?\u003C/p\u003E\u003Cp\u003EIf so that would actually work out alright since it would force players to eventually build stations further and further into space, but only after having exhausted an area.\u003C/p\u003E\n"},{"CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-05T05:40:23Z","Content":"\n\u003Cp\u003EOk I think I have it working Acceptably based on the above (Thanks DMagic).\u003C/p\u003E\u003Cp\u003EI set the science cap to 5000 so (assuming I was correct above) the maximum science that can be mined from any given location/altitude is 5000. For balance I will may lower this to 1000 to encourage players to build new stations around other celestial bodies and give players a valid reason to de-orbit their space stations (which is arguably more fun than putting them up in the first place).\u003C/p\u003E\u003Cp\u003EAlso, for anyone having similar issues I changed the lines:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ERecordedData = Mathf.Round((float)StoredScience);\u003Cbr\u003Ebase.experiment.baseValue = (float)RecordedData;\u003Cbr\u003Ebase.experiment.scienceCap = (float)RecordedData;\u003Cbr\u003Ebase.experiment.dataScale = (float)RecordedData;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ERecordedData = Mathf.Round((float)StoredScience);\u003Cbr\u003Ebase.experiment.baseValue = (float)RecordedData;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhich seems to have solved my unpredictable science returns issue.\u003C/p\u003E\u003Cp\u003EIt\u0027s 12:30am here so I am going to head to bed, but with these issues resolved you will probably see the mod going up sometime tomorrow(today). Ill post a link here when I have one : )\u003C/p\u003E\n"},{"CreatedByName":"landeTLS","CreatedById":97925,"CreatedDateTime":"2014-01-05T15:47:01Z","Content":"\n\u003Cp\u003EThis looks cool. Good luck. Ill defidently be using this\u003C/p\u003E\n"},{"CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-05T16:34:11Z","Content":"\n\u003Cp\u003EAnd Here it is : \u003Ca href=\u0022http://kerbalspaceprogram.com/ciber-x-labs-5/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kerbalspaceprogram.com/ciber-x-labs-5/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Ehope you enjoy! (let me know if you find any bugs; )\u003C/p\u003E\n"},{"CreatedByName":"miracmert","CreatedById":67128,"CreatedDateTime":"2014-01-05T18:27:54Z","Content":"\n\u003Cp\u003ECongratz for the mod! Downloading right now \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"CiberX15","CreatedById":68461,"CreatedDateTime":"2014-01-06T01:56:19Z","Content":"\n\u003Cp\u003Efound another bug that I could use some help solving 8 0\u003C/p\u003E\u003Cp\u003EThe system works fine as long as there is only one Lab in use at any given time. But because an active lab changes the Experiment.BaseValue all other labs besides the first lab act very strangely. I think perhaps I need to have each lab dynamically generate its own uniquely named Experiments at run time. There only needs to be one experiment definition per lab since each lab would overwrite the data each time they record their findings, but they need to be separate so that lab B does not read lab A\u0027s experiment definition.\u003C/p\u003E\u003Cp\u003EThanks In advance...\u003C/p\u003E\u003Cp\u003E...Again 8 P\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-06T01:59:25Z\u0022 title=\u002201/06/2014 01:59  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 6, 2014\u003C/time\u003E by CiberX15\u003C/strong\u003E\n\u003C/span\u003E\n"}]}