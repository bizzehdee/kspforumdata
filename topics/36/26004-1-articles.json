{"TopicId":26004,"ForumId":36,"TopicTitle":"[Question] How to apply post processing to KSP Flight scene camera","CreatedByName":"EndeavourCmdr","CreatedById":64194,"CreatedDateTime":"2013-05-08T08:11:06Z","PageNum":1,"Articles":[{"CreatedByName":"EndeavourCmdr","CreatedById":64194,"CreatedDateTime":"2013-05-08T08:11:06Z","Content":"\n\u003Cp\u003EI have created a button which displays on the Main GUI during the flight scene. When this button is pressed, I would like to apply a post processing shader to the entire final rendered scene, including ships, scenery.. everything.\u003C/p\u003E\u003Cp\u003ERight now I have created a Material object and passed in the string contents of the CG shader.\u003C/p\u003E\u003Cp\u003EI then call Graphic.Blit like this:\u003C/p\u003E\u003Cp\u003E void OnRenderImage(RenderTexture source, RenderTexture dest)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E if (currentMaterial != null)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E Graphics.Blit(source, dest, currentMaterial);\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003EcurrentMaterial is set to the shader material upon the press of the button.\u003C/p\u003E\u003Cp\u003EFor some reason however, pressing the button, while showing that the correct code segment has been reached via some debugging in the log, no post processing effects occur on the main camera.\u003C/p\u003E\u003Cp\u003EAnyone have insight into this?\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-05-08T11:49:39Z","Content":"\n\u003Cp\u003EI\u0027ve not tinkered with this aspect but I\u0027d guess you\u0027ve got it attached to the wrong camera. How are you grabbing the camera? FlightCamera.fetch.cameras[0]?\u003C/p\u003E\n"},{"CreatedByName":"EndeavourCmdr","CreatedById":64194,"CreatedDateTime":"2013-05-08T13:39:16Z","Content":"\n\u003Cp\u003EMaybe that is the problem. I didn\u0027t actually try to grab any camera. I attempted to apply it simply using Graphics.Blit()\u003C/p\u003E\u003Cp\u003EI did do one attempt using a slightly different method where I used transform.camera.SetReplacementShader, but I was unable to figure out how to implement the shader itself using this method. I can define a shader in C# by passing the shader contents in as a string to a new Material object, but the SetReplacementShader method does not accept string contents like the Material object does. I\u0027m hoping someone has experience with something like this and can give some clues as to how they implemented it.\u003C/p\u003E\n"},{"CreatedByName":"EndeavourCmdr","CreatedById":64194,"CreatedDateTime":"2013-05-09T10:10:20Z","Content":"\n\u003Cp\u003EDoes the maker of Lazor frequent the forums still? I am guessing that he might know how to accomplish this.\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-05-09T12:48:32Z","Content":"\n\u003Cp\u003ETake a look at this: \u003Ca href=\u0022http://docs.unity3d.com/Documentation/ScriptReference/GameObject.AddComponent.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Documentation/ScriptReference/GameObject.AddComponent.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s the Unity Script Reference page for adding components through script, so all you have to do is find the correct camera and add an image effect component (KSP should have them imported...) via this method to add the post processing. You may have to tinker around with implementing the image effect components into the plugin if KSP doesn\u0027t have them.\u003C/p\u003E\u003Cp\u003EThere\u0027s most certainly other ways to do it, and since plugin developers have to publicize their source code you can take a look at the Lazor System code to see how Romfarer applies the black/white effect to the docking camera.\u003C/p\u003E\n"}]}