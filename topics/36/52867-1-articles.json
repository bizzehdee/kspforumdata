{"TopicId":52867,"ForumId":36,"TopicTitle":"Get vessel position in PQS coordinates","CreatedByName":"mic_e","CreatedById":60757,"CreatedDateTime":"2013-11-12T18:16:27Z","PageNum":1,"Articles":[{"CreatedByName":"mic_e","CreatedById":60757,"CreatedDateTime":"2013-11-12T18:16:27Z","Content":"\n\u003Cp\u003EHi,\u003C/p\u003E\u003Cp\u003Ewhat methods and transformations are required to calculate the vessel position in PQS coordinates (those that are accepted by the pqsController.RayIntersection method)?\u003C/p\u003E\u003Cp\u003EWhat if I am looking for the position at some point (in seconds) in the future?\u003C/p\u003E\u003Cp\u003EUnfortunately, the best \u0027documentation\u0027 I seem to find on this topic are the method names in the Vessel/CelestialBody/PQS APIs...\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-11-12T20:08:44Z","Content":"\n\u003Cp\u003EGiven the message signature is:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic bool RayIntersection(Vector3 worldStart, Vector3 worldDirection, out Vector3d intersection)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027d imagine it\u0027s in worldspace co-ordinates, so it\u0027s simply vessel.transform.position (or .position of whatever transform you want to use to represent the vessel).\u003C/p\u003E\u003Cp\u003EThe future generally is obviously not predictable as it depends on user control inputs, so you have a specific circumstance in mind?\u003C/p\u003E\n"},{"CreatedByName":"mic_e","CreatedById":60757,"CreatedDateTime":"2013-11-12T20:33:48Z","Content":"\n\u003Cp\u003EThank you for your reply!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe future generally is obviously not predictable as it depends on user control inputs, so you have a specific circumstance in mind? \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m talking about the future where the vessel simply follows its normal orbit (no atmospheric or engine acceleration). One of the main problems I\u0027m seeing here is that the body will of course rotate, so I assume I\u0027d require additional transformations...\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-11-12T20:50:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mic_e\u0022 data-cite=\u0022mic_e\u0022\u003E\u003Cdiv\u003EOne of the main problems I\u0027m seeing here is that the body will of course rotate, so I assume I\u0027d require additional transformations...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m not familiar with how the orbits are given. If they do give out a vector relative to the planet then planet.transform.TransformPoint(orbitPosition) will convert it to a world space vector. I wouldn\u0027t be surprised if they gave out the position in world space directly though.\u003C/p\u003E\u003Cp\u003EEDIT: Where planet should be the relevent object of type CelestialBody\u003C/p\u003E\n"},{"CreatedByName":"mic_e","CreatedById":60757,"CreatedDateTime":"2013-11-12T21:07:15Z","Content":"\n\u003Cp\u003ESo, world space is the camera coordinate system, right?\u003C/p\u003E\u003Cp\u003EI failed to mention in my original post that I already DO have code to determine longitude, latitude and altitude for a specific timepoint, which might simplify the problem a lot.\u003C/p\u003E\u003Cp\u003ESo a way to convert from long/lat/alt to a PQS vector would be OK, too...\u003C/p\u003E\u003Cp\u003ECurrently, I\u0027m having the impression that the PQS system (= world system?) does not rotate with the result of the Ray casting method would vary with the time when it is called...\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-11-13T00:14:57Z","Content":"\n\u003Cp\u003EWorld space is the top level co-ordinate system, it\u0027s sort of used in unity as the common reference when it would be too tiresome to translate up and down manually. Every transform has built in methods ((Inverse)TransformPoint/Direction) to translate to and from it.\u003C/p\u003E\u003Cp\u003EThe PQS classes are Components (Monobehaviours) that are attached to the GameObject representing a planet (or a child) and seem to handle the terrain and features of that planet. There are various other components that go to make up \u0027the planet\u0027 like CelestialBody and OrbitDriver. I don\u0027t actually know how the rotation is handled though, whether the planetary GameObject is rotated or whether the information is stored in one of the components. Although the former seems at first glance as if it would be much simpler I haven\u0027t actually checked the object to see whether it\u0027s rotation values change over time.\u003C/p\u003E\u003Cp\u003EThe planetary GameObjects are named after their planet, Kerbin, Eeloo, The Sun etc. or you can just grab the object that a handy relevant component is attached to (e.g. CelestialBody). Last time I checked there were actually two objects for each planet with the same name, a parent and child, but I don\u0027t know what that\u0027s about (it may even just had been a bug in my code).\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2013-11-13T02:46:20Z","Content":"\n\u003Cp\u003EYou can get worldspace from your lat/long/alt. I think it\u0027s GetWorldSpacePosition or something like that. Planetary rotation is computed by that function based on the celestial body\u0027s directRotation (the directRot angle is applied as a rotation to the worldspace vector which the latitude and longitude, unrotated, yield, I presume).\u003C/p\u003E\u003Cp\u003EIt\u0027s very annoying, really, that\u0027s exactly what prevents axial tilt from working. :\\\u003C/p\u003E\n"}]}