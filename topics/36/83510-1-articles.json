{"TopicId":83510,"ForumId":36,"TopicTitle":"Community driven documentation masterpost","CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-09-01T03:30:20Z","PageNum":1,"Articles":[{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-09-01T03:30:20Z","Content":"\n\u003Cp\u003EGiven the ridiculous amount of sticky threads this forum is getting, we\u0027ve decided to regroup the information into one place.\u003C/p\u003E\u003Cp\u003EBelow, you will be able to find the OP of the documentation oriented and informative threads to help in your various modding endeavours. A link to the full thread with the active discussion will also be provided.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EThreads:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EStock Part Cost and Balance Spreadsheet for 0.24\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EContract Modding Information for Mod Authors\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EScience and mods!\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-01T03:45:13Z\u0022 title=\u002209/01/2014 03:45  AM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 1, 2014\u003C/time\u003E by stupid_chris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-09-01T03:36:48Z","Content":"\n\u003Cp\u003E\u003Cem\u003EOriginally posted by Tiberion\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/86406\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EStock Part Cost and Balance Spreadsheet for 0.24\u003C/span\u003E\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EHere is a Google Speadsheet with the stock parts broken down into categories. You can see their costs and some important stats to see how they stack up. It should help you figure out a base line for your own parts, should you want to balance them against stock numbers.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://docs.google.com/spreadsheets/d/1nbUSmw0NpyEzEMRKvCoML1t3SVWDxAi6SH1utMiI-Yw/edit?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.google.com/spreadsheets/d/1nbUSmw0NpyEzEMRKvCoML1t3SVWDxAi6SH1utMiI-Yw/edit?usp=sharing\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI was updating it through testing, but doing so by hand is a bit of work so there may be some typos or out of date things. I don\u0027t think so, but its possible, so feel free to look it over and check it out.\u003C/p\u003E\u003Cp\u003EThis isn\u0027t the place to argue about part balance by the way; making sweeping balance changes was not the focus, though the devs worked long and hard and were able to squeeze quite a few tweaks in, so be sure to thank them.\u003C/p\u003E\u003Cp\u003EAnyone is free to grab a copy and make derivatives or whatever. Send me a PM if you have trouble using it. Feel free to post corrections here and I\u0027ll make them.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-01T03:40:36Z\u0022 title=\u002209/01/2014 03:40  AM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 1, 2014\u003C/time\u003E by stupid_chris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-09-01T03:38:50Z","Content":"\n\u003Cp\u003E\u003Cem\u003EOriginally posted by MrHappyFace\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/86588\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EContract Modding Information for Mod Authors\u003C/span\u003E\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv style=\u0022text-align:center;\u0022\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EModding Contracts\u003C/span\u003E\u003C/p\u003E\u003Cblockquote lang=\u0022en\u0022\u003E\u003Ca href=\u0022//imgur.com/a/rOXdl\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAs you can see, there are now some contracts asking you to dock around Kerbin, of course, it needs some work (the insane rewards are insane), but it is basically the framework for a modded contract. It was also generated based on how far i had advanced (none at all, because it was a testing world, hence why it said Kerbin instead of Jool or something crazy like that)\u003C/p\u003E\u003Cp\u003ENotes:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EMOST Contract related stuff is found in the Contracts namespace \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Eany class extending Contract (in the namespace Contracts) is automatically found and added \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ECreating a contract:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EMake a class that extends Contract, the game automatically finds all classes extending Contract and adds them in. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Eoverride the following methods:\u003Cbr\u003E\u003Cul\u003E\u003Cli\u003EGenerate() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECanBeCancelled() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECanBeDeclined() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetHashString() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetTitle() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetDescription() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetSynopsis() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMessageCompleted() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnLoad() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnSave() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMeetRequirements() \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*]In Generate(), you \u003Cstrong\u003EMUST\u003C/strong\u003E call the following things:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003Ebase.SetExpiry() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Ebase.SetScience(float reward, CelestialBody) \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Ebase.SetDeadlineYears(float numberOfYears, CelestialBody targetBody) \u003Cstrong\u003EOR\u003C/strong\u003E base.SetDeadlineDays(float numberOfDays, CelestialBody targetBody) \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Ebase.SetReputation(float reward, float failiure, CelestialBody targetBody) \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003Ebase.SetFunds(float advance, float reward, float failiure, targetBody) \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*]In Generate(), add some parameters using this.AddParameter(ContractParameter parameter, string id). I have no clue what id does, I just use null, which seems to work, Ill talk about ContractParameters later in this thread, but for now, just use new KerbalDeaths(), which will make you fail the contract if you kill any \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003Evictims\u003C/span\u003E kerbals while the contract is active. The stock ContractParameters are in the namespace Contracts.Parameters, so try messing around with those. \u003C/p\u003E\u003Cp\u003E[*]In MeetRequirements(), you can check if this contract should show up in mission control, and return false is it shouldn\u0027t and true if it should. \u003C/p\u003E\u003Cp\u003E[*]the rest is customizable, but if you fill out the GetTitle(), GetDescription(), GetSynopsis(), and MessageCompleted(), it should show up in game. Mess around with the TextGen class (which, of course, is in the namespace Contracts) \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EContractParameters:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EMake a class extending ContractParameter \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOverride the following methods:\u003Cbr\u003E\u003Cul\u003E\u003Cli\u003EOnRegister() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnUnregister() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnLoad() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnSave() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetTitle() \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EGetHashString() \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*]In OnRegister(), put initialization code such as adding to a GameEvent, or instantiating a new MonoBehaviour \u003C/p\u003E\u003Cp\u003E[*]In OnUnregister(), put code similar to what you would expect in OnDestroy(), such as removing a GameEvent added in OnRegister() or destroying a MonoBehaviour created in OnRegister() \u003C/p\u003E\u003Cp\u003E[*]OnSave() and OnLoad() are where you handle persistence, keep in mind that in OnSave(), NEVER use node.SetValue(), ALWAYS usennode.AddValue() \u003C/p\u003E\u003Cp\u003E[*]In GetTitle(), simply return the name of your parameter, like \u0022Orbit \u0022 \u002B targetBody.the name \u003C/p\u003E\u003Cp\u003E[*]use base.SetComplete() to complete the contract. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EUsing ProgressTracking to select targets based on progress:\u003C/strong\u003E \u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#a9a9a9;\u0022\u003Esuch an imaginative title!\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u00B9just mess around with the ProgressTracking class and the protected static methods in the Contract class, such as Contract.GetBodies_NextUnvisited(). Use these in Generate () in your contract class to select the targetBody parameter used in SetScience() and SetFunds() in your contract class. You should also pipe the targetBody parameter into the the ContractParameter you made.\u003C/span\u003E\u003C/span\u003E \u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EExample Code: \u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ENote: I dont care what you do with this code, its in the public domain\u003C/p\u003E\u003Cp\u003EDockingContract.cs:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing Contracts;\u003Cbr\u003Eusing Contracts.Parameters;\u003Cbr\u003Eusing KSP;\u003Cbr\u003Eusing KSPAchievements;\u003Cbr\u003Eusing ContractsPlus.Contracts.Parameters;\u003Cbr\u003E\u003Cbr\u003Enamespace ContractsPlus.Contracts\u003Cbr\u003E{\u003Cbr\u003E    public class DockingContract : Contract\u003Cbr\u003E    {\u003Cbr\u003E        CelestialBody targetBody = null;\u003Cbr\u003E\u003Cbr\u003E        protected override bool Generate ()\u003Cbr\u003E        {\u003Cbr\u003E            targetBody = GetNextUnreachedTarget (1, true, false);\u003Cbr\u003E            if (targetBody == null)\u003Cbr\u003E            {\u003Cbr\u003E                targetBody = Planetarium.fetch.Home;\u003Cbr\u003E                Debug.LogWarning (\u0022targetBody could not be computed, using Kerbin\u0022);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            CelestialBodySubtree progress = null;\u003Cbr\u003E            foreach (var node in ProgressTracking.Instance.celestialBodyNodes) \u003Cbr\u003E            {\u003Cbr\u003E                if (node.Body == targetBody)\u003Cbr\u003E                    progress = node;\u003Cbr\u003E            }\u003Cbr\u003E            if (progress == null)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.LogError (\u0022ProgressNode for targetBody \u0022 \u002B targetBody.bodyName \u002B \u0022 not found, terminating contract\u0022);\u003Cbr\u003E                return false;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (progress.docking.IsComplete)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log (\u0022Docking has already been completed for targetBody \u0022 \u002B targetBody.bodyName \u002B \u0022, terminating contract\u0022);\u003Cbr\u003E                return false;\u003Cbr\u003E            }\u003Cbr\u003E            bool manned = UnityEngine.Random.Range (0, 1) == 0;\u003Cbr\u003E\u003Cbr\u003E            this.AddParameter (new DockingParameter (targetBody, manned), null);\u003Cbr\u003E            if (manned)\u003Cbr\u003E                this.AddParameter (new KerbalDeaths(), null);\u003Cbr\u003E\u003Cbr\u003E            base.SetExpiry ();\u003Cbr\u003E            base.SetScience (2.25f, targetBody);\u003Cbr\u003E            base.SetDeadlineYears (1f, targetBody);\u003Cbr\u003E            base.SetReputation (150f, 60f, targetBody);\u003Cbr\u003E            base.SetFunds(15000f, 50000f, 35000f, targetBody);\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override bool CanBeCancelled ()\u003Cbr\u003E        {\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E        public override bool CanBeDeclined ()\u003Cbr\u003E        {\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override string GetHashString ()\u003Cbr\u003E        {\u003Cbr\u003E            return targetBody.bodyName;\u003Cbr\u003E        }\u003Cbr\u003E        protected override string GetTitle ()\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022Dock in orbit around \u0022 \u002B targetBody.theName;\u003Cbr\u003E        }\u003Cbr\u003E        protected override string GetDescription ()\u003Cbr\u003E        {\u003Cbr\u003E            //those 3 strings appear to do nothing\u003Cbr\u003E            return TextGen.GenerateBackStories (Agent.Name, Agent.GetMindsetString (), \u0022docking\u0022, \u0022dock\u0022, \u0022kill all humans\u0022, new System.Random ().Next());\u003Cbr\u003E        }\u003Cbr\u003E        protected override string GetSynopsys ()\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022Dock two vessels in orbit around \u0022 \u002B targetBody.theName;\u003Cbr\u003E        }\u003Cbr\u003E        protected override string MessageCompleted ()\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022You have succesfully docked around \u0022 \u002B targetBody.theName;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void OnLoad (ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            int bodyID = int.Parse(node.GetValue (\u0022targetBody\u0022));\u003Cbr\u003E            foreach(var body in FlightGlobals.Bodies)\u003Cbr\u003E            {\u003Cbr\u003E                if (body.flightGlobalsIndex == bodyID)\u003Cbr\u003E                    targetBody = body;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        protected override void OnSave (ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            int bodyID = targetBody.flightGlobalsIndex;\u003Cbr\u003E            node.AddValue (\u0022targetBody\u0022, bodyID);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //for testing purposes\u003Cbr\u003E        public override bool MeetRequirements ()\u003Cbr\u003E        {\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected static CelestialBody GetNextUnreachedTarget(int depth, bool removeSun, bool removeKerbin)\u003Cbr\u003E        {\u003Cbr\u003E            var bodies = Contract.GetBodies_NextUnreached (depth, null);\u003Cbr\u003E            if (bodies != null)\u003Cbr\u003E            {\u003Cbr\u003E                if (removeSun)\u003Cbr\u003E                    bodies.Remove (Planetarium.fetch.Sun);\u003Cbr\u003E                if (removeKerbin)\u003Cbr\u003E                    bodies.Remove (Planetarium.fetch.Home);\u003Cbr\u003E\u003Cbr\u003E                if (bodies.Count \u0026gt; 0)\u003Cbr\u003E                    return bodies [UnityEngine.Random.Range (0, bodies.Count - 1)];\u003Cbr\u003E            }\u003Cbr\u003E            return null;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDockingParameter.cs:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.IO;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing Contracts;\u003Cbr\u003Eusing KSP;\u003Cbr\u003Eusing KSPAchievements;\u003Cbr\u003E\u003Cbr\u003Enamespace ContractsPlus.Contracts.Parameters\u003Cbr\u003E{\u003Cbr\u003E    public class DockingParameter : ContractParameter\u003Cbr\u003E    {\u003Cbr\u003E        public CelestialBody targetBody;\u003Cbr\u003E        public bool manned = false;\u003Cbr\u003E\u003Cbr\u003E        public DockingParameter(CelestialBody target, bool manned)\u003Cbr\u003E        {\u003Cbr\u003E            this.targetBody = target;\u003Cbr\u003E            this.manned = manned;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override string GetHashString ()\u003Cbr\u003E        {\u003Cbr\u003E            return targetBody.bodyName;\u003Cbr\u003E        }\u003Cbr\u003E        protected override string GetTitle ()\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022Dock two vessels in orbit around \u0022 \u002B targetBody.theName;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void OnRegister ()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onPartCouple.Add (OnDock);\u003Cbr\u003E        }\u003Cbr\u003E        protected override void OnUnregister ()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onPartCouple.Remove (OnDock);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void OnSave (ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            int bodyID = int.Parse(node.GetValue (\u0022targetBody\u0022));\u003Cbr\u003E            foreach(var body in FlightGlobals.Bodies)\u003Cbr\u003E            {\u003Cbr\u003E                if (body.flightGlobalsIndex == bodyID)\u003Cbr\u003E                    targetBody = body;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        protected override void OnLoad (ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            int bodyID = targetBody.flightGlobalsIndex;\u003Cbr\u003E            node.AddValue (\u0022targetBody\u0022, bodyID);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnDock(GameEvents.FromToAction\u0026lt;Part, Part\u0026gt; action)\u003Cbr\u003E        {\u003Cbr\u003E            if (manned)\u003Cbr\u003E            {\u003Cbr\u003E                if (action.from.vessel.GetVesselCrew ().Count \u0026gt; 0 \u0026amp;\u0026amp; action.to.vessel.GetVesselCrew ().Count \u0026gt; 0)\u003Cbr\u003E                {\u003Cbr\u003E                    if (action.from.vessel.mainBody == targetBody \u0026amp;\u0026amp; action.to.vessel.mainBody)\u003Cbr\u003E                    {\u003Cbr\u003E                        base.SetComplete ();\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                if (action.from.vessel.mainBody == targetBody \u0026amp;\u0026amp; action.to.vessel.mainBody)\u003Cbr\u003E                {\u003Cbr\u003E                    base.SetComplete ();\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFeel free to contribute and/or correct me if im wrong.\u003C/strong\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-01T03:41:02Z\u0022 title=\u002209/01/2014 03:41  AM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 1, 2014\u003C/time\u003E by stupid_chris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-09-01T03:40:20Z","Content":"\n\u003Cp\u003E\u003Cem\u003EOriginally posted by DYJ\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/53025\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cstrong\u003EScience and mods!\u003C/strong\u003E\u003C/span\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EAdditions to PART {}\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E.22 adds two new parameters to PART, TechRequired and entryCost.\u003C/p\u003E\u003Cp\u003ETechRequired is what research node unlocks your part.\u003C/p\u003E\u003Cp\u003EentryCost is the cost of the part - in credits - when the node has been researched. Cost isn\u0027t actually implemented, the player has a bottomless wallet with the parts being automatically purchased upon researching a node.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ENew modules.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EModuleScienceExperiment\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EModuleScienceExperiment is the new module for science stuff, it\u0027s fairly straight forward but references the ScienceDefs.cfg science definition file. For this to work just make sure the id matches in both .cfgs.\u003C/p\u003E\u003Cp\u003EIt automatically activates animations set up with the default ModuleAnimateGeneric module.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EModuleDataTransmitter\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAntennae module. Same as ModuleScienceExperiment in regards to animations.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EModuleLandingLeg\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ENew landing leg module, set up like so: \u003Ca href=\u0022http://i.imgur.com/kKMEbtk.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/kKMEbtk.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EModuleScienceContainer\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EAllows the storage of science reports.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EScienceDefs.cfg\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELocated in GameData/Squad/Resources, works the same way as the resources definition. So you can make your own and package it with your mod just like the resources.cfg.\u003C/p\u003E\u003Cp\u003EThis file contains all flavour text and defines what can do science where, if you don\u0027t want to see spoilers don\u0027t read it.\u003C/p\u003E\u003Cp\u003ESituationMask \u0026amp; biomeMask are bitmasks defining where the part can do science.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003ESituationMask\u003C/span\u003E determines in which of the following conditions science can be gathered:\u003C/p\u003E\u003Cp\u003E SrfLanded = 1 SrfSplashed = 2, FlyingLow = 4, FlyingHigh = 8, InSpaceLow = 16, InSpaceHigh = 32\u003C/p\u003E\u003Cp\u003E[TABLE]\u003C/p\u003E\u003Cp\u003E[TR]\u003C/p\u003E\u003Cp\u003E[TH][/TH]\u003C/p\u003E\u003Cp\u003E[TH]InSpaceHigh = 32[/TH]\u003C/p\u003E\u003Cp\u003E[TH]InSpaceLow = 16[/TH]\u003C/p\u003E\u003Cp\u003E[TH] FlyingHigh = 8[/TH]\u003C/p\u003E\u003Cp\u003E[TH]FlyingLow = 4[/TH]\u003C/p\u003E\u003Cp\u003E[TH]SrfSplashed = 2[/TH]\u003C/p\u003E\u003Cp\u003E[TH]SrfLanded = 1[/TH]\u003C/p\u003E\u003Cp\u003E[TH]Binary[/TH]\u003C/p\u003E\u003Cp\u003E[TH]Decimal[/TH]\u003C/p\u003E\u003Cp\u003E[/TR]\u003C/p\u003E\u003Cp\u003E[TR]\u003C/p\u003E\u003Cp\u003E[TD]Option with everything selected:[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]111111[/TD]\u003C/p\u003E\u003Cp\u003E[TD]63[/TD]\u003C/p\u003E\u003Cp\u003E[/TR]\u003C/p\u003E\u003Cp\u003E[TR]\u003C/p\u003E\u003Cp\u003E[TD]Option with only FlyingLow selected:[/TD]\u003C/p\u003E\u003Cp\u003E[TD]0[/TD]\u003C/p\u003E\u003Cp\u003E[TD]0[/TD]\u003C/p\u003E\u003Cp\u003E[TD]0[/TD]\u003C/p\u003E\u003Cp\u003E[TD]1[/TD]\u003C/p\u003E\u003Cp\u003E[TD]0[/TD]\u003C/p\u003E\u003Cp\u003E[TD]0[/TD]\u003C/p\u003E\u003Cp\u003E[TD]000100[/TD]\u003C/p\u003E\u003Cp\u003E[TD]4[/TD]\u003C/p\u003E\u003Cp\u003E[/TR]\u003C/p\u003E\u003Cp\u003E[/TABLE]\u003C/p\u003E\u003Cp\u003EThe number you need to input is a decimal conversion of binary yes/no selection.\u003C/p\u003E\u003Cp\u003ESo you grab the number you\u0027ve gotten by filling out the options above and run it through a binary converter like this one: \u003Ca href=\u0022http://www.binaryhexconverter.com/binary-to-decimal-converter\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.binaryhexconverter.com/binary-to-decimal-converter\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EBiomeMask\u003C/span\u003E works in a similar way but determines when biomes play a part in your science gathering.\u003C/p\u003E\u003Cp\u003EThink of it as you are filling the list out again, 111111 or 63 is always. 000100 or 4 is only when flying low. \u003C/p\u003E\u003Cp\u003EThis allows your ground poking instrument to care about if you are in the desert or not while letting a deepspace radiowavesomethingorother not bother checking what it happens to be above.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EAdditional researchnodes.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EA few extra empty nodes have been added to allow easy endgame tie-in by mods.\u003C/span\u003E\u003C/span\u003E As shown here: \u003Ca href=\u0022http://i.imgur.com/OkwRzka.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/OkwRzka.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ENames are as follows:\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EexperimentalRocketry\u003C/p\u003E\u003Cp\u003Enanolathing\u003C/p\u003E\u003Cp\u003EexperimentalAerodynamics\u003C/p\u003E\u003Cp\u003EaerospaceTech\u003C/p\u003E\u003Cp\u003EexperimentalElectrics\u003C/p\u003E\u003Cp\u003EexperimentalScience\u003C/p\u003E\u003Cp\u003Eautomation\u003C/p\u003E\u003Cp\u003EexperimentalsMotors\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EIf you have something that feels relevant please post it in this thread.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}