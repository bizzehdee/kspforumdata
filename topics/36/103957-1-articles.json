{"TopicId":103957,"ForumId":36,"TopicTitle":"[DMPServer Plugin] DMPExtendedPlugins","CreatedByName":"dsonbill","CreatedById":115997,"CreatedDateTime":"2015-04-12T03:42:13Z","PageNum":1,"Articles":[{"CreatedByName":"dsonbill","CreatedById":115997,"CreatedDateTime":"2015-04-12T03:42:13Z","Content":"**WARNING: This can be** ***incredibly*** **dangerous; don\u0027t do something stupid with this - always think carefully about what you are putting in the shell folder,** ***especially*** **on Linux!**\n\nDMPExtendedPlugins is a plugin for DarkMultiPlayer server. It adds scripted admin commands to DMPServer via batch (windows), shell/bash/whatever (linux, hopefully - untested. someone take a look at the code and tell me if it\u0027s going to work, or just try it), and IronPython (Python 2.7, included binaries).\n\nIronPython is licensed under the Apache License, Version 2.0 [http://opensource.org/licenses/apache2.0.php](http://opensource.org/licenses/apache2.0.php)\n\nThe source for IronPython can be found at [http://ironpython.net/](http://ironpython.net/)\n\nDMPScriptedCommands is released under CC0 1.0 [https://creativecommons.org/publicdomain/zero/1.0/](https://creativecommons.org/publicdomain/zero/1.0/)\n\nThe source for DMPScriptedCommands can be found at [http://pastebin.com/B6vJyK62](http://pastebin.com/B6vJyK62)\n\n**Installation \u0026 Download**\n\n*1. Download DMPExtendedPlugins, bundled with IronPython:* [https://mega.co.nz/#!i9VkgTRY!0CwvSsONNhkrblyb2fJp7zvim9yK2h6_ZUCxX1Qg9Mc](https://mega.co.nz/#!i9VkgTRY!0CwvSsONNhkrblyb2fJp7zvim9yK2h6_ZUCxX1Qg9Mc)\n\n*2. Extract all contents to DMPServer directory*\n\n*3. Run DMPServer, it will make the necessary directories in Plugins*\n\n*4. Put batch/shell scripts in Plugins/shell*\n\n*5. Put python scripts in Plugins/py*\n\n**List of Available DMP Python Functions/Methods/Whathaveyou**\n\n- DarkLog.Normal(str)\n- DarkLog.Debug(srt)\n- DarkLog.Error(srt)\n- DarkLog.Fatal(str)\n- MessageReader/Writer\n- Clients # Clients is ClientHandler\n- DarkMultiPlayerCommon # Must instantiate Common class, and probably enums too\n- OnRegister function # See Example in Plugins/py\n- Execute function # See Example in Plugins/py\n- Ability to register script or just execute when loaded, leading to whatever possibility you can think of using it for\n- Basic DMPPlugin interface functions; can\u0027t register it\u0027s own message types yet, because this is still \u0022server-side only\u0022\n- Will soon have other fancy functions to make your modding/scripting life easier with DMP ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\n***Want another function delegated to scripts? Ask in the thread!***\n\nBasic Example Python Script\n\n    description = \u0022A simple test script\u0022#register_command = False #Default is True. If set to False, Execute will be called as soon as the script is read.call_onregister = True #Default is False. If set to True, runs OnRegister once upon registering command.call_onmessagereceived = True #Default is False.#call_onclientconnect = True #Default is False.#call_onclientdisconnect = True #Default is False.#call_onclientauthenticated = True #Default is False.#call_onupdate = True #Default is False.#OnRegister is ignored if register_command is set to False#OnRegister must take a string arg, because I\u0027m very hacky def OnRegister(compliance):    # OnRegister Test    DarkLog.Debug(\u0022Called OnRegister!\u0022) #Do heavy initialization here for commands.def Execute(args):    # Logging Test    DarkLog.Normal(\u0022Logging from Python! [args] is \u0022 \u002B args)    DarkLog.Normal(\u0022Messaging Testing\u0022)    DarkLog.Error(\u0022Messaging Testing\u0022)    DarkLog.Debug(\u0022Messaging Testing\u0022)    DarkLog.Fatal(\u0022Messaging Testing\u0022)    # Common Access Test    comn = Common()    DarkLog.Debug(\u0022Python Common Access Test: DMP \u0022 \u002B comn.PROGRAM_VERSION)    # Clients Access Test    clients = Clients()    DarkLog.Debug(\u0022Python ClientHandler Access Test: Active Clients: \u0022 \u002B str(clients.GetActiveClientCount()))#DMP Plugin Interfacedef OnUpdate():    passdef OnClientConnect(client):    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 connected with the server\u0022)def OnClientAuthenticated(client):    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 authenticated with the server\u0022)def OnClientDisconnect(client):    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 disconnected from the server\u0022)def OnMessageReceived(client, message):    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B \u0022Got a \u0022 \u002B str(message.type) \u002B \u0022 message from \u0022 \u002B client.playerName)\n\nDMPServer Example Output:\n\n    [19:53:36][DEBUG] : Loading settings...[19:53:36][DEBUG] : System.IO compression works: True, test time: 6 ms.[19:53:36][DEBUG] : Loading plugins![19:53:36][DEBUG] : Loaded C:\\Users\\Lance\\Desktop\\DMPServer\\Plugins\\DMPScriptedCommands.dll[19:53:36][DEBUG] : Loading plugin: DMPScriptedCommands.ShellCommands[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test1[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test2[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test3[19:53:36][DEBUG] : Loaded plugin: DMPScriptedCommands.ShellCommands[19:53:36][DEBUG] : Loading plugin: DMPScriptedCommands.PyCommands[19:53:37][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest[19:53:37][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest2[19:53:37][DEBUG] : Loaded plugin: DMPScriptedCommands.PyCommands[19:53:37][DEBUG] : Done![19:53:37][INFO] : Starting DMPServer v0.2.1.2, protocol 37[19:53:37][INFO] : Loading universe...[19:53:37][INFO] : Starting SUBSPACE server on port 6703...[19:53:37][INFO] : Removed 0 debris[19:53:38][INFO] : Ready!/pytest2[19:54:02][INFO] : Command input: /pytest2[19:54:02][INFO] : Logging from Python! [args] is[19:54:02][INFO] : Messaging Testing[19:54:02][ERROR] : Messaging Testing[19:54:02][DEBUG] : Messaging Testing[19:54:02][FATAL] : Messaging Testing[19:54:02][ERROR] : [PYTHON COMMAND ERROR]  index out of range: 0/pytest2 arg1 asd;lajk[19:54:09][INFO] : Command input: /pytest2 arg1 asd;lajk[19:54:09][INFO] : Logging from Python! [args] is arg1 asd;lajk[19:54:09][INFO] : Messaging Testing[19:54:09][ERROR] : Messaging Testing[19:54:09][DEBUG] : Messaging Testing[19:54:09][FATAL] : Messaging Testing[19:54:09][INFO] : Arg 1: arg1  Arg 2: asd;lajk/test[19:54:38][INFO] : Command input: /test/reloadPython[19:54:42][INFO] : Command input: /reloadPython[19:54:42][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest[19:54:42][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest2[19:54:43][INFO] : [Shell Output]========================[Shell Output]Super epic results!And here\u0027s the second line!Waiting for 5 seconds, press a key to continue ..0Output after sleeping 5 seconds!/pytest2 arg1 asd;laj[19:54:55][INFO] : Command input: /pytest2 arg1 asd;laj[19:54:55][INFO] : Logging from Python! [args] is arg1 asd;laj[19:54:55][INFO] : Messaging Testing[19:54:55][ERROR] : Messaging Testing[19:54:55][DEBUG] : Messaging Testing[19:54:55][FATAL] : Messaging Testing[19:54:55][INFO] : Arg 1: arg1  Arg 2: asd;laj[19:54:55][INFO] : File Changed/help[19:55:06][INFO] : Command input: /help[19:55:06][INFO] : exit            - Shuts down the server[19:55:06][INFO] : quit            - Shuts down the server[19:55:06][INFO] : shutdown        - Shuts down the server[19:55:06][INFO] : restart         - Restarts the server[19:55:06][INFO] : kick            - Kicks a player from the server[19:55:06][INFO] : ban             - Bans a player from the server[19:55:06][INFO] : banip           - Bans an IP Address from the server[19:55:06][INFO] : bankey          - Bans a Guid from the server[19:55:06][INFO] : pm              - Sends a message to a player[19:55:06][INFO] : admin           - Sets a player as admin/removes admin from the player[19:55:06][INFO] : whitelist       - Change the server whitelist[19:55:06][INFO] : test            - Shell Command[19:55:06][INFO] : test1           - Shell Command[19:55:06][INFO] : test2           - Shell Command[19:55:06][INFO] : test3           - Shell Command[19:55:06][INFO] : reloadShell     - Reloads the shell commands from scom[19:55:06][INFO] : pytest          - Python Command[19:55:06][INFO] : pytest2         - A simple test script[19:55:06][INFO] : reloadPython    - Reloads the python commands from pycom[19:55:06][INFO] : help            - Displays this help[19:55:06][INFO] : say             - Broadcasts a message to clients[19:55:06][INFO] : dekessler       - Clears out debris from the server[19:55:06][INFO] : nukeksc         - Clears ALL vessels from KSC and the Runway[19:55:06][INFO] : listclients     - Lists connected clients[19:55:06][INFO] : countclients    - Counts connected clients[19:55:06][INFO] : connectionstats - Displays network traffic usage#Contents of Plugins/scom/test.cmd@echo offecho Super epic results!echo And here\u0027s the second line!timeout 5echo Output after sleeping 5 seconds!#Contents of Plugins/pycom/pytest.pydescription = \u0022A simple test script\u0022def Execute(args):    # Logging Test    DarkLog.Normal(\u0022Logging from Python! [args] is \u0022 \u002B args)    DarkLog.Normal(\u0022Messaging Testing\u0022)    DarkLog.Error(\u0022Messaging Testing\u0022)    DarkLog.Debug(\u0022Messaging Testing\u0022)    DarkLog.Fatal(\u0022Messaging Testing\u0022)    # Args test    arg_list = args.split()    DarkLog.Normal(\u0022Arg 1: \u0022 \u002B arg_list[0] \u002B \u0022  Arg 2: \u0022 \u002B arg_list[1])    DarkLog.Normal(\u0022File Changed\u0022)\n\n**Changelog**\n\n-----------------\n\n*The scripts can now be run automatically as part of plugin load, so you can write complete plugins in Python as long as what you need is there.*\n\n*Since the scripts run in their own threads, you can just run indefinitely - just be careful about what you do, obviously. I believe the scripts need access to more functions.*\n\n*Changed name to DMPExtendedPlugins, as per above functionality.*\n\n*Added quite a few functions/data stuffs.*\n\n*Changed pycom and scom to py and shell, respectively, to reflect the more general nature of the scripts.*\n\n*Added the basic DMPPlugin Interface.*\n\n*Prevent everything from dying upon failed scriptstuffs.*\n\n**Edited \u003Ctime datetime=\u00222015-04-12T22:54:40Z\u0022 title=\u002204/12/2015 10:54  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 12, 2015\u003C/time\u003E by dsonbill**"}]}