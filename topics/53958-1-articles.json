{"TopicId":53958,"ForumId":55,"TopicTitle":"tree root config","CreatedByName":"firefox5926","CreatedById":65505,"CreatedDateTime":"2013-11-22T01:48:43Z","PageNum":1,"Articles":[{"CreatedByName":"firefox5926","CreatedById":65505,"CreatedDateTime":"2013-11-22T01:48:43Z","Content":"\n\u003Cp\u003Eok after doing a quick search of the what not to suggest and the forums and no seeing this here is my suggestion or at least question why are you using a tree type network topology for construction or at least why haven\u0027t u changed it to a say a mesh type or a fully connectable type see diagram \u003Ca href=\u0022https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/NetworkTopologies.svg/508px-NetworkTopologies.svg.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://upload.wikimedia.org/wikipedia/commons/thumb/9/97/NetworkTopologies.svg/508px-NetworkTopologies.svg.png\u003C/a\u003E i don\u0027t no how much re-codeing it would take but it also occurs to me the the longer u leave it the more codeing you\u0027ll have to redo when/if u do do it so it would be better to do it sooner rather than later i bring this up because the tree type network is quiet limiting especially for aircraft not so bad for rockets but still limiting anyways thats all i have to say about that ...probably not anyways keep up the good work viva la ksp\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2013-11-22T02:42:13Z","Content":"\n\u003Cp\u003EWhat, you think that\u0027s an original idea? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EOf course not. We\u0027re all kinda hoping they find a way to re-work it, but actually reworking it is nowhere near as simple as just changing how the crafts are stored. That could be the first step, maybe... but after that? How would you go about connecting a single piece of board to three surfaces at once, etc.? There\u0027s a fair amount of interface overhauling and new stuff that could well be necessary for it to work. It\u0027s not a flip-the-damn-switch-already kind of thing -- I mean, programming never is, as far as I\u0027ve ever seen. Always more complex than common sense dictates, but that\u0027s because computers are not really capable of the same logical leaps that the human brain does without even noticing \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027d be very useful, sure... but that doesn\u0027t mean it\u0027s going to be quick or easy to do. And if they did, they\u0027d probably want to have some method of converting craft files safely... or they could just break compatibility entirely, as they\u0027ve done in the past, I guess, but that\u0027s always been a bit of a headache for everyone. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"firefox5926","CreatedById":65505,"CreatedDateTime":"2013-11-22T05:32:05Z","Content":"\n\u003Cp\u003Ei see your point. but just want to throw some ideas out there. i know that u can connect at least two branches together with docking ports but only i believe after the physics has loaded after the vab/sph. now if the physics engine was enabled in the editor then that could be allowed to happen inside the editor and instead of using docking ports could be applied to the node system. then most of the code i assume could stay the same since it already works in both scenarios and just patching the docking port code into the node system. as for how it would be save it maybe could be saved as some sort of proxy node that only gets saved as a connection if the to nodes are withing a certain proximity to each other. but u know what they say about assuming it makes an ... anyways i was told no questions to stupid to ask and no ideas to stupid to say \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003Emaybe like save \u003C/p\u003E\u003Cp\u003Erun check node is node connected yes/no if no is node within xyz of another unconnected node yes/no if yes if check for manual connection flag yes/no if yes then save as connected then again now that i think about it this would only be a quasi mesh system cose it wouldn\u0027t work with surface attachment unless u were to define the edge of the part as a line of nodes placed close together or a gird of nodes very close together and then finding witch of them is closest to the node to be attached but im not sure how computational taxing that would be but then again if it were done so that node attachment wasn\u0027t connected to the animation then approximate node alignment wouldn\u0027t be necessary as any node pair below a certain distances would be connected regardless of whether the objects they are attached to look like they line up and any node pair above a certain distance wouldn\u0027t ie when the object appears to the eye to be out of alignment \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"jwenting","CreatedById":57735,"CreatedDateTime":"2013-11-22T06:02:15Z","Content":"\n\u003Cp\u003Eit would at this point mean replacing the entire game engine as the current system is what it is in no small part because of the way Unity works.\u003C/p\u003E\u003Cp\u003EAnd that ain\u0027t gonna happen.\u003C/p\u003E\n"},{"CreatedByName":"SilverWarior","CreatedById":80669,"CreatedDateTime":"2013-11-22T07:18:01Z","Content":"\n\u003Cp\u003EThe reason why tree based ship design is implemented in KSP is due to the way how current physical engine works.\u003C/p\u003E\u003Cp\u003EIf I\u0027m not mistaken current physical engine goes and calculates the sum of physical forces to crafts part and then moves that part to new position right after that.\u003C/p\u003E\u003Cp\u003EThis means that if you have craft with four parts A,B,C,D with next conections AB, BC, CD, DA as soon as the Game finishes calculating forces to part A and moves it to new position this changes the force that is generated by conection between parts A and D. So in turn this would cause the whole craft to woble as hell.\u003C/p\u003E\u003Cp\u003EImplementing the OP suggestion would require change in the way how physical engine works. The changed physical engine would have to calculate forces for each part first and moving them to new position only after that. But this would require more memory as you need to be able to store both old and new position of each part.\u003C/p\u003E\n"},{"CreatedByName":"Kasuha","CreatedById":81781,"CreatedDateTime":"2013-11-22T09:55:01Z","Content":"\n\u003Cp\u003EPhysics engine clearly can work with multiple connections, otherwise we\u0027d not have struts. I\u0027m not sure where exactly is the limitation to a tree coming from but I assume it may be e.g. Unity internal implementation.\u003C/p\u003E\u003Cp\u003ETheoretically, cycles in ship design could be also implemented using invisible struts placed wherever you make a connection which would make a cycle.\u003C/p\u003E\u003Cp\u003EIt\u0027s a question whether it would be really worth the effort - at least in the current stage of development.\u003C/p\u003E\n"},{"CreatedByName":"KerbMav","CreatedById":70338,"CreatedDateTime":"2013-11-22T10:34:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kasuha\u0022 data-cite=\u0022Kasuha\u0022\u003E\u003Cdiv\u003EPhysics engine clearly can work with multiple connections, otherwise we\u0027d not have struts.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is actually a good question.\u003C/p\u003E\u003Cp\u003EI still did not get around to try the welding mod and see if a circular build would flex and veer on the \u0022gap\u0022 of e.g. a welded ring.\u003C/p\u003E\n"},{"CreatedByName":"Kasuha","CreatedById":81781,"CreatedDateTime":"2013-11-22T11:18:51Z","Content":"\n\u003Cp\u003EAFAIK, welding mod won\u0027t allow you to make cycles.\u003C/p\u003E\u003Cp\u003EIt takes a \u0022subassembly\u0022 and makes a single part from it. As such it does not undergo any shape changes anymore. If you put too much stress on it, it will just explode.\u003C/p\u003E\n"},{"CreatedByName":"Smidge204","CreatedById":89677,"CreatedDateTime":"2013-11-22T13:29:56Z","Content":"\n\u003Cp\u003EThe tree system is absolutely much EASIER, from a programming perspective, since each part has only one parent. You can lop off an entire branch as a sub-assembly and clone it knowing it will be easy to attach anywhere else in the tree.\u003C/p\u003E\u003Cp\u003EIf you wanted to make a sub assembly with multiple attachment points, you\u0027d have a hard time of it. What would the rules be? Would any one attachment point suffice or do you need to satisfy all attachments? Would you need to re-order all the components and rebuild the tree?\u003C/p\u003E\u003Cp\u003EYou can also end up with indeterminate systems which can give the physics engine a hard time.\u003C/p\u003E\u003Cp\u003ENothing that can\u0027t be overcome of course, but it\u0027s just easier.\u003C/p\u003E\u003Cp\u003EIt\u0027s not clear how struts work internally either. It could be just an extra constraint or point load on the parts and not an actual connection in the same way other parts are considered \u0022connected\u0022 - which makes sense since the struts are entirely graphical with only the attachment points counting as parts (themselves being child parts of what they\u0027re attached to).\u003C/p\u003E\u003Cp\u003E=Smidge=\u003C/p\u003E\n"},{"CreatedByName":"pizzaoverhead","CreatedById":26349,"CreatedDateTime":"2013-11-22T16:02:46Z","Content":"\n\u003Cp\u003EDoesn\u0027t docking allow you to make circular structures that attach at both ends?\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2013-11-22T17:03:39Z","Content":"\n\u003Cp\u003EYeah, it does. Docking ports that attach a vessel to itself like that behave basically like big fat struts.\u003C/p\u003E\n"},{"CreatedByName":"firefox5926","CreatedById":65505,"CreatedDateTime":"2013-11-23T01:01:13Z","Content":"\n\u003Cp\u003Ein that case if u could allow the docking ports to be docked in the editor and make there connection as strong as a normal part then...is that possible ie like a node attached strut instead of a surface attached strut\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-23T01:05:36Z\u0022 title=\u002211/23/2013 01:05  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 23, 2013\u003C/time\u003E by firefox5926\u003C/strong\u003E\n\u003Cbr\u003Ehad another thoght\n\u003C/span\u003E\n"},{"CreatedByName":"SilverWarior","CreatedById":80669,"CreatedDateTime":"2013-11-23T07:20:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EYeah, it does. Docking ports that attach a vessel to itself like that behave basically like big fat struts.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrue. But did you noticed how much bending and springing does docking ports provide? All other conections would already break at such points while docking ports still remain conected. And that bending and springing capability of docking ports alow to parially avoid limitation of current physical engine.\u003C/p\u003E\u003Cp\u003EDo you remember the time just after docking ports were implemented when develpers sad that there are limitations of how strong can docking ports be? \u003C/p\u003E\u003Cp\u003EMaking them to strong will mean that they no longer help avoiding limitation of current physical engine and could cause all that unexpected behavior I talked about in my previous post.\u003C/p\u003E\n"}]}