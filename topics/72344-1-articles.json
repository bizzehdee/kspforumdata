{"TopicId":72344,"ForumId":16,"TopicTitle":"Math- Calculating aerocapture height in KSP","CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-14T08:42:49Z","PageNum":1,"Articles":[{"CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-14T08:42:49Z","Content":"\n\u003Cp\u003EI found this wonderful resource a few days ago: \u003Ca href=\u0022http://alterbaron.github.io/ksp_aerocalc/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://alterbaron.github.io/ksp_aerocalc/\u003C/a\u003E and its source code at \u003Ca href=\u0022https://github.com/alterbaron/ksp_aerocalc/blob/c1b918b6cec2af703b9e1fd66b18d9241619daa2/js/aerocalc.js\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/alterbaron/ksp_aerocalc/blob/c1b918b6cec2af703b9e1fd66b18d9241619daa2/js/aerocalc.js\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI\u0027d really like to understand the math happening here. I\u0027m not familiar with javascript, so the syntax and abbreviated variable names are making that source code really hard to parse, and wikipedia does not provide any equations I\u0027ve managed to find on the subject. \u003C/p\u003E\u003Cp\u003EWould any of you be so kind as to show me exactly what math I\u0027d need to do to calculate exactly what altitude I should set my periapsis to to get a desired apoapsis?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-15T00:59:26Z\u0022 title=\u002205/15/2014 12:59  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 15, 2014\u003C/time\u003E by Amagi82\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-15T00:57:45Z","Content":"\n\u003Cp\u003EI can\u0027t give you a formula to plug number into, or anything that you can do by hand. I also don\u0027t know javascript, but I know enough other languages that the code is pretty clear.\u003C/p\u003E\u003Cp\u003EI\u0027ll give you a rough overview of how the code works, for educational purposes. If you have any more questions, feel free to ask.\u003C/p\u003E\u003Cp\u003E1) For some trial orbit, (described by current velocity, current radius, and periapsis) which intercepts an atmosphere, the code\u003C/p\u003E\u003Cp\u003Ea) finds where the spacecraft enters the atmosphere (simple geometry)\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E integrates the equations of motion to determine the spacecraft trajectory in the atmosphere (like KSP\u0027s physics simulation, rather than being on rails in time-warp) until\u003C/p\u003E\u003Cp\u003Ec) the spacecraft (crashes or) exits the atmosphere, and\u003C/p\u003E\u003Cp\u003Ed) calculates the apoapsis given the atmospheric exit parameters.\u003C/p\u003E\u003Cp\u003EIntegration of the equations of motion is done by the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet\u0022 rel=\u0022external nofollow\u0022\u003EVelocity-Verlet integration\u003C/a\u003E method.\u003C/p\u003E\u003Cp\u003EThe equations of motion are \u003Cstrong\u003EF\u003C/strong\u003E = m\u003Cstrong\u003Ea\u003C/strong\u003E = \u003Cstrong\u003EF\u003C/strong\u003E\u003Csub\u003Egravity\u003C/sub\u003E \u002B \u003Cstrong\u003EF\u003C/strong\u003E\u003Csub\u003Edrag\u003C/sub\u003E. You can find KSP\u0027s drag model in the wiki.\u003C/p\u003E\u003Cp\u003EKSP atmospheres move with the surface of the planet, so alterbaron\u0027s drag model allows you to add or subtract off the velocity of the atmosphere from the velocity of the spacecraft for retrograde or prograde orbits, respectively, when calculating the drag force.\u003C/p\u003E\u003Cp\u003E2) Step 1 produces an apoapsis after exiting the atmosphere. It is probably not the apoapsis you want. Since you can\u0027t just solve analytically for the periapsis which produces your desired apoapsis, this code uses a root finding method: specifically, the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Bisection_method\u0022 rel=\u0022external nofollow\u0022\u003Emethod of bisection\u003C/a\u003E. So the code follows the spacecraft through the atmosphere a bunch of times, each time narrowing in a bit more on the trajectory which gives the desired apoapsis, if it exists.\u003C/p\u003E\u003Cp\u003E3) If successful, the code spits out not a periapsis, but a maneuver. There are many possible maneuvers which would give you the same periapsis, depending on how much you burn prograde/retrograde versus how much you burn radially. But the different maneuvers would give you different post-aerobraking apoapses. Likewise there are many maneuvers which give different periapses, but the same post-aerobraking apoapsis.\u003C/p\u003E\u003Cp\u003Ealterbaron\u0027s step 2 only tests maneuvers which change the direction of your vehicle without changing your current speed. It is a nice way to reduce a two-dimensional problem (burn direction \u002B burn delta-v) into a one-dimensional problem (burn direction, with delta-v determined by keeping speed fixed). This vastly simplifies the procedure in step 2 to find the desired maneuver. You would have to use a two-d minimization method, instead of a root-finding method. It may not always give the minimum delta-v maneuver, but it probably does a pretty good job most of the time.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-15T01:36:45Z\u0022 title=\u002205/15/2014 01:36  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 15, 2014\u003C/time\u003E by Yasmy\u003C/strong\u003E\n\u003Cbr\u003ENow with 50% more politeness!\n\u003C/span\u003E\n"}]}