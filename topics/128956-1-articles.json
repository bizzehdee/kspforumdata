{"TopicId":128956,"ForumId":29,"TopicTitle":"Building a stargate mod to learn C#","CreatedByName":"frizzank","CreatedById":57210,"CreatedDateTime":"2015-12-31T07:18:24Z","PageNum":1,"Articles":[{"CreatedByName":"frizzank","CreatedById":57210,"CreatedDateTime":"2015-12-31T07:18:24Z","Content":"\n\u003Cp\u003E\nBuilding a stargate mod to learn C#\n\u003C/p\u003E\n\u003Cp\u003E\nSo im using this mod as a base. \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/60770-10x-part-plugin-parameciumkids-jump-drive-06-compatibility-update/\u0022\u003EJumpdrive mod\u003C/a\u003E I have gotten to the point where I have learned the basics. It functions just as the original mod did with some superficial changes just to understand how things worked. It builds and works successful as the original mod did. You activate the gate (Jump Beacon), then activate the DHD (Jump Drive) and choose your destination and then warp there.\n\u003C/p\u003E\n\u003Cp\u003E\nNow what I want to do is have a single separate part, a ring warpgate (Stargate) that you activate with a DHD attached to your ship. The DHD selects a destination. Then you fly into the ring and it warps you to the center of the gate you selected at the same velocity you went through the other one.\n\u003C/p\u003E\n\u003Cp\u003E\nCurrently the code is changing the mass of the parts on activate and I cannot find how its doing that. Can anyone help?\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint\u0022\u003E\nusing KSP.IO;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UnityEngine;\n\nnamespace KSP_Frizz_Warpgate\n{\n    /// \u0026lt;summary\u0026gt;\n    /// Jump Drive plugin. When a Jump Drive is activated and given a target, it\n    /// spools up a \u0022jump charge\u0022 and then teleports to a point near the target.\n    /// \u0026lt;/summary\u0026gt;\n    public class DHD_Drive : PartModule\n    {\n        Vessel target;\n        bool activated = false;\n        Rect windowPos;\n        Dictionary\u0026lt;Vessel, string\u0026gt; targets;\n        AnimationState jumpAnimation;\n        int resolution = -1;\n\n        [KSPField(isPersistant = false, guiActive = true, guiName = \u0022Charge Rate\u0022)]\n        public float chargeRate = 0.1f;\n\n        [KSPField(isPersistant = false, guiActive = true, guiName = \u0022Power Consumption Rate\u0022)]\n        public float powerConsumptionRate = 10f;\n\n        public override void OnStart(StartState state)\n        {\n            RenderingManager.AddToPostDrawQueue(998, new Callback(drawGUI));\n        }\n\n        private void mainGUI(int windowID)\n        {\n            GUILayout.BeginVertical(HighLogic.Skin.scrollView);\n            if (targets.Count() \u0026lt;= 0) GUILayout.Label(\u0022No active Warpgate beacons found.\u0022);\n            else\n                foreach (KeyValuePair\u0026lt;Vessel, string\u0026gt; line in targets)\n                {\n                    if (GUILayout.Button(line.Key.vesselName \u002B line.Value, HighLogic.Skin.button))\n                    {\n                        print(line.Key.vesselName \u002B \u0022 selected as target.\u0022);\n                        target = line.Key;\n                    }\n                }\n            GUILayout.EndVertical();\n            if (GUILayout.Button(\u0022Cancel\u0022, HighLogic.Skin.button)) Abort();\n            GUI.DragWindow();\n        }\n\n        protected void drawGUI()\n        {\n            if (activated \u0026amp;\u0026amp; target == null)\n                windowPos = GUILayout.Window(997, windowPos, mainGUI, \u0022Select a Warpgate target\u0022, HighLogic.Skin.window, GUILayout.MinWidth(240), GUILayout.MinHeight(160));\n        }\n\n        public override void OnFixedUpdate()\n        {\n            if (target != null \u0026amp;\u0026amp; activated \u0026amp;\u0026amp; vessel.packed == false)\n            {\n                if (part.Resources[\u0022JumpCharge\u0022].amount \u0026gt;= part.Resources[\u0022JumpCharge\u0022].maxAmount)\n                {\n                    //if there is a full jump charge and a target has been selected, jump\n                    Jump();\n                }\n                else\n                {\n                    //if there is not a full jump charge, check whether enough electric charge is available\n                    float required = (float)((1f \u002B part.Resources[\u0022JumpCharge\u0022].amount * 0.1f) * powerConsumptionRate);\n                    if (part.RequestResource(\u0022ElectricCharge\u0022, required) \u0026lt; required)\n                    {\n                        Abort();\n                        return;\n                    }\n\n                    //if enough electric charge is available, consume electric charge to charge the jump\n                    part.Resources[\u0022JumpCharge\u0022].amount \u002B= required * chargeRate;\n\n                    //animate the gimbal rings\n                    jumpAnimation.normalizedTime = (float)part.Resources[\u0022JumpCharge\u0022].amount / (float)part.Resources[\u0022JumpCharge\u0022].maxAmount;\n\n                }\n            }\n        }\n\n        [KSPAction(\u0022ActionActivate\u0022, KSPActionGroup.None, guiName = \u0022Activate\u0022)]\n        public void ActionActivate(KSPActionParam param)\n        {\n            Activate();\n        }\n\n        [KSPEvent(name = \u0022Activate\u0022, active = true, guiActive = true, guiName = \u0022Activate\u0022)]\n        public void Activate()\n        {\n            part.force_activate();\n            ListTargets();\n            activated = true;\n            //prepare the jump animation\n            jumpAnimation = part.FindModelAnimators(\u0022Jump\u0022).FirstOrDefault()[\u0022Jump\u0022];\n            jumpAnimation.speed = 0f;\n            jumpAnimation.weight = 1f;\n            jumpAnimation.enabled = true;\n            windowPos = new Rect(Screen.width * 0.5f - 120, Screen.height * 0.5f - 80, 1, 1);\n            part.Effect(\u0022JumpCharge\u0022);\n            Events[\u0022Abort\u0022].active = true;\n            Events[\u0022Activate\u0022].active = false;\n        }\n\n        [KSPEvent(name = \u0022Abort\u0022, active = false, guiActive = true, guiName = \u0022Cancel Jump\u0022)]\n        public void Abort()\n        {\n            activated = false;\n            part.Resources[\u0022ElectricCharge\u0022].amount = part.Resources[\u0022JumpCharge\u0022].amount;\n            part.Resources[\u0022JumpCharge\u0022].amount = 0;\n            target = null;\n            Events[\u0022Activate\u0022].active = true;\n            Events[\u0022Abort\u0022].active = false;\n            part.Effect(\u0022Abort\u0022);\n            //Reset the animation\n            jumpAnimation.normalizedTime = 0f;\n            print(\u0022Jump canceled.\u0022);\n        }\n\n        public void Jump()\n        {\n            print(\u0022Jumping...\u0022);\n\n            //\tDischarge and stop charging\n            activated = false;\n            part.Resources[\u0022JumpCharge\u0022].amount = 0;\n            foreach (Part p in vessel.parts)\n            {\n                if (p.Resources[\u0022ElectricCharge\u0022] != null) p.Resources[\u0022ElectricCharge\u0022].amount = p.Resources[\u0022ElectricCharge\u0022].amount * 0.1f;\n//Do not destroy solar pannels that are deployed!!!\n  /*              foreach (PartModule m in p.Modules)\n                {\n                    if (m.moduleName == \u0022ModuleDeployableSolarPanel\u0022)\n                    {\n                        if (m.Fields[\u0022stateString\u0022].GetValue\u0026lt;String\u0026gt;(m) == \u0022EXTENDED\u0022 \u0026amp;\u0026amp; m.Fields[\u0022isBreakable\u0022].GetValue\u0026lt;bool\u0026gt;(m))\n                            //Break any solar panels that were carelessly left open\n                            m.BroadcastMessage(\u0022breakPanels\u0022);\n\n                    }\n                }*/\n            }\n            part.Resources[\u0022ElectricCharge\u0022].amount = part.Resources[\u0022ElectricCharge\u0022].maxAmount;\n\n            //Reset the animation\n            jumpAnimation.normalizedTime = 0f;\n\n            //\tDisable Physics, etc.\n            vessel.Landed = false;\n            vessel.Splashed = false;\n            vessel.landedAt = string.Empty;\n            OrbitPhysicsManager.HoldVesselUnpack(180);\n            vessel.GoOnRails();\n            vessel.situation = Vessel.Situations.ORBITING;\n\n            //\tPrepare special orbital parameters.\n            Vector3d error = UnityEngine.Random.onUnitSphere \u002B UnityEngine.Random.insideUnitSphere * 0.5f;\n\n            if (hasBeacon(target, true))\n            {\n                if (resolution \u0026gt;= 0)\n                {\n                    print(\u0022Resolution successfully retrieved: \u0022 \u002B resolution.ToString());\n                    error *= (float)resolution;\n                }\n                else\n                {\n                    print(\u0022Resolution could not be retrieved, using default value of 100\u0022);\n                    error *= 100f;\n                }\n            }\n            else\n            {\n                print(\u0022Error! Somehow an invalid target was selected.\u0022);\n            }\n\n            if (target.situation == Vessel.Situations.PRELAUNCH)\n            {\n                print(\u0022Jumps to prelaunch gates are not permitted, so the jump has been canceled.\u0022);\n            }\n            else\n            {\n                //\tSet the vessel\u0027s orbital parameters to match the target\u0027s.\n                vessel.orbit.UpdateFromStateVectors(target.orbit.pos \u002B error, target.orbit.vel, target.mainBody, Planetarium.GetUniversalTime());\n                vessel.orbit.Init();\n                vessel.orbit.UpdateFromUT(Planetarium.GetUniversalTime());\n                vessel.orbitDriver.pos = vessel.orbit.pos.xzy;\n                vessel.orbitDriver.vel = vessel.orbit.vel;\n            }\n\n            //\tMake gratuitous booming noise!!!11!!!!!1\n            part.Effect(\u0022Jump\u0022);\n\n            //\tFinish the jump\n            if (resolution \u0026gt; 10) vessel.SetRotation(UnityEngine.Random.rotation);\n            else vessel.SetRotation(target.GetTransform().rotation);\n            vessel.angularMomentum = Vector3.zero;\n            vessel.angularVelocity = Vector3.zero;\n            target = null;\n            Events[\u0022Activate\u0022].active = true;\n            Events[\u0022Abort\u0022].active = false;\n            print(\u0022The jump has been completed. Now at \u0022 \u002B vessel.mainBody);\n        }\n\n        void ListTargets()\n        {\n            if (targets == null) targets = new Dictionary\u0026lt;Vessel, string\u0026gt;();\n            targets.Clear();\n            foreach (Vessel ship in FlightGlobals.Vessels)\n            {\n                if (ship == vessel || ship == FlightGlobals.ActiveVessel) continue;\n                if (ship.situation == Vessel.Situations.SPLASHED) continue;\n                if (hasBeacon(ship) == false) continue;\n                string info = \u0022 (\u0022;\n                switch (ship.situation)\n                {   //\tDescribe the ship\u0027s situation\n                    case Vessel.Situations.LANDED:\n                        info \u002B= \u0022On \u0022 \u002B ship.mainBody.name \u002B \u0022\u0027s surface\u0022;\n                        break;\n                    case Vessel.Situations.SPLASHED:\n                        info \u002B= \u0022Floating in \u0022 \u002B ship.mainBody.name \u002B \u0022\u0027s water\u0022;\n                        break;\n                    case Vessel.Situations.PRELAUNCH:\n                        goto case Vessel.Situations.LANDED;\n                    default:\n                        info \u002B= \u0022Orbiting \u0022 \u002B ship.mainBody.name;\n                        break;\n                }\n                info \u002B= \u0022)\u0022;\n                targets.Add(ship, info);\n            }\n        }\n\n        bool hasBeacon(Vessel ship, bool fetchResolution = false)\n        {\n            if (ship.loaded) return false;\n            foreach (ProtoPartSnapshot p in ship.protoVessel.protoPartSnapshots)\n            {\n                foreach (ProtoPartModuleSnapshot m in p.modules)\n                {\n                    if (m.moduleName == \u0022WarpgateBeacon\u0022)\n                    {\n                        print(ship.name \u002B \u0022 has a \u0022 \u002B p.partName \u002B \u0022 part that contains a Warpgate DHD\u0022);\n                        if (bool.Parse(m.moduleValues.GetValue(\u0022activated\u0022)))\n                        {\n                            print(\u0022...and the Warpgate is ready to receive jumps. Proceeding...\u0022);\n                            if (fetchResolution)\n                            {\n                                print(\u0022Fetching resolution...\u0022);\n                                resolution = int.Parse(m.moduleValues.GetValue(\u0022resolution\u0022));\n                            }\n                            return true;\n                        }\n                        print(\u0022...but the Warpgate appears to be inactive.\u0022);\n                        //\n                    }\n                }\n            }\n            return false;\n        }\n    }\n}\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI just answered my own question, the JumpCharge resource has mass. Can I set that to 0 without damage?\u00A0 I guess I could get rid of it and have it use just strait electricity....\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-12-31T07:23:09Z\u0022 title=\u002212/31/2015 07:23  AM\u0022 data-short=\u00228 yr\u0022\u003EDecember 31, 2015\u003C/time\u003E by frizzank\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-12-31T08:50:49Z","Content":"\n\u003Cp\u003E\nAs long as your resource is not used by an Engine module a mass of 0 is harmless.\n\u003C/p\u003E\n"}]}