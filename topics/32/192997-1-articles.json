{"TopicId":192997,"ForumId":32,"TopicTitle":"Drag Calculations","CreatedByName":"arthur106","CreatedById":203096,"CreatedDateTime":"2020-04-08T22:50:29Z","PageNum":1,"Articles":[{"CreatedByName":"arthur106","CreatedById":203096,"CreatedDateTime":"2020-04-08T22:50:29Z","Content":"\n\u003Cp\u003E\nI\u0027ve been combing through the forums trying to find out exactly how KSP calculates drag and have come across some helpful posts.\u00A0 It seems that the method has changed substantially with new versions of the game, so I\u0027d like to summarize my understand of the current system (please correct me where I\u0027m wrong) and ask a few questions as well.\n\u003C/p\u003E\n\u003Cp\u003E\nBecause I\u0027m stating a lot of my assumptions (which may or may not be true) and asking questions, I\u0027ll place the questions in bold font for readability.\u003Cbr\u003E\nI understand the basic formula is the 1/2*rho*v^2*Cd*S where rho is atmospheric density, Cd is coefficient of drag, and S is exposed surface area.\u00A0 I also understand that the game has some some mechanic to determine Cd based on drag cubes and the part construction.\u00A0 Furthermore, there is a Cd multiplier for leading faces, side faces, and trailing faces; this multiplier is dependent on mach number (\u003Cstrong\u003Eis it dependent on anything else?\u003C/strong\u003E).\u00A0 I saw some plots of this a few days ago, but at the time of writing this, I can\u0027t find it.\u00A0 \u003Cstrong\u003ECan anyone point me to the game file where this information is stored?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe whole \u0022drag cube\u0022 concept seems somewhat odd to me.\u00A0 \u003Cstrong\u003EHow do you model the side faces of a cylindrical part with a cube?\u003C/strong\u003E\u00A0 Imagine you have a perfectly cylindrical fuel tank flying through the air and it is travelling in a direction parallel to it\u0027s axis of symmetry.\u00A0 Now, lets examine two cases in which its attitude is perturbed by a small number of degrees \u0022theta\u0022; first in a direction towards the center of one of the side drag cube faces (such that one side face is exposed), then in a direction towards one of the corners (such that two sides faces are exposed).\u00A0 The actual fuel tank would care which direction it had been perturbed, as it is axially symmetric.\u00A0 The drag cubes, however, are not.\u00A0 The latter case would result in more exposed surface area than the former.\u00A0\u00A0\u003Cstrong\u003EIs this how the actual calculations work?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nGoing back to the mach-based multipliers for the Cd.\u00A0\u003Cstrong\u003E Does anyone know how the values given in the game file are interpolated?\u003C/strong\u003E\u00A0 (linearly, quadratically..)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow are these multipliers applied?\u003C/strong\u003E\u00A0 If I\u0027m in a rocket, ascending straight upwards, it\u0027s obvious that the leading multiplier is applied to the leading face, side multiplier to the side faces, and so on.\u00A0 But what if I have a non-zero \u003Cabbr title=\u0022Angle of Attack\u0022\u003EAoA\u003C/abbr\u003E?\u00A0 Now there are two components of velocity, \u0022mainstream\u0022, and sidestream, causing \u0022drag\u0022, and \u0022sideforce\u0022, respectively.\u00A0 Does the game do multiple drag calculations (treating the side of the rocket as a side face when resolving drag\u00A0and as a leading face when resolving side force?)\n\u003C/p\u003E\n\u003Cp\u003E\nI read somewhere that they swapped surface area with mass???\u00A0 That doesn\u0027t seem very intuitive.\u00A0 \u003Cstrong\u003EDoes this still exist?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAny light that can be shed on this would be extremely helpful and much appreciated.\u00A0 Thank you in advance.\n\u003C/p\u003E\n\u003Cp\u003E\nMy goal is to understand the methods the good people at Squad used so I can use this information to write accurate\u00A0scripts for KOS.\u00A0 The first one would launch a rocket and perform a series of simple maneuvers, varying altitude, airspeed, and attitude to either A. determine an \u0022equivalent drag cube\u0022 for any given spacecraft or B. use a simple neural net to accurately predict drag based on inputs (pitch, yaw, roll, speed, temp, pressure).\u00A0 I\u0027ll then use the ability to very accurately predict drag to create ascent profiles and then scripts to follow them.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-04-08T22:59:52Z\u0022 title=\u002204/08/2020 10:59  PM\u0022 data-short=\u00224 yr\u0022\u003EApril 8, 2020\u003C/time\u003E by arthur106\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Xyphos","CreatedById":139010,"CreatedDateTime":"2020-04-09T02:14:29Z","Content":"\n\u003Cp\u003E\nin old versions of the game, if you put a part on your vessel, it had drag effect no matter what, even if it was in a stack attachment, it behaved like it wasn\u0027t\u003Cbr\u003E\nlater, drag cubes where added and calculations were put in place to determine if the drag should be applied/multiplied, etc but this proved to be suboptimal and caused lag.\u003Cbr\u003E\nfast forward to present, the last I heard, the drag cubes aren\u0027t used anymore, or at least don\u0027t behave as they used to.\u003Cbr\u003E\u003Cbr\u003E\nI haven\u0027t tested it, but I theorize that the drag is the surface area of the part like you said, and the drag cubes simply add a \u0022tweaking\u0022 mechanic to the drag model.\n\u003C/p\u003E\n\u003Cp\u003E\nif you do some experimenting with the surface area formula and compare your results to other test cases, I\u0027m sure you\u0027ll find some sort of pattern and/or formula.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-04-09T02:15:53Z\u0022 title=\u002204/09/2020 02:15  AM\u0022 data-short=\u00224 yr\u0022\u003EApril 9, 2020\u003C/time\u003E by Xyphos\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CBase","CreatedById":189476,"CreatedDateTime":"2020-04-10T13:39:18Z","Content":"\n\u003Cp\u003E\nOkay this might get a longer post, so first I like to give overall structure:\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nPrograde Drag\n\u003C/li\u003E\n\u003Cli\u003E\nDrag Cubes and Angle of Attack\n\u003C/li\u003E\n\u003Cli\u003E\nSpecial cases I am aware of\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nBefore I start, let me point out that all of my knowledge I got from reading posts, working on Trajectories addon for my personal need and finally some reverse engineering when documentation was sparse or outdated: Only KSP holds the truth for stock aerodynamics ;-)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cu\u003EPrograde Drag\u003C/u\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nDrag is created by motion and always opposite of the surface velocity. Therefore air sees your object from a single side: Opposite of velocity. For simplicity first lets assume you are flying perfect prograde.\n\u003C/p\u003E\n\u003Cp\u003E\nReal Drag is gets very comlicated once air get turbolent. As long as it is laminar, the newton equation you found is a very good approximation:\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223768145\u0022 data-ipsquote-contentid=\u0022192997\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221586386229\u0022 data-ipsquote-userid=\u0022203096\u0022 data-ipsquote-username=\u0022arthur106\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 4/9/2020 at 12:50 AM, arthur106 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n1/2*rho*v^2*Cd*S where rho is atmospheric density, Cd is coefficient of drag, and S is exposed surface area\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nKSP does basically this for every single part and then adds up all the drag from the parts with respect of the point, so asymmectrical drag will turn the object.\n\u003C/p\u003E\n\u003Cp\u003E\nLet us take a moment and think how S and Cd are derived:\n\u003C/p\u003E\n\u003Cp\u003E\nThe exposed surface area is the surface projection of the part in the plane normal to direction of drag. So going to your cylinder example: from sideways the surface area is a rectangle with surface area of length * diameter of your cylinder. For constructs KSP subtracts the opposing surface area of parts attached via nodes. In Stock KSP nothing else.\n\u003C/p\u003E\n\u003Cp\u003E\nThe drag coefficient Cd is holding all information about the shape when looking at the object in the direction of the drag, really look up\u00A0\u003Ca href=\u0022https://en.wikipedia.org/wiki/Drag_coefficient\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://en.wikipedia.org/wiki/Drag_coefficient\u003C/a\u003E to understand Cd. This is the answer how a flat surface rectangle can model your round cylinder drag. Especially for flat backsides turbolences are the true reason for their higher Cd value, so by clever calculations of Cd you get more realistic than the original assumption.\n\u003C/p\u003E\n\u003Cp\u003E\nCd and S are usually calculated by Unity from the parts model when loading the game assets. ModuleManager caches these part values in case you want to look them up.\n\u003C/p\u003E\n\u003Cp\u003E\nIn the theory outlined on wikipedia the Cd value includes drag contributions from all sides of the object: Front, side and backside. Since constructs can modify for instance the backside by a pointy cone, KSP splits real world Cd into contribution by side and via multipling with exposed surface area only relevant contributions are counted.\n\u003C/p\u003E\n\u003Cp\u003E\nNow we have an understanding for prograde drag using Newton drag approximation.\n\u003C/p\u003E\n\u003Cp\u003E\nNewton drag has its limitations: Once you get close to the speed of sound (mach 1) drag changes a lot and when the laminar assumption fails you need to modify your calculations. KSP does both of this by applying a factor for each to the calculated drag, one is a function on mach number, the other a function on a pseudoreynolds number which is rho * v. The actual functions are parameterized curves, since they are exposed in the API for Addons, I never cared to explore them more.\n\u003C/p\u003E\n\u003Cp\u003E\nSo still for prograde drag we are at: 1/2*rho*v^2*Cd*S*f(mach)*f_reynolds( rho*v)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cu\u003E\u003Cstrong\u003EDrag Cubes and Angle of Attack\u003C/strong\u003E\u003C/u\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nSo far the natural orientation of our object and the flat surface defined by the drag vector as normal were perfect aligned. Of course we could calculate Cd for any object orientation (remember that Unity does this on loading), KSP choosed to only do this for all 6 perpendicular sides of an part, which forms the Drag Cube. If you want to create a mental model of this drag cube, do this as rather wireframe with scaled surface cross sections painted on the sides.\n\u003C/p\u003E\n\u003Cp\u003E\nBefore I mentioned only a f(mach) function which is now split into 3 different functions depending on the orientation of our cube face: f_front(mach), f_back(mach), f_side(mach).\n\u003C/p\u003E\n\u003Cp\u003E\nIn order to get the resulting drag KSP calculates the normalized dot product of velocity and each cube faces normal, which is basically the cosinus of angle of attack for each cube surface. Depending on the angle it uses this cosinus to linear blend between f_front(mach) and f_side(mach) or f_back(mach) and f_side(mach). Since sideway modifiers are smaller, drag is smaller if the angle of attack for a surface is higher.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cu\u003E\u003Cstrong\u003ESpecial cases\u003C/strong\u003E\u003C/u\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nMost obvious case: If the part is shielded inside a cargo bay or fairing it has no drag.\n\u003C/p\u003E\n\u003Cp\u003E\nSome parts like struts or fuel lines have simplified constant drag values instead of Drag Cubes.\n\u003C/p\u003E\n\u003Cp\u003E\nParachutes nowadays have Drag Cubes for each state (packed, semi deployed, deployed), but ommit the area occlusion and chute direction is independent of part.\n\u003C/p\u003E\n\u003Cp\u003E\nI did saw some special case code for very low drag situations, but never cared enough to investigate further.\n\u003C/p\u003E\n\u003Cp\u003E\nAll lifting surfaces (wings, control surfaces) do calculate drag completely different, mostly dependent on a function of cosinus between velocity and wing normal. \u003Ca href=\u0022https://github.com/cbase2/KSPTrajectories/blob/master/src/Plugin/StockAeroUtil.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/cbase2/KSPTrajectories/blob/master/src/Plugin/StockAeroUtil.cs\u003C/a\u003E has all wing calculations if you are interested, the official repository from neuoy has them more obscured via KSP function codes which has some side effects on using the current orientation.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"arthur106","CreatedById":203096,"CreatedDateTime":"2020-04-10T21:25:25Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223768919\u0022 data-ipsquote-contentid=\u0022192997\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221586525958\u0022 data-ipsquote-userid=\u0022189476\u0022 data-ipsquote-username=\u0022CBase\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, CBase said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDrag is created by motion and always opposite of the surface velocity.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nDoes the game use velocity relative to the velocity of the surface directly below you, or\u00A0the velocity of the surface projected to your current altitude?\u00A0 I realize that\u0027s a bit confusing, but I thought about it for a few minutes and that\u0027s the best explanation I could come up with...\u00A0 For example:\u00A0 at the equator, the surface velocity on kerbin is ~175m/s.\u00A0 If we go up 50km, however, the velocity would be ~190 due to the larger radius.\n\u003C/p\u003E\n\u003Cp\u003E\nForgive me if I missed it in you explanation, but are f_mach and f_reynolds independent of individual parts?\u00A0 or are there separate f_mach and f_reynolds functions for each part?\n\u003C/p\u003E\n"},{"CreatedByName":"CBase","CreatedById":189476,"CreatedDateTime":"2020-04-11T07:29:37Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223769157\u0022 data-ipsquote-contentid=\u0022192997\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221586553925\u0022 data-ipsquote-userid=\u0022203096\u0022 data-ipsquote-username=\u0022arthur106\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, arthur106 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDoes the game use velocity relative to the velocity of the surface directly below you, or\u00A0the velocity of the surface projected to your current altitude?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nActually I always assumed that the game uses the correct surface speed for given altitude for drag calculations, the basic methods in CelestialBody are there and these are used in Trajectories addon (simple vector cross product of radius and angular Velocity).\n\u003C/p\u003E\n\u003Cp\u003E\nHowever Trajectories never got Drag 100% right and I never understood why, so I looked into this part of the game and to my surprise something complete different was there: It seems the game splits movement between Unity (only mionor part) and internal handling in Krakensbane Class, which as the name suggests fixes vessels being ripped apart by the Kraken. However the difference is very small from a test, so in respect of your question the answer is: Yes the game uses the correct rotational surface speed for each altitude.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223769157\u0022 data-ipsquote-contentid=\u0022192997\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221586553925\u0022 data-ipsquote-userid=\u0022203096\u0022 data-ipsquote-username=\u0022arthur106\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, arthur106 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nare f_mach and f_reynolds independent of individual parts?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYes, sorry for not being clear about this. They are all calculated per part, so you can display them in aero part debug output (which is a good reason to do the same), but the function is the same for all parts.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-04-11T07:53:28Z\u0022 title=\u002204/11/2020 07:53  AM\u0022 data-short=\u00224 yr\u0022\u003EApril 11, 2020\u003C/time\u003E by CBase\u003C/strong\u003E\n\u003Cbr\u003Eupdated speed part with additional information\n\u003C/span\u003E\n"}]}