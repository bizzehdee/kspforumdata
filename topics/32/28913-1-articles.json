{"TopicId":28913,"ForumId":32,"TopicTitle":"The new database system","CreatedByName":"EleSigma","CreatedById":11215,"CreatedDateTime":"2013-05-24T22:47:04Z","PageNum":1,"Articles":[{"CreatedByName":"EleSigma","CreatedById":11215,"CreatedDateTime":"2013-05-24T22:47:04Z","Content":"\n\u003Cp\u003ESo with the database being implemented in .20, what exactly does it do for the game? I remember a long long time ago (when there were still dev streams \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E ) Nova or Harv mentioning that the database would allow the continuation of implementing new planets and working around overworking the unity engine somehow.\u003C/p\u003E\n"},{"CreatedByName":"TelluriumCrystal","CreatedById":25647,"CreatedDateTime":"2013-05-24T22:47:54Z","Content":"\n\u003Cp\u003EFrom what I can tell it just makes the folder structure more... structured. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"EleSigma","CreatedById":11215,"CreatedDateTime":"2013-05-24T22:53:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Thrfoot\u0022 data-cite=\u0022Thrfoot\u0022\u003E\u003Cdiv\u003EFrom what I can tell it just makes the folder structure more... structured. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh...I thought it was supposed to reduce strain on the engine or something. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"HarvesteR","CreatedById":4,"CreatedDateTime":"2013-05-25T00:02:55Z","Content":"\n\u003Cp\u003EIt\u0027s not just about moving files around, the big thing is how they\u0027re handled.\u003C/p\u003E\u003Cp\u003EBefore, the primary entry point for assets were the .cfg files. That is, the game would go through all the part.cfgs (and others) it could find, read them and load files as needed. For instance, the part.cfg for the mk1 pod says it needs the mk1 pod mesh, its texture and some sounds, then each of those were loaded into memory in order to build the part.\u003C/p\u003E\u003Cp\u003ENow, it\u0027s a much more efficient system. Instead of doing the above, we go through the assets first, loading every model, texture and other asset we find on the GameData folder structure, and only afterwards we run through the cfgs, and we assemble the parts, internals and other cfg-defined stuff.\u003C/p\u003E\u003Cp\u003EThis at first might not sound like it makes much difference, but it enables a few key things to happen. Most importantly, we now get to re-use assets across many parts. So if two part cfgs call for the same texture, it\u0027s already loaded, so we just use it again.\u003C/p\u003E\u003Cp\u003EAlso, we can load assets regardless of how they\u0027ll be used later. Take flags for instance. The new database loader system made it very simple for us to just add a Flags folder, where we can find bitmaps to use as flags. The loader itself just puts it in the game. The flag logic later is what gives them a use. \u003C/p\u003E\u003Cp\u003EThis works for just about anything. Imagine you\u0027re writing a tutorial, and you want to draw a texture on one of the tutorial pages. Before GameDatabase, you\u0027d have to write the texture loading routine for that single asset, inside the tutorial logic itself. Now, you can just ask GameDatabase for the texture by giving it a url path, and not worry about file handling on bits of code that are doing other jobs. \u003C/p\u003E\u003Cp\u003EThere\u0027s a lot more to it, of course. But those are a few of the advantages we gained by switching to this new system.\u003C/p\u003E\u003Cp\u003ECheers\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-05-25T00:06:58Z\u0022 title=\u002205/25/2013 12:06  AM\u0022 data-short=\u002211 yr\u0022\u003EMay 25, 2013\u003C/time\u003E by HarvesteR\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"EleSigma","CreatedById":11215,"CreatedDateTime":"2013-05-25T00:43:00Z","Content":"\n\u003Cp\u003EThank you for the explanation Harv \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2013-05-25T03:12:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HarvesteR\u0022 data-cite=\u0022HarvesteR\u0022\u003E\u003Cdiv\u003ENow, it\u0027s a much more efficient system. Instead of doing the above, we go through the assets first, loading every model, texture and other asset we find on the GameData folder structure, and only afterwards we run through the cfgs, and we assemble the parts, internals and other cfg-defined stuff.\u003Cp\u003EThis at first might not sound like it makes much difference, but it enables a few key things to happen. Most importantly, we now get to re-use assets across many parts. So if two part cfgs call for the same texture, it\u0027s already loaded, so we just use it again.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes this mean the loader checks if a texture has already been loaded, regardless of path (i.e. CRC Check)?\u003C/p\u003E\n"}]}