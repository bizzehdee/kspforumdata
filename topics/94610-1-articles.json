{"TopicId":94610,"ForumId":36,"TopicTitle":"PARTDATA ConfigNode in save files?","CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-12-26T20:46:09Z","PageNum":1,"Articles":[{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-12-26T20:46:09Z","Content":"\n\u003Cp\u003EAlright, I was going through the various save files (.craft, .sfs) this morning, and I noticed that every part has a PARTDATA config node in it\u0027s save file.\u003C/p\u003E\u003Cp\u003EThis is just before the MODULE config node for that part and is present on the same level along with the ACTIONS and EVENTS config nodes.\u003C/p\u003E\u003Cp\u003EHowever, PARTDATA is always empty (or was in the parts I checked), and I can\u0027t find any references to it in the object browser in Visual Studio. Additionally, I can not recall any mention of it ever here on the forums.\u003C/p\u003E\u003Cp\u003EDoes anyone know what this is?\u003C/p\u003E\u003Cp\u003EMy first thought was for storing science experiment data, but that is in the ModuleScienceContainer partModule.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-26T21:35:26Z\u0022 title=\u002212/26/2014 09:35  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 26, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-12-26T21:57:23Z","Content":"\n\u003Cp\u003EGood find! Looks like it\u0027s a way for us to store persistent per-part data for custom (or config-modified) parts that doesn\u0027t necessarily require adding a PartModule. You subclass Part to use it:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eclass PersistentPart : Part\u003Cbr\u003E{\u003Cbr\u003E    public override void OnSave(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnSave(node);\u003Cbr\u003E        node.AddValue(\u0022ThisValue\u0022, \u0022That I saved\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EPART\u003Cbr\u003E{\u003Cbr\u003Ename = probeCoreSphereTest\u003Cbr\u003Emodule = PersistentPart\u003Cbr\u003E...\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[snip]\u003Cbr\u003E\tattm = 0\u003Cbr\u003E\tmodCost = 0\u003Cbr\u003E\tmodMass = 0\u003Cbr\u003E\tmodSize = (0.0, 0.0, 0.0)\u003Cbr\u003E\tEVENTS\u003Cbr\u003E\t{\u003Cbr\u003E\t}\u003Cbr\u003E\tACTIONS\u003Cbr\u003E\t{\u003Cbr\u003E\t}\u003Cbr\u003E\tPARTDATA\u003Cbr\u003E\t{\u003Cbr\u003E\t\tThisValue = That I saved\u003Cbr\u003E\t}\u003Cbr\u003E[/snip]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EData is also saved with .crafts from the editor (I checked) so that could be quite handy\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-12-26T22:17:20Z","Content":"\n\u003Cp\u003EMy lord, and I just built an entire complex system to do almost the same thing.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-12-27T03:29:11Z","Content":"\n\u003Cp\u003EWow, that sounds like it is going to make my life so much easier.\u003C/p\u003E\u003Cp\u003EOff to test.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003Cp\u003Eedit: This is actually a horrendously dangerous piece of code that I am going to \u003Cstrong\u003Estrongly\u003C/strong\u003E suggest only part creators use, it\u0027s a huge can of worms if someone like me who is editing existing parts uses it.\u003C/p\u003E\u003Cp\u003EThis reason is that in EvilReeper\u0027s example above, that is changing the part.cfg file of the part. To use this I would have to make a custom extended Part class and change module = part to module = MyPersistentPart which means no one else could use this as there can only be one module= line in a part.cfg file. \u003C/p\u003E\u003Cp\u003ETo work as I need it too, I would have to change every part in the game to MyPersistentPart and if someone else tried to use this, only one of us can and it will lead to people fighting over who has the right to use it.\u003C/p\u003E\u003Cp\u003EWhich is why it is safe for part creators, they know there is no one else fighting to determine what the module= line says, they get to define it as they are making the part.\u003C/p\u003E\u003Cp\u003EUnless someone with more C# experience knows a workaround, I\u0027m staying far away from this feature.\u003C/p\u003E\u003Cp\u003Eedit the 2nd: This is actually the old module system that the partModule system replaced. \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#module\u0022 rel=\u0022external nofollow\u0022\u003EDocumentation link here.\u003C/a\u003E As such, I\u0027m not sure this is something we should still be using.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-27T04:15:37Z\u0022 title=\u002212/27/2014 04:15  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 27, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-12-27T07:23:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003Eedit the 2nd: This is actually the old module system that the partModule system replaced. \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#module\u0022 rel=\u0022external nofollow\u0022\u003EDocumentation link here.\u003C/a\u003E As such, I\u0027m not sure this is something we should still be using.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027ve always (well, that I\u0027ve been here) been able to subclass Part but as far as I can tell the PARTDATA segment is new. If you were writing a Part subclass before, you\u0027d also need a PartModule to deal with storing persistent data. I suspect PARTDATA was added to support CompoundPart...\u003C/p\u003E\u003Cp\u003EAnd yeah, you definitely don\u0027t want to replace every part instance with your own \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E Custom parts only\u003C/p\u003E\n"}]}