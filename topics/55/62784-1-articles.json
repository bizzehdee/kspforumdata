{"TopicId":62784,"ForumId":55,"TopicTitle":"Drag Model Discussion","CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-10T13:59:59Z","PageNum":1,"Articles":[{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-10T13:59:59Z","Content":"\n\u003Cp\u003EI had a look but couldn\u0027t find anything, so I started thinking about the modular nature of KSP and how drag can work (and why the current situation causes problems).\u003C/p\u003E\u003Cp\u003ESo currently, an object has drag x which just stacks up, regardless of orientation, and then goes through a drag calculation (which doesn\u0027t take into account cross sectional area) and gives a universal figure of drag\u003C/p\u003E\u003Cp\u003EI propose the following modifications: each face has it\u0027s own drag coefficient of drag and a pre-calculated surface area.\u003C/p\u003E\u003Cp\u003ECalculating drag then becomes a function of summing all non-occluded faces (Faces that are not hidden by other faces, if they partially overlap, then there\u0027s got to be a calculation to determine the amount of \u0022shadow\u0022 that the occluding face provides) that lie within 90 degrees of the direction of travel (faces 90-degrees to the direction of travel can maybe carry a parasitic drag factor?) multiplied by the sine of the angle of normal to the direction of travel. This function is fairly similar to incidental light calculations for flat shading, so the CPU load to calculate should be fairly insignificant for moderate sized rockets, perhaps insignificant on larger vehicles? Further optimisation becomes available in using tabled sine values for the multiplication and the automatic elimination of occluded faces can be done on leaving the VAB (the only time they will ever change is if a module is disconnected at the occluding face)\u003C/p\u003E\u003Cp\u003EAs a first approximation, this then permits nose cones to provide a positive effects on drag reduction, whilst also providing module force effects in atmosphere that are a little more true to life, without also going in depth to deal with actual aerodynamics. This could also be used as the aerodynamic system, as the drag force is also what provides uplift (via angle of attack).\u003C/p\u003E\u003Cp\u003ESupersonic flow is the same formula, however heat effects come into play and make things a little more tricky - it\u0027d be nice to see it included, but not essential?\u003C/p\u003E\n"},{"CreatedByName":"coolitic","CreatedById":79738,"CreatedDateTime":"2014-02-10T20:43:19Z","Content":"\n\u003Cp\u003Etldr some of it. The problem with what you suggested is that the physics for this are more complex resulting in reduced performance (afaik). Also makes game a bit more complicated.\u003C/p\u003E\n"},{"CreatedByName":"Comrade Jenkens","CreatedById":59544,"CreatedDateTime":"2014-02-10T20:47:54Z","Content":"\n\u003Cp\u003Esomething like a more simple version of far would be nice.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-10T21:07:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022majic79\u0022 data-cite=\u0022majic79\u0022\u003E\u003Cdiv\u003ECalculating drag then becomes a function of summing all non-occluded faces (Faces that are not hidden by other faces, if they partially overlap, then there\u0027s got to be a calculation to determine the amount of \u0022shadow\u0022 that the occluding face provides) that lie within 90 degrees of the direction of travel (faces 90-degrees to the direction of travel can maybe carry a parasitic drag factor?) multiplied by the sine of the angle of normal to the direction of travel. This function is fairly similar to incidental light calculations for flat shading, so the CPU load to calculate should be fairly insignificant for moderate sized rockets, perhaps insignificant on larger vehicles? Further optimisation becomes available in using tabled sine values for the multiplication and the automatic elimination of occluded faces can be done on leaving the VAB (the only time they will ever change is if a module is disconnected at the occluding face)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is not how aerodynamics works. Your system (since it\u0027s treating airflow like light and handling occlusion) will end up with very strange effects that are only ever realistic at Mach numbers well above ~5 (read: Kerbin reentry speeds only), but for anything lower they\u0027ll be completely incorrect (read: actually trying take off or land a plane). For example on \u003Ca href=\u0022http://calamarusa.com/images/Cessna%20172%20Porta%20Lateral.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ethis Cessna 172\u003C/a\u003E, at moderate to high angles of attack the vertical tail will be completely occluded from the airflow; this will result in no forces on the tail, which means that the plane will immediately go into a flat spin. Similarly, at negative angles of attack the main wing will occlude the horizontal tail, making the vehicle unstable in pitch. Now, Cessna 172\u0027s don\u0027t tend to go into flat spins after rotating to take off or become unstable if they have a negative angle of attack, so you\u0027re going to end up with completely unrealistic aerodynamics that will confuse players a lot.\u003C/p\u003E\u003Cp\u003EYou\u0027ll get the same effects with pretty much any plane that doesn\u0027t have the vertical tail mounted below the fuselage and that doesn\u0027t have its horizontal tail mounted below the main wing. Players will be completely unable to look to real life for aerodynamic solutions, which is really, really bad, since aerodynamics isn\u0027t a simple thing to learn to deal with.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAs a first approximation, this then permits nose cones to provide a positive effects on drag reduction, whilst also providing module force effects in atmosphere that are a little more true to life, without also going in depth to deal with actual aerodynamics. This could also be used as the aerodynamic system, as the drag force is also what provides uplift (via angle of attack).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExcept if all the drag is applied to the nose cones then you end up with the majority of drag in front of the CoM, which results in the rocket becoming unstable.\u003C/p\u003E\u003Cp\u003EIn a lot of ways, this is actually less accurate than the current messed up drag model, since it\u0027ll be almost impossible to build something stable.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETL;DR: This system has very nasty unintended consequences that will make airplane and rocket design much more difficult, more unrealistic, and will be more expensive to run. This is the aerodynamic equivalent of the \u0022Why don\u0027t we simulate Lagrange points using small, low gravity SOIs?\u0022 with the same errors: it has no basis in reality and is confusing for players. This is a really bad idea.\u003C/strong\u003E\u003C/p\u003E\n"},{"CreatedByName":"theend3r","CreatedById":97560,"CreatedDateTime":"2014-02-10T21:08:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022majic79\u0022 data-cite=\u0022majic79\u0022\u003E\u003Cdiv\u003E-snip-\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESounds well thought out. Working with drag similary as with shadows is a neat idea.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003E...Your system will end up with very strange effects...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrue if there was only one source of \u0022light\u0022. What if each part generated another behind it after occluding itself? That sounds too complicated though.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-10T21:13:04Z\u0022 title=\u002202/10/2014 09:13  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 10, 2014\u003C/time\u003E by theend3r\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-10T21:24:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022theend3r\u0022 data-cite=\u0022theend3r\u0022\u003E\u003Cdiv\u003ETrue if there was only one source of \u0022light\u0022. What if each part generated another behind it after occluding itself? That sounds too complicated though.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo basically, handling all of this without any occlusion then? At that point there\u0027s no point in doing light at all and it would be faster to just do vector math on the part\u0027s orientation.\u003C/p\u003E\u003Cp\u003EBut I doubt that\u0027s what majic79 was talking about since he specifically mentioned occlusion and how that would allow nose cones to positively affect drag. That could only happen (under his system) if parts could occlude each other. So now we\u0027re back to strange effects.\u003C/p\u003E\n"},{"CreatedByName":"Comrade Jenkens","CreatedById":59544,"CreatedDateTime":"2014-02-10T21:39:00Z","Content":"\n\u003Cp\u003Eferram: Would you say the method you use in FAR is suited for stock KSP or is it aimed towards more advanced players?\u003C/p\u003E\n"},{"CreatedByName":"theend3r","CreatedById":97560,"CreatedDateTime":"2014-02-10T22:10:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003ESo basically, handling all of this without any occlusion then? At that point there\u0027s no point in doing light at all and it would be faster to just do vector math on the part\u0027s orientation.\u003Cp\u003EBut I doubt that\u0027s what majic79 was talking about since he specifically mentioned occlusion and how that would allow nose cones to positively affect drag. That could only happen (under his system) if parts could occlude each other. So now we\u0027re back to strange effects.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo. If there was an empty space behind a part (thus hardly nosecones) there would be an air torrent behind it = resetting the drag for that part. But as I said it doesn\u0027t really sound feasible.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-10T22:16:10Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E@Comrade Jenkins: \u003C/strong\u003EFAR would be fine for stock KSP, there are only three main reasons that people have serious issues adjusting to it:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EPeople are used to stock aerodynamics, and the changeover causes problems since it requires a different attitude towards piloting. Of course, this isn\u0027t difficulty in the model itself, it\u0027s just the apparent difficulty due to change. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EEngines are too heavy. This puts the CoM of KSP rockets a lot lower than it should be; I personally would drop the engine masses either to 1/2 or 1/3 of what they are and then increase the dry masses of fuel tanks to compensate. That or increase the dry mass of decouplers or something like that. Either option ends up shifting the CoM further up the rocket, making rockets more stable. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ESAS doesn\u0027t play well with lots of control authority; this is currently hidden with the ineffectiveness of the current control surfaces and the small thrust vectoring ranges that most engines have. The solution to this is obviously to re-tune SAS. \u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EOnly more advanced players will really be able to handle the more interesting aspects of the model (body lift, space plane stuff, building really heavy complicated landers), but I think that the difficulty that most players have with it is simply due to habits and design principles that work for the stock model but then are detrimental with FAR. They forget that they had to fail a lot before they got good at stock KSP, but think that they\u0027re masters at the game and are unwilling to recognize that they\u0027re back to being newbies again. I suspect that players who just jumped into KSP \u002B FAR without taking any time dealing with stock aero won\u0027t have that bad a time once they get past the initial \u0022I have no idea what I\u0027m doing\u0022 phase of playing KSP.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ENo. If there was an empty space behind a part (thus hardly nosecones) there would be an air torrent behind it = resetting the drag for that part. But as I said it doesn\u0027t really sound feasible.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo... how do we determine what should count as empty space? This sounds like a really good way to get even worse interactions due to slight errors in the distances between parts. There is a small amount of distance between fuel tanks when they\u0027re connected.\u003C/p\u003E\u003Cp\u003EAnd besides that, in real life it would depend on the shape of the object and the Mach number. There might not be any air right behind the part. There might be a lot of turbulent air right behind it. In either case, simply resetting drag is just going to be completely wrong anyway, and it wouldn\u0027t make much sense to take all the calculations necessary to figure all that out.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-10T22:21:36Z\u0022 title=\u002202/10/2014 10:21  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 10, 2014\u003C/time\u003E by ferram4\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kasuha","CreatedById":81781,"CreatedDateTime":"2014-02-10T22:33:10Z","Content":"\n\u003Cp\u003EI believe what OP meant by occlusion was only occlusion by a part directly attached to that face. Not occlusion by some distant part. So if you have a fuel tank, its top generates some drag. But if you slap a nosecone of corresponding diameter on it, the drag of the tank top, as well as drag of the nosecone\u0027s bottom would not be applied because they occlude each other.\u003C/p\u003E\u003Cp\u003EI\u0027d also add that drag should probably not change with part\u0027s weight as it does now, but it might change with angle of attack on each individual part/face.\u003C/p\u003E\u003Cp\u003EI have no idea how exactly FAR works and I am not even remotely trying to suggest this would lead to aerodynamics model as good or even better than FAR but it might still be better aerodynamics model than the current stock one.\u003C/p\u003E\n"},{"CreatedByName":"theend3r","CreatedById":97560,"CreatedDateTime":"2014-02-10T22:37:09Z","Content":"\n\u003Cp\u003EJust read your sig, didn\u0027t know you tried it already. That\u0027s pretty impressive.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-10T22:40:17Z","Content":"\n\u003Cp\u003EAh, the old Raycast Drag Experiment? I need to get that up-to-date so it properly works in 0.23. I decided the best way to shoot the idea down was to implement it and let everyone realize how bad it is. Sort of works for rockets that flare at the bottom, completely fails for anything else. And that\u0027s with some kludge fixes in there to make it work.\u003C/p\u003E\u003Cp\u003EAlso, it ate processor power like crazy and that was only calculating for the active vessel.\u003C/p\u003E\n"},{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-10T22:56:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003EThis is not how aerodynamics works. Your system (since it\u0027s treating airflow like light and handling occlusion) will end up with very strange effects that are only ever realistic at Mach numbers well above ~5 (read: Kerbin reentry speeds only), but for anything lower they\u0027ll be completely incorrect\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, by occlusion, I meant faces in direct contact - occlusion of non-contact faces (shadowing) would only work for speeds exceeding the speed of sound at distances less than the wavelength of the shock wave (a function of the speed of propagation of the shockwave and the speed of the body through the fluid) - so please read the suggestion as for that of faces in direct contact with each other, and not for faces that are only in shadow (for it to work properly at supersonic speeds, then you must take into account distances between faces and then calculate the speed of the shockwave to see if there\u0027s an interaction or not)\u003C/p\u003E\u003Cp\u003EPerhaps \u0022occlusion\u0022 was the wrong word, but the intention was only to omit faces of an object that are in direct contact with another object, not faces that are \u0022shadowed\u0022 and the method I propose is not CPU intensive - it\u0027s very similar to a common lighting problem (flat shading and gouraud shading were one of the first colouring techniques I learnt in 3D graphics before 3D enabled hardware became common) which is readily handled by OpenGL and could potentially offload the calc to a GPU during physics/aerodynamic areas of the trajectory\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003E \u003Cp\u003E-snip-\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI realise that this doesn\u0027t take into account re-adjustment of airflow as it passes around objects, but it does give a better first order approximation of drag effects and lift, without interfering with the remainder of the simulation\u003C/p\u003E\n"},{"CreatedByName":"AngelLestat","CreatedById":58968,"CreatedDateTime":"2014-02-10T23:02:57Z","Content":"\n\u003Cp\u003EFerram, I always wanna make you a question.\u003C/p\u003E\u003Cp\u003EI guess one of the main problems to have a real aerodynamic system, is the size of kerbin and its gravity.\u003C/p\u003E\u003Cp\u003EI believe that the squad desicion to make kerbin and other scales small was a hit. Becouse the game would be irritating if we need to wait 15 or 20 min for each launch, more if we are in the test design phase.\u003C/p\u003E\u003Cp\u003EBut this has a real big issue. There is a lot of physsics conceptions that looks weird just becouse lack of real values.\u003C/p\u003E\u003Cp\u003EAtmosphere is thin, so there is not good way to balance this, if you had a good aerodinamyc shape it will be too easy to cross it, and if you dont it would be really harded or with weird collateral effects.\u003C/p\u003E\u003Cp\u003EOrbit speed is really slow, so this also modify all reentry heat problems, engine and rockets would seems to behave contrary to our common sense prediction.\u003C/p\u003E\u003Cp\u003EAre these the main problems to adapt a good aerodynamic system in ksp?\u003C/p\u003E\u003Cp\u003EPD: Just to be clear, I use your mod ferram anyway, I preffer that to deal with arcade style of motion.\u003C/p\u003E\n"},{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-10T23:07:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kasuha\u0022 data-cite=\u0022Kasuha\u0022\u003E\u003Cdiv\u003EI believe what OP meant by occlusion was only occlusion by a part directly attached to that face. Not occlusion by some distant part. So if you have a fuel tank, its top generates some drag. But if you slap a nosecone of corresponding diameter on it, the drag of the tank top, as well as drag of the nosecone\u0027s bottom would not be applied because they occlude each other.\u003Cp\u003EI\u0027d also add that drag should probably not change with part\u0027s weight as it does now, but it might change with angle of attack on each individual part/face.\u003C/p\u003E\u003Cp\u003EI have no idea how exactly FAR works and I am not even remotely trying to suggest this would lead to aerodynamics model as good or even better than FAR but it might still be better aerodynamics model than the current stock one.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is pretty much what I\u0027m going for - the normal to the surface and angle in relation to the direction of travel will dictate the amount of drag the face will be subject to (and magnitude of deflection can be determined for the same angle giving a vector thrust reaction to apply to the module - total module deflection is then the sum of all affected faces and node breakdown occurs above a critical force/vector) - for subsonic flight this model should be fairly simplistic and effective - it also doesn\u0027t take into account transonic turbulence, so should make things easier (not having to design/counter this effect should make it easier on the player) and doesn\u0027t overload the system trying to handle too work out the cross sectional area of the whole, or an appropriate aerodynamic drag factor in relation to the whole, whilst still retaining the ability of the system to simulate aerodynamic reaction, catastrophic failure etc\u003C/p\u003E\n"},{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-10T23:15:52Z","Content":"\n\u003Cp\u003EWell, I\u0027ll add I\u0027m still fairly new to Kerbal, but I\u0027m not new to flight sims (or flight for that matter - I have some time logged in a Cessna 152) and I wasn\u0027t aware you\u0027d done experiments in drag Ferram - but it\u0027s interesting to see, and I can understand why you interpretted \u0022occlusion\u0022 in the manner you did (yes, it was the wrong choice of words for me)\u003C/p\u003E\u003Cp\u003EI do work in a fluid flow environment so I\u0027ve some knowledge of the technology (which is a whole lot more complex than my suggestion, but that suggestion is aimed at providing a slightly better model with minimal impact on performance)\u003C/p\u003E\u003Cp\u003EPlus keep the discussion going as I\u0027m only trying to get thoughts going and see if there\u0027s something to be gained from it\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-10T23:19:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022majic79\u0022 data-cite=\u0022majic79\u0022\u003E\u003Cdiv\u003EActually, by occlusion, I meant faces in direct contact\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThen you should have defined what you meant. You spoke about treating things using light and then used occlusion rather than speaking about faces exposed to the airflow; considering that the standard idea people have with respect to this is that \u0022air == light\u0022 (why? I don\u0027t have any clue, it doesn\u0027t make sense), you basically shot your idea in the foot.\u003C/p\u003E\u003Cp\u003E \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eocclusion of non-contact faces (shadowing) would only work for speeds exceeding the speed of sound at distances less than the wavelength of the shock wave (a function of the speed of propagation of the shockwave and the speed of the body through the fluid)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUmm... I don\u0027t think shocks \u003Cem\u003Ehave\u003C/em\u003E a defined wavelength. I\u0027m not actually sure what you\u0027re getting at here, since none of my aerodynamics classes (even the ones focused on supersonic flow) ever went into shocks having wavelengths. Shocks are more akin to step functions, not sine waves like traditional sound.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EPerhaps \u0022occlusion\u0022 was the wrong word, but the intention was only to omit faces of an object that are in direct contact with another object, not faces that are \u0022shadowed\u0022 and the method I propose is not CPU intensive - it\u0027s very similar to a common lighting problem (flat shading and gouraud shading were one of the first colouring techniques I learnt in 3D graphics before 3D enabled hardware became common) which is readily handled by OpenGL and could potentially offload the calc to a GPU during physics/aerodynamic areas of the trajectory\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s a lot more intensive than it needs to be for what you\u0027re getting out of it. You could get the same effect by simply storing a bunch of properties and doing vector math every frame rather than running a lighting type of function on the CPU or trying to send it off to the GPU and waiting on the info getting back from there. I mean, vector math and storing variables what FAR does, and it really doesn\u0027t hit performance that much and it\u0027s not even completely optimized.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI realise that this doesn\u0027t take into account re-adjustment of airflow as it passes around objects, but it does give a better first order approximation of drag effects and lift, without interfering with the remainder of the simulation\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat do you mean exactly by \u0022without interfering with the remainder of the simulation?\u0022 It would be a pretty poor aerodynamics model if it didn\u0027t affect the rest of the simulation, so I have to assume you mean something else by this, since you just said you meant something other than light and occlusion when you were speaking about light and occlusion.\u003C/p\u003E\n"},{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-11T10:22:11Z","Content":"\n\u003Cp\u003EFerram4 - technically occlusion is correct (see meteorological and dentistry definition) in the context it was intended (ie, Include/exclude - the category for exclusion from the calculation is it\u0027s direct contacting faces which can either completely or partially reduce the drag calculation for a face), and while I appreciate that it\u0027s similar, it\u0027s not the same as shadow (air != light) and I\u0027ve no intention that this idea should introduce shadow effects of drag (which does occur, due to turbulence and diminished airflow - I know first hand as I get to experience it sailing inland or with terrain features that interfere with wind) and I don\u0027t want shadowing of airflow to affect control surfaces due to high angles of attack\u003C/p\u003E\u003Cp\u003ESupersonic transition creates a shock, with a corresponding re-merging of the disturbed shock front with the surrounding air, this has a speed and a distance and is therefore a wave (a standing wave in relation to the moving body, a sonic boom to an observer) during the transition from subsonic to supersonic flight, and that distance is the wave length (and causes some quite sever effects in turbulence around the body until it passes a critical mach number) and really is only an interesting point for discussion in the transonic region - but as I\u0027m not interested in simulating aerodynamic effects to this level, it\u0027s irrelevant to the discussion.\u003C/p\u003E\u003Cp\u003EI think you\u0027ve misunderstood what I mean by a \u0022light function\u0022 - I\u0027ve never done ray-tracing (it\u0027s too slow for me) and simple vector maths \u003Cem\u003EIS\u003C/em\u003E what I\u0027m proposing\u003C/p\u003E\u003Cp\u003EAnd by interfere, I thought it was implicit that I\u0027m more concerned about impacting on performance - naturally a new drag model will affect the behavior of the simulation\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-11T13:36:13Z\u0022 title=\u002202/11/2014 01:36  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 11, 2014\u003C/time\u003E by majic79\u003C/strong\u003E\n\u003Cbr\u003Eclarification\n\u003C/span\u003E\n"},{"CreatedByName":"NWM","CreatedById":67386,"CreatedDateTime":"2014-02-11T11:26:27Z","Content":"\n\u003Cp\u003EFerram4 -\u003C/p\u003E\u003Cp\u003E[*]Engines are too heavy. This puts the CoM of KSP rockets a lot lower than it should be; I personally would drop the engine masses either to 1/2 or 1/3 of what they are and then increase the dry masses of fuel tanks to compensate. That or increase the dry mass of decouplers or something like that. Either option ends up shifting the CoM further up the rocket, making rockets more stable.\u003C/p\u003E\u003Cp\u003EI agree most of your opinion, except of this. At first the fuel tanks are also overweighted - but are there any so durable rocket-fuel tank in earth like the kerbal ones? Do not forget it is a game, and it have to be coherent to its world. The terran \u0022realistic\u0022 weights makes the travel irrealisticaly easy in the kerbal world! Let be the game be the optimal compostite of realism and fun!\u003C/p\u003E\u003Cp\u003EPS: I LOVE your FAR mod!\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2014-02-11T15:15:02Z","Content":"\n\u003Cp\u003EI don\u0027t really care for too detailed an aerodynamic model as I don\u0027t spaceplane. Atmosphere is just something to be overcome on the way to orbit. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThat said, the drag model really needs to at least take frontal area into account though, and treat streamlined vs non-streamlined parts differently. There should be good reasons for using fairings, vertical vs horizontal staging, etc, which the current model doesn\u0027t reward.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-11T18:03:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022majic79\u0022 data-cite=\u0022majic79\u0022\u003E\u003Cdiv\u003EFerram4 - technically occlusion is correct (see meteorological and dentistry definition) in the context it was intended (ie, Include/exclude - the category for exclusion from the calculation is it\u0027s direct contacting faces which can either completely or partially reduce the drag calculation for a face)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOkay, yeah that makes sense. Sorry, it\u0027s just a bit of a knee-jerk reaction, and I wish there were a better term for it. It reminds me of objects \u0022orbiting\u0022 around Lagrange points and the confusion that can stem from that, and then we end up with uninformed people getting misconceptions about what can work and then everything goes to hell.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ESupersonic transition creates a shock, with a corresponding re-merging of the disturbed shock front with the surrounding air, this has a speed and a distance and is therefore a wave (a standing wave in relation to the moving body, a sonic boom to an observer) during the transition from subsonic to supersonic flight, and that distance is the wave length (and causes some quite sever effects in turbulence around the body until it passes a critical mach number) and really is only an interesting point for discussion in the transonic region - but as I\u0027m not interested in simulating aerodynamic effects to this level, it\u0027s irrelevant to the discussion.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOkay, I think I see what you\u0027re talking about here. You\u0027re considering the actual thickness of the shock the wavelength; I was working under the assumption of the shock having no thickness. I haven\u0027t done work involving shocks with actual thicknesses in awhile.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI think you\u0027ve misunderstood what I mean by a \u0022light function\u0022 - I\u0027ve never done ray-tracing (it\u0027s too slow for me) and simple vector maths \u003Cem\u003EIS\u003C/em\u003E what I\u0027m proposing\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh. FAR does what you want then, though it does it on a part-by-part basis and won\u0027t even account for a fuel tank being half-buried in the side of a fuselage. I haven\u0027t figured out a good way to do that yet and I don\u0027t know much about graphical stuff to be honest. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAnd by interfere, I thought it was implicit that I\u0027m more concerned about impacting on performance - naturally a new drag model will affect the behavior of the simulation\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESorry, I got a little trollish near the end. I should have realized that\u0027s what you meant, I was just confused.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI agree most of your opinion, except of this. At first the fuel tanks are also overweighted - but are there any so durable rocket-fuel tank in earth like the kerbal ones? Do not forget it is a game, and it have to be coherent to its world. The terran \u0022realistic\u0022 weights makes the travel irrealisticaly easy in the kerbal world! Let be the game be the optimal compostite of realism and fun!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe point isn\u0027t to make things easier dV-wise, the point is to make rockets less likely to flip out. Way, way back, FAR actually had the back of rockets produce realistic amounts of drag. Pretty much every rocket you built (unless it had tailfins) needed to be controlled exactly right or it would flip out spontaneously, since the CoM was so low on it. Now, FAR applies 20 times real-life drag to the back of the rocket at Mach 0 and 5 times real-life drag to the back of the rocket at Mach 1 to try and keep the thing more stable. Unfortunately, this also makes planes and landers behave somewhat strangely. The solution then is to reduce the mass of the engines, and then add a corresponding amount of dry mass to fuel tanks to balance out the change.\u003C/p\u003E\u003Cp\u003EIt\u0027s already about making things fun as opposed to realistic; it\u0027s just that KSP\u0027s current rocket mass distributions actually make a more sophisticated aerodynamics system a non-starter since it\u0027s almost impossible to prevent a rocket from flipping out, so things need to change.\u003C/p\u003E\n"},{"CreatedByName":"majic79","CreatedById":102002,"CreatedDateTime":"2014-02-11T23:23:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESorry, I got a little trollish near the end. I should have realized that\u0027s what you meant, I was just confused.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAll is forgiven - you still make a valid contribution and I welcome constructive criticism\u003C/p\u003E\u003Cp\u003EWith regard to parts embedded within other parts, there is a solution that doesn\u0027t tax things too much if you do it on a face by face basis for each part (module) and reduce the surface area of the part by the amount that\u0027s embedded in the other part and the model should work for those cases also. I\u0027ve been thinking about it and most faces are flat (coefficient for that face=1), the only problem parts are curves (nosecones) and you\u0027d have to work out the mathematical function that describes the curve and then work out drag based on that function. Most 3D parts are constructed of polygonal faces (usually triangles to prevent concave side problems) and if the curve is approximated in 3D using polygons, then it becomes a simple solution (but more time intensive, but linear in relation to the number sides, so not a drastic performance impact)\u003C/p\u003E\n"},{"CreatedByName":"eggrobin","CreatedById":4680,"CreatedDateTime":"2014-02-12T02:11:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ferram4\u0022 data-cite=\u0022ferram4\u0022\u003E\u003Cdiv\u003ENow, FAR applies 20 times real-life drag to the back of the rocket at Mach 0 and 5 times real-life drag to the back of the rocket at Mach 1 to try and keep the thing more stable. Unfortunately, this also makes planes and landers behave somewhat strangely. The solution then is to reduce the mass of the engines, and then add a corresponding amount of dry mass to fuel tanks to balance out the change.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIs this also the case if you run RSS / Realism Overhaul? The mass distribution should be better with these mods.\u003C/p\u003E\n"},{"CreatedByName":"ferram4","CreatedById":21328,"CreatedDateTime":"2014-02-12T05:32:47Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E@majic79: \u003C/strong\u003EThat should work for pretty much any shape, since all the parts are made up of flat polygons. You could grab it straight from mesh even. The only issue I can see is determining whether any particular face is exposed or not.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E@eggrobin: \u003C/strong\u003EThere are values in the config.xml that can be changed to fix that. I believe that the Realism Overhaul pack includes a fixed FAR config to adjust those drag properties.\u003C/p\u003E\n"},{"CreatedByName":"DaMichel","CreatedById":93697,"CreatedDateTime":"2014-02-12T08:57:11Z","Content":"\n\u003Cp\u003EApparently it is not so hard to find out if a point is within another object\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://objectmix.com/graphics/132802-efficient-calculation-point-inside-outside-mesh-intersectionlocation.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://objectmix.com/graphics/132802-efficient-calculation-point-inside-outside-mesh-intersectionlocation.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYou just need to cast a ray and count the number of intersecting faces. So for a whole triangle you can for example use several locations on said triangle to obtain an estimate of the fraction of occluded/exposed surface area.\u003C/p\u003E\u003Cp\u003ERegarding the actual drag model, what would be wrong with adding extra drag to \u0022free\u0022 top/bottom nodes, like FAR does? Furthermore, the mass factor could be simply removed couldn\u0027t it? Parts do have a drag coefficient already which must be tuned properly: nosecone -\u0026gt; small number, blunt cylinder -\u0026gt; larger number, very big nosecone -\u0026gt; large number, etc. For this to make sense however the drag value for, say a nose cone should be lower than the additional drag of a free node. Should be doable.\u003C/p\u003E\n"}]}