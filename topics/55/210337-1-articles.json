{"TopicId":210337,"ForumId":55,"TopicTitle":"Gyroscopic Compass","CreatedByName":"xstarlin","CreatedById":223524,"CreatedDateTime":"2022-10-29T01:40:10Z","PageNum":1,"Articles":[{"CreatedByName":"xstarlin","CreatedById":223524,"CreatedDateTime":"2022-10-29T01:40:10Z","Content":"\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#cccccc;color:#2b2e2f;font-size:14px;text-align:left;\u0022\u003EHi there, I am a fellow game designer and I was super curious how you went about coding the gyroscope compass in KSP? I\u0027ve tried looking around on the web and doing some research and I haven\u0027t been able to find anything useful that explains how to get the 3D compass working, only ever cardinal direction compasses.\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"ColdJ","CreatedById":211123,"CreatedDateTime":"2022-10-30T05:38:38Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/223524-xstarlin/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022223524\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/223524-xstarlin/\u0022 rel=\u0022\u0022\u003E@xstarlin\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nHi. I am happy for someone to correct me, but in non programming terms I think you have to think about it as, It is not the NAV Ball that is turning but rather your point of observation.\n\u003C/p\u003E\n\u003Cp\u003E\nJust like in a 3D modeling program where you move around a model that is static in the centre of the workspace to see different\u00A0 sides.\n\u003C/p\u003E\n\u003Cp\u003E\nDue to the nature of the game requireing there to be an away from the planet, a towards the planet, an along this axis, an along that axis etc.\n\u003C/p\u003E\n\u003Cp\u003E\nSo as the Kerbal or the craft they are in changes directions in 3 dimensions, the NAV Ball stays orientated to the different axies. essentially it does not turn, you just see different sides based on your orientation, and by observing the different sides you can determine in which direction you are headed.\n\u003C/p\u003E\n\u003Cp\u003E\nI know that is not code but hopefully it might give you an idea of what might need to be done.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2022-12-21T22:04:09Z","Content":"\n\u003Cp\u003E\nI have no affiliation with Squad or Intercept, but you need very similar code for camera in a lot of games, and I have worked on that on a few projects.\n\u003C/p\u003E\n\u003Cp\u003E\nFirst of all, you need to know how your asset is set up. I\u0027m also going to assume we\u0027re going for a 3D look, rather than a similar 2D display used on some aircraft, so you have an actual 3D model, which is a sphere with all of the graphics textured onto it. For the sake of an example, lets say we\u0027re working in Unity and you want the compass model to be level with horizon and pointing North in its Identity orientation. That means you\u0027ll have \u0027S\u0027 painted on the \u002BZ direction of the model (since you\u0027re looking at\u00A0a sphere from -Z in its identity state), \u0027W\u0027 on the \u002BX direction, and Y will be the up for the model. You can work with any other convention, of course, but I\u0027m going to assume this one with the vector math below.\n\u003C/p\u003E\n\u003Cp\u003E\nYour second point of reference is your craft. Again, there need to be a set of orientations. This will be different depending on how the capsule or probe core is oriented, so it doesn\u0027t really matter how that aligns with craft\u0027s XYZ. What\u0027s important, is that there will be a strictly defined Forward axis, which I\u0027ll denote as F, and an Up axis - U. We can also always get the side axis, which in a left-handed coordinate system (Unity) will be in the S = U x F direction.\n\u003C/p\u003E\n\u003Cp\u003E\nFinally, you need to know where the craft is. Internally, KSP stores this in cartesian coordinates r = (x, y, z) and while this can be converted into polar coordinates with some trig, you really don\u0027t have to to make the compass work.\n\u003C/p\u003E\n\u003Cp\u003E\nSo now we can define the problem. You can picture the compass as being a physical object at craft\u0027s location. It floats in an imaginary fluid such that its Y direction points away from the planet\u0027s center and Z points North. We can define these directions. First, observe that radial direction R = r/||r|| - so just normalize craft\u0027s position. In KSP you don\u0027t have to worry about ||r|| = 0, but you might in some other games. So keep in mind that you\u0027ll need to handle this. Second, the North direction is parallel to the surface (so perpendicular to R) and in the direction of planet\u0027s axis (by astronomical convention). Call planet\u0027s axis A. Then the north direction N = A - R(A*R) / ||A - R(A * R)||. That is, we take A, subtract component of A along R (so that the resulting vector is perpendicular to R) and then normalize it. Note, again, that you might be dividing by zero if R and A are parallel. This happens at the North or South poles and you have to figure out what that means in your game, just like for the ordinary compass.\n\u003C/p\u003E\n\u003Cp\u003E\nAt this point, we basically have orientation of our imaginary compass in the world coordinates. I\u0027m going to denote these with primes, so Y\u0027 = R = r/||r||, Z\u0027 = N =\u00A0A - R(A*R) / ||A - R(A * R)||, and because X\u0027 has to be perpendicular to both of these and give us a left-handed coordinate system, X\u0027 = Z\u0027 x Y\u0027. If you wanted to draw the compass inside the cockpit of this spacecraft, you\u0027d be done, because these are body axes in the world coordinates, meaning the world rotation matrix for your compass would be (X\u0027, Y\u0027, Z\u0027)\u003Csup\u003ET\u003C/sup\u003E\u00A0in row major notation. Or, in other words, X\u0027, Y\u0027, and Z\u0027 are your rotation matrix columns.\n\u003C/p\u003E\n\u003Cp\u003E\nBut if you want to show this on HUD, there\u0027s an extra step. Instead of rotation relative to the world, we need rotation relative to the craft. Namely, we want to know the rotation whose inverse will take Z\u0027 to F, Y\u0027 to U, and X\u0027 to S of the craft coordinates. The simplest way to get this is also with matrices. You can take the matrix (S, U, F)\u003Csup\u003ET\u003C/sup\u003E, which might actually be just the rotation matrix of whichever component you\u0027re using for \u0022Control from here\u0022 on that craft at the moment (or it might need some adjustments, depending on the conventions the game uses - it\u0027s always worth to check to see if the Forward/Up are indeed defined this way.) In either case, what we\u0027re looking for a transformation matrix M that satisfies (X\u0027, Y\u0027, Z\u0027)\u003Csup\u003ET\u003C/sup\u003E\u00A0= (S, U, F)\u003Csup\u003ET\u003C/sup\u003EM. The logic here is that if we transform our compass relative to the screen, then transform the screen to align with the craft, the compass on our HUD will match orientation with compass in the cockpit, which is the left hand side of that equation. Multiply both sides by inverse of (S, U, F)\u003Csup\u003ET\u003C/sup\u003E\u00A0on both sides, and keeping in mind that for an orthogonal matrix the inverse is just a transpose, we get M = (S, U, F)(X\u0027, Y\u0027, Z\u0027)\u003Csup\u003ET\u003C/sup\u003E, and that\u0027s the rotation matrix you need to set up on HUD compass for it to have the correct orientation.\n\u003C/p\u003E\n\u003Cp\u003E\nThe precise math above makes assumptions that we\u0027re dealing with a game where you\u0027re always in one \u003Cabbr title=\u0022Sphere of Influence\u0022\u003ESoI\u003C/abbr\u003E or another, meaning there\u0027s a precisely defined \u0022up\u0022 direction and \u0022north\u0022 direction. This might not always be the case for some other games, and then you\u0027ll have to do a bit more work to figure out what exactly that means for your compass or any other world navigation display, but the logic is the same. See where the \u0022up\u0022 and \u0022forward\u0022 orientation of each relevant object is, make matrices out of these, and then multiply/divide these matrices until happy. It\u0027s good to work this out on paper to see if you see any optimizations or potentials for division by zero. Otherwise, though, the logic is always going to be roughly this.\n\u003C/p\u003E\n"},{"CreatedByName":"kerbiloid","CreatedById":129408,"CreatedDateTime":"2022-12-22T10:01:12Z","Content":"\n\u003Cp\u003E\nNavBall is the hyrocompass.\n\u003C/p\u003E\n\u003Cp\u003E\nIt doesn\u0027t\u00A0 depend on magnetic field, illumination, radiation, or anything else. It just indicates your orientation in a fixed co-ordinate system, exactly what is an ideal hyrocompass purpose.\n\u003C/p\u003E\n\u003Cp\u003E\nThe hyroscopes just provide this functionality irl.\n\u003C/p\u003E\n"}]}