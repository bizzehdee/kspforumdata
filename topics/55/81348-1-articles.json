{"TopicId":81348,"ForumId":55,"TopicTitle":"Dear Squad","CreatedByName":"raziel420","CreatedById":42384,"CreatedDateTime":"2014-08-10T20:24:43Z","PageNum":1,"Articles":[{"CreatedByName":"raziel420","CreatedById":42384,"CreatedDateTime":"2014-08-10T20:24:43Z","Content":"\n\u003Cp\u003EI know one of the \u0022kracken\u0022 bugs is due to rounding errors in unity. I found an idle game that I\u0027ve been playing for a few weeks, which involves some very very large numbers and is coded in Unity. Then I got to wondering, if they can keep numbers this large in unity, how, and would they be willing to share that information with Squad. The name of the game is AdVenture Capitalist, and it can be found \u003Ca href=\u0022http://www.kongregate.com/games/HyperHippoGames/adventure-capitalist\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E on Kongregate.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-08-10T21:28:39Z","Content":"\n\u003Cp\u003EI think it\u0027s important to note that rounding errors and using lage numers is /not/ the same thing. Handling large numbers can be easily done with scientific notation. Rounding errors are harder to control and are not necessarily related to large numbers.\u003C/p\u003E\u003Cp\u003EAlso the \u0022kraken\u0022 has been fixed in 0.17, but for some reason tyhe community likes to blame every bug or weird error on it yet.\u003C/p\u003E\u003Cp\u003EEDIT:\u003C/p\u003E\u003Cp\u003EAlso after a quick look at the game, if what you mean as large numbers is the price of some things and the money count, this is not the same thing at /all/. \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003EAnd also those numbers are pretty small compared to what KSP has to deal with\u003C/span\u003E okay it gets rather large, but thats still far from the same situation KSP has to deal with.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-10T21:44:46Z\u0022 title=\u002208/10/2014 09:44  PM\u0022 data-short=\u00229 yr\u0022\u003EAugust 10, 2014\u003C/time\u003E by stupid_chris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ruedii","CreatedById":57704,"CreatedDateTime":"2014-08-12T06:16:23Z","Content":"\n\u003Cp\u003EI would say the original Kracken is 99.99% fixed. It only happens in extreme situations.\u003C/p\u003E\u003Cp\u003EIt also sometimes likes to play with ships in the distance, sending them spinning or smashing crashed-landed fuel tanks against the planet\u0027s surface. I think this could be fixed with a second pass of krackenbane that puts each major object that is more than 10m from any other object on it\u0027s own physics layer, with it\u0027s own kerckenbane reference. \u003C/p\u003E\u003Cp\u003EFurthermore, by placing each non-associating object on it\u0027s own physics layer with it\u0027s own krackenbane base reference, the maximum distance for physics simulation could be greatly increased, allowing players to finally have their released stages properly parachute to the surface.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-12T06:18:03Z\u0022 title=\u002208/12/2014 06:18  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 12, 2014\u003C/time\u003E by Ruedii\u003C/strong\u003E\n\u003Cbr\u003EMoar elaboration\n\u003C/span\u003E\n"},{"CreatedByName":"technicalfool","CreatedById":70430,"CreatedDateTime":"2014-08-12T21:46:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ruedii\u0022 data-cite=\u0022Ruedii\u0022\u003E\u003Cdiv\u003EI would say the original Kracken is 99.99% fixed. It only happens in extreme situations.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOr 99.9999999997% on a Pentium 60?\u003C/p\u003E\u003Cp\u003EAnd for future reference, a \u0022rounding error\u0022 can happen in number systems other than binary. 10/3 would be an obvious example. Funnily enough, \u002210/3*3\u0022 on Windows calculator will give 10, even though 10/3 = 3.3333333333333333333333333333333, and if you take that number on its own and multiply by 3 you get 9.9999999999999999999999999999999. Someone somewhere programmed in a little attempt to \u0022hide\u0022 that particular rounding error.\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-08-13T01:31:28Z","Content":"\n\u003Cp\u003ETech -- that\u0027s a bit of a flawed example anyway, since the base calculations would have to be done in binary in any case, no? But that\u0027s essentially what a lot of programming languages do -- they try to \u0022hide\u0022 the little rounding errors that turn up, especially where floats are concerned.\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2014-08-13T06:40:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022technicalfool\u0022 data-cite=\u0022technicalfool\u0022\u003E\u003Cdiv\u003EFunnily enough, \u002210/3*3\u0022 on Windows calculator will give 10, even though 10/3 = 3.3333333333333333333333333333333, and if you take that number on its own and multiply by 3 you get 9.9999999999999999999999999999999. Someone somewhere programmed in a little attempt to \u0022hide\u0022 that particular rounding error.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUnfortunately 10 / 3 * 3 is, in fact, exactly 10.\u003C/p\u003E\n"},{"CreatedByName":"technicalfool","CreatedById":70430,"CreatedDateTime":"2014-08-13T10:10:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022allmhuran\u0022 data-cite=\u0022allmhuran\u0022\u003E\u003Cdiv\u003EUnfortunately 10 / 3 * 3 is, in fact, exactly 10.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThankyou for underlining my point?\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2014-08-13T10:38:28Z","Content":"\n\u003Cp\u003EWhat I\u0027m saying is that there is no coding trickery necessary to get this result on a calculator, or need to \u0022hide a rounding error\u0022. It\u0027s just doing exactly what it should do. Similarly 10/3 is indeed 3.3 repeating, and 3.3 repeating by 3 is of course 9.9 repeating (which is exactly 10). The calculator, not having an infinite display size for you to enter an infinite number of figures, nor an infinite amount of ram to store those figures, of course can\u0027t work with an infinitely repeating decimal. But it doesn\u0027t have to be able to, and it\u0027s not doing anything wrong when you multiply 3.33333333333 (non repeating) by 3 to get 9.99999999999 (non repeating)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-13T10:44:55Z\u0022 title=\u002208/13/2014 10:44  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 13, 2014\u003C/time\u003E by allmhuran\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kasuha","CreatedById":81781,"CreatedDateTime":"2014-08-13T10:48:03Z","Content":"\n\u003Cp\u003EThe problem with KSP is not that double precision float is not precise enough for KSP purposes; it is. It is perfectly irrelevant whether your speed is 10 m/s or 9.99999999... . The real problem is that PhysX engine runs at single precision and nothing really can be done about it. That introduces errors that are orders of magnitude larger than rounding errors in double floats. Plus, there are still some errors in calculations that wait to be fixed and polished.\u003C/p\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2014-08-13T20:00:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kasuha\u0022 data-cite=\u0022Kasuha\u0022\u003E\u003Cdiv\u003E The real problem is that PhysX engine runs at single precision and nothing really can be done about it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ED:\u003C/p\u003E\u003Cp\u003ESingle precision is to deep space distances (even in the \u0022tiny\u0022 kerbalverse) as -7 is to Pi.\u003C/p\u003E\u003Cp\u003EColor me horrified. 64-bit engines with 24-bit mantissas. Nice. Oh well, I gues PhysX works well enough for bouncing giblets around a tiny room in an FPS..\u003C/p\u003E\u003Cp\u003E(increasing the precision to double would only change \u0027-7\u0027 to \u00274\u0027, however, unless care is taken)\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2014-08-13T20:23:19Z","Content":"\n\u003Cp\u003EI thought the orbital mechanics were handled in double precision by custom code, PhysX was only used for the interactions inside the physics bubble.\u003C/p\u003E\n"},{"CreatedByName":"Master Tao","CreatedById":110410,"CreatedDateTime":"2014-08-13T20:33:36Z","Content":"\n\u003Cp\u003EThat\u0027s right \u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/mXTxQko-JH0?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E. Orbital mechanics are double precision. The custom code also moves the universe around the ship once it\u0027s 6 km above sea level (Krakensbane) and changes the universe\u0027s velocity instead of the ship over 750 m/s (speed Krakensbane).\u003Cp\u003EYou\u0027d notice if the orbital mechanics weren\u0027t double precision and the other two fixes weren\u0027t there. Out at Jool\u0027s orbit, your ship could jump several kilometers every frame due to floating point precision errors.\u003C/p\u003E\n"},{"CreatedByName":"Eric S","CreatedById":57117,"CreatedDateTime":"2014-08-13T20:35:16Z","Content":"\n\u003Cp\u003EThat may be the case. I know that in order to deal with the precision, things are done within a sliding window so that they can still maintain high precision within the window, but I don\u0027t know the details about how that\u0027s done.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-13T21:44:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022technicalfool\u0022 data-cite=\u0022technicalfool\u0022\u003E\u003Cdiv\u003EOr 99.9999999997% on a Pentium 60?\u003Cp\u003EAnd for future reference, a \u0022rounding error\u0022 can happen in number systems other than binary. 10/3 would be an obvious example. Funnily enough, \u002210/3*3\u0022 on Windows calculator will give 10, even though 10/3 = 3.3333333333333333333333333333333, and if you take that number on its own and multiply by 3 you get 9.9999999999999999999999999999999. Someone somewhere programmed in a little attempt to \u0022hide\u0022 that particular rounding error.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo such effort was necessary. \u003C/p\u003E\u003Cp\u003EThe rounding you\u0027re referring to is not a special case to handle this one situation. It\u0027s what it *always* does when the correct representation can\u0027t fit in the display, and with a value like 0.9999999999 ... etc forever, it *always* can\u0027t fit in the display because it\u0027s infinitely long. It\u0027s the act of rounding it to the nearest thing that will fit in the display that makes it show up as 1.0. It gets to the last digit it *can* display, and goes \u0022okay, this digit is a 9. Do I round it up or down? Well, what\u0027s the next digit past the display... oh, it\u0027s a \u00279\u0027, that means I round this place up from a 9 to a 10, meaning a zero goes here and I carry the 1 back, it looks like carrying it back caused the previous digit to go from 9 to 10, so again, put a 0 here and carry the 1 back,..... and so on, propagating all the way back so it becomes 1.000000000 eventually.\u003C/p\u003E\u003Cp\u003EThere is no special case code to handle this situation and make it round to 1.0. Rounding *any* value that won\u0027t all fit in the display is always done, and that code gives you this \u0022fix\u0022 for free without extra work.\u003C/p\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2014-08-16T09:41:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Red Iron Crown\u0022 data-cite=\u0022Red Iron Crown\u0022\u003E\u003Cdiv\u003EI thought the orbital mechanics were handled in double precision by custom code, PhysX was only used for the interactions inside the physics bubble.\u003C/div\u003E\u003C/blockquote\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Master Tao\u0022 data-cite=\u0022Master Tao\u0022\u003E\u003Cdiv\u003EThat\u0027s right \u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/mXTxQko-JH0?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E. Orbital mechanics are double precision.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E..Thank goodness.\u003C/p\u003E\u003Cp\u003EThat\u0027s an interesting video, I haven\u0027t seen that before. Thanks for the link.\u003C/p\u003E\u003Cp\u003EThe moving origin/frame of reference is not unlike a system I made a ways back for a \u0027trek\u0027-like game...\u003C/p\u003E\n"}]}