{"TopicId":126327,"ForumId":55,"TopicTitle":"Question about the 1.1 update","CreatedByName":"Algiark","CreatedById":83907,"CreatedDateTime":"2015-11-24T04:05:47Z","PageNum":1,"Articles":[{"CreatedByName":"Algiark","CreatedById":83907,"CreatedDateTime":"2015-11-24T04:05:47Z","Content":"\nSo, I\u0026#39;ve read that the 1.1 update will upgrade the KSP to the Unity 5 engine. Many people say that this means a large performance improvement, but I\u0026#39;m wondering what kind of improvements can I expect? Will the graphics be nicer? Less RAM usage? Better physics? Better framerate when building vessels with many parts? Faster loading time? And how much of an improvement could it be?\n"},{"CreatedByName":"peachoftree","CreatedById":110108,"CreatedDateTime":"2015-11-24T04:17:04Z","Content":"\nAFAIK, Pretty much every change is under the hood. We are likely to see performance improvements but the game will look pretty much the same\n"},{"CreatedByName":"Hobbes Novakoff","CreatedById":129018,"CreatedDateTime":"2015-11-24T04:21:50Z","Content":"\nThe scale of the performance improvements is also not really established. Optimistically it might end up like Besiege, which saw a 4-5x improvement in blocks (read: parts) that it could handle.\n"},{"CreatedByName":"problemecium","CreatedById":101649,"CreatedDateTime":"2015-11-24T04:48:47Z","Content":"\nEverything listed in OP is likely to appear to some degree:\u003Cbr\u003E\n\u003Cbr\u003E\n- Unity 5 ships with a nice \u0022Standard\u0022 shader that uses Physics-Based Rendering to appear nearly photorealistic. Parts and ships are unlikely to implement this off the bat, but background objects, buildings, or whatever might benefit. If nothing else, at least the primitives used in Whack-a-Kerbal will look better xD\u003Cbr\u003E\n- Unity 5 includes a lot of optimizations as far as rendering, physics, UI, etc. and KSP is having a lot of code rewritten and thereby optimized for the next update. Total RAM usage is a mystery, but in all likelihood whatever RAM does get used will be used far more judiciously, and with built-in 64-bit support, you\u0026#39;ll have access to ALL of your computer\u0026#39;s RAM as opposed to only 4 gigabytes of it.\u003Cbr\u003E\n- Physics in Unity 5 has been massively improved under the hood, now supporting multi-threaded calculations, so situations with lots of parts on screen will generally have much better framerates. There is suspicion that this may not apply to large single vessels, but it hasn\u0026#39;t been clearly confirmed one way or the other by SQUAD last I heard.\u003Cbr\u003E\n- Faster loading time is probable given the above code optimizations and multithreaded physics. Honestly, though, loading time got so fast in the last patch or two that I hardly care any more.\n"},{"CreatedByName":"Stargate525","CreatedById":53585,"CreatedDateTime":"2015-11-24T04:50:24Z","Content":"\n[quote name=\u0027parameciumkid\u0027]\u003Cbr\u003E\n- Physics in Unity 5 has been massively improved under the hood, now supporting multi-threaded calculations, so situations with lots of parts on screen will generally have much better framerates. There is suspicion that this may not apply to large single vessels, but it hasn\u0026#39;t been clearly confirmed one way or the other by SQUAD last I heard.[/QUOTE]\u003Cbr\u003E\nI think the big one here is that rovers will now finally work properly, as Unity 5 is coming with vehicle support physics as well, I think.\n"},{"CreatedByName":"Venusgate","CreatedById":125730,"CreatedDateTime":"2015-11-24T05:45:11Z","Content":"\nI was under the impression that they were also planning to implement full 64-bit support as well, so windows users wont be truck with 4gb ram cap.\n"},{"CreatedByName":"Daid","CreatedById":32171,"CreatedDateTime":"2015-11-24T06:18:39Z","Content":"\n[quote name=\u0027Stargate525\u0027]I think the big one here is that rovers will now finally work properly, as Unity 5 is coming with vehicle support physics as well, I think.[/QUOTE]\u003Cbr\u003E\nIf you read the devnotes, then you\u0026#39;ll have noticed that this \u0022feature\u0022 was underwhelming and only worked if your object is a square box with 4 wheels. Not a random shape of shapes with random wheels attached. So there was a lot of work in getting wheels working again.\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nGeneral rule of optimization, do not expect magic. 5% to 30% is a rule of thumb (I\u0026#39;m an software engineer, 10 years of experience)\u003Cbr\u003E\n64bit would be a welcome addition for the windows users, if it\u0026#39;s really stable. And might yield some performance improvements as well (software I develop runs about 15% faster in 64bit mode, but I expect way less improvement for KSP)\n"},{"CreatedByName":"selfish_meme","CreatedById":125899,"CreatedDateTime":"2015-11-24T06:37:32Z","Content":"\n[quote name=\u0027Daid\u0027]If you read the devnotes, then you\u0026#39;ll have noticed that this \u0022feature\u0022 was underwhelming and only worked if your object is a square box with 4 wheels. Not a random shape of shapes with random wheels attached. So there was a lot of work in getting wheels working again.\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nGeneral rule of optimization, do not expect magic. 5% to 30% is a rule of thumb (I\u0026#39;m an software engineer, 10 years of experience)\u003Cbr\u003E\n64bit would be a welcome addition for the windows users, if it\u0026#39;s really stable. And might yield some performance improvements as well (software I develop runs about 15% faster in 64bit mode, but I expect way less improvement for KSP)[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThey purchased a new wheel module because of the underwhelmingness of stock Unity 5, one that has provisions for a lot better wheel simulation than currently exists\n"},{"CreatedByName":"Francois424","CreatedById":98138,"CreatedDateTime":"2015-11-24T07:50:30Z","Content":"\nIn between the lines, I am expecting a 20% performance increase overall\u003Cbr\u003E\n\u003Cbr\u003E\n@Hobbes Novakoff : if we ever get 4x-5x more parts improvement and say 64-bits support, then U5 will have exceeded my expectations. I was hoping for at most 50% more parts increase, which unfortunately would mean I am getting back to parts performance I was getting in 0.24.2 (lost a lot of multiple part performances with recent updates, even with me getting a brand new rig).\n"},{"CreatedByName":"Warzouz","CreatedById":140055,"CreatedDateTime":"2015-11-24T08:16:05Z","Content":"\nThere was a reduction in part number support between beta and official release. I hope we\u0026#39;ll get back there. \u003Cbr\u003E\n\u003Cbr\u003E\nBest hope is for memory management in 64 bits so we can have some improved existing planets and additional planets. \u003Cbr\u003E\n\u003Cbr\u003E\nAnd get a proper sound design !\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nDon\u0026#39;t forget that 1.1 will improve wheels and add a basic communication gameplay\n"},{"CreatedByName":"TheTom","CreatedById":99271,"CreatedDateTime":"2015-11-24T08:36:48Z","Content":"\n[quote name=\u0027Daid\u0027]General rule of optimization, do not expect magic. 5% to 30% is a rule of thumb (I\u0026#39;m an software engineer, 10 years of experience)[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThanks for demonstrating the sad state of software engineers.\u003Cbr\u003E\n\u003Cbr\u003E\nGiven the demonstrated and proven ridiculous bad code, anything below a 100% to 200% improvement would be a shame or something waiting for a lot more optimizations. The later would be quite acceptable given the brutal amount of rework that has to go into 1.1 due to the UI rework.\u003Cbr\u003E\n\u003Cbr\u003E\nNow, befor you guys come out and scream that this is ridiculous - it is NOT physics. Physics as it is can handle a LOT more than we can do today. Anyone with not 10 years software experience but 2 years KSP experience will remember how we could run multiple times the current part count in the past. Physics has not changed a lot during these times.\u003Cbr\u003E\n\u003Cbr\u003E\nWhat makes KSP slow are:\u003Cbr\u003E\n\u003Cbr\u003E\n* The non-physics simulations (heat mostly)\u003Cbr\u003E\n* The user interface code (which is reworked) which supposedly was doing a lot of stuff in every frame, while the new UI creates / manipulates game objects and is drawn in the unity engine.\u003Cbr\u003E\n* The resource allocation code. This means came resources (fuel, electricity) which is demonstrated to be extremely badly coded and gets significantly slower the more consumers/producers exist. THe main culprit here is the permanent allocation of new memory resulting in ridiculous amount of garbage collection.\u003Cbr\u003E\n\u003Cbr\u003E\nIf all that is fixed to some degree, and multiple cores are used (for example it is not that hard to move the heat calculations to a separate processor) we should see a lot more than a 30% increase in performance in anything except trivial craft. Once you get into the 100\u002B part count the current code is a demonstration of wasted CPU cycles. Especially the resource allocation code really is slowing things down a lot. Well, heat too.\n"},{"CreatedByName":"RocketPropelledGiraffe","CreatedById":143863,"CreatedDateTime":"2015-11-24T09:01:32Z","Content":"\n[quote name=\u0027TheTom\u0027]\u003Cbr\u003E\n...What makes KSP slow are:\u003Cbr\u003E\n\u003Cbr\u003E\n* The non-physics simulations (heat mostly)...\u003Cbr\u003E\n[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nHow heat calculations can be considered \u0022non-physics\u0022 is incomprehensible to me... Software development really IS a world of its own. :)\n"},{"CreatedByName":"KerbMav","CreatedById":70338,"CreatedDateTime":"2015-11-24T10:09:54Z","Content":"\n[quote name=\u0027RocketPropelledGiraffe\u0027]How heat calculations can be considered \u0022non-physics\u0022 is incomprehensible to me... Software development really IS a world of its own. :)[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nHeat is calculated by itself and not as part of the physics engine, physics meaning the interaction of individual parts in the simulated environment and with each other.\n"},{"CreatedByName":"OrtwinS","CreatedById":19144,"CreatedDateTime":"2015-11-24T10:37:02Z","Content":"\n[quote name=\u0027TheTom\u0027]... [B]demonstrated and proven[/B] ridiculous bad code ...\u003Cbr\u003E\n... the current code is a demonstration of wasted CPU cycles...[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThat is quite a choice of wording.\u003Cbr\u003E\nCan you link to the research?\u003Cbr\u003E\nSounds like an interesting read.\n"},{"CreatedByName":"RocketPropelledGiraffe","CreatedById":143863,"CreatedDateTime":"2015-11-24T10:39:08Z","Content":"\nJep, I know that physics in software terms basically is reduced to \u0022mechanical interactions\u0022 and most other spects of physics are done separately. \u003Cbr\u003E\nI was merely commenting on the weird wording you get as a result from time to time...\n"},{"CreatedByName":"Hannu","CreatedById":60596,"CreatedDateTime":"2015-11-24T10:42:06Z","Content":"\n[quote name=\u0027TheTom\u0027]\u003Cbr\u003E\nWhat makes KSP slow are:\u003Cbr\u003E\n\u003Cbr\u003E\n* The non-physics simulations (heat mostly)\u003Cbr\u003E\n[/quote]\u003Cbr\u003E\n\u003Cbr\u003E\nDo you know how they have done it? I can not understand why it can be slow. Heat generation in parts is very simple. They take just few parameters into account, speed, air density, internal heating, which all are simple functions. Heat exchange is simple and number of joints between parts are on the same magnitude as the number of parts. I could understand the problem, if there were 100000 parts, but couple on hundreds of generations and same amount of interactions between parts should not be significant load to any modern processor core.\u003Cbr\u003E\n\u003Cbr\u003E\nIf they can really waste so much processor power in this kind of calculations, I do not expect they can get significant improvements, if they do not hire someone expert in physical modeling. And I think that it is not realistic hope. Unfortunately bad coding is very common nowadays, even in so called physics engines (like Unity). There are even stupid errors, like using floats instead of doubles (I know that floats may be better in some very extreme applications, but certainly not in computer games and animations). But all we (at least I) hope that I am wrong.\n"},{"CreatedByName":"selfish_meme","CreatedById":125899,"CreatedDateTime":"2015-11-24T10:57:25Z","Content":"\nAll the armchair generals are out today I see.\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-24T13:01:01Z","Content":"\n[quote name=\u0027Hannu\u0027]There are even stupid errors, like using floats instead of doubles (I know that floats may be better in some very extreme applications, but certainly not in computer games and animations). But all we (at least I) hope that I am wrong.[/QUOTE]\u003Cbr\u003E\nKSP calculates stuff (position, rotation, velocity, etc.) using doubles. When rendering images these numbers get casted to floats so Unity can work with them.\u003Cbr\u003E\nThis is known as Krakensbane and was introduced in 0.17 (I think).\u003Cbr\u003E\n\u003Cbr\u003E\nAlso a float is usually the best data type for games. CPUs and GPUs are faster at calculating floats than doubles and the range of values is greater than the one of integers.\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nKSP is a very special game as it needs both huge numbers and high precision. 99% of the games only require high precision for which floats are good enough.\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-24T13:03:50Z\u0022 title=\u002211/24/2015 01:03  PM\u0022 data-short=\u00228 yr\u0022\u003ENovember 24, 2015\u003C/time\u003E by *Aqua*\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-11-24T13:15:50Z","Content":"\n[quote name=\u0027*Aqua*\u0027]KSP calculates stuff (position, rotation, velocity, etc.) using doubles. When rendering images these numbers get casted to floats so Unity can work with them.[/quote]\u003Cbr\u003E\nNot quite. PhysX uses floats for its physics variables, so when off timewarp (or in physical timewarp) everything is single precision. When on rails (normal timewarp), orbital calcs are done with double precision using Squad\u0026#39;s own code.\u003Cbr\u003E\n\u003Cbr\u003E\n[quote]This is known as Krakensbane and was introduced in 0.17 (I think).[/quote]\u003Cbr\u003E\nKrakensbane was the recentering of the coordinate system on the vessel instead of on the parent celestial body. Floating point error magnitude increases with the magnitude of the value, so this gives excellent precision in the vicinity of the ship where it is needed most (at the cost of coordinate conversions for many calculations).\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-24T13:41:54Z","Content":"\nI got the impression Krakensbane introduced the orbit calculation using doubles.\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-11-24T13:46:16Z","Content":"\n[quote name=\u0027*Aqua*\u0027]I got the impression Krakensbane introduced the orbit calculation using doubles.[/QUOTE]\u003Cbr\u003E\nLooks like we\u0026#39;re both right: [url]http://forum.kerbalspaceprogram.com/entries/12-Krakensbane[/url]\n"},{"CreatedByName":"Hannu","CreatedById":60596,"CreatedDateTime":"2015-11-24T14:05:32Z","Content":"\n[quote name=\u0027*Aqua*\u0027]Also a float is usually the best data type for games. CPUs and GPUs are faster at calculating floats than doubles and the range of values is greater than the one of integers.[/Quote]\u003Cbr\u003E\n\u003Cbr\u003E\nI disagree, except maybe when calculated vertex and normal coordinates are thrown to GPU. Floating point instructions of CPUs works with 64 bit numbers (or even 80 bit). Only exception are AVX-instructions which can calculate 8 float or 4 double operations simultaneously. However, such instructions are typically not suitable or practical to physics needed in KSP (or other games). 4-vectors and 4x4 matrices needed in games can be calculated with doubles and there is not need to 8 simultaneous operations.\u003Cbr\u003E\n\u003Cbr\u003E\nI do not know if KSP or Unity even uses them because they are not compatible to old CPUs (and laborious to program). Does any game use GPUs to calculate physics? I also think that new GPUs can handle doubles.\u003Cbr\u003E\n\u003Cbr\u003E\nIt is true, that doubles do not benefit practically all games, but they do not also take anything. There is no good reason to keep old practices (but of course I know that it takes decades to change even in hectic software industry). Especially, if someone programs a space simulator, there should not be any reason to use 32 bit floats or use toy physics engines which use such numbers. More probably they need some specific 128 bit libraries.\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-11-24T14:11:02Z","Content":"\n32-bit CPUs can handle doubles, they\u0026#39;re the reason they\u0026#39;re called doubles in the first place. They just don\u0026#39;t perform as well as on a 64-bit CPU.\n"},{"CreatedByName":"TheTom","CreatedById":99271,"CreatedDateTime":"2015-11-24T14:33:15Z","Content":"\n[quote name=\u0027KerbMav\u0027]Heat is calculated by itself and not as part of the physics engine, physics meaning the interaction of individual parts in the simulated environment and with each other.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nMore exact: Phsyics - moving, movement powers between parts - is calculated by a Physics engine (PhysX) which is part of Unity. This is what decides the wobble, for example.\u003Cbr\u003E\n\u003Cbr\u003E\nHeat calculations (as well as the whole aerodynamics calculation) is done in separate code written in C# and part of the KSP codebase.\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-11-24T14:39:44Z","Content":"\n[quote name=\u0027Hannu\u0027]Does any game use GPUs to calculate physics? I also think that new GPUs can handle doubles.[/QUOTE]All games with PhysX with enabled GPU acceleration calculate their physics using the GPU. The first game which allows that is Mirror\u0026#39;s Edge.\u003Cbr\u003E\nKSP uses PhysX too but GPU acceleration for it isn\u0026#39;t enabled.\u003Cbr\u003E\n\u003Cbr\u003E\nThe current Tomb Raider allows hair \u0026#39;physics\u0026#39; to be calculated on AMD GPUs.\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027Hannu\u0027]It is true, that doubles do not benefit practically all games, but they do not also take anything. There is no good reason to keep old practices (but of course I know that it takes decades to change even in hectic software industry). Especially, if someone programs a space simulator, there should not be any reason to use 32 bit floats or use toy physics engines which use such numbers. More probably they need some specific 128 bit libraries.[/QUOTE]GPUs and CPUs are optimized for fast 32 bit floating point operations because that\u0026#39;s the current state of the art. Games like KSP which may profit from 64 bit floats are a seldom. Your average shooter or driving game doesn\u0026#39;t need 64 bit floats. And those use cases are what the game engines are optimized for. As you said you can calculate either 8 floats per cycle or 4 doubles. Changing everything to double will [I]half[/I] the speed of floating point calculation.\u003Cbr\u003E\n\u003Cbr\u003E\nYou don\u0026#39;t implement everything which is possible, instead you implement what\u0026#39;s reasonable.\u003Cbr\u003E\n\u003Cbr\u003E\nThe only reason why software slowly changes from 32 bit integers to 64 bit integers in the last decade is because there\u0026#39;s a need for more addressable memory.\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-24T14:42:25Z\u0022 title=\u002211/24/2015 02:42  PM\u0022 data-short=\u00228 yr\u0022\u003ENovember 24, 2015\u003C/time\u003E by *Aqua*\u003C/strong\u003E\n\u003C/span\u003E\n"}]}