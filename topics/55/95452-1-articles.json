{"TopicId":95452,"ForumId":55,"TopicTitle":"So, what would happen if KSP used multithreading?","CreatedByName":"Hobbes Novakoff","CreatedById":129018,"CreatedDateTime":"2015-01-03T00:31:50Z","PageNum":1,"Articles":[{"CreatedByName":"Hobbes Novakoff","CreatedById":129018,"CreatedDateTime":"2015-01-03T00:31:50Z","Content":"\n\u003Cp\u003ESo, yeah. Title basically explains my question. Basically, say I have a dual-core processor at 2 Ghz. (My actual system specs. Don\u0027t judge.) So, if KSP could run on both cores, this doubles the performance? Or what?\u003C/p\u003E\u003Cp\u003E(Also, mods, I\u0027m not quite sure where to post this, so if I put it in the wrong forum please move it.)\u003C/p\u003E\n"},{"CreatedByName":"Doomedspeed","CreatedById":132995,"CreatedDateTime":"2015-01-03T01:09:43Z","Content":"\n\u003Cp\u003EUnfortunately it doesn\u0027t work like that..\u003C/p\u003E\u003Cp\u003EMulti-threading isn\u0027t related to \u0027cores\u0027 its related to \u0027threads\u0027, yes they are different. \u003C/p\u003E\u003Cp\u003EFor example the Pentium K (Pentium G3258 Anniversary edition) has 2 cores and 2 threads (so 2 virtual cores) while the i3 4330 has 2 cores and 4 threads (4 virtual cores). Same with the i5 4690k and i7 4970k they have 4 cores, 4 threads and 4 cores 8 threads respectively. \u003C/p\u003E\u003Cp\u003EPerformance wise this won\u0027t DOUBLE your output (framerate), it would improve it, yes but by no where near 100%. \u003C/p\u003E\u003Cp\u003EIm pretty sure KSP does run on multiple cores (which is what you\u0027re asking) but if it is single threaded, cores speed is your ally. (the higher your clock the better.\u003C/p\u003E\u003Cp\u003EAlot of physics based games (like FSX ect) are helped by multiple threads but core speed is still the most important factor..\u003C/p\u003E\u003Cp\u003EHope this helps.\u003C/p\u003E\n"},{"CreatedByName":"Boris_T_Roach","CreatedById":27512,"CreatedDateTime":"2015-01-03T01:17:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hobbes Novakoff\u0022 data-cite=\u0022Hobbes Novakoff\u0022\u003E\u003Cdiv\u003ESo, yeah. Title basically explains my question. Basically, say I have a dual-core processor at 2 Ghz. (My actual system specs. Don\u0027t judge.) So, if KSP could run on both cores, this doubles the performance? Or what?\u003Cp\u003E(Also, mods, I\u0027m not quite sure where to post this, so if I put it in the wrong forum please move it.)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe major problem with KSP is that the unity engine only runs the physics on 1 thread on 1 core...... have as many CPUs as you like it wont make any difference\u003C/p\u003E\u003Cp\u003EAnd dont even ask about why they cant write the physics code to run across multiple cores.. it aint easy\u003C/p\u003E\n"},{"CreatedByName":"spaceBrezel","CreatedById":69240,"CreatedDateTime":"2015-01-03T02:29:18Z","Content":"\n\u003Cp\u003Ethat would be awesome, also add stable x64 support. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003Emy first project:\u003C/p\u003E\u003Cp\u003E6x mk3 cargo bay long -\u0026gt; build a plane able to carry 6x orange tank\u003C/p\u003E\u003Cp\u003Ewell afaik KSP is bound to \u0022\u003Ca href=\u0022http://unity3d.com\u0022 rel=\u0022external nofollow\u0022\u003Eunity\u003C/a\u003E\u0022 engine.\u003C/p\u003E\u003Cp\u003Emaybe we are able to buy KSP2 some day? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2015-01-03T02:29:34Z","Content":"\n\u003Cp\u003EThe only correct answer is as straightforward as it is useless: \u0022it depends\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Greep","CreatedById":132944,"CreatedDateTime":"2015-01-03T03:23:24Z","Content":"\n\u003Cp\u003ETechnically speaking unity can do multi-threading.. just, you know, rarely in a useful way :/. Works wonders when doing pathfinding queues, though.\u003C/p\u003E\n"},{"CreatedByName":"Linear","CreatedById":26619,"CreatedDateTime":"2015-01-03T11:08:53Z","Content":"\n\u003Cp\u003EAs above, it\u0027s important to explain that KSP \u003Cem\u003Eis\u003C/em\u003E multi-threaded, but the \u003Cem\u003Ephysics\u003C/em\u003E isn\u0027t. This means on more powerful CPU\u0027s with more than 2 threads, (for arguments sake) you have one for Physics and one thread being used for audio/misc and two threads just idling or being used by the OS elsewhere - so really, they\u0027re wasted.\u003C/p\u003E\u003Cp\u003EWhat the upcoming version of KSP\u0027s game engine will allow is Physics to be spread out among more than one core, as well as the actual calculations it performs being much more efficient CPU-Time wise (this comes from the new version of PhysX - note no APhysX being used, so no GPU usage yet!).\u003C/p\u003E\u003Cp\u003EProper x64 support for Windows is also in this new release, and please bear in mind Squad have incredibly little control over the bugs we\u0027re experiencing right now with it. Don\u0027t get mad at them.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greep\u0022 data-cite=\u0022Greep\u0022\u003E\u003Cdiv\u003ETechnically speaking unity can do multi-threading.. just, you know, rarely in a useful way :/. Works wonders when doing pathfinding queues, though.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGood God no, you\u0027ve got the stacks n trees rap in my head now!\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-01-03T12:56:49Z","Content":"\n\u003Cp\u003EIf KSP physics went multithreaded we\u0027d still complain about lag, just at higher part counts. \u003C/p\u003E\u003Cp\u003EMore seriously, even with a version of PhysX that supports multithreading I\u0027m not convinced we\u0027ll see big improvements. The type of physics problem that a single KSP craft represents (a constrained chain of rigidbodies) just isn\u0027t easily threadable. I suspect the best we\u0027ll see is a thread for each vessel inside the physics bubble, though I would love to be wrong about that.\u003C/p\u003E\n"},{"CreatedByName":"Vaporo","CreatedById":110800,"CreatedDateTime":"2015-01-03T13:50:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Red Iron Crown\u0022 data-cite=\u0022Red Iron Crown\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMore seriously, even with a version of PhysX that supports multithreading I\u0027m not convinced we\u0027ll see big improvements. The type of physics problem that a single KSP craft represents (a constrained chain of rigidbodies) just isn\u0027t easily threadable. I suspect the best we\u0027ll see is a thread for each vessel inside the physics bubble, though I would love to be wrong about that.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis seems to be relevant to what you\u0027re talking about:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://physxinfo.com/news/11327/multithreaded-performance-scaling-in-physx-sdk/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://physxinfo.com/news/11327/multithreaded-performance-scaling-in-physx-sdk/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe fifth performance test seems to be a chain of linked rigidbodies, but I don\u0027t know much about this kind of thing, so you tell me if it\u0027s what you\u0027re talking about or not.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-03T13:53:00Z\u0022 title=\u002201/03/2015 01:53  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 3, 2015\u003C/time\u003E by Vaporo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-01-03T14:23:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Vaporo\u0022 data-cite=\u0022Vaporo\u0022\u003E\u003Cdiv\u003EThis seems to be relevant to what you\u0027re talking about:\u003Cp\u003E\u003Ca href=\u0022http://physxinfo.com/news/11327/multithreaded-performance-scaling-in-physx-sdk/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://physxinfo.com/news/11327/multithreaded-performance-scaling-in-physx-sdk/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe fifth performance test seems to be a chain of linked rigidbodies, but I don\u0027t know much about this kind of thing, so you tell me if it\u0027s what you\u0027re talking about or not.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt does seem to be (I must admit that I\u0027m no expert on this either). The performance in that case should be a bit better than KSP because they\u0027re using spherical primitive colliders rather than the meshes that every rocket part uses, but the idea is the same. Very little difference between 1, 2 and 3 threads, though the performance increase for changing SDKs is substantial.\u003C/p\u003E\n"},{"CreatedByName":"zarakon","CreatedById":5160,"CreatedDateTime":"2015-01-03T14:50:34Z","Content":"\n\u003Cimg src=\u0022http://bugs.kerbalspaceprogram.com/attachments/2115/KSP%20CRASH.png\u0022 alt=\u0022KSP%20CRASH.png\u0022\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2015-01-03T17:39:33Z","Content":"\n\u003Cp\u003EYou can parallelize rigid body solvers no problem, in theory. However, I have the impression that we have fairly small systems of rigid bodies -- a thousand or so parts. So I\u0027m dubious that the solver (PhysX) is actually the problem, rather than bits of Unity and KSP that lie on top of that solver.\u003C/p\u003E\u003Cp\u003EIf most of the cost is in the scripting (as it is for some of the stuff I\u0027m working on), I\u0027ve found you get a 10x or more speedup by rewriting it in C\u002B\u002B. Mono is pretty poor at speed.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-03T17:43:57Z\u0022 title=\u002201/03/2015 05:43  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 3, 2015\u003C/time\u003E by numerobis\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-01-03T17:46:25Z","Content":"\n\u003Cp\u003Enumerobis: It\u0027s my understanding that multiple rigidbodies colliding is fairly easy to parallelize, it\u0027s the constraints that make it difficult. Am I wrong in this?\u003C/p\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2015-01-03T18:01:17Z","Content":"\n\u003Cp\u003EIn theory, it\u0027s a constraint system; write it up as such and throw it at a constraint solver. A lot of effort has gone into parallelizing those already. Much less effort has gone into parallelizing the stuff around the solvers, because historically those who care about this stuff had the solving be the expensive part.\u003C/p\u003E\n"},{"CreatedByName":"KrazyKrl","CreatedById":65849,"CreatedDateTime":"2015-01-03T18:30:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022numerobis\u0022 data-cite=\u0022numerobis\u0022\u003E\u003Cdiv\u003EIn theory, it\u0027s a constraint system; write it up as such and throw it at a constraint solver. A lot of effort has gone into parallelizing those already. Much less effort has gone into parallelizing the stuff around the solvers, because historically those who care about this stuff had the solving be the expensive part.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI already know for a fact that Squad said that they weren\u0027t going to implement multithreading at any level, unless they can get it directly from their Unity toolchain.\u003C/p\u003E\n"},{"CreatedByName":"boxman","CreatedById":61559,"CreatedDateTime":"2015-01-04T07:45:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KrazyKrl\u0022 data-cite=\u0022KrazyKrl\u0022\u003E\u003Cdiv\u003EI already know for a fact that Squad said that they weren\u0027t going to implement multithreading at any level, unless they can get it directly from their Unity toolchain.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut unity 5 supports both multicore and threading for physics and squad has on squadcast announced that they will port it as soon as they get their hands on unity5 and that they will most likely be able to add multicore support.\u003C/p\u003E\n"},{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-01-04T21:11:45Z","Content":"\n\u003Cp\u003EI only have major issues when launching heavy payloads. If the Research and Development tree was modified to provide bigger SRBs than the \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/S1_SRB-KD25k\u0022 rel=\u0022external nofollow\u0022\u003ES1 SRB-KD25k\u003C/a\u003E then I could use fewer and launch a craft with a smaller part-count. This would go some way towards permitting the current code to provide acceptable performance.\u003C/p\u003E\n"},{"CreatedByName":"cantab","CreatedById":104935,"CreatedDateTime":"2015-01-05T00:11:54Z","Content":"\n\u003Cp\u003EWell, best case scenario is a multiplying of the physics time ratio for any given ship by the number of cores. Said time ratio of course is capped to 1x, or 2/3/4x in physics warp. That doesn\u0027t mean a multiplying of your lag-free part maximum by the same amount though, the CPU load rises faster than the part count.\u003C/p\u003E\u003Cp\u003EFrom what I\u0027ve heard, what could have as big an impact if not bigger would be if Unity included a cylinder primitive. Our rockets are mostly cylinders and with no primitive every one of them ends up having to be a mesh collider.\u003C/p\u003E\n"}]}