{"TopicId":107603,"ForumId":55,"TopicTitle":"Make the rugged rover wheels work upside down","CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T07:59:11Z","PageNum":1,"Articles":[{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T07:59:11Z","Content":"\n\u003Cp\u003EI thought I had a smart idea to make a rover that would still work after flipping over but it doesn\u0027t function because the wheels don\u0027t detect the surface when upside down. I made a video to demonstrate the problem:\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/g-AC7H5zw4o?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\n"},{"CreatedByName":"thereaverofdarkness","CreatedById":75673,"CreatedDateTime":"2015-05-05T08:13:06Z","Content":"\n\u003Cp\u003EI had the same idea but I never got around to testing it.\u003C/p\u003E\n"},{"CreatedByName":"r4pt0r","CreatedById":90471,"CreatedDateTime":"2015-05-05T08:45:20Z","Content":"\n\u003Cp\u003Ethe whole wheel/ground-contact/friction relationship needs a good look from the devs in my opinion. you raise a point I never knew was a problem.\u003C/p\u003E\n"},{"CreatedByName":"Wjolcz","CreatedById":39636,"CreatedDateTime":"2015-05-05T10:54:42Z","Content":"\n\u003Cp\u003EThe wheels seem to have some oddities. As far as the landing gear doesn\u0027t need to work no matter what it\u0027s angle to the ground is, it would be nice if we could do this with rover wheels. I once posted this as suggestion, but it didn\u0027t get popular enough. It\u0027s nothing game breaking, but would be cool to have.\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T11:33:45Z","Content":"\n\u003Cp\u003EThe way standard Unity wheels work, this is impossible. In physics terms, there is no wheel, just a stick pointing in one direction, and the ground has to be perpendicular to and at the correct end of it. The shape isn\u0027t round, nothing rolls, the physics model has very little in common with what you would recognise as a wheel. The stick can be telescopic and spring loaded, for suspension (which doesn\u0027t really work properly unless the load on the suspension is precisely correct for its settings). It essentially abstracts away the entire concept of a wheel to just a contact point with some parameters to simulate the behaviour of a wheel in terms of forwards/backwards friction and sideways friction.\u003C/p\u003E\u003Cp\u003ESo, it\u0027s very likely a huge amount of effort, most likely requires abandoning Unity\u0027s wheels, and literally re-inventing the wheel. Of course, it\u0027s possible to fully simulate a round wheel which rotates, but that would be a massive computational task (i.e. high potential for lag), in comparison to the highly simplified and restricted model currently used.\u003C/p\u003E\n"},{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T12:25:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003EThe way standard Unity wheels work, this is impossible. In physics terms, there is no wheel, just a stick pointing in one direction, and the ground has to be perpendicular to and at the correct end of it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOkay, what if you model it as two sticks pointing in opposite directions or maybe four sticks at right angles, just to be sure?\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T12:42:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022THX1138\u0022 data-cite=\u0022THX1138\u0022\u003E\u003Cdiv\u003EOkay, what if you model it as two sticks pointing in opposite directions or maybe four sticks at right angles, just to be sure?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThen you have scrapped Unity\u0027s wheels, and re-invented the wheel (and it\u0027s another one that has very little relationship to real wheels, just a different highly simplified one, this time with zero support from Unity). If those sticks are implemented the same way that Unity does it, most of the problems still exist if you\u0027re not close to perfectly perpendicular with one of them, but the overall physics of the wheel simulation got a lot more complicated (paging the lag monster\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6).\u003C/p\u003E\u003Cp\u003EFrankly, wheels play such a minor role in a space exploration simulation game, that I don\u0027t see the cost:benefit. The wheels we have are good enough for normal usage. A broader range of landing gear would be nice, using the existing perfectly functional and simple Unity not-really-wheels, but that\u0027s all we really need. I do get that some people want to do stuff with wheels that\u0027s impossible right now, but those things are pretty much outside the scope of the game.\u003C/p\u003E\n"},{"CreatedByName":"klgraham1013","CreatedById":105132,"CreatedDateTime":"2015-05-05T13:09:45Z","Content":"\n\u003Cp\u003EWheels play a pretty large part in my space exploration simulation game. Exploratory rovers. Supply transfer down on bases. Construction vehicles. I use wheels quite extensively.\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T13:16:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022klgraham1013\u0022 data-cite=\u0022klgraham1013\u0022\u003E\u003Cdiv\u003EWheels play a pretty large part in my space exploration simulation game. Exploratory rovers. Supply transfer down on bases. Construction vehicles. I use wheels quite extensively.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESure, but the existing Unity not-really-wheels work just fine for that for most people. A more complex wheel simulation isn\u0027t really needed for any of those.\u003C/p\u003E\n"},{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T13:23:02Z","Content":"\n\u003Cp\u003EThere\u0027s nothing just fine about a rover on it\u0027s back or side that can\u0027t move or right itself. Don\u0027t act like \u0022most people\u0022 haven\u0027t had their rovers fall over and become useless so they need to keep reloading saves. Moving ~40 meters per day like Curiosity isn\u0027t an option either.\u003C/p\u003E\n"},{"CreatedByName":"moronwrocket","CreatedById":134908,"CreatedDateTime":"2015-05-05T14:32:45Z","Content":"\n\u003Cp\u003EHas anyone tried using the AIRBRAKES to right a rover? I haven\u0027t unlocked the tech yet.\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T14:43:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022THX1138\u0022 data-cite=\u0022THX1138\u0022\u003E\u003Cdiv\u003EThere\u0027s nothing just fine about a rover on it\u0027s back or side that can\u0027t move or right itself. Don\u0027t act like \u0022most people\u0022 haven\u0027t had their rovers fall over and become useless so they need to keep reloading saves. Moving ~40 meters per day like Curiosity isn\u0027t an option either.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENope, I do not see the small benefit here being worth the fairly huge cost. Driving fast in low gravity environments, over very rough terrain (which is the typical circumstances for flipping a rover) is not realistic. The Apollo lunar rover design speed was 8mph, with an unofficial lunar land speed record of 11.2mph. 8mph is approx 3.5m/s.\u003C/p\u003E\u003Cp\u003EI strongly oppose spending development time on replacing the Unity wheel module. Unity wheels have their flaws, but can be made to perform perfectly well for all reasonable purposes which are currently in scope for KSP. There are far more important and useful things for Squad\u0027s limited development resources.\u003C/p\u003E\u003Cp\u003EDriving like a maniac in low gravity is out of scope, in my opinion, so up to the mod community if someone wants to implement a far more complicated (and therefore very likely far more laggy) wheel physics module, or implement GTA-Mun.\u003C/p\u003E\n"},{"CreatedByName":"thereaverofdarkness","CreatedById":75673,"CreatedDateTime":"2015-05-05T15:04:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003ESo, it\u0027s very likely a huge amount of effort, most likely requires abandoning Unity\u0027s wheels, and literally re-inventing the wheel. Of course, it\u0027s possible to fully simulate a round wheel which rotates, but that would be a massive computational task (i.e. high potential for lag), in comparison to the highly simplified and restricted model currently used.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re making it harder than it is. Just make the wheel stick pivot on the axis and always point straight downward.\u003C/p\u003E\n"},{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T15:17:05Z","Content":"\n\u003Cp\u003EDriving like a maniac? I was doing all I could yesterday to stay below 4 m/s going down a Duna slope. I had to keep zig zagging to make the descent as gentle as possible but I also had to be very careful turning, especially because I was on a slope. The brakes were on the whole time. I\u0027m not trying to drive like a maniac.\u003C/p\u003E\u003Cp\u003EIs there any reason the line can\u0027t pivot like thereaverofdarkness suggests?\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T15:37:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022THX1138\u0022 data-cite=\u0022THX1138\u0022\u003E\u003Cdiv\u003EIs there any reason the line can\u0027t pivot like thereaverofdarkness suggests?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, the Unity wheel module doesn\u0027t support that.\u003C/p\u003E\n"},{"CreatedByName":"klgraham1013","CreatedById":105132,"CreatedDateTime":"2015-05-05T16:14:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003EYes, the Unity wheel module doesn\u0027t support that.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou are just adamantly against any modification to the Unity engine, aren\u0027t you?\u003C/p\u003E\n"},{"CreatedByName":"thereaverofdarkness","CreatedById":75673,"CreatedDateTime":"2015-05-05T16:17:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003EYes, the Unity wheel module doesn\u0027t support that.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut if the \u0022wheel were reinvented\u0022, then this new wheel would have the desired functionality without requiring any more calculations than the old wheel design.\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T16:25:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022klgraham1013\u0022 data-cite=\u0022klgraham1013\u0022\u003E\u003Cdiv\u003EYou are just adamantly against any modification to the Unity engine, aren\u0027t you?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot at all, I\u0027m simply against very poor cost:benefit development. The wheel physics code has to run potentially hundreds of times per second, additional complexity is not something that is desirable in there. I also don\u0027t believe that it\u0027s even remotely important to change the behaviour of the wheels, as they work just fine for normal purposes; they are perfectly adequate for KSP. There are far better things for Squad to be working on.\u003C/p\u003E\u003Cp\u003EAlso, remember that once you modify standard Unity behaviour, you own it in terms of support, and progressively lose the benefits of using an standard game engine to start with, upgrades to a newer version of the engine can become harder work, etc.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022thereaverofdarkness\u0022 data-cite=\u0022thereaverofdarkness\u0022\u003E\u003Cdiv\u003EBut if the \u0022wheel were reinvented\u0022, then this new wheel would have the desired functionality without requiring any more calculations than the old wheel design.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENope. The reason why physics engines use fairly crude approximations for things like wheels is to keep the complexity of the calculations down. Any change to more accurately model the wheel would almost certainly be much more costly in computation, and it\u0027s code that has to run every physics frame, for every wheel that is active (i.e. potentially hundreds of times per second, and it\u0027s only one small part of the physics simulation).\u003C/p\u003E\n"},{"CreatedByName":"klgraham1013","CreatedById":105132,"CreatedDateTime":"2015-05-05T16:25:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003Esnip\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWelp. I still support the idea.\u003C/p\u003E\n"},{"CreatedByName":"Joonatan1998","CreatedById":97636,"CreatedDateTime":"2015-05-05T17:44:40Z","Content":"\n\u003Cp\u003EIt might cause some lag, but usually there aren\u0027t that many wheels.\u003C/p\u003E\u003Cp\u003ESo I support.\u003C/p\u003E\u003Cp\u003EI would say every building having 3 upgrade states and (almost) all states having a destroyed state has far lower cost:benefit ration than wheels that work in a way that make sense.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-05T17:47:10Z\u0022 title=\u002205/05/2015 05:47  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 5, 2015\u003C/time\u003E by Joonatan1998\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"thereaverofdarkness","CreatedById":75673,"CreatedDateTime":"2015-05-05T19:08:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Murph\u0022 data-cite=\u0022Murph\u0022\u003E\u003Cdiv\u003ENope. The reason why physics engines use fairly crude approximations for things like wheels is to keep the complexity of the calculations down. Any change to more accurately model the wheel would almost certainly be much more costly in computation, and it\u0027s code that has to run every physics frame, for every wheel that is active (i.e. potentially hundreds of times per second, and it\u0027s only one small part of the physics simulation).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI just gave an idea that\u0027s actually less complex. Instead of the wheel matching its direction to the angle of the thing it\u0027s attached to (the current model), it simply always points straight down. That\u0027s one LESS calculation to perform. It could be balanced out by only being allowed to point along the wheel\u0027s spin axis, and simply choosing the direction closest to straight down that it can. That would be about as complex as the current wheel mechanic.\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-05T19:19:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022thereaverofdarkness\u0022 data-cite=\u0022thereaverofdarkness\u0022\u003E\u003Cdiv\u003EI just gave an idea that\u0027s actually less complex. Instead of the wheel matching its direction to the angle of the thing it\u0027s attached to (the current model), it simply always points straight down. That\u0027s one LESS calculation to perform. It could be balanced out by only being allowed to point along the wheel\u0027s spin axis, and simply choosing the direction closest to straight down that it can. That would be about as complex as the current wheel mechanic.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd when the terrain under a wheel is at a steep angle, it fails. \u0022Down\u0022 for a wheel isn\u0027t always down according to gravity, that\u0027s a new complex thing which needs to be re-calculated every physics frame. Using a fixed \u0022down\u0022, based on the orientation of the wheel part completely avoids that complexity.\u003C/p\u003E\n"},{"CreatedByName":"THX1138","CreatedById":113955,"CreatedDateTime":"2015-05-05T21:20:29Z","Content":"\n\u003Cp\u003EWhat if the wheel we see is actually in the physics four Unity \u0022wheels\u0022 at right angles - then the wheels would work in four orientations.\u003C/p\u003E\n"},{"CreatedByName":"thereaverofdarkness","CreatedById":75673,"CreatedDateTime":"2015-05-06T00:45:27Z","Content":"\n\u003Cp\u003EIn any case, I think it\u0027s something to be looked at, and I don\u0027t think it would be that difficult to come up with a working solution. I\u0027m not a programmer so I can\u0027t say what will cost the least CPU cycles, but I see many potential strategies to explore. One need only be creative.\u003C/p\u003E\n"},{"CreatedByName":"youkofoxy","CreatedById":111097,"CreatedDateTime":"2015-05-06T01:10:48Z","Content":"\n\u003Cp\u003Efewer cycles would be less operations.\u003C/p\u003E\u003Cp\u003E my tire idea of \u0022realistic\u0022 would use the mesh collision state, part of KER code for slope angle and make the traction calculations based on COM vectors.\u003C/p\u003E\u003Cp\u003Eit would use a good processing power. but would approach to what happens in the real world.\u003C/p\u003E\u003Cp\u003E especially if you use the biomes as model modifiers.\u003C/p\u003E\u003Cp\u003E I find even stranger, save processing power with a lousy tire system. while is spent, processing power, rendering two planets to have only one planet on the screen.\u003C/p\u003E\n"}]}