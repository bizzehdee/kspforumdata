{"TopicId":59721,"ForumId":55,"TopicTitle":"Possible solution for Deep Space Kraken","CreatedByName":"Sluppie","CreatedById":36193,"CreatedDateTime":"2014-01-12T05:47:18Z","PageNum":1,"Articles":[{"CreatedByName":"Sluppie","CreatedById":36193,"CreatedDateTime":"2014-01-12T05:47:18Z","Content":"\n\u003Cp\u003EHello. I was talking about floating point errors in a somewhat unrelated game (Space Engineers) and I came up with a solution that I think would work for that game. After I thought about it, I also remembered that KSP has problems with ships randomly exploding in deep space and it occurred to me that it might also be a floating point problem.\u003C/p\u003E\u003Cp\u003ESo I\u0027m just going to copy my solution from that place and paste it here. The link to the original post can be seen here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://forums.keenswh.com/post/suggested-bug-fix-long-distance-shaking-6709792?pid=1281110573#post1281110573\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forums.keenswh.com/post/suggested-bug-fix-long-distance-shaking-6709792?pid=1281110573#post1281110573\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAnd the part of the post that I think will be helpful to you is quoted below.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe other solution is slightly more complicated, but it extends the effective range of the world map to like 4 billion meters away from the origin, and results in no noticeable precision loss whatsoever. While either solution is going to result in a ridiculously huge maximum range, and the double solution seems to be the simplest, I\u0027ll include this other solution in case you don\u0027t want to deal with doubles for some reason.\u003Cp\u003ERight now I imagine you have something like this for your coordinate system:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Estruct coords{\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float x;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float y;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float z;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E}\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Eand this for your velocity function, assuming that input is passed by reference.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Evoid velocityStep(coords input, coords velocity){\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.x \u002B= velocity.x;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.y \u002B= velocity.y;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.z \u002B= velocity.z;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E}\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI suggest changing your coordinate tracker to this:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Estruct coordsNew{\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E int bigX;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float smallX;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E int bigY;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float smallY;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E int bigZ;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E float smallZ;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E}\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAdd this as a constant:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Econst float SMALL_MAX = 10,000.0\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAnd your velocity function to this: \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Evoid velocityStep(coordsNew input, coords velocity){\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.smallX \u002B= velocity.x;\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.bigX \u002B= (int)(input.smallX/SMALL_MAX) // The static casting here matters.\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E input.smallX = input.smallX%SMALL_MAX\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E // repeat this for Y and Z. You get the idea.\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E}\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe second method is going to require a few more adjustments because it\u0027s going to affect how you calculate collision and so on. In some ways, it\u0027ll be more helpful in the long run because ships are not likely to be 10 km long and if two ships are not in adjacent 10,000 km blocks then the chance of collision is going to be zero, so no further calculation needed. At the same time, if ships are close enough together then you basically have to run your normal check in addition to this check, after making sure that you convert their small xyz to adjust for any differences in the big xyz. Not huge, but still.\u003C/p\u003E\u003Cp\u003EAlso, if for some reason 4 billion meters isn\u0027t a big enough world for you, you could always turn those ints into longs and have an effective range of hundreds of millions of lightyears in any direction. Just a thought.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-01-12T07:58:06Z","Content":"\n\u003Cp\u003EThe bug known as Deep Space Kraken was fixed to a large extent a very long time ago now... It\u0027s still around in minor ways, but any craft exploding in deep space are generally the result of another glitch, not the Kraken. People do tend to jump up and call every glitch they find \u0022the Kraken\u0022, but pretty much all of them have little or absolutely no correlation to the original Deep Space Kraken.\u003C/p\u003E\n"},{"CreatedByName":"tntristan12","CreatedById":7005,"CreatedDateTime":"2014-01-12T09:11:42Z","Content":"\n\u003Cp\u003EVexx: It is true that the poor ol\u0027 kraken does get a lot of undue blame for things he didn\u0027t but you know as well as anyone that he\u0027s still out there. Instead of fast targets now, he prefers the slow and weighty ones (like those in orbit around the Mun). Seriously, docking around the Mun now is nigh impossible!\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-01-12T09:18:25Z","Content":"\n\u003Cp\u003EOh, I know about that one -- there\u0027s a bug thread in the Support \u0026amp; Bugs thread about it, look for the keyword \u0027phantom rotation\u0027. It happens in any orbit where the craft\u0027s velocity is less than the 750m/s it takes for Krakensbane to kick in properly, apparently. This here solution would not, I feel, affect that kind of situation at all, though.\u003C/p\u003E\n"}]}