{"TopicId":99878,"ForumId":55,"TopicTitle":"Damage state models for all parts (or just a lot of them)","CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2015-02-16T23:46:05Z","PageNum":1,"Articles":[{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2015-02-16T23:46:05Z","Content":"\n\u003Cp\u003ESo here\u0027s the idea. If you hit an object at 15 m/s, but the crash tolerance is 18 m/s, then it will have a different model that displays some wrinkling or dents or something, and the part would be affected. Batteries would loose charge, tanks would leak, engines would sputter their thrust (like in Lunar Flight, if you hit the lander too hard), etc.\u003C/p\u003E\u003Cp\u003EThere could be several ways of doing it.\u003C/p\u003E\u003Cp\u003E1: Rover wheels. You change the model to a different model to reflect damage, would be done for fuel tanks, engines, or structural parts.\u003C/p\u003E\u003Cp\u003E2: Solar Panels. Each model is actually two separate models. When you hit the object, part of it separates. Use for batteries falling out of the case, some utility parts.\u003C/p\u003E\u003Cp\u003E3: A Procedural thingymuffin. If you hit a model, a procedural/random thing happens to it to make its shape deform in a bendy-wendy-crunchy-munchy way. Use for structural parts, fuel tanks, command pods, etc. This would be the one that requires least work on the modder\u0027s part, or anyone adding new parts, because they wouldn\u0027t have to make a new model for a crashy part.\u003C/p\u003E\u003Cp\u003E4: soft-body physics. Nope. Nope. Nononononono. Nope.\u003C/p\u003E\n"},{"CreatedByName":"Wallygator","CreatedById":97357,"CreatedDateTime":"2015-02-17T15:48:04Z","Content":"\n\u003Cp\u003EI wonder if there could be a procedural mesh deformation routine written which could operate on existing loaded parts? I know nothing about how parts are loaded and transformed when in unity, but it would be cool to see your idea put into reality in a dynamic manner which doesn\u0027t require construction of a small multitude of part representations. Part collides at high threshold, run routine, bend up the mesh and then redraw it. lol - it might work but at like .5 FPS for all I know.\u003C/p\u003E\u003Cp\u003EThen again I could be speaking out of my lower end, as I only loaded a white cube into unity and got it to finally show up in the VAB. Then I ended of those efforts...\u003C/p\u003E\n"},{"CreatedByName":"Tex","CreatedById":75164,"CreatedDateTime":"2015-02-17T16:14:22Z","Content":"\n\u003Cp\u003EI do agree that KSP would benefit from a damage system. Especially because it seems more Kerbal-ly to fly into space on a dented tank!\u003C/p\u003E\u003Cp\u003EAnd damaged engines and things could have bent gimbals, reduced thrust, or could leak fuel. Although most engine problems would likely cause explosions, which would cause SQUAD to not do it on the \u0022random failure\u0022 issue.\u003C/p\u003E\n"},{"CreatedByName":"Tuareg","CreatedById":84241,"CreatedDateTime":"2015-02-17T16:23:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wallygator\u0022 data-cite=\u0022Wallygator\u0022\u003E\u003Cdiv\u003EI wonder if there could be a procedural mesh deformation routine written which could operate on existing loaded parts? I know nothing about how parts are loaded and transformed when in unity, but it would be cool to see your idea put into reality in a dynamic manner which doesn\u0027t require construction of a small multitude of part representations. Part collides at high threshold, run routine, bend up the mesh and then redraw it. lol - it might work but at like .5 FPS for all I know.\u003Cp\u003EThen again I could be speaking out of my lower end, as I only loaded a white cube into unity and got it to finally show up in the VAB. Then I ended of those efforts...\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Elol. we are long over those times when realtime physical meshdeformation runs on 5 fps \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E check out spintires. the entire terrain has permanent physical meshdeformaition and runs on 120 fps on my pc \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-17T16:30:47Z\u0022 title=\u002202/17/2015 04:30  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 17, 2015\u003C/time\u003E by Tuareg\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"klgraham1013","CreatedById":105132,"CreatedDateTime":"2015-02-17T16:36:07Z","Content":"\n\u003Cp\u003EActual damage models would be nice. Even different textures based on damage would be fine. As with deform-able terrain, I think procedural damage isn\u0027t really in the cards.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThis would also give engineers something to fix. I\u0027m not the biggest fan of random failures, but part degradation has always intrigued me.\u003C/p\u003E\n"},{"CreatedByName":"Wallygator","CreatedById":97357,"CreatedDateTime":"2015-02-17T16:49:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tuareg\u0022 data-cite=\u0022Tuareg\u0022\u003E\u003Cdiv\u003Elol. we are long over those times when realtime physical meshdeformation runs on 5 fps \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E check out spintires. the entire terrain has permanent physical meshdeformaition and runs on 120 fps on my pc \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFair enough - I learned \u0022computer graphics\u0022 back on an Apple III running pascal in 1982. I\u0027m making a best guess here (someone correct me if I\u0027m wrong please) that some things have moved on.\u003C/p\u003E\n"},{"CreatedByName":"Renegrade","CreatedById":96629,"CreatedDateTime":"2015-02-17T21:24:27Z","Content":"\n\u003Cp\u003EI support this - I\u0027d love to see progressive damage. The \u0022Okay, we\u0027re fine\u0022 to \u0022\u003Ca href=\u0022http://tvtropes.org/pmwiki/pmwiki.php/Main/CriticalExistenceFailure\u0022 rel=\u0022external nofollow\u0022\u003ECritical existence failure\u003C/a\u003E\u0022 thing we have now is annoying. Dinged that engine at 5.9m/s. It\u0027s fine. Dinged it at 6.0--BOOOM! What the heck? \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022klgraham1013\u0022 data-cite=\u0022klgraham1013\u0022\u003E\u003Cdiv\u003EThis would also give engineers something to fix. I\u0027m not the biggest fan of random failures, but part degradation has always intrigued me.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, exactly!\u003C/p\u003E\n"}]}