{"TopicId":39916,"ForumId":55,"TopicTitle":"Multi-connecting in editor (especially for multi-couplers)","CreatedByName":"thox","CreatedById":64908,"CreatedDateTime":"2013-07-29T19:20:59Z","PageNum":1,"Articles":[{"CreatedByName":"thox","CreatedById":64908,"CreatedDateTime":"2013-07-29T19:20:59Z","Content":"\n\u003Cp\u003EI came across the problem that an upside-down bi-/tri-/quad-coupler that is placed below a similar cluster of engines only connects to one of those, making the craft extremely unstable at this point and therefore making engine clusters in upper stages impossible (well, basically possible with lots of struts, but... you know, that might be very Kerbal but neither perfectly stable nor elegant).\u003C/p\u003E\u003Cp\u003ESo I am suggesting to make all the attachment points of the multi-coupler connect to the those above, which might be realizable by handling everything as it is (coupler connects to only one point at first), and then making those attachment points overlaying with other (free) attachment points (in this example the ones of the engines above) connect to those as well.\u003C/p\u003E\u003Cp\u003EThis might, as mentioned, especially be handy for engine clusters in upper stages and possibly also helpful in some other situations.\u003C/p\u003E\n"},{"CreatedByName":"dlmarti","CreatedById":70037,"CreatedDateTime":"2013-07-29T19:44:26Z","Content":"\n\u003Cp\u003EOne part connects to one part, thats it. Its a limitation of the game engine.\u003C/p\u003E\n"},{"CreatedByName":"itsme86","CreatedById":59895,"CreatedDateTime":"2013-07-29T19:51:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022dlmarti\u0022 data-cite=\u0022dlmarti\u0022\u003E\u003Cdiv\u003EOne part connects to one part, thats it. Its a limitation of the game engine.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s a gross over-simplification. I mean, how do you explain struts or tri-couplers then? They obviously connect to more than one part.\u003C/p\u003E\n"},{"CreatedByName":"thox","CreatedById":64908,"CreatedDateTime":"2013-07-29T20:01:59Z","Content":"\n\u003Cp\u003EI know that in unity it is basically only possible have one new part connected to one other part standing above it in the hierachic structure, but what i was thinking about was just making the remaining free (and overlapping) attachment points automatically get physically attached to each other afterwards (kind of adding a strut connector between them that has zero weight and volume and the same stability as the normal connection).\u003C/p\u003E\n"},{"CreatedByName":"chaos_forge","CreatedById":64960,"CreatedDateTime":"2013-07-29T20:18:09Z","Content":"\n\u003Cp\u003EI don\u0027t know how this could be done, but it definitely needs to be done. It would really extend the types of rocket that you can build. And it is possible to auto-connect crafts, because the docking already do that.\u003C/p\u003E\n"},{"CreatedByName":"Kimberly","CreatedById":71980,"CreatedDateTime":"2013-07-29T20:59:21Z","Content":"\n\u003Cp\u003EUnder the current system, attachment nodes follow a parent-child structure, and one part can only have one parent. This means multiple connections with multi-couplers are not possible. However, a ship is allowed to dock to itself, and it can do so multiple times...which is why it\u0027s possible to do this with docking ports. But docking ports only work if physics are turned on, which they aren\u0027t in the VAB.\u003C/p\u003E\n"},{"CreatedByName":"dlmarti","CreatedById":70037,"CreatedDateTime":"2013-07-29T21:51:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022itsme86\u0022 data-cite=\u0022itsme86\u0022\u003E\u003Cdiv\u003EThat\u0027s a gross over-simplification. I mean, how do you explain struts or tri-couplers then? They obviously connect to more than one part.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou are assuming they are a real part, and not a kludge.\u003C/p\u003E\n"},{"CreatedByName":"toric5","CreatedById":58046,"CreatedDateTime":"2013-07-29T22:26:42Z","Content":"\n\u003Cp\u003Eif you can do it with docking ports, it should be possible to make a workaround so the game sees attachment nodes as docking ports.\u003C/p\u003E\n"},{"CreatedByName":"chaos_forge","CreatedById":64960,"CreatedDateTime":"2013-07-29T22:36:02Z","Content":"\n\u003Cp\u003E^This. Is something like that possible?\u003C/p\u003E\n"},{"CreatedByName":"Eric S","CreatedById":57117,"CreatedDateTime":"2013-07-29T22:59:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022itsme86\u0022 data-cite=\u0022itsme86\u0022\u003E\u003Cdiv\u003EThat\u0027s a gross over-simplification. I mean, how do you explain struts or tri-couplers then? They obviously connect to more than one part.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, it\u0027s not, at least not by much. The tree structure that KSP uses to connect parts means that each part is connected to one other part (except the first part placed). The thing to keep in mind is that other parts can connect to that part, the limitation isn\u0027t symmetrical. \u003C/p\u003E\u003Cp\u003EAs for struts, they actually step outside the normal part tree for the connection at the second end. They\u0027re a connection point and a direction, there is no reference to the second part. In fact, if you move or even remove the part that the strut connects to, as long as there\u0027s still something for the strut to connect to in that direction, the strut will connect rather than retract.\u003C/p\u003E\n"},{"CreatedByName":"chaos_forge","CreatedById":64960,"CreatedDateTime":"2013-07-29T23:21:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Eric S\u0022 data-cite=\u0022Eric S\u0022\u003E\u003Cdiv\u003EActually, it\u0027s not, at least not by much. The tree structure that KSP uses to connect parts means that each part is connected to one other part (except the first part placed). The thing to keep in mind is that other parts can connect to that part, the limitation isn\u0027t symmetrical. \u003Cp\u003EAs for struts, they actually step outside the normal part tree for the connection at the second end. They\u0027re a connection point and a direction, there is no reference to the second part. In fact, if you move or even remove the part that the strut connects to, as long as there\u0027s still something for the strut to connect to in that direction, the strut will connect rather than retract.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/220px-Binary_tree.svg.png\u0022 alt=\u0022220px-Binary_tree.svg.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is what a data tree looks like. Note how many nodes are connected to more than one node. The limitation here it that to have a tri \u0022re-coupler\u0022 would require arrows pointing up, which is not allowed. That means that any solution to this, like struts, would have to go outside the normal tree structure. Maybe have invisible struts pointing straight up and invisible fuel lines pointing straight down wherever there\u0027s an open node?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-07-29T23:25:56Z\u0022 title=\u002207/29/2013 11:25  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 29, 2013\u003C/time\u003E by chaos_forge\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"thox","CreatedById":64908,"CreatedDateTime":"2013-07-30T00:37:37Z","Content":"\n\u003Cp\u003EI don\u0027t even think invisible struts and fuel lines would be necessary, the connection might even be like a normal connection, just with the attachment logic bent around the tree structure like struts and fuel lines. And to achieve auto-connection for the free attachment points/nodes it might be best to have the nodes check whether there is another one in the exact same place and, if there is one, make a connection with it.\u003C/p\u003E\n"},{"CreatedByName":"itsme86","CreatedById":59895,"CreatedDateTime":"2013-07-30T00:38:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022dlmarti\u0022 data-cite=\u0022dlmarti\u0022\u003E\u003Cdiv\u003EYou are assuming they are a real part, and not a kludge.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo I\u0027m not, I\u0027m saying that your comment was an over-simplification, which you just confirmed. It\u0027s not a simple as \u0022one part connects to one part, that\u0027s it.\u0022 You just said yourself that there are some parts that work around that limitation. And I\u0027m not just talking about struts, but also multi-part couplers.\u003C/p\u003E\n"},{"CreatedByName":"itsme86","CreatedById":59895,"CreatedDateTime":"2013-07-30T00:41:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Eric S\u0022 data-cite=\u0022Eric S\u0022\u003E\u003Cdiv\u003EActually, it\u0027s not, at least not by much. The tree structure that KSP uses to connect parts means that each part is connected to one other part (except the first part placed). The thing to keep in mind is that other parts can connect to that part, the limitation isn\u0027t symmetrical. \u003Cp\u003EAs for struts, they actually step outside the normal part tree for the connection at the second end. They\u0027re a connection point and a direction, there is no reference to the second part. In fact, if you move or even remove the part that the strut connects to, as long as there\u0027s still something for the strut to connect to in that direction, the strut will connect rather than retract.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, but the question is, is that a limitation of the Unity engine that the game is built on, and therefore outside of the control of the KSP dev team, or is it a symptom of the structure that the KSP dev team has created?\u003C/p\u003E\n"},{"CreatedByName":"Eric S","CreatedById":57117,"CreatedDateTime":"2013-07-30T01:51:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022itsme86\u0022 data-cite=\u0022itsme86\u0022\u003E\u003Cdiv\u003EYeah, but the question is, is that a limitation of the Unity engine that the game is built on, and therefore outside of the control of the KSP dev team, or is it a symptom of the structure that the KSP dev team has created?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat I can\u0027t answer. I\u0027ve heard it claimed that it\u0027s a Unity limitation, but haven\u0027t heard of any independent confirmation.\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2013-07-30T02:22:22Z","Content":"\n\u003Cp\u003EHere\u0027s how it works. Each part has to be attached somewhere. Now, that attachment point is either a surface or node attachment. The limitation of the game is that one part cannot be attached simultaneously to two other parts -- in other words, it can only have one \u0022parent\u0022 part. That\u0027s what a tree structure is. To have a \u0022reverse tricoupler\u0022 or to attach one part to three different nodes is impossible. Do you \u003Cem\u003Ereally\u003C/em\u003E think this has never come up before? It\u0027s come up at least \u003Cem\u003Efifty times\u003C/em\u003E in my own experience, and that\u0027s only back to 0.13.3. To alter the construction logic to such an extent to allow this would make it extremely complicated, and the craft files\u0027 structure would have to be reworked, because at present it is impossible to save a single part with two parent attachments, even if you attempted to force it by manually editing the file.\u003C/p\u003E\u003Cp\u003EUnless you\u0027re a programmer, you understand tree structures and their limitations, \u003Cem\u003Eand you have a workable solution and ideally some example code\u003C/em\u003E, please don\u0027t waste your time on this. This limitation exists for a good reason -- \u003Cstrong\u003Eit\u0027s damned difficult to remove the damn limitation\u003C/strong\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u00B9.\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2013-07-30T02:45:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003Eit\u0027s damned difficult to remove the damn limitation.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYep; \u003C/p\u003E\u003Cp\u003ETo the OP: the only solution is to make the additional attachments via docking ports, as mentioned by a previous responder.\u003C/p\u003E\u003Cp\u003EThis can be tricky to achieve though. In the VAB only one actual connection will be made. You then create additional \u0022connections\u0022 by very carefully and precisely trying to line up docking ports between the sections. When the ship is launched the unattached docking ports that are facing each other will immediately dock when physics kicks in.\u003C/p\u003E\u003Cp\u003EThe nature of the construction cameras can make this really hard sometimes. The difficulty depends on the structure you\u0027re trying to complete. Sometimes it\u0027s trivial: If you...\u003C/p\u003E\u003Cp\u003Eattach a bicoupler (tricoiupler/quad coupler) to the bottom of a stack\u003C/p\u003E\u003Cp\u003Eattach two docking ports to the bicoupler facing down\u003C/p\u003E\u003Cp\u003EAttach (\u0022dock\u0022) another port facing up to ONE of those\u003C/p\u003E\u003Cp\u003Eattach an upwards facing bicoupler to the port that is facing up\u003C/p\u003E\u003Cp\u003EAttach an upwards facing docking port to the empty face of the bicoupler\u003C/p\u003E\u003Cp\u003E... then the \u0022unattached\u0022 upwards facing docking port will be precisely aligned with the downwards facing port above it, and perfectly far away to immediately dock on launch.\u003C/p\u003E\u003Cp\u003EHowever, if you are trying to do something where the geometry doesn\u0027t guarantee precision (which is usually the case when trying to make multiple *radial* attachments), you usually have to go into surface attachment mode and move the port pixel by pixel, hoping that you can get the planes perfectly aligned as well as getting zero distnace between the faces.\u003C/p\u003E\u003Cp\u003EI\u0027m also not sure if this accomplishes anything other than making this more aesthetically pleasing. Multiple-docking connections have been said to work \u0022like struts\u0022. I don\u0027t know whether or not they are actually *stronger* than struts, though. So you might accomplish the same structural integrity simply by using a strut, which is way easier and doesn\u0027t need all the fiddling.\u003C/p\u003E\n"},{"CreatedByName":"chaos_forge","CreatedById":64960,"CreatedDateTime":"2013-07-30T03:06:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EUnless you\u0027re a programmer, you understand tree structures and their limitations, \u003Cem\u003Eand you have a workable solution and ideally some example code\u003C/em\u003E, please don\u0027t waste your time on this. This limitation exists for a good reason -- \u003Cstrong\u003Eit\u0027s damned difficult to remove the damn limitation\u003C/strong\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u00B9.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI understand the limitations of trees, but I don\u0027t know how struts work in KSP. If they are indeed directional, what\u0027s stopping us from just having invisible struts with a very short max length pointing straight up (or straight normal to the attachment plane, for radial attachment)?\u003C/p\u003E\n"},{"CreatedByName":"Eric S","CreatedById":57117,"CreatedDateTime":"2013-07-30T04:39:11Z","Content":"\n\u003Cp\u003EThat\u0027s probably the easiest way to do it, but it still has a few issues that I can think of.\u003C/p\u003E\u003Cp\u003E1) You have to detect when and where to put the invisible struts. Trivial for people, not so trivial for computers, because if it\u0027s not accurate, it can add struts that aren\u0027t actually needed, increasing the workload of the physics simulation. Just detecting unconnected nodes that are close together would work for some cases, but I can see cases where it wouldn\u0027t (extreme part clipping for example).\u003C/p\u003E\u003Cp\u003E2) If any connection in the part graph between the two pieces breaks, the invisible strut will have to break as well.\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2013-07-30T08:45:39Z","Content":"\n\u003Cp\u003EAlso, you might have reasons not to want the part to attach to everything possible. As a result, it becomes a nightmare working out how to figure out exactly which things to attach where. Having users do it manually would be simplest, but then you need a whole new bunch of VAB commands and logic for them.\u003C/p\u003E\n"},{"CreatedByName":"thox","CreatedById":64908,"CreatedDateTime":"2013-07-30T10:32:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EIt\u0027s come up at least \u003Cem\u003Efifty times\u003C/em\u003E in my own experience, and that\u0027s only back to 0.13.3.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOk that is what actually convinced me that it\u0027s not going to happen (at least not soon), since it shows that the devs don\u0027t want to deal with that issue and I respect that. I still don\u0027t think it would be impossible, but they have things to work on that are more important.\u003C/p\u003E\n"},{"CreatedByName":"Teodzero","CreatedById":76759,"CreatedDateTime":"2013-07-30T12:39:19Z","Content":"\n\u003Cp\u003EI\u0027ve seen almost all the same arguments about inability to delete or replace the first \u0022parent\u0022 part. In the end, none of them matter. \u0022That\u0027s just how the logic works\u0022 - you can say that about every bug, that doesn\u0027t justify it. And form the gamplay standpoint it \u003Cem\u003Eis\u003C/em\u003E a bug and it \u003Cem\u003Ehas\u003C/em\u003E to be fixed before you can call the game finished.\u003C/p\u003E\u003Cp\u003EAnd I think Squad can (and will) fix it... eventually.\u003C/p\u003E\u003Cp\u003EIt just became more irritating with all these new parts that can\u0027t be used to their full potential. I hope this situation at least pushed it higher in priority list.\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2013-07-30T14:30:05Z","Content":"\n\u003Cp\u003ENo, it\u0027s *not* a bug, it is an inherent limitation of a deliberate choice. A bug is an effect that was not intended.\u003C/p\u003E\n"},{"CreatedByName":"LoneRider","CreatedById":76103,"CreatedDateTime":"2013-07-30T14:38:54Z","Content":"\n\u003Cp\u003EI think it should be possible while maintaining the only-one-parent rule (which is technically required) to add a field for cross-connecting. Like a part has only one parent (sure) but can have other connections to parts up the tree (just a data list with ids of parts). It is just needed to ensure that physics will apply from these cross-connected parts to the other parts as well. It would have to be a side-implementation (as breaking the only-one-parent rule is not possible) but should be possible. Even if you remove the real parent, one part from the cross-connection list could become parent. Which one shouldnt care, because physics are applied for the cross-connecting parts as well, so it just does not matter which one is the \u0022real\u0022 parent on engine-side.\u003C/p\u003E\n"},{"CreatedByName":"itsme86","CreatedById":59895,"CreatedDateTime":"2013-07-30T19:31:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EHere\u0027s how it works. Each part has to be attached somewhere. Now, that attachment point is either a surface or node attachment. The limitation of the game is that one part cannot be attached simultaneously to two other parts -- in other words, it can only have one \u0022parent\u0022 part. That\u0027s what a tree structure is. To have a \u0022reverse tricoupler\u0022 or to attach one part to three different nodes is impossible. Do you \u003Cem\u003Ereally\u003C/em\u003E think this has never come up before? It\u0027s come up at least \u003Cem\u003Efifty times\u003C/em\u003E in my own experience, and that\u0027s only back to 0.13.3. To alter the construction logic to such an extent to allow this would make it extremely complicated, and the craft files\u0027 structure would have to be reworked, because at present it is impossible to save a single part with two parent attachments, even if you attempted to force it by manually editing the file.\u003Cp\u003EUnless you\u0027re a programmer, you understand tree structures and their limitations, \u003Cem\u003Eand you have a workable solution and ideally some example code\u003C/em\u003E, please don\u0027t waste your time on this. This limitation exists for a good reason -- \u003Cstrong\u003Eit\u0027s damned difficult to remove the damn limitation\u003C/strong\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u00B9.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt just so happens that I \u003Cem\u003Eam\u003C/em\u003E a programmer and I understand tree structures very well. What you\u0027re asking for as far as example code goes is impossible without having the existing code related to parts. Here, you want a fix?\u003C/p\u003E\u003Cp\u003EChange:\u003C/p\u003E\u003Cp\u003Eclass Part { Part parent; }\u003C/p\u003E\u003Cp\u003ETo:\u003C/p\u003E\u003Cp\u003Eclass Part { Part[] parents; }\u003C/p\u003E\u003Cp\u003ESee? Useless. Your vague pseudo-intelligent answer isn\u0027t helpful either. How do you know how difficult it is to remove the limitation? There are existing, well-known structures for handling multi-parent nodes. They\u0027re called graphs. So, instead of using a tree structure, use a graph structure.\u003C/p\u003E\u003Cp\u003EAny answer that simply boils down to \u0022it\u0027s hard\u0022 is ridiculous. Really? It\u0027s hard? Now if the answer instead was \u0022to keep calculations down for performance reasons\u0022 or some \u0022game play design choice\u0022 or something, then that\u0027s totally reasonable. But \u0022it\u0027s hard\u0022 is just a fail answer as to why something isn\u0027t done.\u003C/p\u003E\n"}]}