{"TopicId":188192,"ForumId":55,"TopicTitle":"redundant multicore physics model?!","CreatedByName":"Arugela","CreatedById":133381,"CreatedDateTime":"2019-09-12T21:57:50Z","PageNum":1,"Articles":[{"CreatedByName":"Arugela","CreatedById":133381,"CreatedDateTime":"2019-09-12T21:57:50Z","Content":"\n\u003Cp\u003E\nWhat about a model of physics or plane logic that is split up between multiple threads with multiple instances to check for errors and incorrect timings. Set it to a style where it can set when it needs a certain logic and then obtain it in a streamlined/timed manner. Could multiple variations of the same calculation or instances of the same calculation manage to make up for this to get better parts counts, response times, or newer features? It could have multiple speed calculations with extra instances to make up for errors. And open and detect errors and maintain or add extra with extra cores just to be safe as needed.\n\u003C/p\u003E\n\u003Cp\u003E\nMaybe with enough redundancy the single thread aspects could be made multi core reliably. As we get bigger and bigger cpu\u0027s this could become more desireable. This game has lots of extra cpu to use. Let alone GPU.\n\u003C/p\u003E\n\u003Cp\u003E\nI assume you need something fast to say what the answer should be. Maybe a predictive logic also. By definition there is a set amount of possibilities given the code. Can you use a method to quickly determine what should be there on some level?\n\u003C/p\u003E\n\u003Cp\u003E\nI wonder in a general sense is there a way to use predictive logic to make a bit more than a bit. If you know certain guarantees on any level can you make a single variable split into multiple things somehow. This would have to go with fairly simple logic operations though I would think to maximize. Maybe a build able physics where it has base complex low bit calculation or stacking adding together in a way that one bit answer can go to many threads from a base thread and split the calculation in a predictable manner on a more base scale. Or use various operations as stand in logic for an answer in a shorter fashion. Assuming this is not gobbly goop or not already implemented. Instead of calculating stuff just make a complex operations path for known or partial results.\n\u003C/p\u003E\n\u003Cp\u003E\nPart of the idea is both improving performance if possible and splitting up ships or to give room for different types of features.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-12T22:51:53Z\u0022 title=\u002209/12/2019 10:51  PM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 12, 2019\u003C/time\u003E by Arugela\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2019-09-12T23:32:25Z","Content":"\n\u003Cp\u003E\nCan physics calculations be optimized? Yes, probably:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022270\u0022 width=\u0022480\u0022 data-embed-src=\u0022https://www.youtube.com/embed/yuqM-Z-NauU?feature=oembed\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nWould the suggestion in the \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E achieve that goal? I\u0027m not able to understand the given description well enough to say; maybe you have a coherent idea, maybe not. (The meaning is obscured by vague phrases like, \u0022set when it needs a\u00A0certain logic\u0022 and \u0022extra instances to make up\u00A0for errors\u0022 that probably mean something very specific in your mind but not to a reader of\u00A0your text.)\n\u003C/p\u003E\n\u003Cp\u003E\nBut there are\u00A0red flags such as, \u0022multiple variations of the same calculation\u00A0or instances\u00A0of the same calculation\u0022 that suggest possible gaps in understanding. When parallelizing an algorithm, performance gains are achieved by\u00A0\u003Cstrong\u003Enot\u003C/strong\u003E\u00A0doing the same calculation multiple times, and instead doing it only once on just one thread while other threads are working on different calculations, and only sharing information between threads when it\u0027s absolutely necessary (often at the end, when the various threads\u0027 results are collected to get the final overall result). Running the same calculation multiple times might even end up with\u00A0\u003Cem\u003Eworse\u003C/em\u003E\u00A0performance than with single threading, since now not only are you calculating all the same stuff, but you\u0027re also dealing with the overhead of passing data from thread to thread in addition.\n\u003C/p\u003E\n"},{"CreatedByName":"Arugela","CreatedById":133381,"CreatedDateTime":"2019-09-12T23:49:45Z","Content":"\n\u003Cp\u003E\nI meant running multiple redundant threads to use a que to keep the physics inline.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you have normal calcs going parralel and one is not going through, maybe because the calculation is simply that big, there might be a less ideal but usable faster calculation as a redundant one that can pass an answer through or something. They could run parallel themselves to check for correctness and if one fails it could run the other one. If you combine enough of them could you basically do what you do with raids and have parity physics calculations?\n\u003C/p\u003E\n\u003Cp\u003E\nI was thinking about how to split up single thread stuff for ships that is keeping the parts count down effectively.\n\u003C/p\u003E\n\u003Cp\u003E\nCould you make a more intensive potential calculation in some senses and have it split between threads to increase parts count. If you can split it why not have redundancies to keep stepping of the calculation guaranteed.\n\u003C/p\u003E\n\u003Cp\u003E\nThe other part was if there was a reason to run a reduntant thread of the same calculation in case of some other hickup. Not sure what is needed. Someone said the reason you don\u0027t que physics and plane body logic over multiple threads is that it could miss a calc and go haywire. So, if you add a lot of redundancy I was assuming you could make up for it. Especially as we keep getting massive core counts on cpus. The other idea was to keep track of errors and then add extra threads for redundancy to automatically keep up with problems as they happen.\n\u003C/p\u003E\n\u003Cp\u003E\nThe checks could also be non attached and be like a statistics formula that keeps up without being critical to the physics implementation.\n\u003C/p\u003E\n\u003Cp\u003E\nCould such a thing also help with queing order per cpu core? Maybe if one gets in line a little faster it can get the calculation out faster than the others on other cores and it can flood the CPU trying to get top priority. Or have different priorities and have them be backups.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-13T00:00:54Z\u0022 title=\u002209/13/2019 12:00  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 13, 2019\u003C/time\u003E by Arugela\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2019-09-13T00:01:14Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223671325\u0022 data-ipsquote-contentid=\u0022188192\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568332185\u0022 data-ipsquote-userid=\u0022133381\u0022 data-ipsquote-username=\u0022Arugela\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 minutes ago, Arugela said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI meant running multiple redundant threads to use a que to keep the physics inline.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOh. In that case, no, this isn\u0027t worth pursuing. \u0022one is not going through\u0022 and \u0022one fails\u0022 aren\u0027t things that happen in game\u00A0physics calculations. You\u0027ve got a solution in search of a problem here.\n\u003C/p\u003E\n"},{"CreatedByName":"Arugela","CreatedById":133381,"CreatedDateTime":"2019-09-13T00:04:00Z","Content":"\n\u003Cp\u003E\nThe point was to split up the single core calc from the ships parts that are currently limiting parts count on ships.\n\u003C/p\u003E\n\u003Cp\u003E\nI was hoping something could be used to split up the bodies logic so it\u0027s not single core and can get extra parts count without the lag. Couldn\u0027t you label calculations so the system knows when what needs to go where in a calculation so the split threads can act like a single core calculation? I\u0027m assuming mass redundancy could help get rid of any errors.\n\u003C/p\u003E\n\u003Cp\u003E\nBasically, treat multiple threads across multiple cores as one giant thread. Then compensate by making redundant calcs or whatnot to make up for any time critical issues.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-13T00:07:33Z\u0022 title=\u002209/13/2019 12:07  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 13, 2019\u003C/time\u003E by Arugela\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2019-09-13T00:25:23Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223671332\u0022 data-ipsquote-contentid=\u0022188192\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221568333040\u0022 data-ipsquote-userid=\u0022133381\u0022 data-ipsquote-username=\u0022Arugela\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, Arugela said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe point was to split up the single core calc from the ships parts that are currently limiting parts count on ships.\n\u003C/p\u003E\n\u003Cp\u003E\nI was hoping something could be used to split up the bodies logic so it\u0027s not single core and can get extra parts count without the lag.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIn that case, the challenge to solve is not how to \u0022get rid of any\u00A0errors\u0022 (again this is just not a factor, but it seems to be the main focus of your idea), but rather how to split up the calculations across multiple threads efficiently without sacrificing accuracy. And the suggestions you\u0027ve made would be counterproductive with respect to that goal, since they would squander the benefits of parallelism by repeating the same calculation on multiple threads.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, Arugela said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nCouldn\u0027t you label calculations so the system knows when what needs to go where in a calculation so the split threads can act like a single core calculation? I\u0027m assuming mass redundancy could help get rid of any errors.\n\u003C/p\u003E\n\u003Cp\u003E\nBasically, treat multiple threads across multiple cores as one giant thread.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo, I don\u0027t think this is a coherent idea. Maybe if you explained it differently.\n\u003C/p\u003E\n"}]}