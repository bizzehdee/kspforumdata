{"TopicId":112178,"ForumId":55,"TopicTitle":"Memory Not Being Returned?","CreatedByName":"Xyd","CreatedById":73520,"CreatedDateTime":"2015-06-06T15:43:54Z","PageNum":1,"Articles":[{"CreatedByName":"Xyd","CreatedById":73520,"CreatedDateTime":"2015-06-06T15:43:54Z","Content":"\n\u003Cp\u003ESo I\u0027ve noticed this lately (in addition to the obvious memory leaks) that when I load up a ship, my memory will go from say 2.4gb to 2.7/2.8gb of ram usage. But, once I\u0027m done with the ship, either through recovery or leaving the VAB, the memory used will not be returned. This is on Windows 32 bit.\u003C/p\u003E\u003Cp\u003EIs this the norm? And are the devs working on a fix for this? I\u0027m aware they\u0027re working on fixing the memory leaks, but this seems like an entirely different issue.\u003C/p\u003E\n"},{"CreatedByName":"SciMan","CreatedById":12748,"CreatedDateTime":"2015-06-06T15:45:23Z","Content":"\n\u003Cp\u003EA memory leak is exactly what you\u0027re describing. Memory being allocated to a program for it to use, but the program doesn\u0027t release the memory when it\u0027s done using it.\u003C/p\u003E\n"},{"CreatedByName":"sal_vager","CreatedById":16426,"CreatedDateTime":"2015-06-06T15:59:01Z","Content":"\n\u003Cp\u003EAs you don\u0027t see the memory use go up with every craft loaded, KSP is reusing that memory so it is not a memory leak.\u003C/p\u003E\u003Cp\u003EThere are known issues with the memory allocated to the part overheating effect, specifically the PPFX edge highlight in the flight scene when parts get hot enough, and this is something Squad are looking to address.\u003C/p\u003E\u003Cp\u003EBut the memory use from loading a craft is normal, and there are many other things loaded into memory such as terrain, and things are cached to save time in case you go back to them.\u003C/p\u003E\n"},{"CreatedByName":"tbob","CreatedById":137896,"CreatedDateTime":"2015-06-06T16:00:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022SciMan\u0022 data-cite=\u0022SciMan\u0022\u003E\u003Cdiv\u003EA memory leak is exactly what you\u0027re describing. Memory being allocated to a program for it to use, but the program doesn\u0027t release the memory when it\u0027s done using it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe - if the memory gets bigger next time you load the ship then yes. But KSP may be retaining the buffer for re-use. If KSP still knows it has that memory it\u0027s OK. It\u0027s only a leak when both KSP and Windows are saying \u0022Where is it? I thought you had it!\u0022\u003C/p\u003E\n"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-06-06T16:30:01Z","Content":"\n\u003Cp\u003EIt\u0027s absolutely normal for applications to \u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003ENOT\u003C/strong\u003E\u003C/span\u003E return memory to the operating system, except under very particular circumstances. The type of operations and analysis described here absolutely does not conclusively demonstrate a memory leak. You simply cannot rely on the memory usage reported by operating system tools to identify memory leaks reliably. Constant significant growth over time, which never seems to level out, that\u0027s a quite likely pointer towards a memory leak. Reported memory usage not shrinking does not indicate anything in particular, it\u0027s perfectly normal.\u003C/p\u003E\u003Cp\u003EWhen application code is finished with a block of memory, the first thing that happens is that it\u0027s returned to the application\u0027s own internal pool of free memory. When an application needs to allocate a new block of memory it always first tries to obtain it from its own pool of free memory, and only goes to the operating system for more if it does not have a suitable contiguous block available. In some cases, it may never be returned to the OS until the application exits. That is not any type of problem, however, as all modern operating systems work with both virtual address space and virtual memory, so inactive \u0022pages\u0022 of memory held by an application should not be having any real impact on either the application or system performance. The problems kick in when there\u0027s too many active \u0022pages\u0022 system-wide, or an individual application runs out of virtual address space. Historically, there was a 3rd problem, of the system running out of available virtual memory (aka swap, or memory on disk), but modern disk sizes have all but eliminated that in most cases (although you can make that a problem for yourself by badly managing your system).\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tbob\u0022 data-cite=\u0022tbob\u0022\u003E\u003Cdiv\u003EMaybe - if the memory gets bigger next time you load the ship then yes. But KSP may be retaining the buffer for re-use. If KSP still knows it has that memory it\u0027s OK. It\u0027s only a leak when both KSP and Windows are saying \u0022Where is it? I thought you had it!\u0022\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEven that isn\u0027t conclusive. { load; unload; load; unload; } is an insufficient test identify a memory leak. Idiosyncrasies of internal memory allocation and fragmentation of free memory means that it\u0027s not guaranteed for the memory footprint to be identical after either each load or unload in a sequence like that. You require a much longer sequence of load \u0026amp; unload to have any reasonable certainty.\u003C/p\u003E\n"}]}