{"TopicId":76772,"ForumId":55,"TopicTitle":"More object nesting in active scenes, Object consolidation. And krakensbane.","CreatedByName":"AdmiralTigerclaw","CreatedById":92104,"CreatedDateTime":"2014-07-05T22:11:43Z","PageNum":1,"Articles":[{"CreatedByName":"AdmiralTigerclaw","CreatedById":92104,"CreatedDateTime":"2014-07-05T22:11:43Z","Content":"\n\u003Cp\u003EI\u0027ll start with the simple disclaimer that I\u0027m not familiar with the Unity engine, but I have worked with a situation I\u0027m about to describe before. \u003C/p\u003E\u003Cp\u003EAnyway, recently I was encountering a slowdown in my gameplay with some mods. Naturally, mods aren\u0027t a concern to the devs because they have bigger fish to fry than third-party work, but for many of us, 90% of the game is built on our massive stacks of mod folders.\u003C/p\u003E\u003Cp\u003EBut I digress before I begin: \u003C/p\u003E\u003Cp\u003EIn the process of hunting down the offender, I discovered the krakensbane API code. A clever piece of code that essentially turns the player vessel into Futurama. (You guys got Prof. Farnsworth on the team there at Squad? I suggest whoever wrote that code gets a Farnsworth avatar and puts \u0027great news everyone\u0027 in his title. Just for laughs.)\u003C/p\u003E\u003Cp\u003EWith a little further testing, I discovered that the problem was what a mod was doing, and how krakensbane works. In this case, krakensbane decides that after a certain distance (or in this case, velocity), that instead of moving the ship around the universe, it moves the universe around the ship to keep things stable in the floating point values. That means that instead of an unstable, potentially explody ship, the code grabs the rest of the universe and proceeds to perform more or less a SETPOS (set position) command on it.\u003C/p\u003E\u003Cp\u003EI have LITERALLY dealt with in-game scripting using a method similar to this. It does NOT scale well. In fact, it scales HORRIBLY. \u003C/p\u003E\u003Cp\u003EThe game was X-2: the Threat, and I was assisting with creating a script that simulated a point to point traveling hyperdrive effect. (\u0027Freejump\u0027 scripts.) The code worked by using a math algorithm the coder wrote up to draw a line between the origin of the ship, and a destination selected on the map, then applying SETPOS command along the length of this line at a high rate to simulate the \u0027effect\u0027 of rapid transit without some kind of instant jump. \u003C/p\u003E\u003Cp\u003EIt worked. It was fun to use. And it worked well...\u003C/p\u003E\u003Cp\u003EUntil I stress tested it with an M1 carrier disgorging thirty M3 Split Mamba fighters, all programmed with intercept commands, autojump software, and freejump. The moment they detected a target and the automatic intercept scripting kicked in... Well, after the first three vectored onto target and jumped, it became a slideshow. By the time all thirty were in jump, the PC (of the time) was crying superheated air through the vents. The scripting worked wonderfully... Provided you didn\u0027t attempt to scale up what you were doing to anything resembling mass tactical maneuvers.\u003C/p\u003E\u003Cp\u003EAnd this brings me back to krakensbane. Clever code, but in solving one thing, it\u0027s introducing a whole new problem. That problem is that if the rest of the universe has very much added to it in the form of other objects or parts, then the universe position/momentum resets are very quickly going to increase the number of operations to be done. The mod I was using that made this problem show up was simply adding static objects all over Kerbin via kerbtown. However, in adding those objects, krakensbane is given more and more objects it needs to grab ahold of and move. I\u0027m uncertain as to the exact object count, but it couldn\u0027t have exceeded two dozen at the most. Either way, the results are clear. I have my physics frame ratio set up to overdrive values, and it went from just shy of 1/1 realtime gameplay ratio, to 2/5ths (.4) the moment krakensbane kicked in.\u003C/p\u003E\u003Cp\u003EOverall, the bottleneck is, and has been the physics engine. Or more in my experience, the scaling of it. In the last... two years of gameplay I have attempted a number of ambitious space projects within the game only to be met with one game-halting limitation or another. Either the physics engine suddenly goes glassy-eyed and I can\u0027t even quit out of active gameplay to KSC because the buttons don\u0027t work, or the gameplay slows down to such a crawl that the time rescale factor leaves me thinking I\u0027ve discovered a white hole in the vicinity of kerbin. I\u0027ve tried to make a large station (twice), a moonbase drilling operation (twice again), and building the orbital infrastructure for a vast communications array. Each and every time, I get my infrastructures into the adolescent stages and start bringing things up to speed, when I encounter a problem that seems to stem from scaling issues. The physics engine stops responding. (Only seems to happen when its strained), parts spontaneously develop new metamaterial characteristics (I had a docking ring that behaved as if its center mass was half a kilometer away, and the camera was half a kilometer the opposite direction), or the game just starts playing so slowly that you can\u0027t really do anything.\u003C/p\u003E\u003Cp\u003EAll because it seems that the engine just can\u0027t SCALE. And with either a universe full of active \u0027missions\u0027 (satellites, probes, vehicles, bases), or a high part-count vessel, it just seems like even with on-the rails physics and other such work, it can\u0027t handle the busy universe of an advanced space program.\u003C/p\u003E\u003Cp\u003ESo I\u0027d like to put some thoughts into this. Can the physics engine be throttled? Can objects undergoing negligible change be ignored for short times? Can priority be assigned and cycles freed up? How can the game scale better?\u003C/p\u003E\u003Cp\u003EAgain, I disclaim that I don\u0027t know Unity. And beyond a hobby-gamer\u0027s knowledge, I don\u0027t plane to get to know unity. But I will give my thoughts.\u003C/p\u003E\u003Cp\u003EMy thoughts on potential ways to solve problems that are more scale friendly:\u003C/p\u003E\u003Cp\u003E1: \u0027Warp Bubble\u0027. \u003C/p\u003E\u003Cp\u003EKrakensbane scales poorly because it takes the rest of the scene and moves it around the ship. Which is fine when the scenes are still mostly empty voids, but terrible if you want to take it further. It does its job to keep the ship in the middle of the scene so that values are kept safely low. However, the more you add to the scene, the more load you put on this one task. Why not instead of placing the ship at the center of the scene and moving everything else around it, place the ship into a nested \u0027scene within the scene\u0027, like a warp bubble. The ship itself has a meta identity independent of its parts. Define an area around the vessel\u0027s geometry as a fixed space it orients and rotates in, and then place that bubble into the universe as an object. The ship maintains position 0,0 inside this bubble and all physics work as normal. Meanwhile, the bubble itself moves about without having to pick up and move the universe except when hitting harder boundaries. (Like when the deep space krakensbane needs to be applied.) Reducing the number of constant events that needs to take place. In a way, it\u0027s like a warp bubble.\u003C/p\u003E\u003Cp\u003E 2: Single-object physics consolidation. Dynamic switch to \u0027simulated-single-part\u0027.\u003C/p\u003E\u003Cp\u003EEvery part on an active vessel is given a physics pass. This scales so poorly that its generated a mod to help... If you like to stop the game and start it back up every five minutes. But does every part in a vessel need to constantly have physics passes on it in a zero-G freefall environment? I\u0027d suggest a mechanic of some kind that takes a look at a part set, and every Nth pass, decides \u0027do I see non-negligable changes in forces between the connected parts?\u0027 And if the answer is \u0027no\u0027, gather up the parts, consolidate the sum of all their force values into one unit, and apply it universally for the vessel until it encounters some kind of non-universal change.\u003C/p\u003E\u003Cp\u003EBase example of this: A space station in high orbit. The code would make a pass through its values for each part and determine nothing is changing enough to warrant bothering with making constant physics passes on everything, then pack them all away and just perform calculations of forces acting on it as a single point at its center of mass. A mode it only breaks out of when it encounters a player input (if it\u0027s the active), or an external force. (such as a collision) At which point it goes \u0027okay, not expected\u0027, and pulls all part values out, identifies what forces went where in the normal all-parts physics model, and goes about business as usual until things settle down again.\u003C/p\u003E\u003Cp\u003E3: Kraken Schmidt!\u003C/p\u003E\u003Cp\u003EAnd of course, one last thing that might be easier to tweak in the short term. Does krakensbane need to run on EVERY physics pass? IoW: Does the universal SETPOS command need to be run hundreds of times a second? Coming from an electronics engineering background, this is like having an industrial control system that is tasked with reading a sensor for a fluid level in a tank, and switching pumps on and off to keep the level steady. If the system operates directly with the sensor to trip the pump, then when the fluid goes level with the sensor, the small ripples and slight shifts in level are going to cause it to trip on and off as fast as the clock cycle can let the readings pass, causing the controller to trip the pump switches on and off at clock speed... This would burn out the pumps and consumes enormous amounts of processing power. So the configuration often used is our good friend the Schmidt Trigger. Where only after going above a certain limit do the pumps trip and stay on until lower threshold is passed. This is known as the \u0027dead zone\u0027.\u003C/p\u003E\u003Cp\u003EIf the velocity threshold for Krakensbane is 750 m/s, and then it zeroes the ship velocity in the scene and begins simulating by moving everything else. Then instead of running a setpos command every cycle from this point onwards, the ship should be allowed to move a limited distance and increase velocity a fixed amount again before the next \u0027step\u0027 occurs. Which would effectively spread the movements of the universe around the ship out a little easing the cycle usage up substantially.\u003C/p\u003E\u003Cp\u003EThose are my thoughts. Make of them what you can or will. If they\u0027re of no use, *shrug* that\u0027s fine. If they are of use, cool.\u003C/p\u003E\n"},{"CreatedByName":"Javster","CreatedById":74613,"CreatedDateTime":"2014-07-06T22:14:51Z","Content":"\n\u003Cp\u003EWhat is krakensbane? I still don\u0027t quite get it.\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2014-07-06T22:39:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Javster\u0022 data-cite=\u0022Javster\u0022\u003E\u003Cdiv\u003EWhat is krakensbane? I still don\u0027t quite get it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s the technique used to tame the deep space Kraken. Before it was implemented, all coordinates in KSP were given in reference from the body a ship was orbiting; this was sufficient when tooling around in Kerbin\u0027s SOI but when orbiting Kerbol there wasn\u0027t enough precision in such long distances, so parts would flutter and the ship would shake apart.\u003C/p\u003E\u003Cp\u003EThe krakensbane solution was to make the ship the origin of the coordinate system, so the distances to the parts of the ship had sufficient precision, even in deep space, to avoid kraken effects. The tradeoff is that the orbital calculations become more difficult to implement and debug (the center of the SOI is the simplest origin, calculation-wise).\u003C/p\u003E\u003Cp\u003EAs for the OP\u0027s suggestions, it\u0027s too bad that it doesn\u0027t seem to be getting much response. I don\u0027t really have the programming background to give it much useful feedback but it seems reasonable from my layman\u0027s perspective. Hopefully some of the programmer types around here can provide some more useful comments.\u003C/p\u003E\n"},{"CreatedByName":"Sky_walker","CreatedById":113214,"CreatedDateTime":"2014-07-07T06:33:33Z","Content":"\n\u003Cp\u003EThey didn\u0027t implement a Schmidt Trigger on the physics engine? O_o And I always thought that full calculations on every object in the frame are only done for a demonstration purpose while you always optimize stuff for a release-worthy version.... oh foolish me.\u003C/p\u003E\u003Cp\u003ENo, seriously though: if the physics pass is done on every object all the time then it qualifies as an obvious bug, cause someone screwed big time.\u003C/p\u003E\n"},{"CreatedByName":"Ruedii","CreatedById":57704,"CreatedDateTime":"2014-07-07T06:33:39Z","Content":"\n\u003Cp\u003EObject consolidation would greately reduce the kracken, but on most physics engines, nesting the point of origin would actually increase the kracken not decrease it, by creating two rounding errors instead of one, even if those two rounding errors are smaller.\u003C/p\u003E\u003Cp\u003EHowever, when you have two ships in the physics, treating them as separate physics layers until they are close enough to colide, would in fact reduce the kracken.\u003C/p\u003E\n"},{"CreatedByName":"Sky_walker","CreatedById":113214,"CreatedDateTime":"2014-07-07T06:34:21Z","Content":"\n\u003Cp\u003EBTW: well done investigating Tigerclaw \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Ruedii","CreatedById":57704,"CreatedDateTime":"2014-07-07T06:36:02Z","Content":"\n\u003Cp\u003EAs an additional note, \u0022binding\u0022 objects to each other unless the forces between them exceed a certain point would also improve the performance and reduce the kracken.\u003C/p\u003E\n"},{"CreatedByName":"Vindelle_Sunveam","CreatedById":70755,"CreatedDateTime":"2014-07-07T08:10:43Z","Content":"\n\u003Cp\u003ETHat is an excellent report. I am not the programmer and understood all of what you were going for (or at least, I feel I did). I hope this gets more attention.\u003C/p\u003E\n"},{"CreatedByName":"Vaporo","CreatedById":110800,"CreatedDateTime":"2014-07-07T12:05:47Z","Content":"\n\u003Cp\u003E1. In principle, this works great. However, this sounds like it would also cause a whole new set of bugs that need worked around. And collisions could be difficult to handle as well, as each vessel would have its own \u0022warp bubble.\u0022 Of course, you could create a single, master warp bubble for vessels that come close enough together, but planetary collisions still may be a problem.\u003C/p\u003E\u003Cp\u003E2. Good idea, but maybe it would be better to implement \u0022fake\u0022 not cpu-intensive physics for objects that have low movement, or apply a movement damper to low-force craft before putting them on rails. That way it doesn\u0027t end up causing very long structures that are being slightly bent, but still considered low-force, from magically being straightened at though you suddenly went into time warp. There are dozens of ways to get around that problem.\u003C/p\u003E\u003Cp\u003E3. Really? I thought this was already implemented. I thought that Krakensbane was only applied every couple of seconds, and that\u0027s why we have bits of smoke that suddenly appear in front of craft while in the atmosphere: Krakensbane is moving the origin, which in turn caused the smoke to move. Still, you\u0027re the programmer. Maybe, instead of being on a timer, Krakensbane only applies every time the craft move a thousand kilometers, per se, from the previous origin.\u003C/p\u003E\n"},{"CreatedByName":"AdmiralTigerclaw","CreatedById":92104,"CreatedDateTime":"2014-07-07T14:10:46Z","Content":"\n\u003Cp\u003ELike I said, I don\u0027t know the unity engine. And I took a look at the blog, not any code. The blog explicitly stated in words \u0027every physics pass\u0027 and that immediately set up a red-flag for me when I was trying to hunt down and fix my mod problem. Once I tested the removal of the Kerbin Side mod (which was giving me more land bases), I gained massive improvement. I\u0027d already ruled out various visual enhancements and rendering upgrades, and the only thing that mod does is add static objects and launch spawn-points. Most of these aren\u0027t rendering during the slowdown and none of the static objects have physics running on them (beyond whatever statics get). They\u0027re just... There.\u003C/p\u003E\u003Cp\u003EI did a further test by removing Kerbin Side and going down to just base level Kerbtown to see if it was simply mod code. (I know Squad is not going to bother trying to troubleshoot or provide dead-end fixes for what could turn out to be faulty mod code). My results were that it ran smooth with kerbtown installed and still runs smooth with Kerbin City. However, Kerbin City is only two huge objects. Kerbin Side deployed a few dozen as the author of the mod distributed his base objects like one would the terrain objects of a FPS. (Individually) \u003C/p\u003E\u003Cp\u003ESo the testing came literally down to object count. Not geometry for renders, or any special code, or size, or anything. Just, the count.\u003C/p\u003E\u003Cp\u003EGiven the current status of KSP, I\u0027m not surprised about the Krakensbane doesn\u0027t scale well. With only two bases on stock Kerbin, there\u0027s no way to really stress-test how demanding the Krakensbane code would be. But I\u0027d like to think in my own head that such a finding is invaluable so they can start coming up with a new, better way to fix that issue. Right now I believe they\u0027re still working on the scope of the game, but at some point the scale/scalability will need improvement. And that means finding ways to cheat on the physics engine while making it still look like it\u0027s working in full. Krakensbane does that, but it does it in a messy manner.\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2014-07-07T14:25:22Z","Content":"\n\u003Cp\u003EIf I recall correctly, Harvester gave a talk about the solution at GDC or some similar conference. In explaining the details he mentioned that the origin shifts in steps, not continuously, such that the shift only occurs when you come near to the edge of the envelope of accuracy around the vessel, not every frame.\u003C/p\u003E\n"},{"CreatedByName":"AdmiralTigerclaw","CreatedById":92104,"CreatedDateTime":"2014-07-07T14:40:01Z","Content":"\n\u003Cp\u003EI dunno... Emphasis bold.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Harvester\u0022 data-cite=\u0022Harvester\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EKrakensbane is the same thing, only for velocities, instead of positions. If the vessel\u0027s velocity exceeds a max limit, Krakensbane zeroes out the vessel velocity, and \u0022absorbs\u0022 it. Then, \u003Cstrong\u003Eon every physics update, it moves the entire universe back\u003C/strong\u003E, at the velocity it absorbed from the vessel. The end result is that after a certain speed is exceeded, the vessel becomes stationary, and the universe starts speeding in the opposite direction. This universal velocity is stored in a double-precision vector, which uses 64-bit values, so it\u0027s perfectly accurate up to insanely high values (way past c).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThen again, that IS old. \u003C/p\u003E\u003Cp\u003EBut there ARE two types of anti-kraken code though. He may have been mentioning the deep space kraken code at the conference. That code would be much easier to increment in steps, while this code doesn\u0027t seem like it has such a clean stepping solution. See, the krakensbane code here is being used to zero velocity so parts don\u0027t end up with varying velocity levels that tear themselves apart when rounding errors come through.\u003C/p\u003E\u003Cp\u003EOnce you zero the velocity and apply it to the rest of the universe, you have to move the rest of the universe on every update. Even if you only added increments of the velocity at every speed interval. Because even in steps, the universe has to keep moving in sync with realtime, or Bad Things happen.\u003C/p\u003E\u003Cp\u003EThat is to say, you zero your velocity 750 m/s and add it to the universe, the universe now moves at 750 m/s the other way. You add 500 m/s to the velocity of your vessel, the universe is STILL moving at 750 m/s one way while you move the other at 500 for the cumulative 1250. Either way, the universe has to be updated frame-by-frame. I don\u0027t see how steps could make it work without causing it to jitter by taking \u0027big\u0027 steps.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-07T14:49:55Z\u0022 title=\u002207/07/2014 02:49  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 7, 2014\u003C/time\u003E by AdmiralTigerclaw\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-07-08T00:03:51Z","Content":"\n\u003Cp\u003EI think that one mainly works because everything not the focused craft is pretty much on-rails unless it\u0027s really close to you. It\u0027s just changing numbers, and the planets are so damn huge and the distances so vast that a bit of jitter here and there is likely unnoticeable, if it occurs at all.\u003C/p\u003E\n"},{"CreatedByName":"GusTurbo","CreatedById":57552,"CreatedDateTime":"2014-07-08T02:20:24Z","Content":"\n\u003Cp\u003EThis is all very well thought out. I\u0027d be curious to hear a dev response.\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-07-08T03:15:33Z","Content":"\n\u003Cp\u003EYou\u0027ll probably be waiting until after the release of 0.24 before this receives any dev attention. Even then, it\u0027s not a given that they\u0027ll respond.\u003C/p\u003E\n"}]}