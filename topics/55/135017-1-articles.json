{"TopicId":135017,"ForumId":55,"TopicTitle":"DISCUSSION: PhysX thread splitting","CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2016-03-26T21:10:59Z","PageNum":1,"Articles":[{"CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2016-03-26T21:10:59Z","Content":"\n\u003Cp\u003E\nAll right, so many of us have watched \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/134970-squadcast-summary-20160324-11-hype-edition/\u0022\u003Ethe 2015/3/24 Squadcast\u003C/a\u003E and seen what the current state of the game is re: multithreaded PhysX.\n\u003C/p\u003E\n\u003Cp\u003E\nAs is known, Unity 5\u0027s PhysX 3 implementation allows for multiple physics threads. The discussions happening on this board for the past several months have been about whether there was a possibility that single vessels could be spread across threads, and the general consensus was that no, they could not. The squadcast pretty much confirmed this; single vessels are indeed individual threads, and new threads are spawned when vessels undergo separation in the flight scene.\n\u003C/p\u003E\n\u003Cp\u003E\nIt also showed a major problem with this: complete game freeze while the (new) threads are prepared. On KasperVld\u0027s not-junk gaming laptop a 650-ish vessel was split into a rocket and launch tower, and took 45 seconds to prepare and spawn the new threads. Another significant freeze of 15 seconds was also encountered on booster separation. Further staging events (what I would call \u0022reasonable\u0022 part counts) showed no noticeable freezes.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, the vessel being shown is pretty excessive, and Kasp is on a laptop. But his laptop \u003Cem\u003Eis\u003C/em\u003E a powerful gaming laptop, and even small freezes during gameplay are quite immersion-breaking. Especially on less-powerful older systems that many of us may have. So - we who are not the developers, how do we think they should approach fixing this, and how \u003Cem\u003Ecan\u003C/em\u003E they?\n\u003C/p\u003E\n\u003Cp\u003E\nI have three different thoughts on the matter, but I\u0027m not really knowledgeable about multithreading, or about Unity/PhysX thread handling in particular. But here goes:\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\n\u003Cstrong\u003ECode cleanup.\u003C/strong\u003E \u003Cem\u003EDon\u0027t worry guys, it\u0027ll get better. Just wait.\u003C/em\u003E It could be simply that the current state is running in a non-optimized manner for pre-release, and small things will be done to speed up this simulation step. I don\u0027t have high hopes for this, at least for the 1.1 release; after all, they\u0027ve been workng on the Unity 5 port for nearly a year, and I\u0027d expect low-hanging fruit to be picked by now. But one can always hope.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EDelay thread splitting.\u003C/strong\u003E \u003Cem\u003EI\u0027m sorry PhysX, I\u0027m kinda busy right now.\u003C/em\u003E Vessels are running just fine on a single thread prior to a staging event, and from experience, we know that KSP vessels run just fine on a single thread \u003Cem\u003Eafter\u003C/em\u003E staging events, too. It may be possible to prevent PhysX from splitting the objects into separate threads immediately and wait until we have more time to let it happen. Figuring out when that good time is, however, is another problem. But once vessels are in space and no longer thrusting or under atmospheric forces things are much less time-sensitive and we can better afford to be inconvenienced by this.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EPre-stage threads for separated vessels.\u003C/strong\u003E \u003Cem\u003EI can see the future. Trust me.\u003C/em\u003E The problem with trying to split a single vessel across threads is that information has to be shared in two directions between threads, which is slow and cumbersome. Also, if a vessel can break up in an arbitrary manner, there is no way to predict the best way to split the parts up. However, we have an ace up our sleeve here - \u003Cem\u003Ethe staging list is well-defined.\u003C/em\u003E We \u003Cem\u003Eknow\u003C/em\u003E which parts will go to which threads beforehand. It may be possible to prepare these threads while the stage prior is active, and only have to copy the state of the appropriate part nodes to them rather than having to stop and wait while the new threads are created from scratch. We don\u0027t need to worry about two-way communication for this; the child threads are strictly slaves to the previous stage thread. Ideally we only have to do this for the next staging event if these threads can be created in the background.\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nNow, as I stated before, I know very little about multithreading besides what\u0027s been discussed on this forum, and next to nothing about PhysX, so what I\u0027m suggesting may be completely impossible. It\u0027s also possible that some of this is already happening and the process is just that slow. But I\u0027d sure like to hear the thoughts of those of you more knowledgeable than me! Because while the vessels I saw in the Squadcast are excessively large and complex, the freezes are a little scary. And if there\u0027s anything that can be done to mitigate that, even if it\u0027s a little more processor intensive, it would make me very happy.\n\u003C/p\u003E\n\u003Cp\u003E\nTL;DR: Staging can freeze the game. Can it be fixed? I\u0027d rather have a slowdown than a freeze.\n\u003C/p\u003E\n"},{"CreatedByName":"luinux","CreatedById":81325,"CreatedDateTime":"2016-03-26T21:26:11Z","Content":"\n\u003Cp\u003E\nEven worse: what would happen to a 600-ish parts rocket during an \u0022unexpected disassembly\u0022? If it splits in, say, 20 big chunks, do that means launching 20 threads in less than an in-game second? Threads share memory, but it seems Unity is copying all of that everytime it spawns a thread, maybe there is some way to reduce the amount of memory a PhysX thread is using?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Temeter","CreatedById":58056,"CreatedDateTime":"2016-03-26T21:30:22Z","Content":"\n\u003Cp\u003E\nBtw, the lag hickup probably was an issue with importing files from 1.0. Rich (on stream) explained that this was caused for him by using the stockfix symmetry mod when he build the craft in 105. So when he loaded it in 110, some radial parts were multiplied; where he had 6 clamps before, the game suddenly had to deal with 36 clamps, etc. Would also explain the explosions during launch.\n\u003C/p\u003E\n\u003Cp\u003E\nI didn\u0027t see those lag issues on other crafts on KSPTV yet, although there wasn\u0027t too much superlarge decoupling. In any case, a 260 part proton-like could decouple without the slightest amount of lag.\n\u003C/p\u003E\n\u003Cp\u003E\nSo most likely everything is fine. Don\u0027t think we can really help the devs anyway, aside maybe from reporting bugs in the later prerelease, but nice idea in any way!\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-03-26T21:32:02Z\u0022 title=\u002203/26/2016 09:32  PM\u0022 data-short=\u00228 yr\u0022\u003EMarch 26, 2016\u003C/time\u003E by Temeter\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NoMrBond","CreatedById":69263,"CreatedDateTime":"2016-03-26T21:35:32Z","Content":"\n\u003Cp\u003E\nIt\u0027s almost certainly a bug, PhysX3.3 should be more than an order of magnitude faster at physics setup than PhysX2.8 was.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m sure it\u0027ll get ironed out once people get back from Easter\n\u003C/p\u003E\n"}]}