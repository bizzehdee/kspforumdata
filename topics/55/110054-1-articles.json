{"TopicId":110054,"ForumId":55,"TopicTitle":"KSP user interface design choices.","CreatedByName":"Galane","CreatedById":77949,"CreatedDateTime":"2015-05-20T03:12:26Z","PageNum":1,"Articles":[{"CreatedByName":"Galane","CreatedById":77949,"CreatedDateTime":"2015-05-20T03:12:26Z","Content":"Is it Unity or just KSP that is using what looks like a \u0022radio button\u0022 for checkboxes?\n\nIt\u0027s a decades long tradition in GUIs to have round spots with a dot, only one of which in a group may be selected. They\u0027re called \u0022radio buttons\u0022 after the old car radio preset buttons where when you pushed in one to change to the station it\u0027s set to, any other button that was pushed in pops out.\n\nCheckboxes are square or square-ish and use either an X or check-mark to denote they\u0027ve been selected, and any or all of them in a group may be selected.\n\nHowever, some programmers have at various times figured out how to use radio buttons like check boxes and check boxes like radio buttons, either by hacking the programming environment they\u0027re using, or simply ignoring the instructions, or by using custom graphics to subvert the design convention that \\*everyone knows how to use\\*. Even worse is when a program makes no visual distinction between radio buttons and checkboxes, or uses a singular radio button which when selected cannot be \\*unselected\\* except by exiting or canceling the dialog box. If there\u0027s only \\*one\\* on/off choice use a checkbox. The Ascent Path Editor is using a checkbox, though graphically distorted into a sort of mashup of a checkbox and radio button.\n\nWhy go to so much extra effort to confuse people about how the user interface for your software works? The base concept of the GUI was to have \\*common\\* functions across various programs look and function the same, the goal being to make it easier to learn multiple programs because once a user learns the UI functions, those things are already known for any new program. Unless the program authors think they have a \u0027better way\u0027 and decide to not follow the convention.\n\nAn excellent resource on UI design is this older copy of Apple\u0027s Human Interface Guidelines (from before they decided to toss it all with the horrible UI of Quicktime, followed by other screwups in early OS X versions).\n\n[http://interface.free.fr/Archives/Apple_HIGuidelines.pdf](http://interface.free.fr/Archives/Apple_HIGuidelines.pdf)\n\nAnother common problem in KSP is buttons that toggle a state yet do not indicate the state. One example is Control From Here. Click that all you want, you get \\*no indication\\* that it has actually done anything - unless the orientation of the control part you have changed to is different from the one changed from AND if you have the navball visible. The navball rotation will change. What should happen is the Control From Here buttons should toggle, staying depressed on the part that has control - or an indicator next to the button should appear. Anything to show on the right click menu that a part does or does not have control without having to click the button to be certain the part you want to have control actually does."},{"CreatedByName":"regex","CreatedById":70807,"CreatedDateTime":"2015-05-20T03:37:09Z","Content":"Unity not us.\n\nAs far as I know, that is. My experience with the GUI would lead me to believe it is very simple and doesn\u0027t have a dedicated checkbox widget, the radio button is overloaded."},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-20T03:45:57Z","Content":"\u003E \n\u003E An excellent resource on UI design is this older copy of Apple\u0027s Human Interface Guidelines (from before they decided to toss it all with the horrible UI of Quicktime, followed by other screwups in early OS X versions).\n\u003E [http://interface.free.fr/Archives/Apple_HIGuidelines.pdf](http://interface.free.fr/Archives/Apple_HIGuidelines.pdf)\n\nApple used to be one of the best for it. In recent years, they have fallen considerably, and are now making some terrible mistakes, like removing the page title from the web browser by default, hiding the page URL by default, and when you turn either of them back on it\u0027s in a way that you can\u0027t see more than a fraction of the full title or URL. It\u0027s so that there\u0027s more space on screen for content, or something, but being done on the Mac platform which ships with some of the physically largest and highest res screens in the industry! Some blithering idiot inside Apple took the decision that because they want to have a more unified feel between the iPhone, iPad, and iMac, Safari on the Mac had to be crippled in breathtakingly stupid ways, completely missing the point that a huge proportion of customers on the Mac platform are what they would call \u0022Pro\u0022 users, who want the full information, not some dumbed down tablet app on a big screen.\n\nOn topic, officially confirmed by Squad in the dev notes is that the current UI will be completely gone with the next release, if all goes to plan. Unity 5 is forcing them to redo the UI."},{"CreatedByName":"basic.syntax","CreatedById":109920,"CreatedDateTime":"2015-05-20T03:54:18Z","Content":"\u003E \n\u003E a huge proportion of customers on the Mac ***Windows 8*** platform are what they would call \u0022Pro\u0022 users, who want the full information, not some dumbed down tablet app on a big screen.\n\nFixed, lol. Windows touch-centric Start Screen, leaving behind the higher information density Start Menu design. Everybody\u0027s trying to shield users from detail and complexity these days."},{"CreatedByName":"Tw1","CreatedById":59717,"CreatedDateTime":"2015-05-20T04:26:45Z","Content":"\u003E Another common problem in KSP is buttons that toggle a state yet do not indicate the state. One example is Control From Here. Click that all you want, you get \\*no indication\\* that it has actually done anything - unless the orientation of the control part you have changed to is different from the one changed from AND if you have the navball visible. The navball rotation will change. What should happen is the Control From Here buttons should toggle, staying depressed on the part that has control - or an indicator next to the button should appear. Anything to show on the right click menu that a part does or does not have control without having to click the button to be certain the part you want to have control actually does.\n\nThat\u0027s odd, I\u0027m sure I can recall some buttons in KSP that did do this...They\u0027d stay \u0027pressed\u0027 when active. Maybe they where part of a mod.\n\nThis is a good point though. Some other parts do show their state in the words next to the buttons. Perhaps the part you\u0027re controlling from could show \u0027active control point\u0027 next to the button."},{"CreatedByName":"sedativechunk","CreatedById":112761,"CreatedDateTime":"2015-05-20T04:46:14Z","Content":"OP,\n\nFirst of all, I am a web developer and often do UI interfaces. Thank you for posting that very interesting Apple Guidelines article, I have saved that PDF to my PC for future reading. Very interesting read on user interfaces. It looks dated but still practical for today. \n\nSecondly, I happen to be a Unity developer myself, well used to be anyway. At the time KSP came out, I may be mistaken, but the early versions of Unity did not have many \u0022assets\u0022 available for creating simple user interfaces, eg. checkboxes, radio buttons, and etc. These features were added on later as assets. If I\u0027m not mistaken, they significantly improved that area over the years.\n\nAlso, speaking as someone who has done tons of game programming in the past, creating UI\u0027s for video games is VERY complicated. At the core, you want to make a fun and exciting video game and make the gameplay most important. Often times when doing that, it is easy to skip or overlook the UI. In KSP\u0027s case, I feel this is probably what happened. They focused on gameplay more than interface, which is a good thing. The game does have a rather clunky interface and is difficult to understand for newcomers. M\n\nMaking UI features is complicated and time consuming, especially things like buttons. You have to literally program every aspect of it, the up and hover positions, a click position when clicked if wanted, attach sound effects, and then even have it scale appropriately when the screen is different sizes. They are a HUGE pain in the rear end to do correctly. One of the hardest things to create are health bars. Health bars are the absolute hardest to program. Resizing sprites/textures as health goes down. Personally I think one of the video games that has the best UI\u0027s out there is Diablo III. Yes, a commercial game, but I hugely compliment blizzard on the interface of that game. It is one of the best ever created IMO."},{"CreatedByName":"Galane","CreatedById":77949,"CreatedDateTime":"2015-05-20T05:18:08Z","Content":"That Apple document predates OS X, it also predates Quicktime 4, which heralded Apple\u0027s abandonment of much of the standard conventions and ease of use conventions they played a major part in defining.\n\nI\u0027ve used and worked on and fixed computers since 1983, so I\u0027ve experienced the full range from command line to various ANSI and graphical shells and the various Windows and Mac versions plus some others. In that time I\u0027ve run into a lot of flat out stupid and WTFH things. ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif) (My first hard drive was *five megabytes* and installing MS-DOS and all the software I had filled up half of it! Today I routinely work with single files larger than 5 meg.)\n\nA very common thing that time and effort get wasted on are custom dialog boxes, especially for opening and saving files. The operating system GUI should provide just about every common dialog box (that\u0027s why they\u0027re called common) any program will require - yet programmers persist in coding as if they\u0027re writing a DOS program that had to do \\*everything\\* with its own code.\n\nIronically, some of the worst at not using the built in stuff provided to make creating a program easier are Microsoft and Apple.\n\nAs for the \u0022Modern\u0022 Start Screen in Windows 8.x and the UI of current Windows Phone, it\u0027s a throwback to Windows 1.0. What\u0027s so similar? They both have non-overlapping tiles with active content. Win 8 has higher resolution and can display more colors and more tiles, but the overall UI has reverted to the square corners, flat and saturated colors and zero \u00223D\u0022 effect of Windows 1.0 through 3.0. The adverts for Windows phone show tiles with a heavy use of Cyan, White, Magenta and Black - the exact colors as the default palette of a CGA video card. Rotate a WinPhone 90 degrees clockwise so the bar up the right side is along the bottom and it\u0027s even more like Windows 1.0 with its command line across the bottom.\n\nThe only piece of design style not harking back to Win 1.0 are the square cornered buttons. Win 1.0 had round cornered buttons and a heavy outline line indicating which button Enter would activate - almost a pixel perfect copy from Macintosh. After the lawsuit, Windows had no round corners anywhere and the indicator line became a thin dotted one. We\u0027ve come a long way for Microsoft to copy the style of a GUI they made 30 years ago, that failed to set the computing world on fire. ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)\n\nI wonder how hard it\u0027d be to create a GUI for Windows 1.0 mimicking the style of Win 8.x\u0027s Modern screen, and have it run in a virtual machine with the ability to run in higher resolution with more colors? Call it Windows -21.9 (8.1 minus 30)\n\n**Edited \u003Ctime datetime=\u00222015-05-20T05:34:49Z\u0022 title=\u002205/20/2015 05:34  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 20, 2015\u003C/time\u003E by Galane**"},{"CreatedByName":"sal_vager","CreatedById":16426,"CreatedDateTime":"2015-05-20T08:22:05Z","Content":"Radio buttons do seem common, though they may not always be called that, for example the [**Godot engine**](http://www.godotengine.org/wp/) has one node called ButtonGroup that only allows one child button to be in a pressed state.\n\n\u0022Yay, a radio button\u0022 you might say, but sedativechunk is right, everything has to be set including the unpressed state otherwise even when not pressed, the button won\u0027t turn off whatever it activated, so just having that \u0022radio button\u0022 ability is not enough on its own."},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-05-20T13:43:28Z","Content":"\u003E \n\u003E That\u0027s odd, I\u0027m sure I can recall some buttons in KSP that did do this...They\u0027d stay \u0027pressed\u0027 when active. Maybe they where part of a mod.\n\u003E This is a good point though. Some other parts do show their state in the words next to the buttons. Perhaps the part you\u0027re controlling from could show \u0027active control point\u0027 next to the button.\n\nYou are partially correct. If the value a button in the right-click part menu is attached to a true/false value, then it does stay pressed in when activated.\n\nHowever, the Control From Here button is attached to a script that runs every time you click it, therefore it is always \u0022not-pressed\u0022 no matter what else happens.\n\nD."}]}