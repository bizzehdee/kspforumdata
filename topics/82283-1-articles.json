{"TopicId":82283,"ForumId":29,"TopicTitle":"Get the value of a KSPField without knowing the object\u0026#039;s name in the .cs file.","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-21T04:03:23Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-21T04:03:23Z","Content":"\n\u003Cp\u003ELet\u0027s say I know that I know these givens:\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EGIVENS:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Ep\u003C/strong\u003E is a Part instance.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Emod\u003C/strong\u003E is a PartModule instance that is on that part.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u0022My Field A\u0022\u003C/strong\u003E is the \u003Cem\u003EguiName\u003C/em\u003E of a KSPField that the user can see in the rightclick menu for that part, and we know that \u0022My Field A\u0022 came from the module \u003Cstrong\u003Emod\u003C/strong\u003E (as opposed to from some other module that might be on part \u003Cstrong\u003Ep\u003C/strong\u003E).\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003ERETRIEVE:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EThe value of the public member variable inside this \u003Cstrong\u003Emod\u003C/strong\u003E that the KSPField called \u0022My Field A\u0022 is actually attached to, assuming I cannot actually view the Csharp source file for the PartModule and I only know what I would know as an end-user - which is the guiName that appears on the rightclick menu for the part. I do NOT know (ahead of time) the actual member variable the KSPfield attribute is attached to.\u003C/p\u003E\u003Cp\u003EThe only solution I\u0027ve seen looks *massively* slow - which is to perform the search backward, looking through *every single* member variable in the part module, to find which one happens to have a KSPfield attribute on it that fits the criteria given. There doesn\u0027t seem to be a way to go the other way around and find the KSPField first from PartModule.Fields, and then walk from there to the variable in question.\u003C/p\u003E\u003Cp\u003EThere is the method PartModule.GetValue(string fieldName), but I strongly fear that the fieldName in question is NOT the guiName, but is the csharp variable name.\u003C/p\u003E\u003Cp\u003EWHY?\u003C/p\u003E\u003Cp\u003EBecause I\u0027m trying to implement a feature for kOS where the intended audience includes people who aren\u0027t reading the Csharp code, but are reading the user-visible right-click menu. I want to give them the ability to query KSPfields of arbitrary modules, without them having to know anything they can\u0027t learn from the user experience (and thus why I want to use the guiName, not the csharp name for the variable.)\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-08-21T14:15:02Z","Content":"\n\u003Cp\u003EOkay, I have not done this with Fields, but it works for actions so does this work if you swap them out?\u003C/p\u003E\u003Cp\u003EI use this to pull all actions on a part\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EList\u0026lt;BaseAction\u0026gt; AllActions = new List\u0026lt;BaseAction\u0026gt;();\u003Cbr\u003EAllActions.AddRange(p.Actions);\u003Cbr\u003Eforeach(PartModule pm in p.modules)\u003Cbr\u003E{\u003Cbr\u003EAllActions.AddRange(pm.Actions);\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI also know there is a Fields list, can you use similar code to pull a list of all KSPfields that you could then query the guiName of? I\u0027m assuming Fields have a similar class just like Actions have the BaseAction class for this to work.\u003C/p\u003E\u003Cp\u003EI will state that partModule.GetValue is used to return the value of the field when you pass it the csharp variable name.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-21T14:24:18Z\u0022 title=\u002208/21/2014 02:24  PM\u0022 data-short=\u00229 yr\u0022\u003EAugust 21, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-21T19:21:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI also know there is a Fields list, can you use similar code to pull a list of all KSPfields that you could then query the guiName of? I\u0027m assuming Fields have a similar class just like Actions have the BaseAction class for this to work.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESadly, PartModule.Fields is a list of KSPFields, which are Csharp Attributes, and as far as I can tell there is no way in Csharp to go from an Attribute TO the member variable is attached to. Only the opposite direction is supported - you can get the Attributes of a variable, but not the variable of an attribute.\u003C/p\u003E\n"},{"CreatedByName":"The_Duck","CreatedById":1156,"CreatedDateTime":"2014-08-21T22:01:48Z","Content":"\n\u003Cp\u003EPartModule.Fields is not a list of KSPFields, it\u0027s a list of BaseFields. BaseField has a GetValue() function which probably does what you want. I\u0027d guess something like this would work:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EBaseField field = null;\u003Cbr\u003Eforeach(BaseField f in mod.Fields) {\u003Cbr\u003E    if(f.guiName == \u0022My Field A\u0022) {\u003Cbr\u003E        field = f;\u003Cbr\u003E        break;\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eif(field != null) Debug.Log(\u0022value of the field is \u0022 \u002B f.GetValue(mod));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-22T00:37:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The_Duck\u0022 data-cite=\u0022The_Duck\u0022\u003E\u003Cdiv\u003EPartModule.Fields is not a list of KSPFields, it\u0027s a list of BaseFields. BaseField has a GetValue() function which probably does what you want. I\u0027d guess something like this would work:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EBaseField field = null;\u003Cbr\u003Eforeach(BaseField f in mod.Fields) {\u003Cbr\u003E    if(f.guiName == \u0022My Field A\u0022) {\u003Cbr\u003E        field = f;\u003Cbr\u003E        break;\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eif(field != null) Debug.Log(\u0022value of the field is \u0022 \u002B f.GetValue(mod));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh that does work. I was looking at BaseFields \u003Cem\u003E(plural)\u003C/em\u003E . GetValue(string), which takes the variable\u0027s name, not the KSPField\u0027s guiName as its argument so it\u0027s not useful to me.\u003C/p\u003E\u003Cp\u003EIt\u0027s still *basically* the same problem though. I\u0027m walking the list to get to the thing, so I\u0027ll still probably want to cache the mapping once I find it the first time. It looks like an expensive operation to be re-doing each time someone accesses PART:MOD:FIELDNAME in the kOS code.\u003C/p\u003E\u003Cp\u003EEdit: Thanks for the suggestion. It does work and it makes the code easier to read. (I had been doing essentially the same thing but more low-level, doing all the reflection calls myself. Given the messy stuff I had to do when I did that, I fear the BaseField.GetValue() might be doing the same expensive operations - walking the list of all member variables via reflection until it finds the one which has the Attribute \u0027f\u0027 on it.)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-22T01:04:27Z\u0022 title=\u002208/22/2014 01:04  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 22, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The_Duck","CreatedById":1156,"CreatedDateTime":"2014-08-22T00:55:15Z","Content":"\n\u003Cp\u003EYou can cache the reference to the BaseField if you want. But I doubt this is going to be a bottleneck.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-22T04:38:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The_Duck\u0022 data-cite=\u0022The_Duck\u0022\u003E\u003Cdiv\u003EYou can cache the reference to the BaseField if you want. But I doubt this is going to be a bottleneck.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s not where I\u0027m envisioning a bottleneck. I\u0027m envisioning one secretly hidden inside BaseField.GetValue().\u003C/p\u003E\u003Cp\u003EIt\u0027s the mapping from guiName down to member variable that I\u0027d want to cache, not the mapping from guiName down to BaseField.\u003C/p\u003E\u003Cp\u003EIn general, the act of going from Attribute to member variable is slow if you try to do it in your own reflection code, as you have to walk all the members to find the one that has the Attribute. Unless SQUAD themselves have done the caching I\u0027m referring to internally inside BaseField (and they might have) they\u0027d have the same problem. If only disassembly of the API wasn\u0027t expressly forbidden. Then I could find out the answer.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-08-22T04:43:26Z\u0022 title=\u002208/22/2014 04:43  AM\u0022 data-short=\u00229 yr\u0022\u003EAugust 22, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The_Duck","CreatedById":1156,"CreatedDateTime":"2014-08-22T19:00:16Z","Content":"\n\u003Cp\u003EAlmost certainly BaseField stores a reference to the FieldInfo for the field in question, and BaseField.GetValue() just calls FieldInfo.GetValue(). Presumably the list of BaseFields is created at startup by walking through the member variables looking for the [KSPField] attribute, and as each BaseField is created it is given the reference to the FieldInfo.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-08-23T07:30:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The_Duck\u0022 data-cite=\u0022The_Duck\u0022\u003E\u003Cdiv\u003EAlmost certainly BaseField stores a reference to the FieldInfo for the field in question, and BaseField.GetValue() just calls FieldInfo.GetValue(). \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s impossible to know without doing the illegal, and disassembling the DLL to look at what the code for BaseField.GetValue() actually does. Maybe the class walked the member variables to find the reference just once up front and then stored it to use on each call to BaseField.GetValue(), or maybe it\u0027s walking the members to find it on the fly each time. You can\u0027t tell whether SQUAD felt the need to perform that optimization or not - it depends on whether they call BaseField.GetValue() lots and lots of times in loops in their own code. I know that the way *I* want to use it that\u0027s what I\u0027d do, but I can\u0027t tell if they had the same use case and thus the same need for that optimization.\u003C/p\u003E\n"}]}