{"TopicId":76786,"ForumId":29,"TopicTitle":"KSPAddon - publishing values","CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T01:54:39Z","PageNum":1,"Articles":[{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T01:54:39Z","Content":"\n\u003Cp\u003EPlugging along on my plugin, I\u0027ve run into another problem that I\u0027ve not been able to find a good answer to. How do I get a value from a MonoBehaviour class down into a partmodule?\u003C/p\u003E\u003Cp\u003EBasically, I\u0027d like to have a single instance of a monobehaviour class managing the behavior of the various instances of my partmodule class. I\u0027m attempting to do this by having the single manager (monobehaviour) class keep a state table of what each partmodule class should be doing.\u003C/p\u003E\u003Cp\u003EHowever, I haven\u0027t been able to figure out how to have the partmodules access the monobehaviour classes object to read the state table, and figure out what they should be doing. Is there a simple way to do this?\u003C/p\u003E\u003Cp\u003ETo put it in context:\u003C/p\u003E\u003Cp\u003ETo simplify, say I have a PartModule class:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class AutoGimbal : PartModule\u003Cbr\u003E{\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        print(AutoGimbalManager.rotationTarget);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd a Monobehaviour class:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EveryScene, false)]\u003Cbr\u003Epublic class AutoGimbalManager : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public string rotationTarget = \u0022Mun\u0022;\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHow do I get the AutoGimbalManager object in the PartModule?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-06T02:55:17Z","Content":"\n\u003Cp\u003EThere are two easy ways. The first one is a static property:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class AutoGimbal : PartModule\u003Cbr\u003E{\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        Log.Debug(\u0022target = \u0022 \u002B AutoGimbalManager.instance.rotationTarget);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.EveryScene, false)]\u003Cbr\u003Epublic class AutoGimbalManager : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public string rotationTarget = \u0022Mun\u0022;\u003Cbr\u003E\u003Cbr\u003E    void Start()\u003Cbr\u003E    {\u003Cbr\u003E        instance = this;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public static AutoGimbalManager instance\u003Cbr\u003E    {\u003Cbr\u003E        get;\u003Cbr\u003E        private set;\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe other way is to go looking for the right type directly. It\u0027s straightforward but you don\u0027t want to go looking through the entire scene every frame, so caching the result is important:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class AutoGimbal : PartModule\u003Cbr\u003E{\u003Cbr\u003E    AutoGimbalManager manager;\u003Cbr\u003E\u003Cbr\u003E    void Start() {\u003Cbr\u003E        manager = FindObjectOfType\u0026lt;AutoGimbalManager\u0026gt;();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        Log.Debug(\u0022target = \u0022 \u002B manager.rotationTarget);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.EveryScene, false)]\u003Cbr\u003Epublic class AutoGimbalManager : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public string rotationTarget = \u0022Mun\u0022;\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T03:15:33Z","Content":"\n\u003Cp\u003EExcellent, that works, thank you!\u003C/p\u003E\u003Cp\u003ESo, to make sure I have a full understanding, basically in the partmodule, I\u0027m creating an empty instance of the AutoGimbalManager, then on the scene start finding the object created by the game using the FindObjectOfType\u0026lt;\u0026gt;() method, and assigning it to the empty instance within the partmodule.\u003C/p\u003E\u003Cp\u003EThen once I have that, I can access its values / methods as if it were any other object. If there were more than just the one instance, I could use the methods you described to me in my post about accessing other partmodules\u0027 fields and methods.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-06T04:37:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Felger\u0022 data-cite=\u0022Felger\u0022\u003E\u003Cdiv\u003EIf there were more than just the one instance, I could use the methods you described to me in my post about accessing other partmodules\u0027 fields and methods.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, essentially. It just occurred to me there\u0027s another way you could go about this as well: Instead of the PartModule finding the MonoBehaviour, you could have the MonoBehaviour \u003Cem\u003Etell \u003C/em\u003Ethe PartModule which MonoBehaviour it\u0027ll be accessing. This might even be the superior solution if there\u0027s a good chance you\u0027ll be dealing with multiple manager style objects later, since you needn\u0027t modify your PartModule at all:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class AutoGimbal : PartModule\u003Cbr\u003E{\u003Cbr\u003E    public AutoGimbalManager manager;\u003Cbr\u003E\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        Log.Debug(\u0022target = \u0022 \u002B manager.rotationTarget);\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.EveryScene, false)]\u003Cbr\u003Epublic class AutoGimbalManager : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public string rotationTarget = \u0022Mun\u0022;\u003Cbr\u003E\u003Cbr\u003E    void Start()\u003Cbr\u003E    {\u003Cbr\u003E        FlightGlobals.Vessels.ForEach(vessel =\u0026gt;\u003Cbr\u003E        {\u003Cbr\u003E            vessel.FindPartModulesImplementing\u0026lt;AutoGimbal\u0026gt;().ForEach(gimbal =\u0026gt;\u003Cbr\u003E            {\u003Cbr\u003E                gimbal.manager = this;\u003Cbr\u003E            });\u003Cbr\u003E        });\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI don\u0027t know why that didn\u0027t occur to me earlier \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T17:51:52Z","Content":"\n\u003Cp\u003EThat works excellently, thanks!\u003C/p\u003E\u003Cp\u003EThe only part I\u0027m not sure I understand is the part where it uses what appears to be a temporarily defined \u0027gimbal\u0027 to pass the object to the \u0027manager\u0027 within the partmodule. Is that more or less correct? In this case is gimbal the \u0027input\u0027 from each case of the \u0027foreach\u0027?\u003C/p\u003E\u003Cp\u003EAgain, thanks for all your help!\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-06T18:06:53Z","Content":"\n\u003Cp\u003EThat\u0027s just a counting variable that refers to the current AutoGimbal instance being iterated over. You could rewrite that part as a foreach loop and it\u0027d be equivalent. I just happen to find it slightly more readable with the ForEach is all\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T18:12:11Z","Content":"\n\u003Cp\u003EGotcha, works great, either way. Are you familiar with the way the toolbar plugin works? I\u0027m running into a behaviour I haven\u0027t been able to nail down, and I think it might be related to the fact that I\u0027m accessing InfernalRobotics\u0027 namespace, which has the toolbarwrapper in it. I made a post in the \u003Ca href=\u0022Toolbar-Plugin-1-7-3-Common-API-for-draggable-resizable-buttons-toolbar/page30\u0022 rel=\u0022external nofollow\u0022\u003EToolbar dev thread\u003C/a\u003E but searching through the thread to see if anyone\u0027s had this problem before I saw that you\u0027ve done a lot with it.\u003C/p\u003E\u003Cp\u003EAny idea if that\u0027s what is going on, or if there\u0027s something simpler I\u0027m missing?\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-06T18:45:58Z","Content":"\n\u003Cp\u003ENever mind, it was the something simpler I\u0027m missing one. Missed the step to point the project at .net 3.5\u003C/p\u003E\n"}]}