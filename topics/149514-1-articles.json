{"TopicId":149514,"ForumId":20,"TopicTitle":"KOS wait until facing = prograde","CreatedByName":"thekapm","CreatedById":169944,"CreatedDateTime":"2016-10-08T19:09:50Z","PageNum":1,"Articles":[{"CreatedByName":"thekapm","CreatedById":169944,"CreatedDateTime":"2016-10-08T19:09:50Z","Content":"\n\u003Cp\u003E\nI\u0027m trying to lock steering to ship:prograde/retrograde, and then wait until facing = prograde. The problem is that the facing will never actually be equal to prograde or retrograde when locked like that, so the ship sits on the direction infinitely.\n\u003C/p\u003E\n\u003Cp\u003E\nI want this script to be universal regardless of how long it takes a ship to turn.\n\u003C/p\u003E\n\u003Cp\u003E\nMy code looks like this:\n\u003C/p\u003E\n\u003Cp\u003E\nlock steering to ship:prograde.\n\u003C/p\u003E\n\u003Cp\u003E\nwait until ship:facing = ship:prograde.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2016-10-08T21:24:18Z","Content":"\n\u003Cp\u003E\nNot sure what KOS syntax is, but the operation you\u0027re looking for is a vector dot product\n\u003C/p\u003E\n\u003Cp\u003E\nAssuming the vectors are normalised. ie. length of 1:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n1.0 == perfect alignment\n\u003C/li\u003E\n\u003Cli\u003E\n0 == perpendicular (90 degrees)\n\u003C/li\u003E\n\u003Cli\u003E\n-1.0 == perfect opposition\n\u003C/li\u003E\n\u003Cli\u003E\n\u0026gt;0.999\u00A0= \u0026lt;2.5 degrees of seperation\n\u003C/li\u003E\n\u003Cli\u003E\nMore generically: cos\u003Csup\u003E-1\u003C/sup\u003E(result) = angle\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-10-09T01:12:09Z\u0022 title=\u002210/09/2016 01:12  AM\u0022 data-short=\u00227 yr\u0022\u003EOctober 9, 2016\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Chabadarl","CreatedById":169589,"CreatedDateTime":"2016-10-08T21:41:24Z","Content":"\n\u003Cp\u003E\nI use this function :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Efunction waitAngle{\n  parameter vector.\n  lock steering to vector.\n  wait until vang(ship:facing:forevector,vector) \u0026lt;2.\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nIn your case you only need :\u00A0wait until vang(ship:facing:forevector,prograde) \u0026lt; 2.\n\u003C/p\u003E\n\u003Cp\u003E\nvang calculate the angle between two vectors. Facing is a direction, that\u0027s why you need to use \u00A0ship:facing:forevector. (see kOS documentation for more explanation).\n\u003C/p\u003E\n\u003Cp\u003E\nI find that 2\u00B0 is generally \u00A0good enough, but you can use whatever\u00A0threshold you want.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n-----------\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: If you want to use the vector dot product as suggested above by \u003Cspan\u003E\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/92871-crzyrndm/\u0026amp;do=hovercard\u0022 data-mentionid=\u002292871\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/92871-crzyrndm/\u0022 rel=\u0022\u0022\u003E@Crzyrndm\u003C/a\u003E. Here we go :\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nwait until vdot(ship:facing:forevector,prograde) \u0026gt; 0.999.\n\u003C/p\u003E\n\u003Cp\u003E\nIf it doesnt work check if the prograde and facing are unatary vector. If not, you need to multiply 0.999 by their magnitudes.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-10-08T21:47:47Z\u0022 title=\u002210/08/2016 09:47  PM\u0022 data-short=\u00227 yr\u0022\u003EOctober 8, 2016\u003C/time\u003E by Chabadarl\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"thekapm","CreatedById":169944,"CreatedDateTime":"2016-10-08T21:46:52Z","Content":"\n\u003Cp\u003E\nThat is a lot easier than what I finally came up with. Here is what I did:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\ndeclare function pcheck\n{\n\tset a to ship:prograde:pitch.\n\tset b to ship:prograde:yaw.\n\tset c to ship:prograde:roll.\n\tlock steering to R(a,b,c).\n\tWAIT UNTIL (ship:facing:pitch \u0026gt;= (round(a) - 5) AND ship:facing:roll \u0026gt;= (round(c) - 5)) AND (ship:facing:pitch \u0026lt;= (round(a) \u002B 5) AND ship:facing:roll round(c) \u002B 5)).\n}\u003C/pre\u003E\n\u003Cp\u003E\nI had found out that the pitch and roll, when rounded, stay the same for prograde and retrograde. So I made it wait until they were equal. Then after the function in my code I added a lock steering to ship:prograde, because by then they were close enough that it could throttle without spinning all over the place.\n\u003C/p\u003E\n"},{"CreatedByName":"sebseb7","CreatedById":171651,"CreatedDateTime":"2016-12-21T12:38:02Z","Content":"\n\u003Cp\u003E\n1st:\u003Cbr\u003E\nwhen lock steering for a burn, you usually don\u0027t need to roll, this can be done by:\u003Cbr\u003E\nlock steering to lookdirup(MYVECTOR, ship:facing:topvector).\n\u003C/p\u003E\n\u003Cp\u003E\n2nd:\u003Cbr\u003E\nyou can then burn a long as the angle is low enough\u003Cbr\u003E\nlock throttle_ to\u00A0nextnode:burnvector:mag*mass)/(maxthrust\u002B0.01)*1.5.\u003Cbr\u003E\nlock throttle to min( vectorangle(MYVECTOR,ship:facing:vector)*-1\u002B2\u00A0,throttle_).\n\u003C/p\u003E\n"}]}