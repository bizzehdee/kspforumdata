{"TopicId":61827,"ForumId":34,"TopicTitle":"[1.3] kOS Scriptable Autopilot System v1.1.3.0","CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-02-01T16:40:58Z","PageNum":102,"Articles":[{"CreatedByName":"Dr_Goddard","CreatedById":100796,"CreatedDateTime":"2015-01-21T18:49:08Z","Content":"\n\u003Cp\u003EAthlete Rover update.\u003C/p\u003E\u003Cp\u003EEverything works! I just have to find some more time to write routines for bug walking, unloading from lander, leg leveling, \u003C/p\u003E\u003Cp\u003EAlso looking to climb over a low wall, jump like a rabbit with a cushioned landing, operate as a forklift, and panic stop mode (no flipping over when braking hard).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022459\u0022 height=\u0022344\u0022 src=\u0022https://www.youtube.com/embed/RC6PXigNZRg?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E                 .--.       .--.\u003Cbr\u003E                     \\     /\u0022      \u003Cbr\u003E            |\\       \u0060\\___/\u0027       /|\u003Cbr\u003E             \\\\     .-\u0027@ @\u0060-.     // \u003Cbr\u003E              ||  .\u0027_________\u0060.  || \u003Cbr\u003E               \\\\.\u0027^    Y    ^\u0060.//\u003Cbr\u003E               .\u0027       |       \u0060.\u003Cbr\u003E              :         |         :\u003Cbr\u003E             :       ATHLETE       :\u003Cbr\u003E             :        Ver.1        :\u003Cbr\u003E             :     _    |    _     :\u003Cbr\u003E             :.   (_)   |   (_)    :\u003Cbr\u003E           __::.        |          :__\u003Cbr\u003E          /.--::.       |         :--.\\\u003Cbr\u003E       __//\u0027   \u0060::.     |       .\u0027   \u0060\\\\__\u003Cbr\u003E      \u0060--\u0027     //\u0060::.   |     .\u0027\\\\     \u0060--\u0027\u003Cbr\u003E              ||   \u0060-.__|__.-\u0027   ||\u003Cbr\u003E              ||                 ||\u003Cbr\u003E              //                 \\\\\u003Cbr\u003E             |/                   \\|\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Parastie","CreatedById":136112,"CreatedDateTime":"2015-01-21T20:33:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThe ship\u0027s raw position IS V(0,0,0) in kOS terminology. The weird contradictory coordinate system of underlying KSP is re-origined at the current ship\u0027s CoM for all position vectors in kOS (although it\u0027s not re-rotated to something sane - it stays at the underlying rotation). Oddly enough, it\u0027s still not origined at the vessel for VELOCITY purposes (which would zero your velocity if it was), but rather it reports the velocity at which the rest of the objects in the universe are passing you by.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe problem then must be my syntax for the origin point of the vector. Sorry if this is a very easy answer, but I haven\u0027t played with programming since Basic and Pascal in high school and geometry/trig was around that time as well. \u003C/p\u003E\u003Cp\u003EHere\u0027s the code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elock t1 to ship:position.\u003Cbr\u003Elock pv to port:portfacing:vector.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eset pm1 to ship:modulesnamed(\u0022ModuleDockingNode\u0022).\u003Cbr\u003Efor portmod in pm1 {set port to portmod:part.}.\u003Cbr\u003E\u003Cbr\u003Eset aa to vecdrawargs ( t1,pv,RGB(0,1,0.5), \u0022axis\u0022, 5, true ). \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Idranel","CreatedById":84266,"CreatedDateTime":"2015-01-21T23:44:39Z","Content":"\n\u003Cp\u003EHave you ever wished for a method of measuring slopes within line of sight without flying over the spot or derriving samples of ground altitude measurements ?\u003C/p\u003E\u003Cp\u003EFortunately you can do just that using the LaserDist mod, kOS and some math.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E Mount a number of laser distance sensors (using IR for rotation if desired) in such a way that you have one central laser beam and a number of other beams in a cone or pyramid like fashion.\u003Cbr\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/282437424/ksp/laser.png\u0022 alt=\u0022laser.png\u0022\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOptional: Designate one (origin-)part of your vessel to be used as the origin of your local coordinate system.\u003Cbr\u003E Using part:FACING:INVERSE you can transform the orientation of the sensors into something sane for your vessel\u0027s frame of reference.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECollect distance measurements and calculate the vector from origin to where the beam hit the ground.\u003Cbr\u003E (Problem: its unclear/undocumented where exactly the beams originate from in relation to the pose of the sensor part)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECompute Covariance Matrix \u003Cstrong\u003EZ\u003C/strong\u003E (3x3) as follows:\u003Cbr\u003E Let \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/sub\u003E be the point where the central beam hits and \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ej\u003C/strong\u003E\u003C/sub\u003E ; j \u0026gt; 0 the other points.\u003Cbr\u003E\u003Cstrong\u003EZ\u003C/strong\u003E := 1/(number of sensors) * SUM\u003Csub\u003Ei\u003C/sub\u003E [( \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ei\u003C/strong\u003E\u003C/sub\u003E\u003Cstrong\u003E \u003C/strong\u003E- \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/sub\u003E) * (\u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ei\u003C/strong\u003E\u003C/sub\u003E\u003Cstrong\u003E \u003C/strong\u003E- \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/sub\u003E)\u003Csup\u003ET\u003C/sup\u003E]\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EInvert \u003Cstrong\u003EZ\u003C/strong\u003E using the general formula for 3x3 matrix inversion ( see \u003Ca href=\u0022https://ardoris.wordpress.com/2008/07/18/general-formula-for-the-inverse-of-a-3x3-matrix/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://ardoris.wordpress.com/2008/07/18/general-formula-for-the-inverse-of-a-3x3-matrix/\u003C/a\u003E or \u003Ca href=\u0022http://mathworld.wolfram.com/MatrixInverse.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://mathworld.wolfram.com/MatrixInverse.html\u003C/a\u003E )\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECompute the eigenvector \u003Cstrong\u003Ev\u003C/strong\u003E corresponding to the most significant eigenvalue l of \u003Cstrong\u003EZ\u003C/strong\u003E\u003Csup\u003E\u003Cstrong\u003E-1\u003C/strong\u003E\u003C/sup\u003E using the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Power_iteration\u0022 rel=\u0022external nofollow\u0022\u003Epower method.\u003C/a\u003E This is the eigenvector corresponding to the least signficant eigenvalue of \u003Cstrong\u003EZ\u003C/strong\u003E.\u003Cbr\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003E initialize \u003Cstrong\u003Ev\u003C/strong\u003E with something other than \u003Cstrong\u003E0\u003C/strong\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E iterate \u003Cstrong\u003Ev\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ek\u002B1\u003C/strong\u003E\u003C/sub\u003E = (\u003Cstrong\u003EZ\u003C/strong\u003E\u003Csup\u003E\u003Cstrong\u003E-1\u003C/strong\u003E\u003C/sup\u003E * \u003Cstrong\u003Ev\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ek\u003C/strong\u003E\u003C/sub\u003E) / ||(\u003Cstrong\u003EZ\u003C/strong\u003E\u003Csup\u003E\u003Cstrong\u003E-1\u003C/strong\u003E\u003C/sup\u003E * \u003Cstrong\u003Ev\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003Ek\u003C/strong\u003E\u003C/sub\u003E)|| until value hasn\u0027t changed much\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E[*]This vector can either point towards the sky or the ground. If that matters then check which case it is and flip it around as needed.\u003C/p\u003E\u003Cp\u003E[*]You can now compare the normal vector with vector from central point \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/sub\u003E to the center of the body (direction of gravity at that point) you\u0027re orbiting.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe resulting eigenvector is the one corresponding to the least signficant eigenvalue of \u003Cstrong\u003EZ\u003C/strong\u003E.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EZ\u003C/strong\u003E describes how the points are distributed around \u003Cstrong\u003Ep\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/sub\u003E and its Eigenvectors describe a new orthogonal base where each vector is chosen so that the variance (of the points) along its direction is maximized (but each additional vector is orthogonal to the previous ones). ( See \u003Ca href=\u0022https://en.wikipedia.org/wiki/Principal_component_analysis\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Principal_component_analysis\u003C/a\u003E too).\u003C/p\u003E\u003Cp\u003EThe vector orthogonal to two (orthogonal) vectors that maximize the variance is an approximation of the normal in the center point provided that the other points are reasonably close together and provide enough resolution when sampling the surface.\u003C/p\u003E\u003Cp\u003ESo far I\u0027ve implemented all necessary matrix operations (on lists) but given the non existance of variable scopes and return values actually reusing code is a complete nightmare with KOS. It always turns into frustrating spaghetti.\u003C/p\u003E\u003Cp\u003EGiven that the type system is weak sauce too its almost tempting to try mod a Python interpreter into KSP instead.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-21T23:54:24Z\u0022 title=\u002201/21/2015 11:54  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 21, 2015\u003C/time\u003E by Idranel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-22T01:33:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Parastie\u0022 data-cite=\u0022Parastie\u0022\u003E\u003Cdiv\u003EThe problem then must be my syntax for the origin point of the vector. Sorry if this is a very easy answer, but I haven\u0027t played with programming since Basic and Pascal in high school and geometry/trig was around that time as well. \u003Cp\u003EHere\u0027s the code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elock t1 to ship:position.\u003Cbr\u003Elock pv to port:portfacing:vector.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eset pm1 to ship:modulesnamed(\u0022ModuleDockingNode\u0022).\u003Cbr\u003Efor portmod in pm1 {set port to portmod:part.}.\u003Cbr\u003E\u003Cbr\u003Eset aa to vecdrawargs ( t1,pv,RGB(0,1,0.5), \u0022axis\u0022, 5, true ). \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYour description is missing the most important bit: What is it about this that doesn\u0027t work? are you getting an error message? Is something not showing up on screen?\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Idranel\u0022 data-cite=\u0022Idranel\u0022\u003E\u003Cdiv\u003EHave you ever wished for a method of measuring slopes within line of sight without flying over the spot or derriving samples of ground altitude measurements ?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYour method seems to be doing an awful lot of extra work, given that kOS provides you with vector cross product operators already, which is what I suspect all your matrix math ends up doing anyway. The matrix operations behind a vector cross product are handled for you by the Unity engine, and we pass that on to you with a kOS function VCRS( vector1, vector2).\u003C/p\u003E\u003Cp\u003EYou should be able to get a normal vector to a point on the ground using just 3 sample points, and a cross product.\u003C/p\u003E\u003Cp\u003EOnce you\u0027ve got the location of 3 points A,B,C, then you can do this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset ABvector to B - A.\u003Cbr\u003Eset ACvector to C - A.\u003Cbr\u003Eset AB_cross_AC to VCRS(ABvector,ACvector). // normal to the slope at that spot.\u003Cbr\u003Eset angle to VANG(AB_cross_AC, ship:UP). // slope angle (assuming that the impact\u003Cbr\u003E                                // point is near enough in latitude/longitude to the\u003Cbr\u003E                                // ship that the difference in UP between the ship location and the hit location is negligable).\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"togfox","CreatedById":17083,"CreatedDateTime":"2015-01-22T01:48:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Idranel\u0022 data-cite=\u0022Idranel\u0022\u003E\u003Cdiv\u003EHave you ever wished for a method of measuring slopes within line of sight without flying over the spot or derriving samples of ground altitude measurements ?\u003Cp\u003EFortunately you can do just that using the LaserDist mod, kOS and some math.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou have no idea how well timed this is!!!\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/69678-0-23-FTAS-v1-The-Fox-Terrain-Avoidance-System\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/69678-0-23-FTAS-v1-The-Fox-Terrain-Avoidance-System\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Parastie","CreatedById":136112,"CreatedDateTime":"2015-01-22T04:52:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYour description is missing the most important bit: What is it about this that doesn\u0027t work? are you getting an error message? Is something not showing up on screen?\u003Cp\u003ESorry, the problem is the origin position of the vector drawn on screen appears several meters away from the port:position that I set it to. I discovered, however, that if I set the magnitude to 1 (in the original code I was using from the github docs it was 5), then it appears exactly as I expect it to. I\u0027ve attached screenshot below to show what I mean. \u003C/p\u003E\u003Cp\u003EThis is with mag set to 1: \u003Ca href=\u0022http://i.imgur.com/PoScCGL.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/PoScCGL.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis is with mag set to 5: \u003Ca href=\u0022http://i.imgur.com/OA4buTc.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/OA4buTc.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s not currently part of an overall program, I\u0027m just trying to learn how everything works.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-22T07:31:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Parastie\u0022 data-cite=\u0022Parastie\u0022\u003E\u003Cdiv\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYour description is missing the most important bit: What is it about this that doesn\u0027t work? are you getting an error message? Is something not showing up on screen?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESorry, the problem is the origin position of the vector drawn on screen appears several meters away from the port:position that I set it to. I discovered, however, that if I set the magnitude to 1 (in the original code I was using from the github docs it was 5), then it appears exactly as I expect it to. I\u0027ve attached screenshot below to show what I mean. \u003C/p\u003E\u003Cp\u003EThis is with mag set to 1: \u003Ca href=\u0022http://i.imgur.com/PoScCGL.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/PoScCGL.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis is with mag set to 5: \u003Ca href=\u0022http://i.imgur.com/OA4buTc.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://i.imgur.com/OA4buTc.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s not currently part of an overall program, I\u0027m just trying to learn how everything works.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah thats the effect of the scale operator. It mulitplies both the offset start position and the vector itself. That may be silly. If nobody is using it that way i may remove the part about multiplying the start pos and just multiply the vector size only. \u003C/p\u003E\u003Cp\u003EIn the mean time to get what you want just multiply 5 by the second argument only.\u003C/p\u003E\n"},{"CreatedByName":"Parastie","CreatedById":136112,"CreatedDateTime":"2015-01-22T13:18:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYeah thats the effect of the scale operator. It mulitplies both the offset start position and the vector itself. That may be silly. If nobody is using it that way i may remove the part about multiplying the start pos and just multiply the vector size only. \u003Cp\u003EIn the mean time to get what you want just multiply 5 by the second argument only.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThank you that works great. Now I\u0027m just figuring out the movement and steering.\u003C/p\u003E\u003Cp\u003EHere\u0027s a fun thing I discovered: if you have a inline docking port and set \u0027control from here\u0027 on that port, then attempt lock steering to up. It will spin around like mad, at least the small probe I have in the pictures above does. I think its because the torque and the center of mass are not lines up with port.\u003C/p\u003E\u003Cp\u003EIt will lock with no problem as long as I leave the control on the probe computer.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-22T13:47:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Parastie\u0022 data-cite=\u0022Parastie\u0022\u003E\u003Cdiv\u003EThank you that works great. Now I\u0027m just figuring out the movement and steering.\u003Cp\u003EHere\u0027s a fun thing I discovered: if you have a inline docking port and set \u0027control from here\u0027 on that port, then attempt lock steering to up. It will spin around like mad, at least the small probe I have in the pictures above does. I think its because the torque and the center of mass are not lines up with port.\u003C/p\u003E\u003Cp\u003EIt will lock with no problem as long as I leave the control on the probe computer.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI noticed that too and reported it as \u003Ca href=\u0022https://github.com/KSP-KOS/KOS/issues/397\u0022 rel=\u0022external nofollow\u0022\u003Eissue number 397\u003C/a\u003E, but I didn\u0027t look into the cause because I was leaving the steering up to erendrake to deal with while I worked on other stuff, and I wasn\u0027t even sure it was real as I had a lot of other problems at the same time and it was hard to isolate one bug from another. If you\u0027re able to perfectly recreate it with a known craft and a known set of actions, it would be great if you could add your information to that bug report.\u003C/p\u003E\n"},{"CreatedByName":"Idranel","CreatedById":84266,"CreatedDateTime":"2015-01-22T16:32:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYour description is missing the most important bit: What is it about this that doesn\u0027t work? are you getting an error message? Is something not showing up on screen?\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EYour method seems to be doing an awful lot of extra work, given that kOS provides you with vector cross product operators already, which is what I suspect all your matrix math ends up doing anyway. The matrix operations behind a vector cross product are handled for you by the Unity engine, and we pass that on to you with a kOS function VCRS( vector1, vector2).\u003C/p\u003E\u003Cp\u003EYou should be able to get a normal vector to a point on the ground using just 3 sample points, and a cross product.\u003C/p\u003E\u003Cp\u003EOnce you\u0027ve got the location of 3 points A,B,C, then you can do this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset ABvector to B - A.\u003Cbr\u003Eset ACvector to C - A.\u003Cbr\u003Eset AB_cross_AC to VCRS(ABvector,ACvector). // normal to the slope at that spot.\u003Cbr\u003Eset angle to VANG(AB_cross_AC, ship:UP). // slope angle (assuming that the impact\u003Cbr\u003E                                // point is near enough in latitude/longitude to the\u003Cbr\u003E                                // ship that the difference in UP between the ship location and the hit location is negligable).\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis method works for arbitrary point cloud neighborhoods without prior knowledge of their structure.\u003C/p\u003E\u003Cp\u003EIts commonly used to compute normals in 3D laser scan data.\u003C/p\u003E\u003Cp\u003EIf you\u0027re limited to three points then the vector cross product makes more sense.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-22T16:59:57Z\u0022 title=\u002201/22/2015 04:59  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 22, 2015\u003C/time\u003E by Idranel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sreventon","CreatedById":119329,"CreatedDateTime":"2015-01-22T17:05:50Z","Content":"\n\u003Cp\u003ECan you help me to analyze this problem?\u003C/p\u003E\u003Cp\u003EI\u0027m thinking about make a script that can calculate the vector of thrusting, so when I combine the use of IR, it can make the thrust vector adaptive to the center of mass.\u003C/p\u003E\u003Cp\u003EAs what I know, probably I can do it by collecting the facing and current thrust data of all active engines, and calculate the resultant vector.\u003C/p\u003E\u003Cp\u003ESo, do you agree with it? and can it be more simple? or, is there a function I missed that can get that?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-22T18:16:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Idranel\u0022 data-cite=\u0022Idranel\u0022\u003E\u003Cdiv\u003EThis method works for arbitrary point cloud neighborhoods without prior knowledge of their structure.\u003Cp\u003EIts commonly used to compute normals in 3D laser scan data.\u003C/p\u003E\u003Cp\u003EIf you\u0027re limited to three points then the vector cross product makes more sense.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat additional information do you get from 6 points in a plane that didn\u0027t already exist from just 3 points in plane? If you know they\u0027re all in a plane, once you have 3, any more are just gravy. If you don\u0027t know that they\u0027re all in a plane, then basically the concept of a \u0022normal\u0022 vector to the not-plane doesn\u0027t make sense anyway.\u003C/p\u003E\u003Cp\u003EOr is the unspoken assumption in your math that you assume your points are not in a plane but are sort of close to being in a plane and you\u0027re trying to find the approximate average plane that runs through the cloud of them? (in KSP terms, since KSP terrain is made of flat polygons, that would mean the points are not all hitting the same polygon and you want the average plane between the angles of the different polygons you\u0027ve hit.) I\u0027d still go with the cross-product in that case, and just get the resulting vector from multiple tuples of 3 points, turning them into unit length vectors so as not to weight them, and then average them into one vector.\u003C/p\u003E\u003Cp\u003Ei.e. if you have point A in the middle, and then points B,C,D,E, around A, then get the normals:\u003C/p\u003E\u003Cp\u003EAB X AC / |AB X AC|,\u003C/p\u003E\u003Cp\u003EAC X AD / |AC X AD|,\u003C/p\u003E\u003Cp\u003EAD X AE / |AD X AE|,\u003C/p\u003E\u003Cp\u003EAE X AB / |AE X AB|,\u003C/p\u003E\u003Cp\u003Eand average their coordinates together, to get average slope around point A.\u003C/p\u003E\u003Cp\u003EIt\u0027s good enough and it\u0027s a lot faster because you\u0027re allowing the underlying (very fast) 3D engine do the math, instead of doing it in the slow world of kOS script code. A cross product is normally a matrix operation with lots of components, but when you let the 3D engine do it for you, it\u0027s often translated into hardware instructions, as vector operators have to happen so often in graphics that a typical graphics card will provide you with the ability to do them itself. The 3D engine will abstract all that away so long as you use its function calls to do the operation and don\u0027t try to run all the steps yourself.\u003C/p\u003E\u003Cp\u003EBut at any rate the whole point of kOS is to let you do it yourself and if you want to use the cloud method by all means go for it.\u003C/p\u003E\u003Cp\u003EI do agree that the lack of local variables and user-defined functions is rather severely limiting and could use fixing. It\u0027s on the long list of \u0022stuff to get around to some day\u0022.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-22T18:39:41Z\u0022 title=\u002201/22/2015 06:39  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 22, 2015\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"togfox","CreatedById":17083,"CreatedDateTime":"2015-01-22T22:51:00Z","Content":"\n\u003Cp\u003EI\u0027m trying to work out the distance between two gps points (lat/long). I can capture lat/long for two ponts well enough. That\u0027s the easy bit. The trig bit with kOS has me scratching my head. I googled this and this is java (which I don\u0027t know, but it\u0027s pretty self-evident):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\u003Cbr\u003E  var R = 6371; // Radius of the earth in km\u003Cbr\u003E  var dLat = deg2rad(lat2-lat1);  // deg2rad below\u003Cbr\u003E  var dLon = deg2rad(lon2-lon1); \u003Cbr\u003E  var a = \u003Cbr\u003E    Math.sin(dLat/2) * Math.sin(dLat/2) \u002B\u003Cbr\u003E    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \u003Cbr\u003E    Math.sin(dLon/2) * Math.sin(dLon/2)\u003Cbr\u003E    ; \u003Cbr\u003E  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \u003Cbr\u003E  var d = R * c; // Distance in km\u003Cbr\u003E  return d;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efunction deg2rad(deg) {\u003Cbr\u003E  return deg * (Math.PI/180)\u003Cbr\u003E} \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDo I need to convert to radians like this function does and is all that trig possible?\u003C/p\u003E\u003Cp\u003EI\u0027m measuring small distance - in the hundreds of meters. Does that remove the need for some of that trig? Like, trig on really small numbers will return really small numbers type of thing?\u003C/p\u003E\n"},{"CreatedByName":"VentZer0","CreatedById":130750,"CreatedDateTime":"2015-01-22T23:16:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022togfox\u0022 data-cite=\u0022togfox\u0022\u003E\u003Cdiv\u003EI\u0027m trying to work out the distance between two gps points (lat/long). I can capture lat/long for two ponts well enough. That\u0027s the easy bit. The trig bit with kOS has me scratching my head. I googled this and this is java (which I don\u0027t know, but it\u0027s pretty self-evident):\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efunction getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\u003Cbr\u003E  var R = 6371; // Radius of the earth in km\u003Cbr\u003E  var dLat = deg2rad(lat2-lat1);  // deg2rad below\u003Cbr\u003E  var dLon = deg2rad(lon2-lon1); \u003Cbr\u003E  var a = \u003Cbr\u003E    Math.sin(dLat/2) * Math.sin(dLat/2) \u002B\u003Cbr\u003E    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \u003Cbr\u003E    Math.sin(dLon/2) * Math.sin(dLon/2)\u003Cbr\u003E    ; \u003Cbr\u003E  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \u003Cbr\u003E  var d = R * c; // Distance in km\u003Cbr\u003E  return d;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Efunction deg2rad(deg) {\u003Cbr\u003E  return deg * (Math.PI/180)\u003Cbr\u003E} \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDo I need to convert to radians like this function does and is all that trig possible?\u003C/p\u003E\u003Cp\u003EI\u0027m measuring small distance - in the hundreds of meters. Does that remove the need for some of that trig? Like, trig on really small numbers will return really small numbers type of thing?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ejust have the 2 spots use the function :distance. \u003C/p\u003E\u003Cp\u003Eexample:\u003C/p\u003E\u003Cp\u003Eprint spot1:distance.\u003C/p\u003E\u003Cp\u003Eprint spot1:bearing.\u003C/p\u003E\u003Cp\u003Eprint spot2:distance.\u003C/p\u003E\u003Cp\u003Eprint spot2:bearing. \u003C/p\u003E\u003Cp\u003Enow you have distance to each and angle between the two. from that you can form a triangle and calculate the rest.\u003C/p\u003E\u003Cp\u003Ebtw there are approximations for sinus functions, if the angle IN RADIANS is very small then sin(angle) ~ angle. that is if the angle IN RADIANS is below 1.\u003C/p\u003E\n"},{"CreatedByName":"togfox","CreatedById":17083,"CreatedDateTime":"2015-01-22T23:56:19Z","Content":"\n\u003Cp\u003EI can\u0027t use distance sadly.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EDistance from the CPU_Vessel to this point on the surface.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI want two random points on the surface - not from craft to surface. I have a lat/long and another lat/long - how can kOS work out the distance between them?\u003C/p\u003E\u003Cp\u003Eedit: oh - I see - triangulate. Interesting.\u003C/p\u003E\n"},{"CreatedByName":"Dr_Goddard","CreatedById":100796,"CreatedDateTime":"2015-01-23T02:08:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EBut at any rate the whole point of kOS is to let you do it yourself and if you want to use the cloud method by all means go for it.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI thought maybe you didn\u0027t find my stuff interesting. But I can see now I am admired like a small child who discovers how to build a sandcastle.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI have been studying my C#.\u003C/p\u003E\u003Cp\u003EI know I have a long way to go, but I have an idea for kOS that I would like to try and figure out and program myself.\u003C/p\u003E\u003Cp\u003EI\u0027ve already created a local clone of the github etc. and played around with that. I\u0027m cognizant that I can compile my own versions of the dll and so on.\u003C/p\u003E\u003Cp\u003EUnless someone wants to usurp this, I am hoping to create a class that allows me to write the contents of a :getfield to the screen using MonoBehaviour.PostScreenMessage\u003C/p\u003E\u003Cp\u003EPlease tell me I am on the right track?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-23T03:11:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dr_Goddard\u0022 data-cite=\u0022Dr_Goddard\u0022\u003E\u003Cdiv\u003EI thought maybe you didn\u0027t find my stuff interesting. But I can see now I am admired like a small child who discovers how to build a sandcastle.\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI have been studying my C#.\u003C/p\u003E\u003Cp\u003EI know I have a long way to go, but I have an idea for kOS that I would like to try and figure out and program myself.\u003C/p\u003E\u003Cp\u003EI\u0027ve already created a local clone of the github etc. and played around with that. I\u0027m cognizant that I can compile my own versions of the dll and so on.\u003C/p\u003E\u003Cp\u003EUnless someone wants to usurp this, I am hoping to create a class that allows me to write the contents of a :getfield to the screen using MonoBehaviour.PostScreenMessage\u003C/p\u003E\u003Cp\u003EPlease tell me I am on the right track?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhy limit the scope to just :GetField? Why not just allow a script to print whatever string it feels like to a PostScreenMessage, regardless of whether it\u0027s coming from a :GETFIELD or something else? Just implement it at the basic string level and you get :getfield for free that way, along with all sorts of other stuff.\u003C/p\u003E\n"},{"CreatedByName":"VentZer0","CreatedById":130750,"CreatedDateTime":"2015-01-23T06:29:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022togfox\u0022 data-cite=\u0022togfox\u0022\u003E\u003Cdiv\u003EI can\u0027t use distance sadly.\u003Cp\u003EI want two random points on the surface - not from craft to surface. I have a lat/long and another lat/long - how can kOS work out the distance between them?\u003C/p\u003E\u003Cp\u003Eedit: oh - I see - triangulate. Interesting.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExactly using a bit of tangens, but this only works if there is a 90\u00C3\u201A\u00C2\u00B0 angle somewhere, I tried to calculate the other sides but had no luck. the information you have in this case is not enough to calculate the triangle entirely.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-01-23T07:14:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022VentZer0\u0022 data-cite=\u0022VentZer0\u0022\u003E\u003Cdiv\u003EExactly using a bit of tangens, but this only works if there is a 90\u00C3\u201A\u00C2\u00B0 angle somewhere, I tried to calculate the other sides but had no luck. the information you have in this case is not enough to calculate the triangle entirely.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eer, \u003Ca href=\u0022http://www.sparknotes.com/testprep/books/sat2/math2c/chapter9section9.rhtml\u0022 rel=\u0022external nofollow\u0022\u003Enon-right angled trig says hello\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Edist = sqrt (spot1:distance ^ 2 \u002B spot2:distance ^ 2 - 2 * spot1:distance * spot2:distance * cos ( spot1:bearing - spot2:bearing) )\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Escuse the non-kOS syntax...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-23T07:18:09Z\u0022 title=\u002201/23/2015 07:18  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 23, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"VentZer0","CreatedById":130750,"CreatedDateTime":"2015-01-23T09:03:57Z","Content":"\n\u003Cp\u003Emeh I wasnt aware of this, trigonometry was never my cup of tea, but yeah that should work\u003C/p\u003E\u003Cp\u003ESET dist TO sqrt((spot1:distance)^2 \u002B (spot2:distance)^2 - 2 * spot1:distance * spot2:distance * cos (spot1_2_angle).\u003C/p\u003E\u003Cp\u003ESET spot1_2_angle to (spot1:bearing - spot2:bearing).\u003C/p\u003E\u003Cp\u003Eyou might need to fiddle around with spot:bearing and a lil IF magic to sum them up correctly, and depending on situation there could arise problems\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-23T09:09:28Z\u0022 title=\u002201/23/2015 09:09  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 23, 2015\u003C/time\u003E by VentZer0\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Parastie","CreatedById":136112,"CreatedDateTime":"2015-01-23T13:05:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI noticed that too and reported it as \u003Ca href=\u0022https://github.com/KSP-KOS/KOS/issues/397\u0022 rel=\u0022external nofollow\u0022\u003Eissue number 397\u003C/a\u003E, but I didn\u0027t look into the cause because I was leaving the steering up to erendrake to deal with while I worked on other stuff, and I wasn\u0027t even sure it was real as I had a lot of other problems at the same time and it was hard to isolate one bug from another. If you\u0027re able to perfectly recreate it with a known craft and a known set of actions, it would be great if you could add your information to that bug report.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESure, it does it every time. That\u0027s why I\u0027m now trying to figure the angles to the port so I can get it to align with a target. I thought it should be 90 degree angle but I see I\u0027m going to need to read a lot more. \u003C/p\u003E\u003Cp\u003EI\u0027ll try to put a bug report up today.\u003C/p\u003E\n"},{"CreatedByName":"togfox","CreatedById":17083,"CreatedDateTime":"2015-01-23T13:29:26Z","Content":"\n\u003Cp\u003EI don\u0027t know which to quote so I\u0027ll just say with two distances at right angles to the craft (eg directly north and directly east) then I can use Pythagoras to get the hypotenuse. \u003C/p\u003E\u003Cp\u003EI didn\u0027t mention that before but yeah, it\u0027s now relevant and an option. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E this is the second last puzzle to my problem. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2015-01-23T16:00:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Parastie\u0022 data-cite=\u0022Parastie\u0022\u003E\u003Cdiv\u003ESure, it does it every time. That\u0027s why I\u0027m now trying to figure the angles to the port so I can get it to align with a target. I thought it should be 90 degree angle but I see I\u0027m going to need to read a lot more. \u003Cp\u003EI\u0027ll try to put a bug report up today.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn my case my goal was to make a raw-steering (not LOCK STEERING) example of how to do docking from one weirdly aimed docking port to another, as a proof of concept of the new direction and position suffixes for parts, so because I was trying to do it with raw SHIP:CONTROL techniques the fact that LOCK STEERING didn\u0027t work right was of lesser priority to what I was trying to do.\u003C/p\u003E\u003Cp\u003EBut yeah, that reminds me that I never did make the example video for that test case like I meant to. I really should.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022togfox\u0022 data-cite=\u0022togfox\u0022\u003E\u003Cdiv\u003EI can\u0027t use distance sadly.\u003Cp\u003EI want two random points on the surface - not from craft to surface. I have a lat/long and another lat/long - how can kOS work out the distance between them?\u003C/p\u003E\u003Cp\u003Eedit: oh - I see - triangulate. Interesting.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes this work for you?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Assumes that at this point of your script,\u003Cbr\u003E// lat1, long1, and lat2, long2 are the latitude and longitude of the 2 points you\u0027re interested in.\u003Cbr\u003E//\u003Cbr\u003ESET geoPos1 to LATLNG(lat1,long1).\u003Cbr\u003ESET geoPos2 to LATLNG(lat2,long2).\u003Cbr\u003Eprint \u0022Position vector of geoPos1 is \u0022 \u002B geoPos1:POSITION.\u003Cbr\u003Eprint \u0022Position vector of geoPos2 is \u0022 \u002B geoPos2:POSITION.\u003Cbr\u003Eprint \u0022 --- \u0022.\u003Cbr\u003Eset vector1To2 to (geoPos2:POSITION - geoPos1:POSITION).\u003Cbr\u003Eprint \u0022Straight line vector distance from pos1 to pos2, \u0022\u003Cbr\u003Eprint \u0022(ignoring terrain and surface curvature)\u0022\u003Cbr\u003Eprint \u0022is this: \u0022 \u002B vector1To2:MAG.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Parastie","CreatedById":136112,"CreatedDateTime":"2015-01-23T16:40:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn my case my goal was to make a raw-steering (not LOCK STEERING) example of how to do docking from one weirdly aimed docking port to another, as a proof of concept of the new direction and position suffixes for parts, so because I was trying to do it with raw SHIP:CONTROL techniques the fact that LOCK STEERING didn\u0027t work right was of lesser priority to what I was trying to do.\u003Cp\u003EBut yeah, that reminds me that I never did make the example video for that test case like I meant to. I really should.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELoL\u003C/p\u003E\u003Cp\u003EThat would be very helpful. I\u0027m having a hell of a time trying to get the side port to position itself correctly. I suppose I could just get the position of the port, then use raw control to position of the control ship\u0027s port until the positions zero out. I think that would work...\u003C/p\u003E\n"},{"CreatedByName":"Idranel","CreatedById":84266,"CreatedDateTime":"2015-01-23T21:29:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EOr is the unspoken assumption in your math that you assume your points are not in a plane but are sort of close to being in a plane and you\u0027re trying to find the approximate average plane that runs through the cloud of them? (in KSP terms, since KSP terrain is made of flat polygons, that would mean the points are not all hitting the same polygon and you want the average plane between the angles of the different polygons you\u0027ve hit.) I\u0027d still go with the cross-product in that case, and just get the resulting vector from multiple tuples of 3 points, turning them into unit length vectors so as not to weight them, and then average them into one vector.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes this is assumed here.\u003C/p\u003E\u003Cp\u003EPicking two vectors spanning such a plane more or less arbitrarily works well enough if things are mostly flat.\u003C/p\u003E\u003Cp\u003EFor anything hilly (the question remains whether or not KSP terrain actually gets bumpy enough) you\u0027ll probably want a higher resolution.\u003C/p\u003E\u003Cp\u003EBut admittedly it might not be worth going through the trouble considering how slow it\u0027ll be in comparison.\u003C/p\u003E\u003Cp\u003EFortunately in native code this stuff is fast enough to be useful.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-23T21:43:30Z\u0022 title=\u002201/23/2015 09:43  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 23, 2015\u003C/time\u003E by Idranel\u003C/strong\u003E\n\u003C/span\u003E\n"}]}