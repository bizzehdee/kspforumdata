{"TopicId":77572,"ForumId":29,"TopicTitle":"First time plugin making, let\u0026#039;s get some help.","CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T08:23:12Z","PageNum":1,"Articles":[{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T08:23:12Z","Content":"\n\u003Cp\u003E6 years of JAVA coding, think I understand C# now.\u003C/p\u003E\u003Cp\u003EBut still a bummer on plugin making, so why not make this thread useful?\u003C/p\u003E\u003Cp\u003EMy current objective is; make a fuel tank that drains(dump) liquid fuel.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing UnityEngine;\u003Cbr\u003Eusing FirstPlugIn.Extensions;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace FirstPlugIn\u003Cbr\u003E{\u003Cbr\u003E    public class FirstPlugIn : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public static Rect windowPos = new Rect(); // Made a window\u003Cbr\u003E        private GUIStyle windowStyle, labelStyle;\u003Cbr\u003E        private bool hasInitStyle = false;\u003Cbr\u003E\u003Cbr\u003E        private double fuel; // Saves fuel amount in tank.\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Dump Fuel\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Dumping Fuel\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Stop\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Stopped Dumping\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            if (state != StartState.Editor)\u003Cbr\u003E            {\u003Cbr\u003E                if (!hasInitStyle)\u003Cbr\u003E                    InitStyles();\u003Cbr\u003E                RenderingManager.AddToPostDrawQueue(0, OnDraw);\u003Cbr\u003E\u003Cbr\u003E                fuel = this.vessel.GetActiveResource(new PartResourceDefinition(\u0022LiquidFuel\u0022)).amount;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                this.rigidbody.AddRelativeForce(Vector3.up * 1000f * FlightInputHandler.state.mainThrottle);\u003Cbr\u003E\u003Cbr\u003E                if(Events[\u0022ActivateEvent\u0022].active)\u003Cbr\u003E                {\u003Cbr\u003E                    if (fuel \u0026gt;= 0)\u003Cbr\u003E                        fuel--;\u003Cbr\u003E\u003Cbr\u003E                    this.vessel.GetActiveResource(new PartResourceDefinition(\u0022LiquidFuel\u0022)).amount = fuel;\u003Cbr\u003E                    Debug.Log(this.vessel.GetActiveResource(new PartResourceDefinition(\u0022LiquidFuel\u0022)).amount);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnDraw()\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.IsPrimary(this.vessel.Parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                windowPos = GUILayout.Window(10, windowPos, OnWindow, \u0022Hello World!\u0022, windowStyle);\u003Cbr\u003E\u003Cbr\u003E                if(windowPos.x == 0f \u0026amp;\u0026amp; windowPos.y == 0f)\u003Cbr\u003E                {\u003Cbr\u003E                    windowPos = windowPos.CenterScreen();\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnWindow(int windowID)\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUILayout.Label(\u0022Hello World! This is a Label\u0022, labelStyle);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E            GUI.DragWindow();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void InitStyles()\u003Cbr\u003E        {\u003Cbr\u003E            windowStyle = new GUIStyle(HighLogic.Skin.window);\u003Cbr\u003E            windowStyle.fixedWidth = 250f;\u003Cbr\u003E\u003Cbr\u003E            labelStyle = new GUIStyle(HighLogic.Skin.label);\u003Cbr\u003E            labelStyle.stretchWidth = true;\u003Cbr\u003E\u003Cbr\u003E            hasInitStyle = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E                config.SetValue(\u0022Window Position\u0022, windowPos);\u003Cbr\u003E                config.save();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E            config.load();\u003Cbr\u003E            windowPos = config.GetValue\u0026lt;Rect\u0026gt;(\u0022Window Position\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHad an idea of storing fuel amount when start, then use this value to chage the fuel amount on update.\u003C/p\u003E\u003Cp\u003EExpected output is to display the text \u0022Dumping Fuel\u0022 and \u0022Stopped Dumping\u0022, as well as drain the fuel from the tank too.\u003C/p\u003E\u003Cp\u003EText display works, but when I check the fuel gauge, it remains still. Am I using a wrong resource method?\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T08:40:10Z","Content":"\n\u003Cp\u003EAlright, so I found PartResource and PartResourceDefinition.\u003C/p\u003E\u003Cp\u003EI guess PartResrouce is the actual resource, but don\u0027t know if it is pointting the liquid fuel. Guess I have to use PartResourceDefinision to use PartResource????\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T09:56:39Z","Content":"\n\u003Cp\u003ESo I looked into my .cfg file,\u003C/p\u003E\u003Cp\u003EOriginally, had RESOURCE outside of MODULE, but now I see other people\u0027s .cfg files including RESOURCE inside of MODULE.\u003C/p\u003E\u003Cp\u003ESo I guess I\u0027ll have to change my .cfg to\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003Ename=FirstPlugIn\u003Cbr\u003E\u003Cbr\u003ERESOURCE\u003Cbr\u003E{\u003Cbr\u003E name = LiquidFuel\u003Cbr\u003E amount = 540\u003Cbr\u003E maxAmount = 540\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003ERESOURCE\u003Cbr\u003E{\u003Cbr\u003E name = Oxidizer\u003Cbr\u003E amount = 660\u003Cbr\u003E maxAmount = 660\u003Cbr\u003E}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESomething like this and call the resource via plugin?\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T11:36:09Z","Content":"\n\u003Cp\u003ESo instead of working with right-click option, I decided to look into resource management first.\u003C/p\u003E\u003Cp\u003EI\u0027ve been reading through Mu\u0027s 0.15 code update, and found out about part.RequestResource method.\u003C/p\u003E\u003Cp\u003ESo on the Update method, I added RequestResource method to \u0027request\u0027 fuel on every frame.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing UnityEngine;\u003Cbr\u003Eusing FirstPlugIn.Extensions;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace FirstPlugIn\u003Cbr\u003E{\u003Cbr\u003E    public class FirstPlugIn : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public static Rect windowPos = new Rect(); // Made a window\u003Cbr\u003E        private GUIStyle windowStyle, labelStyle;\u003Cbr\u003E        private bool hasInitStyle = false;\u003Cbr\u003E\u003Cbr\u003E        private PartResourceDefinition fuel;\u003Cbr\u003E        private FuelTank ft;\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Dump Fuel\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Dumping Fuel\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Stop\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Stopped Dumping\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            if (state != StartState.Editor)\u003Cbr\u003E            {\u003Cbr\u003E                if (!hasInitStyle)\u003Cbr\u003E                    InitStyles();\u003Cbr\u003E                RenderingManager.AddToPostDrawQueue(0, OnDraw);\u003Cbr\u003E\u003Cbr\u003E                foreach(Part part in vessel.parts)\u003Cbr\u003E                {\u003Cbr\u003E                    if (part is FuelTank)\u003Cbr\u003E                        ft = (FuelTank)part;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                // Dead Code\u003Cbr\u003E                fuel = new PartResourceDefinition(\u0022LiquidFuel\u0022);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                this.rigidbody.AddRelativeForce(Vector3.up * 1000f * FlightInputHandler.state.mainThrottle); // Just a silly code to see if it flies\u003Cbr\u003E\u003Cbr\u003E                part.RequestResource(\u0022LiquidFuel\u0022, 1); // Request 1 unit of fuel from(or to) somewhere I don\u0027t know.\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnDraw()\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.IsPrimary(this.vessel.Parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                windowPos = GUILayout.Window(10, windowPos, OnWindow, \u0022Hello World!\u0022, windowStyle);\u003Cbr\u003E\u003Cbr\u003E                if(windowPos.x == 0f \u0026amp;\u0026amp; windowPos.y == 0f)\u003Cbr\u003E                {\u003Cbr\u003E                    windowPos = windowPos.CenterScreen();\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnWindow(int windowID)\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUILayout.Label(\u0022Hello World! This is a Label\u0022, labelStyle);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E            GUI.DragWindow();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void InitStyles()\u003Cbr\u003E        {\u003Cbr\u003E            windowStyle = new GUIStyle(HighLogic.Skin.window);\u003Cbr\u003E            windowStyle.fixedWidth = 250f;\u003Cbr\u003E\u003Cbr\u003E            labelStyle = new GUIStyle(HighLogic.Skin.label);\u003Cbr\u003E            labelStyle.stretchWidth = true;\u003Cbr\u003E\u003Cbr\u003E            hasInitStyle = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E                config.SetValue(\u0022Window Position\u0022, windowPos);\u003Cbr\u003E                config.save();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E            config.load();\u003Cbr\u003E            windowPos = config.GetValue\u0026lt;Rect\u0026gt;(\u0022Window Position\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EQuestion now is, will it work with multiple same fuel tanks and crossfeed each other? (For balancing purpose that is)\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-07-14T12:12:53Z","Content":"\n\u003Cp\u003ETake a look at \u003Ca href=\u0022https://github.com/Ippo343/DangIt/blob/master/source/Failure%20modules/Tanks.cs#L112\u0022 rel=\u0022external nofollow\u0022\u003Emy code that simulates a tank leak\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EWhen using part.RequestResource, the resource will be fetched using the usual flow rules, so basically from the furthest tank of the same resource that can be reached. Also, you can stop it by using those little green buttons in the right click menu.\u003C/p\u003E\u003Cp\u003EBy the way, that method also returns the amount of resource that it was actually able to consume, so:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif ( part.RequestResource(\u0022LiquidFuel\u0022, myAmount ) \u0026lt; myAmount ) // there isn\u0027t enough liquid fuel\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EKeep in mind though that it does request it on every frame, so 1 per frame -\u0026gt; ~30 units per second. You might want to do your computations using seconds, and then convert it using \u003Cspan style=\u0022font-family:Consolas;\u0022\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003ETimeWarp\u003C/span\u003E\u003C/span\u003E\u003Cspan style=\u0022font-family:Consolas;\u0022\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003E.\u003C/span\u003E\u003C/span\u003E\u003Cspan style=\u0022font-family:Consolas;\u0022\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EfixedDeltaTime\u003C/span\u003E\u003C/span\u003E\u003Cspan style=\u0022font-family:Consolas;\u0022\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003E;\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-14T12:59:22Z","Content":"\n\u003Cp\u003EThanks for the code, I\u0027ll look into it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EReason for adding a right-click option is to make this fuel dumping plugin turn into a generator (Liquid Fuel -\u0026gt; Electricity)\u003C/p\u003E\u003Cp\u003ESo far I have tried radial attaching(4 fuel tanks), and each fuel tank works as expected.\u003C/p\u003E\u003Cp\u003EHowever, is there a way to balance these fuel tanks so they dump liquid fuel equally? (Crossfeeing without fuel lines that is)\u003C/p\u003E\u003Cp\u003ECode so far\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing UnityEngine;\u003Cbr\u003Eusing FirstPlugIn.Extensions;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003E\u003Cbr\u003Enamespace FirstPlugIn\u003Cbr\u003E{\u003Cbr\u003E    public class FirstPlugIn : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public static Rect windowPos = new Rect(); // Made a window\u003Cbr\u003E        private GUIStyle windowStyle, labelStyle;\u003Cbr\u003E        private bool hasInitStyle = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Dump Fuel\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Dumping Fuel\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Stop Dump\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Stopped Dumping\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            if (state != StartState.Editor)\u003Cbr\u003E            {\u003Cbr\u003E                if (!hasInitStyle)\u003Cbr\u003E                    InitStyles();\u003Cbr\u003E                RenderingManager.AddToPostDrawQueue(0, OnDraw);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                this.rigidbody.AddRelativeForce(Vector3.up * 1000f * FlightInputHandler.state.mainThrottle);\u003Cbr\u003E\u003Cbr\u003E                if(Events[\u0022DeactivateEvent\u0022].active)\u003Cbr\u003E                {\u003Cbr\u003E                    part.RequestResource(\u0022LiquidFuel\u0022, 1);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnDraw()\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.IsPrimary(this.vessel.Parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                windowPos = GUILayout.Window(10, windowPos, OnWindow, \u0022Hello World!\u0022, windowStyle);\u003Cbr\u003E\u003Cbr\u003E                if(windowPos.x == 0f \u0026amp;\u0026amp; windowPos.y == 0f)\u003Cbr\u003E                {\u003Cbr\u003E                    windowPos = windowPos.CenterScreen();\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void OnWindow(int windowID)\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.BeginHorizontal();\u003Cbr\u003E            GUILayout.Label(\u0022Hello World! This is a Label\u0022, labelStyle);\u003Cbr\u003E            GUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E            GUI.DragWindow();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void InitStyles()\u003Cbr\u003E        {\u003Cbr\u003E            windowStyle = new GUIStyle(HighLogic.Skin.window);\u003Cbr\u003E            windowStyle.fixedWidth = 250f;\u003Cbr\u003E\u003Cbr\u003E            labelStyle = new GUIStyle(HighLogic.Skin.label);\u003Cbr\u003E            labelStyle.stretchWidth = true;\u003Cbr\u003E\u003Cbr\u003E            hasInitStyle = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            if (this.vessel == FlightGlobals.ActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E                PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E                config.SetValue(\u0022Window Position\u0022, windowPos);\u003Cbr\u003E                config.save();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            PluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;FirstPlugIn\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E            config.load();\u003Cbr\u003E            windowPos = config.GetValue\u0026lt;Rect\u0026gt;(\u0022Window Position\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThink I should move that GUI sample to separate module. It\u0027s getting messy \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-07-14T13:10:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CSX_Ind\u0022 data-cite=\u0022CSX_Ind\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EHowever, is there a way to balance these fuel tanks so they dump liquid fuel equally? (Crossfeeing without fuel lines that is)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot that I know of: probably not through stock KSP, you\u0027ll need to manually find your tanks and update each of them.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T06:01:57Z","Content":"\n\u003Cp\u003EDay Two on Mod making, tidy things up and made it to work (single fuel tank it is)\u003C/p\u003E\u003Cp\u003EI found this.vessel.parts. Think I can store all the same type of parts(ie. my fuel tank) as a List, use them to balance each other.\u003C/p\u003E\u003Cp\u003EQuestion is, how can I identify these parts from other parts?\u003C/p\u003E\u003Cp\u003EPower Generator code (Changed so I can stretch my goals)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class PowerGenerator : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            this.part.PumpFuel(Events[\u0022DeactivateEvent\u0022].active);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Dump Fuel\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Dumping Fuel\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Stop Dump\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Stopped Dumping\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGenerator property code -\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing System.Threading.Tasks;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public static class GeneratorProp\u003Cbr\u003E    {\u003Cbr\u003E        public static void PumpFuel(this Part part, bool isActivated)\u003Cbr\u003E        {\u003Cbr\u003E            if (isActivated)\u003Cbr\u003E                part.RequestResource(\u0022LiquidFuel\u0022, 0.05f);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T06:29:34Z","Content":"\n\u003Cp\u003E4 Fuel tanks attached on a command pod, dumping fuel individually so far.\u003C/p\u003E\u003Cp\u003ESo to dump fuel, use RequestResoure(), then how do I actually acquire fuel from other tanks?\u003C/p\u003E\u003Cp\u003EI see RequestResource() and RequestFuel(). Looks like RequestFuel() has another parameter to check request ID, then how am I to call this request ID from other tanks?\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T06:40:52Z","Content":"\n\u003Cp\u003ESo I\u0027ve tried\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.RequestFuel(part, 0.05f, (uint)part.ClassID);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EPart is part itself, 0.05f as amount, and part.ClassID as request ID, but didn\u0027t work.\u003C/p\u003E\u003Cp\u003EDo I use this method when I actually receive fuel?\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-07-15T07:39:06Z","Content":"\n\u003Cp\u003EIt just occurred to me that you are trying to make a generator (yes, I didn\u0027t read very carefully: sorry).\u003C/p\u003E\u003Cp\u003EYou could make it work like this, but you are probably better off by deriving ModuleGenerator: check it out, it\u0027s a part module that specifically handles resource generators (it\u0027s the same one used by RTGs for example).\u003C/p\u003E\u003Cp\u003EIn fact, you might not even need to do it: unless you are trying to do something fancy, you can just add this to the part.cfg file:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E         MODULE\u003Cbr\u003E        {\u003Cbr\u003E                name = ModuleGenerator\u003Cbr\u003E                isAlwaysActive = False\u003Cbr\u003E                activateGUIName = Fire up\u003Cbr\u003E                shutdownGUIName = Shut down\u003Cbr\u003E\u003Cbr\u003E                INPUT_RESOURCE\u003Cbr\u003E                    {\u003Cbr\u003E                       name = LiquidFuel\u003Cbr\u003E                       rate = 0.09\u003Cbr\u003E                    }    \u003Cbr\u003E\u003Cbr\u003E                INPUT_RESOURCE\u003Cbr\u003E                    {\u003Cbr\u003E                       name = Oxidizer\u003Cbr\u003E                       rate = 0.11\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                 OUTPUT_RESOURCE\u003Cbr\u003E                    {\u003Cbr\u003E                        name = ElectricCharge\u003Cbr\u003E                        rate = 2\u003Cbr\u003E                    }\u003Cbr\u003E        }    \u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T10:08:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ippo\u0022 data-cite=\u0022Ippo\u0022\u003E\u003Cdiv\u003EIt just occurred to me that you are trying to make a generator (yes, I didn\u0027t read very carefully: sorry).\u003Cp\u003EYou could make it work like this, but you are probably better off by deriving ModuleGenerator: check it out, it\u0027s a part module that specifically handles resource generators (it\u0027s the same one used by RTGs for example).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell for now I\u0027m making things with existing resources so I can get an idea of how resources are handled in a plugin.\u003C/p\u003E\u003Cp\u003EAt the end, I\u0027d like to stretch my goal to a fuel cell plugin that simulates Hydrogen and Oxygen reaction.\u003C/p\u003E\u003Cp\u003EMaybe I can still use existing ModuleGenerator and just change the input and output, but I don\u0027t know, I want to simulate more things like waste management and sort of things.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T10:21:48Z","Content":"\n\u003Cp\u003EWill it be possible to manage resources in separate classes/variables? Like,\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing System.Threading.Tasks;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class ModResource\u003Cbr\u003E    {\u003Cbr\u003E        private string name;\u003Cbr\u003E        private float amount;\u003Cbr\u003E\u003Cbr\u003E        public ModResource(string name, float amount)\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public ModResource(PartResource resource, float amount)\u003Cbr\u003E        {\u003Cbr\u003E            name = resource.name;\u003Cbr\u003E            this.amount = amount;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen mabye you can create separate object for resource that handles amount and type easily and apply it to lower level methods(ie. RequestFuel)?\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T12:39:24Z","Content":"\n\u003Cp\u003ESo far I have wrote\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        // Used to store multiple resources (IF there is more than one)\u003Cbr\u003E        List\u0026lt;ModResource\u0026gt; resources;\u003Cbr\u003E\u003Cbr\u003E        public PartResource fuel;\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            // Create empty list of Modifed resources\u003Cbr\u003E            resources = new List\u0026lt;ModResource\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E            // If there are at least one resource in this part\u003Cbr\u003E            if(this.part.Resources.Count \u0026gt; 0)\u003Cbr\u003E            {\u003Cbr\u003E                // For each resources, get PartResource and it\u0027s parent part\u003Cbr\u003E                foreach(PartResource resource in this.part.Resources)\u003Cbr\u003E                {\u003Cbr\u003E                    resources.Add(new ModResource(resource, this.part));\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            // Below deprecated\u003Cbr\u003E            fuel = new PartResource();\u003Cbr\u003E            fuel.SetInfo(new PartResourceDefinition(\u0022LiquidFuel\u0022));\u003Cbr\u003E\u003Cbr\u003E            foreach(PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if(resource is PartResource \u0026amp;\u0026amp; (resource.GetInfo() == fuel.GetInfo()))\u003Cbr\u003E                {\u003Cbr\u003E                    fuel.amount = resource.amount;\u003Cbr\u003E                    fuel.maxAmount = resource.maxAmount;\u003Cbr\u003E                    break;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen I questioned myself if it is possible to use this modified resource object to control actual fuel tank??\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-07-15T13:02:12Z","Content":"\n\u003Cp\u003EWell, it\u0027s just a wrapper around it, so it would work. However, if you are writing a PartModule, this.part.Resources will only give you the resources contained inside the part, not the whole vessel: so you can\u0027t get the other fuel tanks this way.\u003C/p\u003E\u003Cp\u003EYou would need to write a partless plugin that scans all the parts in the vessel for that. I think there was a tutorial for partless plugins around here, but I can\u0027t seem to find it right now.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T13:05:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ippo\u0022 data-cite=\u0022Ippo\u0022\u003E\u003Cdiv\u003EWell, it\u0027s just a wrapper around it, so it would work. However, if you are writing a PartModule, this.part.Resources will only give you the resources contained inside the part, not the whole vessel: so you can\u0027t get the other fuel tanks this way.\u003Cp\u003EYou would need to write a partless plugin that scans all the parts in the vessel for that. I think there was a tutorial for partless plugins around here, but I can\u0027t seem to find it right now.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh yes, I\u0027ve read about part/partless plugins. Think I know how to code it.\u003C/p\u003E\u003Cp\u003EThough I\u0027m still not cleared on how resource structures are made in KSP, so gonna take bit more time tweaking around on it.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T17:02:00Z","Content":"\n\u003Cp\u003EBeen testing multiple ways to dump fuel through plugin, and three methods so far.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                // Method 1, direct change.\u003Cbr\u003E                foreach (PartResource resource in part.Resources)\u003Cbr\u003E                    if (resource.resourceName == \u0022LiquidFuel\u0022)\u003Cbr\u003E                    {\u003Cbr\u003E                        resource.amount = 50;\u003Cbr\u003E\u003Cbr\u003E                        if (resource.amount == 50)\u003Cbr\u003E                        {\u003Cbr\u003E                            Debug.Log(\u0022Method 1 Worked!\u0022);\u003Cbr\u003E                            resource.amount = resource.maxAmount;\u003Cbr\u003E                        }\u003Cbr\u003E                        else Debug.Log(\u0022Method 1 failed!\u0022);\u003Cbr\u003E                    }\u003Cbr\u003E            }\u003Cbr\u003E            catch(MissingReferenceException e)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Cannot use this Method 1!\u0022);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                // Method 2, uses fuel object to change amount and sends it back to actual resource\u003Cbr\u003E                foreach (PartResource resource in part.Resources)\u003Cbr\u003E                    if (resource.resourceName == \u0022LiquidFuel\u0022)\u003Cbr\u003E                    {\u003Cbr\u003E                        fuel = resource;\u003Cbr\u003E                        fuel.amount = 50;\u003Cbr\u003E                        resource.amount = fuel.amount;\u003Cbr\u003E\u003Cbr\u003E                        if (resource.amount == 50)\u003Cbr\u003E                        {\u003Cbr\u003E                            Debug.Log(\u0022Method 2 workd!\u0022);\u003Cbr\u003E                            resource.amount = resource.maxAmount;\u003Cbr\u003E                        }\u003Cbr\u003E                        else Debug.Log(\u0022Method 2 failed!\u0022);\u003Cbr\u003E                    }\u003Cbr\u003E            }\u003Cbr\u003E            catch (MissingReferenceException e)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Cannot use this Method 2!\u0022);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            // Method 3, this for sure works as it goes through entire vessel\u003Cbr\u003E            foreach(Part part in vessel.parts)\u003Cbr\u003E                foreach(PartResource resource in part.Resources)\u003Cbr\u003E                {\u003Cbr\u003E                    if (resource.resourceName == \u0022LiquidFuel\u0022)\u003Cbr\u003E                    {\u003Cbr\u003E                        fuel = resource;\u003Cbr\u003E                        fuel.amount = 50;\u003Cbr\u003E                        resource.amount = fuel.amount;\u003Cbr\u003E                        Debug.Log(\u0022Force changed resource: \u0022 \u002B fuel.name \u002B \u0022, \u0022 \u002B resource.amount);\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    Debug.Log(\u0022resource info : \u0022 \u002B resource.name \u002B \u0022 Contains : \u0022 \u002B resource.resourceName \u002B \u0022, \u0022 \u002B resource.amount \u002B \u0022, \u0022 \u002B resource.maxAmount);\u003Cbr\u003E                }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo figured out you can directly change the fuel amount through this, so I guess I can use this to add up the electrical chage throughout the ship.\u003C/p\u003E\u003Cp\u003EWell, onward to figure out how to send resources throughout the ship.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T18:20:16Z","Content":"\n\u003Cp\u003EAlright, so I\u0027ve added ElectricChage to my .cfg file as one of my RESOURCE, turns out, KSP cannot take extra resource in the cfg, causing the entire model in VAB to grow infinite size. Only two resources available in .cfg, think I have to find detour on power generating.\u003C/p\u003E\u003Cp\u003EI\u0027m thinking since I can use 2 resources at least, modify them and simulate them as if they were drawn by the generator, then add some electric charges to whatever part that takes electric charges.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T18:34:09Z","Content":"\n\u003Cp\u003EOne more thing I found out, whenever I try to test my fuel tank with command pod attached to it, it throws NullReferenceException, so I tested another ship without my part, didn\u0027t throw any NullReferenceException. So for sure it comes from my plugin.\u003C/p\u003E\u003Cp\u003EBut I\u0027m not sure where it\u0027s coming from. I pretty much deleted any unused varibales and nothing in my code is being referenced as NULL so gotta figure out where it\u0027s coming from.\u003C/p\u003E\u003Cp\u003EEDIT : Well, turns out it was KSP\u0027s bug switching scene directly from Spacecenter to Flight. I\u0027ve tried switching view from Editor to Flight, NullRefereceException wasn\u0027t thrown so good to know my plugin works without any problems.\u003C/p\u003E\u003Cp\u003EJust for the sake of logging, here is the part where it throws Exception.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[HighLogic]: =========================== Scene Change : From SPACECENTER to FLIGHT =====================\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/BuildAgent/work/d3d49558e4d408f4/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 53)\u003Cbr\u003E\u003Cbr\u003ENullReferenceException\u003Cbr\u003E  at (wrapper managed-to-native) UnityEngine.Component:InternalGetTransform ()\u003Cbr\u003E\u003Cbr\u003E  at UnityEngine.Component.get_transform () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at SpaceCenterCamera2.UpdateTransformOverview () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at SpaceCenterCamera2.UpdateTransform () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at SpaceCenterCamera2.Update () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E(Filename:  Line: -1)\u003Cbr\u003E\u003Cbr\u003ENullReferenceException: Object reference not set to an instance of an object\u003Cbr\u003E  at TimeWarp.Update () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E(Filename:  Line: -1)\u003Cbr\u003E\u003Cbr\u003EUnloadTime: 5.479031 ms\u003Cbr\u003EUnloading 1 Unused Serialized files (Serialized files now loaded: 0 / Dirty serialized files: 0)\u003Cbr\u003E\u003Cbr\u003EUnloading 1572 unused Assets to reduce memory usage. Loaded Objects now: 69229.\u003Cbr\u003ETotal: 97.938026 ms (FindLiveObjects: 4.513797 ms CreateObjectMapping: 4.379476 ms MarkObjects: 86.971039 ms  DeleteObjects: 1.620772 ms)\u003Cbr\u003E\u003Cbr\u003EUnloading 0 Unused Serialized files (Serialized files now loaded: 0 / Dirty serialized files: 0)\u003Cbr\u003E\u003Cbr\u003EUnloading 0 unused Assets to reduce memory usage. Loaded Objects now: 69217.\u003Cbr\u003ETotal: 97.722038 ms (FindLiveObjects: 5.645035 ms CreateObjectMapping: 4.918097 ms MarkObjects: 86.561371 ms  DeleteObjects: 0.183854 ms)\u003Cbr\u003E\u003Cbr\u003EUnloadTime: 3.596311 ms\u003Cbr\u003EUnloading 3 Unused Serialized files (Serialized files now loaded: 0 / Dirty serialized files: 0)\u003Cbr\u003E\u003Cbr\u003EUnloading 78 unused Assets to reduce memory usage. Loaded Objects now: 71084.\u003Cbr\u003ETotal: 110.833687 ms (FindLiveObjects: 5.951607 ms CreateObjectMapping: 5.797652 ms MarkObjects: 98.133919 ms  DeleteObjects: 0.420365 ms)\u003Cbr\u003E\u003Cbr\u003E------------------- initializing flight mode... ------------------\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-15T18:42:36Z\u0022 title=\u002207/15/2014 06:42  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 15, 2014\u003C/time\u003E by CSX_Ind\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-15T20:07:39Z","Content":"\n\u003Cp\u003EFinally got to simulate VERY simple fuel cell with existing resources.\u003C/p\u003E\u003Cp\u003EStill need to calculate electric charge distribution throughout the vessel. But I think it\u0027s good time to stretch my goal here now.\u003C/p\u003E\u003Cp\u003EPowerGenerator.cs\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class PowerGenerator : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.isPrimary(this.vessel.parts, this.ClassID))\u003Cbr\u003E                if(this.part.PumpFuel(Events[\u0022DeactivateEvent\u0022].active))\u003Cbr\u003E                {\u003Cbr\u003E                    foreach (Part part in this.vessel.parts)\u003Cbr\u003E                        foreach (PartResource resource in part.Resources)\u003Cbr\u003E                            if (resource.resourceName == \u0022ElectricCharge\u0022)\u003Cbr\u003E                                resource.amount \u002B= 0.04 * Time.deltaTime;\u003Cbr\u003E                }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Dump Fuel\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Dumping Fuel\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Stop Dump\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Stopped Dumping\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGeneratorProp.cs\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing System.Threading.Tasks;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public static class GeneratorProp\u003Cbr\u003E    {\u003Cbr\u003E        public static bool PumpFuel(this Part part, bool isActivated)\u003Cbr\u003E        {\u003Cbr\u003E            if (isActivated)\u003Cbr\u003E            {\u003Cbr\u003E                foreach (PartResource resource in part.Resources)\u003Cbr\u003E                {\u003Cbr\u003E                    if (resource.resourceName == \u0022LiquidFuel\u0022)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (resource.amount \u0026gt; 0)\u003Cbr\u003E                            resource.amount -= 0.02 * Time.deltaTime;\u003Cbr\u003E                        else return false;\u003Cbr\u003E                    }\u003Cbr\u003E                    else if (resource.resourceName == \u0022Oxidizer\u0022)\u003Cbr\u003E                    {\u003Cbr\u003E                        if(resource.amount \u0026gt; 0)\u003Cbr\u003E                            resource.amount -= 0.01 * Time.deltaTime;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                return true;\u003Cbr\u003E            }\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static bool isPrimary(this Part checkPart, List\u0026lt;Part\u0026gt; parts, int partModuleID)\u003Cbr\u003E        {\u003Cbr\u003E            foreach(Part part in parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (part.Modules.Contains(partModuleID))\u003Cbr\u003E                    if (part == checkPart)\u003Cbr\u003E                        return true;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGoing to stretch my goal to add my own resource(ie. Hydrogen and Oxygen) then simulate fuel cell from it.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-16T05:58:30Z","Content":"\n\u003Cp\u003EDay Three on Fuel Cell plugin making, cleaned up my code since GeneratorProp was a bit overkill.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class PowerGenerator : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        PartResource fuel, oxyg;\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if (resource.resourceName == \u0022LiquidFuel\u0022)\u003Cbr\u003E                    fuel = resource;\u003Cbr\u003E                if (resource.resourceName == \u0022Oxidizer\u0022)\u003Cbr\u003E                    oxyg = resource;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.isPrimary(this.vessel.parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                if (ActivateGenerator(Events[\u0022DeactivateEvent\u0022].active))\u003Cbr\u003E                {\u003Cbr\u003E                    foreach (Part part in this.vessel.parts)\u003Cbr\u003E                        foreach (PartResource resource in part.Resources)\u003Cbr\u003E                            if (resource.resourceName == \u0022ElectricCharge\u0022 \u0026amp;\u0026amp; (resource.amount \u0026lt; resource.maxAmount))\u003Cbr\u003E                                resource.amount \u002B= 0.04 * Time.deltaTime;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                UpdateResources();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private bool ActivateGenerator(bool isActivated)\u003Cbr\u003E        {\u003Cbr\u003E            if (isActivated)\u003Cbr\u003E            {\u003Cbr\u003E                if (fuel.amount \u0026gt; 0)\u003Cbr\u003E                {\u003Cbr\u003E                    fuel.amount -= 0.02 * Time.deltaTime;\u003Cbr\u003E                    if (oxyg.amount \u0026gt; 0)\u003Cbr\u003E                    {\u003Cbr\u003E                        oxyg.amount -= 0.01 * Time.deltaTime;\u003Cbr\u003E                        return true;\u003Cbr\u003E                    }\u003Cbr\u003E                    else return false;\u003Cbr\u003E                }\u003Cbr\u003E                else return false;\u003Cbr\u003E            }\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateResources()\u003Cbr\u003E        {\u003Cbr\u003E            foreach(PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if (resource.resourceName == fuel.resourceName)\u003Cbr\u003E                    resource.amount = fuel.amount;\u003Cbr\u003E                if (resource.resourceName == oxyg.resourceName)\u003Cbr\u003E                    resource.amount = oxyg.amount;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Activate Fuel Cell\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : On\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Deactivate Fuel Cell\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : Off\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPAction(\u0022Toggle Fuel Cell\u0022)]\u003Cbr\u003E        public void SimpleAction(KSPActionParam param)\u003Cbr\u003E        {\u003Cbr\u003E            if (param.type == KSPActionType.Activate)\u003Cbr\u003E                ActivateEvent();\u003Cbr\u003E            else if (param.type == KSPActionType.Deactivate)\u003Cbr\u003E                DeactivateEvent();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo I guess I have to add my custom resources and test them out.\u003C/p\u003E\u003Cp\u003EIs there a way to change the color of the gauge of these resources instead of green?\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-16T09:02:25Z","Content":"\n\u003Cp\u003EAdded Hydrogen and Oxygen, also tweaked charge distribution a bit so any battery/pod with low chage will get equally charged.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class PowerGenerator : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        PartResource fuel, oxyg;\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if (resource.resourceName == \u0022Hydrogen\u0022)\u003Cbr\u003E                    fuel = resource;\u003Cbr\u003E                if (resource.resourceName == \u0022Oxygen\u0022)\u003Cbr\u003E                    oxyg = resource;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.isPrimary(this.vessel.parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                if (ActivateGenerator(Events[\u0022DeactivateEvent\u0022].active))\u003Cbr\u003E                {\u003Cbr\u003E                    double parts = CountChargeRequired();\u003Cbr\u003E\u003Cbr\u003E                    foreach (Part part in this.vessel.parts)\u003Cbr\u003E                        foreach (PartResource resource in part.Resources)\u003Cbr\u003E                            if (resource.resourceName == \u0022ElectricCharge\u0022 \u0026amp;\u0026amp; (resource.amount \u0026lt; resource.maxAmount))\u003Cbr\u003E                                resource.amount \u002B= (0.24 / parts) * Time.deltaTime;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                UpdateResources();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private bool ActivateGenerator(bool isActivated)\u003Cbr\u003E        {\u003Cbr\u003E            if (isActivated)\u003Cbr\u003E            {\u003Cbr\u003E                if (oxyg.amount \u0026gt; 0)\u003Cbr\u003E                {\u003Cbr\u003E                    oxyg.amount -= 0.02 * Time.deltaTime;\u003Cbr\u003E                    if (fuel.amount \u0026gt; 0)\u003Cbr\u003E                    {\u003Cbr\u003E                        fuel.amount -= 0.01 * Time.deltaTime;\u003Cbr\u003E                        return true;\u003Cbr\u003E                    }\u003Cbr\u003E                    else return false;\u003Cbr\u003E                }\u003Cbr\u003E                else return false;\u003Cbr\u003E            }\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateResources()\u003Cbr\u003E        {\u003Cbr\u003E            foreach(PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if (resource.resourceName == fuel.resourceName)\u003Cbr\u003E                    resource.amount = fuel.amount;\u003Cbr\u003E                if (resource.resourceName == oxyg.resourceName)\u003Cbr\u003E                    resource.amount = oxyg.amount;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private double CountChargeRequired()\u003Cbr\u003E        {\u003Cbr\u003E            double count = 0;\u003Cbr\u003E            foreach (Part part in this.vessel.parts)\u003Cbr\u003E                foreach (PartResource resource in part.Resources)\u003Cbr\u003E                    if (resource.resourceName == \u0022ElectricCharge\u0022 \u0026amp;\u0026amp; (resource.amount \u0026lt; resource.maxAmount))\u003Cbr\u003E                        count\u002B\u002B;\u003Cbr\u003E\u003Cbr\u003E            return count;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Activate Fuel Cell\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : On\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Deactivate Fuel Cell\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : Off\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPAction(\u0022Toggle Fuel Cell\u0022)]\u003Cbr\u003E        public void SimpleAction(KSPActionParam param)\u003Cbr\u003E        {\u003Cbr\u003E            if (param.type == KSPActionType.Activate)\u003Cbr\u003E                ActivateEvent();\u003Cbr\u003E            else if (param.type == KSPActionType.Deactivate)\u003Cbr\u003E                DeactivateEvent();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EStill wondering if there is other way to manage resources instead of searching through resources with for loops.\u003C/p\u003E\n"},{"CreatedByName":"Ippo","CreatedById":107018,"CreatedDateTime":"2014-07-16T10:01:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022CSX_Ind\u0022 data-cite=\u0022CSX_Ind\u0022\u003E\u003Cdiv\u003EStill wondering if there is other way to manage resources instead of searching through resources with for loops.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can just search them once and use them later:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// pseudo code\u003Cbr\u003E\u003Cbr\u003EPartResource oxy;\u003Cbr\u003EPartResource fuel;\u003Cbr\u003E\u003Cbr\u003Evoid OnStart()\u003Cbr\u003E{\u003Cbr\u003E    this.oxy = this.part.Resources[\u0022Oxidizer\u0022];\u003Cbr\u003E    this.fuel = this.part.Resources[\u0022LiquidFuel\u0022];\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Evoid Update()\u003Cbr\u003E{\u003Cbr\u003E    this.oxy = // ...\u003Cbr\u003E    this.fuel = // ...\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-16T10:34:37Z","Content":"\n\u003Cp\u003EInteresting, I thought it would just make an instance reference not an actual object.\u003C/p\u003E\n"},{"CreatedByName":"CSX_Ind","CreatedById":54958,"CreatedDateTime":"2014-07-16T11:11:30Z","Content":"\n\u003Cp\u003EThanks to Ippo, new \u0026amp; improved code.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003E\u003Cbr\u003Enamespace PowerGenerator\u003Cbr\u003E{\u003Cbr\u003E    public class PowerGenerator : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        PartResource fuel, oxyg;\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            this.fuel = this.part.Resources[\u0022Hydrogen\u0022];\u003Cbr\u003E            this.oxyg = this.part.Resources[\u0022Oxygen\u0022];\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if(this.vessel == FlightGlobals.ActiveVessel \u0026amp;\u0026amp; this.part.isPrimary(this.vessel.parts, this.ClassID))\u003Cbr\u003E            {\u003Cbr\u003E                if (ActivateGenerator(Events[\u0022DeactivateEvent\u0022].active))\u003Cbr\u003E                {\u003Cbr\u003E                    double parts = CountChargeRequired();\u003Cbr\u003E\u003Cbr\u003E                    foreach (Part part in this.vessel.parts)\u003Cbr\u003E                        foreach (PartResource resource in part.Resources)\u003Cbr\u003E                            if (resource.resourceName == \u0022ElectricCharge\u0022 \u0026amp;\u0026amp; (resource.amount \u0026lt; resource.maxAmount))\u003Cbr\u003E                                resource.amount \u002B= (0.24 / parts) * Time.deltaTime;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                //UpdateResources();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private bool ActivateGenerator(bool isActivated)\u003Cbr\u003E        {\u003Cbr\u003E            if (isActivated)\u003Cbr\u003E            {\u003Cbr\u003E                if (this.oxyg.amount \u0026gt; 0)\u003Cbr\u003E                {\u003Cbr\u003E                    this.oxyg.amount -= 0.02 * Time.deltaTime;\u003Cbr\u003E                    if (this.fuel.amount \u0026gt; 0)\u003Cbr\u003E                    {\u003Cbr\u003E                        this.fuel.amount -= 0.01 * Time.deltaTime;\u003Cbr\u003E                        return true;\u003Cbr\u003E                    }\u003Cbr\u003E                    else return false;\u003Cbr\u003E                }\u003Cbr\u003E                else return false;\u003Cbr\u003E            }\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateResources()\u003Cbr\u003E        {\u003Cbr\u003E            foreach(PartResource resource in part.Resources)\u003Cbr\u003E            {\u003Cbr\u003E                if (resource.resourceName == this.fuel.resourceName)\u003Cbr\u003E                    resource.amount = this.fuel.amount;\u003Cbr\u003E                if (resource.resourceName == this.oxyg.resourceName)\u003Cbr\u003E                    resource.amount = this.oxyg.amount;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private double CountChargeRequired()\u003Cbr\u003E        {\u003Cbr\u003E            double count = 0;\u003Cbr\u003E            foreach (Part part in this.vessel.parts)\u003Cbr\u003E                foreach (PartResource resource in part.Resources)\u003Cbr\u003E                    if (resource.resourceName == \u0022ElectricCharge\u0022 \u0026amp;\u0026amp; (resource.amount \u0026lt; resource.maxAmount))\u003Cbr\u003E                        count\u002B\u002B;\u003Cbr\u003E\u003Cbr\u003E            return count;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Activate Fuel Cell\u0022)]\u003Cbr\u003E        public void ActivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : On\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = false;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Deactivate Fuel Cell\u0022, active = false)]\u003Cbr\u003E        public void DeactivateEvent()\u003Cbr\u003E        {\u003Cbr\u003E            ScreenMessages.PostScreenMessage(\u0022Generator : Off\u0022, 5.0f, ScreenMessageStyle.UPPER_CENTER);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateEvent\u0022].active = true;\u003Cbr\u003E            Events[\u0022DeactivateEvent\u0022].active = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPAction(\u0022Toggle Fuel Cell\u0022)]\u003Cbr\u003E        public void SimpleAction(KSPActionParam param)\u003Cbr\u003E        {\u003Cbr\u003E            if (param.type == KSPActionType.Activate)\u003Cbr\u003E                ActivateEvent();\u003Cbr\u003E            else if (param.type == KSPActionType.Deactivate)\u003Cbr\u003E                DeactivateEvent();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}