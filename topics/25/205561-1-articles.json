{"TopicId":205561,"ForumId":25,"TopicTitle":"Make a turing-complete computer in stock KSP","CreatedByName":"ItCameFromDuna","CreatedById":177164,"CreatedDateTime":"2021-11-09T04:04:53Z","PageNum":1,"Articles":[{"CreatedByName":"ItCameFromDuna","CreatedById":177164,"CreatedDateTime":"2021-11-09T04:04:53Z","Content":"\n\u003Cp\u003E\nHere\u0027s a delightfully nerdy challenge for you geniuses: build a computer (or at least a proof-of-concept) that is Turing-complete in stock KSP (DLC allowed). Here\u0027s the wikipedia article on Turing-completeness to get you started: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Turing_completeness\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://en.wikipedia.org/wiki/Turing_completeness\u003C/a\u003E. Basically, a computer capable of computing anything commutable.\n\u003C/p\u003E\n\u003Cp\u003E\nNumerous games, from Minecraft to Magic the Gathering have proven to be Turing-complete, so I have a question: is KSP? Could you build a complex marble run with mechanical logic gates? Misuse the KAL controller? There are numerous approaches that might work. I\u0027m curious to see what you all come up with!\n\u003C/p\u003E\n"},{"CreatedByName":"camacju","CreatedById":207172,"CreatedDateTime":"2021-11-10T00:01:15Z","Content":"\n\u003Cp\u003E\nIf I remember correctly, you can chain KAL controllers, and make combinational logic out of that. Not sure how you\u0027d implement latches however\n\u003C/p\u003E\n"},{"CreatedByName":"Pds314","CreatedById":70014,"CreatedDateTime":"2021-11-10T08:40:17Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224053141\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636502475\u0022 data-ipsquote-userid=\u0022207172\u0022 data-ipsquote-username=\u0022camacju\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, camacju said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf I remember correctly, you can chain KAL controllers, and make combinational logic out of that. Not sure how you\u0027d implement latches however\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nhmm... RS NOR could be made with a hinge and two\u00A0 continually running Junos as input wires, and a third which the hinge conditionally blocks as an output wire. Inverted output could be a fourth Juno.\n\u003C/p\u003E\n\u003Cp\u003E\nWire multiplexing and repeaters can be achieved by using one Juno to unblock an array of Junos all at once with a plate or comb structure, with the mechanism springloaded by the strength of the hinge to go back to normal if the input gets blocked.\n\u003C/p\u003E\n\u003Cp\u003E\nAn AND gate can be made using two hinges or pistons to block a Juno and then having two blockable input Junos.\n\u003C/p\u003E\n\u003Cp\u003E\nA NOT gate would just be a Juno that blocks another Juno using a springloaded hinge. Two of these could also be used to make a latch.\n\u003C/p\u003E\n\u003Cp\u003E\nAn OR gate would be pretty trivial. Two Junos facing at the same springloaded piston/hinge and a third that is unblocked when force is applied.\n\u003C/p\u003E\n\u003Cp\u003E\nThere could be multiple types of more and less precise clocks, from servos that periodically block Junos, to KALs and more, with a NOT gate feeding into itself (think a sprinkler blocking mechanism) or a trio of NOT Gates in a loop also being an option.\n\u003C/p\u003E\n\u003Cp\u003E\nOne issue I can see is that\u00A0 the write wire for RAM would either need an awful lot of wire multiplexing or a more complicated mechanism so that only the active address can block the beam and then you only need a repeater once every 10 meters.\n\u003C/p\u003E\n\u003Cp\u003E\nOne solution I can think of is to do ram writes the same way as multiplexers. Right, have a bunch of / all of the addresses all open at once and only the one that the addressing logic picks gets written to. Basically using a big shield thing to stop the RAM from being written while the addressing logic is being set.\n\u003C/p\u003E\n\u003Cp\u003E\nNow, as to RAM addressing logic itself, this is a bit tricky. We want basically want each bit of the address to eliminate half the possibilities leaving only one left. I would argue that the easiest way to do this is to push a bunch of increasingly stretched out checkerboard-shaped blockers out of the way. The first being one address wide per checkers square, the second being 2, the third being 4, the fourth being 8, then 16, 32, etc.\n\u003C/p\u003E\n\u003Cp\u003E\nThere would be a tradeoff here in terms of speed and complexity vs address size. Very deep checkerboard blockers would take longer to move up and down or rotate out of the way, so it probably pays to make your ram somewhat compact. Also you probably want to put the blowers for the addressing system near the middle of the RAM for stability.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOne really nice feature of all this is that because engine thrust rays are noncolliding, overlapping wires is trivially easy. This might be good for displays, ribbon cables, GPUs, etc.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nNow that I think about it some more, if you use cheats, then it might generally be better to use the smallest rockets you can rather than a big bulky Juno except in applications where high thrust is needed to quickly move something bulky. And KAL overclocking can actually fix the thrust issue. So maybe ant engines or something set to infinite fuel are preferable to Junos.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIf we want a design that works in zero G, one option would be to use two springloaded NOT gates as the basis for the latch.\n\u003C/p\u003E\n\u003Cp\u003E\nIf we want a design which can operate under acceleration or rotation, then making stronger springloading force and very light blockers might help. In principle, I don\u0027t see any particular limit on the G tolerance in any given direction that a NOT gate can take.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn terms of constructing other gates, a compact XOR gate might be able to be made using a servo and two engines coming from input wires, with a third engine in the middle. The servo would be springloaded to go toward the middle, blocking the thrust from the third engine, and if both or neither input wire is active, would stay there. Otherwise, it would move to one side, allowing the thrust from that engine to go through. One issue here is that the timing of the two inputs needs to be perfect or it will create a short pulse when switching from neither to both. But that\u0027s pretty much true of all XOR gate designs because that\u0027s an intended behavior of XOR gates.\n\u003C/p\u003E\n\u003Cp\u003E\nIf you want to clean up the signal or add a deliberate delay, one option would be to have low power engines, heavy blockers, a long travel distance, and light springloading on a repeater. This will basically average out the signal over a longer period so it can ignore short on/off pulses.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-11-10T10:59:29Z\u0022 title=\u002211/10/2021 10:59  AM\u0022 data-short=\u00222 yr\u0022\u003ENovember 10, 2021\u003C/time\u003E by Pds314\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T12:21:24Z","Content":"\n\u003Cp\u003E\nI\u0027m not a computer guy, so the only measure of Turing completeness I can understand is the overly literal tape and head model of the actual turning machine itself, so I have been thinking about how I would build it.\n\u003C/p\u003E\n\u003Cp\u003E\nI don\u0027t think this will end up using any KAL controllers, except in self contained always-looping components, as unless I am missing something, they cannot be triggered by in-game events.\n\u003C/p\u003E\n\u003Cp\u003E\nAs such, my idea is pretty much entirely mechanical.\n\u003C/p\u003E\n\u003Cp\u003E\nI am thinking of having the \u0022tape\u0022 be a long line of structural pieces with a bistable \u0022flipping\u0022 mechanism. The data would be binary encoded, if the mechanism is on the left, it is a 0, if its on the right, its a 1.\n\u003C/p\u003E\n\u003Cp\u003E\nThis would be read by shooting two engines at a target on the flipping mechanism. Depending on the mechanism, the target would block one of the engine plumes. On the other side of the target there would be two paddles, which would actuate and trigger the program.\n\u003C/p\u003E\n\u003Cp\u003E\nIn order to write to the tape, a mechanism controlled by the program would uncover one of two \u0022flipping\u0022 engines and would set the tape cell to right or left.\n\u003C/p\u003E\n\u003Cp\u003E\nThe program itself could be done any number of ways, and is probably the most complicated part, but the easiest one for me to wrap my head around would be to do something like the following marble machine:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022r/MarbleMachineX - [Suggestion] 8 marble divider - flipping tree\u0022 data-ratio=\u002258.02\u0022 width=\u0022960\u0022 src=\u0022https://preview.redd.it/8sjwdyfa1el01.png?width=960\u0026amp;crop=smart\u0026amp;auto=webp\u0026amp;s=18c92dd95ddb1d7214baa09a3056bc3d7e273241\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThe machine would drop a cylindrical or round fuel tank when directed to, and it would go through the flippers, and at each \u0022exit\u0022 there would be an instruction or combination of instructions. Like for example, the fuel tank could fall onto an arm that activates the \u0022set the current position to 1\u0022 or \u0022set to 0\u0022 or \u0022go right 1\u0022 or \u0022set to 0 then go right 1\u0022 or \u0022Go left until you cannot go left any more\u0022 or something, and the magic would be in the arrangement of the flippers, which would be different for each program. Flippers, because, it would allow for the program to branch depending on what the previous cells did.\n\u003C/p\u003E\n\u003Cp\u003E\nThe right/left actuation could probably be done with a massive gear beneath the tape, but I have not gotten that far yet.\n\u003C/p\u003E\n\u003Cp\u003E\nHere is a proof of concept tape segment and part of the reader/write head:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022spi02wO.png\u0022 data-ratio=\u002290.00\u0022 width=\u00221200\u0022 src=\u0022https://i.imgur.com/spi02wO.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nEdit: Forgot to mention that this would require the infinite fuel and ignore max temperature cheats unless it is well designed.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-11-10T12:22:22Z\u0022 title=\u002211/10/2021 12:22  PM\u0022 data-short=\u00222 yr\u0022\u003ENovember 10, 2021\u003C/time\u003E by Ultimate Steve\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T12:43:40Z","Content":"\n\u003Cp\u003E\nUpdate:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg data-ratio=\u002290.00\u0022 width=\u00221200\u0022 alt=\u0022ZQtxx5A.png\u0022 src=\u0022https://i.imgur.com/ZQtxx5A.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nWriting to the tape is now possible, although it involves user input at the moment (turning the servo on the right). Without any input it will revert back to non writing mode so once I add the automated input method I can keep the current hardware and drop the servo strength to 0.\n\u003C/p\u003E\n"},{"CreatedByName":"Pds314","CreatedById":70014,"CreatedDateTime":"2021-11-10T13:38:26Z","Content":"\n\u003Cp\u003E\nThinking big here, one of the concerns I\u0027ve having is just how truly terrible the part count will be. I doubt practical, addressible RAM can be under 10 parts per bit, with multiple of them being engines or something.\n\u003C/p\u003E\n\u003Cp\u003E\nI originally thought it might be possible to do something like an 8 bit CPU because this stuff would be pretty simple to actually copy and paste all over in the editor and implement pretty sophisticated computer architecture that way. But I\u0027m thinking that would be \u0026gt;10000 parts or some nonsense. Needless to say, that might work with Minecraft but not so much here.\n\u003C/p\u003E\n\u003Cp\u003E\nI think in terms of practical CPUs, saying we\u0027re gonna need it to be a RISC machine is an extreme understatement. I\u0027m not even sure a well-fleshed out 4-bit machine is doable.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-11-10T13:43:20Z\u0022 title=\u002211/10/2021 01:43  PM\u0022 data-short=\u00222 yr\u0022\u003ENovember 10, 2021\u003C/time\u003E by Pds314\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T13:54:10Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224053321\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636551506\u0022 data-ipsquote-userid=\u002270014\u0022 data-ipsquote-username=\u0022Pds314\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 minutes ago, Pds314 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThinking big here, one of the concerns I\u0027ve having is just how truly terrible the part count will be. I doubt practical, addressible RAM can be under 10 parts per bit, with multiple of them being engines or something.\n\u003C/p\u003E\n\u003Cp\u003E\nI originally thought it might be possible to do something like an 8 bit CPU because this stuff would be pretty simple to actually copy and paste all over in the editor and implement pretty sophisticated computer architecture that way. But I\u0027m thinking that would be \u0026gt;10000 parts or some nonsense. Needless to say, that might work with Minecraft but not so much here.\n\u003C/p\u003E\n\u003Cp\u003E\nI think im terms of practical CPUs, saying we\u0027re gonna need it to be a RISC machine is an extreme understatement. I\u0027m not even sure a well-fleshed out 4-bit machine is doable.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah, anything beyond very simple is probably going to require NASA levels of computing power. I will consider my machine a success if I can write a \u0022program\u0022 for it that can add 2\u002B2 (and other 2 bit binary numbers by association) and I\u0027m already looking at several hundred parts just for that.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Pds314","CreatedById":70014,"CreatedDateTime":"2021-11-10T13:57:38Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224053327\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636552450\u0022 data-ipsquote-userid=\u0022161505\u0022 data-ipsquote-username=\u0022Ultimate Steve\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 minutes ago, Ultimate Steve said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYeah, anything beyond very simple is probably going to require NASA levels of computing power. I will consider my machine a success if I can write a \u0022program\u0022 for it that can add 2\u002B2 (and other 2 bit binary numbers by association) and I\u0027m already looking at several hundred parts just for that.\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nMaybe manipulating the the loaded vessel position relative to the root part of multiple crafts to physics unload unnecessary components of the machine in separate crafts could extend the possibilities? No need to completely unload them. Just make it so the game isn\u0027t spending lots of effort calculating physics for, say, a block of RAM that\u0027s currently not in use. It will still render it but it won\u0027t need to do physics for it.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-11-10T14:00:01Z\u0022 title=\u002211/10/2021 02:00  PM\u0022 data-short=\u00222 yr\u0022\u003ENovember 10, 2021\u003C/time\u003E by Pds314\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T14:32:52Z","Content":"\n\u003Cp\u003E\n\u003Cimg data-ratio=\u002290.00\u0022 width=\u00221200\u0022 alt=\u0022VvgSHab.png\u0022 src=\u0022https://i.imgur.com/VvgSHab.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nLast update for a while, I have a class to go to.\n\u003C/p\u003E\n\u003Cp\u003E\nIt now has a few reliability improvements to the read/write head, improvements to the memory (slight brakes, enough so that it can\u0027t spontaneously bit flip, but slight enough that the engines can still change it) and most notably, the tape can now be moved back and forth so different cells can be read or written to.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ll have to make something that will ensure that the gear only moves 48 degrees each time it is actuated, which I\u0027m thinking will be difficult. Then I have to make the gear and write head actuatable by mechanical means, and then I have to actually make it programmable.\n\u003C/p\u003E\n\u003Cp\u003E\nBut good progress in the few hours I spent on it.\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T15:47:43Z","Content":"\n\u003Cp\u003E\nUpdate from class: The marble machine idea for programming is out. I have a new idea, the chute and state idea.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nBasically, there are a certain number of \u0022states\u0022 or mini programs or functions if you will. Each state will have a 0 or 1 sub variation. There will be two ramps (one for 0, one for 1), with a number of trapdoors beneath them. When the current cell is read, a ball will be sent down the 1 or 0 chute depending on if the cell is a 1 or 0. It will then fall down the open trap door (the others will be closed).\n\u003C/p\u003E\n\u003Cp\u003E\nEach set of two trap doors corresponds to a program state. When a ball falls down the trap door, it will strike a number of levers that will mechanically execute various instructions. These instructions are:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nREAD - reads the current cell and will drop a ball down the 0 or 1 ramp depending on the value of the cell.\n\u003C/li\u003E\n\u003Cli\u003E\nLEFT 1 - moves left 1 cell.\n\u003C/li\u003E\n\u003Cli\u003E\nRIGHT 1 - moves right 1 cell.\n\u003C/li\u003E\n\u003Cli\u003E\nSET 1 - set the current cell to a 1.\n\u003C/li\u003E\n\u003Cli\u003E\nSET 0 - set the current cell to a 2.\n\u003C/li\u003E\n\u003Cli\u003E\nFULL RIGHT - go right until a stop block is met.\n\u003C/li\u003E\n\u003Cli\u003E\nFULL LEFT - go left until a stop block is met. These two are a convenient way of not having to do a lot of right or left 1 commands and are not needed but are here to save on time and part count.\n\u003C/li\u003E\n\u003Cli\u003E\nGO TO STATE: Changes the \u0022state\u0022 of the program, closing all trap doors and then opening the two trapdoors corresponding to the desired state.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nBasically, every \u0022state\u0022 is a mini program which will take the value of the current cell and will then execute commands before possibly switching states and then triggering the next read command.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIf I am right, I can do my 2\u002B2 program with a 10 cell long strip and 5 or 6 states.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOf course that was hard to say, and easier said than done.\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-10T17:40:34Z","Content":"\n\u003Cp\u003E\nLatest update, currently on version C10.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg data-ratio=\u002290.00\u0022 width=\u00221200\u0022 alt=\u0022sKfXyvZ.png\u0022 src=\u0022https://i.imgur.com/sKfXyvZ.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nI have added a mechanism that only allows the tape to rotate 48 degrees ish, or one rotation. It works by using a second gear that is rotation limited to about plus or minus 50 degrees. I can tweak this if I find that it oversets or undersets in one direction or the other (currently oversetting going left so I will tweak that limit). However, the issue with not being able to go past 48 degrees is that you can only go one tape position. To fix this, this \u0022Limiting gear\u0022 is toggleable. It is attached to an arm made of flexible parts, and is only engaged with the main gear when an engine is on, pushing it upwards enough for it to engage. When this engine is off, it falls away into a catcher designed to reset it to a neutral zero degree position.\n\u003C/p\u003E\n\u003Cp\u003E\nTo go, say, one to the right, first the engaging engine will fire, raising the limiting gear up. Then, the engine that rotates the main gear to the right will turn on. The gear will rotate, but only as far as the limiting gear will allow, which is equivalent to one tape cell. Then, the rotation engine will be turned off. After that, the engaging engine will also turn off, lowering the gear back down, resetting it.\n\u003C/p\u003E\n\u003Cp\u003E\nThis mechanism also greatly simplified my proposed \u0022FULL RIGHT\u0022 and \u0022FULL LEFT\u0022 actions, as if you just drop the limiting gear out of the way, you can spin the wheel to your heart\u0027s content.\n\u003C/p\u003E\n\u003Cp\u003E\nIt is still not very reliable, I will work on that. It works moving the tape one way but not the other at the moment, but it should be a pretty easy fix, I should just need to more harshly limit the rotation of the limiting gear in one direction.\n\u003C/p\u003E\n\u003Cp\u003E\nThe really good news, though, is that every operation (besides go to state which can\u0027t be added until I have the rest of the machine) is currently implemented and can be controlled by toggling on and off engines. Well, technically read toggle isn\u0027t there yet but it is really easy to add. This is good because the machine itself will activate these operations by blocking engine plumes.\n\u003C/p\u003E\n"},{"CreatedByName":"dnbattley","CreatedById":176526,"CreatedDateTime":"2021-11-11T03:03:50Z","Content":"\n\u003Cp\u003E\nOh my! I\u0027ve been thinking about this for a while now and have some ideas using the KAL approach, and this is all the motivation I need to dust off that prior work and contribute to this.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat are the outcomes we need to achieve to fully realise this: if we can generate and link AND, OR and NOT gates is that enough?\n\u003C/p\u003E\n"},{"CreatedByName":"ItCameFromDuna","CreatedById":177164,"CreatedDateTime":"2021-11-11T05:32:37Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224053622\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636599830\u0022 data-ipsquote-userid=\u0022176526\u0022 data-ipsquote-username=\u0022dnbattley\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, dnbattley said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhat are the outcomes we need to achieve to fully realise this: if we can generate and link AND, OR and NOT gates is that enough?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027d say AND, OR, and NOT (or go with a NAND so you just need one gate) and some proof-of-concept of randomly-accessible memory (probably just a flip-flop or something) or some equivalent would qualify. Obviously I\u0027d love to see a functional computer though.\n\u003C/p\u003E\n"},{"CreatedByName":"camacju","CreatedById":207172,"CreatedDateTime":"2021-11-11T05:51:33Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224053622\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636599830\u0022 data-ipsquote-userid=\u0022176526\u0022 data-ipsquote-username=\u0022dnbattley\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, dnbattley said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhat are the outcomes we need to achieve to fully realise this: if we can generate and link AND, OR and NOT gates is that enough?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou can achieve any combinational logic circuit with NOT gates and at least one of AND and OR. This is called NAND logic or NOR logic. Additionally, you can implement latches just using combinational logic gates and a feedback loop, so really all you need to do is build a NAND/NOR gate. For example, here is a RS-NOR latch:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022330px-R-S_mk2.gif\u0022 class=\u0022ipsImage\u0022 data-ratio=\u002273.03\u0022 height=\u0022241\u0022 width=\u0022330\u0022 src=\u0022https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/R-S_mk2.gif/330px-R-S_mk2.gif\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nFrom a NOR gate you can make all other gates:\n\u003C/p\u003E\n\u003Cp\u003E\nNOT A = A NOR A\u003Cbr\u003E\nA OR B = (A NOR B) NOR (A NOR B)\u003Cbr\u003E\nA AND B = (A NOR A) NOR (B NOR B)\n\u003C/p\u003E\n\u003Cp\u003E\net cetera\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-11T09:23:44Z","Content":"\n\u003Cp\u003E\nOk, so good and bad news:\n\u003C/p\u003E\n\u003Cp\u003E\nGood news, I\u0027ve been working on the program memory.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg data-ratio=\u002290.00\u0022 width=\u00221200\u0022 alt=\u0022GeQcPKK.png\u0022 src=\u0022https://i.imgur.com/GeQcPKK.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThis is the \u0022chute and state\u0022 mechanism as described above. When a RAM cell is read from the strip, it will release an FL-T200 tank down either the right or left side depending on if the cell is a 1 or a 0.\n\u003C/p\u003E\n\u003Cp\u003E\nDepending on what state the program is in, one of the trapdoors will open. Currently, you can see that door number 2 is open (the structural panel by the kickback booster). The fuel tank will fall down this open hole and on the way down will strike a number of levers corresponding to actions, which could be thought of as lines of computer code. These levers are attached to shafts, shown on the right side of the machine. These shafts will rotate when the levers are struck, and the movement will be transferred to the rest of the machine, executing the instructions.\n\u003C/p\u003E\n\u003Cp\u003E\nEach set of 2 shafts corresponds to one of the 7 instructions, so programming can be changed via deleting or adding levers to each state. It could execute all 7 commands in one state, but in practice it won\u0027t, so this poses a problem as the fuel tank can start going fast enough to be destroyed. This is what all of the wings are for. They rotate on a clock controlled by a KAL loop, to slow down the fuel tank and allow time for the commands to execute. Currently it is on a 5 second clock but I will probably need to slow that down. Each one of the wing panels also has a shaft coming off the right hand side although these won\u0027t be used to transfer anything, it was just a convenient place to put it.\n\u003C/p\u003E\n\u003Cp\u003E\nThe bottom lever will change the state and also toggle the reading of the current cell (the read and state commands have been merged). So when the fuel tank reaches the bottom, it will close the trapdoors by shoving the kickback booster forwards, and will open one of the other trapdoors (each one has a twitch engine to open it), so that the next fuel tank will take a different path down the chute.\n\u003C/p\u003E\n\u003Cp\u003E\nSo this block of program memory can hold 8 states, and each state can execute up to 7 instructions, but with no repeats. This is a problem, which leads me to the bad news: A Turing machine should be able to go any number of spaces right or left, and because my move 1 commands cannot be repeated easily, the design as it stands wouldn\u0027t meet the criteria for turing completeness. So, I will have to add some mechanism that can move left and right an arbitrary amount of spaces. I have an idea for how to go about this, but it won\u0027t be elegant.\n\u003C/p\u003E\n\u003Cp\u003E\nMore bad news, this block of program memory is 360 parts. The rest of the machine is at around 200 parts. Seeing as I have so much more to add, it will probably end up at over 1000 parts.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reliability isn\u0027t being great either.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnyway, I wrote up some \u0022code\u0022 for the 2\u002B2 program.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\nInitial state for the strip:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nS \u003Cem\u003E\u003Cu\u003E\u003Cstrong\u003E0\u003C/strong\u003E\u003C/u\u003E\u003C/em\u003E 1 0 1 H 0 0 0 S\n\u003C/p\u003E\n\u003Cp\u003E\nThe bolded number indicates the starting position of the read head.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe S\u0027s are stop blocks, which act as the start and stop points for a program, so I don\u0027t have to always say \u0022Go left 5 spaces\u0022 and \u0022Go left 4 spaces\u0022, I can just say \u0022Go left until you hit a stop block.\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nThe H is a halt block, which will block both read heads, so the program will halt when the halt block is read.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first 2 numbers, 0 and 1, are the first number to be added. The 1s place comes first, followed by the 2s place. This is repeated for the second number to be added, also 0 1. So the stored values are 2 and 2.\n\u003C/p\u003E\n\u003Cp\u003E\nThe three right hand zeros are where the resultant number will be stored. To simplify the program, it is written the opposite way. The 4s place comes first, followed by the 2s place, followed by the 0s place.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nSo without further ado, the code itself:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe code starts with the only manual input, the execution of the only read command.\n\u003C/p\u003E\n\u003Cp\u003E\nNote, go to state implies that the current cell will be read.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nState 1 - Read the 1s place\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nRead\n\u003C/li\u003E\n\u003Cli\u003E\nIf 0:\n\u003Cul\u003E\u003Cli\u003E\nRight 1\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 2\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf 1:\n\u003Cul\u003E\u003Cli\u003E\nSet 0\n\u003C/li\u003E\n\u003Cli\u003E\nFull Right\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 3\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nState 2 - Read the 2s place\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nIf 0:\n\u003Cul\u003E\u003Cli\u003E\nRight 1\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 1\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf 1:\n\u003Cul\u003E\u003Cli\u003E\nSet 0\n\u003C/li\u003E\n\u003Cli\u003E\nFull Right\n\u003C/li\u003E\n\u003Cli\u003E\nLeft 1\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 4\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nState 3 - Add the 1s place\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nIf 0:\n\u003Cul\u003E\u003Cli\u003E\nSet 1\n\u003C/li\u003E\n\u003Cli\u003E\nFull Left\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 1\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf 1:\n\u003Cul\u003E\u003Cli\u003E\nSet 0\n\u003C/li\u003E\n\u003Cli\u003E\nLeft 1\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 4\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nState 4 - Add the 2s place\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nIf 0:\n\u003Cul\u003E\u003Cli\u003E\nSet 1\n\u003C/li\u003E\n\u003Cli\u003E\nFull\u00A0 left\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 1\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf 1:\n\u003Cul\u003E\u003Cli\u003E\nSet 0\n\u003C/li\u003E\n\u003Cli\u003E\nLeft 1\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 9\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nState 5 - Add the 4s place\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nIf 0:\n\u003Cul\u003E\u003Cli\u003E\nSet 1\n\u003C/li\u003E\n\u003Cli\u003E\nFull Left\n\u003C/li\u003E\n\u003Cli\u003E\nGo to state 1\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nIf 1:\n\u003Cul\u003E\u003Cli\u003E\nLeft 1\n\u003C/li\u003E\n\u003Cli\u003E\nIf this happens you have somehow gotten 3\u002B3 to equal more than 7 so the machine is probably broken\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nBasically, the program will first read the 1s place of the first number. If it is a 0, there is no work to be done so it moves on to the 2s place and reads that. But if there is a 1, and a 1 needs to be added, it sets that 1 to a 0 (saying to the program\u0027s future self that it has already been done) and goes over to the 1s place of the third number. If it is 0, it adds 1 and returns to the beginning. If it is a 1, the program sets it to a 0 and goes over to the 2s place. If that is a 0, fantastic, 1\u002B1=10 so it sets it to a 1 and goes back to the beginning. If it is a 1, it carries again over to the 4s place, which is always going to be 0 unless something really bad has happened.\n\u003C/p\u003E\n\u003Cp\u003E\nThe 2s place works similar, except that it skips to the 2s place of number 3. After number 1 is read it goes to number 2 and repeats the process. This goes on until both numbers 1 and 2 are\u00A0 all zeros. At this point, the program would go right one more space and try to read the halt block, stopping. The answer would be read from the tape by eye, and if it works, it should be the sum of the two input numbers.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nEnd state (hopefully):\n\u003C/p\u003E\n\u003Cp\u003E\nS 0 0 0 0\u00A0\u003Cstrong\u003E\u003Cu\u003E\u003Cem\u003EH\u003C/em\u003E\u003C/u\u003E\u003C/strong\u003E\u00A01 0 0 S\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis can add up to 3\u002B3=6. In order to add another binary digit, two more states and 3 more tape cells are needed, so the current 8 state machine could be programmed to add up to 7\u002B7=14. Adding another state could get it to 15\u002B15=30.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOne problem though is that the program has a go left after a full right, so I\u0027d have to find some way to suspend the go left until the full right has been confirmed to be completed. That is easier said than done.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-11T10:10:29Z","Content":"\n\u003Cp\u003E\nHere are some not gates and repeaters I\u0027ve been working on to transfer the signal from the program memory to the machine:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 width=\u0022200\u0022 data-embed-src=\u0022https://www.youtube.com/embed/O00EH91d-FA?feature=oembed\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dnbattley","CreatedById":176526,"CreatedDateTime":"2021-11-11T13:45:18Z","Content":"\n\u003Cp\u003E\nWell... I think it\u0027s fair to say that I had a good evening:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 width=\u0022200\u0022 data-embed-src=\u0022https://www.youtube.com/embed/0iqAOaR4NJ4?feature=oembed\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-11T16:46:12Z","Content":"\n\u003Cp\u003E\nAnother update. I have created a mechanism which can semi reliably loop an action an arbitrary number of times. This will replace the \u0022Right 1\u0022 and \u0022Left 1\u0022 actions with arbitrary \u0022Right N\u0022 and \u0022Left N\u0022 actions. It is currently set up for N to be between 1 and 4, but it can be arbitrarily expanded if your computer has enough power and you are willing to tune it.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg data-ratio=\u002290.00\u0022 width=\u00221200\u0022 alt=\u0022Ezx8z69.png\u0022 src=\u0022https://i.imgur.com/Ezx8z69.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nSo there is a stack of fuel tanks. A hopper will be built to funnel more in, although my 2\u002B2 program will probably not need the capacity. To trigger this machine, the program memory will unblock 1 of the 4 Thud engines off to the left for a short period of time. This will shove a fuel tank over into the second shaft, using an arm which will then retract. This fuel tank will then block a set of engines. The lack of an engine plume will be detected by a not gate and a 4 to 1 funnel which will send a signal to the mechanism that needs to be looped, in this case, the move right and move left mechanisms (not attached yet). The mechanism will send a signal back when it is finished doing what it needs to do, which will then retract the trap doors beneath the fuel tank and immediately snap them back in, allowing the fuel tank to advance one position, where the exact same thing happens again.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen the fuel tank falls out of the bottom of the machine, it will stop looping, so the higher the fuel tank starts, the more times it will loop.\n\u003C/p\u003E\n\u003Cp\u003E\nUnfortunately it is over 150 parts and I need 2 of them.\n\u003C/p\u003E\n\u003Cp\u003E\nSome good news, though, that is every major component unless I decide to redo the program memory to use engine sensors instead of levers.\u00A0 Now I just have the very daunting task of improving reliability and connecting it all together...\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dnbattley","CreatedById":176526,"CreatedDateTime":"2021-11-12T07:45:32Z","Content":"\n\u003Cp\u003E\nMy logic board craft file is now posted here:\u00A0\u003Ca href=\u0022https://kerbalx.com/dnbattley/Logic-test-3\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalx.com/dnbattley/Logic-test-3\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Ultimate Steve","CreatedById":161505,"CreatedDateTime":"2021-11-13T17:22:51Z","Content":"\n\u003Cp\u003E\nI spent several hours today trying to connect the looping mechanism to the main machine, and I did get it to work one time, but there is just so much to go wrong that it is very, very unreliable. The looping machine itself is alright now that I\u0027ve had time to tune it, but the two machines are not playing well with each other.\n\u003C/p\u003E\n\u003Cp\u003E\nThe main culprit is the gear that limits the rotation of the main gear to 48 degrees. It is incredibly inconsistent, and the sequence of events required to lift it into position, wait for it to turn, release it, wait for it to settle down, and then trigger the next loop is too complicated and variable to reliably be done with my current repeaters and other components.\n\u003C/p\u003E\n\u003Cp\u003E\nI think I might redesign the entire tape actuation system to use a piston system instead of a gear system. However, to make this work I might also have to redesign the RAM itself, so this would probably be enough to designate this as the Mk2.\n\u003C/p\u003E\n"},{"CreatedByName":"dnbattley","CreatedById":176526,"CreatedDateTime":"2021-11-14T13:06:35Z","Content":"\n\u003Cp\u003E\nI\u0027ve had a busy, but productive weekend, and proudly present:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 width=\u0022200\u0022 data-embed-src=\u0022https://www.youtube.com/embed/k1wbsP8OGG4?feature=oembed\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"dnbattley","CreatedById":176526,"CreatedDateTime":"2021-11-14T19:33:25Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57838-triggerau/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257838\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57838-triggerau/\u0022 rel=\u0022\u0022\u003E@TriggerAu\u003C/a\u003E: this one\u0027s for you \u003Cspan class=\u0022ipsEmoji\u0022\u003E\u261D\uFE0F\u003C/span\u003E!\n\u003C/p\u003E\n"},{"CreatedByName":"AtomicTech","CreatedById":210823,"CreatedDateTime":"2021-11-15T14:06:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224054972\u0022 data-ipsquote-contentid=\u0022205561\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221636895195\u0022 data-ipsquote-userid=\u0022176526\u0022 data-ipsquote-username=\u0022dnbattley\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 11/14/2021 at 7:06 AM, dnbattley said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027ve had a busy, but productive weekend, and proudly present:\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 frameborder=\u00220\u0022 height=\u0022113\u0022 width=\u0022200\u0022 data-embed-src=\u0022https://www.youtube.com/embed/k1wbsP8OGG4?feature=oembed\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nVery cool!\n\u003C/p\u003E\n"}]}