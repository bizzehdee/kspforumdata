{"TopicId":72301,"ForumId":55,"TopicTitle":"Expanded KSPAddon modes","CreatedByName":"Starstrider42","CreatedById":104043,"CreatedDateTime":"2014-05-13T21:59:30Z","PageNum":1,"Articles":[{"CreatedByName":"Starstrider42","CreatedById":104043,"CreatedDateTime":"2014-05-13T21:59:30Z","Content":"\n\u003Cp\u003EThis is a request to improve the KSP API.\u003C/p\u003E\u003Cp\u003EJust like there\u0027s a flag \u0022KSPAddon.Startup.EditorAny\u0022, which allows a plugin to be loaded in either the VAB or the SPH, it would be nice if there were a flag \u0022KSPAddon.Startup.RealTime\u0022, which would cover scenes in which the game time progresses. At present, there are three such scenes: SpaceCentre, TrackingStation, and Flight. I assume the much-discussed mission control center would also fall under this flag, once implemented.\u003C/p\u003E\u003Cp\u003EThis would greatly streamline developing plugins that need to keep an eye on the game state.\u003C/p\u003E\n"},{"CreatedByName":"ialdabaoth","CreatedById":57270,"CreatedDateTime":"2014-05-13T22:08:43Z","Content":"\n\u003Cp\u003E\u002B1 Please implement.\u003C/p\u003E\n"},{"CreatedByName":"makinyashikino","CreatedById":96244,"CreatedDateTime":"2014-05-13T23:02:28Z","Content":"\n\u003Cp\u003ESound Idea, don\u0027t see why not.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-05-14T04:51:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starstrider42\u0022 data-cite=\u0022Starstrider42\u0022\u003E\u003Cdiv\u003EThis is a request to improve the KSP API.\u003Cp\u003EJust like there\u0027s a flag \u0022KSPAddon.Startup.EditorAny\u0022, which allows a plugin to be loaded in either the VAB or the SPH, it would be nice if there were a flag \u0022KSPAddon.Startup.RealTime\u0022, which would cover scenes in which the game time progresses. At present, there are three such scenes: SpaceCentre, TrackingStation, and Flight. I assume the much-discussed mission control center would also fall under this flag, once implemented.\u003C/p\u003E\u003Cp\u003EThis would greatly streamline developing plugins that need to keep an eye on the game state.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot necessary in my opinion. KSPAddon.Startup enum is treated as a mask, so you can just use logical operators to select the scenes you want:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// Tracking station, space center, flight\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.TrackingStation | KSPAddon.Startup.SpaceCentre | KSPAddon.Startup.Flight, false)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Starstrider42","CreatedById":104043,"CreatedDateTime":"2014-05-14T04:55:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003ENot necessary in my opinion. KSPAddon.Startup enum is treated as a mask, so you can just use logical operators to select the scenes you want:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// Tracking station, space center, flight\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.TrackingStation | KSPAddon.Startup.SpaceCentre | KSPAddon.Startup.Flight, false)]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHave you actually gotten this to work? I\u0027ve inspected the KSPAddon.Startup values and they do NOT appear to be bit flags.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-05-14T09:09:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Starstrider42\u0022 data-cite=\u0022Starstrider42\u0022\u003E\u003Cdiv\u003EHave you actually gotten this to work? I\u0027ve inspected the KSPAddon.Startup values and they do NOT appear to be bit flags.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re right! It worked for the thing I was doing at the time, but due to dumb luck apparently. Strange choice by Squad. Maybe I can redeem myself. I came up with this (public domain, KSPAddonFixed by Majiir):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[AttributeUsage(AttributeTargets.Class)]\u003Cbr\u003Einternal class KSPAddonImproved : Attribute\u003Cbr\u003E{\u003Cbr\u003E    [Flags]\u003Cbr\u003E    public enum Startup\u003Cbr\u003E    {\u003Cbr\u003E        // KSPAddon.Startup values:\u003Cbr\u003E        /*  Instantly = -2,\u003Cbr\u003E\t        EveryScene,\u003Cbr\u003E\t        EditorAny = -3,\u003Cbr\u003E\t        MainMenu = 2,\u003Cbr\u003E\t        Settings,\u003Cbr\u003E\t        SpaceCentre = 5,\u003Cbr\u003E\t        Credits = 4,\u003Cbr\u003E\t        EditorVAB = 6,\u003Cbr\u003E\t        EditorSPH = 9,\u003Cbr\u003E\t        Flight = 7,\u003Cbr\u003E\t        TrackingStation,\u003Cbr\u003E\t        PSystemSpawn = 10\u003Cbr\u003E        */\u003Cbr\u003E\u003Cbr\u003E        None = 0,\u003Cbr\u003E        MainMenu = 1 \u0026lt;\u0026lt; 0,\u003Cbr\u003E        Settings = 1 \u0026lt;\u0026lt; 1,\u003Cbr\u003E        SpaceCenter = 1 \u0026lt;\u0026lt; 2,\u003Cbr\u003E        Credits = 1 \u0026lt;\u0026lt; 3,\u003Cbr\u003E        EditorVAB = 1 \u0026lt;\u0026lt; 4,\u003Cbr\u003E        EditorSPH = 1 \u0026lt;\u0026lt; 5,\u003Cbr\u003E        Flight = 1 \u0026lt;\u0026lt; 6,\u003Cbr\u003E        TrackingStation = 1 \u0026lt;\u0026lt; 7,\u003Cbr\u003E        PSystemSpawn = 1 \u0026lt;\u0026lt; 8,\u003Cbr\u003E        Instantly = 1 \u0026lt;\u0026lt; 9,\u003Cbr\u003E\u003Cbr\u003E        EditorAny = EditorVAB | EditorSPH,\u003Cbr\u003E        TimeElapses = Flight | TrackingStation | SpaceCenter,\u003Cbr\u003E        RealTime = TimeElapses,\u003Cbr\u003E        EveryScene = ~0\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public bool runOnce;\u003Cbr\u003E    public Startup scenes;\u003Cbr\u003E\u003Cbr\u003E    public KSPAddonImproved(Startup mask, bool once = false)\u003Cbr\u003E    {\u003Cbr\u003E        runOnce = once;\u003Cbr\u003E        scenes = mask;\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E/// \u0026lt;summary\u0026gt;\u003Cbr\u003E/// KSPAddon with equality checking using an additional type parameter. Fixes the issue where AddonLoader prevents multiple start-once addons with the same start scene.\u003Cbr\u003E/// By Majiir\u003Cbr\u003E/// \u0026lt;/summary\u0026gt;\u003Cbr\u003Epublic class KSPAddonFixed : KSPAddon, IEquatable\u0026lt;KSPAddonFixed\u0026gt;\u003Cbr\u003E{\u003Cbr\u003E    private readonly Type type;\u003Cbr\u003E\u003Cbr\u003E    public KSPAddonFixed(KSPAddon.Startup startup, bool once, Type type)\u003Cbr\u003E        : base(startup, once)\u003Cbr\u003E    {\u003Cbr\u003E        this.type = type;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override bool Equals(object obj)\u003Cbr\u003E    {\u003Cbr\u003E        if (obj.GetType() != this.GetType()) { return false; }\u003Cbr\u003E        return Equals((KSPAddonFixed)obj);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public bool Equals(KSPAddonFixed other)\u003Cbr\u003E    {\u003Cbr\u003E        if (this.once != other.once) { return false; }\u003Cbr\u003E        if (this.startup != other.startup) { return false; }\u003Cbr\u003E        if (this.type != other.type) { return false; }\u003Cbr\u003E        return true;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override int GetHashCode()\u003Cbr\u003E    {\u003Cbr\u003E        return this.startup.GetHashCode() ^ this.once.GetHashCode() ^ this.type.GetHashCode();\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E// note: this needs to be KSPAddonFixed; don\u0027t change it\u003Cbr\u003E[KSPAddonFixed(KSPAddon.Startup.Instantly, true, typeof(CustomAddonLoader))]\u003Cbr\u003Einternal class CustomAddonLoader : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    // What\u0027s improved? The KSPAddon.Startup is now a bitmask so you can\u003Cbr\u003E    // use logical operations to specify which scenes you want your addon\u003Cbr\u003E    // to be loaded in\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    // master list to keep track of addons in our assembly\u003Cbr\u003E    List\u0026lt;AddonInfo\u0026gt; addons = new List\u0026lt;AddonInfo\u0026gt;();\u003Cbr\u003E    private string _identifier;\u003Cbr\u003E\u003Cbr\u003E    // Mainly required so we can flag addons when they\u0027ve\u003Cbr\u003E    // been created in the case of runOnce = true\u003Cbr\u003E    class AddonInfo\u003Cbr\u003E    {\u003Cbr\u003E        public readonly Type type;\u003Cbr\u003E        public readonly KSPAddonImproved addon;\u003Cbr\u003E        public bool created;\u003Cbr\u003E\u003Cbr\u003E        internal AddonInfo(Type t, KSPAddonImproved add)\u003Cbr\u003E        {\u003Cbr\u003E            type = t;\u003Cbr\u003E            created = false;\u003Cbr\u003E\u003Cbr\u003E            addon = add;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        internal bool RunOnce\u003Cbr\u003E        {\u003Cbr\u003E            get\u003Cbr\u003E            {\u003Cbr\u003E                return addon.runOnce;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        internal KSPAddonImproved.Startup Scenes\u003Cbr\u003E        {\u003Cbr\u003E            get\u003Cbr\u003E            {\u003Cbr\u003E                return addon.scenes;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    void Awake()\u003Cbr\u003E    {\u003Cbr\u003E        DontDestroyOnLoad(this);\u003Cbr\u003E\u003Cbr\u003E        // multiple plugins using this source will create their own instances\u003Cbr\u003E        // of the loader; the log can get confusing pretty fast without some\u003Cbr\u003E        // way of telling them apart\u003Cbr\u003E        _identifier = System.Reflection.Assembly.GetExecutingAssembly().GetName().Name \u002B \u0022.\u0022 \u002B GetType().ToString();\u003Cbr\u003E\u003Cbr\u003E        // examine our assembly for loaded types\u003Cbr\u003E        foreach (var ourType in System.Reflection.Assembly.GetExecutingAssembly().GetTypes())\u003Cbr\u003E        {\u003Cbr\u003E            var attr = ((KSPAddonImproved[])ourType.GetCustomAttributes(typeof(KSPAddonImproved), true)).SingleOrDefault();\u003Cbr\u003E            if (attr != null)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(string.Format(\u0022Found KSPAddonImproved in {0}\u0022, ourType.FullName));\u003Cbr\u003E                addons.Add(new AddonInfo(ourType, attr));\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        // special case here: since we\u0027re already in the first scene,\u003Cbr\u003E        // OnLevelWasLoaded won\u0027t be invoked so we need to fire off any\u003Cbr\u003E        // \u0022instant\u0022 loading addons now\u003Cbr\u003E        OnLevelWasLoaded((int)GameScenes.LOADING);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    void OnLevelWasLoaded(int level)\u003Cbr\u003E    {\u003Cbr\u003E        GameScenes scene = (GameScenes)level;\u003Cbr\u003E        KSPAddonImproved.Startup mask = 0;\u003Cbr\u003E\u003Cbr\u003E        if (scene == GameScenes.LOADINGBUFFER)\u003Cbr\u003E            return;\u003Cbr\u003E\u003Cbr\u003E        Debug.Log(string.Format(\u0022{1}: {0} was loaded; instantiating addons...\u0022, scene.ToString(), _identifier));\u003Cbr\u003E\u003Cbr\u003E        // Convert GameScenes =\u0026gt; SceneMask\u003Cbr\u003E        switch (scene)\u003Cbr\u003E        {\u003Cbr\u003E            case GameScenes.EDITOR:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.EditorVAB;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.SPH:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.EditorSPH;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.CREDITS:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.Credits;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.FLIGHT:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.Flight;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.LOADING:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.Instantly;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.MAINMENU:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.MainMenu;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.SETTINGS:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.Settings;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.SPACECENTER:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.SpaceCenter;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.TRACKSTATION:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.TrackingStation;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.PSYSTEM:\u003Cbr\u003E                mask = KSPAddonImproved.Startup.PSystemSpawn;\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            case GameScenes.LOADINGBUFFER:\u003Cbr\u003E                // intentionally left unset\u003Cbr\u003E                break;\u003Cbr\u003E\u003Cbr\u003E            default:\u003Cbr\u003E                Debug.LogError(string.Format(\u0022{1} unrecognized scene: {0}\u0022, scene.ToString(), _identifier));\u003Cbr\u003E                break;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        int counter = 0;\u003Cbr\u003E\u003Cbr\u003E        for (int i = 0; i \u0026lt; addons.Count; \u002B\u002Bi)\u003Cbr\u003E        {\u003Cbr\u003E            var addon = addons[i];\u003Cbr\u003E\u003Cbr\u003E            if (addon.created \u0026amp;\u0026amp; addon.RunOnce)\u003Cbr\u003E                continue; // this addon was already loaded\u003Cbr\u003E\u003Cbr\u003E            // should this addon be initialized in current scene?\u003Cbr\u003E            if ((addon.Scenes \u0026amp; mask) != 0)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(string.Format(\u0022ImprovedAddonLoader: Creating addon \u0027{0}\u0027\u0022, addon.type.Name));\u003Cbr\u003E                GameObject go = new GameObject(addon.type.Name);\u003Cbr\u003E                go.AddComponent(addon.type);\u003Cbr\u003E\u003Cbr\u003E                addon.created = true;\u003Cbr\u003E                \u002B\u002Bcounter;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        Debug.Log(string.Format(\u0022{1} finished; created {0} addons\u0022, counter, _identifier));\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt\u0027s basically a drop-in replacement for KSPAddon. Include the source and change your KSPAddons into KSPAddonImproveds\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//[KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003E[KSPAddonImproved(KSPAddonImproved.Startup.RealTime | KSPAddonImproved.Startup.EditorAny /* and so on */, false)]\u003Cbr\u003Epublic class SingleTest : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    public void Start()\u003Cbr\u003E    {\u003Cbr\u003E        Log.Warning(\u0022Test has run\u0022);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt might do in the meantime\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-14T09:55:23Z\u0022 title=\u002205/14/2014 09:55  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 14, 2014\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"}]}