{"TopicId":67238,"ForumId":36,"TopicTitle":"Action Groups Extended Development Thread and External Interface","CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-30T16:26:42Z","PageNum":1,"Articles":[{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-03-30T16:26:42Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003E\u003Cstrong\u003EAs of KSP 1.0 I need to overhaul this thread. Please see the External.cs code page on my GitHub for external commands supported in the current version of AGX.\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#FF0000;\u0022\u003E\u003Cstrong\u003EExternal Interface undergoing overhaul. Please confirm with me directly before using the methods below as some of them are changing.\u003C/strong\u003E\u003C/span\u003E (Jan 04/15)\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cstrong\u003EAction Groups Extended external interface for version 1.20a or newer (Update Dec. 04/14)\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EWelcome and thank you for looking at integrating your mod with mine. If you have any questions or need a hand please feel free to leave a message.\u003C/p\u003E\u003Cp\u003EI have this setup so that you don\u0027t have to make a hard dependency on AGX so you only have to maintain one version of your mod. Rather, this interface uses reflection so your mod can dynamically determine if AGX is installed when KSP starts.\u003C/p\u003E\u003Cp\u003EHowever, that means you need to copy-paste some code into your own mod for this to work. Copy the code inside the code blocks in its entirety for the function you want to add to your mod.\u003C/p\u003E\u003Cp\u003EFirst, make some room in the same namespace as your mod so your code can call the methods I paste below and make sure it is using System.Reflection (on the next line after the using UnityEngine works good).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine; //already present for you own mod\u0027s use\u003Cbr\u003Eusing System.Reflection; //make sure this line is present so AGX\u0027s reflection interface works.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote that AGX supports all action groups so you can handle groups 1 through 10 through AGX if it is installed. However, if you want you can send action commands for groups 1 through 10 to default KSP and AGX will still work correctly.\u003C/p\u003E\u003Cp\u003EThere are 11 methods current offered (as of Version 1.20a) as follows:\u003C/p\u003E\u003Cp\u003EIs AGX installed? This method returns a bool, true if AGX is installed, false if not. Use this as a gate so your code knows if action groups 11 through 250 are present or not.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static bool AGExtInstalled()\u003Cbr\u003E        {\u003Cbr\u003E            try //try-catch is required as the below code returns a NullRef if AGX is not present.\u003Cbr\u003E{\u003Cbr\u003EType calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            return (bool)calledType.InvokeMember(\u0022AGXInstalled\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, null);\u003Cbr\u003E}\u003Cbr\u003Ecatch\u003Cbr\u003E{\u003Cbr\u003Ereturn false;\u003Cbr\u003E}\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EToggle an action group on the vessel that has focus. This works for all groups including groups 1-10 so you can send all action commands to AGX, although AGX is compatible with default KSP so action commands from groups 1 through 10 can be sent either place. Does not return anything. Pass group to toggle as int.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic void AGExtToggleGroup(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            calledType.InvokeMember(\u0022AGXToggleGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group });\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EActivate or Deactivate an action group on current vessel. Note that AGX tracks actions individually within a group and that trying to activate an action that is already activated will do nothing. Pass group to activate as int, forceDir as true to force activate, forceDir as false to force deactivate.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic void AGXActivateGroup(int group, bool forceDir)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E           calledType.InvokeMember(\u0022AGXActivateGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group, forceDir });\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs an action group activated on the current vessel? Note that AGX tracks individual actions to see if they are activated, not action groups. On an action group with multiple actions assigned, this function returns false if all actions are deactivated and true if any (but not necessarily all) actions are activated.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic bool AGXGroupState(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            bool GroupAct = (bool)calledType.InvokeMember(\u0022AGXGroupState\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group});\u003Cbr\u003E            return GroupAct;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGet a list of actions in a specific group on the current vessel. Returns a List\u0026lt;BaseAction\u0026gt; object. Pass group to get actions from as int.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic List\u0026lt;BaseAction\u0026gt; AGXGroupActions(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;BaseAction\u0026gt; RetActs = (List\u0026lt;BaseAction\u0026gt;)calledType.InvokeMember(\u0022AGXGroupActions\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EReturn a list of all assigned actions on the current vessel. Note this does not return which group the actions are in at the moment. (Current priority is to return the group as well but have not quite figured it out yet.) Returns a List\u0026lt;BaseAction\u0026gt; object and does not take any parameters.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic List\u0026lt;BaseAction\u0026gt; AGXAllActions()\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;BaseAction\u0026gt; RetActs = (List\u0026lt;BaseAction\u0026gt;)calledType.InvokeMember(\u0022AGXAllActions\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe following methods are the same as above, except they take a FlightID parameter (as uint) for which vessel to use. This parameter is found at Vessel.rootPart.FlightID and passing the vessel that currently has focus is acceptable. Note that these methods return a bool, if true the command completed, if false there was something wrong. Most likely the vessel was out of physics range and so unloaded and AGX could not activate the actions it was asked too. Note that if AGX is passed a group with no assigned actions to activate, it will return true for sucsessful even though it did not actually activate anything.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic bool AGX2VslToggleGroup(uint FlightID, int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            bool GroupAct = (bool)calledType.InvokeMember(\u0022AGX2VslToggleGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { FlightID, group });\u003Cbr\u003E            return GroupAct;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003Epublic bool AGX2VslActivateGroup(uint FlightID, int group, bool forceDir)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            bool GroupAct = (bool)calledType.InvokeMember(\u0022AGX2VslActivateGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { FlightID, group, forceDir });\u003Cbr\u003E            return GroupAct;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003Epublic bool AGX2VslGroupState(uint FlightID, int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            bool GroupAct = (bool)calledType.InvokeMember(\u0022AGX2VslGroupState\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { FlightID, group });\u003Cbr\u003E            return GroupAct;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003Epublic List\u0026lt;BaseAction\u0026gt; AGExtGet2VslGroupActions(uint FlightID, int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;BaseAction\u0026gt; RetActs = (List\u0026lt;BaseAction\u0026gt;)calledType.InvokeMember(\u0022AGX2VslGroupActions\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { FlightID, group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003Epublic List\u0026lt;BaseAction\u0026gt; AGExtGet2VslAllActions(uint FlightID)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;BaseAction\u0026gt; RetActs = (List\u0026lt;BaseAction\u0026gt;)calledType.InvokeMember(\u0022AGX2VslAllActions\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { FlightID });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote I am planning to expand this, notably to allow activation by group name instead of group number but I am unsure on how quickly I can add those methods.\u003C/p\u003E\u003Cp\u003EThere is a self-contained module with it\u0027s source \u003Ca href=\u0022https://github.com/SirDiazo/AGExt/blob/master/AGExt/OSK.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E that I used for testing where you can see how things actually worked for me.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003Cp\u003Eedit: THis still needs documentation:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E public static List\u0026lt;Part\u0026gt; AGX2VslPartsWithActions(uint flightID, int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;Part\u0026gt; RetActs = (List\u0026lt;Part\u0026gt;)calledType.InvokeMember(\u0022AGX2VslListOfPartsInGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] {flightID, group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003Cbr\u003E        public static List\u0026lt;PartModule\u0026gt; AGX2VslPartModulesWithActions(uint flightID, int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;PartModule\u0026gt; RetActs = (List\u0026lt;PartModule\u0026gt;)calledType.InvokeMember(\u0022AGX2VslListOfPartModulesInGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] {flightID, group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static List\u0026lt;Part\u0026gt; AGXPartsWithActions(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;Part\u0026gt; RetActs = (List\u0026lt;Part\u0026gt;)calledType.InvokeMember(\u0022AGXListOfPartsInGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003Cbr\u003E        public static List\u0026lt;PartModule\u0026gt; AGXPartModulessWithActions(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            List\u0026lt;PartModule\u0026gt; RetActs = (List\u0026lt;PartModule\u0026gt;)calledType.InvokeMember(\u0022AGXListOfPartModulesInGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group });\u003Cbr\u003E            return RetActs;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-03T13:23:33Z\u0022 title=\u002205/03/2015 01:23  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 3, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-29T05:04:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ETo activate an action group, pass the following method the action group to activate as an integer:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic void AGExtActivateGroup(int group)\u003Cbr\u003E        {\u003Cbr\u003E            Type calledType = Type.GetType(\u0022ActionGroupsExtended.AGExtExternal, AGExt\u0022);\u003Cbr\u003E            calledType.InvokeMember(\u0022AGXActivateGroup\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { group });\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmm.. the stock action groups operate by being settable to true OR settable to false by passing in a boolean flag. When you press the action group hotkeys 1-9, they actually in fact TOGGLE the action group\u0027s state. (If you press 1 twice, action group 1 goes from false to true to false again).\u003C/p\u003E\u003Cp\u003EkOS makes use of that by binding the action groups to magic variable names, so you can, for example do \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset AG1 to true.\u003Cbr\u003Eset AG1 to false.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m not sure how to implement something like \u003Cem\u003Eset ag11 to false\u003C/em\u003E with what you\u0027re describing. I can activate it (set it to true) but how do I de-activate it?\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-29T13:38:44Z","Content":"\n\u003Cp\u003EOh, hmmm.\u003C/p\u003E\u003Cp\u003EThe method I linked to \u0027activate\u0027 an actiongroup is actually the toggle method. It\u0027s smart enough that if the group is deactivated, it activates it, if activated it deactivates it. Effectively passing that method group 5 is the same as hitting the 5 key on the keyboard. (Poor choice of wording on my part to use activate there.)\u003C/p\u003E\u003Cp\u003EAs for your current setup, I don\u0027t expose \u0027activate\u0027 or \u0027deactivate\u0027 methods at the moment. It will be really quick to do so, it will just have to wait until I\u0027m home from work.\u003C/p\u003E\u003Cp\u003EI think you are actually the first person to interface externally like this, I will have to ask you to put up with being my tester for it and finding all these things I overlooked. \u003C/p\u003E\u003Cp\u003EThanks for the feedback,\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-29T17:43:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EOh, hmmm.\u003Cp\u003EThe method I linked to \u0027activate\u0027 an actiongroup is actually the toggle method. It\u0027s smart enough that if the group is deactivated, it activates it, if activated it deactivates it. Effectively passing that method group 5 is the same as hitting the 5 key on the keyboard. (Poor choice of wording on my part to use activate there.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, then technically it should be possible to do it with the API that\u0027s there already (although I do think it would be a really good idea to change the name of the AGExtActivateGroup() method to AGExt\u003Cstrong\u003EToggle\u003C/strong\u003EGroup(), which shouldn\u0027t be a problem with backward compatibility if nobody else but me has looked at your API yet).\u003C/p\u003E\u003Cp\u003EIf I have access to a toggle method and a query method, then I can use them together to implement a \u0022set to true\u0022 and \u0022set to false\u0022, as follows:\u003C/p\u003E\u003Cp\u003EnewVal is the new desired value for the action group, either True or False:\u003C/p\u003E\u003Cp\u003E- If (query-the-action-group != newVal), then toggle-the-action-group.\u003C/p\u003E\u003Cp\u003E- else do nothing.\u003C/p\u003E\u003Cp\u003EThanks for the information. \u003C/p\u003E\u003Cp\u003EI\u0027m normally reluctant to insert code into kOS designed to *specifically* support exception cases for another particular mod, because I think that crosses a line that can be dangerous given the vast plethora of mods out there. If each pairing of mods had merely 1 line of code in either of the mods of the pair that makes one exception for the other, that would cause the existence of N factorial number of lines, where N is the number of mods existing. It\u0027s the full-connectivity network graph problem.\u003C/p\u003E\u003Cp\u003EBut, action groups are *SO* integral to using kOS and *SO* tightly connected to it, that I think making an exception to enable more action groups is worth it.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-29T17:50:48Z\u0022 title=\u002207/29/2014 05:50  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 29, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-29T17:57:56Z","Content":"\n\u003Cp\u003EFirst, thank you for making an exception for my mod. Actually, I think doing so will provide indirect support for other mods as for most mods, they can assign that mods action to one of my action groups and then activate the mod that way rather then needing a dedicated kOS line of code. \u003C/p\u003E\u003Cp\u003EWon\u0027t work for all mods of course, but I would think it would for a lot of them.\u003C/p\u003E\u003Cp\u003EOn the method call to operate an action group, my first thought was to add an integer for operation type.\u003C/p\u003E\u003Cp\u003ESo:\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EAGExtActivateGroup(1, 0); //toggle group 1\u003Cbr\u003EAGExtActivateGroup(1, 1); //activate group 1\u003Cbr\u003EAGExtActivateGroup(1, 2); //deactivate group 1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI was originally going to leave the method as is and add a second method that took a true/false to operate (for activate/deactivate), but that would be another method you have to copy into your code. I\u0027d rather keep it so that you only have to copy a single activation method, even if it makes it more complex, then make you copy-paste multiple activation methods into your code.\u003C/p\u003E\u003Cp\u003EI don\u0027t know of a way in C# to have different overloads without making multiple methods so this is the best way I can think of at the moment to have a single method to operate an action group for all three cases (toggle, activate, deactivate).\u003C/p\u003E\u003Cp\u003EOr do you want me to set it up as 3 methods? \u003C/p\u003E\u003Cp\u003ESo:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EAGExtToggleGroup(1); //toggle group 1\u003Cbr\u003EAGExtActivateGroup(1); //activate group 1\u003Cbr\u003EAGExtDeactivateGroup(1); //deactivate group 1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis means you would have to copy 3 methods instead of 1 into your code though. Either way, the method\u0027s syntax is going to change once I get home and can tweak this for you so please don\u0027t go too far on your end yet.\u003C/p\u003E\u003Cp\u003EHowever, as the one interfacing from outside my mod, what are your current thoughts on what you want to see? I am going to have methods available to toggle/activate/deactivate an action group, it\u0027s just a matter of what the best way to present it is.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-29T18:12:42Z\u0022 title=\u002207/29/2014 06:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 29, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-29T18:22:04Z","Content":"\n\u003Cp\u003EHmm, I\u0027m not really clear on why we have to cut-n-paste code in the first place, rather than calling a method from your DLL.\u003C/p\u003E\u003Cp\u003EIs it because you didn\u0027t want to make the method Static?\u003C/p\u003E\u003Cp\u003EI think it would be a lot cleaner to have a static method we have to pass-in the reference to our \u0022this\u0022 as an argument, rather than cut-n-paste code from you to us.\u003C/p\u003E\u003Cp\u003Ei.e. this:\u003C/p\u003E\u003Cp\u003EAGExtToggleGroup(this, 1). // toggle group 1 on me.\u003C/p\u003E\u003Cp\u003EAs to needing 3 different methods, I really think you can collapse the Activate and Deactivate into one method that takes a boolean like so:\u003C/p\u003E\u003Cp\u003EAGExtSetGroup(11, true); // activate group 11.\u003C/p\u003E\u003Cp\u003EAGExtSetGroup(11, false); // de-activate group 11.\u003C/p\u003E\u003Cp\u003E(or if you use the static method passing \u0022this\u0022, as shown above, it would be:)\u003C/p\u003E\u003Cp\u003EAGExtSetGroup(this, 11, true); // activate group 11.\u003C/p\u003E\u003Cp\u003EAGExtSetGroup(this, 11, false); // de-activate group 11.\u003C/p\u003E\u003Cp\u003EI\u0027m not really a C# expert. I only started using C# *because* wanted to join the kOS devs. Prior to that I did do a lot of Java and C\u002B\u002B, though, so a lot of what C# does was immediately intuitive and obvious to me as it borrowed from those two languages extensively. But it is a bit less flexible about a lot of things, in ways that I find annoying and arrogant on the part of Microsoft (\u0022because there are ways to misuse this language feature, we\u0027ll disable it, thus preventing all the legitimate good uses of this language feature too\u0022).\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-29T18:35:58Z","Content":"\n\u003Cp\u003EOkay, we are now getting into areas where I\u0027m not 100% sure of my answers. I\u0027m just a guy on the internet and the KSP mods I\u0027ve done are my entire effective programming experience.\u003C/p\u003E\u003Cp\u003E1) Cut and paste code\u003C/p\u003E\u003Cp\u003EI understood that this was necessary to avoid having to compile 2 version of kOS. You can certainly directly link to my .dll if you want. (I think the methods are public? I have no problem with making them public if the are not.)\u003C/p\u003E\u003Cp\u003EThe downside is that if you hard-link like that, if my mod is \u003Cem\u003Enot\u003C/em\u003E present, that version of kOS will error and not load when KSP asks it to.\u003C/p\u003E\u003Cp\u003EThe workaround for this is Reflection with is where the .calledType and .invoke stuff comes from. That means you only have to maintain one version of kOS.\u003C/p\u003E\u003Cp\u003E2) Static method and \u0027this\u0027.\u003C/p\u003E\u003Cp\u003ESorry, totally over my head. I know what a static method is, but I don\u0027t understand how the \u0027this\u0027 keyword comes into play here.\u003C/p\u003E\u003Cp\u003EAre you talking about different vessels? One limitation of AGX is that it is for the currently active vessel, the one returned by FlightGlobals.ActiveVessel (I can add support for nearby vessels if that is something kOS does, but it will have to wait until I finish moving my data storage over to the scenarioModule.)\u003C/p\u003E\u003Cp\u003E3) Number of methods\u003C/p\u003E\u003Cp\u003ESo you\u0027d like to see AGXToggleGroup(1) and AGXSetGroup(1,true) as the methods used to operate action groups? Works for me.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-29T19:28:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EOkay, we are now getting into areas where I\u0027m not 100% sure of my answers. I\u0027m just a guy on the internet and the KSP mods I\u0027ve done are my entire effective programming experience.\u003Cp\u003E1) Cut and paste code\u003C/p\u003E\u003Cp\u003EI understood that this was necessary to avoid having to compile 2 version of kOS. You can certainly directly link to my .dll if you want. (I think the methods are public? I have no problem with making them public if the are not.)\u003C/p\u003E\u003Cp\u003EThe downside is that if you hard-link like that, if my mod is \u003Cem\u003Enot\u003C/em\u003E present, that version of kOS will error and not load when KSP asks it to.\u003C/p\u003E\u003Cp\u003EThe workaround for this is Reflection with is where the .calledType and .invoke stuff comes from. That means you only have to maintain one version of kOS.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think erendrake should look over this issue, as he\u0027s more experienced with how you do Reflection in C#. Let\u0027s leave the question of whether it\u0027s cut-n-paste alone for the time being. I\u0027ll bring it up with him later.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E2) Static method and \u0027this\u0027.\u003C/p\u003E\u003Cp\u003ESorry, totally over my head. I know what a static method is, but I don\u0027t understand how the \u0027this\u0027 keyword comes into play here.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s a common means of making a static method behave LIKE it was a dynamic one. If you pass in a reference to \u0027this\u0027, and have the static method use that \u0027this\u0027 reference, you can make the static method operate on that instance of the object.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// a non-static function that prints the fields myField1 and myFielld2:\u003Cbr\u003Epublic void PrintStuff()\u003Cbr\u003E{\u003Cbr\u003E    Debug.Log( myField1 \u002B \u0022, \u0022 \u002B myField2);\u003Cbr\u003E}\u003Cbr\u003E// The same thing done with a static function instead:\u003Cbr\u003Epublic static void PrintStuff2( TheType theObj )\u003Cbr\u003E{\u003Cbr\u003E    Debug.Log( theObj.myField1 \u002B \u0022, \u0022 \u002B theObj.myField2);\u003Cbr\u003E}    \u003Cbr\u003E// Now, instead of saying:\u003Cbr\u003E//   this.PrintStuff()\u003Cbr\u003E// you can get the same exact effect from:\u003Cbr\u003E//   PrintStuff2( this );\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe point is that it lets you use a static method in places where it\u0027s required (like a delegate callback), while still actually operating on the instance of an object rather than operating globally like static methods usually do.\u003C/p\u003E\u003Cp\u003EIn this way I wouldn\u0027t have to add your member function to my class with cut-n-paste. Instead I\u0027d call your static method, and pass it a reference to my class instance (\u0027this\u0027).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAre you talking about different vessels? One limitation of AGX is that it is for the currently active vessel, the one returned by FlightGlobals.ActiveVessel (I can add support for nearby vessels if that is something kOS does, but it will have to wait until I finish moving my data storage over to the scenarioModule.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmm... that will be a problem with kOS. We\u0027ve been trying very hard to make it possible to run kOS scripts on more than one vessel at the *same time* without switching between them with the \u0027[\u0027 and \u0027]\u0027 keys. (So you can have two vessels, each running a docking program, where each vessel helps point itself toward its partner vessel, for example - or have two vessels leapfrogging over each other across the landscape, for example, or launch two robotic fire-and-forget missiles and have them both flying at the same time.) To accomplish this, we had to almost entirely eradicate \u0022FlightGlobals.ActiveVessel\u0022 from our thinking - because the vessel on which the kOS script is running cannot be assumed to always be the vessel the player has active. Granted, it typically does have to be within 2.5 km of the active vessel, or it gets unloaded and kOS can\u0027t function, but it should be possible for vessels near enough to your active vessel to be loaded to be running kOS scripts.\u003C/p\u003E\u003Cp\u003EThus we\u0027d need for there to be some way to tell AGX which vessel we meant. We can\u0027t just always assume a kOS script is running on the ActiveVessel.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E3) Number of methods\u003C/p\u003E\u003Cp\u003ESo you\u0027d like to see AGXToggleGroup(1) and AGXSetGroup(1,true) as the methods used to operate action groups?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah that seems fine.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-29T19:43:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI think erendrake should look over this issue, as he\u0027s more experienced with how you do Reflection in C#. Let\u0027s leave the question of whether it\u0027s cut-n-paste alone for the time being. I\u0027ll bring it up with him later.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWorks for me. What I have I pretty much hacked together so I know it works, but I have no clue how \u0027correct\u0027 it is for what I\u0027m trying to accomplish with it.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIt\u0027s a common means of making a static method behave LIKE it was a dynamic one. If you pass in a reference to \u0027this\u0027, and have the static method use that \u0027this\u0027 reference, you can make the static method operate on that instance of the object.\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// a non-static function that prints the fields myField1 and myFielld2:\u003Cbr\u003Epublic void PrintStuff()\u003Cbr\u003E{\u003Cbr\u003E    Debug.Log( myField1 \u002B \u0022, \u0022 \u002B myField2);\u003Cbr\u003E}\u003Cbr\u003E// The same thing done with a static function instead:\u003Cbr\u003Epublic static void PrintStuff2( TheType theObj )\u003Cbr\u003E{\u003Cbr\u003E    Debug.Log( theObj.myField1 \u002B \u0022, \u0022 \u002B theObj.myField2);\u003Cbr\u003E}    \u003Cbr\u003E// Now, instead of saying:\u003Cbr\u003E//   this.PrintStuff()\u003Cbr\u003E// you can get the same exact effect from:\u003Cbr\u003E//   PrintStuff2( this );\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe point is that it lets you use a static method in places where it\u0027s required (like a delegate callback), while still actually operating on the instance of an object rather than operating globally like static methods usually do.\u003C/p\u003E\u003Cp\u003EIn this way I wouldn\u0027t have to add your member function to my class with cut-n-paste. Instead I\u0027d call your static method, and pass it a reference to my class instance (\u0027this\u0027).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, k. Neat trick that I will have to remember.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EHmm... that will be a problem with kOS. We\u0027ve been trying very hard to make it possible to run kOS scripts on more than one vessel at the *same time* without switching between them with the \u0027[\u0027 and \u0027]\u0027 keys. (So you can have two vessels, each running a docking program, where each vessel helps point itself toward its partner vessel, for example - or have two vessels leapfrogging over each other across the landscape, for example, or launch two robotic fire-and-forget missiles and have them both flying at the same time.) To accomplish this, we had to almost entirely eradicate \u0022FlightGlobals.ActiveVessel\u0022 from our thinking - because the vessel on which the kOS script is running cannot be assumed to always be the vessel the player has active. Granted, it typically does have to be within 2.5 km of the active vessel, or it gets unloaded and kOS can\u0027t function, but it should be possible for vessels near enough to your active vessel to be loaded to be running kOS scripts.\u003Cp\u003EThus we\u0027d need for there to be some way to tell AGX which vessel we meant. We can\u0027t just always assume a kOS script is running on the ActiveVessel.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, I will keep this in mind while I move my data over to the scenarioModule. I\u0027m pretty sure I already know how to implement running an action group on a loaded, but non-focused, vessel with my new data structure.\u003C/p\u003E\u003Cp\u003EI assume that changing the call so that calls made to AGX are \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EAGXToggleGroup(Vessel, Group); //Vessel as vessel object, Group as int for action group to toggle\u003C/pre\u003E\u003Cp\u003E would not be an issue?\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-29T19:47:06Z\u0022 title=\u002207/29/2014 07:47  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 29, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-29T19:44:20Z","Content":"\n\u003Cp\u003EOh, by the way if it\u0027s going to take you a while to get around to this, no hurry. I\u0027m not in a position to be ready on my side to implement it yet anyway, as I\u0027m working on other bugs first. Just remind me with a PM when you\u0027ve got something for me to try.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-29T19:54:11Z","Content":"\n\u003Cp\u003EWill do.\u003C/p\u003E\u003Cp\u003EIt will be a while on my end, I\u0027ve just started moving from saving data from partModule to scenarioModule so I need to get that done before I look at doing anything to the external interface methods.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"}]}