{"TopicId":79554,"ForumId":36,"TopicTitle":"[0.90] TestFlight [0.4.6.1][04FEB15] -Configurable, extensible, parts research \u0026amp; reliability system","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-07-26T00:33:29Z","PageNum":4,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-02T18:46:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003ELooks like we crossed posts. I updated my prior message.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks. Is your custom failure module working with 0.1.0 as well?\u003C/p\u003E\u003Cp\u003EI\u0027ve reproduced the bugs on my dev build so i\u0027ll push a release out soon that fixes things up.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eincluding interfering with other KSP windows\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan I get more details on this please?\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI have tracked down both the issue with the MSD not showing failures, as well as why the configs are bad. The MSD update is already fixed, and I am working on fixing the configs right now. Once that is done I will push a 0.2.1 patch.\u003C/p\u003E\n"},{"CreatedByName":"kujuman","CreatedById":28299,"CreatedDateTime":"2015-01-02T18:54:31Z","Content":"\n\u003Cp\u003EIn both 0.1.0 and 0.2.0, I\u0027ve attempted to add a custom failure module, basically a direct copy of failure_explode for now. The game is not finding the module.\u003C/p\u003E\u003Cp\u003EModule Manager addition\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E MODULE\u003Cbr\u003E {\u003Cbr\u003E  name = TestFlightFailure_Turbopump\u003Cbr\u003E  failureTitle = Turbopump sync error\u003Cbr\u003E  failureType = mechanical\u003Cbr\u003E  severity = major\u003Cbr\u003E  weight = 32\u003Cbr\u003E }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]System;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]System.Collections.Generic;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]System.Linq;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]System.Text;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]System.Threading.Tasks;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]KSP;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]UnityEngine;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]using [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]TestFlightAPI;[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]namespace [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]TestFlight[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]{\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]public [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]class [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af]TestFlightFailure_Turbopump[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2] : [/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af]TestFlightFailureBase[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af]\u003Cbr\u003E[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]    {\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]public [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]override[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff] void[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2] DoFailure()[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E        }\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af][FONT=Consolas][SIZE=2][COLOR=#2b91af]Debug[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2].Log([/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#a31515][FONT=Consolas][SIZE=2][COLOR=#a31515][FONT=Consolas][SIZE=2][COLOR=#a31515]\u0022Turbopump sync error detected!\u0022[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]);[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E        }\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]public [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]override [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]bool[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2] CanAttemptRepair()[/SIZE][/FONT][/SIZE][/FONT]\u003Cbr\u003E[FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]        {\u003Cbr\u003E      [/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]return [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]false[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2];\u003Cbr\u003E}[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]public [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]override [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]bool[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2] AttemptRepair()[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E        {\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]return [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]false[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2];[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E       }\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]private [/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff][FONT=Consolas][SIZE=2][COLOR=#0000ff]void[/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][/COLOR][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2] FailPump()[/SIZE][/FONT][/SIZE][/FONT][FONT=Consolas][SIZE=2][FONT=Consolas][SIZE=2]\u003Cbr\u003E{\u003Cbr\u003E;\u003Cbr\u003E}\u003Cbr\u003E}\u003Cbr\u003E}\u003Cbr\u003E[/SIZE][/FONT][/SIZE][/FONT]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe error from KSP\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[ERR 12:50:48.691] Cannot find a PartModule of typename \u0027TestFlightFailure_Turbopump\u0027\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI just need to fiddle some more getting it to work, I\u0027m very much guess and check at this point. The .dll this compiles to is being put in GameData\\TestFlight\\ right now, I\u0027ll keep trying new locations and namespaces etc until I get success. Don\u0027t worry about it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EOn the GUI issues, I\u0027ve reinstalled 0.2.0, and they are no longer there. I also got rid of some other mods in the install, so I probably was misattributing them. The bug was the prevention of KSP windows (the Esc menu, Alt-F2 menu, and the Alt-F12 menu) from appearing, which in my experience was nullref in the GUI from a mod (they were the bane of AdvSRB for a while).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-02T18:57:29Z\u0022 title=\u002201/02/2015 06:57  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 2, 2015\u003C/time\u003E by kujuman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-02T19:01:19Z","Content":"\n\u003Cp\u003EI haven\u0027t yet done a full test of the API from outside my project completely, although inside my project the existing core modules are actually a sub project that link the API .dll file, so its roughly the same thing.\u003C/p\u003E\u003Cp\u003EJust to clarify the obvious, you are referencing the TestFlightAPI.dll in your project? The error you are getting from KSP implies that KSP is not loading the PartModule. I would troll through the startup sequence in your log and see if your DLL is even getting loaded. That\u0027s where I would start anyway.\u003C/p\u003E\u003Cp\u003EOne thing I had planned to do, and forgot, was build a completely separate example module project as a quickstart for modders. So I will do that as well.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EOn the GUI issues, I\u0027ve reinstalled 0.2.0, and they are no longer there. I also got rid of some other mods in the install, so I probably was misattributing them. The bug was the prevention of KSP windows (the Esc menu, Alt-F2 menu, and the Alt-F12 menu) from appearing, which in my experience was nullref in the GUI from a mod (they were the bane of AdvSRB for a while). \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell the bug with the MSD not updating when certain types of failures occured was causing an NRE.\u003C/p\u003E\n"},{"CreatedByName":"kujuman","CreatedById":28299,"CreatedDateTime":"2015-01-02T19:26:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EI haven\u0027t yet done a full test of the API from outside my project completely, although inside my project the existing core modules are actually a sub project that link the API .dll file, so its roughly the same thing.\u003Cp\u003EJust to clarify the obvious, you are referencing the TestFlightAPI.dll in your project? The error you are getting from KSP implies that KSP is not loading the PartModule. I would troll through the startup sequence in your log and see if your DLL is even getting loaded. That\u0027s where I would start anyway.\u003C/p\u003E\u003Cp\u003E \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, TestFlightAPI.dll is being referenced. KSP appears to load it fine \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[LOG 14:03:21.673] Load(Assembly): /TestFlight_Failures_01\u003Cbr\u003E[LOG 14:03:21.674] AssemblyLoader: Loading assembly at C:\\Program Files (x86)\\KSP 0.90 DEV\\GameData\\TestFlight_Failures_01.dll\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd still \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[ERR 14:04:01.739] Cannot find a PartModule of typename \u0027TestFlightFailure_Turbopump\u0027\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve never used interfaces or anything, so I wouldn\u0027t be surprised if I\u0027m screwing up something there. My assumption is that KSP is failing to recognize TestFlightFailure_Turbopump as a PartModule, but like I said, I have no idea how interfaces work \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#808080;\u0022\u003E---Edit---\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EI\u0027m going to check if there\u0027s anything in the Alt-F12 screen\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#808080;\u0022\u003E--Edit 2---\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003EFound the issue!\u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003E My .dll was loading into KSP before TestFlightAPI.dll, and so it was cleaned up when the loader couldn\u0027t find the base class. The module appears to work in game now \u003C/span\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EI renamed my .dll to zzTestFlight_Failures_01.dll and placed it in the same folder as TestFlightAPI.dll to get it to load. Now to making the module do some fun times \u003C/span\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-02T19:38:46Z\u0022 title=\u002201/02/2015 07:38  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 2, 2015\u003C/time\u003E by kujuman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-02T20:05:41Z","Content":"\n\u003Cp\u003EMy guess at this point would be that it isn\u0027t inheriting from TestFlightFailureBase properly. Though that makes no sense because it wouldn\u0027t even compile in that case. Perplexing.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E--Edit 2---\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003EFound the issue!\u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003E My .dll was loading into KSP before TestFlightAPI.dll, and so it was cleaned up when the loader couldn\u0027t find the base class. The module appears to work in game now \u003C/span\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EI renamed my .dll to zzTestFlight_Failures_01.dll and placed it in the same folder as TestFlightAPI.dll to get it to load. Now to making the module do some fun times \u003C/span\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAwesome! And now I feel slightly bad because that did occur to me earlier then when I was typing up a response I forgot to ask that! Damned senior moments. I think it might be best for me to make the TestFlightAPI.dll be _TestFlightAPI.dll then.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ENew Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.1 \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EAlpha\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EChange Log\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Ev0.2.1 Alpha Release\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EFixed Master Status Display not showing some failures\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EFixed configs for stock parts\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T00:50:45Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003Ev0.2.1 experimental 1\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1e1\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/v0.2.1e1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EThis is an EXPERIMENTAL release.\u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E Experimental releases are very much \u0022development snapshots\u0022 and are released for the express purpose of getting user feedback or testing on a very specific bug or feature that is being worked on. \u003C/span\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EIf testing an experimental release, please limit feedback to the scope of that release.\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EThis is an alpha release and thus should be assumed to be buggy, and capable of breaking your game and game saves.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EExperimental release of the new reworked GUI. This is still very much a WIP. This release adds a settings GUI and enables the user to modify TestFlight settings directly in the UI. Settings are saved as you update them.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EAdded new GUI system courtesy of **TriggerAu**\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAdded new Settings dropdown to the TestFlight Window. This panel will allow you to modify all global TestFlight settings.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T04:38:12Z","Content":"\n\u003Cp\u003EFYI something I forgot to mention. GUI Experimental 1 is a test of functionality, not appearance. What I am looking for here is feedback on the usability of the new UI. Experimental 2\u0027s focus with be on looks.\u003C/p\u003E\n"},{"CreatedByName":"razark","CreatedById":32993,"CreatedDateTime":"2015-01-04T06:22:07Z","Content":"\n\u003Cp\u003EI\u0027ve been running 0.2.1 for a few flights now.\u003C/p\u003E\u003Cp\u003E1. Failures seem to be rather frequent. Is this how it should be, or is it something that you\u0027re planning on toning down later?\u003C/p\u003E\u003Cp\u003E2. I\u0027ve seen fuel tank leaks and engine thrust loss. I previously had problems with the small capsule, but now it doesn\u0027t even show the debug option. Did I break something, or was this intentional?\u003C/p\u003E\u003Cp\u003E3. Failures are now showing on the main panel. I\u0027m wondering if it might be possible to have an option to suppress display of parts that have not failed, to avoid clutter.\u003C/p\u003E\u003Cp\u003E4. Is there any thought on tying this into the contract system? It would make a lot more sense than the current part testing contracts. Maybe a \u0022Get us \u003Cem\u003EX\u003C/em\u003E amount of data from part \u003Cem\u003EY\u003C/em\u003E in \u003Cem\u003EZ\u003C/em\u003E environment\u0022.\u003C/p\u003E\u003Cp\u003E5. Is there any thought on tying this into the science system? For every so much flight data you return, you get so many science points.\u003C/p\u003E\u003Cp\u003EThe new UI in v0.2.1.e1:\u003C/p\u003E\u003Cp\u003EI\u0027ve had no problem \u003C/p\u003E\u003Cp\u003EIt moves! (But it doesn\u0027t stay in the new location.)\u003C/p\u003E\u003Cp\u003EWhat is the \u0022Enable HUD in Flight Scene\u0022 option? Some of the items have mouse-over descriptions, but this was one that did not.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T08:14:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003EI\u0027ve been running 0.2.1 for a few flights now.\u003Cp\u003E1. Failures seem to be rather frequent. Is this how it should be, or is it something that you\u0027re planning on toning down later?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is something that is really hard to say. I know what you mean and I haven\u0027t figured out how to approach it yet. The way it works right now is every X period of time, it polls all the parts for a potential failure based on reliability and if they fail that check, then they get a random failure. Problem is if you are checking for a failure say every 30 seconds, then even something with say 80% reliability has a lot of chances to potentially fails.\u003C/p\u003E\u003Cp\u003EIn the new UI you will see that you can change the time between failure checks, and one way to \u0022make it easier\u0022 is to simply make it check less often. I\u0027m not sure if that is the solution or not though. On the other hand, I could do something like it has to fail 2 checks before it fails, or something like that but then you start stepping on the whole reliability system.\u003C/p\u003E\u003Cp\u003Etl;dr I don\u0027t have a solid answer for you but i\u0027d love input and thoughts on the matter.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E2. I\u0027ve seen fuel tank leaks and engine thrust loss. I previously had problems with the small capsule, but now it doesn\u0027t even show the debug option. Did I break something, or was this intentional?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo it being on the capsule was actually a mistake and fixed in 0.2.1\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003E3. Failures are now showing on the main panel. I\u0027m wondering if it might be possible to have an option to suppress display of parts that have not failed, to avoid clutter.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is actually the intention behind the upcoming Flight HUD which you mention below. The in flight HUD will be a very condensed view only showing failures.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003E4. Is there any thought on tying this into the contract system? It would make a lot more sense than the current part testing contracts. Maybe a \u0022Get us \u003Cem\u003EX\u003C/em\u003E amount of data from part \u003Cem\u003EY\u003C/em\u003E in \u003Cem\u003EZ\u003C/em\u003E environment\u0022.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI hadn\u0027t thought about, and in fact TestFlight was conceived of long before contracts were added, that but its a neat idea. At the moment I know nothing about how contracts work in the API, but I will look into it. Can I possibly get you to submit that as a feature request on GitHub so I don\u0027t forget?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003E5. Is there any thought on tying this into the science system? For every so much flight data you return, you get so many science points.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat could get OP pretty quickly I think, but let me do some thinking on the matter.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022razark\u0022 data-cite=\u0022razark\u0022\u003E\u003Cdiv\u003EThe new UI in v0.2.1.e1:\u003Cp\u003EI\u0027ve had no problem \u003C/p\u003E\u003Cp\u003EIt moves! (But it doesn\u0027t stay in the new location.)\u003C/p\u003E\u003Cp\u003EWhat is the \u0022Enable HUD in Flight Scene\u0022 option? Some of the items have mouse-over descriptions, but this was one that did not.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGuess I forgot to save the window position \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E See above for the info on the HUD.\u003C/p\u003E\u003Cp\u003EThanks for your detailed feedback. Very much appreciated!\u003C/p\u003E\n"},{"CreatedByName":"kujuman","CreatedById":28299,"CreatedDateTime":"2015-01-04T09:41:36Z","Content":"\n\u003Cp\u003E0.2.1 Ex1\u003C/p\u003E\u003Cp\u003EIn addition to the two points by razark (the gui not staying put is particularly an issue since it can get in the way of KSP windows (example, the AppLauncher and the show options panel button interferes with the staging list in the VAB)\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u201C\u00C2\u00BAGlobal Reliability Modifier: This wasn\u0027t intuitive for me, I was expecting it to be a multiplier like some of the other settings, so when it went negative I became very...concerned. It took me a bit to realize that it added percentage points to reliability. So a setting of -25 would turn a 100% reliable part into 75% reliable? And a 50% reliable part into 25%? It makes sense for it to be additive (so a 100% reliable part could be changed to being 99% etc., but I just had a bit of a time figuring this out.\u003C/p\u003E\u003Cp\u003EEDIT: Just set this at 25, and now the MSD is reporting reliabilities at like 1500% - 2000%, so now I think it\u0027s a multiplier?\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u201C\u00C2\u00BAI do like that the options drop-down is persistent between scenes\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u201C\u00C2\u00BAFlying the default KerbalX, the MSD still was jittery with the options panel open; with the options open, the MSD was longer than my resolution height (I think 1600x900).\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EThis is something that is really hard to say. I know what you mean and I haven\u0027t figured out how to approach it yet. The way it works right now is every X period of time, it polls all the parts for a potential failure based on reliability and if they fail that check, then they get a random failure. Problem is if you are checking for a failure say every 30 seconds, then even something with say 80% reliability has a lot of chances to potentially fails.\u003Cp\u003EIn the new UI you will see that you can change the time between failure checks, and one way to \u0022make it easier\u0022 is to simply make it check less often. I\u0027m not sure if that is the solution or not though. On the other hand, I could do something like it has to fail 2 checks before it fails, or something like that but then you start stepping on the whole reliability system.\u003C/p\u003E\u003Cp\u003Etl;dr I don\u0027t have a solid answer for you but i\u0027d love input and thoughts on the matter.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have some ideas on this. I don\u0027t really have the statistics background to make the math work \u003Cem\u003Eoff the top of my head\u003C/em\u003E, but if given a bit of time I could probably make it work.\u003C/p\u003E\u003Cp\u003E1) Failures should not be constant rate for some items, particularly ones that \u0022start\u0022. For example, engines have a very high risk of not starting correctly, but once they are stabilized (0-6 seconds or whatever), the risk of failure is pretty low. Fuel tanks and similar items that don\u0027t \u0022start\u0022 maybe need a constant risk of failure.\u003C/p\u003E\u003Cp\u003E2) The current system of failures means that when failures do occur, they tend to occur in packs. This is sorta desirable, I\u0027d imagine that a failure would increase the risk of failures for some time. So if a vessel experiences a MAJOR failure, maybe bump the vessel failure rate up by 25% for 3 seconds or something?\u003C/p\u003E\u003Cp\u003E3) The concept used in real life for reliability is Mean Time Between Failures (MTBF). Fuel tanks maybe should have a MTBF and a StandardDeviation rating rather than a %.\u003C/p\u003E\u003Cp\u003E3.1) MTBF calculations would be divided into periods.\u003C/p\u003E\u003Cp\u003E3.2) We assume (for simplicity) that actual failure times are normally distributed around MTBF for certain items (like fuel tanks).\u003C/p\u003E\u003Cp\u003E3.a) At the start of a period, the partmodule rolls a random number (0-1), this is our P-value\u003C/p\u003E\u003Cp\u003E3.\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E Use the P-value to reverse-lookup a z-value from a normal table (see the example 2 under the table here \u003Ca href=\u0022http://www.normaltable.com/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.normaltable.com/\u003C/a\u003E)\u003C/p\u003E\u003Cp\u003E3.c) Multiply the z-value by the StandardDeviation in the partmodule to determine the failure offset time from MTBF.\u003C/p\u003E\u003Cp\u003E3.d) Save the FailureTime as UT.\u003C/p\u003E\u003Cp\u003E3.e) At FailureTime, roll to determine which failure occurs, and do the failure.\u003C/p\u003E\u003Cp\u003E3.f) After the failure is repaired (or at launch), start again at 3.a\u003C/p\u003E\u003Cp\u003EExample:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EA fuel tank has a MTBF of 1500 seconds and a StandardDeviation of 300 seconds.\u003Cbr\u003E\u003Cbr\u003EWhen the fuel tank is launched (or activated, or whatever), roll a random number, 0-1. We rolled a 0.236. Our p-value is 0.236 ([I]3.a[/I])\u003Cbr\u003E\u003Cbr\u003ELookup (we may be able to compute this as well, there probably is a Math function on the system) the z-value from our p-value. (For reference, normaltable.com only goes 0.5 -\u0026gt; 1, so we do 1 - 0.236 = 0.764, and multiply the z-value by -1). The z-value of 0.764 is right about 0.72. We multiply by -1 to evaluate 0.236, and our z-value is -0.72. ([I]3.b[/I])\u003Cbr\u003E\u003Cbr\u003E-0.72 * 300 is -216. -216 is the failure offset time from MTBF ([I]3.c[/I])\u003Cbr\u003E\u003Cbr\u003EFailureTime is UT \u002B MTBF \u002B Failure offset time. If we just launched a new file, UT is 0 seconds. 0 \u002B 1500 \u002B (-216) = 1284. Save 1284 in the part module. ([I]3.d[/I])\u003Cbr\u003E\u003Cbr\u003ENot sure the most efficient way to do this in game, but when UT (the master time in KSP) reaches 1284 (21m24s after liftoff), roll a failure using the way it\u0027s already done. ([I]3.e[/I]) \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI have some ideas about using FloatCurves (or AnimationCurves, same thing really) for more complicated cases such as part activation, but you get the idea. For things that cycle like solar panels, a duty limit might make sense, so instead of a mean time between failures, we evaluate mean cycles between failures. Same math and concept, just without worrying about the clock.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#808080;\u0022\u003E---EDIT---\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ll look at it more later, and this is also so I don\u0027t lose it, but an open source (not sure of license) stats package is at \u003Ca href=\u0022https://github.com/mathnet/mathnet-numerics/tree/master/src/Numerics/Distributions\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/mathnet/mathnet-numerics/tree/master/src/Numerics/Distributions\u003C/a\u003E It looks chock full of things. The exponential distribution looks like it\u0027d be good for engines.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-04T09:57:15Z\u0022 title=\u002201/04/2015 09:57  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 4, 2015\u003C/time\u003E by kujuman\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T19:16:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E0.2.1 Ex1\u003C/p\u003E\u003Cp\u003EIn addition to the two points by razark (the gui not staying put is particularly an issue since it can get in the way of KSP windows (example, the AppLauncher and the show options panel button interferes with the staging list in the VAB)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo what you are saying is that in the VAB it is too far to the right? I will look into that (in addition to letting the window be moved properly)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u201C\u00C2\u00BAGlobal Reliability Modifier: This wasn\u0027t intuitive for me, I was expecting it to be a multiplier like some of the other settings, so when it went negative I became very...concerned. It took me a bit to realize that it added percentage points to reliability. So a setting of -25 would turn a 100% reliable part into 75% reliable? And a 50% reliable part into 25%? It makes sense for it to be additive (so a 100% reliable part could be changed to being 99% etc., but I just had a bit of a time figuring this out.\u003C/p\u003E\u003Cp\u003EEDIT: Just set this at 25, and now the MSD is reporting reliabilities at like 1500% - 2000%, so now I think it\u0027s a multiplier?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIs it indeed supposed to be a straight \u002B/- modifier. At -25% your reliability should be 75% on a 100% reliable part. So what you are seeing is definitely a bug.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u20AC\u201C\u00C2\u00BAFlying the default KerbalX, the MSD still was jittery with the options panel open; with the options open, the MSD was longer than my resolution height (I think 1600x900).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoh that isn\u0027t good. I will make it so that the window has a maximum height and scrolls if it needs more space.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E1) Failures should not be constant rate for some items, particularly ones that \u0022start\u0022. For example, engines have a very high risk of not starting correctly, but once they are stabilized (0-6 seconds or whatever), the risk of failure is pretty low. Fuel tanks and similar items that don\u0027t \u0022start\u0022 maybe need a constant risk of failure.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe idea was that reliability modules would take care of this by increasing or decreasing the aggregate reliability under certain conditions. So for example if an engine is throttled higher or is under higher heat loads, a reliability module might penalize the overall reliability. It could also do the same thing for initial ignition.. sort of. Since parts are only polled every so often, that wouldn\u0027t work quite as expected. \u003C/p\u003E\u003Cp\u003EI like your ideas on a MTBF system except I fear it makes things over complicated, and it is also hard to fit into the game play, because your calculated UT offset might occur when the part isn\u0027t even on an active vessel. \u003C/p\u003E\u003Cp\u003EAll these ideas are good, but would require some major refactoring of the system. Now i\u0027m not against doing that, and I am not going to dismiss good ideas just because they mean more work, or major changes to my \u0022vision\u0022 so let me spend some time mulling over things, and see how it works out. I know for one thing I don\u0027t currently like how failures tend to happen in batches, so i\u0027d like to introduce some variability in that anyhow.\u003C/p\u003E\u003Cp\u003EOn the flip side I will point out how failures were extremely common especially in the early days of unmanned rocketry. Look at RTV-G-4 Bumper with 3 successful flights out of 8, or Vanguard, 3 successes out of 11 launches. I look at something like this page (\u003Ca href=\u0022http://www.windows2universe.org/space_missions/unmanned_table.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.windows2universe.org/space_missions/unmanned_table.html\u003C/a\u003E) and I think it captures exactly what I am trying to provide. At the top of the list, the early launches, you have lots of failed missions and as you get farther down the list, more and more missions start succeeding. But even then there are the occasional failures, and even to this day they still happen every now and then.\u003C/p\u003E\u003Cp\u003EI think those early days of your space program should be will sprinkled with problems such as stages not igniting, or thrust being lower than expected, antennas not deploying, and yes big explosions every now and then \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E That is what I am striving to provide and with everyone\u0027s great ideas I think we will get there \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ELet me spend some time thinking on ways of reworking the system to be a bit more fun and dynamic.\u003C/p\u003E\n"},{"CreatedByName":"kujuman","CreatedById":28299,"CreatedDateTime":"2015-01-04T20:51:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003ELet me spend some time thinking on ways of reworking the system to be a bit more fun and dynamic.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh, I wasn\u0027t even aware of the reliability modules. I think if the core system is able to receive instant failures from reliability modules on parts, then there\u0027s no need to change anything. Maybe a public method in the core module; FailSinglePart(Part) could roll the failure mode. A reliability module could then call FailSinglePart(this.part) so the failure doesn\u0027t have to wait until the update timer (this may be what you had in mind, I didn\u0027t read through the code yet). I think that\u0027d allow the best of both worlds, since a reliability module could do MTBFs.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T21:40:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003EOh, I wasn\u0027t even aware of the reliability modules. I think if the core system is able to receive instant failures from reliability modules on parts, then there\u0027s no need to change anything. Maybe a public method in the core module; FailSinglePart(Part) could roll the failure mode. A reliability module could then call FailSinglePart(this.part) so the failure doesn\u0027t have to wait until the update timer (this may be what you had in mind, I didn\u0027t read through the code yet). I think that\u0027d allow the best of both worlds, since a reliability module could do MTBFs.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah the problem is right now it doesn\u0027t work that way \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Currently the system is essentially a \u0022pull\u0022 model rather than a \u0022push\u0022. Everything is controlled by the Scenario which polls all the parts and asks for an update. I did it that way planning to eventually support TestFlight on ALL craft not just the active vessel. Unfortunately after some research it turns out that really isn\u0027t doable. So TestFlight will have to be restricted to the active vessel, and thus I Can rework the system to a \u0022Push\u0022 model instead, which will allow things to work like we are talking about, and more.\u003C/p\u003E\u003Cp\u003ESo once I am finished with the GUI rewrite, i\u0027m going to get everything merged back in, stabilized a bit, then break off into another dev branch to rework the system to a push based system.\u003C/p\u003E\n"},{"CreatedByName":"razark","CreatedById":32993,"CreatedDateTime":"2015-01-04T22:05:12Z","Content":"\n\u003Cp\u003EThis is just a quick observation from last night, as I haven\u0027t tried to replicate it. I loaded a ship on the pad, and then paused to go do something for a few minutes. When I got back and unpaused, I noticed that \u003Cem\u003Eevery\u003C/em\u003E part showed a failure status. It seems as though the failure polling is still taking place while the game is paused on an active ship.\u003C/p\u003E\u003Cp\u003EI\u0027m loading up the game to see if I can replicate it.\u003C/p\u003E\u003Cp\u003EEdit:\u003C/p\u003E\u003Cp\u003ESame vehicle I was using for tests last night, but now I\u0027m getting \u0022TestFlight is not currently tracking any vessels.\u0022\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-04T22:17:56Z\u0022 title=\u002201/04/2015 10:17  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 4, 2015\u003C/time\u003E by razark\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-04T22:34:13Z","Content":"\n\u003Cp\u003EWhen you say paused, you mean you had the menu open? I think this might be a consequence of the \u0022pull\u0022 system as I outlined above. The part is probably being polled anyway because the game doesn\u0027t really pause.\u003C/p\u003E\n"},{"CreatedByName":"razark","CreatedById":32993,"CreatedDateTime":"2015-01-04T22:48:10Z","Content":"\n\u003Cp\u003EHit \u0022Esc\u0022, and sit there with the \u0022Resume/Space Center/Revert\u0022 options.\u003C/p\u003E\u003Cp\u003EHrm. And now I\u0027ve gone from \u0022not tracking vessel\u0022 to showing two failures.\u003C/p\u003E\n"},{"CreatedByName":"mysteriosmind","CreatedById":128626,"CreatedDateTime":"2015-01-05T19:46:31Z","Content":"\n\u003Cp\u003EHow about only checking for a failure, when there is some change in situation that could result in that failure, instead of checking in regular intervals? So for a rocket engine the system checks for a failure every time you start/stop, accelerate/decelerate the engine, its temperature changes a lot (either by use or getting really cold in space), g-forces changing a lot, it running at full throttle for a long time, it moving into a strong magnetic field (Jool, Kerbol), the outside pressure changing, etc. ... A system like that would take away a bit of the randomness of the failures while at the same time making them meaner, as you are more likely to encounter them when you use a part.\u003C/p\u003E\u003Cp\u003EAs for earlier missions ending in failures more often, how about having more than one reliability value? Like you got the part value you already use, that goes up relatively fast, then one for the part class (like all Liquid fuel\u002BOxidizer engines) that takes longer to go up and maybe even a third one for your entire space program that takes really long to change. The chance for a failure would then take them all into account. That way the reliability goes up the longer you play while suffering a penalty to it when trying out untested technologies (new part classes).\u003C/p\u003E\u003Cp\u003EOhh and here are a few more failures I thought of (just ignore those that have been mentioned before):\u003C/p\u003E\u003Cp\u003E- Engine throttle being locked in place (you can\u0027t accelerate/decelerate, nor turn it off)\u003C/p\u003E\u003Cp\u003E- Docking port failing to engage (you get it in the moment they normally connect and have to repair it before you can make another attempt)\u003C/p\u003E\u003Cp\u003E- Structural failures (basically the part blowing up) for all parts when going really fast in the atmosphere (drag) or pressure getting really high or colliding at a lower speed than the normal crash tolerance\u003C/p\u003E\u003Cp\u003E- Everything that uses electric charge using a lot more than normally\u003C/p\u003E\u003Cp\u003E- Batteries losing a certain amount of the max charge \u003C/p\u003E\u003Cp\u003E- Batteries not being able to recharge\u003C/p\u003E\u003Cp\u003E- Fuel tanks having the fuel flow to the engine interrupted (the engine acting as if no fuel is left, even though there is)\u003C/p\u003E\u003Cp\u003E- electric circuit being interrupted, so that electric charge can\u0027t flow through a certain part until fixed (maybe instead of just electric charge it could happen for every resource)\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-06T02:00:15Z","Content":"\n\u003Cp\u003EUltimately I don\u0027t think you\u0027re going to be able to avoid the literature on reliability analysis if you want something that feels \u0022right.\u0022 You at least need to use Bayes\u0027 Theorem to set it up so the update rate doesn\u0027t change the number of failures per hour.\u003C/p\u003E\u003Cp\u003EThe wiki page is a decent start: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Failure_rate\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Failure_rate\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis random Powerpoint is okay: \u003Ca href=\u0022http://www.wilsonconsultingservices.net/MTBF_M2.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.wilsonconsultingservices.net/MTBF_M2.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe simplest way that would give good results would be to report the reliability of each part as MTBF, with a constant hazard rate derived from that (2000 hours MTBF = 0.0005 failures/hour = 1.39e-7 failures/sec). That\u0027s an exponential failure density, which is fine. If you want to be fancy you can let parts define one each of exponential, Weibull, lognormal, etc. failure densities and use the greatest hazard rate (which would let you define a bathtub curve for parts), but I don\u0027t really know how you\u0027d report that data to the player. Presumably you\u0027d have to average it into the MTBF score somehow.\u003C/p\u003E\u003Cp\u003EPlus, you could have it literally say \u0022mean time between failures = 12 seconds\u0022 on the starting boosters. That\u0027s a lot more fun that \u002250%.\u0022 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EMaking engines more likely to fail during starts, etc, is a good idea, but it needs to be tied to the overall reliability. I\u0027d recommend you just have a multiplier to the base hazard rate that applies for two seconds or something, maybe as a oneshot floatcurve. So if you engine is 0.01/hour likely to fail at any time, it\u0027s up to 10x more likely to fail (0.1/hour) during the two seconds after an engine start. And maybe the reliability is increased 100x when it\u0027s off. Again all of that is hard to communicate to the player. (Maybe you need separate active/inactive reliability scores.)\u003C/p\u003E\u003Cp\u003EFor inactive vessels, since you\u0027ll be using Bayes\u0027 theorem you can just sum up the probability that a failure occurred while you were away. And boo on your Kerbals for not telling you their life support was broken, I guess?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-06T02:08:36Z\u0022 title=\u002201/06/2015 02:08  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 6, 2015\u003C/time\u003E by NonWonderDog\u003C/strong\u003E\n\u003Cbr\u003Eterrible spelling\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-06T02:54:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mysteriosmind\u0022 data-cite=\u0022mysteriosmind\u0022\u003E\u003Cdiv\u003EHow about only checking for a failure, when there is some change in situation that could result in that failure, instead of checking in regular intervals? So for a rocket engine the system checks for a failure every time you start/stop, accelerate/decelerate the engine, its temperature changes a lot (either by use or getting really cold in space), g-forces changing a lot, it running at full throttle for a long time, it moving into a strong magnetic field (Jool, Kerbol), the outside pressure changing, etc. ... A system like that would take away a bit of the randomness of the failures while at the same time making them meaner, as you are more likely to encounter them when you use a part.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is actually what I am leaning towards.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mysteriosmind\u0022 data-cite=\u0022mysteriosmind\u0022\u003E\u003Cdiv\u003EOhh and here are a few more failures I thought of (just ignore those that have been mentioned before):\u003Cp\u003E- Engine throttle being locked in place (you can\u0027t accelerate/decelerate, nor turn it off)\u003C/p\u003E\u003Cp\u003E- Docking port failing to engage (you get it in the moment they normally connect and have to repair it before you can make another attempt)\u003C/p\u003E\u003Cp\u003E- Structural failures (basically the part blowing up) for all parts when going really fast in the atmosphere (drag) or pressure getting really high or colliding at a lower speed than the normal crash tolerance\u003C/p\u003E\u003Cp\u003E- Everything that uses electric charge using a lot more than normally\u003C/p\u003E\u003Cp\u003E- Batteries losing a certain amount of the max charge \u003C/p\u003E\u003Cp\u003E- Batteries not being able to recharge\u003C/p\u003E\u003Cp\u003E- Fuel tanks having the fuel flow to the engine interrupted (the engine acting as if no fuel is left, even though there is)\u003C/p\u003E\u003Cp\u003E- electric circuit being interrupted, so that electric charge can\u0027t flow through a certain part until fixed (maybe instead of just electric charge it could happen for every resource)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003EUltimately I don\u0027t think you\u0027re going to be able to avoid the literature on reliability analysis if you want something that feels \u0022right.\u0022 You at least need to use Bayes\u0027 Theorem to set it up so the update rate doesn\u0027t change the number of failures per hour.\u003Cp\u003EThe wiki page is a decent start: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Failure_rate\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Failure_rate\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis random Powerpoint is okay: \u003Ca href=\u0022http://www.wilsonconsultingservices.net/MTBF_M2.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.wilsonconsultingservices.net/MTBF_M2.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for the links, I appreciate the reading.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003EThe simplest way that would give good results would be to report the reliability of each part as MTBF, with a constant hazard rate derived from that (2000 hours MTBF = 0.0005 failures/hour = 1.39e-7 failures/sec). That\u0027s an exponential failure density, which is fine. If you want to be fancy you can let parts define one each of exponential, Weibull, lognormal, etc. failure densities and use the greatest hazard rate (which would let you define a bathtub curve for parts), but I don\u0027t really know how you\u0027d report that data to the player. Presumably you\u0027d have to average it into the MTBF score somehow.\u003Cp\u003EPlus, you could have it literally say \u0022mean time between failures = 12 seconds\u0022 on the starting boosters. That\u0027s a lot more fun that \u002250%.\u0022 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIsn\u0027t that just very unrealistic though? My main problem with a MTBF system is that the mean time would have to be stupidly low for gameplay reasons and it would just plain feel silly to me. 12 seconds MTBF on a rocket sounds silly. Or is it just me?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMaking engines more likely to fail during starts, etc, is a good idea, but it needs to be tied to the overall reliability. I\u0027d recommend you just have a multiplier to the base hazard rate that applies for two seconds or something, maybe as a oneshot floatcurve. So if you engine is 0.01/hour likely to fail at any time, it\u0027s up to 10x more likely to fail (0.1/hour) during the two seconds after an engine start. And maybe the reliability is increased 100x when it\u0027s off. Again all of that is hard to communicate to the player. (Maybe you need separate active/inactive reliability scores.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is similar to my thinking. For game play reasons the player really has to have *some* indication of the overall reliability of a part, even if it can fluctuate. One thing I am toying with now, and have in my GUI mockups, is a \u0022Resting Reliability\u0022 and a \u0022Momentary Reliability\u0022. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFor inactive vessels, since you\u0027ll be using Bayes\u0027 theorem you can just sum up the probability that a failure occurred while you were away. And boo on your Kerbals for not telling you their life support was broken, I guess?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrue, I could do something like that, but doesn\u0027t that seem like it could be pretty harsh? Seems unfair to hit you with a failure that you couldn\u0027t do anything about, or even know about.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-06T02:57:20Z\u0022 title=\u002201/06/2015 02:57  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 6, 2015\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"razark","CreatedById":32993,"CreatedDateTime":"2015-01-06T03:13:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mysteriosmind\u0022 data-cite=\u0022mysteriosmind\u0022\u003E\u003Cdiv\u003EAs for earlier missions ending in failures more often, how about having more than one reliability value? Like you got the part value you already use, that goes up relatively fast, then one for the part class (like all Liquid fuel\u002BOxidizer engines) that takes longer to go up and maybe even a third one for your entire space program that takes really long to change. The chance for a failure would then take them all into account. That way the reliability goes up the longer you play while suffering a penalty to it when trying out untested technologies (new part classes).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI like this idea. It would give the frequent early failures, but drop off as your team gets better a running a space program.\u003C/p\u003E\u003Cp\u003EPossibly an increase in reliability (or an increase in the rate that reliability increases) as the R\u0026amp;D facility is upgraded?\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-06T08:03:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003EUltimately I don\u0027t think you\u0027re going to be able to avoid the literature on reliability analysis if you want something that feels \u0022right.\u0022 You at least need to use Bayes\u0027 Theorem to set it up so the update rate doesn\u0027t change the number of failures per hour.\u003Cp\u003EThe wiki page is a decent start: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Failure_rate\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Failure_rate\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis random Powerpoint is okay: \u003Ca href=\u0022http://www.wilsonconsultingservices.net/MTBF_M2.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.wilsonconsultingservices.net/MTBF_M2.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe simplest way that would give good results would be to report the reliability of each part as MTBF, with a constant hazard rate derived from that (2000 hours MTBF = 0.0005 failures/hour = 1.39e-7 failures/sec). That\u0027s an exponential failure density, which is fine. If you want to be fancy you can let parts define one each of exponential, Weibull, lognormal, etc. failure densities and use the greatest hazard rate (which would let you define a bathtub curve for parts), but I don\u0027t really know how you\u0027d report that data to the player. Presumably you\u0027d have to average it into the MTBF score somehow.\u003C/p\u003E\u003Cp\u003EPlus, you could have it literally say \u0022mean time between failures = 12 seconds\u0022 on the starting boosters. That\u0027s a lot more fun that \u002250%.\u0022 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EMaking engines more likely to fail during starts, etc, is a good idea, but it needs to be tied to the overall reliability. I\u0027d recommend you just have a multiplier to the base hazard rate that applies for two seconds or something, maybe as a oneshot floatcurve. So if you engine is 0.01/hour likely to fail at any time, it\u0027s up to 10x more likely to fail (0.1/hour) during the two seconds after an engine start. And maybe the reliability is increased 100x when it\u0027s off. Again all of that is hard to communicate to the player. (Maybe you need separate active/inactive reliability scores.)\u003C/p\u003E\u003Cp\u003EFor inactive vessels, since you\u0027ll be using Bayes\u0027 theorem you can just sum up the probability that a failure occurred while you were away. And boo on your Kerbals for not telling you their life support was broken, I guess?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWould you be willing to help with the math on this? It really isn\u0027t my strong suit, and i\u0027ve been reading up and trying to figure it out but its tough.\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-06T15:30:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIsn\u0027t that just very unrealistic though? My main problem with a MTBF system is that the mean time would have to be stupidly low for gameplay reasons and it would just plain feel silly to me. 12 seconds MTBF on a rocket sounds silly. Or is it just me?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt depends on your opinion of Kerbal engineering. \u003C/p\u003E\u003Cp\u003EHere are MTBF numbers for the SSME in 1993:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19930012456_1993012456.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19930012456_1993012456.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe MTBF for in-flight shutdown is between 112 and 8.3 (!!) flights, depending on power level. A flight is eight and a half minutes, which works out to MTBF times of 1 to 16 hours. For NASA\u0027s premiere lifter engine!\u003C/p\u003E\u003Cp\u003EIt has to vary per part, though. A jet engine has about 100,000 hours MTBF. \u003C/p\u003E\u003Cp\u003EI\u0027ll see if I can put something together on the math later.\u003C/p\u003E\n"},{"CreatedByName":"kujuman","CreatedById":28299,"CreatedDateTime":"2015-01-06T23:38:56Z","Content":"\n\u003Cp\u003EI\u0027d just like to add that I\u0027m still planning on writing more failure modules once things settle down again. I have a module working where the lf/o ratio gets knocked off by some random amount.\u003C/p\u003E\u003Cp\u003EIf you\u0027d like, I could put together a guide on making a 3rd party failure module (very simple really) to give you more dev time.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-01-07T00:00:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kujuman\u0022 data-cite=\u0022kujuman\u0022\u003E\u003Cdiv\u003EI\u0027d just like to add that I\u0027m still planning on writing more failure modules once things settle down again. I have a module working where the lf/o ratio gets knocked off by some random amount.\u003Cp\u003EIf you\u0027d like, I could put together a guide on making a 3rd party failure module (very simple really) to give you more dev time.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EVery cool and I am glad you found it easy to do. That was certainly my goal! Right now things are definitely a bit rocky, and there \u003Cstrong\u003Ewill\u003C/strong\u003E be some major changes to the API coming when I overhaul things for the Push vs Pull setup and the new Reliability and Failure systems (which I plan to type up a proposal for soon).\u003C/p\u003E\u003Cp\u003EAfter those changes though if you would like to help on some documentation that would be exceptional!\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-07T04:48:14Z","Content":"\n\u003Cp\u003EThe thing that will make this mod hard, and the reason why I said you\u0027d need an understanding of the literature, is the randomness. If you try to balance it by play, you will simply never get a good result. You have to have a a result in mind and the ability to implement it, and then have the willingness to ignore people (or yourself!) who complain that their engines fail every launch or never fail at all. You have to design the reliability of the entire population of RT-10 boosters amongst all players, and trust that individual RT-10 failures follow the pattern. \u003C/p\u003E\u003Cp\u003ETo that end, you have to understand real failure distributions, and the math needed to model them. It\u0027s actually not that bad as long as you keep things simple.\u003C/p\u003E\u003Cp\u003EIf we take the simplest case, say we have 1000 widgets, and 10% of them fail each day. 100 widgets will fail the first day. There are only 900 left, so 90 widgets will fail the second day. 81 will fail on the third, 73 on the fourth, etc. As you see, the simplest model has an exponential failure distribution. This constant risk of failure -- a constant \u003Cem\u003Ehazard rate\u003C/em\u003E -- is the basic assumption behind the Mean Time Between Failures metric.\u003C/p\u003E\u003Cp\u003EThe hazard rate \u003Cem\u003Eh\u003C/em\u003E(\u003Cem\u003Et\u003C/em\u003E) is actually somewhat of an abstract concept in order to account for non-constant rates. It\u0027s equal to the expected number of failures in a population divided by all the accumulated time of all the items in the population, over an infinitesimal time slice, given that every item in the population is \u003Cem\u003Et\u003C/em\u003E hours old. Stated in a way that actually makes sense, the probability of an item experiencing its first failure over the next \u003Cem\u003Edt\u003C/em\u003E hours, starting at time \u003Cem\u003Et\u003C/em\u003E, is equal to \u003Cem\u003Eh\u003C/em\u003E(\u003Cem\u003Et\u003C/em\u003E)*\u003Cem\u003Edt\u003C/em\u003E as \u003Cem\u003Edt\u003C/em\u003E approaches zero.\u003C/p\u003E\u003Cp\u003EBut for an exponential distribution, it\u0027s easy. The math works like this:\u003C/p\u003E\u003Cp\u003EHazard rate is constant, so let\u0027s call it \u003Cem\u003Elambda\u003C/em\u003E. MTBF is equal to 1/\u003Cem\u003Elambda\u003C/em\u003E for an exponential distribution. Hazard rate can be estimated directly from a sample population (the measured \u003Cem\u003Efailure rate\u003C/em\u003E): if there are 10 failures in a sample of 100 devices scheduled to operate for 100 hours each, the hazard rate is 10/(100*100) = 0.001 -- A MTBF of 1000 hours.\u003C/p\u003E\u003Cp\u003EThe probability of a failure at time \u003Cem\u003Et\u003C/em\u003E (divided by duration) is f(t) = \u003Cem\u003Elambda\u003C/em\u003E*e^-(\u003Cem\u003Elambda\u003C/em\u003E*t). This is the \u003Cem\u003Efailure density function\u003C/em\u003E. (10% of widgets fail each day \u003Cem\u003E(lambda = 0.1)\u003C/em\u003E, 100 fail on the first day \u003Cem\u003E(f(0) = 0.1)\u003C/em\u003E, 90 on the second day \u003Cem\u003E(f(1) = 0.09)\u003C/em\u003E), 81 on the third day \u003Cem\u003E(f(2) = 0.081)\u003C/em\u003E, etc.)\u003C/p\u003E\u003Cp\u003EThe probability that that item will have failed after \u003Cem\u003Et\u003C/em\u003E hours is the integral of the density function, \u003Cem\u003EF(t)\u003C/em\u003E = 1 - e^-(\u003Cem\u003Elambda\u003C/em\u003E*t). This is the \u003Cem\u003Efailure distribution function\u003C/em\u003E. F(infinity) is equal to one.\u003C/p\u003E\u003Cp\u003EThe probability that an individual item will survive is one minus that, or \u003Cem\u003ER(t)\u003C/em\u003E = e^-(\u003Cem\u003Elambda\u003C/em\u003E*t). This is the \u003Cem\u003Ereliability\u003C/em\u003E after \u003Cem\u003Et\u003C/em\u003E hours.\u003C/p\u003E\u003Cp\u003EWith our 1000 hour MTBF, the probability that any individual item will survive for 100 hours is:\u003C/p\u003E\u003Cp\u003ER(100) = e^(-0.001*100) = 90.5%\u003C/p\u003E\u003Cp\u003EThe probability that it survives for 1000 hours is:\u003C/p\u003E\u003Cp\u003ER(1000) = e^(-0.001*1000) = 36.8% (Yes, 63.2% of our samples have failed after the mean time between failures. Math is weird.)\u003C/p\u003E\u003Cp\u003EAnd honestly, if you don\u0027t go beyond an exponential failure distribution that\u0027s all you need. The probability of surviving for the next 1000 hours is 36.8% no matter how many thousands of hours it has survived so far, so you can just use the reliability function and be done with it. Only thing to keep in mind is possible numerical precision issues past 100,000 hours MTBF, and any fiddling you might have to do to get all the bits out of Unity\u0027s RNG. \u003C/p\u003E\u003Cp\u003EThings get a lot more difficult with a variable hazard rate. If I\u0027m feeling particularly brave I\u0027ll try to work out the math for a Weibull distribution, since front-loaded failures would make launches a bit more exiting, but I\u0027ll ignore wear-out as probably a bad idea for gameplay.\u003C/p\u003E\u003Cp\u003EIn the most general case, I think you only need the reliability at time \u003Cem\u003Et\u003C/em\u003E (when you last checked), the reliability at time \u003Cem\u003Et\u003C/em\u003E\u002B\u003Cem\u003Edt\u003C/em\u003E (now), and Bayes\u0027 theorem to determine if something should fail. You should be able to foist the reliability calculation itself off on another module. (At least, that\u0027s how I remember probability working. I\u0027ll have to run through that.) I get incredibly confused when I think about the *second* failure using that method, though...\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-07T04:58:38Z\u0022 title=\u002201/07/2015 04:58  AM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 7, 2015\u003C/time\u003E by NonWonderDog\u003C/strong\u003E\n\u003C/span\u003E\n"}]}