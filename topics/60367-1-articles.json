{"TopicId":60367,"ForumId":29,"TopicTitle":"Help with Science","CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-19T00:22:45Z","PageNum":1,"Articles":[{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-19T00:22:45Z","Content":"\n\u003Cp\u003EI am making my first plugin (read: I\u0027m a complete newbie at this), and I\u0027m not sure where to start when trying to modify Science experiments.\u003C/p\u003E\u003Cp\u003EFor now, my first goal is this: Making the transmit data of a science experiment (like Crew or Eva reports) be worth more than the non-transmitted data.\u003C/p\u003E\u003Cp\u003EI am thinking that ModuleScienceExperiment would be the correct class to inherit in this case, and I think that ResearchAndDevelopment can be used somehow, but other than that I\u0027m not sure how I can get started on accomplishing my first goal.\u003C/p\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-19T05:23:16Z","Content":"\n\u003Cp\u003EAfter much trial and error, I have managed to figure out how to achieve my first goal.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPAddon(KSPAddon.Startup.Flight,false)]\u003Cbr\u003E    public class ScienceRedefined : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        public void Start()\u003Cbr\u003E        {\u003Cbr\u003E            Vessel craft = FlightGlobals.ActiveVessel;\u003Cbr\u003E            List\u0026lt;Part\u0026gt; parts = craft.parts;\u003Cbr\u003E\u003Cbr\u003E            foreach (Part p in parts)\u003Cbr\u003E            {\u003Cbr\u003E                float modDataScalar = 0.0f;\u003Cbr\u003E                if (p.name.Contains(\u0022mk1pod\u0022)) modDataScalar = 2.0f;\u003Cbr\u003E\u003Cbr\u003E                List\u0026lt;ModuleScienceExperiment\u0026gt; mods = p.FindModulesImplementing\u0026lt;ModuleScienceExperiment\u0026gt;();\u003Cbr\u003E                foreach (ModuleScienceExperiment m in mods)\u003Cbr\u003E                {\u003Cbr\u003E                    m.xmitDataScalar \u002B= modDataScalar;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAs long as the scienceCap is bigger than the baseValue, the above code will let the first command pod in Career boost the Science value by up to 200% (for a total value of 300%) through transmission.\u003C/p\u003E\u003Cp\u003ESo now for my next goal: How would I make it so that the Science Lab (module) boosts the baseValue of the Scientific data instead of the Transmission value? Right now I\u0027m thinking of making a Part Module that inherits the ModuleScienceLab class, and somehow manipulating the ScienceData values that pass through it, but I\u0027m not sure where I could get the ScienceData to manipulate.\u003C/p\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-19T20:31:09Z","Content":"\n\u003Cp\u003EFiddling around with the code a bit, I believe I need to modify the ProcessData function. However, it appears to be an Interface (IEnumerator) or returns an Interface, so I\u0027m not sure how to modify it (specifically, the callback argument).\u003C/p\u003E\u003Cp\u003EEdit: Or it\u0027s not the ProcessData that I need to modify. Nothing is printed out into the console when I Process the lab data.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class ModuleLabBooster : ModuleScienceLab\u003Cbr\u003E    {\u003Cbr\u003Enew public System.Collections.IEnumerator ProcessData(ScienceData data, Callback\u0026lt;ScienceData\u0026gt; onComplete)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022Processing the Data\u0022);\u003Cbr\u003E            Debug.Log(\u0022Moonstone Cannon, FIRE!!!!\u0022);\u003Cbr\u003E\u003Cbr\u003E            return base.ProcessData(data, onComplete);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //This Event is fired when the \u0022Process Data\u0022 button on the actual module itself is pressed\u003Cbr\u003E        new public void ProcessScienceDataEvent()\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022Processing Event\u0022);\u003Cbr\u003E            base.ProcessScienceDataEvent();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEdit #2: Now that I\u0027ve thought about it, I think what I\u0027m wanting to change is the ModuleScienceExperiment. From what I can tell, that is what actually stores the data and calls for the Lab to do its thing. However, making a PartModule that inherits the ModuleScienceExperiment and using that on a Science part leads to a NullReferenceError for some reason.\u003C/p\u003E\u003Cp\u003EEdit #3: After testing a lot more code, I have narrowed down the cause of what processes the Lab Boost to being outside of the ModuleScienceLab class itself. ScienceUtil supplies a boost value to whatever is eventually submitting the Report to ResearchAndDevelopment. \u003C/p\u003E\u003Cp\u003EMy guess as to what actually uses the Lab boost?\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/Q6qqG6B.jpg\u0022 alt=\u0022Q6qqG6B.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EOr in other words, an RDReportListItemContainer object, which happens to have all of the variables at hand. The question is whether I can manipulate what goes on behind that box somehow. Any ideas?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-20T01:54:08Z\u0022 title=\u002201/20/2014 01:54  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 20, 2014\u003C/time\u003E by Rhidian\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2014-01-20T02:50:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Rhidian\u0022 data-cite=\u0022Rhidian\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEdit #2: Now that I\u0027ve thought about it, I think what I\u0027m wanting to change is the ModuleScienceExperiment. From what I can tell, that is what actually stores the data and calls for the Lab to do its thing. However, making a PartModule that inherits the ModuleScienceExperiment and using that on a Science part leads to a NullReferenceError for some reason.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E \u003Cp\u003EI had issues with this too. \u003C/p\u003E\u003Cp\u003EThe problem, I think, was calling OnStart (I was replacing the default animation functions too). I seem to have fixed it by adding the base.OnStart(state) line and forcing the part to activate:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E            if (state == StartState.Editor) { return; }\u003Cbr\u003E            this.part.force_activate();\u003Cbr\u003E            anim = part.FindModelAnimators(animationName)[0];\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI wish I knew why that worked (well, I sort-of understand it), but it seems to. Though it sounds like you might not need to inherit the ModuleScienceExperiment anymore.\u003C/p\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-20T05:07:07Z","Content":"\n\u003Cp\u003EI think that I am going to have to give up on changing the baseValue via the Science Lab. I don\u0027t know where the base values are stored midflight and I don\u0027t know how to determine/modify the Lab\u0027s data boosting function.\u003C/p\u003E\u003Cp\u003EI\u0027ll just settle with the Science Lab\u0027s experiment resetting ability and the massive transmission boost that I\u0027ll give it later. Which means I\u0027ll move onto my next goal, which is to make it so that upon successful recovery of a vessel that performed an experiment, that experiment\u0027s data entropy is reduced (ie you can repeat the experiment again with less of a penalty). I\u0027ve noticed that the \u0027data entropy\u0027 as I\u0027ve termed it is located within the persistence save file under the specific experiment report. So the question I have is how could I access/overwrite the information in that file, and how can I determine if the craft that has performed an experiment has been successfully recovered?\u003C/p\u003E\u003Cp\u003EEdit: I just had a Eureka moment (that still needs to be tested). Would it be possible to use ModuleScienceExperiment\u0027s GetData function and change the baseValues for the experiment directly? Like if during the experiment\u0027s DeployExperiment function I checked to see if there is a functioning Lab on the vessel, and if so, increase the baseValues by iterating through the GetData array?\u003C/p\u003E\u003Cp\u003EEdit: Or there is no data stored in the experiment at the time that the experiment is deployed. Which means if I want to modify the data, it would have to be after it\u0027s been collected. To this end, I think it should be possible to add one of those actions to the Lab Module to iterate through the data and increase the data value. So how would I go about creating one of those actions like that which says \u0022Process Lab Data\u0022 when there is data to be processed?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-20T12:39:43Z\u0022 title=\u002201/20/2014 12:39  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 20, 2014\u003C/time\u003E by Rhidian\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-21T22:48:19Z","Content":"\n\u003Cp\u003EIt has been a long journey, but I have finally figured out how to change the Base Value of an experiment via the presence of a Science Lab successfully.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic class ModuleResearchExperiment : ModuleScienceExperiment\u003Cbr\u003E    {\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public bool beenBoosted = false;\u003Cbr\u003E\u003Cbr\u003E        protected ScienceExperiment boostExperiment = null;\u003Cbr\u003E\u003Cbr\u003E        public void initializeExperiment()\u003Cbr\u003E        {\u003Cbr\u003E            boostExperiment = new ScienceExperiment();\u003Cbr\u003E            ConfigNode sNode = new ConfigNode();\u003Cbr\u003E            ResearchAndDevelopment.GetExperiment(this.experimentID).Save(sNode);\u003Cbr\u003E\u003Cbr\u003E            //Copies values from original experiment to the internal experiment\u003Cbr\u003E            boostExperiment.Load(sNode);\u003Cbr\u003E\u003Cbr\u003E            Debug.Log(\u0022Initialized Successfully\u0022);\u003Cbr\u003E            Debug.Log(\u0022Testing: \u0022 \u002B boostExperiment.experimentTitle);\u003Cbr\u003E\u003Cbr\u003E            this.experiment = boostExperiment;\u003Cbr\u003E            Debug.Log(\u0022Transferred successfully\u0022);\u003Cbr\u003E\u003Cbr\u003E            beenBoosted = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        new public void DeployExperiment()\u003Cbr\u003E        {\u003Cbr\u003E            //If it is the first time deploying the experiment, initialize it\u003Cbr\u003E            if (boostExperiment == null)\u003Cbr\u003E            {\u003Cbr\u003E                initializeExperiment();\u003Cbr\u003E            }\u003Cbr\u003E            Debug.Log(\u0022Experiment has been deployed\u0022);\u003Cbr\u003E            requestBoost();\u003Cbr\u003E\u003Cbr\u003E            base.DeployExperiment();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        new public void ResetExperiment()\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log(\u0022Experiment has been resetted\u0022);\u003Cbr\u003E            initializeExperiment();\u003Cbr\u003E            base.ResetExperiment();\u003Cbr\u003E           // this.resetBoost();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void requestBoost()\u003Cbr\u003E        {\u003Cbr\u003E            //If this hasn\u0027t been boosted already\u003Cbr\u003E            if (!this.beenBoosted)\u003Cbr\u003E            {\u003Cbr\u003E                Vessel v = FlightGlobals.ActiveVessel;\u003Cbr\u003E                List\u0026lt;ModuleScienceLab\u0026gt; labs = v.FindPartModulesImplementing\u0026lt;ModuleScienceLab\u0026gt;();\u003Cbr\u003E                float boost = 1.0f;\u003Cbr\u003E                foreach (ModuleScienceLab lab in labs)\u003Cbr\u003E                {\u003Cbr\u003E                    if (lab.dataTransmissionBoost \u0026gt; boost)\u003Cbr\u003E                    {\u003Cbr\u003E                        boost = lab.dataTransmissionBoost;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                if (boost \u0026gt; 1.0f)\u003Cbr\u003E                {\u003Cbr\u003E                    //The \u0022this.experiment\u0022 that is being changes should be the boostExperiment\u003Cbr\u003E                    this.experiment.baseValue = this.experiment.baseValue * boost;\u003Cbr\u003E                    beenBoosted = true;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe key to the whole problem is the Science Experiment module itself, which houses the information that is used to generate the science reports. However, a big problem I encountered was that changing the \u0022this.experiment.baseValue\u0022 directly changed it for *all* experiments of the same type, which got out of hand fast with multiple Experiment modules on-board. And so my solution is for each PartModule to house it\u0027s own individualized ScienceExperiment (which is a copy of the original), so that any changes to its baseValue is compartmentalized.\u003C/p\u003E\u003Cp\u003EWith this hurdle being overcome, I am much closer to getting a WIP version out on the main Add-On Development forum where the focus would be on balancing the changes I make. But before that, is there anything else I could/should do to change the Science data collection mechanics?\u003C/p\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-23T00:18:16Z","Content":"\n\u003Cp\u003EI believe I have just found the Holy Grail of Science Reports, the ExperimentResultDialogPage class, whose constructor requires everything necessary to display that popup that shows after collecting any sort of data. So the question is, how would I go about constructing one correctly?\u003C/p\u003E\u003Cp\u003EAt the moment I\u0027m stumped by what subjectID I am needing. The ones I have tried don\u0027t seem to be actual ScienceSubjects (like \u0022crewReport\u0022, etc).\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2014-01-23T00:40:24Z","Content":"\n\u003Cp\u003EI think the subject IDs are more like an experiment ID combined with an actual biome ID, such as \u0022surfaceSample@KerbinSrfLandedHighlands\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Rhidian","CreatedById":101171,"CreatedDateTime":"2014-01-24T19:55:19Z","Content":"\n\u003Cp\u003EThe ExperimentResultsPage was a red herring; I wasn\u0027t able to find any way to make my own due to the fact that the ScienceSubject (or at least its ID) that the results page requires doesn\u0027t actually exist until after the results page shows up. That being said, I did manage to get one up on that results screen by manipulating what goes into it by \u003Cstrong\u003Eremoving Science Decay\u003C/strong\u003E, which normally makes each successive experiment worth less and less.\u003C/p\u003E\n"}]}