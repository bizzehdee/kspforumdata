{"TopicId":118383,"ForumId":29,"TopicTitle":"[RESOLVED] Serialization of data between a prefab part and live parts (see OP for solution)","CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-13T15:40:44Z","PageNum":1,"Articles":[{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-13T15:40:44Z","Content":"\n\u003Cp\u003EHi all,\u003C/p\u003E\u003Cp\u003ERunning into a bit of a problem regarding basic serialization of part data.\u003C/p\u003E\u003Cp\u003EI have partmodule with a field that I need to be serialized from the prefab part into any live/actual parts. The field is a custom class with the [serializable] attribute. It is populated int he prefab during the prefabs OnLoad(ConfigNode ...) method, and definitely not null on the prefab part (can print the reference/hashcode/etc).\u003C/p\u003E\u003Cp\u003EHowever, the custom field is not serialized into the live parts -- the reference/field is always null. I have tried using the [serializeField] attribute, but it does not seem to make any difference. I have tried a (shortened, all KSP references removed) test-case of the same custom class in a basic Unity-editor test; the custom class/field serialized properly and was displayed in the editor as editable component fields. So... the basic class appears to be serializable and serialize just fine outside of KSP.\u003C/p\u003E\u003Cp\u003ENo errors are thrown or logged.\u003C/p\u003E\u003Cp\u003ETrimmed source code for the part class\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Epublic class SSTUConverter : PartModule\u003Cbr\u003E{\u003Cbr\u003E        //converter recipe field -- SHOULD be serialized from the prefab into any sub-instances; but is not....\u003Cbr\u003E        //does not work with or without the serializeField attribute\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        public ConverterRecipe recipe;  \u003Cbr\u003E\u003Cbr\u003E         public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            if(node.HasNode(\u0022CONVERTERRECIPE\u0022))//load the recipe config for the prefab part instance;\u003Cbr\u003E            {\u003Cbr\u003E                loadRecipeFromNode(node);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void loadRecipeFromNode(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            if (node.HasNode (\u0022CONVERTERRECIPE\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                recipe = new ConverterRecipe ().loadFromNode(node.GetNode (\u0022CONVERTERRECIPE\u0022));\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                print (\u0022ERROR - no recipe node to load converter recipe from!\u0022);\u003Cbr\u003E            }\u003Cbr\u003E            print (\u0022Constructed recipe: \u0022\u002Brecipe);//recipe prints successfully when loaded on prefab, is definitely not null at this point in the prefab\u003Cbr\u003E        }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETrimmed source code for the custom class:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace SSTUTools\u003Cbr\u003E{\u003Cbr\u003E    [Serializable]\u003Cbr\u003E    public class ConverterRecipe\u003Cbr\u003E    {\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        private List\u0026lt;ConverterResourceEntry\u0026gt; inputs = new List\u0026lt;ConverterResourceEntry\u0026gt;();\u003Cbr\u003E        //ConverterResourceEntry is another serializable class ;\u003Cbr\u003E        [SerializeField]\u003Cbr\u003E        private List\u0026lt;ConverterResourceEntry\u0026gt; outputs = new List\u0026lt;ConverterResourceEntry\u0026gt;();      \u003Cbr\u003E    }    \u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhat I\u0027m trying to accomplish is persist some complex configuration data between the prefab and the live parts that are defined in sub-nodes within the modules config node in the part.cfg file.\u003C/p\u003E\u003Cp\u003EE.G\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E ...stuff...\u003C/p\u003E\u003Cp\u003E CUSTOMNODE\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E ...custom complex data...\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EHowever, this config data is only available to the prefab part as it is first compiled - So I have been trying to find a way to persist the data into the cloned parts. \u003C/p\u003E\u003Cp\u003EFor some of my modules I have just given them a \u0027moduleID\u0027 (in case multiple of the same type are present in a single part) and then reload the data from the part.partInfo.configNode data by manually finding the proper MODULE reference in that data. However, it seems like a bit of a hack and workaround to do that for something as simple as a list of resources (the other places I\u0027ve used it were much more complex data with object references that would not serialize properly even if I wanted it to).\u003C/p\u003E\u003Cp\u003ESo, I guess the question is -- does standard Unity Serialization work for fields in PartModules? (I would think it should... some stock modules appear to use it)\u003C/p\u003E\u003Cp\u003EIf yes, are there any known issues? Anything obviously wrong with the above posted code? I will be attempting some very trimmed down versions in KSP later to see if it is something deeper in the class preventing it from serializing (as the basic one works in Unity... it _should_ then work in KSP, unless the entire serialization system is broken).\u003C/p\u003E\u003Cp\u003EAlternatively - what other ways are there to get complex data to be cloned properly into live parts (rather the partModules therein)?\u003C/p\u003E\u003Cp\u003EThanks in advance; completely baffled by this one at the moment, lost an entire nights worth of work-time trying to figure this one out...with absolutely no progress.\u003C/p\u003E\u003Cp\u003EEdit:\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EThe answer:\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EStandard Unity serialization using the [serializable] attribute does not work for mod/plugin supplied standard classes (though it does work for any stock supplied classes using said attribute). All primitives (int/float/double/string/etc) and KSP-supplied classes will still serialize properly.\u003C/p\u003E\u003Cp\u003EWorkarounds include:\u003C/p\u003E\u003Cp\u003E1.) Custom serialization routines that serialize to/from strings or other primitives; store your data as primitives for serialization and deserialize manually on the other side.\u003C/p\u003E\u003Cp\u003E2.) Unity\u0027s ScriptableObject appears to still work properly for serialization of custom data classes. Instead of using the [serializable] attribute, make the class extend from ScriptableObject. Beware, there are some reference differences here - Scriptable objects are serialized as a reference and not a data instance; so duplication from a prefab part will result in the cloned part having a -reference- to the prefabs serialized object (need to verify this behavior; it is the documented behaviour.... but the documentation also states that standard serialization should work... so you can see how reliable the docs are when it comes to KSP modding).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-14T15:55:21Z\u0022 title=\u002208/14/2015 03:55  PM\u0022 data-short=\u00228 yr\u0022\u003EAugust 14, 2015\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-08-13T15:48:51Z","Content":"\n\u003Cp\u003EDid you have a look at \u003Ca href=\u0022http://docs.unity3d.com/Manual/script-Serialization.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/Manual/script-Serialization.html\u003C/a\u003E ? Serialization in unity is tricky and in SmokeScreen I had to do a lot of thing by hand to bypass an old Unity limitation (I should rewrite that now...)\u003C/p\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-13T16:58:49Z","Content":"\n\u003Cp\u003EI would have to agree that serialization is tricky; some odd stuff going on for some of it.\u003C/p\u003E\u003Cp\u003EAye, I\u0027ve read through the docs. Everything appears to be proper for it to be serialized according to their documentation. And indeed it does serialize when I use it in the Unity editor.\u003C/p\u003E\u003Cp\u003EField is marked public in the PartModule, check.\u003C/p\u003E\u003Cp\u003ECustom class needs Serializable attribute, check.\u003C/p\u003E\u003Cp\u003ECustom class is not abstract, is a regular base class. check.\u003C/p\u003E\u003Cp\u003ECustom class has a public no-param constructor (not sure if this is technically needed, but generally is for classes instantiated through generic API-driven reflection).\u003C/p\u003E\u003Cp\u003EI\u0027ll take a look at your SmokeScreen source to see if I can draw any inspiration as to alternative methods. I\u0027m also going to try some more contrived/trimmed down test cases to see if I can get a simpler object to serialize properly. It is entirely possible something in the class is not allowing it to serialize, something that was trimmed out in my unity-editor test cases.\u003C/p\u003E\u003Cp\u003EI already have some work-arounds available to implement, but was hoping I could get the default/built-in serialization working; results in slightly cleaner code. Although, thinking about it, its not really cleaner code if I have to put a bunch of attribute tags on everything ([serializable][serializeField]). Might be better in the long run for me to implement a robust \u0027load from stored prefab config\u0027 system rather than trying to get the serialization working. As long as a PartModules index in the part.Modules list is stable I can probably work up something reliable and easier to use than worrying about the serialization stuff.\u003C/p\u003E\u003Cp\u003EThanks for the response. I\u0027ll keep poking around and testing things.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-13T18:19:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Shadowmage\u0022 data-cite=\u0022Shadowmage\u0022\u003E\u003Cdiv\u003EAs long as a PartModules index in the part.Modules list is stable I can probably work up something reliable and easier to use than worrying about the serialization stuff.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt is not.\u003C/p\u003E\u003Cp\u003EAnytime mods, and their associated partModules, are added or removed from a KSP installation, the partModule index changes.\u003C/p\u003E\u003Cp\u003ENow, if you mean within the same game scene, yes, the partModules index is fixed. Just don\u0027t expect it to stay the same across game save/loads.\u003C/p\u003E\u003Cp\u003EI had a big fight with this in getting AGX to work with custom parts, especially those with multiple copies of the same part module. (Science parts with multiple experiments, I\u0027m looking at you.)\u003C/p\u003E\u003Cp\u003E99% of modules on have a single copy on a part though, so partModule.moduleName works as a unique identifier almost all of the time.\u003C/p\u003E\u003Cp\u003EI can give you hand with suggestions on working with partModules when I get home after work to my KSP computer, but on the specific SerilizeField question, I can\u0027t help as I\u0027ve never worked with it.\u003C/p\u003E\u003Cp\u003EBecause of that, for loading complex data I would either: \u003C/p\u003E\u003Cp\u003E1) Load my own ConfigNode containing configurations, then give each part a KSPField with a ConfigID that loads from the ConfigNode at runtime.\u003C/p\u003E\u003Cp\u003E2) Do a workaround of loading a KSPFIeld string as a CSV list, but if the data is complex this method is probably too clunky.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-13T18:28:07Z\u0022 title=\u002208/13/2015 06:28  PM\u0022 data-short=\u00228 yr\u0022\u003EAugust 13, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-13T19:20:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EIt is not.\u003Cp\u003EAnytime mods, and their associated partModules, are added or removed from a KSP installation, the partModule index changes.\u003C/p\u003E\u003Cp\u003ENow, if you mean within the same game scene, yes, the partModules index is fixed. Just don\u0027t expect it to stay the same across game save/loads.\u003C/p\u003E\u003Cp\u003EI had a big fight with this in getting AGX to work with custom parts, especially those with multiple copies of the same part module. (Science parts with multiple experiments, I\u0027m looking at you.)\u003C/p\u003E\u003Cp\u003E99% of modules on have a single copy on a part though, so partModule.moduleName works as a unique identifier almost all of the time.\u003C/p\u003E\u003Cp\u003EI can give you hand with suggestions on working with partModules when I get home after work to my KSP computer, but on the specific SerilizeField question, I can\u0027t help as I\u0027ve never worked with it.\u003C/p\u003E\u003Cp\u003EBecause of that, for loading complex data I would either: \u003C/p\u003E\u003Cp\u003E1) Load my own ConfigNode containing configurations, then give each part a KSPField with a ConfigID that loads from the ConfigNode at runtime.\u003C/p\u003E\u003Cp\u003E2) Do a workaround of loading a KSPFIeld string as a CSV list, but if the data is complex this method is probably too clunky.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks Diazo.\u003C/p\u003E\u003Cp\u003ECurrently I\u0027m doing something similar to #1 for a few other modules. It seems to work well. A [KSPField] int that I can use to identify which particular module it was from the raw config data modules list (mostly (only?) needed for multiple modules of the same type in one part). I then go into the prefab config (part.partInfo.partConfig) and find the specific MODULE node by both module name and moduleID field. I was just hoping to clean things up a bit (and not need the extra moduleID/configID field).\u003C/p\u003E\u003Cp\u003EI\u0027ve also done #2 a bit, but have found the CSV lists for more complex data to be a bit cumbersome to write/manage properly (too easy to make lists of different sizes in the config file, or get values out of order and not even realize it). I currently use this method for simple one-off lists of data (like a list of transform names) that do not need ordering, \u003C/p\u003E\u003Cp\u003EHmm.. it seems the #1 option you are proposing is a bit different than I\u0027m currently using. If I\u0027m reading this correctly, you are proposing storing the complex config data for the modules in a completely separate and external .cfg file, and loading the data for each module from that external file, referencing the specific config by the moduleID/configID? Seems like it would work about like I\u0027m doing; though I would really like to keep the config for the module in the parts .cfg file. Will have to give this method a bit of thought.\u003C/p\u003E\u003Cp\u003EGood to know about the module index. I had assumed that they would stay the same at runtime (after MM patches are applied at least) between the prefab and any live parts, but have not yet done any significant testing. How would this effect things like ModuleSurfaceFX that need an engine module index supplied in the .cfg file? Mainly I guess the question on this would be - does the order (and indexes) of modules in a part stay the same between the prefab and live versions of that part - at runtime? I suppose I\u0027ll have to do some experimentation to find out what/when/if things get changed. \u003C/p\u003E\u003Cp\u003EI would think they should be fairly consistent due to how parts are deserialized/reloaded from the persistence file - if modules are out of place between the prefab and persistence it complains about modules not being at the proper index (and you generally only see this if mods or MM patches are added/removed from an already in-progress game). I suppose that alone is enough to discount using the raw partModule index method, as I know that someone using my mod (like me!) would change their mod set after a game was started; and it could/would all fall apart at that point -- I would have to implement the same \u0027look around more if you don\u0027t find it in the proper index\u0027 stuff that stock does, which is more unreliable mess that I don\u0027t want to have to maintain \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003EI\u0027ll probably just go with my implementation of #1 again for this module if I cannot figure out the serialization (or other cleaner alternative) in a reasonable time. Sometimes the amount of -work- I do in order to be lazy is... totally counterproductive to the laziness \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThanks again for the info and giving me stuff to think on \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-13T20:12:09Z","Content":"\n\u003Cp\u003EWhile the module index will generally stay the same at run time after module manager has processed, it is not guaranteed and I know there are mods out there that use the .AddModule() method, and there exists the .RemoveModule() method, for adding and removing partModules while the game is running. \u003C/p\u003E\u003Cp\u003EAre you probably okay with assuming the partModule index stays the same during the same game session? Yes, just be aware it is not guaranteed.\u003C/p\u003E\u003Cp\u003EOn the configNode issue, I do want to clarify that there are two methods of doing this.\u003C/p\u003E\u003Cp\u003EThe first is \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EConfigNode myConfigs = ConfigNode.Load(\u0022FileOnDisk\u0022);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI think this is the one you talk about, you directly load a file into a config node.\u003C/p\u003E\u003Cp\u003EHowever, you can also use the GameDatabase to indirectly load a config node:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EConfigNode myConfigs = GameDatabase.Instance.GetConfigNode(\u0022Diazo/MyMod/MyConfigs\u0022);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen make a .txt file in KSP\\GameData\\Diazo\\MyMod\\MyConfigs.cfg as follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ename = MyConfigs\u003Cbr\u003Evalue1 = HelloWorld\u003Cbr\u003ENODENAME\u003Cbr\u003E{\u003Cbr\u003Evalue2 = ThisIsASubNode\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe advantage to doing it this way is that Module Manager can patch this node, so in your part.cfg file, add this at the end:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E@[MyConfigs] //no filter needed, there is only one MyConfigs configNode in the database\u003Cbr\u003E//standard Module Manager syntax now applies\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote I\u0027m not 100% sure you can put module manager patches in the part.cfg file like that, but it is something to test.\u003C/p\u003E\u003Cp\u003EAnd even with either of these methods, you still need to load a reference ID in the part.cfg so your code can pull the correct config from the MyConfigs node at runtime.\u003C/p\u003E\u003Cp\u003EIf you wanted to avoid having to KSPField a ConfigID, you could in theory load the MyConfigs ConfigNode and using the partName unique identifier for the sub nods, in your partModule you could simply:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EConfigNode myConfigs = GameDatabase.Instance.GetConfigNode(\u0022Diazo/MyMod/MyConfigs\u0022).GetNode(partName);\u003C/pre\u003E\u003Cp\u003E and then that instance of the myConfigs configNode would have the correct default configuration for that part.\u003C/p\u003E\u003Cp\u003EThis assumes that each part has a unique config though, if multiple parts share the same config that doesn\u0027t work and you have to use the ConfigID anyway. If you adding a unique config to each part.cfg file though, it sounds like you could do this.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-13T20:29:24Z\u0022 title=\u002208/13/2015 08:29  PM\u0022 data-short=\u00228 yr\u0022\u003EAugust 13, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-14T02:37:41Z","Content":"\n\u003Cp\u003EUpdated info regarding serialization:\u003C/p\u003E\u003Cp\u003EStrange stuff. Very strange.\u003C/p\u003E\u003Cp\u003EA public string serializes fine. A public List of strings serialize fine. Likely all primitives will (testing...). -- this is without the [KSPField] or [serializeField] attributes. I can set the value in the OnLoad() method of the prefab, and it will properly carry across to new parts pulled out of the editor.\u003C/p\u003E\u003Cp\u003EBut I cannot get even the simplest of test-cases of custom classes to serialize, no matter what attributes I flag them with (the fields or the custom classes). Neither single instances or lists seem to work.\u003C/p\u003E\u003Cp\u003EHere is the strange part: stock Propellant class gets serialized fine as a public field with no attributes(I just chose a stock class that had the [serializable] attribute). I can populate a field in the OnLoad method when the prefab is created, and it will be properly populated on new cloned parts in the editor (as OnLoad() is not called on -new- parts in the editor, I can be reasonably certain that it is in fact being serialized properly from the prefab).\u003C/p\u003E\u003Cp\u003EMy first suspicion is that the loading path for mod-dll files is different than the stock Unity loading used by the KSP .dll files, and somehow custom (non-KSP supplied classes) are not getting registered with Unity as being serializable as they are loaded through the alternate process. I\u0027m really not familliar with the Unity Engine internals or any of the C# class-loading mechanisms though, so it is all just speculation at this point.\u003C/p\u003E\u003Cp\u003EWill keep playing with it a bit... at least I\u0027ve gotten -something- to serialize and survive the prefab-\u0026gt;cloned part transition. It is a starting point at least. Would like to get a handle on this and find out what is going on (and hopefully make use of it!).\u003C/p\u003E\u003Cp\u003EEdit: More strangeness, and semi-confirmation for my theory above. A custom class that directly subclasses from Propellant does -not- serialize properly (with or without the [serializable] attribute). It seems likely that mod/plugin code is limited to serialization of only primitives and stock classes, as mod/plugin classes are somehow not being recognized as serializable. This would also explain why my first test cases would serialize properly in the Unity editor (as a field in a basic MonoBehaviour attached to an empty gameObject), but would not work when attempted within KSP.\u003C/p\u003E\u003Cp\u003EBit more testing to do, I need to confirm if the [serializeField] attribute works properly for private fields in mod/plugin classes.\u003C/p\u003E\u003Cp\u003EFurther edit: [serializeField] -does- work for private fields for supported classes (primitives and KSP supplied classes).\u003C/p\u003E\u003Cp\u003EConclusion: ...umm... at least I can serialize Strings (and primitives)? Can actually do nearly anything with that capability with regards to manual (de)serialization/synchronization.\u003C/p\u003E\u003Cp\u003EI\u0027ll probably whip up a quick string-\u0026gt;ConfigNode parser (as stock methods only parse from files?) and store my needed ConfigNodes in string format for the (manual) serialization, re-parsing them into ConfigNodes in the cloned parts OnStart() method (manual deserialization). I\u0027m chosing ConfigNode as the interface/storage class, as the rest of my code already deals with loading/reading from ConfigNodes, and it is easier in the long run than writing custom serialization/deserialization code for every class -in addition- to the already needed ConfigNode parsing for stock data-handling.\u003C/p\u003E\u003Cp\u003EFurther edit: - just found the stock ConfigNode.Parse method... if all works out, looks like I should at least have a workaround if I cannot otherwise find solutions to serialization of custom classes.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-14T05:29:18Z\u0022 title=\u002208/14/2015 05:29  AM\u0022 data-short=\u00228 yr\u0022\u003EAugust 14, 2015\u003C/time\u003E by Shadowmage\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-08-14T03:45:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Shadowmage\u0022 data-cite=\u0022Shadowmage\u0022\u003E\u003Cdiv\u003EMy first suspicion is that the loading path for mod-dll files is different than the stock Unity loading used by the KSP .dll files, and somehow custom (non-KSP supplied classes) are not getting registered with Unity as being serializable as they are loaded through the alternate process. I\u0027m really not familliar with the Unity Engine internals or any of the C# class-loading mechanisms though, so it is all just speculation at this point.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI thought something similar. Stuff that works in the editor suddenly doesn\u0027t work in KSP. You can use Unity\u0027s shared reference serialization object, though:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class SSTUConverter : PartModule\u003Cbr\u003E{\u003Cbr\u003E    [Persistent] public ConverterRecipe recipe = ScriptableObject.CreateInstance\u0026lt;ConverterRecipe\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnStart(state);\u003Cbr\u003E        print(\u0022SSTUConverter.OnStart\u0022);\u003Cbr\u003E\u003Cbr\u003E        if (recipe != null)\u003Cbr\u003E            print(\u0022Recipe: \u0022 \u002B recipe);\u003Cbr\u003E        else Debug.LogError(\u0022(No recipe)\u0022);\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnLoad(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        base.OnLoad(node);\u003Cbr\u003E\u003Cbr\u003E        if (node.HasNode(\u0022CONVERTERRECIPE\u0022))\u003Cbr\u003E            ConfigNode.LoadObjectFromConfig(recipe, node.GetNode(\u0022CONVERTERRECIPE\u0022));\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Epublic class ConverterRecipe : ScriptableObject\u003Cbr\u003E{\u003Cbr\u003E    [Persistent]\u003Cbr\u003E    private List\u0026lt;ConverterResourceEntry\u0026gt; inputs = new List\u0026lt;ConverterResourceEntry\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E    [Persistent]\u003Cbr\u003E    private List\u0026lt;ConverterResourceEntry\u0026gt; outputs = new List\u0026lt;ConverterResourceEntry\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public override string ToString()\u003Cbr\u003E    {\u003Cbr\u003E        return string.Format(\u0022Recipe: using {0}, you get {1}\u0022, string.Join(\u0022,\u0022, inputs.Select(i =\u0026gt; i.Resource).ToArray()),\u003Cbr\u003E            string.Join(\u0022,\u0022, outputs.Select(i =\u0026gt; i.Resource).ToArray()));\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Epublic class ConverterResourceEntry\u003Cbr\u003E{\u003Cbr\u003E    [Persistent]\u003Cbr\u003E    public string Resource = \u0022default value\u0022;\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt looks a bit ugly because I took advantage of KSP\u0027s existing ConfigNode serialization to construct the recipe. The PartModule ConfigNode the above uses looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = SSTUConverter\u003Cbr\u003E\u003Cbr\u003E\tCONVERTERRECIPE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tinputs\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\titem\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tResource = Hydrogen\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\titem\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tResource = Oxygen\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\toutputs\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\titem\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tResource = Water\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-14T04:00:32Z\u0022 title=\u002208/14/2015 04:00  AM\u0022 data-short=\u00228 yr\u0022\u003EAugust 14, 2015\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003Cbr\u003Eremoved unnecessary SerializeField attributes\n\u003C/span\u003E\n"},{"CreatedByName":"Shadowmage","CreatedById":138730,"CreatedDateTime":"2015-08-14T15:46:48Z","Content":"\n\u003Cp\u003EVery interesting. I would suppose the serialization works for subclasses of ScritableObject because Unity checks the class/type at runtime (serialization time) rather than looking for an attribute at load-time (although one would think they would just check for the attribute at run-time as well). \u003C/p\u003E\u003Cp\u003ELooks like that might be an acceptable alternate solution. Not too much different than using the [serializable] attribute on a class for my particular use cases. Thanks for the additional info xEvilReeperx (and examples). Now I\u0027ve got options!\u003C/p\u003E\u003Cp\u003EI went into this particular project thinking \u0022Ahh, a simple resource converter/generator/alternator module... that should only take like an hour to write up!\u0022. Took a bit longer than an hour to write up the core code, but not much. And then spent 2 1/2 nights trying to figure out the serialization for the recipe. Finally got to give it the first real test last night though. Everything seems to work well so far (using the config node-\u0026gt;string-\u0026gt;config node serialization path). Ever get the feeling that you wanted ((poorly/un)documented/inconsistent) APIs to GTFO of your way and let you get down to programming? (if only it worked that way....)\u003C/p\u003E\u003Cp\u003EGoing to mark this thread as resolved, as multiple acceptable alternate solutions have been found (and also much general info regarding general Unity serialization along the way).\u003C/p\u003E\u003Cp\u003EThanks for your time and help guys,\u003C/p\u003E\n"}]}