{"TopicId":61827,"ForumId":34,"TopicTitle":"[1.3] kOS Scriptable Autopilot System v1.1.3.0","CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-02-01T16:40:58Z","PageNum":22,"Articles":[{"CreatedByName":"TranquilTempest","CreatedById":18141,"CreatedDateTime":"2014-04-10T22:32:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI agree in principle, but not with that specific example. That can be a dangerous check that fails to stop the burn.\u003Cp\u003EIt has two problems:\u003C/p\u003E\u003Cp\u003E1: If X is too small, you can blow past X faster than the script responds and then when periapsis and apoapsis swap positions continued burning won\u0027t make the gap smaller, but larger.\u003C/p\u003E\u003Cp\u003E2: If It takes too long to execute the burn so that you aren\u0027t precise enough in executing it centered on apoapsis, then its possible to never get apoapsis and periapsis within X, and yet its still time to stop burning because continued burning won\u0027t make it any better. The check I prefer is to stop the burn when you\u0027ve rotated periapsis to within 90 degrees of your current position - to stop the burn as the apoapsis and periapsis are starting to swap positions and you\u0027re halfway between then. To see how to calculate that, google the phrase \u0022True Anomaly\u0022.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m well aware of the difficulties in a versatile circularization algorithm , but it\u0027s pretty easy and safe to save the apoapsis in a variable when you start the burn, and stop burning when your periapsis \u0026gt; saved apoapsis -500. No, it won\u0027t be exactly circular, but if all you want to do is get your periapsis out of the atmosphere, it\u0027s great.\u003C/p\u003E\u003Cp\u003EIf you want a very circular orbit, you control thrust and pitch to keep your apoapsis just in front of you, and complete the burn at very low thrust with apoapsis about 10 seconds in front of you. This method can easily get you within 100m of circular, so long as your code is aware of your ship\u0027s maximum acceleration and the amount of \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0v required to finish the burn. It\u0027s essentially equivalent to making a circularization burn, then waiting until apoapsis and making another one to get a bit closer to circular.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-11T08:30:36Z","Content":"\n\u003Cp\u003EIs it possible to check whether a parameter has been passed? Like:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eif paramVar = NaN\u003Cbr\u003E{\u003Cbr\u003Eset paramVar to 1.\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGenerally speaking is it possible to check for NaN? Undefined? etc..\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-11T08:52:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EIs it possible to check whether a parameter has been passed? Like:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eif paramVar = NaN\u003Cbr\u003E{\u003Cbr\u003Eset paramVar to 1.\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EGenerally speaking is it possible to check for NaN? Undefined? etc..\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo.\u003C/p\u003E\u003Cp\u003EIt would have been possible before by adding a very simple \u0022isNaN()\u0022 function to kOS that just is a wrapper around the C# isNaN call underneath.\u003C/p\u003E\u003Cp\u003EBut not anymore. A change was made that I\u0027m not happy with but I reluctantly accept, that now does make it literally impossible for you to catch the problem in your script no matter what additional support gets implemented in kOS.\u003C/p\u003E\u003Cp\u003EThat change is that the moment any value becomes NaN or Infinity, even just temporarily during calculations of an expression, then kOS deliberately kills your script right there immediately. This is when you see the error message that says \u0022tried to push ____ onto the stack\u0022. (where ____ is \u0027NaN\u0027 or \u0027Infinity\u0027). Because of this change it would be pointless now to implement an isNaN check because by the time you get to the point where your script can run that check, kOS has already killed your script.\u003C/p\u003E\u003Cp\u003EThis change was made to make it impossible for the mod to ever pass a value of NaN or Infinity into any of KSP\u0027s API calls regardless of what the kOS script does, because now the kOS script cannot even \u0022store\u0022 a value of NaN or Infinity in any value anywhere. KSP\u0027s API doesn\u0027t protect itself from callers giving it bogus data so KSP can crash when it gets a value like that.\u003C/p\u003E\u003Cp\u003EI\u0027m a bit unhappy about the solution, but I can understand that it\u0027s the simplest quickest way to implement it. I think the slightly more complex solution of passing arguments through a sanity check *only at* the moments they go into a KSP API method would have been nicer, but admit that it\u0027s a more time consuming solution to write.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-11T09:04:16Z\u0022 title=\u002204/11/2014 09:04  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 11, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Hans Dorn","CreatedById":105419,"CreatedDateTime":"2014-04-11T18:30:16Z","Content":"\n\u003Cp\u003EIs this true?\u003C/p\u003E\u003Cp\u003EI don\u0027t like this at all, since KSP keeps feeding us NaNs and infinities. \u003C/p\u003E\u003Cp\u003EI\u0027d rather not have this make my scripts terminate...\u003C/p\u003E\u003Cp\u003EP.S: all comparisons to NaNs fail: \u003C/p\u003E\u003Cp\u003EA variable containing a NaN would be neither \u0026gt; 0 nor \u0026lt;= 0.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-11T20:31:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hans Dorn\u0022 data-cite=\u0022Hans Dorn\u0022\u003E\u003Cdiv\u003EIs this true?\u003Cp\u003EI don\u0027t like this at all, since KSP keeps feeding us NaNs and infinities. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI can\u0027t think of a case where it does that. And in fact the new change would make it impossible to do that. It\u0027s now impossible for the program stack to even hold a NaN or Infinity in it at all, so it can\u0027t feed one to your script anymore (to get it passed into one of the script\u0027s variables it would have had to put it on kOS\u0027s stack for a moment and then popped it back off again.)\u003C/p\u003E\u003Cp\u003EMore than likely one of your own math expressions is doing it. It\u0027s either trying to to trigonometry on invalid input (i.e. what\u0027s the arccos of x where abs(x) \u0026gt; 1? It\u0027s NaN.), or you\u0027re trying to divide a nonzero number by zero (which results in Infinity). The frustration can be that if you have math in a LOCK expression used when flying the ship (i.e. a bit of math called when calculating STEERING or THROTTLE), these calculations can be happening at any random time in your script, so you can\u0027t even do something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elock throttle to x/maxthrust.\u003Cbr\u003E// And then later in the code you try to protect against maxthrust being zero and giving an infinity throttle this way:\u003Cbr\u003E  if doStage {\u003Cbr\u003E    stage.\u003Cbr\u003E    if maxthrust = 0 { unlock throttle. }.  // turn throttle off until the next stage so it doesn\u0027t try to divide by maxthrust of zero.\u003Cbr\u003E  }.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn the new design you can\u0027t even protect against it that way. It steers and flies constantly \u0022in the background\u0022, interrupting your script execution at \u0022random\u0022 times (not really random, but at any rate its outside your control) to go fly the ship a moment, then going back to continuing execution of your script where it left off. This sets up a race condition where if this interruption just happens to occur in between your call to \u0022stage.\u0022 and your call to \u0022unlock throttle\u0022, then your script hasn\u0027t gotten around to decoupling the throttle from the infinity value you get from dividing by zero, and your script gets killed. Because it\u0027s impossible to mark a section of the script as an \u0022atomic section\u0022, you are helpless to do anything about this. It\u0027s impossible to write script code that can be guaranteed to catch the condition between when it gets set and when it gets used by the fly by wire system.\u003C/p\u003E\u003Cp\u003ETherefore the only way to catch it is to NEVER, even for one brief instant of time, let it happen. To do something like the above I now have to do it this way:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset myMaxThrust to maxthrust.\u003Cbr\u003Elock throttle to x/myMaxThrust.\u003Cbr\u003E...\u003Cbr\u003E// And then later in the code you try to protect against maxthrust being zero and giving an infinity throttle this way:\u003Cbr\u003E  if doStage {\u003Cbr\u003E    stage.\u003Cbr\u003E    if maxthrust = 0 {\u003Cbr\u003E      set myMaxThrust to 0.01.  // Use a very small but not quite zero value, so throttle is big but not infinity.\u003Cbr\u003E   } else {\u003Cbr\u003E     set myMaxThrust to maxthrust.\u003Cbr\u003E  }.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI too don\u0027t like it, but it\u0027s because its less elegant programming to check all your possible error conditions ahead of time before trying something than it is to unconditionally try to do it, but then check for an error condition afterward. In other words this commonly used bit of logic in programs:\u003C/p\u003E\u003Cp\u003Eif (try to open the file) failed then (print error condition here)\u003C/p\u003E\u003Cp\u003EIs a lot more elegant than this:\u003C/p\u003E\u003Cp\u003Eif (check for filename existing) then\u003C/p\u003E\u003Cp\u003Eif (check for proper permissions) then\u003C/p\u003E\u003Cp\u003Eif (check for disk mounted okay) then\u003C/p\u003E\u003Cp\u003E...etc...\u003C/p\u003E\u003Cp\u003Ethen (try to open file).\u003C/p\u003E\u003Cp\u003EIt is currently POSSIBLE to stop any NaN or Infinity from happening before it kills your script, but only by checking every case where a calculation could come out that way, ahead of time, before it happens. It\u0027s possible, but not very nice.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EP.S: all comparisons to NaNs fail: \u003C/p\u003E\u003Cp\u003EA variable containing a NaN would be neither \u0026gt; 0 nor \u0026lt;= 0.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s actually correct according to how the IEEE specifications for the common floating point representations say NaN numbers are meant to work. You are never meant to be able to do anything at all with NaN other than check \u0022is it NaN?\u0022, and that check cannot be performed directly like so: \u0022if num == NAN\u0022, because there\u0027s more than one way to represent NaN in binary form and such a check would therefore be a mess to implement. Instead all languages in which a program may need to deal with NaN values because the language doesn\u0027t mask them off should provide a feature that lets you check with a function or macro call, like so: \u0022if isNan(num)\u0022 because then the underlying fact that there\u0027s more than one NaN representation can be dealt with by whatever the implementation of that call does.\u003C/p\u003E\n"},{"CreatedByName":"marianoapp","CreatedById":104009,"CreatedDateTime":"2014-04-11T20:41:44Z","Content":"\n\u003Cp\u003EEven if KSP returns a NaN sometimes it doesn\u0027t like when you send them back. Trying to, for example, operate with a vector which has a NaN or Infinity component causes KSP to crash with a black screen. I agree that the current solution is too restrictive but it was the safer way to solve this situation. If we allow NaNs back we\u0027ll have to add validations everywhere to avoid KSP from crashing.\u003C/p\u003E\u003Cp\u003EOther option I was considering is to add a config option to disable this \u0022safe mode\u0022 and allow NaNs and Infinities back, and give the script writers a couple of functions to check for this special values. Along this we should add validations in most critical places to avoid a crash but it would be a best effort kind of thing, so you shouldn\u0027t rely on kOS catching the NaNs you missed.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-11T21:47:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022marianoapp\u0022 data-cite=\u0022marianoapp\u0022\u003E\u003Cdiv\u003EEven if KSP returns a NaN sometimes it doesn\u0027t like when you send them back. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes there exist the danger, with the current kOS code, that through no fault of the script programmer, KSP decides to RETURN a NaN into a variable, and then this causes kOS to crash the script because it stores that NaN on the stack? i.e. imagine trying to read a value from the game engine, like maneuver node ETA, or current target\u0027s distance, and so on, and then KSP gives you a NaN for it, and the script crashes before the player has any control over it?\u003C/p\u003E\n"},{"CreatedByName":"marianoapp","CreatedById":104009,"CreatedDateTime":"2014-04-11T22:26:07Z","Content":"\n\u003Cp\u003EIt shouldn\u0027t, at least I have never experienced it but there\u0027s an issue in the tracker about a NaN crash even after the we added the validations. I think the parts that could be compromised are those who deal with KSP directly (like the steering helper when you lock to a steering) that are executed in the OnFlyByWire update.\u003C/p\u003E\n"},{"CreatedByName":"TranquilTempest","CreatedById":18141,"CreatedDateTime":"2014-04-12T13:17:24Z","Content":"\n\u003Cp\u003ESpeaking of steering, is there a way to ignore roll when locking steering? I\u0027ve tried to read facing:roll so I can subtract it out, but it\u0027s always within FP jitter of 0.\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-13T17:12:57Z","Content":"\n\u003Cp\u003EAre pointers possible?\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-04-13T18:15:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EAre pointers possible?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENope. I have seen this request a few times now, what were you thinking about doing with them?\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-13T18:53:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003ENope. I have seen this request a few times now, what were you thinking about doing with them?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027d like to point towards periapsis or apoapsis for creating a circularisation maneuver node. Depending on certain conditions it would be one or the other. I think I can do this with an IF statement and locking periapsis or apoapsis to a variable, but I was just curious.\u003C/p\u003E\u003Cp\u003ECan we have a simple mp3 player \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E for alarms?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-13T19:04:41Z\u0022 title=\u002204/13/2014 07:04  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 13, 2014\u003C/time\u003E by Cpt. Kipard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-13T20:21:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cpt. Kipard\u0022 data-cite=\u0022Cpt. Kipard\u0022\u003E\u003Cdiv\u003EI\u0027d like to point towards periapsis or apoapsis for creating a circularisation maneuver node. Depending on certain conditions it would be one or the other. I think I can do this with an IF statement and locking periapsis or apoapsis to a variable, but I was just curious.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can sort of accomplish that with LOCKs. A LOCK says \u0022return whatever is in the expression\u0022 and \u0022the expression\u0022 could just be another variable and nothing more. LOCK X TO Y has a very similar effect to making X a reference variable pointing at Y, with the exception that theres no iterator math you can do on it (add/subtract from X to \u0022move\u0022 where it\u0027s pointing, which since the ordering of memory under the hood in kOSscript is not defined in any public standard, would be a Bad Thing to try to do.)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ECan we have a simple mp3 player \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E for alarms?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOr in keeping with the theme of old-school tech: The ability to print a BEL character and make the terminal window beep.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-13T20:32:03Z\u0022 title=\u002204/13/2014 08:32  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 13, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-04-13T22:52:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EOr in keeping with the theme of old-school tech: The ability to print a BEL character and make the terminal window beep.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI approve of this as a start. maybe allow midi\u0027s later \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"CaptainKipard","CreatedById":70516,"CreatedDateTime":"2014-04-14T04:39:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EOr in keeping with the theme of old-school tech: The ability to print a BEL character and make the terminal window beep.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESounds good to me. Can we have it configurable in some way? Like wave frequency and simple sequencing? Midi playback also sounds good.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-14T05:20:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003EI approve of this as a start. maybe allow midi\u0027s later \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI wasn\u0027t entirely serious because to a certain extent adding control characters like BEL might require adding the ability to make number-to-character converting (i.e. print chr(7)) and also require adding more sophistication to the terminal interpreter and so on. Might be a bit of a mess.\u003C/p\u003E\n"},{"CreatedByName":"Xty","CreatedById":94977,"CreatedDateTime":"2014-04-15T00:50:53Z","Content":"\n\u003Cp\u003EI\u0027m having some issues with a script and I\u0027m not sure if I have some syntax or logic error or something, or if there\u0027s some weird bug with KOS. I\u0027m using the new pre-release v0.12.P3.\u003C/p\u003E\u003Cp\u003EI know exactly which part is causing the problem, but I don\u0027t understand why it is causing the problem.\u003C/p\u003E\u003Cp\u003EThis part, for some reason, is causing the throttle to be unlocked right away, even though it shouldn\u0027t even be executed. \u003C/p\u003E\u003Cp\u003ESnippet from stager.txt\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EIF fuelGood = FALSE OR airGood = FALSE \u003Cbr\u003E{\u003Cbr\u003E\tprint \u0022no good\u0022.\u003Cbr\u003E\tIF airGood = FALSE \u003Cbr\u003E\t{\u003Cbr\u003E\t\tLOCK THROTTLE TO 0.\u003Cbr\u003E\t\t//print \u0022why are you unlocking stuff!\u0022.\u003Cbr\u003E\u003Cbr\u003E\t\tDECLARE enginesOff.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf I place a print statement there, nothing is printed, but if I comment out the \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ELOCK THROTTLE TO 0.\u003C/pre\u003E\u003Cp\u003E then it works as expected.\u003C/p\u003E\u003Cp\u003Etest.txt\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Elock throttle to 1.\u003Cbr\u003Elock steering to UP \u002B R(0,0,180).\u003Cbr\u003E\u003Cbr\u003Euntil 1 {\u003Cbr\u003Eprint \u0022test\u0022.\u003Cbr\u003E\trun stager.\u003Cbr\u003E\twait 1.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Estager.txt\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ELIST PARTS IN prts.\u003Cbr\u003ESET lastStage TO 0.\u003Cbr\u003ESET lastCoupler to 0.\u003Cbr\u003E\u003Cbr\u003EFOR p IN prts {\u003Cbr\u003E\tIF p:STAGE \u0026gt; lastStage {\u003Cbr\u003E\t\tSET lastStage TO p:STAGE.\u003Cbr\u003E\t}.\u003Cbr\u003E\tRUN decouplers(p:NAME).\u003Cbr\u003E\tIF return = TRUE {\u003Cbr\u003E\t\tIF p:STAGE \u0026gt; lastCoupler {\u003Cbr\u003E\t\t\tSET lastCoupler TO p:STAGE.\u003Cbr\u003E\t\t}.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003E\u003Cbr\u003ESET fuelGood TO FALSE.\u003Cbr\u003ESET airGood TO TRUE.\u003Cbr\u003E\u003Cbr\u003EFOR p IN prts {\u003Cbr\u003E\tIF p:STAGE \u0026gt;= lastCoupler {\u003Cbr\u003E\t\tFOR res IN p:RESOURCES {\u003Cbr\u003E\t\t\tIF res:NAME = \u0022liquidfuel\u0022 OR res:NAME = \u0022solidfuel\u0022 OR res:NAME = \u0022oxidizer\u0022 {\u003Cbr\u003E\t\t\t\tIF res:AMOUNT \u0026gt; 0 {\u003Cbr\u003E\t\t\t\t\tSET fuelGood TO TRUE.\u003Cbr\u003E\t\t\t\t}.\u003Cbr\u003E\t\t\t}.\u003Cbr\u003E\t\t\tIF res:NAME = \u0022intakeair\u0022 {\u003Cbr\u003E\t\t\t\tIF res:AMOUNT = 0 {\u003Cbr\u003E\t\t\t\t\tSET airGood TO FALSE.\u003Cbr\u003E\t\t\t\t}.\u003Cbr\u003E\t\t\t}.\u003Cbr\u003E\t\t}.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003E\u003Cbr\u003EIF fuelGood = FALSE OR airGood = FALSE \u003Cbr\u003E{\u003Cbr\u003E\tprint \u0022no good\u0022.\u003Cbr\u003E\tIF airGood = FALSE \u003Cbr\u003E\t{\u003Cbr\u003E\t\tLOCK THROTTLE TO 0.\u003Cbr\u003E\t\t//print \u0022why are you unlocking stuff!\u0022.\u003Cbr\u003E\u003Cbr\u003E\t\tDECLARE enginesOff.\u003Cbr\u003E\t\tUNTIL enginesOff = TRUE \u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tSET enginesOff TO TRUE.\u003Cbr\u003E\t\t\tLIST ENGINES IN engs.\u003Cbr\u003E\t\t\tFOR eng IN engs \u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tIF eng:IGNITION = TRUE \u003Cbr\u003E\t\t\t\t{\u003Cbr\u003E\t\t\t\t\tIF eng:THRUST \u0026gt; 10 \u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\tSET enginesOff TO FALSE.\u003Cbr\u003E\t\t\t\t\t}.\u003Cbr\u003E\t\t\t\t}.\u003Cbr\u003E\t\t\t}.\u003Cbr\u003E\t\t}.\u003Cbr\u003E\t}.\u003Cbr\u003E\tSTAGE.\u003Cbr\u003E\tIF airGood = FALSE \u003Cbr\u003E\t{\u003Cbr\u003E\t\tUNLOCK THROTTLE.\u003Cbr\u003E\t}.\u003Cbr\u003E\u003Cbr\u003E\tSET doubleStage TO TRUE.\u003Cbr\u003E\u003Cbr\u003E\tLIST ENGINES IN engs.\u003Cbr\u003E\tFOR eng IN engs \u003Cbr\u003E\t{\u003Cbr\u003E\t\tIF eng:IGNITION = TRUE \u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tSET doubleStage TO FALSE.\u003Cbr\u003E\t\t}.\u003Cbr\u003E\t}.\u003Cbr\u003E\u003Cbr\u003E\tIF doubleStage = TRUE \u003Cbr\u003E\t{\u003Cbr\u003E\t\tWAIT 1.\u003Cbr\u003E\t\tSTAGE.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"TranquilTempest","CreatedById":18141,"CreatedDateTime":"2014-04-15T01:50:26Z","Content":"\n\u003Cp\u003ETry locking throttle to a variable instead of 0, then setting that variable to whatever.\u003C/p\u003E\u003Cp\u003EIn other news, I\u0027ve spent waaaaay too much time refining my ascent autopilot script. You know you\u0027re off the deep end when you consider correcting for how fast the ship rotates.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-15T02:01:07Z","Content":"\n\u003Cp\u003E@Xty, Your test script looks weird to me. What\u0027s the \u0022UNTIL 1\u0022 for? Why make a loop that is designed to quit unconditionally before it even runs?\u003C/p\u003E\u003Cp\u003EAlso, if you are trying to use UNTIL 1 or UNTIL 0 like you are, you should be aware of this bug with the UNTIL statement:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/KSP-KOS/KOS/issues/36\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KSP-KOS/KOS/issues/36\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe fix is already implemented in a pull request but that hasn\u0027t made it into the v0.12.P3 release. I\u0027m not sure if that\u0027s the problem here but it\u0027s something you should know if you\u0027re using that in your script.\u003C/p\u003E\n"},{"CreatedByName":"Xty","CreatedById":94977,"CreatedDateTime":"2014-04-15T02:04:15Z","Content":"\n\u003Cp\u003ELocking it to a variable makes no difference.. infact, locking it to a non 0 number or a non zero variable still makes it unlock for some reason. And that piece of code shouldn\u0027t even be being executed. I don\u0027t understand it.\u003C/p\u003E\n"},{"CreatedByName":"Xty","CreatedById":94977,"CreatedDateTime":"2014-04-15T02:05:24Z","Content":"\n\u003Cp\u003EThe UNTIL 1 just makes it run forever, I thought it used to be until 0 that did that but apparently no, its until 1.. Perhaps thats a new bug, but I don\u0027t think thats what is causing the issue, I tried UNTIL FALSE {} instead but same problem.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-15T02:08:29Z\u0022 title=\u002204/15/2014 02:08  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 15, 2014\u003C/time\u003E by Xty\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-15T02:16:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Xty\u0022 data-cite=\u0022Xty\u0022\u003E\u003Cdiv\u003EThe UNTIL 1 just makes it run forever, I thought it used to be until 0 that did that but apparently no, its until 1.. Perhaps thats a new bug, but I don\u0027t think thats what is causing the issue, I tried UNTIL FALSE {} instead but same problem.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf you\u0027ve taught yourself that UNTIL 1 is the way you loop forever, then you\u0027ve accidentally taught yourself to write code that is dependent on a bug remaining unfixed. \u0022UNTIL 1\u0022 looping forever is a bug. \u00221\u0022 should be interpreted as \u0027true\u0027, so UNTIL 1 *should* mean the same thing as UNTIL TRUE.\u003C/p\u003E\u003Cp\u003EI don\u0027t think this is causing the problem you\u0027re having. I just wanted to warn you about it because I expect the fix for UNTIL 1 will be coming out soon and what you wrote is dependent on the bug continuing to exist.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-15T02:23:14Z\u0022 title=\u002204/15/2014 02:23  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 15, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Xty","CreatedById":94977,"CreatedDateTime":"2014-04-15T03:11:13Z","Content":"\n\u003Cp\u003EIt\u0027s not that I taught myself UNTIL 1 is loop forever, it\u0027s that UNTIL 0 didn\u0027t work so I switched it. But thank you. Anyways that not my real issue, that test script is just for testing if it works, because it wasn\u0027t working.\u003C/p\u003E\n"},{"CreatedByName":"marianoapp","CreatedById":104009,"CreatedDateTime":"2014-04-15T03:32:22Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E@Xty:\u003C/strong\u003E The problem is that locks declared in a parent program are not available in a child program. There\u0027s an explanation for why adding the \u0022unlock throttle\u0022 line in the child program causes the throttle to unlock but that is more suited to the development thread, so I won\u0027t enter into details here.\u003C/p\u003E\u003Cp\u003ETry changing the \u0022unlock throttle\u0022 for \u0022set throttle to 0\u0022 which has the same effect and shouldn\u0027t have this problem.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-04-15T03:36:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022marianoapp\u0022 data-cite=\u0022marianoapp\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003E@Xty:\u003C/strong\u003E The problem is that locks declared in a parent program are not available in a child program. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDo you consider this correct behavior or a bug? It didn\u0027t used to work that way pre-kRISC.\u003C/p\u003E\n"}]}