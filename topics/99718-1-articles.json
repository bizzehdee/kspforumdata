{"TopicId":99718,"ForumId":55,"TopicTitle":"On-the-fly aerodynamics vs. pre-generated models","CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2015-02-15T06:36:39Z","PageNum":1,"Articles":[{"CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2015-02-15T06:36:39Z","Content":"\n\u003Cp\u003EI\u0027ve been thinking about aerodynamics.\u003C/p\u003E\u003Cp\u003ENow, I\u0027m not an aerodynamicist. I\u0027m an aerospace engineer, yes, but my focus is in structures. When we got to the Navier-Stokes equations my brain turned inside-out. So I\u0027m familiar with it, but it\u0027s not my area of expertise. So keep that in mind, and if I\u0027m blatantly wrong about any of this, feel free to correct me. That\u0027s why I\u0027m posting this, after all.\u003C/p\u003E\u003Cp\u003EAnyway, the way I understand it, KSP does physics calculations on a per-part basis; this includes aerodynamics. Each part contributes a drag (and/or lift), and then the forces are added to the system that is the craft.\u003C/p\u003E\u003Cp\u003EIn \u003Cem\u003Enormal\u003C/em\u003E flight simulators, a set of aerodynamics parameters are pre-generated based on conditions such as altitude, speed, and angle of attack; these are used to calculate forces and moments which are applied to the aircraft object as a whole. This means you only have to do it once per craft, but it does mean you need those parameters generated beforehand.\u003C/p\u003E\u003Cp\u003ENow...would it be possible to pre-generate such parameters for a craft in KSP? I know the per-part lift and physics calculations offer a great deal of flexibility in dealing with craft of arbitrary configurations...but let\u0027s be honest, for 99.9% of any flight, the configuration of your craft is well-defined. And for \u0022normal\u0022 flights (those that don\u0027t have a crash or an explosion, the \u003Cem\u003Echanges\u003C/em\u003E to the configuration are well-defined, too (staging breaks the craft into well-defined sub-parts). When a craft is built, could a dedicated \u0022calculate-aerodynamics\u0022 function be run on it prior to launch to generate the proper parameters tables and determine how to spread the resulting forces about the craft (for each stage)? It would reduce the load on the physics engine by taking away the need to do the per-part calculation every frame. It would also allow for more advanced occlusion determination because it wouldn\u0027t be time-sensitive, and could take the time to unionize the part primitives into a proper mesh or whatever.\u003C/p\u003E\u003Cp\u003EIs what I\u0027m pondering making any sense, or do I have a complete misunderstanding of the aerodynamics calculations needed and the particular environment of KSP in the Unity engine?\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2015-02-15T09:59:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022pincushionman\u0022 data-cite=\u0022pincushionman\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIn \u003Cem\u003Enormal\u003C/em\u003E flight simulators, a set of aerodynamics parameters are pre-generated based on conditions such as altitude, speed, and angle of attack; these are used to calculate forces and moments which are applied to the aircraft object as a whole. This means you only have to do it once per craft, but it does mean you need those parameters generated beforehand.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot sure if i understand it correctly, but given that altitude, speed, and angle of attack etc constantly change during a rocket\u0027s ascent, would that not be a whole lot of calculations to do beforehand?\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2015-02-15T10:12:19Z","Content":"\n\u003Cp\u003EYou are correct. In addition, since crafts can (and frequently do) break apart in KSP, that sort of model would have lots of trouble dealing with a craft when it starts to crash. While it is the most efficient way to have those kinds of calculations work properly, it wouldn\u0027t be optimal for KSP\u0027s way of doing things -- rapid assembly and disassembly of craft.\u003C/p\u003E\u003Cp\u003EIt would also have to recalculate those things on the fly if you tried to dock something and then reenter the atmosphere with it, and in myriad other situations. Having those things precalculated seems fraught with issues for a game like KSP.\u003C/p\u003E\n"},{"CreatedByName":"Tuareg","CreatedById":84241,"CreatedDateTime":"2015-02-15T12:32:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EYou are correct. In addition, since crafts can (and frequently do) break apart in KSP, that sort of model would have lots of trouble dealing with a craft when it starts to crash. While it is the most efficient way to have those kinds of calculations work properly, it wouldn\u0027t be optimal for KSP\u0027s way of doing things -- rapid assembly and disassembly of craft.\u003Cp\u003EIt would also have to recalculate those things on the fly if you tried to dock something and then reenter the atmosphere with it, and in myriad other situations. Having those things precalculated seems fraught with issues for a game like KSP.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eexcept that the way is always there to switch back to per part calculations when the craft reaches breakingpoint...\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2015-02-15T14:08:59Z","Content":"\n\u003Cp\u003EIsn\u0027t the breaking point determined by per-part interaction, thus requiring per part calculations to find whether or not the craft reaches breaking point?\u003C/p\u003E\n"},{"CreatedByName":"Tuareg","CreatedById":84241,"CreatedDateTime":"2015-02-15T14:56:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rkman\u0022 data-cite=\u0022rkman\u0022\u003E\u003Cdiv\u003EIsn\u0027t the breaking point determined by per-part interaction, thus requiring per part calculations to find whether or not the craft reaches breaking point?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd you cant save the weakest joint as the breaking point of THE CRAFT, and if there is a force bigger than that you check if it was THAT JOINT or not?\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-02-15T15:04:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tuareg\u0022 data-cite=\u0022Tuareg\u0022\u003E\u003Cdiv\u003EAnd you cant save the weakest joint as the breaking point of THE CRAFT, and if there is a force bigger than that you check if it was THAT JOINT or not?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat probably happens in every frame when the engines are on.\u003C/p\u003E\n"},{"CreatedByName":"GoSlash27","CreatedById":111526,"CreatedDateTime":"2015-02-15T15:12:07Z","Content":"\n\u003Cp\u003EIt would seem to me that you could save a whole lot of flops by calculating it out once, then checking for changes. So long as part count and config remain the same, the aero model in use is retained. When a change is flagged, it would recalculate.\u003C/p\u003E\u003Cp\u003E This would not only work better for stable designs, but would also work better for explodey designs.\u003C/p\u003E\u003Cp\u003EBest,\u003C/p\u003E\u003Cp\u003E-Slashy\u003C/p\u003E\n"},{"CreatedByName":"Tuareg","CreatedById":84241,"CreatedDateTime":"2015-02-15T15:25:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jouni\u0022 data-cite=\u0022Jouni\u0022\u003E\u003Cdiv\u003EThat probably happens in every frame when the engines are on.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Enope. forces are vectors not numbers...\u003C/p\u003E\n"},{"CreatedByName":"Xaiier","CreatedById":22833,"CreatedDateTime":"2015-02-15T15:49:42Z","Content":"\n\u003Cp\u003EAerodynamics calculations do not take up a significant portion of the processing load. There is no need to consider outlandish solutions to solve a problem which doesn\u0027t exist.\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-02-15T16:25:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tuareg\u0022 data-cite=\u0022Tuareg\u0022\u003E\u003Cdiv\u003Enope. forces are vectors not numbers...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMany rockets have small parts radially attached to them. If you direct the entire thrust to that part, the force is perpendicular to the joint and probably strong enough to break the joint. I\u0027m not if that was what you meant, but at least it\u0027s a valid interpretation.\u003C/p\u003E\u003Cp\u003EIn general, precomputing is useful if you can predict future situations in advance. If you have a rigid single-staged rocket or a linearly staged rocket, that\u0027s probably true. If you have a KSP rocket or action groups that detach parts (e.g. fairings or payloads), the number possible future situations grows much larger.\u003C/p\u003E\u003Cp\u003EIt also depends on the hardware you assume people having. If it\u0027s a gaming PC, you\u0027re out of luck. If it\u0027s a decent computer with 8\u002B fast cores and 32 GB of memory, you can probably use a few cores for precomputing possible futures, and a few gigabytes for caching the results.\u003C/p\u003E\n"},{"CreatedByName":"Tuareg","CreatedById":84241,"CreatedDateTime":"2015-02-15T17:49:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jouni\u0022 data-cite=\u0022Jouni\u0022\u003E\u003Cdiv\u003EIt also depends on the hardware you assume people having. If it\u0027s a gaming PC, you\u0027re out of luck. If it\u0027s a decent computer with 8\u002B fast cores and 32 GB of memory, you can probably use a few cores for precomputing possible futures, and a few gigabytes for caching the results.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Esure. i love these, i dont know what am i talking about but i pull some numbers out of my... posts. worth it... this thing is all about save resources not to use more...\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-02-15T19:59:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tuareg\u0022 data-cite=\u0022Tuareg\u0022\u003E\u003Cdiv\u003Esure. i love these, i dont know what am i talking about but i pull some numbers out of my... posts. worth it... this thing is all about save resources not to use more...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESaving resources is only worthwhile, if you can use them for something else. If you don\u0027t use the unused memory and CPU cores for something else while playing the game, you\u0027re wasting them.\u003C/p\u003E\u003Cp\u003EThere are basically three ways to use precomputed physics in KSP:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003E Precompute only what is needed. This saves a lot of memory, while causing significant delays during staging.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Precompute everything in advance. This uses a lot of memory, while causing huge delays before launch.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Precompute things in the background. This uses a lot of memory (but less than approach 2) and a lot of CPU power, but there are usually no delays during the game.\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EApproach 3 is generally preferable, because long delays are kind of annoying.\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-15T20:01:19Z","Content":"\n\u003Cp\u003EModeling the craft as a single body leads to much better aerodynamics, but you need a way of getting (and then simplifying) the mesh of the whole craft as a convex hull--and \u003Cem\u003Ethen\u003C/em\u003E you need to be able to do it so fast there isn\u0027t a \u0022lurch\u0022 when you decouple a stage.\u003C/p\u003E\n"},{"CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2015-02-17T06:18:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EModeling the craft as a single body leads to much better aerodynamics, but you need a way of getting (and then simplifying) the mesh of the whole craft as a convex hull--and \u003Cem\u003Ethen\u003C/em\u003E you need to be able to do it so fast there isn\u0027t a \u0022lurch\u0022 when you decouple a stage.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI would think the obvious place to do that would be the build scene, when there aren\u0027t any other physics to contend with and it isn\u0027t time-sensitive. You\u0027d generate appropriate sets for all the stages at that time (since again, staging part splits are well-defined). The question then is how much extra memory that would take up compared to the rest of the craft data you have to load.\u003C/p\u003E\u003Cp\u003E...And it also leaves us with RUD situations. I don\u0027t think it would be a good idea to attempt to predict those too heavily. But if it were possible to separate such calculations enough from the rest of the physics they might be thrown over to their own thread, you could maybe fall back on the per-primitive calculation method long enough to calculate the new matrices in the background. It\u0027s not like major part breakage doesn\u0027t cause major control issues all by itself. You\u0027re usually screwed anyway.\u003C/p\u003E\u003Cp\u003EBut that said, I don\u0027t have any idea how quickly such matrices can be generated using \u003Cem\u003Eany \u003C/em\u003Emethod, nor do I have any idea how much flexibility in thread handling Unity offers.\u003C/p\u003E\n"}]}