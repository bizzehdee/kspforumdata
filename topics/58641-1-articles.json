{"TopicId":58641,"ForumId":44,"TopicTitle":"Newtonian Calculations","CreatedByName":"mockingking","CreatedById":6738,"CreatedDateTime":"2014-01-02T18:57:08Z","PageNum":1,"Articles":[{"CreatedByName":"mockingking","CreatedById":6738,"CreatedDateTime":"2014-01-02T18:57:08Z","Content":"\n\u003Cp\u003ELet\u0027s say I have two spacecraft in...well, space. They have thrusters, RCS and a good lot of fuel for both. They\u0027re moving at a modest relative velocity, possibly with one or both of them accelerating a bit in whatever direction.\u003C/p\u003E\u003Cp\u003EAssuming they want to rotate to point their ships\u0027 noses at the other as quickly as possible, I suppose they would fire their RCS at full force to get some rotation going, then apply torque in the opposite direction from a certain point onward.\u003C/p\u003E\u003Cp\u003EHow would the captain of one such vessel calculate whether that point at which the RCS thrust needs to be reversed has been reached?\u003C/p\u003E\u003Cp\u003EThanks for any help!\u003C/p\u003E\n"},{"CreatedByName":"maccollo","CreatedById":72759,"CreatedDateTime":"2014-01-02T19:20:56Z","Content":"\n\u003Cp\u003EAt the same thrust, it will take the same amount of time and degrees rotated to stop as it took to accelerate to that point.\u003C/p\u003E\u003Cp\u003EIf you wanted to rotate 90 degrees as fast as possible you would rotate 45 degrees and then flip it.\u003C/p\u003E\u003Cp\u003ENot much of a calculation really =P\u003C/p\u003E\n"},{"CreatedByName":"-Velocity-","CreatedById":74097,"CreatedDateTime":"2014-01-02T19:25:52Z","Content":"\n\u003Cp\u003ETo most quickly flip your nose around, and say, your nose had to move 120 degrees, then you would fire the RCS continuously for the first 60 degrees in the direction to build up rotation, and then fire the RCS continuously for the last 60 degrees in the direction opposite your rotation to kill your rotation.\u003C/p\u003E\n"},{"CreatedByName":"mockingking","CreatedById":6738,"CreatedDateTime":"2014-01-02T19:35:18Z","Content":"\n\u003Cp\u003EAlright, thanks for the input. Let\u0027s expand.\u003C/p\u003E\u003Cp\u003EWe now have strong relative velocity to start with, and both craft are subject to random bursts of acceleration - using any sort of pre-planned schedule won\u0027t do any good. Instead, we need to actually do some math to find out whether we should still accelerate the rotation towards the target or reverse it, based on our angular velocity and the thrust available.\u003C/p\u003E\u003Cp\u003EGentlemen \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-02T19:39:44Z\u0022 title=\u002201/02/2014 07:39  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 2, 2014\u003C/time\u003E by mockingking\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"BlackBicycle","CreatedById":29657,"CreatedDateTime":"2014-01-02T23:52:38Z","Content":"\n\u003Cp\u003ENot sure what you are getting to. Any maneuver like that (supposing you want it to be done as quickly as possible) is half the rotation full thrust there, the second half full thrust in the opposite (to stop the rotation).\u003C/p\u003E\u003Cp\u003EAm I missing something, or are you just f... erm... messing with us?\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-03T00:00:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022maccollo\u0022 data-cite=\u0022maccollo\u0022\u003E\u003Cdiv\u003EAt the same thrust, it will take the same amount of time and degrees rotated to stop as it took to accelerate to that point.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn a perfect world, yes. In the real world, axis of rotation will probably tumble, and you\u0027ll end up with a different RCS orientation than you started out with, requiring a different amount of RCS thrust to stop moving. That\u0027s even if you started out with a nice symmetry in RCS port arrangement, which isn\u0027t a guarantee. Result is that it can take more or less time and fuel to stop rotation than it took to start it, depending on how things align.\u003C/p\u003E\u003Cp\u003ERotation optimization problems in 3D are actually crazy difficult, because rotations are cyclic, do not commute, and axis of rotation rarely coincides with principal axes. Fortunately, an approximate solution is almost always good enough, and these are easy enough to crank out.\u003C/p\u003E\n"},{"CreatedByName":"mockingking","CreatedById":6738,"CreatedDateTime":"2014-01-03T09:14:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BlackBicycle\u0022 data-cite=\u0022BlackBicycle\u0022\u003E\u003Cdiv\u003ENot sure what you are getting to. Any maneuver like that (supposing you want it to be done as quickly as possible) is half the rotation full thrust there, the second half full thrust in the opposite (to stop the rotation).\u003Cp\u003EAm I missing something, or are you just f... erm... messing with us?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERest assured, nothing is further from my mind than mucking with the people I\u0027m trying to get to help me!\u003C/p\u003E\u003Cp\u003EThink of moving targets. If you plan a rotation (or a zero-zero intercept) in advance, but the target accelerates in whatever fashion, then by the time your manoeuvre is finished your target\u0027s position will no longer correspond to your heading (or new position). This necessitates the real-time calculation of the point of turnover from acceleration to deceleration, unless one tolerates a degree of inefficiency o.O\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-01-03T09:38:30Z","Content":"\n\u003Cp\u003ESo you\u0027re saying you\u0027re trying to track a moving target in an optimal way? Sounds like you want to write an estimator (some form of Kalman filter) using as many past and current measurements of the target as you can get, along with a best-approximation model of the target\u0027s dynamics, and a best-guess prediction of its future acceleration (which might just be zero, if you don\u0027t have any better idea). Then you want to solve a constrained finite-horizon optimization problem to reach the target in a way that minimizes a weighted combination of time to intercept and fuel use, subject to a model of your dynamics, sensor measurements, and estimation/prediction of the target\u0027s dynamics. Assuming you have enough computational power to solve this optimization problem in real time, you repeat this process every time you obtain new sensor measurements of the target, updating your predictions accordingly. This is known as receding horizon or model predictive control.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-03T09:40:32Z\u0022 title=\u002201/03/2014 09:40  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 3, 2014\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-03T09:56:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EAssuming you have enough computational power to solve this optimization problem in real time, you repeat this process every time you obtain new sensor measurements of the target, updating your predictions accordingly. This is known as receding horizon or model predictive control.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI found that in most problems of this type, the optimization algorithm is iterative, and you can put a filter update and optimization iteration into the same loop. That way, you get continuous tracking without major overhead.\u003C/p\u003E\u003Cp\u003ESo for the most basic example, write functional you want to optimize, get the latest position/velocity, run Kalman update, run a single step of Gauss-Newton on the input vector and functional to be optimized, rinse, repeat. (P.S. I\u0027ve written something like this for Wires in GMod to fire tracking missiles at other players on the server, albeit, with a simpler filter and just a simple Newton algorithm step. Was fun.)\u003C/p\u003E\u003Cp\u003EBut I have a feeling that all of this is a bit overwhelming for the OP. I\u0027d recommend starting with something much simpler.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-03T10:00:52Z\u0022 title=\u002201/03/2014 10:00  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 3, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mockingking","CreatedById":6738,"CreatedDateTime":"2014-01-03T12:45:43Z","Content":"\n\u003Cp\u003ETrue enough, this all seems awfully complicated for what I thought to be a fairly simple problem.\u003C/p\u003E\u003Cp\u003EIs there really no more compact way of calculating *during the turning process* whether the ship needs to switch to deceleration in order to avoid overshooting?\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-01-03T12:58:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI found that in most problems of this type, the optimization algorithm is iterative, and you can put a filter update and optimization iteration into the same loop. That way, you get continuous tracking without major overhead.\u003Cp\u003ESo for the most basic example, write functional you want to optimize, get the latest position/velocity, run Kalman update, run a single step of Gauss-Newton on the input vector and functional to be optimized, rinse, repeat. (P.S. I\u0027ve written something like this for Wires in GMod to fire tracking missiles at other players on the server, albeit, with a simpler filter and just a simple Newton algorithm step. Was fun.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, do as many optimization iterations as your computational power and sensor sampling time allows. It becomes considerably more difficult to get provable guarantees of feasibility and strict descent for a single iteration when your control inputs and/or states need to satisfy hard constraints. The constrained optimization algorithms that converge most reliably and in the fewest number of iterations are unfortunately the ones where intermediate iterates are infeasible. Most people do an unconstrained optimization and just saturate the results, but you\u0027re very lucky if your problem is simple enough for that to actually be the right thing to do in the presence of constraints.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EBut I have a feeling that all of this is a bit overwhelming for the OP. I\u0027d recommend starting with something much simpler.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESimple problems are so much less interesting...\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-03T14:05:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mockingking\u0022 data-cite=\u0022mockingking\u0022\u003E\u003Cdiv\u003EIs there really no more compact way of calculating *during the turning process* whether the ship needs to switch to deceleration in order to avoid overshooting?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are many simple ways to get a turn without overshooting. Difficulties start when you want it to be optimal in some sense.\u003C/p\u003E\u003Cp\u003EFor simple maneuvers, you can use \u003Ca href=\u0022https://en.wikipedia.org/wiki/PID_controller\u0022 rel=\u0022external nofollow\u0022\u003EPID\u003C/a\u003E, for example. That\u0027s what KSP uses for ASAS. It\u0027s not great for rotations, but you can figure out the right coefficients to make sure you never overshoot. If target is moving, you can also have PID work in a rotating frame where it\u0027s roughly stationary. It\u0027s far from perfect, but it\u0027s simple, and it\u0027s enough in a lot of applications.\u003C/p\u003E\n"}]}