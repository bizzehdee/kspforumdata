{"TopicId":156251,"ForumId":29,"TopicTitle":"CommNet notes for modders","CreatedByName":"TaxiService","CreatedById":74999,"CreatedDateTime":"2017-02-10T14:49:20Z","PageNum":1,"Articles":[{"CreatedByName":"TaxiService","CreatedById":74999,"CreatedDateTime":"2017-02-10T14:49:21Z","Content":"\n\u003Cp\u003E\nHi, I figure I can post my notes about KSP\u0027s CommNet, given the namespace of CommNet is sort of large to sift through and no one has posted on CommNet yet.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EOrganisation of KSP CommNet\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nThe entire CommNet feature is mainly consisted of CommNetUI, CommNetwork and CommNetVessel, along with a bunch of support classes and data structures\n\u003C/li\u003E\n\u003Cli\u003E\nCommNetUI is the user interface where a player is seeing and interacting with. This class has the method of interest, UpdateDisplay(), which draws every connection and shows/hides some or all connections, depending on the mode (FirstHop, VesselLinks, Network etc) the player selected.\n\u003C/li\u003E\n\u003Cli\u003E\nCommNetwork is subclass of the abstract class, Net, which is data-oriented class itself with multiple lists of different types, such as Link, Data and Occluder. This CommNetwork class manages and operates a global network of all CommNode (vessels) and CommLink (connections) objects. For example, the potential connectivity of a pair of two vessels is tested by SetNodeConnection() according to the connection and range rules.\n\u003C/li\u003E\n\u003Cli\u003E\nEvery vessel (Debris, Rover, Flag etc) has the variable \u0027connection\u0027 of CommNetVessel class. This class has a number of methods that are releated to the vessel itself. For example, the class\u0027s CalculatePlasmaMult() calculates the multipler of the radio blackout of the reentrying vessel.\n\u003C/li\u003E\n\u003Cli\u003E\nCommNetScenario is responsible for starting up the CommNetwork and CommNetUI and disabling/enabling CommNet according to Game\u0027s settings.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ESupport CommNet class\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCommNetNetwork seems to be a service layer where vessel and body data are added to and removed from CommNetork. It regularly fires a chain of health-check events for the CommNet.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ERelevant data structures of the CommNet\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nCommNetHome is a ground station, whose data includes the body, alt, lat and lon.\n\u003C/li\u003E\n\u003Cli\u003E\nCommNetBody is a celestial body, whose occluder is supplied for CommNetwork to check if the connection is occluded between two vessels.\n\u003C/li\u003E\n\u003Cli\u003E\nCommNetVessel is a data structure attached to every vessel, even a debris (of course it is null). It has an unused variable of\u00A0signalDelay, presumed a little gift for a certain mod. It also has a number of network-processing methods you can override:\u00A0OnNetworkInitialized(),\u00A0OnNetworkPostUpdate(),\u00A0OnNetworkPreUpdate() and\u00A0UpdateComm().\n\u003C/li\u003E\n\u003Cli\u003E\nCommNode is analogous to a node of a graph. It has some information about antennas, remote-control capability. It is stored in the CommNetwork. The class conveniently provides a comparer, IEqualityComparer\u0026lt;CommNode\u0026gt;.\n\u003C/li\u003E\n\u003Cli\u003E\nLikewise, CommLink is analogous to an edge of a graph. It contains some information about the vessel-pair connection, such as the signal strength, relay capability of each node.\n\u003C/li\u003E\n\u003Cli\u003E\nCommPath, implied by its name, is a order-sequence of CommLink.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow to substitute KSP\u0027s CommNet for your own CommNet\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nSubclass CommNetUI to write your interface\n\u003C/li\u003E\n\u003Cli\u003E\nSubclass CommNetwork to create your own connection rules\n\u003C/li\u003E\n\u003Cli\u003E\nSubclass CommNetScenario to replace the KSP\u0027s stock CommNetwork and CommNetUI instances with your own subclasses above. You can also override OnLoad and OnSave for your CommNet data. You will need the KSPScenario tag to let KSP know it should run your CommNetScenario subclass instead of the stock CommNetScenario.\u00A0\n\u003C/li\u003E\n\u003Cli\u003E\nSubclass CommNetVessel to write your communication behaviour for each vessel. KSP will automatically substitute the stock CommNetVessel for yours.\n\u003C/li\u003E\n\u003Cli\u003E\nBug (Squad is aware of this now): CommNetNetwork class has the hard-coded CommNetwork instance in ResetNetwork() so subclass this class to fix it and then replace it in your CommNetScenario subclass (via reflection, singleton or FindObjectOfType)\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-02-10T14:50:20Z\u0022 title=\u002202/10/2017 02:50  PM\u0022 data-short=\u00227 yr\u0022\u003EFebruary 10, 2017\u003C/time\u003E by TaxiService\u003C/strong\u003E\n\u003C/span\u003E\n"}]}