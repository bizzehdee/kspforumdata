{"TopicId":169022,"ForumId":44,"TopicTitle":"Newtonian motion in 3D space, Question","CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2017-12-29T16:55:13Z","PageNum":1,"Articles":[{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2017-12-29T16:55:13Z","Content":"\n\u003Cp\u003E\nThis is one for all the computer and physics whizz kids out there.\n\u003C/p\u003E\n\u003Cp\u003E\nI have been writing some code and came across what should be a standard problem, but I cannot find the answer and I have look all over the place. Wiki may have the answer but the symbology they are using is confused with other math symbols an it is difficult to follow. When you apply accelerations to a particle in 3D space you kick it from keplerian universe (rails, soft rails, whatever) to a newtonian universe, while it is fairly east to work the position, velocity and acceleration vectors is the newtonian state and also a bit harder to go from the newtonian state in the XY back to the Keplerian state. The three dimensional state that includes motion in the Z dimension however creates a problem.\n\u003C/p\u003E\n\u003Cp\u003E\nThe problem comes when applying motion along the Z axis. So I came up with the following solution (Edit: V is velocity, T is along the tangent to P, radial is along the parallel to r, r = \u0026lt;(P - O)\u003Csub\u003Ex,y,z\u003C/sub\u003E\u0026gt;, O is the focal points position) Assuming the CB is large and the particle is small then r = ||P|| and points in \u0026lt;P\u0026gt; direction.\n\u003C/p\u003E\n\u003Cp\u003E\nIn order to calculate\u003Cem\u003E w\u003C/em\u003E which is V\u003Csub\u003ET\u003C/sub\u003E/r the relation ship of V\u003Csub\u003E\u2219\u003C/sub\u003E to V = SQRT(V\u003Csub\u003ET\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E \u002B V\u003Csub\u003Eradial\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E) this is the same in 2 and 3 dimensions since velocities are in the polar coordinate system.\n\u003C/p\u003E\n\u003Cp\u003E\nV\u003Csub\u003Eradial\u003C/sub\u003E = P\u003Csub\u003Eu\u003C/sub\u003E\u003Cstrong\u003E\u2219\u003C/strong\u003EV where Pu denotes the normalized position vector whose magnitude is a moment of radius (both vectors have i, j and k components that are perpendicular to each other)\n\u003C/p\u003E\n\u003Cp\u003E\nIt seems like this is the correct answer but I have yet to find verification on the internet and it proves rather difficult to verify the conclusions through the programming since I need to create an artificial angle, \u0398, that describes the objects position relative to the plane of motion. There are two positions when the vector jumps off the rails. At is apoapsis and at the SIGN(motion) * -Burnspan/2. Which leads to the second problem . . . where are the rails (notably in z).\n\u003C/p\u003E\n\u003Cp\u003E\nDoes anyone have a way to convert from a x, y, z=0 system back to a x, y, z system?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-29T17:06:33Z\u0022 title=\u002212/29/2017 05:06  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 29, 2017\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mikegarrison","CreatedById":137807,"CreatedDateTime":"2017-12-29T17:49:11Z","Content":"\n\u003Cp\u003E\nIt seems like you are trying to describe an orbit that is not in the ecliptic plane in a rectangular coordinate system that is based in the ecliptic plane, is that correct? Any particular reason why you have to use that particular coord system? Any coord system can be converted to any other, but that doesn\u0027t mean it should be.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-29T17:51:13Z\u0022 title=\u002212/29/2017 05:51  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 29, 2017\u003C/time\u003E by mikegarrison\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2017-12-29T18:48:28Z","Content":"\n\u003Cp\u003E\nThe opposite question is why not use R\u003Csup\u003E3\u003C/sup\u003E space completely, the reason for not using it completely is that during part of an orbit that is specifically non-inertial , and in general this is going to occur near the apoapsis, the newtonian coordinate translations introduce unnecessary inaccuracies and increase computational time, and since the calculations occur per interval of time, as e increases the error also increases. Therefore long periods where no thrust is applied its best to jump on rails. The reason is that to go off the rails only takes one more application of a subroutine no matter how much time has expired. Although the elliptical is less computation intensive it introduces more inaccuracies when if follows non-inertial time intervals (this is due to the sin/cos/tan functions). When thrusts are applied, and frankly its easier to factor space-time, thrust/m and any other acceleration that might need to be added (see other threads on rotation) in the R\u003Csup\u003E3\u003C/sup\u003E space than in Keplarian ellipticals.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reason to jump\u00A0 in and out of R3 space is particular to the problem of using ION drives, notable low energy or mass flow techniques for retaining \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E. In this circumstance thrust might not be applied all the time, or along the elliptical with radial vector of velocity (such radially down before \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E or radially up after \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E). Hence if you are on the elliptical and there are no forces applied on the axis normal to travel then there is no reason to rotate the elliptical. So that the elliptical can be used to calculate the \u0398 relative to the velocity vector for which create acceleration vectors (remember that we don\u0027t really care about force, but specific force, we assume that mass has been factored into the acceleration) and observe the result in order to tune the program. The problem is that at some point you may need to jump off the rails and see where you have been.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nPublic Sub Ellipticize(X As Double, Y As Double, Z As Double, vX As Double, vY As Double, vZ As Double, v As Double, SME As Double, a As Double, e As Double, l As Double, Pe As Double, Apo As Double, Optional theta as Double,  Optional phi As Double)\nDim vD As Double, vR As Double, vT As Double, Period As Double, Sweep As Double, Area As Double, XY As Double, posRatio As Double, velRatio As Double, DZ As Double\nDim Xu As Double, Yu As Double, Zu As Double, r As Double, vXu As Double, vYu As Double, vZu As Double, pvu As Double\nDim vRad As Double, vTan As Double, omega As Double, QueryAngle As Double\n  a = -stdGP / (2 * SME)\n  Period = (2 * Pi * a ^ 1.5) / uR\n  Normalize X, Y, Z, r, Xu, Yu, Zu \u0026lt;===== unit vector definition\n  vRad = DotProduct(Xu, Yu, Zu, vX, vY, vZ) \u0026lt;===== This is the Pu*V\n  vTan = SQRT(v^2 - vRad^2) \u0026lt;====tangential velocity\n  omega = vTan / r \u0026lt;==== angular velocity \n  Sweep = (omega * r ^ 2) / 2\n  Area = Sweep * Period\n  b = Area / (Pi * a)\n  l = b ^ 2 / a\n  e = (1 - b ^ 2 / a ^ 2) ^ 0.5\n  Pe = a * (1 - e): Apo = a * (1 \u002B e)\n  If vRad = 0 Then \u0026lt;===If then else end if defines the keplerian theta. \n    If (r - 0.001) \u0026lt; Pe And Pe \u0026lt; (r \u002B 0.001) Then Theta = 0 Else Theta = Pi \u0026lt;=== eliminate solutions with only one answer\n   Else\n    Theta = arccos((1 - l / r) / e) \u0026lt;===== get a preliminary solution \n    If vRad \u0026lt; 0 Then Theta = 2 * Pi - Theta \u0026lt;=====convert (reverse signs) of all solutions in which radial velocity is negative \n  End If\n  \u0027 need to add stuff here fore the cartesian relationals.\nEnd Sub\n\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-29T19:07:52Z\u0022 title=\u002212/29/2017 07:07  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 29, 2017\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2017-12-30T12:06:35Z","Content":"\n\u003Cp\u003E\nNo sane simulation is going to jump between Cartesian and Keplerian coordinate systems, because precision losses on each burst of your engines are going to make it suck. This is particularly bad when gravity is still a dominant force, and you are integrating it in Cartesian.\u00A0But more importantly, the typical solution is actually a lot easier.\n\u003C/p\u003E\n\u003Cp\u003E\nThe reason Keplerian Elements show up is because they are constants of motion for a 1/R central potential. However, they aren\u0027t the canonical set. If you start with Hamiltonian, in place of semi-major axis and eccentricity, you\u0027ll end up with energy and angular momentum. This is super useful, because these two have very simple equations of motion under perturbation.\n\u003C/p\u003E\n\u003Cp\u003E\ndE/dt = \u003Cstrong\u003Ev\u003C/strong\u003E\u00B7\u003Cstrong\u003EF\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nd\u003Cstrong\u003EL\u003C/strong\u003E/dt = \u003Cstrong\u003Er\u003C/strong\u003E\u2A2F\u003Cstrong\u003EF\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nEnergy gives you semi-major axis directly. Magnitude of angular momentum with respect to it gives you eccentricity. Orientation of angular momentum vector gives you inclination and ascending node. The only things missing are argument of periapsis and anomaly. These have equations of motion as well, but they are a pain to work with, and tend to be numerically unstable anyways.\n\u003C/p\u003E\n\u003Cp\u003E\nInstead, we keep track of Cartesian location of the rocket,\u00A0\u003Cstrong\u003Er\u003C/strong\u003E. Given current true anomaly and periapsis, we compute expected position of the rocket and its velocity \u003Cstrong\u003Ev\u003C/strong\u003E. This already takes into account any influence of gravitational forces. We can now apply perturbation force \u003Cstrong\u003EF\u003C/strong\u003E\u00A0to compute \u003Cstrong\u003Ev\u003C/strong\u003E\u0027,\u00A0\u003Cstrong\u003Er\u003C/strong\u003E\u0027, E\u0027, and\u00A0\u003Cstrong\u003EL\u003C/strong\u003E\u0027 using your favorite integration method. We include velocity here for numerical stability. For this step, we treat E,\u00A0\u003Cstrong\u003EL\u003C/strong\u003E, and\u00A0\u003Cstrong\u003Er\u003C/strong\u003E\u00A0as independent variables. Finally, using these new quantities, we recompute Keplerian Elements.\n\u003C/p\u003E\n\u003Cp\u003E\nThe chief advantage here is that we keep changes due to external forces separate from influence of gravity. That allows keeping track of a nice, clean orbit without nearly as many errors. The other advantage is that you simply don\u0027t have to worry about complex computations. The only things you have to do is convert between anomalies and compute position of the periapsis from these. That\u0027s just as easy to do in 3D as it is in 2D. You get inclination and argument of ascending node gratis.\n\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2017-12-30T16:07:02Z","Content":"\n\u003Cp\u003E\nI don\u0027t know about jumping but moment of force application in the Keplerian system was problematic. The force application problem in the R\u003Csup\u003E3\u003C/sup\u003E is easy like you say, very easy when using unit vectors, I just don\u0027t know how to rail it like the Keplerian. Although I must say I still have to make three passes over a time interval to settle at the right position and velocity when two forces are applied at once. But still its just a repetition replacing the old p1 with the new p1. Just to make sure P1 is equilibrated.\n\u003C/p\u003E\n\u003Cp\u003E\nI can do this in R\u003Csup\u003E2\u003C/sup\u003E. The problem is \u003Cabbr title=\u0022Real Solar System (mod)\u0022\u003ERSS\u003C/abbr\u003E is that they have rigged the entire system to the tilt axis of the Earth, and although I want to test in the Earth elliptical,\u00A0 eventually I want to model outside of Earth and model along exit inclinations that favor planetary intercepts and so I was lusting after an R\u003Csup\u003E3\u003C/sup\u003E model.\n\u003C/p\u003E\n\u003Cp\u003E\nThe KE-PE equivalency is nice but the problem is sorting Z and pXY vectos\u00A0 out over long coasts, if I could do it I would not switch out, coasting in Keplarian system is super easy, its just so inaccurate on the jump you don\u0027t want to do it more than twice, the problem in this system is that jumping out requires using the Arctan (Arcsin or Arccos) function, which introduces about 3 or 4 digits of error. Not to bad per orbit but terrible per burn moment.\n\u003C/p\u003E\n\u003Cp\u003E\nLets get to the specific, the R\u003Csup\u003E3 \u003C/sup\u003Eellipitical has a rotation from systemic E\u003Csub\u003Ex \u003C/sub\u003Ewhich with r and\u00A0 a rotation in Z from plane XY from that defines \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E. Thus all \u0398 in the set of pXY have a unique r based on \u003Cem\u003El\u003C/em\u003E / (1 - e cos (\u0398 - \u0398\u003Csub\u003E\u003Csup\u003Epe\u003C/sup\u003E\u003C/sub\u003E)). pY/pX can be defined but not Z and it cannot be derived from the magnitude r because many Z and \u003Csub\u003EK\u003C/sub\u003E * (pY/pX) can define equal magnitudes so the answer is vague in R3 on the jump. Some aspect of directions of P and V have to be carried though the jump. Since the Keplarian angular moment vectors always point in the Z direction Z is locked and tan of pY/pX is always (\u0398 - \u0398\u003Csub\u003E\u003Csup\u003Epe\u003C/sup\u003E\u003C/sub\u003E). It seems that what is missing here in R\u003Csup\u003E3\u003C/sup\u003E is a way to define Z=0 in terms of its pXY relative to \u0398\u003Csub\u003E\u003Csup\u003Epe. \u003C/sup\u003E\u003C/sub\u003EShouldn\u0027t we be able to define the parameters for the ellipse as iX\u003Csup\u003E2\u003C/sup\u003E/? \u002B jY\u003Csup\u003E2\u003C/sup\u003E/? \u002B kZ\u003Csup\u003E2\u003C/sup\u003E/? = 1\n\u003C/p\u003E\n\u003Cp\u003E\nThe problem is that I haven\u0027t yet found a way to equate pZ to (PXY or \u03B4\u003Csub\u003Efrom \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E\u003C/sub\u003E\u0398). If only I can get an equivilancy going then problem is easily solved. If you put the ship on rails for say 45 degrees ||P|| ||V|| pops out ||Vrad| and ||Vtan|| if you know \u0398 relative to pE and motion then you know the sign of Vrad and if you know that then Radial velocity component is simply sign(Vrad) * unit vectors of P * ||Vrad|| But you need to position vectors for V and you need the position vectors for Vtan.\n\u003C/p\u003E\n\u003Cp\u003E\nI am assuming that these are derived from the Angular moment, I assumed this was a scalar, but it seems like you are telling me its a vector quantity. How to derive unit vectors of P and V in the future (or at a future angle) based on last known physics?\n\u003C/p\u003E\n\u003Cp\u003E\nI think I may have the answer provided I can convert a C centric elliptoid calculation to a f centric format.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E    x(t) = Cx \u002B a cos(t) Ux \u002B b sin(t) Vx\n    y(t) = Cy \u002B a cos(t) Uy \u002B b sin(t) Vy\n    z(t) = Cz \u002B a cos(t) Uz \u002B b sin(t) Vz\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThe problem with this formula is that if C is the center we only know t at \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E and Apo; x, y, and z at (?); ||a||\u00A0 but not the components\u0026lt;U\u0026gt;, ||b|| same problem, know the magnitude but not the components\u0026lt;V\u0026gt;. So this wont work.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-30T16:33:36Z\u0022 title=\u002212/30/2017 04:33  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 30, 2017\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2018-01-02T06:50:12Z","Content":"\n\u003Cp\u003E\nWell here it is if anyone wants it, its a flow chart from hell but. . . .\n\u003C/p\u003E\n\u003Cp\u003E\nAll you are given in this example are std gravitational parameter for an object, \u0026lt;P\u0026gt; and \u0026lt;V\u0026gt;.,\u00A0 \u0022\u0026gt;\u0022 means they are 3-D vectors. These are in R3 space. I will say with all the math it might be better to change coordinate systems and switch back when finished.\u00A0 The first thing that we know we have is a normal to \u0026lt;P\u0026gt; and \u0026lt;V\u0026gt; is \u0026lt;T\u0026gt; the tangent to both (we assume that no rocket can fly absolutely strait up or down.\u003Cbr\u003E\n\u00A0 \u0026lt;P\u0026gt; x \u0026lt;V\u0026gt; = \u0026lt;T\u0026gt;\u00A0\u00A0\u00A0 [Note that when crossing vectors that crosses in the same direction are 0 so the Px * Vx = 0 x . .\u00A0 in the R3 universe we use right hand rule. P goes in as 1\u0027s, V goes in as 2\u0027 and T comes out as S\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EPublic Sub DefineTangent(X1 As Double, Y1 As Double, Z1 As Double, X2 As Double, Y2 As Double, Z2 As Double, S1 As Double, S2 As Double, S3 As Double)\n  S1 = Y1 * Z2 - Z1 * Y2: S2 = Z1 * X2 - X1 * Z2: S3 = X1 * Y2 - Y1 * X2\nEnd Sub\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n(\u003Cem\u003E1\u003C/em\u003E) Once we know the normal we have the Equations for all points in the plane of the elliptical Tx * X \u002B Ty * Y \u002B Tz * Z = 0. In this way we have cut the size of the universe to \u221E\u003Csup\u003E2/3\u003C/sup\u003E\u003Cbr\u003E\u003Cbr\u003E\nWe can define any point ellipse by its\u00A0 \u0398 as r = \u003Cem\u003El\u003C/em\u003E / (1 \u002B e cos \u0398). We have to realize that extraction of pXY does not suffice. Even though we know an elliptical in R\u003Csup\u003E3\u003C/sup\u003E space it is an ovoid manifold where each r is a circle about the semi-major axis only one of these planes with its velocity vectors fits the above equity \u003Cem\u003E1\u003C/em\u003E and only one plane has coordinates that are in the XY plane, and unless the orbit is equitorial, they are unlikely the same. As inferred above calculate \u003Cem\u003El\u003C/em\u003E and e which immediately fall out of equations already listed above. One could use a squeeze between a recursive computational regime to get a set of coordinates whereby ||query|| = r.\n\u003C/p\u003E\n\u003Cp\u003E\nThe equation for any point of an ellipse from its center is given by r = (a\u00A0 cos \u03A6)\u003Csup\u003E2\u003C/sup\u003E \u002B (b sin \u03A6)\u003Csup\u003E2\u003C/sup\u003E\u00A0\u00A0\u003Ca href=\u0022https://www.mathopenref.com/coordparamellipse.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.mathopenref.com/coordparamellipse.html\u003C/a\u003E [quoted because X and Y are not in our coordinate system but in the elliptical] however we are starting from F1 and are only given a measure of distance from the center.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Ex = h \u002B a \u202Fcos\u0398\ny = k \u002B b \u202Fsin\u0398\u202F\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nSo lets review what I have F1 is on (0, 0, 0) and C is some point on the R\u003Csup\u003E3 \u003C/sup\u003Ethat is -ea distance from 0, 0, 0 such that X\u003Csup\u003E2\u003C/sup\u003E \u002B Y\u003Csup\u003E2\u003C/sup\u003E \u002B Z\u003Csup\u003E2\u003C/sup\u003E, \u0026lt;T\u0026gt; is tangential and is pi raidans from the periapsis. From C the position can be mapped in the elliptical.\u00A0 Im not going to worry about the position of the \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E for now, it will pop out later. I am just going to assume that i have. In an ellipse the X axis is defined as the semi-major axis. the F1 and C points\u00A0 anglular begins on the ellipse are along the X-axis with the point a that crosses the elliptical closest to F1 therefore F1 and \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E lie \u0398\u003Csub\u003E0 \u003C/sub\u003Edirection from C and Apo.\u00A0 C and Apo lie \u0398\u003Csub\u003E\u03C0\u003C/sub\u003E from F1 and \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022m01XXSR.png\u0022 class=\u0022ipsImage\u0022 height=\u0022522\u0022 src=\u0022https://i.imgur.com/m01XXSR.png\u0022 width=\u0022847\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nNext the angle we are give to jump to is given as a \u0398, lets call it \u0398\u003Csub\u003Ej\u003C/sub\u003E \u00A0 (See above). We want to calculate the coordinates of this angle, the problem is that \u0398\u003Csub\u003Ej \u003C/sub\u003Ewill only give coordinates in the X,Y coordinate system. and to get them in x,y,z we need to use the center based program and the Angle defined by J C and F1. To do that we need the unit vectors for a [_Au below] (we already have these to get C, and if we didn\u0027t all you would have to do is normalize them), for b the is the normalize vectors of \u0026lt;a\u0026gt; x \u0026lt;t\u0026gt; crossproduct (defined above just plug the variables in _Bu). \u03A6 is the C centered angle of J (defined above).\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E    Jx = Cx \u002B a cos\u03A6j xAu \u002B b sin\u03A6j xBu\n    Jy = Cy \u002B a cos\u03A6j yAu \u002B b sin\u03A6j yBu\n    Jz = Cz \u002B a cos\u03A6j zAu \u002B b sin\u03A6j zBu\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nFinally after much work there is one half the solution. We need a velocity vector, we already have the magnitude, SME = V\u003Csup\u003E2\u003C/sup\u003E/2 - PE and we know SME and PE (\u00B5/r) so that we know V. We also know V has a negative radial velocity because it is traveling from Apo to \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E (this we have just left P or Apo and jumping to a burn point. So the magnitude of the tangential velocity to \u0026lt;j\u0026gt; is 2 * Sweep/ (r * v\u003Csub\u003Etan\u003C/sub\u003E). Again this is pependicular to normalized crossproduct \u0026lt;J\u0026gt; X \u0026lt;T\u0026gt;. The remainder is the -SQRT(V\u003Csup\u003E2\u003C/sup\u003E- V\u003Csub\u003Etan\u003C/sub\u003E) as V\u003Csub\u003Erad\u003C/sub\u003E and . \u0026lt;V\u003Csub\u003Erad\u003C/sub\u003E\u0026gt; = V\u003Csub\u003Erad\u003C/sub\u003E * \u0026lt;Ju\u0026gt;\u00A0 \u0026lt;--- unit vectors of J. Sum \u0026lt;V\u003Csub\u003Etan\u003C/sub\u003E\u0026gt; \u002B \u0026lt;V\u003Csub\u003Erad\u003C/sub\u003E\u0026gt; and now \u0026lt;L\u0026gt; is known.\u003Cbr\u003E\u003Cbr\u003E\nSo the last missing part of this are the Keplerian parameters that will be needed above.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n  a = -\u00B5 / (2 * SME)\n  Period = (2 * Pi * a ^ 1.5) / \u00B5^2\n  Normalize X, Y, Z, r, Xu, Yu, Zu \u0026lt;===== unit vector definition\n  vRad = DotProduct(Xu, Yu, Zu, vX, vY, vZ) \u0026lt;===== This is the Pu*V\n  vTan = SQRT(v^2 - vRad^2) \u0026lt;====tangential velocity\n  omega = vTan / r \u0026lt;==== angular velocity \n  Sweep = (omega * r ^ 2) / 2\n  Area = Sweep * Period\n  b = Area / (Pi * a)\n  l = b ^ 2 / a\n  e = (1 - b ^ 2 / a ^ 2) ^ 0.5\n  Pe = a * (1 - e): Apo = a * (1 \u002B e) \u003C/pre\u003E\n\u003Cp\u003E\nSo with these defined the only thing that really remains is determining is the position of the center. We actually know sort of where the \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E is based we can figure this out also. This is rather a hard part, knowing how far \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E is from the Origin and From P. and from this we know where P is from the line F\u003Csub\u003E1\u003C/sub\u003EP. This creates a circle that crosses the elliptical plane once. So that we only accept the two points that cross the elliptical. The line PF\u003Csub\u003E1\u003C/sub\u003E and that once passed its -Pu (negative of Ps unit vectors) * r where r\u00A0 = l / (1 \u002B e Cos (\u0398 - pi)) There is also a perpendicular to \u0026lt;P\u0026gt; at 0,0,0 that is r= 1/ (1 \u002B e Cos (\u0398 - Pi/2)) and so given the two closest angles to 0 it is possible to estimate since \u0398 is between two angles which are 90 degrees. At least we know that Z between these is not hilariously different, such as on the North and South Pole of the geodesic, and in general Z should be in a linear range. But since we can use scalars to project vectors we can project both the reversed and perpendicular and because one knows the angle one can extend them so that the line between the two is tangential to \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E and that line is being strait the Position of \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E can be predicted.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022Ks41t2S.png\u0022 class=\u0022ipsImage\u0022 height=\u0022522\u0022 src=\u0022https://i.imgur.com/Ks41t2S.png\u0022 width=\u0022529\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nSo that the unit vectors of \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E, we can call Au since the are also the unit vectors of A (Needed above). Then the unit -e * a * Au = \u0026lt;C\u0026gt; thats everything that is required. Its done we jump. Note: about one thing, for P that are low \u0398, ||P|| is less than L, P and the perpendicular to P at 0 can be used to perform the trig above instead of (K) The only catch here is when ||P|| = l, the \u0026lt;M\u0026gt; is \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E. For P very close to l the Z component of M can be used to estimate its contribution, then its fairly strait forward to guess PXY bases upon P lambda to the global coordinate system. The calculations will cause significant deviation if performed frequently, however during one cycle the max this is performed once to jump near Apo and consituitively jump to the burn initiation point. Looking at the figure above the spacecraft begins its burn at J and ends at P, then jumps to close to Apo, at very high \u003Cabbr title=\u0022Specific Impulse (rocketry) or Internet Service Provider\u0022\u003EISP\u003C/abbr\u003E burns it _can_ correct \u003Cabbr title=\u0022Periapsis\u0022\u003EPe\u003C/abbr\u003E and then Jump to J. To precent the computer from slowing down the computer has a preset period of time that it test to see if it reaches P, it can easily do this by determining the normalized X,Y, and Z coordinates of the Jump initiation point (where P presumably is when it Jumps to J) When the normal vectors of the ship pass those points (generally going to be arccos Xu unless polar orbit) the ship will go into the above routined and warp to the next burn point.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"}]}