{"TopicId":122274,"ForumId":16,"TopicTitle":"[WIP] H.O.T.M.A.S. Project","CreatedByName":"FastMINI42","CreatedById":76767,"CreatedDateTime":"2015-10-04T04:52:30Z","PageNum":1,"Articles":[{"CreatedByName":"FastMINI42","CreatedById":76767,"CreatedDateTime":"2015-10-04T04:52:30Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003EFor the last couple weeks I\u0027ve been working on the final design and ordering parts. The final pieces coming Monday, and should be able to start assembling everything next week. In the meantime, I\u0027ve been bread-boarding and working on figuring out the shift registers that will drive keyboard matrix. I don\u0027t have a breadboard big enough for both, but it should be fairly simple to tie it all together. \u003C/p\u003E\u003Cp\u003EShift register for the columns uses two 8 bit serial to parallel registers. For now the column outputs are just connected to LEDs:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/pCjXO1Nl.jpg?1\u0022 alt=\u0022pCjXO1Nl.jpg?1\u0022\u003E\u003C/p\u003E\u003Cp\u003EShift register for the rows uses two 8 bit parallel to serial registers. I was able to squeeze in enough buttons for a small WASD keyboard. I was able to control a ship with this tonight:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/vPY0QAcl.jpg?1\u0022 alt=\u0022vPY0QAcl.jpg?1\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ve been interested in a HOTAS setup for a while. After looking at a few, I started noticing that they are geared more for flight sims and don\u0027t seem suited to all the different KSP modes (mostly not enough buttons): KSP uses the mouse a lot, especially in map mode and I feel like I would be letting go of the stick to operate the mouse or letting go of the throttle to use the keys I couldn\u0027t get mapped to the Joystick/Throttle a lot. To be honest though, I think I\u0027m just looking for any excuse to over complicate something and start a project. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnyway ... I now have a joystick and the last couple weeks I\u0027ve been thinking about and sketching out ideas for the throttle part of things. It will have 3 main functions:\u003C/p\u003E\u003Cp\u003E1.) Throttle control via an Arduino Pro Micro\u003C/p\u003E\u003Cp\u003E2.) Mouse inputs via the same Arduino Pro Micro (the \u0022M\u0022 in H.O.T.M.A.S.)\u003C/p\u003E\u003Cp\u003E2.) Button / keyboard inputs via an Arduino Teensy for general function and secondary controls for docking (translation only), docking (linear \u0026amp; rotation), EVA activity, and rover driving. The controller will have different modes to remap some of the controller for the different secondary controls.\u003C/p\u003E\u003Cp\u003EThe Pro Micro and the Teensy will be connected to a Leonardo via I2C. The Leonardo will then pass all the throttle/mouse/key-press inputs over USB to the computer.\u003C/p\u003E\u003Cp\u003EBelow is a (preliminary and crude) sketch ... I\u0027m still working on some final layout. The biggest issue right now is I can\u0027t find a small panel mount trackball that isn\u0027t horribly expensive, so I\u0027ll likely be using a thumb joystick instead (same thing with 4 way \u002B center button castle switches, I may need to just use 5 push buttons for that). I\u0027m also looking at using actual keyboard switches and key-caps instead of round push-buttons.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/1RAwa6Ql.jpg\u0022 alt=\u00221RAwa6Ql.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is what I\u0027ve got going so far:\u003C/p\u003E\u003Cp\u003E1.) The main body will be an 8 x 6 inch project box. \u003C/p\u003E\u003Cp\u003E2.) Different control groups will be on other project boxes tacked on top to make it easier to find things without looking (and to make it look more like something found on the side of the road). Throttle controls will be on the far left, the mode selection will be on the small one on the top right, docking \u0026amp; movement controls on the one on the side, and the mouse/general controls (map mode, time warp, quicksave, etc.) on the main body. Action group switches will be a row of big toggle switches on the front.\u003C/p\u003E\u003Cp\u003E3.) The navigation switch on the right will be a thumb switch or something similar, and will be used mainly for docking, EVA maneuvers, and rover driving. Their will be additional controls on the back of this box for up/down directions, SAS/TCS, etc. (imagine your hand curling around it like a throttle control on a regular HOTAS)... this part is the least roughed out. \u003C/p\u003E\u003Cp\u003E4.) There will be a big red panic button for the abort group action group, the bigger the better. I don\u0027t have them on this sketch, but there will also be a couple toggle switches with red covers to enable \u0026amp; disable the throttle and staging button.\u003C/p\u003E\u003Cp\u003E5.) I\u0027ve found a source for key-caps that has different color options, so all the keys will be color coded (dark blue for function keys, dark gray for flight inputs, white for SAS, bright green for RCS, dark green for general operational/mode keys, something like that). The LED indicators for the 4 modes mentioned in #3 will also be color coded, and color coded labels will be used for the multi-use controls.\u003C/p\u003E\u003Cp\u003E6.) Since it will be all custom built, there will be a few special features. A fourth mouse button that will be the same as Alt\u002BRMB, a button that will toggle between RCS \u0026amp; SAS, and a selector to scale the throttle (0-30% or 50% instead of 0-100%, I think that will make for a more precise throttle for easier landing), to name a few.\u003C/p\u003E\u003Cp\u003ESo that\u0027s what I have so far, comments/suggestions/advice all welcome \u0026amp; appreciated \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. I did some work on writing code for a keyboard matrix scanner last night on the Pro Micro, so my next step will be to get the parts and build the keyboard scanner. I haven\u0027t done any programming in a long while, so the project will be slow going. It should be fun though, this is my first time working with Arduinos.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-17T23:39:45Z\u0022 title=\u002210/17/2015 11:39  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 17, 2015\u003C/time\u003E by FastMINI42\u003C/strong\u003E\n\u003Cbr\u003E10/17 Update\n\u003C/span\u003E\n"},{"CreatedByName":"Glaran K\u0026#039;erman","CreatedById":146334,"CreatedDateTime":"2015-10-04T15:03:04Z","Content":"\n\u003Cp\u003EAny project that brings more switches, toggles, meters, readouts, and overall awesomeness to KSP gets my approval.\u003C/p\u003E\n"},{"CreatedByName":"Rosco P. Coltrane","CreatedById":61065,"CreatedDateTime":"2015-10-04T23:14:39Z","Content":"\n\u003Cp\u003EI\u0027m curious, why three boards?\u003C/p\u003E\u003Cp\u003EEdit: oops, premature \u0022submit\u0022...\u003C/p\u003E\u003Cp\u003EOf the three, the Teensy 3\u002B would be the best for thise, because of the RAM. As I understand, it can emulate keyboard/mouse/joystick like a Leonardo. The resolution of it\u0027s axis is also a lot better, 12 bits vs 8 \u003Cstrong\u003EI believe\u003C/strong\u003E. That means that while your Leonardo is able to show 0-255 \u0022thicks\u0022 on your throttle to the PC, the Teensy can show 4096.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-04T23:18:26Z\u0022 title=\u002210/04/2015 11:18  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 4, 2015\u003C/time\u003E by Rosco P. Coltrane\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FastMINI42","CreatedById":76767,"CreatedDateTime":"2015-10-05T04:42:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Rosco P. Coltrane\u0022 data-cite=\u0022Rosco P. Coltrane\u0022\u003E\u003Cdiv\u003EI\u0027m curious, why three boards?\u003Cp\u003EEdit: oops, premature \u0022submit\u0022...\u003C/p\u003E\u003Cp\u003EOf the three, the Teensy 3\u002B would be the best for thise, because of the RAM. As I understand, it can emulate keyboard/mouse/joystick like a Leonardo. The resolution of it\u0027s axis is also a lot better, 12 bits vs 8 \u003Cstrong\u003EI believe\u003C/strong\u003E. That means that while your Leonardo is able to show 0-255 \u0022thicks\u0022 on your throttle to the PC, the Teensy can show 4096.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was thinking three boards, but now after looking at the teensy more, I think I might go with just two teensy boards. Two boards mostly because I don\u0027t think one will have enough pins: The keyboard matrix will need 16 or 17 digital pins, there will be 9 on/off toggles and 8 LEDs, in addition to 3 analog for throttle / joystick (maybe 6, if i incorporate trim adjustment). I do like the idea of better resolution (the arduino is 10bit, with 0-1024 ticks, and it looks like the teensy is capable of 13 bits). With two boards, I like the idea of using the one looking at the keyboard matrix \u0026amp; toggles as an I2C slave while the master unit looks at the analog inputs. The slave would then send an interrupt only when a button is pressed. Time-wise button presses don\u0027t happen that often, while the analog inputs need to be monitored real time when they\u0027re moving. I did just order one Teensy board, so I\u0027ll be looking at that this week \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Rosco P. Coltrane","CreatedById":61065,"CreatedDateTime":"2015-10-05T15:28:02Z","Content":"\n\u003Cp\u003ERight. Well, the input pin problem normally would be solved with shift register chips, like the \u003Ca href=\u0022https://learn.sparkfun.com/tutorials/shift-registers\u0022 rel=\u0022external nofollow\u0022\u003E74HC165\u003C/a\u003E... Now, I take it you\u0027re a newbie so, if two boards make it easy for you, then go ahead... But shift registers are easy ... and cheap.\u003C/p\u003E\u003Cp\u003ESpeaking about interrupts... Are you planning on having some data coming in from the PC? If not, I don\u0027t see why you\u0027d need interrupts to work with inputs in this case.\u003C/p\u003E\u003Cp\u003ENormally, what you\u0027d do is have your main loop checking on buttons and rotaries as it cycles. It might not be that great from a technical point of view, but it\u0027s easier.\u003C/p\u003E\n"},{"CreatedByName":"FastMINI42","CreatedById":76767,"CreatedDateTime":"2015-10-06T01:54:25Z","Content":"\n\u003Cp\u003EI hadn\u0027t thought of shift registers, that would solve the pin availability issue. But then, with all the inputs to scan and not knowing how fast the Teensy is, I would worry about the ability to loop through that in enough fast enough that the throttle input doesn\u0027t start appearing laggy. Certainly some of it could sampled at a lower rate instead of every time it loops, maybe every 10ms (I don\u0027t know for sure how wide a key-press pulse would be, I could look at that at on an o-scope at work when the switches come in), and the non-momentary switches likely could be sampled as slow as every 500ms.\u003C/p\u003E\u003Cp\u003EThe interrupt wouldn\u0027t be for the PC or the USB bus, it would be for the I2C bus. My thought was that the secondary Teensy could be taking it\u0027s time to sweep through all the dozens of button inputs while the primary Teensy would be sweeping much just faster looking at just the three analog inputs. If the secondary saw a button change state, it would trigger the interrupt pin on the primary. The primary would then automatically run an interrupt routine to send the Key.Press() or Key.Release() to the PC, depending on how the key changed state.\u003C/p\u003E\n"},{"CreatedByName":"Rosco P. Coltrane","CreatedById":61065,"CreatedDateTime":"2015-10-06T03:11:48Z","Content":"\n\u003Cp\u003EYeah, I get what you say. \u003C/p\u003E\u003Cp\u003EKeys, you want to de-bounce them, otherwise you will be registering false presses or releases. So you will be adding artificial time frames in which you don\u0027t care what the state of the key is, so lag in this regard will be irrelevant. BTW, a typical PC keyboard polls the keys at 125 Hz (not kilo, not mega, just hertz) and you don\u0027t notice any lag. \u003C/p\u003E\u003Cp\u003EThe biggest source of lag you will have here are the digitalRead() and analogRead() calls you\u0027ll make to read the swtiches and axis, because the way they are implemented on the Arduino (you can bypass it but good luck!). Shift registers I believe will help you here with the digitals, because there\u0027s one call to write and one to read for each chip (you will have to use more than one chip daisy-chained to read all those buttons). Combining shift registers with de-bouncing can be sort of a pain, I\u0027ll give you that. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EMy experience with the biggest thing I have built, a keyboard-panel-thingie with 48 keys, with a Leonardo at 16 MHz (vs 72 on the Teensy), is that you won\u0027t notice any lag even if you use a matrix and good old polling with no shift registers involved and make the Arduino interpet your own badly implemented and optimized interpreted language to decide what each key does. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E As I said, the delays you add to de-bounce are orders of magnitude bigger than any lag the micro can produce. \u003C/p\u003E\u003Cp\u003EAlso, you don\u0027t have to poll all switches in order, you could poll half of them, and then the rotaries and then the rest of the switches.\u003C/p\u003E\u003Cp\u003EJust throwing ideas here. Take it as a newbie talking to another newbie. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EBTW 1: \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FastMINI42\u0022 data-cite=\u0022FastMINI42\u0022\u003E\u003Cdiv\u003E(I don\u0027t know for sure how wide a key-press pulse would be, I could look at that at on an o-scope at work when the switches come in)]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDelays of 10 to 50 milliseconds between press and release seem to work for me. \u003C/p\u003E\u003Cp\u003EBTW 2: \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FastMINI42\u0022 data-cite=\u0022FastMINI42\u0022\u003E\u003Cdiv\u003EThe interrupt wouldn\u0027t be for the PC or the USB bus, it would be for the I2C bus. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFYI, I2C transmission is limited to the clock speed, too.\u003C/p\u003E\u003Cp\u003EPS: thanks for the rep!\u003C/p\u003E\n"},{"CreatedByName":"FastMINI42","CreatedById":76767,"CreatedDateTime":"2015-10-17T23:40:50Z","Content":"\n\u003Cp\u003Ebump for an update \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Rosco P. Coltrane","CreatedById":61065,"CreatedDateTime":"2015-10-18T16:15:12Z","Content":"\n\u003Ca href=\u0022http://www.sherv.net/\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://www.sherv.net/cm/emoticons/memes/obama-meme-smiley-emoticon.jpg\u0022 alt=\u0022obama-meme-smiley-emoticon.jpg\u0022\u003E\u003C/a\u003E\n"}]}