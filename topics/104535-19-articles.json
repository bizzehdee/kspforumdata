{"TopicId":104535,"ForumId":34,"TopicTitle":"1.1.2 Magic Smoke Industries Infernal Robotics 2.0.2","CreatedByName":"sirkut","CreatedById":57229,"CreatedDateTime":"2015-04-20T21:18:38Z","PageNum":19,"Articles":[{"CreatedByName":"V8jester","CreatedById":136093,"CreatedDateTime":"2015-07-15T04:51:57Z","Content":"\u003E \n\u003E Thank you for that info, I guess I missed that I apologize for troubling you with something so simple. I had a suspicion it might have been ATM but because it wasn\u0027t causing an issue with any other mods I didn\u0027t check it. Thank you again for the help I\u0027ll check into that solution and will also as suggested try to inspire the ATM devs to address the issue.\n\nNo apology necessary. That\u0027s what we are all here for. Besides you asked, instead of just jumping on the thread bashing a mod \u0022because it doesn\u0027t work\u0022 like so many. It\u0027s all about how you say something not necessarily what you say."},{"CreatedByName":"smjjames","CreatedById":134004,"CreatedDateTime":"2015-07-15T22:30:38Z","Content":"I know it\u0027s largely a KIS problem, but working with IR parts is still very kraken inducing. I don\u0027t know if maybe you guys can help KospY out?\n\nA little background on that, while I was manipulating something with the rovers arm, I realized that I really could use a joint at the end of it, because you know, wrist. So, I made a pair of those joints with the workshop (which I removed because it kept giving me wierd freezes), but when I accidentially put the joint on upsidedown/backwards (though I don\u0027t think it actually matters), I tried surface attaching the joint onto the container so that I could fix it, then boom, kraken attack.\n\n\u003E [Javascript is disabled. View full album](//imgur.com/a/4xq4v)\n\nOutput log during my hijinks with it: [http://sta.sh/0287au63cvx0](http://sta.sh/0287au63cvx0)"},{"CreatedByName":"SilverVII","CreatedById":148260,"CreatedDateTime":"2015-07-17T22:19:10Z","Content":"\u003E \n\u003E Hello\n\u003E I have some more question regarding the Version of this mod on GitHub. \n\u003E \n\u003E All versions on GitHub have still 1.0.2 as KSP version defined (develop branch, master branch and tag v0.21.3). But the ZIP File for 0.21.3 has already 1.0.3 as KSP version. \n\u003E \n\u003E In CKAN the IR mod is marked as 1.0.4 compatible. \n\u003E \n\u003E So I guess the ZIP Version and CKAN Version is differently to the versions on GitHub (master- and devleop-branch and version tag). Maybe the ZIP and CKAN version has been build locally without pushing the latest changes to the repository. Could this be?\n\u003E \n\u003E Could you please update the repository with the latest stable version, so I can rebuild the same version like the one from CKAN?\n\u003E \n\u003E Thanks a lot\n\u003E \n\u003E GrafZahl\n\nYou are right, all zips i tried, kerbalstuff, curse and github cant be loaded on KSP 1.0.4, still says it\u00C3\u201A\u00C2\u00B4s for KSP 1.0.3. I thought must be an error compiling or uploading file. i cant test CKAN one but should be great if someone fix it. thanks in advantange."},{"CreatedByName":"SpriteCoke","CreatedById":123609,"CreatedDateTime":"2015-07-18T09:49:23Z","Content":"I love this so much.\n\n\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/YREhlKGhUPE?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-18T17:24:13Z","Content":"Great work again peeps. I am 95% through completely rebuilding my timberwolf for 1.04... I have a much requested video that I need to get to...\n\nI\u0027m also finding the KOS integration really useful. It makes things so much neater that I have decided to completely rewrite my animator code (also taking advantage of other new KOS syntax).\n\nTwo things that I\u0027ve mentioned before and would still love to see at some point:\n\n1) The ability to set the positions of uncontrolled IR joints in the VAB and SPH. I\u0027ll refer back to [this image](http://i.imgur.com/UD37Xgk.png), where I have two uncontrolled pivotrons that I want to line up in the SPH so that the docking ports align and form a brace between the leg and the hips, preventing the hip from buckling on launch.\n\n2) Have the order of control groups and servos preserved when re-ordering them via click and drag. I have quite a few servos, and when I\u0027m setting up a set of complex positions (like keyframed leg positions) I have to skip up and down the list looking for the servo I want to set. It would be nice to be able to just go down the list each time (particularly since the vertical size of the group/servo list is limited, which makes for quite a lot of scrolling back and forth).\n\nI suppose it\u0027s also worth mentioning that while I haven\u0027t had any major issues with the connection strength between IR parts and other parts, the \\*internal\\* physics joint in the IR parts still seems pretty strength-limited. I\u0027ve welded and edited my mech parts so that their masses are puny (0.05 or less) but this isn\u0027t a complete solution for a few reasons. First, when using IR parts you usually want a \u0022stationary\u0022 bit and a \u0022moving\u0022 bit, and to do this the stationary bit has to be much heavier so that it has more inertia. Also, if you incorporate mod parts (in this case BD Armory) you have to account for their masses as well. Sure, these could be edited too, and I can do that for my own installation, but then redistributing the mechs would be a pain, because they wouldn\u0027t work properly for other people unless they also edit their mod parts. \n\nI can also imagine people trying to build something like a crane... we have cranes that can easily lift many tons in real life, but the IR joints just don\u0027t have the strength to move that much mass around without bouncing or coming apart at the joint (again, talking about the \\*internal\\* IR joint, not the joints with other parts)."},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-18T19:40:24Z","Content":"I found that if I copy a servo folder (eg the hinge pivotron flat folder) and edit the part config so that freeMoving = true and servoName = \u003Cuncontrolled\u003E, then I can get the desired behaviour: the part position can be set in the hangar, but it moves freely once launched.\u003C/uncontrolled\u003E\n\nHowever, it\u0027s a bit odd as to how it works. The servo itself does not show up in any group in the IR window in the SPH, but its position can be set by clicking the arrows to move the whole (default) group, even though the group itself is empty.\n\nAlso, all such mechanisms will be put into this group and will all move together when the group arrows are used, so it\u0027s not really a workaround unless you only need one!\n\n**Edited \u003Ctime datetime=\u00222015-07-18T20:12:15Z\u0022 title=\u002207/18/2015 08:12  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 18, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-19T07:39:19Z","Content":"A query about KOS integration (also crossposted to the KOS reddit)...\n\nIt appears that an IRServo object is not of type PartModule.\n\nIs there any relationship between an IRServo object and a base KOS object like part or module?\n\nI see on the KOS documentation website that most of the \u0022get servo\u0022 style commands only work for current focused vessel. Can I start with a KOS Vessel and somehow return its IRServo objects?\n\nSimilarly, can I find a part by its tag and somehow get the associated IRServo?"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-19T07:59:12Z","Content":"\u003E \n\u003E A query about KOS integration (also crossposted to the KOS reddit)...\n\u003E It appears that an IRServo object is not of type PartModule.\n\u003E \n\u003E Is there any relationship between an IRServo object and a base KOS object like part or module?\n\u003E \n\u003E I see on the KOS documentation website that most of the \u0022get servo\u0022 style commands only work for current focused vessel. Can I start with a KOS Vessel and somehow return its IRServo objects?\n\u003E \n\u003E Similarly, can I find a part by its tag and somehow get the associated IRServo?\n\nIt\u0027s not possible due to the way IR works, so its not a kOS limitation. Currently IR parses the active vessel for IR parts and although there may be more IR vessels in physics range, only the active vessel is parsed that is why the IR API can only be used for current vessel.\n\nAs for linking PartModule to IRServo - what is your intended use for it? All useful features of IR partmodule are much easier to access via IRServo.\n\n**Edited \u003Ctime datetime=\u00222015-07-19T08:01:13Z\u0022 title=\u002207/19/2015 08:01  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 19, 2015\u003C/time\u003E by Ziw**"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-19T09:00:56Z","Content":"\u003E \n\u003E It\u0027s not possible due to the way IR works, so its not a kOS limitation. Currently IR parses the active vessel for IR parts and although there may be more IR vessels in physics range, only the active vessel is parsed that is why the IR API can only be used for current vessel.\n\nD:\n\nSo... Does this mean that...\n\na) If I want to have multiple robotic craft all working together, I can do it but I\u0027d have to swap focus from vessel to vessel to initiate the KOS script on each one?\n\n![B)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png) OR does it mean that as soon as you switch away from a vessel, any IR parts on that vessel stop functioning?\n\nc) OR does it mean that as soon as you switch away from a vessel *whose parts are being controlled by a KOS script*, then those parts on that vessel will stop functioning?\n\n\u003E \n\u003E As for linking PartModule to IRServo - what is your intended use for it? All useful features of IR partmodule are much easier to access via IRServo.\n\nYeah, there\u0027s no doubt the best way to make use of IR functionality is through an IRServo, the new addon functions are really useful.\n\nHowever, working with the IRServos themselves (finding a particular servo, using them in combination with other KOS functions, etc) is made more difficult since they\u0027re not related (via composition or inheritance) with other KOS structures. Finding the servos on a ship, for example, can\u0027t be done using the \u0022partsTagged\u0022 function. Finding the orientation of the base part and using the associated IRServo to respond based on that information becomes less elegant, and so on.\n\nNone of this is completely functionality-limiting. For example, I could create my own function for finding a servo by name...\n\n    declare function GetServoByName {   parameter pName.   for s in addons:IR:allsservos {      if s:name = pName { return s. }   }}\n\nBut I\u0027d have to be careful not to use two servos with the same name. Or I could do something similar to find the servo by the part tag by matching the KOS part UID attribute with the servo part UID attribute (edit, just tried this, doesn\u0027t work... the servo UID is different from the actual part UID).\n\nAnd then I could create my own \u0022class\u0022 which composes both the IRServo object and the base KOS part object... except it would just be a list, so not very elegant (and would also take up more instructions to use due to array access), eg:\n\n    declare THE_SERVO_BIT is 0.declare THE_PART_BIT is 1.declare MyComposedClassInstance is list().MyComposedClassInstance:add(GetServoByName(\u0022myservoname\u0022)).MyComposedClassInstance:add(ship:partstagged(\u0022myparttag\u0022)[0]).// ...if MyComposedClassInstance[THE_PART_BIT]:whatever = blahblah { MyComposedClass[THE_SERVO_BIT]:MoveTo(whatever, etc). }\n\nIt\u0027s all just \u0022quality of life\u0022 stuff as they say, but it\u0027s the kind of thing that makes things far easier to both write and, ultimately, read. I sit here wanting to go and rewrite all my animator stuff, but having to do all this sort of \u0022prep work\u0022 up front means I feel like I\u0027m not working on my project, but rather I\u0027m sort of fighting the APIs, and that\u0027s not what I\u0027m really motivated to be doing, so I don\u0027t bother starting.\u0022Ehhh stuff it I\u0027ma go watch youtube instead :D\u0022.\n\n- - - Updated - - -\n\nAnd of course, it seems like if I want to control an unfocused craft\u0027s IR parts I can still do it using normal old KOS parts and modules... but as you said, the IR API is much nicer to use, it\u0027s a shame it can\u0027t be used remotely.\n\n**Edited \u003Ctime datetime=\u00222015-07-19T09:27:01Z\u0022 title=\u002207/19/2015 09:27  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 19, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-19T10:05:03Z","Content":"\u003E \n\u003E D:\n\u003E So... Does this mean that...\n\u003E \n\u003E a) If I want to have multiple robotic craft all working together, I can do it but I\u0027d have to swap focus from vessel to vessel to initiate the KOS script on each one?\n\u003E \n\u003E ![B)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png) OR does it mean that as soon as you switch away from a vessel, any IR parts on that vessel stop functioning?\n\u003E \n\u003E c) OR does it mean that as soon as you switch away from a vessel *whose parts are being controlled by a KOS script*, then those parts on that vessel will stop functioning?\n\nHmm, I did not test but option c) is my best guess. After you switch vessels kOS loses references to previous vessel\u0027s IRServos so you cannot control it anymore.\n\n\u003E \n\u003E Yeah, there\u0027s no doubt the best way to make use of IR functionality is through an IRServo, the new addon functions are really useful.\n\u003E \n\u003E However, working with the IRServos themselves (finding a particular servo, using them in combination with other KOS functions, etc) is made more difficult since they\u0027re not related (via composition or inheritance) with other KOS structures. Finding the servos on a ship, for example, can\u0027t be done using the \u0022partsTagged\u0022 function. Finding the orientation of the base part and using the associated IRServo to respond based on that information becomes less elegant, and so on.\n\u003E \n\u003E None of this is completely functionality-limiting. For example, I could create my own function for finding a servo by name...\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E     declare function GetServoByName {   parameter pName.   for s in addons:IR:allsservos {      if s:name = pName { return s. }   }}\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E But I\u0027d have to be careful not to use two servos with the same name. Or I could do something similar to find the servo by the part tag by matching the KOS part UID attribute with the servo part UID attribute (edit, just tried this, doesn\u0027t work... the servo UID is different from the actual part UID).\n\u003E \n\u003E And then I could create my own \u0022class\u0022 which composes both the IRServo object and the base KOS part object... except it would just be a list, so not very elegant (and would also take up more instructions to use due to array access), eg:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E     declare THE_SERVO_BIT is 0.declare THE_PART_BIT is 1.declare MyComposedClassInstance is list().MyComposedClassInstance:add(GetServoByName(\u0022myservoname\u0022)).MyComposedClassInstance:add(ship:partstagged(\u0022myparttag\u0022)[0]).// ...if MyComposedClassInstance[THE_PART_BIT]:whatever = blahblah { MyComposedClass[THE_SERVO_BIT]:MoveTo(whatever, etc). }\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E It\u0027s all just \u0022quality of life\u0022 stuff as they say, but it\u0027s the kind of thing that makes things far easier to both write and, ultimately, read. I sit here wanting to go and rewrite all my animator stuff, but having to do all this sort of \u0022prep work\u0022 up front means I feel like I\u0027m not working on my project, but rather I\u0027m sort of fighting the APIs, and that\u0027s not what I\u0027m really motivated to be doing, so I don\u0027t bother starting.\u0022Ehhh stuff it I\u0027ma go watch youtube instead :D\u0022.\n\u003E \n\u003E - - - Updated - - -\n\u003E \n\u003E And of course, it seems like if I want to control an unfocused craft\u0027s IR parts I can still do it using normal old KOS parts and modules... but as you said, the IR API is much nicer to use, it\u0027s a shame it can\u0027t be used remotely.\n\nYou have some valid points there. I\u0027ll try to add a link to PartModule from IRServo in kOS integration, should not be very hard, though kOS has a long release cycle so I don\u0027t know when you\u0027ll be able to test it."},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-19T10:33:17Z","Content":"Roger that, in the meantime I want to build a script that will work for the current vessel as well as on other unfocused vessels, so I will still be using the old methods for that, and I might do a second one using the updated integration for a high efficiency, easier-for-others-to-understand version as well."},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-20T10:19:53Z","Content":"I have an issue where max and min don\u0027t seem to be limiting a rotatron properly.\n\nSome background to understand the context. My animator works by taking in a set of keyframed positions for a servo. It moves all the servos from keyframe to keyframe in the same amount of time by calculating the speed the servo needs to move based on the current position, the target position, and the time between keyframes.\n\nSince I can\u0027t use the new IRAddon functionality, the way I stop the motion is by setting the \u0022max\u0022 and \u0022min\u0022. If the new position is less than the current, I set min to the new position. If it is larger than current, I set max to the new position. Just to be safe, I also set min to current - 10, and max to current \u002B 10 before doing this, so the servo has some \u0022wiggle room\u0022.\n\nSo, what you\u0027ll see in a moment is the leg moving between three positions, the starting position followed by two keyframes. The servo to focus on in this case is the hip rotator. The keyframe time is one second.\n\nIt starts at 0.\n\nIt should then move from 0 to 30 in 1 second. Max will be set to 30 (plus a small margin of error) so that it stops there. This works.\n\nAfter that, and using exactly the same function, it should move from 30 to 20 in 1 second. Min will be set to 20 so that it stops there. But for the second motion it doesn\u0027t stop at 20... it keeps going all the way to -10, even though min is properly set. I also have no idea why it stops at -10, since there is no command in the script that should cause it to stop other than by the part hitting the limit. \n\nThe only thing I can think of is that it doesn\u0027t like having a minimum which is above zero, and that it is therefore using the previous min of -10, even though the GUI shows the correct limit (20) as does querying the part module via KOS.\n\nZoomed in video: [https://youtu.be/fKILvShsxOQ](https://youtu.be/fKILvShsxOQ)\n\n- - - Updated - - -\n\nOK, if I put in a wait of 0.001 between the line of code that sets the min, and the following line which starts the motion, the servo correctly stops at the new minimum. Since, if there is no wait, the two events happen simultaneously as far as the physics ticks are concerned, it seems like IR doesn\u0027t honour limits that are set \u0022while the part is moving\u0022.\n\nie, this doesn\u0027t work:\n\n    \tif (pNewPos \u003E s:GetField(\u0022rotation\u0022)) {\t\t\t\ts:setfield(\u0022max\u0022, pNewPos \u002B 0.05).\t\ts:doaction(\u0022move \u002B\u0022, true).\t} else if (pNewPos \u003C s:GetField(\u0022rotation\u0022)) {\t\t\t\ts:setfield(\u0022min\u0022, pNewPos - 0.05).\t\t\t\ts:doaction(\u0022move -\u0022, true).\t}\t\n\nBut this does:\n\n    \tif (pNewPos \u003E s:GetField(\u0022rotation\u0022)) {\t\t\t\ts:setfield(\u0022max\u0022, pNewPos \u002B 0.05).\t\twait 0.001.                                         // added wait to force a physics tick\t\ts:doaction(\u0022move \u002B\u0022, true).\t} else if (pNewPos \u003C s:GetField(\u0022rotation\u0022)) {\t\t\t\ts:setfield(\u0022min\u0022, pNewPos - 0.05).\t\t\t\twait 0.001.                                         // added wait to force a physics tick\t\ts:doaction(\u0022move -\u0022, true).\t}\t\n\nIs this intentional?\n\n**Edited \u003Ctime datetime=\u00222015-07-20T10:22:46Z\u0022 title=\u002207/20/2015 10:22  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 20, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-20T10:59:38Z","Content":"\u003E \n\u003E ...snip...\n\u003E Zoomed in video: [https://youtu.be/fKILvShsxOQ](https://youtu.be/fKILvShsxOQ)\n\u003E \n\u003E - - - Updated - - -\n\u003E \n\u003E OK, if I put in a wait of 0.001 between the line of code that sets the min, and the following line which starts the motion, the servo correctly stops at the new minimum. Since, if there is no wait, the two events happen simultaneously as far as the physics ticks are concerned, it seems like IR doesn\u0027t honour limits that are set \u0022while the part is moving\u0022.\n\u003E \n\u003E ie, this doesn\u0027t work:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E         if (pNewPos \u003E s:GetField(\u0022rotation\u0022)) {                s:setfield(\u0022max\u0022, pNewPos \u002B 0.05).        s:doaction(\u0022move \u002B\u0022, true).    } else if (pNewPos \u003C s:GetField(\u0022rotation\u0022)) {                s:setfield(\u0022min\u0022, pNewPos - 0.05).                s:doaction(\u0022move -\u0022, true).    }    \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E But this does:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E         if (pNewPos \u003E s:GetField(\u0022rotation\u0022)) {                s:setfield(\u0022max\u0022, pNewPos \u002B 0.05).        wait 0.001.                                         // added wait to force a physics tick        s:doaction(\u0022move \u002B\u0022, true).    } else if (pNewPos \u003C s:GetField(\u0022rotation\u0022)) {                s:setfield(\u0022min\u0022, pNewPos - 0.05).                wait 0.001.                                         // added wait to force a physics tick        s:doaction(\u0022move -\u0022, true).    }    \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E Is this intentional?\n\nThere is no way around it as all the limit checks and movements are done in FixedUpdate, so it does need to wait until physics tick."},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-20T11:12:07Z","Content":"Gotcha, thanks for the confirmation. Not a huge problem, just means a bit of refactoring to set all limits in one tick and start all movements in the next instead of doing both at once servo by servo, otherwise the servos would slowly get out of synch."},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T07:29:44Z","Content":"A followup on that question. I\u0027ve tried determining the answer to this by experimentation but I am getting inconsistent results, probably because there is an uncontrolled variable which is hard to account for - namely, the fact that KOS is limited to 200 compiled instructions per tick, so I can\u0027t be sure when a tick might be occurring even if I don\u0027t have an explicit wait (likely to happen quite often because I have a lot of servos working together).\n\nThe context is the same as before, but for simplicity assume that I have just the one servo, which moves through a series of positions.\n\nSometimes the position after the current target will be in the same direction as the target. For example, if moving from 0 to 20 and then to 40, I don\u0027t need to stop and reverse the servo at 20. Other times I will want to reverse the servo. \n\nI may, however, want to change the speed even if I want to keep moving in the same direction.\n\nThe question is: when I want to keep moving in the same direction as smoothly as possible... \n\n\\* do I just change the speed when it reaches the first target and force a physics tick? Or,\n\n\\* do I change the speed, issue another (\u0022move \u002B\u0022, true), and force a physics tick? Or,\n\n\\* do I need to issue a (move \u002B, false), wait one tick, change the speed, wait one tick, and issue a (move \u002B, true)? Or...\n\n\\* etc.\n\nIt doesn\u0027t make much of a difference for one servo, maximum of about 1/8th of a second of pause time, which wouldn\u0027t be very noticable.\n\nBut when I have over a dozen servos working together I will hit the KOS IPU limit several times as I cycle through, which might mean that processing all of the servos takes many physics ticks, so fewer instructions and fewer forced ticks are definitely important."},{"CreatedByName":"Artfact","CreatedById":52325,"CreatedDateTime":"2015-07-21T07:52:34Z","Content":"Man, this mod has come so far from its humble beginnings and long hiatus. Well done, can\u0027t wait to get to the robotics in the tech tree.![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T10:11:47Z","Content":"OK, I\u0027m pretty confused now ![:D](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif)\n\nFirst I tried this with a single servo:\n\n    set speed 1move \u002Bwait 1set speed 2move \u002Bwait 1 // servo correctly moves at the new speed during this time. If I use a speed with the opposite sign then the servo reverses as desired.\n\nSo it looks to me like the new speed is picked up when a \u0022move\u0022 command is processed, even though there\u0027s no wait between the \u0022set speed 2\u0022 and the following \u0022move \u002B\u0022. But that might just be to do with the order that the commands happened to be processed. \n\nIn any case, what I believe we can say for sure is that the following should always work without having to rely on chance:\n\n    set speed 2move \u002B truewait 1set speed -2// move \u002B falsewait 0.001. // force a physics tickmove \u002B truewait 1 \n\nRight. Now, the test also demonstrates that I can always issue a \u0022move \u002B\u0022 command, I don\u0027t need to issue a \u0022move -\u0022. If my speed is set to negative, the servo will move in the other direction. Cool.\n\nNow, my mech\u0027s knee has two servos that work together to help keep the thing from flexing and bouncing too much. They are mounted opposite each other and face in opposite directions as a result. Therefore when they move the speed of one will be equal to and opposite of the other.\n\nHere\u0027s the part I don\u0027t get. If I use the above logic then something goes wrong with the knee servos... one moves correctly, but the other one gets its direction confused - but only sometimes! doesn\u0027t pick up the new limit. But If uncomment the stop command (\u0022move \u002B false\u0022) *then everything works.*\n\nWhy would stopping the servo cause this particular servo to move in the correct direction pick up its new limit properly? Why would not stopping it (ie, simply setting a new speed and issuing a new move \u002B command) cause it to move in the opposite direction fail to pick up the new limit? *Nothing else is being changed.*\n\nI\u0027m having trouble trying to put together a \u0022simplest possible case\u0022, because I can\u0027t figure out where the problem is. Here\u0027s some possibly useful info.\n\nNeither servo has its axis reversed.\n\nI can reproduce the problem even if I\u0027m only running these two servos, so I don\u0027t think it\u0027s due to \u0022servo overload\u0022.\n\nWhen running the animation, if I print the speed of the two knee servos then the correct speed (including sign) and limits are printed \\*both\\* when I include the stop and when I do not.\n\nI always issue a \u0022move \u002B\u0022, never a \u0022move -\u0022\n\nThe coordinates are as follows:\n\nFor one knee servo: \u002B030, \u002B005, -026 (this one messes up when being told to move from 5 to -26 IF there is no stop issued).\n\nFor the other: -030, -005, \u002B026 (this one moves properly)\n\nUpdate: OK, seems like it might be something to do with min and max again, but I\u0027m still trying to figure out why one servo behaves and the other does not.\n\nUpdate2: Yep, the left servo is not picking up the new minimum on the third movement. It\u0027s still sitting at position \u002B5 after the command to move, which is the previous minimum. So it\u0027s not a direction problem, it\u0027s a limit problem. But the servo does print the correct new limit of -26 right before the new \u0022move \u002B\u0022 is issued, and this is at least one physics tick after the minimum was set (a wait is always issued after the speed and limits are set and before the next move).\n\nProof that the wait is always issued, here\u0027s the actual animation loop. If the \u0022StopAll(lleg)\u0022 is uncommented, then the parts behave properly. If it is commented out, they do not:\n\n    // simply issues a move \u002B false to all servos in the listfunction StopAll {\tparameter pServoList.\tfor s in pServoList {\t\ts[ISERVO]:doaction(\u0022move \u002B\u0022, 0).\t}}// lleg is a list() containing the two servosdeclare w is 0.01.                          // wait time to force physics tickdeclare df is 0.8.                          // frame timeStopAll(lleg).                              // issue a move \u002B false on all servos prior to startupdeclare fi is 0.until (fi \u003E 2) {\tprint fi.\tPrepareFrame(fi, df, lleg).             // this function sets all speeds and limits on all servos in the list\t//StopAll(lleg).\twait w.                                 // forces physics tick\tRunFrame(lleg).                         // this function just issues a move command to all servos in the list\twait df * 2.                            // let the servos do their thing. Waiting double the frame time so I can easily see the stop positions.\tset fi to fi \u002B 1.}StopAll(lleg).\n\n**Edited \u003Ctime datetime=\u00222015-07-21T10:57:11Z\u0022 title=\u002207/21/2015 10:57  AM\u0022 data-short=\u00228 yr\u0022\u003EJuly 21, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-21T10:54:06Z","Content":"First try increasing the IPU to something like 1000\n\nIt should not bother your CPU too much actually.\n\nYour inconsistencies might be caused by instructions processed in different physics ticks.\n\nAlso do problems with max/min setting appear only for inverted servos?"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T12:17:31Z","Content":"Nope, nothing is inverted. I think I have something figured out at least. Here\u0027s the simplest case I can come up with.\n\nIf I progress 0 \u003E -20 \u003E -40, then the move to -40 fails:\n\n    set s to ship:partstagged(\u0022subject\u0022)[0]:getmodule(\u0022MuMechToggle\u0022).// move 0 to -20s:setfield(\u0022min\u0022, -20).         // set targets:setfield(\u0022max\u0022, 20).          // arbitrary since we\u0027re going negatives:setfield(\u0022speed\u0022, -2).        // negative speed.wait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -20. Correct!// move -20 to -40s:setfield(\u0022min\u0022, -40).         // keep goings:setfield(\u0022max\u0022, 30).          // still arbitrarys:setfield(\u0022speed\u0022, -3).        // still negative speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -40, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -20. Servo did not move!\n\n**But** if I change the second movement direction so that the progression is 0 \u003E -20 \u003E \u002B20 (which means there\u0027s an implicit stop and reverse) but use the exact same logic otherwise, it works!\n\n    set s to ship:partstagged(\u0022subject\u0022)[0]:getmodule(\u0022MuMechToggle\u0022).// move 0 to -20s:setfield(\u0022min\u0022, -20).         // set targets:setfield(\u0022max\u0022, 20).          // arbitrary since we\u0027re going negatives:setfield(\u0022speed\u0022, -2).        // negative speed.wait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -20. Correct!// move -20 to 20s:setfield(\u0022min\u0022, -40).         // arbitrary since we\u0027re going positives:setfield(\u0022max\u0022, 20).          // reversings:setfield(\u0022speed\u0022, 2).         // positive speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be 20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is \u002B20. Correct!\n\nNow, here\u0027s where it gets really interesting. If I go positive twice (0 \u003E 20 \u003E 40) *then that also works!*\n\n    set s to ship:partstagged(\u0022subject\u0022)[0]:getmodule(\u0022MuMechToggle\u0022).// move 0 to 20s:setfield(\u0022max\u0022, 20).          // set positive targets:setfield(\u0022min\u0022, -20).         // arbitrary since we\u0027re going positives:setfield(\u0022speed\u0022, 2).         // positive speed.wait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be 20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is 20. Correct!// move 20 to 40s:setfield(\u0022max\u0022, 40).          // keep goings:setfield(\u0022min\u0022, -30).         // still arbitrarys:setfield(\u0022speed\u0022, 3).         // still positive speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be 40, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is 40. Correct!\n\nSo the problem only seems to arise with the minimum limit, the maximum limit is fine, which is why on my mech one of the servos worked no matter what while the other didn\u0027t.\n\nAnd finally, if I add a stop to the first script when going 0 \u003E -20 \u003E -40, *then that also works even without an additional forced tick*\n\n    set s to ship:partstagged(\u0022subject\u0022)[0]:getmodule(\u0022MuMechToggle\u0022).// move 0 to -20s:setfield(\u0022min\u0022, -20).         // set targets:setfield(\u0022max\u0022, 20).          // arbitrary since we\u0027re going negatives:setfield(\u0022speed\u0022, -2).        // negative speed.wait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -20. Correct!s:doaction(\u0022move \u002B\u0022, false).    /////////// ADDED A STOP HERE /////////////// move -20 to -40s:setfield(\u0022min\u0022, -40).         // keep goings:setfield(\u0022max\u0022, 30).          // still arbitrarys:setfield(\u0022speed\u0022, -3).        // still negative speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -40, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -40. CORRECT!!\n\n- - - Updated - - -\n\nAnd I just realized there was one more test to try. What if I am reversing direction from positive to negative, so that on the second movement we are using the minimum limit, but I don\u0027t first issue a stop? Well, that works too!\n\n    set s to ship:partstagged(\u0022subject\u0022)[0]:getmodule(\u0022MuMechToggle\u0022).// move 0 to 20s:setfield(\u0022min\u0022, -50).         // arbitrary since we\u0027re going positives:setfield(\u0022max\u0022, 20).          // targets:setfield(\u0022speed\u0022, 2).         // positive speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be 20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is 20, correct!// reverse to -20s:setfield(\u0022min\u0022, -20).         // new targets:setfield(\u0022max\u0022, 30).          // arbitrary since we\u0027re going to reverses:setfield(\u0022speed\u0022, -2).        // negative speedwait 0.01.                      // ticks:doaction(\u0022move \u002B\u0022, true).wait 2.print \u0022position should be -20, is \u0022 \u002B s:getfield(\u0022rotation\u0022). // position is -20. CORRECT!!\n\nSo the weird behaviour only happens under these conditions:\n\n1) Move in a negative direction to some limit\n\n2) Issue a new minimum limit which is lower than the first\n\n3) Issue a new move order to continue in the same direction to the new limit without first issuing a stop order.\n\n- - - Updated - - -\n\nAlso, notice that I\u0027m always issuing \u0022move \u002B\u0022 commands and using the the sign of the speed to set direction. From a coding point of view this is much easier (and with fewer instructions) than always issuing a positive speed order and swapping between \u0022move \u002B\u0022 and \u0022move -\u0022 commands, because:\n\n1) The new speed is always (next\\_position - current\\_position) / desired\\_time / config\\_speed). There\u0027s no need to abs() it.\n\n2) The move command requires no conditional test to check which type of move order to issue.\n\n3) Since (to limit required ticks) we are setting all servo values in one pass and then moving all servos on the next, we\u0027d need to also store the movement direction desired for each servo on the setup pass, and then look up that information for each servo on the movement pass, because the speed on the first pass would always be set to positive. There\u0027s nothing inherently telling us which way we need to go. If I just use the sign of the speed to set direction I don\u0027t need to worry about that, I just issue \u0022move \u002B\u0022.\n\nThis is why I haven\u0027t checked whether the weird behaviour also happens if I issue consecutive \u0022move -\u0022 commands.\n\n**Edited \u003Ctime datetime=\u00222015-07-21T12:27:27Z\u0022 title=\u002207/21/2015 12:27  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 21, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T14:06:39Z","Content":"Something that would help a lot would be to know exactly when certain fields take effect. Specifically, should min, max and speed changes only take effect after a move command has been issued (even if we\u0027re already moving)? Or should they take effect immediately on the next physics tick even if no new move command is issued? Is a stop meant to be necessary, or should things take effect even without a stop? Can move operations \u0022stack\u0022 (could multiple \u0022move \u002B true\u0022 calls ever for some reason require multiple \u0022move \u002B false\u0022 calls to unwind) or should calling the same move command repeatedly have no effect? I know that servos sometimes get \u0022stuck on\u0022 - I believe this happened if you issued a move \u002B followed by a move - with no stop in between, the two commands would sort of fight and then any subsequent commands would be unpredictable... although this was in the previous version and I can\u0027t remember if that was the exact way to make it happen.\n\nI\u0027ve been trying to figure all of this out by experimentation but, again, depending on how I set up the code I get inconsistent results and it\u0027s really hard to determine why. Several methods which are logically identical but just make use of different code (order of logically-order-independent operations, whether using \u0022move -\u0022 or negative speeds, *whether I set the animation frame time to 0.6 or 0.65 seconds (??)*, etc) get different results, which is kinda driving me nutty ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)\n\n**Edited \u003Ctime datetime=\u00222015-07-21T14:35:16Z\u0022 title=\u002207/21/2015 02:35  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 21, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-21T14:39:44Z","Content":"\u003E \n\u003E Something that would help a lot would be to know exactly when certain fields take effect. Specifically, should min, max and speed changes only take effect after a move command has been issued? Or should they take effect immediately on the next physics tick even if no new move command is issued? Is a stop meant to be necessary, or should things take effect even without a stop? Can move operations \u0022stack\u0022 (could multiple \u0022move \u002B true\u0022 calls ever for some reason require multiple \u0022move \u002B false\u0022 calls to unwind) or should calling the same move command repeatedly have no effect? I know that servos sometimes get \u0022stuck on\u0022 - I believe this happened if you issued a move \u002B followed by a move - with no stop in between, the two commands would sort of fight and then any subsequent commands would be unpredictable... although this was in the previous version and I can\u0027t remember if that was the exact way to make it happen.\n\u003E I\u0027ve been trying to figure all of this out by experimentation but, again, depending on how I set up the code I get inconsistent results and it\u0027s really hard to determine why. Several methods which are logically identical but just make use of different code (order of logically-order-independent operations, whether using \u0022move -\u0022 or negative speeds, *whether I set the animation frame time to 0.6 or 0.65 seconds (??)*, etc) get different results, which is kinda driving me nutty ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)\n\nChanges in speed should only be applied after a new Move command. Limits are checked every FixedUpdate (physics tick) and movement (Transform) is done there as well.\n\nUsing negative speed is a bit hacky, as it is not the intended behaviour, as you are not supposed to be able to set it below zero in the UI and you are using UI based functions (if you are not using the API). By the way, did you set the acceleration high enough that it would not affect your keyframe animation?\n\nIs the inability to control unfocused crafts is the only thing that keeps you from using the API?"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T15:14:54Z","Content":"\u003E \n\u003E Changes in speed should only be applied after a new Move command. Limits are checked every FixedUpdate (physics tick) and movement (Transform) is done there as well.\n\nOK, that is **super useful** to know! Thanks! It does create a bit of an issue because with KOS scripts I can\u0027t say for certain when a tick will occur, which means I can\u0027t say for certain when my new limits will be enforced. Given I\u0027m iterating over 8 servos per leg there\u0027s quite a lot going on, and if I want them to all operate in unison then not knowing exactly when things happen makes things difficult. I would suggest having both limits and speeds only take effect when a move command is issued to reduce the uncertainty (the uncertainty would be reduced down to a single pass over the servos where all move commands are issued and nothing else, which can probably be done in one tick or at most two), but if I was in your position I would not want to be working on the legacy implementation anymore ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)\n\n\u003E \n\u003E Using negative speed is a bit hacky, as it is not the intended behaviour\n\nDawww, but it\u0027s so much BETTERERER ![:D](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif)\n\n\u003E \n\u003E By the way, did you set the acceleration high enough that it would not affect your keyframe animation?\n\nYep, acceleration is set to 20 which seems to be fine. In any case, it wouldn\u0027t really matter, the servos simply wouldn\u0027t quite reach the desired target position. The behaviour I\u0027ve been seeing is rather different from that... some servos don\u0027t move, some end up in the wrong position entirely, etc, depending on how I lay out the code. Also, I could even factor in the acceleration value when calculating the necessary speed... a bit of math but nothing too fancy... but I\u0027d need to know the units of the acceleration setting to do this.\n\n\u003E \n\u003E Is the inability to control unfocused crafts is the only thing that keeps you from using the API?\n\nYes indeed, that is the one and only reason. In wake of my 0.90 Mechwarrior video I was asked (dozens of times) to recreate the Mechwarrior 2 intro. A couple of scenes require that I control at least two and preferably three mechs at a time. So while I could write the code using the new API just for the timberwolf itself and I bet it would work fantastically, I wouldn\u0027t be able to make the video I was rebuilding it for ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)\n\n- - - Updated - - -\n\nIn case text isn\u0027t as clear as code (and it isn\u0027t!), here\u0027s the challenge in pseudocode form.\n\nAssume that for any single servo we want to do this:\n\n    calculate/lookup and set new limits  // a/Tcalculate and set new speed         //  b/Tdetermine direction                     // c/Tmove                                         // d/Twait until desired timeloop\n\nNow suppose that each step in the sequence takes some fraction of a physics tick as shown in the comment.\n\nGiven the information you\u0027ve just provided, the best order of doing this would be as follows.\n\n    calculate and set next speeddetermine next directionWait until desired timecalculate/lookup and set set new limitsapply directionmoveloop.\n\nBut if we\u0027re working with multiple servos at once, then the trivial solution:\n\n    for each servo   calculate and set new speed   determine and save directionwait until desired timefor each servo    caculate/lookup and set new limits   apply direction   moveloop\n\nIs not good, because for N servos, the N\u0027th servo will quite a long way out of synch with the first... N(b/T \u002B c/T \u002B d/T) in the worst case.\n\nThis would be much better:\n\n    for each servo   calculate and set new speed and direction // use sign of speed to set direction      calculate/lookup and set new limitswait until desired timefor each servo   moveloop\n\nNow the N\u0027th servo is only N(d/T) ticks out of synch with the first for that frame, and not out of synch at all if N(d/T) \u003C T.\n\n**Edited \u003Ctime datetime=\u00222015-07-21T15:18:36Z\u0022 title=\u002207/21/2015 03:18  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 21, 2015\u003C/time\u003E by allmhuran**"},{"CreatedByName":"Ziw","CreatedById":135292,"CreatedDateTime":"2015-07-21T15:38:19Z","Content":"You might want to try multiple KOS cores, each controlling only a limited amount of servos. There were some improvements in multi-core operation with the introduction of CORE object ([http://ksp-kos.github.io/KOS_DOC/structures/core.html](http://ksp-kos.github.io/KOS_DOC/structures/core.html))"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-21T15:43:57Z","Content":"That is a truly excellent idea, I hadn\u0027t come across that feature yet. I can also refactor things to decrease the frame change loop to the minimum possible set of operations, it just gets a bit more verbose/inelegant ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2015-07-23T10:44:51Z","Content":"Writing some more code here and I realized we seem to have a contradiction implied at the moment, so I\u0027d like to see if we can clear that up.\n\nIn a previous post I mentioned that if I set a limit and issued a move within the same physics tick, the limit did not seem to be applied to the motion, which you seemed to confirm. But more recently you mentioned that \u0022Limits are checked every FixedUpdate (physics tick) and movement (Transform) is done there as well\u0022. \n\nI\u0027m having a bit of trouble reconciling those two. If limits are checked every physics tick, then doesn\u0027t that imply that if I set a limit and start a movement in a single tick, the limit should be applied to that movement in the very next physics tick? But if that\u0027s true then I don\u0027t understand the result shown in that previous video, where the limit is not applied even though many dozens of ticks are going to go by during the course of the motion."}]}