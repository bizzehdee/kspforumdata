{"TopicId":60447,"ForumId":55,"TopicTitle":"What would it take for non-linear part trees?","CreatedByName":"Captain Sierra","CreatedById":74666,"CreatedDateTime":"2014-01-19T22:43:06Z","PageNum":1,"Articles":[{"CreatedByName":"Captain Sierra","CreatedById":74666,"CreatedDateTime":"2014-01-19T22:43:06Z","Content":"\n\u003Cp\u003ESo, it\u0027s a commonly known fact that Unity has a fairly picky set of part tree rules:\u003C/p\u003E\u003Cp\u003EThere must be a single root part, from which everything in the part tree stems from.\u003C/p\u003E\u003Cp\u003ENode parts have a certain node(s) they must attach on for it to place properly.\u003C/p\u003E\u003Cp\u003EEach part can only have one parent part.\u003C/p\u003E\u003Cp\u003ESo my question is, what would it take to break these rules?\u003C/p\u003E\u003Cp\u003EUnity also cannot render curved, spherical terrain meshes, yet what does KSP have seventeen of? curved terrain meshes. Not being deterred by Unity\u0027s ineptitude, There came PQS, which, if I\u0027m understanding things correctly (I remember HarvesteR talking about this in a youtube video somewhere), works around that problem.\u003C/p\u003E\u003Cp\u003ENow, I\u0027m no programmer and I\u0027m also not versed in the source code of the game. So, what would it take to write a workaround for Unity\u0027s part tree system to create an all around better one?\u003C/p\u003E\u003Cp\u003EAlso, what defines a better part tree? Obviously double-back support would be one thing. What else would you like to see and how could it be done?\u003C/p\u003E\n"},{"CreatedByName":"vexx32","CreatedById":12283,"CreatedDateTime":"2014-01-20T01:07:05Z","Content":"\n\u003Cp\u003EI\u0027ve no idea exactly \u003Cem\u003Ehow\u003C/em\u003E it could be done, but I do know that such a thing is not really an uncommon problem. As such, I\u0027m sure there\u0027re libraries of code that Squad could find and make use of that would work around this problem for them -- if in doubt, look at what someone else did to see how you migt do it. I know that kind of mimicry happens an awful lot in programming xD\u003C/p\u003E\n"},{"CreatedByName":"Captain Sierra","CreatedById":74666,"CreatedDateTime":"2014-01-20T01:11:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022vexx32\u0022 data-cite=\u0022vexx32\u0022\u003E\u003Cdiv\u003EI\u0027ve no idea exactly \u003Cem\u003Ehow\u003C/em\u003E it could be done, but I do know that such a thing is not really an uncommon problem. As such, I\u0027m sure there\u0027re libraries of code that Squad could find and make use of that would work around this problem for them -- if in doubt, look at what someone else did to see how you migt do it. I know that kind of mimicry happens an awful lot in programming xD\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EComes down to convergent design. By the limitations of the coding language, there can only be so many efficient ways to do something. There are considerably more ways to do it if efficient code is not your goal, but when is that the case? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnd why has this not gotten more posts? It seems like the part tree is something most people would like improved.\u003C/p\u003E\n"}]}