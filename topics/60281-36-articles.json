{"TopicId":60281,"ForumId":36,"TopicTitle":"[Hardware, Plugin] Arduino based physical display \u002B serial port io\u002B tutorial (24-11-19)","CreatedByName":"zitronen","CreatedById":11842,"CreatedDateTime":"2014-01-18T01:25:25Z","PageNum":36,"Articles":[{"CreatedByName":"cm2227","CreatedById":54899,"CreatedDateTime":"2015-03-11T18:27:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darkblade48\u0022 data-cite=\u0022Darkblade48\u0022\u003E\u003Cdiv\u003EFirst, I want to thanks zitronen as well as everyone that is working on this project. I think it\u0027s a great way to combine programming, electronics with KSP (all things that I have interest in!) and as such, I\u0027m currently trying to build my own KSP controller with some basic buttons, switches and an Arduino Uno.\u003Cp\u003EI\u0027m still quite new, and was looking over the KSPIODemo10 example code and was not sure about one thing.\u003C/p\u003E\u003Cp\u003ESo far, I understand that \u003C/p\u003E\u003Cp\u003EAre the defined pins for SAS (pin 8), RCS (pin 9) and so forth. Additional pins can be assigned to (say) control groups, lights, gears, brakes, etc relatively easily.\u003C/p\u003E\u003Cp\u003EHowever, I then see another part of the code\u003C/p\u003E\u003Cp\u003EI\u0027m not quite sure what these assignments do. Are these pin assignments (i.e. if I wanted to assign (say) lights to pin 7, would this be possible? Though, looking at the top part of the code, it looks like pin 7 is assigned to a red LED for low fuel warning too...)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELook at controls() and MainControls() in output.ino. These values are not pin assignments but indicate which bit of the control byte represents the status of which system.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-12T02:37:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cm2227\u0022 data-cite=\u0022cm2227\u0022\u003E\u003Cdiv\u003ELook at controls() and MainControls() in output.ino. These values are not pin assignments but indicate which bit of the control byte represents the status of which system.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo if I understand this correctly, \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E if (digitalRead(RCSPIN))\u003C/p\u003E\u003Cp\u003E MainControls(RCS, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(RCS, LOW);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERCS is on the RCSPIN (9 in the demo code). When the pin value is read as high/low, the RCS enum value is set to either high/low, respectively. I\u0027m assuming this is somehow then passed to the plugin to enable/disable RCS in game.\u003C/p\u003E\u003Cp\u003ECurrently, in the demo code, \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E//pins for LEDs\u003C/p\u003E\u003Cp\u003E#define GLED 5\u003C/p\u003E\u003Cp\u003E#define YLED 6\u003C/p\u003E\u003Cp\u003E#define RLED 7\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPins 5-7 are assigned for indicator LEDs, but if I were to (say) add in lights and brakes, I could simply just replace those lines with\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E#define LIGHTSPIN 5\u003C/p\u003E\u003Cp\u003E#define GEARPIN 6\u003C/p\u003E\u003Cp\u003E#define BRAKESPIN 7\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eand then add the following to output.ino\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E if (digitalRead(LIGHTSPIN)) // \u003C/p\u003E\u003Cp\u003E MainControls(LIGHTS, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(LIGHTS, LOW);\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI made sure that the digitalRead matches the defined pin names (LIGHTSPIN) and then that the MainControls() part matches the defined enums in KSPIODemo.ino\u003C/p\u003E\u003Cp\u003EFinally, in the output.ino, I am also noticing \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Evoid controlsInit() {\u003C/p\u003E\u003Cp\u003E pinMode(SASPIN, INPUT_PULLUP);\u003C/p\u003E\u003Cp\u003E pinMode(RCSPIN, INPUT_PULLUP);\u003C/p\u003E\u003Cp\u003E pinMode(CG1PIN, INPUT_PULLUP);\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am assuming that I will also need to enable the internal pullup resistor for say LIGHTSPIN (pinMode(LIGHTSPIN, INPUT_PULLUP;) to ensure that I don\u0027t get floating values?\u003C/p\u003E\n"},{"CreatedByName":"Freshmeat","CreatedById":111048,"CreatedDateTime":"2015-03-12T14:57:31Z","Content":"\n\u003Cp\u003E@Darkblade: Pretty much yes. Go ahead and try it.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-12T15:12:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Freshmeat\u0022 data-cite=\u0022Freshmeat\u0022\u003E\u003Cdiv\u003E@Darkblade: Pretty much yes. Go ahead and try it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYup. Went ahead and gave it a shot! Managed to get SAS, RCS and Gears working so far!\u003C/p\u003E\n"},{"CreatedByName":"zitronen","CreatedById":11842,"CreatedDateTime":"2015-03-12T20:59:39Z","Content":"\n\u003Cp\u003EYeah the variable names are a bit confusing, you are not the first person to have this issue. The Arduino code could use some more documentation. I suck at documentation.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-12T23:12:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zitronen\u0022 data-cite=\u0022zitronen\u0022\u003E\u003Cdiv\u003EYeah the variable names are a bit confusing, you are not the first person to have this issue. The Arduino code could use some more documentation. I suck at documentation.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot to worry! You have already contributed so much by writing the plugin and the Arduino code. Besides, trying to figure out which parts of code do what is kind of like a puzzle.\u003C/p\u003E\u003Cp\u003EOn another note, like Mulbin, when launching rockets from the VAB, the plugin seems to work fine, but if I load a rocket via the Launchpad, exit back to the space centre (leaving the rocket on the launch pad) and then try to reload the rocket via the Launchpad, I start to get weird results (auto staging; i.e. once the rocket loads, the first stage automatically stages!) This is despite not even having pressed my stage button.\u003C/p\u003E\u003Cp\u003EI need to do more testing tonight; I\u0027m not sure if it\u0027s software related, or just due to me having a short somewhere (I\u0027ve checked to ensure I have the internal pullup enabled so that I don\u0027t have floating values, so it shouldn\u0027t be that; hardware wise, I have a key-lock switch wired in series to a momentary push button, so both need to be closed before the Arduino reads a logic LOW)...\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-14T12:25:35Z","Content":"\n\u003Cp\u003ESo I am encountering a weird bug.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/Va5IkGK\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://imgur.com/Va5IkGK\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe picture doesn\u0027t say much, but when I have my controller plugged in, my throttle controls go wonky (even though I do not have anything hooked up physically to throttle controls).\u003C/p\u003E\u003Cp\u003EPressing shift will increase throttle, as expected.\u003C/p\u003E\u003Cp\u003EPressing \u0027Z\u0027 will increase my throttle to 100% instantly, as expected.\u003C/p\u003E\u003Cp\u003EPressing control will decrease throttle, but only to the 1/3 mark (it will not decrease any further). \u003C/p\u003E\u003Cp\u003EPressing \u0027X\u0027 at this time will kill my throttle instantly, but only to the 1/3 mark. If I press shift at this time, the throttle will suddenly jump to zero before starting to increase again.\u003C/p\u003E\u003Cp\u003EAnyone else have this problem? I don\u0027t think it is an Arduino coding problem, but am not sure.\u003C/p\u003E\u003Cp\u003EI\u0027m wondering if this has anything to do with it...\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E CPacket.Throttle = constrain(map(analogRead(THROTTLEPIN),THROTTLEDB,1024-THROTTLEDB,0,1000),0, 1000);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"zitronen","CreatedById":11842,"CreatedDateTime":"2015-03-14T12:52:49Z","Content":"\n\u003Cp\u003EIf you are not using a physical throttle you can delete that line or try CPacket.Throttle = 0. Probably something to do with the analog pin floating causing weird problems. You can also try connect the pin to ground.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-14T13:37:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zitronen\u0022 data-cite=\u0022zitronen\u0022\u003E\u003Cdiv\u003EIf you are not using a physical throttle you can delete that line or try CPacket.Throttle = 0. Probably something to do with the analog pin floating causing weird problems. You can also try connect the pin to ground.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExcellent; commenting out that line seems to have sorted out that problem.\u003C/p\u003E\u003Cp\u003EHowever, I am still getting an unusual problem with the first stage auto-staging. I\u0027ve noticed it happens most frequently when I am launching my first ship after starting up the game. If I try to launch subsequent ships, there is no problem. This auto-staging happens even though my stage button is not being pressed.\u003C/p\u003E\n"},{"CreatedByName":"T.A.P.O.R.","CreatedById":137748,"CreatedDateTime":"2015-03-14T20:36:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darkblade48\u0022 data-cite=\u0022Darkblade48\u0022\u003E\u003Cdiv\u003EExcellent; commenting out that line seems to have sorted out that problem.\u003Cp\u003EHowever, I am still getting an unusual problem with the first stage auto-staging. I\u0027ve noticed it happens most frequently when I am launching my first ship after starting up the game. If I try to launch subsequent ships, there is no problem. This auto-staging happens even though my stage button is not being pressed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat kind of switch are you using for staging?\u003C/p\u003E\u003Cp\u003EI\u0027m using a momentary normally closed and am not experiencing random auto stages.\u003C/p\u003E\u003Cp\u003EI did experience unwanted staging when I was just testing with a toggle switch and wasn\u0027t fast enough to switch it off again.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-15T06:08:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022T.A.P.O.R.\u0022 data-cite=\u0022T.A.P.O.R.\u0022\u003E\u003Cdiv\u003EWhat kind of switch are you using for staging?\u003Cp\u003EI\u0027m using a momentary normally closed and am not experiencing random auto stages.\u003C/p\u003E\u003Cp\u003EI did experience unwanted staging when I was just testing with a toggle switch and wasn\u0027t fast enough to switch it off again.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have a key lock switch (\u003Ca href=\u0022http://p.globalsources.com/IMAGES/PDT/B1008164425/Keylock-Switch.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://p.globalsources.com/IMAGES/PDT/B1008164425/Keylock-Switch.jpg\u003C/a\u003E) that is wired in series to a momentary push button. One side of the key lock switch goes to the assigned pin, while ground is connected to one side of the momentary switch.\u003C/p\u003E\u003Cp\u003EI also have the assigned stage pin internal pullup enabled with the following code, so I shouldn\u0027t be getting floating values.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E pinMode(STAGEPIN, INPUT_PULLUP);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI notice that this problem happens when the Arduino is connecting to the interface for the first time after I launch the game. If I revert to VAB and try to launch again, everything is fine.\u003C/p\u003E\u003Cp\u003EI\u0027ll try to recreate this more accurately for troubleshooting.\u003C/p\u003E\n"},{"CreatedByName":"marzubus","CreatedById":68021,"CreatedDateTime":"2015-03-16T19:13:05Z","Content":"\n\u003Cp\u003EThe source is up at github. But basically there are handshake bytes sent to the chip, then the chip responds with ack bytes, and KspSerialIO then sets the display found Boolean to true . It\u0027s all in the source under a function called port_receivedEvent and processCom.\u003C/p\u003E\u003Cp\u003EMore:\u003C/p\u003E\u003Cp\u003EThe AVR and KSpSerialIO need to know the baud rate, And if you don\u0027t know the com port, the AVR will be searched for. A search is done by sending the HPacket to every com port and waiting for a response, if the response is a valid HPacket. bingo! \u003C/p\u003E\u003Cp\u003EThe board is scanned for at every vessel change, when you actually fly the ship. \u003C/p\u003E\u003Cp\u003ESee source here: \u003Ca href=\u0022https://github.com/zitron-git/KSPSerialIO/blob/master/KSPSerialIO/KSPIO.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/zitron-git/KSPSerialIO/blob/master/KSPSerialIO/KSPIO.cs\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYou need to refer to these sources anyway to learn the VesselData structures that are supported in Zitronen\u0027s protocol. See the VesselData struct for what is exchanged with the avr. \u003C/p\u003E\u003Cp\u003EAs for analog input, that is totally possible. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022wossname\u0022 data-cite=\u0022wossname\u0022\u003E\u003Cdiv\u003Ezitronen, I would like to use your plug-in to interface my own (non-arduino) hardware controller with KSP, but I am having trouble understanding the handshake protocol.\u003Cp\u003EDo you have any documentation to describe the absolute bare minimum that my hardware would need to do to even be recognised by KSP? All I\u0027m getting at the moment is \u0022\u0022No display found\u0022 in the lower right corner of KSP at launch. I\u0027ve never seen that before so I presume it\u0027s your plugin complaining that it can\u0027t read anything on any serial port.\u003C/p\u003E\u003Cp\u003ESpecifically I need to know how your code looks for a display and *when* it looks for it. Eg. does it do it once and then give up forever or does it do it repeatedly etc... Can I use 115200 baud or will that fail? I have not yet managed to get my microcontroller (a P8X32A if you are interested) to be recognised by KSP, even though I\u0027m sending the 0x00030104 byte sequence on COM3 at 38400 baud at what I think is the right time.\u003C/p\u003E\u003Cp\u003EI\u0027ve combed through your arduino demo but I\u0027m not really too familiar with that platform.\u003C/p\u003E\u003Cp\u003ECould you describe the process of handshaking in hardware-independent (layman\u0027s) terms please, that would be unbelievably awesome. Especially if you could detail when and how KSP calls your plugin\u0027s functions and when it reads the config file (every launch or only at startup?).\u003C/p\u003E\u003Cp\u003EWhen I get this working I\u0027ll release my P8X32A project as CC-BY-SA and share it with the KSP community.\u003C/p\u003E\u003Cp\u003EI\u0027m hoping to build a full analog control panel for KSP with toggle switches and 2-axis sticks (I\u0027m thinking ripping some sticks and triggers out of an old xbox controller, that will give me full RCS control and pitch/yaw for rotation, plus another 1 axis stick for roll.\u003C/p\u003E\u003Cp\u003EAnother potentiometer for engine throttle, and a heap of toggles/momentaries for control groups and lights and gear etc...\u003C/p\u003E\u003Cp\u003ELEDs for indication of stuff as you\u0027d expect and a big abort button!\u003C/p\u003E\u003Cp\u003EI\u0027ll also release the bill of materials and the schematics too.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-16T19:24:09Z\u0022 title=\u002203/16/2015 07:24  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 16, 2015\u003C/time\u003E by marzubus\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"wossname","CreatedById":118005,"CreatedDateTime":"2015-03-16T19:27:23Z","Content":"\n\u003Cp\u003ESorry, I deleted my post already. Thanks for the information. I\u0027m sure others will find it useful if they want to use zitronen\u0027s system.\u003C/p\u003E\u003Cp\u003EI decided to do it another way just now, hence deleting my post (didn\u0027t want to clutter the place up). Sorry once again.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-17T12:17:52Z","Content":"\n\u003Cp\u003ESo I have been investigating my issue and I believe I have been able to reproduce it successfully now.\u003C/p\u003E\u003Cp\u003EHardware wise, I have two toggle switches connected to RCS and SAS (as per first post, pin 9 and 8, respectively). Pin 8 or 9 --\u0026gt; switch --\u0026gt; ground, as per instructions. No other wires.\u003C/p\u003E\u003Cp\u003EWhen I load KSPIODemo10, I get the expected behaviour, SAS and RCS turn on/off as expected.\u003C/p\u003E\u003Cp\u003ENow, I made the following changes to the Arduino code:\u003C/p\u003E\u003Cp\u003EIn KSPIODemo10.ino:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E//pins for input\u003C/p\u003E\u003Cp\u003E#define SASPIN 8\u003C/p\u003E\u003Cp\u003E#define RCSPIN 9\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E#define STAGEPIN 2\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E#define CG1PIN 10\u003C/p\u003E\u003Cp\u003E#define THROTTLEPIN 0\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn output.ino \u003C/p\u003E\u003Cp\u003E- added staging in void controls (), commented out CPacket.Throttle, added pullup resistor for stage pin in void controlsInit ()\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Evoid controls() {\u003C/p\u003E\u003Cp\u003E if (Connected) {\u003C/p\u003E\u003Cp\u003E if (digitalRead(SASPIN)) //--------- This is how you do main controls\u003C/p\u003E\u003Cp\u003E MainControls(SAS, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(SAS, LOW);\u003C/p\u003E\u003Cp\u003E if (digitalRead(RCSPIN))\u003C/p\u003E\u003Cp\u003E MainControls(RCS, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(RCS, LOW);\u003C/p\u003E\u003Cp\u003E \u003Cstrong\u003E if (digitalRead(STAGEPIN))\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E MainControls(STAGE, HIGH);\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E else\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E MainControls(STAGE, LOW);\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E if (digitalRead(CG1PIN)) //--------- This is how you do control groups\u003C/p\u003E\u003Cp\u003E ControlGroups(1, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E ControlGroups(1, LOW); \u003C/p\u003E\u003Cp\u003E //This is an example of reading analog inputs to an axis, with deadband and limits\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E// CPacket.Throttle = constrain(map(analogRead(THROTTLEPIN),THROTTLEDB,1024-THROTTLEDB,0,1000),0, 1000);\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E KSPBoardSendData(details(CPacket));\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Evoid controlsInit() {\u003C/p\u003E\u003Cp\u003E pinMode(SASPIN, INPUT_PULLUP);\u003C/p\u003E\u003Cp\u003E pinMode(RCSPIN, INPUT_PULLUP); \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E pinMode(STAGEPIN, INPUT_PULLUP);\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E pinMode(CG1PIN, INPUT_PULLUP);\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENow, I launch KSP (clean install except for KSPSerialIO)\u003C/p\u003E\u003Cp\u003EGo to VAB -\u0026gt; 1 man command pod, add a SRB to it and launch. A successful connection to the COM port is established, but the rocket will immediately take off. This is despite having \u003Cstrong\u003Enothing connected to pin 2.\u003C/strong\u003E (Note: If I go ahead and connect pin 2 --\u0026gt; momentary button --\u0026gt; ground and make a multi-staged rocket, only the first SRB stage will auto-launch. The other stages will stage as expected when the momentary push button is pressed).\u003C/p\u003E\u003Cp\u003ECan anyone test to see if this is reproducible?\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E Edit (more tests):\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOnce the rocket is airborne, I press escape, click Space Centre (ignore the warning and proceed to Space Centre). The rocket will be on the launch pad. Click it, press Fly. The rocket will immediately take off again. \u003C/p\u003E\u003Cp\u003EGo back to the Space Centre (ignore the warning and proceed as before). Click the rocket on the launch pad and recover it. Go back to VAB, build the exact same rocket as before (it should still be loaded), and launch again. This time, the rocket will not auto launch. \u003C/p\u003E\u003Cp\u003EGo to Space Centre again, click the rocket on the launch pad, and click Fly. The rocket will not launch automatically.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T12:34:09Z\u0022 title=\u002203/17/2015 12:34  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by Darkblade48\u003C/strong\u003E\n\u003Cbr\u003EAdditional information, formatting\n\u003C/span\u003E\n"},{"CreatedByName":"marzubus","CreatedById":68021,"CreatedDateTime":"2015-03-17T12:40:08Z","Content":"\n\u003Cp\u003EI know sometimes you need to flip HIGH / LOW values, depending on if you pull-up or pull-down. Did you try that?\u003C/p\u003E\u003Cp\u003EIf you set the pin to pull-up, the default ( off ) would be HIGH right? But main controls would be inverted, as when the pin is HIGH, you send LOW to MainControls ( not triggered ). \u003C/p\u003E\u003Cp\u003EOr am i mixing things up?\u003C/p\u003E\u003Cp\u003EEDIT: My buttons pull to ground permanently when not pressed/toggled, when i press/toggle them they break the pull-to-ground, allowing the pull-up to set the pin to HIGH, this then works as expected. If you have a 2-pole, you might need to do something like: \u003Ca href=\u0022http://arduino.cc/en/uploads/Tutorial/button_schem.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://arduino.cc/en/uploads/Tutorial/button_schem.png\u003C/a\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darkblade48\u0022 data-cite=\u0022Darkblade48\u0022\u003E\u003Cdiv\u003ESo I have been investigating my issue and I believe I have been able to reproduce it successfully now.\u003Cp\u003EHardware wise, I have two toggle switches connected to RCS and SAS (as per first post, pin 9 and 8, respectively). Pin 8 or 9 --\u0026gt; switch --\u0026gt; ground, as per instructions. No other wires.\u003C/p\u003E\u003Cp\u003EWhen I load KSPIODemo10, I get the expected behaviour, SAS and RCS turn on/off as expected.\u003C/p\u003E\u003Cp\u003ENow, I made the following changes to the Arduino code:\u003C/p\u003E\u003Cp\u003EIn KSPIODemo10.ino:\u003C/p\u003E\u003Cp\u003EIn output.ino \u003C/p\u003E\u003Cp\u003E- added staging in void controls (), commented out CPacket.Throttle, added pullup resistor for stage pin in void controlsInit ()\u003C/p\u003E\u003Cp\u003ENow, I launch KSP (clean install except for KSPSerialIO)\u003C/p\u003E\u003Cp\u003EGo to VAB -\u0026gt; 1 man command pod, add a SRB to it and launch. A successful connection to the COM port is established, but the rocket will immediately take off. This is despite having \u003Cstrong\u003Enothing connected to pin 2.\u003C/strong\u003E (Note: If I go ahead and connect pin 2 --\u0026gt; momentary button --\u0026gt; ground and make a multi-staged rocket, only the first SRB stage will auto-launch. The other stages will stage as expected when the momentary push button is pressed).\u003C/p\u003E\u003Cp\u003ECan anyone test to see if this is reproducible?\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E Edit (more tests):\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOnce the rocket is airborne, I press escape, click Space Centre (ignore the warning and proceed to Space Centre). The rocket will be on the launch pad. Click it, press Fly. The rocket will immediately take off again. \u003C/p\u003E\u003Cp\u003EGo back to the Space Centre (ignore the warning and proceed as before). Click the rocket on the launch pad and recover it. Go back to VAB, build the exact same rocket as before (it should still be loaded), and launch again. This time, the rocket will not auto launch. \u003C/p\u003E\u003Cp\u003EGo to Space Centre again, click the rocket on the launch pad, and click Fly. The rocket will not launch automatically.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T12:37:27Z\u0022 title=\u002203/17/2015 12:37  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by marzubus\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-17T13:03:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022marzubus\u0022 data-cite=\u0022marzubus\u0022\u003E\u003Cdiv\u003EI know sometimes you need to flip HIGH / LOW values, depending on if you pull-up or pull-down. Did you try that?\u003Cp\u003EIf you set the pin to pull-up, the default ( off ) would be HIGH right? But main controls would be inverted, as when the pin is HIGH, you send LOW to MainControls ( not triggered ). \u003C/p\u003E\u003Cp\u003EOr am i mixing things up?\u003C/p\u003E\u003Cp\u003EEDIT: My buttons pull to ground permanently when not pressed/toggled, when i press/toggle them they break the pull-to-ground, allowing the pull-up to set the pin to HIGH, this then works as expected. If you have a 2-pole, you might need to do something like: \u003Ca href=\u0022http://arduino.cc/en/uploads/Tutorial/button_schem.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://arduino.cc/en/uploads/Tutorial/button_schem.png\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGenius! Switching the logic around worked, though I\u0027m trying to figure out why.\u003C/p\u003E\u003Cp\u003EI am using the Arduino\u0027s internal pull-up, which means the default (button not pressed) would indeed be HIGH. Looking at main controls ()\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003Cstrong\u003Eif (digitalRead(STAGEPIN))\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E MainControls(STAGE, HIGH);\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E else\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E MainControls(STAGE, LOW);\u003C/strong\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHow does the value of STAGEPIN (either 0 or 1) get passed to MainControls() to either make STAGE have a HIGH or LOW value? Looking at MainControls () doesn\u0027t provide me with many clues (mainly because I don\u0027t know what it\u0027s actually doing).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Evoid MainControls(byte n, boolean s) {\u003C/p\u003E\u003Cp\u003E if (s)\u003C/p\u003E\u003Cp\u003E CPacket.MainControls |= (1 \u0026lt;\u0026lt; n); // forces nth bit of x to be 1. all other bits left alone.\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E CPacket.MainControls \u0026amp;= ~(1 \u0026lt;\u0026lt; n); // forces nth bit of x to be 0. all other bits left alone.\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T13:09:23Z\u0022 title=\u002203/17/2015 01:09  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by Darkblade48\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"marzubus","CreatedById":68021,"CreatedDateTime":"2015-03-17T13:13:23Z","Content":"\n\u003Cp\u003EThe \u0022why\u0022 is because the default state is pulled-UP to HIGH, so when nothing is connected, the pin reads HIGH. I use different switches that disconnect when I activate them, so I stop pulling-gnd when I engage them. \u003C/p\u003E\u003Cp\u003EIm not sure on what you mean in the STAGEPIN passing question. \u003C/p\u003E\u003Cp\u003EThere is a method in the arduino sketch, that does some bitshifting. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Evoid MainControls(byte n, boolean s) {\u003C/p\u003E\u003Cp\u003E if (s)\u003C/p\u003E\u003Cp\u003E CPacket.MainControls |= (1 \u0026lt;\u0026lt; n); // forces nth bit of x to be 1. all other bits left alone.\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E CPacket.MainControls \u0026amp;= ~(1 \u0026lt;\u0026lt; n); // forces nth bit of x to be 0. all other bits left alone.\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo when you say MainControls(0, HIGH), this would set STAGE to 1. The sketch has name to bit position mappings for this which I guess you have seen.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E//Input enums\u003C/p\u003E\u003Cp\u003E#define SAS 7\u003C/p\u003E\u003Cp\u003E#define RCS 6\u003C/p\u003E\u003Cp\u003E#define LIGHTS 5\u003C/p\u003E\u003Cp\u003E#define GEAR 4\u003C/p\u003E\u003Cp\u003E#define BRAKES 3\u003C/p\u003E\u003Cp\u003E#define PRECISION 2\u003C/p\u003E\u003Cp\u003E#define ABORT 1\u003C/p\u003E\u003Cp\u003E#define STAGE 0\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd there is a mapping for what bit values represent what Control value in KSP in KSPSerialIO code.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E VControls.SAS = BitMathByte(CPacket.MainControls, 7);\u003C/p\u003E\u003Cp\u003E VControls.RCS = BitMathByte(CPacket.MainControls, 6);\u003C/p\u003E\u003Cp\u003E VControls.Lights = BitMathByte(CPacket.MainControls, 5);\u003C/p\u003E\u003Cp\u003E VControls.Gear = BitMathByte(CPacket.MainControls, 4);\u003C/p\u003E\u003Cp\u003E VControls.Brakes = BitMathByte(CPacket.MainControls, 3);\u003C/p\u003E\u003Cp\u003E VControls.Precision = BitMathByte(CPacket.MainControls, 2);\u003C/p\u003E\u003Cp\u003E VControls.Abort = BitMathByte(CPacket.MainControls, 1);\u003C/p\u003E\u003Cp\u003E VControls.Stage = BitMathByte(CPacket.MainControls, 0);\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo you can only set 8 states in this. And as you can see, the 1st bit ( position 0 ) is STAGE.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darkblade48\u0022 data-cite=\u0022Darkblade48\u0022\u003E\u003Cdiv\u003EGenius! Switching the logic around worked, though I\u0027m trying to figure out why.\u003Cp\u003EI am using the Arduino\u0027s internal pull-up, which means the default (button not pressed) would indeed be HIGH. Looking at main controls ()\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHow does the value of STAGEPIN (either 0 or 1) get passed to MainControls() to either make STAGE have a HIGH or LOW value?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes that answer the question?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T13:16:27Z\u0022 title=\u002203/17/2015 01:16  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by marzubus\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-17T13:34:16Z","Content":"\n\u003Cp\u003EReading your reply, some light is being shed, but I have a few more questions (sorry for all the questions)\u003C/p\u003E\u003Cp\u003EYou mentioned there can only be 8 states; is it possible to have more, or is it limited to the number of possible bits in a byte (8 bits)?\u003C/p\u003E\u003Cp\u003ENow back to the code:\u003C/p\u003E\u003Cp\u003EA pull-up resistor for STAGEPIN would always return HIGH.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Eif (digitalRead(STAGEPIN))\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, LOW);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWith the wrong logic, when STAGEPIN is HIGH, then the STAGE bit is also set to HIGH, meaning it auto launches. This makes sense to me. I assume the STAGE bit is then set to LOW (after it is triggered once), so that the following stages also do not activate by themselves.\u003C/p\u003E\u003Cp\u003EOnce I invert the logic,\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Eif (digitalRead(STAGEPIN))\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, LOW);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, HIGH);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESince STAGEPIN has a pull-up and is reading HIGH, then the STAGE bit will read LOW (i.e. do not stage). When I press the button, STAGEPIN will read LOW, which causes the STAGE bit to read HIGH -\u0026gt; my rocket will stage. This makes sense.\u003C/p\u003E\u003Cp\u003EHowever, let\u0027s say I was using a \u003Cstrong\u003Epull-down \u003C/strong\u003Eresistor. Now the value of STAGEPIN will default to LOW.\u003C/p\u003E\u003Cp\u003EWhich way would be the correct logic?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Eif (digitalRead(STAGEPIN))\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, LOW);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(STAGE, HIGH);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo me, this seems correct. Read STAGEPIN. It is LOW (due to \u003Cstrong\u003Epull-down \u003C/strong\u003Eresistor). Thus, STAGE bit is also LOW (will not stage). Once I press the button, STAGEPIN is HIGH, so STAGE bit is also set to HIGH and my rocket will stage.\u003C/p\u003E\u003Cp\u003EIs this correct?\u003C/p\u003E\u003Cp\u003EOriginally, I had my ABORTPIN and its logic set up the same (incorrect) way, i.e.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMainControls(ABORT, HIGH);\u003C/p\u003E\u003Cp\u003E else\u003C/p\u003E\u003Cp\u003E MainControls(ABORT, LOW);\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf my thought process above was correct, why doesn\u0027t my rocket automatically ABORT everytime I launch?\u003C/p\u003E\u003Cp\u003EAnd finally, with the wrong logic, how come the rocket will only stage incorrectly upon the first load? If I go and launch a second rocket, it doesn\u0027t auto-stage.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T13:44:47Z\u0022 title=\u002203/17/2015 01:44  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by Darkblade48\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"marzubus","CreatedById":68021,"CreatedDateTime":"2015-03-17T14:26:14Z","Content":"\n\u003Cp\u003EIf you use pull-down on the pin, you could change the if (digitalRead(STAGEPIN)) to if (\u003Cstrong\u003E!\u003C/strong\u003EdigitalRead(STAGEPIN)) Remember that is only True if the pin is HIGH. \u003C/p\u003E\u003Cp\u003ETo add more controls, KSPSerialIO would need to be changed. And that would require a feature request. Though I think enough of the controls are already exposed. ActionGroups take care of most of the work. \u003C/p\u003E\u003Cp\u003EIm not too sure on the reason for the second launch working. It sounds very strange.\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2015-03-17T15:11:45Z","Content":"\n\u003Cp\u003EUsing a pull down resistor means the input will be a logic LOW when the switch is open, and a logic HIGH when the switch is closed. The state of the input is exactly what you want to put in the control packet and send upstream; for the simplest case you can literally do this\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  MainControls(STAGE, digitalRead(StagePin));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENo need to constantly be confused inverting all the booleans. (and please, \u003Cem\u003Eplease\u003C/em\u003E don\u0027t invert them twice!)\u003C/p\u003E\u003Cp\u003EThe game carries out a stage operation when the value of the stage input transitions from 0 to 1. Under normal circumstances the control packet has the stage bit set to 0 when the stage button is open, and 1 when the button is closed - the transition from low to high happens when you press the button.\u003C/p\u003E\u003Cp\u003EBut with your bug, when the vessel is loaded and the connector handshake happens, the very first control packet the game receives already has the stage bit set to 1, causing the immediate stage. After that, pressing the button results in a transition from 1 to 0 (with no effect apart from preparing for the next rising transition). And \u003Cem\u003Ereleasing\u003C/em\u003E the button results in a transition from 0 to 1. So the staging happens approximately normally, but when the button is released, not pressed.\u003C/p\u003E\u003Cp\u003EEDIT: Back to how things work with pulldowns, my code is complicated slightly by using a multiplexer and doing input debouncing in software. But the way the staging bit of the control packet is constructed is hopefully pretty straightforward:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eboolean stageStatus() {\u003Cbr\u003E  if (readMuxPin(stagePin) \u0026amp;\u0026amp; readMuxPin(stageLockPin)) {\u003Cbr\u003E    return true;\u003Cbr\u003E  } else {\u003Cbr\u003E    return false;\u003Cbr\u003E  }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Evoid controls() {\u003Cbr\u003E  if (connected) {\u003Cbr\u003E    if (stageStatus()) {\u003Cbr\u003E      MainControls(STAGE, HIGH);\u003Cbr\u003E    } else {\u003Cbr\u003E      MainControls(STAGE, LOW);\u003Cbr\u003E    }\u003Cbr\u003E...\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-17T15:15:32Z\u0022 title=\u002203/17/2015 03:15  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 17, 2015\u003C/time\u003E by stibbons\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-17T16:01:53Z","Content":"\n\u003Cp\u003EThanks for the reply, I think I\u0027m finally starting to understand this now.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stibbons\u0022 data-cite=\u0022stibbons\u0022\u003E\u003Cdiv\u003EUsing a pull down resistor means the input will be a logic LOW when the switch is open, and a logic HIGH when the switch is closed. The state of the input is exactly what you want to put in the control packet and send upstream; for the simplest case you can literally do this\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  MainControls(STAGE, digitalRead(StagePin));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENo need to constantly be confused inverting all the booleans. (and please, \u003Cem\u003Eplease\u003C/em\u003E don\u0027t invert them twice!)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs I suspected, this would be the easiest case.\u003C/p\u003E\u003Cp\u003ESince the Arduino only has internal pull-up resistors, choosing to use pull-down resistors would mean additional hardware, hence, I went with the internal pull-up resistors. However, because of this, from what I understand, the state of the input is inverted to what I want to put in the control packet, hence, the boolean logic must also be inverted (i.e. the state of the input is HIGH, but I want the control packet to read LOW, and vice versa when the button is pressed). \u003C/p\u003E\u003Cp\u003EThis is made more confusing because some of the switches I have (toggle switches) are SPDT, meaning depending on how I connect them, and depending on how I set my logic will ultimately affect how the game interprets it. I just realized that I have my toggle switches set one way, and the push buttons set another way (oops!)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stibbons\u0022 data-cite=\u0022stibbons\u0022\u003E\u003Cdiv\u003EThe game carries out a stage operation when the value of the stage input transitions from 0 to 1. Under normal circumstances the control packet has the stage bit set to 0 when the stage button is open, and 1 when the button is closed - the transition from low to high happens when you press the button.\u003Cp\u003EBut with your bug, when the vessel is loaded and the connector handshake happens, the very first control packet the game receives already has the stage bit set to 1, causing the immediate stage. After that, pressing the button results in a transition from 1 to 0 (with no effect apart from preparing for the next rising transition). And \u003Cem\u003E\u003Cstrong\u003Ereleasing\u003C/strong\u003E\u003C/em\u003E\u003Cstrong\u003E the button \u003C/strong\u003Eresults in a transition from 0 to 1. So the staging happens approximately normally, but when the button is released, not pressed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAha! I thought this was the case. I noticed that sometimes if I held down the button slightly, my rocket wouldn\u0027t stage (because it was suck at 0 and preparing for the next rising transition). I\u0027m smacking my forehead and should have realized it at the time!\u003C/p\u003E\u003Cp\u003EOn another note, either a pull-up or a pull-down resistor will be required to prevent floating (erroneous) value reads, right?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stibbons\u0022 data-cite=\u0022stibbons\u0022\u003E\u003Cdiv\u003E EDIT: Back to how things work with pulldowns, my code is complicated slightly by using a multiplexer and doing input debouncing in software. But the way the staging bit of the control packet is constructed is hopefully pretty straightforward:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eboolean stageStatus() {\u003Cbr\u003E  if (readMuxPin(stagePin) \u0026amp;\u0026amp; readMuxPin(stageLockPin)) {\u003Cbr\u003E    return true;\u003Cbr\u003E  } else {\u003Cbr\u003E    return false;\u003Cbr\u003E  }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Evoid controls() {\u003Cbr\u003E  if (connected) {\u003Cbr\u003E    if (stageStatus()) {\u003Cbr\u003E      MainControls(STAGE, HIGH);\u003Cbr\u003E    } else {\u003Cbr\u003E      MainControls(STAGE, LOW);\u003Cbr\u003E    }\u003Cbr\u003E...\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis code makes sense. I think mainly because when using pull-down resistors, the logic \u0022makes sense\u0022 to humans, i.e. using a pull-down resistor, the bit value is LOW and so, the value passed to KSP is also LOW. Once you press the button, then the logic goes to HIGH, which also triggers the action.\u003C/p\u003E\u003Cp\u003EWith a pull-up, everything is inverted! I read through all 80\u002B pages of this and even bookmarked where Mulbin had a similar problem (page 20 something), but didn\u0027t realize that this was the case here as well!\u003C/p\u003E\u003Cp\u003EIs there any reason you have the Stage pin and the Stage Lock pin separately and not simply wired in series? Also, is (software) debouncing absolutely required (I would assume for toggle SPDT switches, no, but for push buttons, perhaps?)\u003C/p\u003E\n"},{"CreatedByName":"zitronen","CreatedById":11842,"CreatedDateTime":"2015-03-17T21:50:10Z","Content":"\n\u003Cp\u003EI was thinking about what the problem was, since you had the pull up set properly I don\u0027t know what else it could be. I mean it\u0027s just a switch hooked up to a pin what can possibly go wrong XD\u003C/p\u003E\u003Cp\u003EWiring stage lock in series works fine, stibbons probably has some fancy code to light up warnings and what not with his stage lock \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. Hardware and/or software debounce are recommended, imagine all the bad things that can happen if your stage button bounced... There are debounce libraries you can use.\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-17T23:16:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zitronen\u0022 data-cite=\u0022zitronen\u0022\u003E\u003Cdiv\u003EI was thinking about what the problem was, since you had the pull up set properly I don\u0027t know what else it could be. I mean it\u0027s just a switch hooked up to a pin what can possibly go wrong XD\u003Cp\u003EWiring stage lock in series works fine, stibbons probably has some fancy code to light up warnings and what not with his stage lock \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E. Hardware and/or software debounce are recommended, imagine all the bad things that can happen if your stage button bounced... There are debounce libraries you can use.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI thought a switch was simple too! I think the main reason I got confused was because my momentary switches are SPST, while my toggle switches are all SPDT. I wired the SPDT first, so my mind was \u0022set\u0022 in that logic, so I kept it the same for the SPST switches, which was wrong \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m probably going to add some fancy LEDs and such myself too, but have to figure out how to multiplex/use shift registers so that I can expand the number of pins I have first. My abort lock toggle is one of those fancy ones with a built in LED, so it\u0027d be nice to get it working!\u003C/p\u003E\u003Cp\u003EAs for the debounce, I\u0027ll take a look at the software libraries, I believe there is an example that is included in the Arduino IDE, so I\u0027m thinking I can just adapt that for use.\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2015-03-18T01:50:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Darkblade48\u0022 data-cite=\u0022Darkblade48\u0022\u003E\u003Cdiv\u003EOn another note, either a pull-up or a pull-down resistor will be required to prevent floating (erroneous) value reads, right?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, definitely. A floating pin sometimes works the way you\u0027d expect, but I\u0027ve also had them changing state based on the state of nearby switches on the panel, or the state of nearby pins on the arduino board, or even acting like a capacitive sensor and changing state when I waved my hand near the switch body.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAlso, is (software) debouncing absolutely required (I would assume for toggle SPDT switches, no, but for push buttons, perhaps?)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EToggle switches are also susceptible to contact bounce. Possibly only when the contacts open, but it\u0027s there. I always wind up using software debouncing, and if you\u0027re looking I just used the \u003Ca href=\u0022https://github.com/thomasfredericks/Bounce2/wiki\u0022 rel=\u0022external nofollow\u0022\u003EBounce2\u003C/a\u003E library in a different project and it\u0027s quite easy to work with. But hardware debouncing looks like fun, and I\u0027m a little envious of \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/101608-YAKK-Mk-1-Yet-Another-KSP-Kontroller\u0022 rel=\u0022external nofollow\u0022\u003EMr0nak\u0027s setup\u003C/a\u003E.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zitronen\u0022 data-cite=\u0022zitronen\u0022\u003E\u003Cdiv\u003EWiring stage lock in series works fine, stibbons probably has some fancy code to light up warnings and what not with his stage lock \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYep! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E I started out with the lock in series with the stage button, but I\u0027ve got a few RGB status LEDs scattered around. Putting the lock on a separate input lets me make smart decisions about how to update them\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evoid stageLedSet() {\u003Cbr\u003E  // If abort button has been hit, blink fast.\u003Cbr\u003E  // Otherwise, set the colour depending on whether stage lock is on.\u003Cbr\u003E  if (abortState) {\u003Cbr\u003E    if (fastBlinkState) {\u003Cbr\u003E      leds[stageStateLed] = CRGB::Red;\u003Cbr\u003E    } else {\u003Cbr\u003E      leds[stageStateLed] = CRGB::Black;\u003Cbr\u003E    }\u003Cbr\u003E  } else {\u003Cbr\u003E    if (readMuxPin(stageLockPin)) {\u003Cbr\u003E      leds[stageStateLed] = CRGB::Green;\u003Cbr\u003E    } else {\u003Cbr\u003E      leds[stageStateLed] = CRGB::Red;\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Darkblade48","CreatedById":113269,"CreatedDateTime":"2015-03-19T11:57:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stibbons\u0022 data-cite=\u0022stibbons\u0022\u003E\u003Cdiv\u003EYes, definitely. A floating pin sometimes works the way you\u0027d expect, but I\u0027ve also had them changing state based on the state of nearby switches on the panel, or the state of nearby pins on the arduino board, or even acting like a capacitive sensor and changing state when I waved my hand near the switch body.\u003Cp\u003EToggle switches are also susceptible to contact bounce. Possibly only when the contacts open, but it\u0027s there. I always wind up using software debouncing, and if you\u0027re looking I just used the \u003Ca href=\u0022https://github.com/thomasfredericks/Bounce2/wiki\u0022 rel=\u0022external nofollow\u0022\u003EBounce2\u003C/a\u003E library in a different project and it\u0027s quite easy to work with. But hardware debouncing looks like fun, and I\u0027m a little envious of \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/101608-YAKK-Mk-1-Yet-Another-KSP-Kontroller\u0022 rel=\u0022external nofollow\u0022\u003EMr0nak\u0027s setup\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for the information; the Bounce2 library was helpful. I managed to integrate it with the KSPIO code, but I am not sure if I have done it correctly (there\u0027s no error, and the controller still seems to work).\u003C/p\u003E\u003Cp\u003EBriefly, in KSPIO.ino, I have\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EBounce debouncer = Bounce(); \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eprior to the void Setup()\u003C/p\u003E\u003Cp\u003Eand then have \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edebouncer.update();\u003Cbr\u003Eint value = debouncer.read();\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ein void loop ().\u003C/p\u003E\u003Cp\u003EIn output.ino, I have \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edebouncer.attach(SASPIN);\u003Cbr\u003Edebouncer.interval(5);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ealong with the other pins.\u003C/p\u003E\u003Cp\u003ESeems to work fine for me, but even without the software debounce, I wasn\u0027t getting bouncing...\u003C/p\u003E\u003Cp\u003EAnother question; if I wanted to use a pot/slide pot for throttle control, would any resistance value be fine? 50k linear pot, for example?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-19T12:27:40Z\u0022 title=\u002203/19/2015 12:27  PM\u0022 data-short=\u00229 yr\u0022\u003EMarch 19, 2015\u003C/time\u003E by Darkblade48\u003C/strong\u003E\n\u003Cbr\u003EAdditional information\n\u003C/span\u003E\n"}]}