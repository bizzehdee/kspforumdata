{"TopicId":118546,"ForumId":29,"TopicTitle":"[RESOLVED] Keeping a context menu button down","CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-08-15T18:58:15Z","PageNum":1,"Articles":[{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-08-15T18:58:15Z","Content":"\n\u003Cp\u003EWhen you right click on an engine, it has the option to Enable and Disable the Gimbal. The neat thing is, that when you disable it, the button remains pressed. How can I accomplish this myself?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-30T21:38:06Z\u0022 title=\u002208/30/2015 09:38  PM\u0022 data-short=\u00228 yr\u0022\u003EAugust 30, 2015\u003C/time\u003E by FreeThinker\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-15T19:38:13Z","Content":"\n\u003Cp\u003EUsing KSPEvent, that happens automatically where you use a type of BOOL.\u003C/p\u003E\u003Cp\u003ETo do it manually would require an IF statement to check which type of button to display before your IF(GUI.Button....) line.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-08-15T20:46:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EUsing KSPEvent, that happens automatically where you use a type of BOOL.\u003Cp\u003ETo do it manually would require an IF statement to check which type of button to display before your IF(GUI.Button....) line.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESorry, could you give a short example?\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-15T21:18:51Z","Content":"\n\u003Cp\u003EI\u0027m not sure what you are asking for.\u003C/p\u003E\u003Cp\u003EIf you are using a KSPEvent, it\u0027s the standard [KSPEvent] tag you put before the object.\u003C/p\u003E\u003Cp\u003EHmm, actually I\u0027m not sure if I meant KSPField now. KSPEvents are for methods, you can\u0027t have a type BOOL of those.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPField(GUIActive = true)]\u003Cbr\u003Epublic bool myVal;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EShould work. (Once you fix the GUIActive syntax, wrote that from memory.)\u003C/p\u003E\u003Cp\u003EIf you mean on your own button, something like:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EIf(showAsButtonUp)\u003Cbr\u003E{\u003Cbr\u003EGUICurrentStyle = GUIButtonUpStyle\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E{\u003Cbr\u003EGUICurrentStyle = GUIButtonDownStyle\u003Cbr\u003E}\u003Cbr\u003EIf(GUI.Button(rect,string,GUICurrentStyle) //use values as per your usage scenario, then the GUIStyle value is the GUICurrentStyle from the previous IF statement.\u003Cbr\u003E{\u003Cbr\u003E//do stuff on button click\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHope that answers your question,\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-08-15T22:35:54Z","Content":"\n\u003Cp\u003ESorry, I guess I wan not clear. I need to change the button of an KSPEvent\u003C/p\u003E\u003Cp\u003EI got the following existing code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        [KSPField(isPersistant = true,  guiActive = false, guiActiveEditor = true, guiName = \u0022Is Propellant\u0022)]\u003Cbr\u003E        public bool isPropellant = true;\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiActiveEditor = true, guiName = \u0022Switch Propellant Mode\u0022]\u003Cbr\u003E        public void SwitchIsPropellant()\u003Cbr\u003E        {\u003Cbr\u003E            isPropellant = !isPropellant;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void Update()\u003Cbr\u003E        {\u003Cbr\u003E            Events[\u0022SwitchIsPropellant\u0022].guiName = isPropellant ? \u0022Lock as Propellant Source\u0022 : \u0022Unlock as Propellant Source\u0022;\u003Cbr\u003E            Events[\u0022SwitchIsPropellant\u0022].active = controlledResources.Any(r =\u0026gt; part.Resources.Contains(r));\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Enow I need to force the SwitchIsPropellant event (button) to remain pressed while inactive\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-16T00:58:04Z","Content":"\n\u003Cp\u003EAlright, contrary to my first post, I don\u0027t think that is possible on a KSPEvent, only on KSPFields.\u003C/p\u003E\u003Cp\u003EWhat you can do however is change the text string, so instead of being \u0022Switch Propellant Mode!\u0022, you can have the text display which mode you are in.\u003C/p\u003E\u003Cp\u003EYou can do this via the string object found at this.Events[\u0022SwitchIsPropellant\u0022].guiName\u003C/p\u003E\u003Cp\u003EBest I can offer,\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-08-30T21:37:12Z","Content":"\n\u003Cp\u003EYes, I figured the way to do is by simply adding \u0022UI_Toggle(disabledText = \u0022Off\u0022, enabledText = \u0022On\u0022)\u0022 to a KSPField\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[KSPField(GUIActive = true), UI_Toggle(disabledText = \u0022Off\u0022, enabledText = \u0022On\u0022)]\u003Cbr\u003Epublic bool myVal;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}