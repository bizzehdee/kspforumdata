{"TopicId":45228,"ForumId":32,"TopicTitle":"On Newtonian trajectories vs. patched conics","CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-07T20:59:01Z","PageNum":1,"Articles":[{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-07T20:59:01Z","Content":"\n\u003Cp\u003EI\u0027ve seen a number of conversations here in the forums about patched conics in KSP and whether or how more realistic motion of spacecraft could be calculated using Newton\u0027s laws of motion. The threads have contained a lot of speculation about why a Newtonian approach might not work: too much numerical error or drift, high timewarp wouldn\u0027t be possible, showing trajectories in map view wouldn\u0027t be possible, etc. But I generally didn\u0027t see a lot of data to support anyone\u0027s conclusions, and I did my share of speculation too. I thought it would be an interesting exercise to generate some data by simulating trajectories of vessels in the KSP solar system using Newton\u0027s laws of motion and universal law of gravitation, and seeing what problems come up and whether they can be overcome. I haven\u0027t (yet) looked at n-body simulations of the KSP solar system -- I left the moons and planets in their current Keplerian trajectories and just simulated the motion of spacecraft around them.\u003C/p\u003E\u003Cp\u003EIn short, I believe trajectories based on Newtonian mechanics can be used in KSP. This isn\u0027t a suggestion to make the change in KSP; the patched conics approach is good enough (for now at least), and if anything is going to be changed with the physics of the game I think it\u0027s PhysX that\u0027s the biggest problem right now. My goal here is to just inform discussions on the topic.\u003C/p\u003E\u003Cp\u003EI put a much more \u003Ca href=\u0022http://www.roesle.org/cms25/index.php/projects/81-general/95-on-newtonian-trajectories-in-kerbal-space-program\u0022 rel=\u0022external nofollow\u0022\u003Elong-winded article on my website\u003C/a\u003E with the details, but the highlights are:\u003C/p\u003E\u003Cp\u003EThe accuracy of the simulation depends on the numerical integration scheme used and the size of the time step used in the simulation. Using a numerical scheme with a high order of accuracy makes it possible to achieve very good accuracy while taking large time steps (less than 1 cm error after an orbit of Kerbin, with time steps larger than ~20 s). At least up through a fifth-order Runge Kutta method (which is as far as I went), there is always a big gain in efficiency in going to higher-order methods. (By which I mean, the higher order methods get increasingly costly to calculate per time step, but they allow much larger time steps to be taken so overall less computation is required to simulate a given length of trajectory.)\u003C/p\u003E\u003Cp\u003EThe maximum time step that can be taken for a given amount of error depends strongly on the trajectory -- lower orbits and more eccentric orbits require much shorter time steps than higher ones. Orbits of Kerbol further out than Jool can use time steps of several millions of seconds, as contrasted with time steps of ~20 s for low Kerbin orbits. Using an embedded integration scheme that can adjust its time step to maintain a certain error level is advantageous. I found Dormand and Prince\u0027s Runge Kutta method RK5(4)7M to work very well.\u003C/p\u003E\u003Cp\u003EThis half-way approach (planetary bodies on Keplerian trajectories and vessels on Newtonian trajectories) doesn\u0027t seem to have Lagrangian points.\u003C/p\u003E\u003Cp\u003EThe difference between a Newtonian trajectory and a Keplerian orbit is pretty small for low orbits, but the difference between them grows quickly as orbits get higher, especially for planets with moons. Therefore, if Newtonian trajectories are implemented, each planetary body could have its SOI shrunk to a fairly small radius. Inside the SOI, Kepler\u0027s laws apply and orbits would be perfectly stable with no perturbations. Outside of any SOI, in no-man\u0027s-land, Newton\u0027s laws would apply.\u003C/p\u003E\u003Cp\u003EWith this approach, the time step size needed for good accuracy is always large enough that 100,000x timewarp is possible even if trajectories for a large number of objects need to be calculated.\u003C/p\u003E\u003Cp\u003EThe trajectories should be calculated ahead of time, so that they can be displayed in map view. Interpolation inside of a time step is very fast and accurate using Shampine\u0027s method of finding an additional solution for position and velocity at the midpoint of each time step and then creating fourth- and fifth-order interpolating functions. The interpolated state can be used to provide the position and velocity of a vessel at each frame and to pinpoint certain points in the trajectory (closest approaches to a target vessel, etc.). Whenever a vessel accelerates the precalculated trajectory would have to be thrown out and a new one calculated, but usually only one vessel is accelerating at a time so it would not be a serious problem.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-07T21:11:23Z\u0022 title=\u002209/07/2013 09:11  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 7, 2013\u003C/time\u003E by Mattasmack\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"GusTurbo","CreatedById":57552,"CreatedDateTime":"2013-09-08T01:56:58Z","Content":"\n\u003Cp\u003EWow, this is a very well thought out post. I don\u0027t totally understand it, so I\u0027d like to ask a question.\u003C/p\u003E\u003Cp\u003EWhat practical effect would this have on the game? In other words, what would be different from a gameplay perspective?\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2013-09-08T03:26:22Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv style=\u0022text-align:center;\u0022\u003E\u003Cp\u003E*Opens thread*\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/QsOvPwD.gif\u0022 alt=\u0022QsOvPwD.gif\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EINFORMATION!!!\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ECool ideas, I\u0027ll have to read your full article sometime. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo basically what I understand is that every timestep, the orbit is recalculated in case something arbitrarily changes (continually recalculated in case of acceleration) and we have pseudo-n-body gravitational fields using Newtonian physics?\u003C/p\u003E\u003Cp\u003EThe interesting thing about using more accurate numbers like doubles instead of floats (I think KSP uses floats right now) is that we get a lot more accuracy (several orders of magnitude, if memory serves) in exchange for double the amount of computing power of a float (thus the name \u0022double\u0022).\u003C/p\u003E\n"},{"CreatedByName":"Captain Sierra","CreatedById":74666,"CreatedDateTime":"2013-09-08T03:32:13Z","Content":"\n\u003Cp\u003EGetting over laughing from the previous post and after reading it, nice. Glad to see someone actually looking into this crap. The info is actually quite fascinating. I\u0027ll have to read the full article sometime.\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-08T05:18:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022GusTurbo\u0022 data-cite=\u0022GusTurbo\u0022\u003E\u003Cdiv\u003EWow, this is a very well thought out post. I don\u0027t totally understand it, so I\u0027d like to ask a question.\u003Cp\u003EWhat practical effect would this have on the game? In other words, what would be different from a gameplay perspective?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s a fair question! I\u0027m having trouble putting an answer in words, so please excuse my rambling.\u003C/p\u003E\u003Cp\u003EIgnoring things like relativity, the Newtonian trajectory for a vessel is the correct one. Patched conics is an approximation. The patched conics trajectory is not dramatically wrong, but it is simplified. With Newtonian trajectories, basic things like the amount of time or delta-V to get from one place to another would still be about the same, but the path would be more complex.\u003C/p\u003E\u003Cp\u003EWith Newtonian trajectories, a vessel in a high orbit around a planet has its path perturbed by the planet\u0027s moons or other bodies. It does not come back to the same place it started from after one orbit. Depending on the circumstances, over time the plane of the vessel\u0027s orbit could be changed or it might be pulled up or down into a different orbit or even out of orbit entirely. (Contrast with the current situation, where a vessel in an orbit will follow the same orbit forever unless it enters the SOI of another body or the player does something to change it.)\u003C/p\u003E\u003Cp\u003EWith Keplerian trajectories, if you launch a vessel from low Kerbin orbit to Mun, unless you get an encounter with Mun (that is, the vessel enters Mun\u0027s SOI), Mun has no influence on the trajectory whatsoever. With Newtonian trajectories, Mun always exerts some pull on the vessel, which gets stronger and more significant as the vessel approaches Mun. The basic features of a transfer orbit between the two bodies is the same in either case, but two trajectories would differ in the details, especially for trajectories that would skirt the edge of Mun\u0027s SOI.\u003C/p\u003E\u003Cp\u003EI\u0027ll have to see if I can make some plots of similar trajectories in KSP and using Newtonian mechanics in the next day or two.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022OrbitusII\u0022 data-cite=\u0022OrbitusII\u0022\u003E\u003Cdiv\u003E...\u003Cp\u003ECool ideas, I\u0027ll have to read your full article sometime. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo basically what I understand is that every timestep, the orbit is recalculated in case something arbitrarily changes (continually recalculated in case of acceleration) and we have pseudo-n-body gravitational fields using Newtonian physics?\u003C/p\u003E\u003Cp\u003EThe interesting thing about using more accurate numbers like doubles instead of floats (I think KSP uses floats right now) is that we get a lot more accuracy (several orders of magnitude, if memory serves) in exchange for double the amount of computing power of a float (thus the name \u0022double\u0022).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks! Right, whenever something happens to a vessel that imparts any acceleration (a collision, a rocket or RCS thruster firing, docking/undocking, a decoupler firing, etc.), its old precalculated trajectory is no longer valid and has to be thrown out. If a rocket is firing, that means the predicted trajectory is changing every single frame, so in the map view there would have to be some tradeoff between how often an old trajectory is thrown out and how far out the projected trajectory is shown.\u003C/p\u003E\u003Cp\u003EBut I believe in most games, most objects in space will be debris (whose trajectories will never change on their own) or vessels in low circular orbits (mapping satellites, space stations, etc.). So the precalculated trajectories will not have to be thrown out very often, except for the case of interplanetary vessels that the player is actively controlling.\u003C/p\u003E\u003Cp\u003EYeah, floats are totally inadequate for this sort of simulation and I didn\u0027t even consider trying them. Doubles have roughly 16 decimal digits of precision, which is good enough to give sub-millimeter resolution even out around Eeloo (assuming Kerbol is at the origin). I believe floats have around 7 digits of precision. And of course, these calculations are applied at the level of a whole vessel and give the trajectory of its center of mass. When focused on a vessel the interactions between individual parts would still be done with the origin defined as the vessel\u0027s center of mass, which I believe is how it\u0027s done now.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Captain Sierra\u0022 data-cite=\u0022Captain Sierra\u0022\u003E\u003Cdiv\u003EGetting over laughing from the previous post and after reading it, nice. Glad to see someone actually looking into this crap. The info is actually quite fascinating. I\u0027ll have to read the full article sometime.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks!\u003C/p\u003E\n"},{"CreatedByName":"The Destroyer","CreatedById":36109,"CreatedDateTime":"2013-09-08T05:46:04Z","Content":"\n\u003Cp\u003EOh my god when I clicked this, it started me at that gif.\u003C/p\u003E\u003Cp\u003EOh god.\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2013-09-08T06:02:22Z","Content":"\n\u003Cp\u003EI haven\u0027t had the time to read everything you wrote up there, actually, I\u0027m not really in the mental state to do so (extremely tired tbh), so I went diagonals and I think I got what you meant. If you imply that what you want by switching to Newtonian based calculations of physics is to get orbital perturbation from moons/other outside sources on high orbits, I\u0027m aafraid this wouldn\u0027t work so well. I\u0027m highly doubting this could really work given the limitations of KSP. As soon as you calculate a trajectory by taking in account multiple bodies at the same time, you get into the realm of n-body physics. KSP is currently struggling with Keplerian orbits. The main problem is that the biggest thread on the CPU, the physics calculations, can\u0027t be split across multiple cores. That\u0027s what causing so much lag to everyone when you get a lot of parts in the physics load distance. Orbits are calculated taking account only one body to try to minimize this thread. The more bodies you get, the more calculations you have to do. Being around Jool would likely be hellish if you took account of every moon on high orbits.\u003C/p\u003E\u003Cp\u003ELike I said, I haven\u0027t fully read, I\u0027ll give it a better look when I\u0027m rested and probably read through the article, but from what I\u0027m understanding now, I\u0027m not so sure that this would play nice for our CPUs. I could be wrong though.\u003C/p\u003E\n"},{"CreatedByName":"a humble lich","CreatedById":81704,"CreatedDateTime":"2013-09-08T06:06:09Z","Content":"\n\u003Cp\u003EFirst, good article, I was wondering many of this myself. I had a couple thoughts on reading it, from my experience in doing numerical integration.\u003C/p\u003E\u003Cp\u003E1. With regards to integration schemes, given how smooth planetary orbits are, you could probably use a much higher order integration scheme. The RK45 that you used is good, I remember using a 7th/8th order Runga-Kutta method that I liked too. Or if you wanted to be super serious, you could use ODEPACK, a standard numerical library for solving ODEs. I remember being impressed on the speed gain I would get using ODEPACK compared with a simpler Runga-Kutta. Whether it is worth the programing time is another question.\u003C/p\u003E\u003Cp\u003E2. As for not being able to find stable Lagrangian Points, I would want to see more simulation results, but I would guess that the numerical errors from your integration scheme are causing them to loose stability. Runga-Kutta methods do not conserve energy, so for physical systems where that is important (like planetary dynamics), they will introduce errors in the long term. These effects are often worst around stable points. There exist integration schemes that do preserve energy, but these are generally much more complex. Other possibilities are that perturbations from Minimus are causing you problems, or possibly that you have a bug somewhere (which I\u0027m sure isn\u0027t the case, after all, my programs _never_ have bugs, why would anybody else\u0027s? :-)) \u003C/p\u003E\u003Cp\u003Ep.s. This is the first time I\u0027ve posted here!\u003C/p\u003E\n"},{"CreatedByName":"Tygroux","CreatedById":75717,"CreatedDateTime":"2013-09-08T06:42:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stupid_chris\u0022 data-cite=\u0022stupid_chris\u0022\u003E\u003Cdiv\u003EI haven\u0027t had the time to read everything you wrote up there, actually, I\u0027m not really in the mental state to do so (extremely tired tbh), so I went diagonals and I think I got what you meant. If you imply that what you want by switching to Newtonian based calculations of physics is to get orbital perturbation from moons/other outside sources on high orbits, I\u0027m aafraid this wouldn\u0027t work so well. I\u0027m highly doubting this could really work given the limitations of KSP. As soon as you calculate a trajectory by taking in account multiple bodies at the same time, you get into the realm of n-body physics. KSP is currently struggling with Keplerian orbits. The main problem is that the biggest thread on the CPU, the physics calculations, can\u0027t be split across multiple cores. That\u0027s what causing so much lag to everyone when you get a lot of parts in the physics load distance. Orbits are calculated taking account only one body to try to minimize this thread. The more bodies you get, the more calculations you have to do. Being around Jool would likely be hellish if you took account of every moon on high orbits.\u003Cp\u003ELike I said, I haven\u0027t fully read, I\u0027ll give it a better look when I\u0027m rested and probably read through the article, but from what I\u0027m understanding now, I\u0027m not so sure that this would play nice for our CPUs. I could be wrong though.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe gravity part of the KSP physics problem is not really a problem.\u003C/p\u003E\u003Cp\u003EYou could throw a unity-independant thread to calculate the gravity vector using an average of all gravity body to consider, and then say unity to use that vector. It\u0027s relatively easy. Unless unity forbid that for a reason or another, wich is possible.\u003C/p\u003E\u003Cp\u003EWhat is more problematic to thead is physical interactions of part to part(or ground...).\u003C/p\u003E\n"},{"CreatedByName":"Evrion","CreatedById":70825,"CreatedDateTime":"2013-09-08T14:11:20Z","Content":"\n\u003Cp\u003EAs I see your idea:\u003C/p\u003E\u003Cp\u003E1) Keep current model when no other astronomical bodies are close enough to matter much\u003C/p\u003E\u003Cp\u003E2) Use a numerical integration model when multiple astronomical bodies have \u0022significant\u0022 affect. (Significant here would have to be interpreted by the programmer)\u003C/p\u003E\u003Cp\u003EI would LOVE if KSP would implement n-body physics! I REALLY want to use Lagrange points!\u003C/p\u003E\u003Cp\u003EMostly. It would make fewer orbits stable. It would increase calculations needed with many craft in space. And I suspect that this is the reason SQUAD went with the current model; all craft no the current focus can simply be placed at the appropriate places along their very well known orbits, no real calculations needed, ever.\u003C/p\u003E\u003Cp\u003EI hope somebody can figure out a way to implement this and actually test it within the context of this game. As stupid_chris pointed out, physics is the biggest calculation in game right now (mostly part to part calculations though) so I imagine any physics added to the game would have potential issues to deal with. But, it seem like it just might work!\u003C/p\u003E\u003Cp\u003Eedit:\u003C/p\u003E\u003Cp\u003EThinking about this more, using Newtonian trajectories would increase orbital motion complexity (in a good way in my book!). This would increase the draw for the hardcore physics audience, but decrease the draw for a general audience as it would be harder to fully understand. It would also increase computational demand, even if only a little. Overall, this would decrease the total audience for the game. So I think it is unlikely that SQUAD would want to do this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-08T14:48:11Z\u0022 title=\u002209/08/2013 02:48  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 8, 2013\u003C/time\u003E by Evrion\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Hannu","CreatedById":60596,"CreatedDateTime":"2013-09-08T14:58:56Z","Content":"\n\u003Cp\u003EI think that change to Newtonian physics would not increase processor load too much, if it was made clever way, like Mattasmack suggested. Orbital computations would be much simpler than modeling of interacions between ships\u0027 parts. I made a simulation of our solar system\u0027s planets and Earth\u0027s moon (which made things more difficult by an order of magnitude or two) several years ago. It was able to simulate 300 years in couple of minutes in AMD\u0027s cheap processor and one thread so, that largest error in position coordinate was 1/1000. JPL\u0027s Horizon gave initial values and reference data. I understood that they should be very accurate values during couple of hundreds of years. I used Runge Kutta 4 method to solve motion equations. It is relatively simple but surprisingly powerful method for this kind of differential equations.\u003C/p\u003E\u003Cp\u003EBut if there are not any people in Squad who have experience in programming of physical simulations, it would be quite hard to implement one. Probably therefore they have refused even thinking it. If it is made wrong way it can lead to lag and annoying errors. I would be very interested to see real physics in KSP but I understand that it is not a thing which increase selling of the game.\u003C/p\u003E\n"},{"CreatedByName":"Geschosskopf","CreatedById":69507,"CreatedDateTime":"2013-09-08T15:21:46Z","Content":"\n\u003Cp\u003EBecause KSP is a computer game, not real life, it is not limited simply to a choice between Kepplerian and Newtonian physics. In a game, it\u0027s the OUTPUT that matters, not how the output was generated. And this is a good thing because from the perspectives of both game design and gameplay, n-body gravity is so undesirable that the having no Lagrange points is a small sacrifice to make in keeping things simpler and more playable. But because this is a game, there might be a way to retain the existing gravity system and still have Lagrange points.\u003C/p\u003E\u003Cp\u003EFirst, a clarification. L3, L4, and L5 are already perfectly useable in the game as-is. Thus, any bemoaning the absence of Lagrange points concerns only L1 and L2 which, sadly, not only are the most useful ones but also the only ones that need n-body gravity in real life.\u003C/p\u003E\u003Cp\u003EBut it seems to me that some industrious modder could create useable L1 and L2 points without needing n-body physics. It\u0027s all about the OUTPUT and that output is to have a ship remain in place at points that meets the geometrical specifications of where L1 and L2 are. Not being a modder or knowing any of the inner workings of KSP, I have no idea how to do this but can at least sketch out an idea. It could well be impossible but it hopefully will inspire others to something that might work. So here goes:\u003C/p\u003E\u003Cp\u003EThe mod creates an invisible, massless, non-clipping rigid strut between the centers of Body A and Body B. Along this strut, at the distances needed for L1 and L2, you have areas that work like docking ports. If a ship enters this area within a small range of velocities, it \u0022docks\u0022 to the area. So now the ship is attached to the strut between the bodies and stays there, always in line with the bodies and always at the same distance from them. Of course, it would also be nice if you had some icon on the \u0022docking\u0022 area so you could select it as a target. Then it would just be a question of rendezvousing and matching speeds with it, and voila!\u003C/p\u003E\u003Cp\u003EAnyway, my 2 cents on the subject.\u003C/p\u003E\n"},{"CreatedByName":"arq","CreatedById":71084,"CreatedDateTime":"2013-09-08T16:15:07Z","Content":"\n\u003Cp\u003EA few thoughts:\u003C/p\u003E\u003Cp\u003EDoes KSP use floats instead of doubles? Really? Or was that just your simulation. Floats are almost never used because computationally they are almost equivalent to doubles (general-purpose computers are built to work in doubles) so the only thing they save you is 50% memory, which is only a problem if you\u0027re tracking millions of numbers (in for KSP orbits it\u0027s hundreds or maybe thousands). Many beginning programmers haven\u0027t even heard of floats, only doubles.\u003C/p\u003E\u003Cp\u003EOrbital physics are handled separately from part physics. The orbital physics just use the motion of the CoM (which is why orbits get jumpy when transferring to the outer planets, the CoM jiggles a little when normal physics are running). This would have very little impact on parts physics.\u003C/p\u003E\u003Cp\u003EWhat the OP is proposing is not n-body physics. Really it\u0027s just 1 body moving through a complex environment (it does not affect the environment). However, since even the heaviest 5000 part ship is still a dot next to Gilly, these 1-body physics are an approximation that would take contrived scenarios to even observe a difference.\u003C/p\u003E\u003Cp\u003EAll of this said, I believe it would be possible to use these \u0027almost-Newtonian\u0027 orbits instead of patched conics. However, I am still not convinced that this would contribute meaningfully to the game. The only big plus would be Lagrange points (though I\u0027m not convinced that would be more than a brief novelty). Then there would be the obnoxious bits like Mun pulling down your LKO ships.\u003C/p\u003E\n"},{"CreatedByName":"Evrion","CreatedById":70825,"CreatedDateTime":"2013-09-08T16:21:55Z","Content":"\n\u003Cp\u003Ehmm, \u0022reply with quote\u0022 is failing me at the moment.\u003C/p\u003E\u003Cp\u003E\u0022First, a clarification. L3, L4, and L5 are already perfectly useable in the game as-is. Thus, any bemoaning the absence of Lagrange points concerns only L1 and L2 which, sadly, not only are the most useful ones but also the only ones that need n-body gravity in real life.?\u003C/p\u003E\u003Cp\u003E- Geschosskopf\u003C/p\u003E\u003Cp\u003EI don\u0027t think this is correct. All Lagrange points depend on n-body interactions. Lagrange points in general are points in space where it is theoretically possible to orbit a central body in exact time with a secondary body. L3, the point exactly opposite the secondary body is kinda worthless in general for spacecraft so I don\u0027t mind ignoring it.\u003C/p\u003E\u003Cp\u003EL4 and L5 are very interesting ones in that they are stable points of orbit. Or, more plainly, if you miss them by a bit, you will tend to be pulled back into them. This is why Jupiter has Trojan asteroids at it\u0027s L4 and L5 points. In KSP these points are not stable in the same way. In KSP you can orbit at those points, or ANY other point on the orbit of the secondary object so long as your orbit matches the secondary object.\u003C/p\u003E\u003Cp\u003EIn KSP, if you want to use L4 or L5 of, say Kerbin around the sun, then you must exactly match Kerbin\u0027s orbit. It is actually not necessary to get the right position on the orbit, just the orbital shape right. If you miss by a little, then you will eventually drift away.\u003C/p\u003E\u003Cp\u003EIn real life if you want to use L4 or L5 of the Earth, than you must get an orbit that is very close to the Earth\u0027s around the sun and be very close to L4 or L5 and you will then be captured by the Lagrange point and stay there. Kind of like being captured by planets now in KSP. This means missing by a little is okay.\u003C/p\u003E\u003Cp\u003ETLDR:\u003C/p\u003E\u003Cp\u003EYes you can orbit at the theoretical L4 or L5, but they don\u0027t work right.\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-08T17:01:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stupid_chris\u0022 data-cite=\u0022stupid_chris\u0022\u003E\u003Cdiv\u003EI haven\u0027t had the time to read everything you wrote up there, actually, I\u0027m not really in the mental state to do so (extremely tired tbh), so I went diagonals and I think I got what you meant. If you imply that what you want by switching to Newtonian based calculations of physics is to get orbital perturbation from moons/other outside sources on high orbits, I\u0027m aafraid this wouldn\u0027t work so well. I\u0027m highly doubting this could really work given the limitations of KSP. As soon as you calculate a trajectory by taking in account multiple bodies at the same time, you get into the realm of n-body physics. KSP is currently struggling with Keplerian orbits. The main problem is that the biggest thread on the CPU, the physics calculations, can\u0027t be split across multiple cores. That\u0027s what causing so much lag to everyone when you get a lot of parts in the physics load distance. Orbits are calculated taking account only one body to try to minimize this thread. The more bodies you get, the more calculations you have to do. Being around Jool would likely be hellish if you took account of every moon on high orbits.\u003Cp\u003ELike I said, I haven\u0027t fully read, I\u0027ll give it a better look when I\u0027m rested and probably read through the article, but from what I\u0027m understanding now, I\u0027m not so sure that this would play nice for our CPUs. I could be wrong though.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI won\u0027t respond to all you wrote (since, as you said, you hadn\u0027t fully read the post before responding), but I do want to comment on your statement that because the physics calculations in KSP are so costly, something else couldn\u0027t be added to the game. The part-to-part physics calculations certainly are costly; on my laptop the game is pretty much always chugging and using all the resources it can, either due to rendering or the physics calculations depending on the situation. But if what you say is the true state of affairs, that nothing else can be added because what is already there is so costly, it\u0027s a pretty lousy state of affairs. Either the developers really do need to drop everything else and do optimization (as posters occasionally complain about on the forum), or else expansion of the game is done. But I think your statement is incorrect, as evidenced by the popularity of mods that do add a moderate amount of additional calculation to the game (FAR, ISA Mapsat, MechJeb, etc.).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022a humble lich\u0022 data-cite=\u0022a humble lich\u0022\u003E\u003Cdiv\u003EFirst, good article, I was wondering many of this myself. I had a couple thoughts on reading it, from my experience in doing numerical integration.\u003Cp\u003E1. With regards to integration schemes, given how smooth planetary orbits are, you could probably use a much higher order integration scheme. The RK45 that you used is good, I remember using a 7th/8th order Runga-Kutta method that I liked too. Or if you wanted to be super serious, you could use ODEPACK, a standard numerical library for solving ODEs. I remember being impressed on the speed gain I would get using ODEPACK compared with a simpler Runga-Kutta. Whether it is worth the programing time is another question.\u003C/p\u003E\u003Cp\u003E2. As for not being able to find stable Lagrangian Points, I would want to see more simulation results, but I would guess that the numerical errors from your integration scheme are causing them to loose stability. Runga-Kutta methods do not conserve energy, so for physical systems where that is important (like planetary dynamics), they will introduce errors in the long term. These effects are often worst around stable points. There exist integration schemes that do preserve energy, but these are generally much more complex. Other possibilities are that perturbations from Minimus are causing you problems, or possibly that you have a bug somewhere (which I\u0027m sure isn\u0027t the case, after all, my programs _never_ have bugs, why would anybody else\u0027s? :-)) \u003C/p\u003E\u003Cp\u003Ep.s. This is the first time I\u0027ve posted here!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWelcome!\u003C/p\u003E\u003Cp\u003E1. Yeah, I thought of trying even higher order schemes -- I know Fehlberg published RK schemes up to 8th order back in the 60\u0027s, and I believe Dormand and Prince have an embedded 8th order scheme as well -- but after the 5th order scheme programmer fatigue set in! If I were actually implementing this approach those schemes, and ODEPACK, are things I would definitely look at. For the present, I just wanted to find out if the approach I had in mind would work or not, and the 5th order scheme I used was good enough I think.\u003C/p\u003E\u003Cp\u003E2. Oh yes, there are certainly bugs! And that might be why the L-points didn\u0027t behave as expected. But I know that, by leaving the planets and moons in their Keplerian orbits, they are not moving as they \u0022should\u0022 (i.e., Kerbin and Kerbol should be mutually orbiting their barycenter, but in KSP Kerbol is stationary), and I know that that also upsets the balance of forces that create the L-points to some extent. This is something I might look at more if I have time.\u003C/p\u003E\u003Cp\u003EI do think the notion of energy conservation is a red herring though. In the approach I\u0027ve described here, with planets moving on fixed trajectories, the total energy in the system \u003Cstrong\u003Eis not conserved\u003C/strong\u003E! A vessel can take a gravitational slingshot around a planet and gain energy, and the planet doesn\u0027t lose any. Even in a true n-body simulation of the whole solar system, the difference in mass between Kerbol and the planets and spacecraft is so great that I think conserving energy of the system would be very difficult, to no significant gain that I can see.\u003C/p\u003E\n"},{"CreatedByName":"Geschosskopf","CreatedById":69507,"CreatedDateTime":"2013-09-08T17:08:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Evrion\u0022 data-cite=\u0022Evrion\u0022\u003E\u003Cdiv\u003EYes you can orbit at the theoretical L4 or L5, but they don\u0027t work right.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat do you mean, \u0022they don\u0027t work right\u0022? Remember, this is a computer program, not real life, so \u0022working right\u0022 is defined in terms of output: the ship doing the expected thing for the player. How the game derives this output doesn\u0027t matter at all, so doesn\u0027t even have to be close to the real world situation.\u003C/p\u003E\u003Cp\u003ESo, with the game the way it is right now, you can figure out where the L3, L4, and L5 points are. You can then fly ships there and they will sit there forever. Thus, these Lagrange points \u0022work\u0022 in terms of what the player sees without needing to change the underlying game mechanics. Of course, this ignores the fact that with the current system, EVERY point on a planet\u0027s orbit is stable the same way for the same underlying reasons, so you don\u0027t actually have to go to L3, L4, or L5 to get a stable point in the orbit; anywhere will do. But so what? If you\u0027re the type of player who actually cares about using these points, you\u0027ll expend just as much effort flying to these specific points whether or not there\u0027s anything special about them.\u003C/p\u003E\u003Cp\u003EAnd here\u0027s the question... Suppose something along the lines I suggested would actually work to fake L1 and L2. To the player, the results are the same as if n-body gravity was in effect, or at least close enough. If you get the desired output from it, what difference does it make if what\u0027s producing that result is real-world math or some hackjob with no basis at all in reality? And if it works for L1 and L2, no doubt it could be extended to work for L3, L4, and L5, although as mentioned that\u0027s not necessary. But would you feel better having something like this for those points rather than what we have now?\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-08T18:02:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Evrion\u0022 data-cite=\u0022Evrion\u0022\u003E\u003Cdiv\u003EAs I see your idea:\u003Cp\u003E1) Keep current model when no other astronomical bodies are close enough to matter much\u003C/p\u003E\u003Cp\u003E2) Use a numerical integration model when multiple astronomical bodies have \u0022significant\u0022 affect. (Significant here would have to be interpreted by the programmer)\u003C/p\u003E\u003Cp\u003EI would LOVE if KSP would implement n-body physics! I REALLY want to use Lagrange points!\u003C/p\u003E\u003Cp\u003EMostly. It would make fewer orbits stable. It would increase calculations needed with many craft in space. And I suspect that this is the reason SQUAD went with the current model; all craft no the current focus can simply be placed at the appropriate places along their very well known orbits, no real calculations needed, ever.\u003C/p\u003E\u003Cp\u003EI hope somebody can figure out a way to implement this and actually test it within the context of this game. As stupid_chris pointed out, physics is the biggest calculation in game right now (mostly part to part calculations though) so I imagine any physics added to the game would have potential issues to deal with. But, it seem like it just might work!\u003C/p\u003E\u003Cp\u003Eedit:\u003C/p\u003E\u003Cp\u003EThinking about this more, using Newtonian trajectories would increase orbital motion complexity (in a good way in my book!). This would increase the draw for the hardcore physics audience, but decrease the draw for a general audience as it would be harder to fully understand. It would also increase computational demand, even if only a little. Overall, this would decrease the total audience for the game. So I think it is unlikely that SQUAD would want to do this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, that\u0027s essentially it. I do agree that the danger in making any change for the sake of realism is that it makes the game less approachable. But I think this hybrid system in which Keplerian orbits are retained inside a small SOI (which would still be shown in map view when crossing its boundary) mitigates it almost entirely. For example, I would envision the SOI for Kerbin having a limit somewhere in the range 4000 - 7000 km. That\u0027s high enough that vessels in low Kerbin orbit and even synchronous orbit would be inside the SOI and so would be perfectly stable. And the trajectories for vessels going through no-man\u0027s-land would still be displayed in map view, so although the paths would be more complex, they would still be predictable -- the player will always know where his or her vessel will end up.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022arq\u0022 data-cite=\u0022arq\u0022\u003E\u003Cdiv\u003EA few thoughts:\u003Cp\u003EDoes KSP use floats instead of doubles? Really? Or was that just your simulation. Floats are almost never used because computationally they are almost equivalent to doubles (general-purpose computers are built to work in doubles) so the only thing they save you is 50% memory, which is only a problem if you\u0027re tracking millions of numbers (in for KSP orbits it\u0027s hundreds or maybe thousands). Many beginning programmers haven\u0027t even heard of floats, only doubles.\u003C/p\u003E\u003Cp\u003EOrbital physics are handled separately from part physics. The orbital physics just use the motion of the CoM (which is why orbits get jumpy when transferring to the outer planets, the CoM jiggles a little when normal physics are running). This would have very little impact on parts physics.\u003C/p\u003E\u003Cp\u003EWhat the OP is proposing is not n-body physics. Really it\u0027s just 1 body moving through a complex environment (it does not affect the environment). However, since even the heaviest 5000 part ship is still a dot next to Gilly, these 1-body physics are an approximation that would take contrived scenarios to even observe a difference.\u003C/p\u003E\u003Cp\u003EAll of this said, I believe it would be possible to use these \u0027almost-Newtonian\u0027 orbits instead of patched conics. However, I am still not convinced that this would contribute meaningfully to the game. The only big plus would be Lagrange points (though I\u0027m not convinced that would be more than a brief novelty). Then there would be the obnoxious bits like Mun pulling down your LKO ships.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOn floats vs. doubles: I don\u0027t know what is used in KSP currently. I think there might be a limitation in Unity so that part-to-part calculations are done with floats. (Which kind of makes sense, if they\u0027re using an engine meant to be useable on GPUs too, since most of their computing power is single-precision.) I assume (I hope!) they use doubles for all trajectories already. I only used doubles in my own simulations.\u003C/p\u003E\u003Cp\u003EOn n-body physics: That\u0027s an important point, and something I perhaps should have emphasized more. I have not looked at n-body simulations at all; I just looked at letting vessels be influenced by gravity from multiple bodies at once. But the vessels don\u0027t influence the motion of the planetary bodies (thus breaking Newton\u0027s third law, but the ratio of masses between vessel and planet is so large it doesn\u0027t matter), and the vessels don\u0027t influence each other gravitationally. That means each vessel\u0027s trajectory can still be calculated completely independently of the others.\u003C/p\u003E\u003Cp\u003EOn your last point: my notion of keeping a small SOI around each body in which Kepler\u0027s laws still apply is meant to mitigate that problem (and see my earlier comments in this post). Although, when I did some longer-term simulations of a vessel in LKO, I found that the influence of Mun was limited -- the orbit changed shape, but at least over a moderate amount of time the vessel wasn\u0027t pushed continually lower or higher such that it would eventually be lost. The question of whether making a change like this would be worth the trouble is, I think, the key one. I believe it is possible within the framework of KSP without hurting the gameplay. But is there a big enough benefit? I don\u0027t know the question could be answered without trying it in the game (which none of us are in a position to do), or at least putting some trajectories calculated using both methods in side-by-side comparisons (which I haven\u0027t yet done).\u003C/p\u003E\n"},{"CreatedByName":"Gojira","CreatedById":10884,"CreatedDateTime":"2013-09-08T18:18:38Z","Content":"\n\u003Cp\u003EI like this idea. I read the whole post and the rest after.\u003C/p\u003E\u003Cp\u003ETheoretically this would make every celestial body\u0027s SoI infinite, right?\u003C/p\u003E\u003Cp\u003EAnd yes, iirc KSP uses floats instead of doubles.\u003C/p\u003E\u003Cp\u003EAlso, what would happen with the trajectory predictions? Would they still be patched conics or would they be more fluid?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-08T18:22:08Z\u0022 title=\u002209/08/2013 06:22  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 8, 2013\u003C/time\u003E by Gojira\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Brotoro","CreatedById":57674,"CreatedDateTime":"2013-09-08T18:38:47Z","Content":"\n\u003Cp\u003EEvrion is correct, Geschosskoph. The L4 and L5 points in KSP do not work like the real ones (they do not have the same effect). Sure, you would stay in the same place relative to the secondary body in KSP if your ship was EXACTLY at the L5 point (or any point EXACTLY on the secondary body\u0027s orbit...which is unrealistic), but with a real L4 or L5 point, there is a large volume of space around that point where a ship will end up moving around the Lagrange point and not drift away. This does NOT happen in KSP. If you are even the tiniest bit off from the L4 or L5 points, your ship will drift away over time. So those points DO NOT act like real Lagrange points, hence \u0022they do not work.\u0022\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2013-09-08T19:11:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gojira\u0022 data-cite=\u0022Gojira\u0022\u003E\u003Cdiv\u003EI like this idea. I read the whole post and the rest after.\u003Cp\u003ETheoretically this would make every celestial body\u0027s SoI infinite, right? \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, at least in the simplest application you would just calculate the position of every planetary body and its associated gravitational force on a vessel at each time step. But they could be cut down if more performance is needed. For example, if the distance from a planet is above some limit, don\u0027t bother looking at its moons, or if the distance from Kerbol is large enough, don\u0027t bother calculating the locations of the inner planets. (Note that finding the location of a body from it\u0027s Kepler orbital elements is more costly than calculating the gravitational force once you have the location. So the significant speed-up comes from avoiding calculating the body\u0027s location in the first place.)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAnd yes, iirc KSP uses floats instead of doubles.\u003Cp\u003EAlso, what would happen with the trajectory predictions? Would they still be patched conics or would they be more fluid?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe trajectories of all objects can be precalculated (the storage requirements are not too bad) so that they can be displayed in map view without any extra load on the CPU. So although the trajectories would be more complex, an object would still go exactly where the path in map view says it will. (It would be an interesting gameplay mechanic to show patched conics in the map view but calculate the trajectories differently, perhaps justified by the Kerbals not having good computers, but I think it would mostly just be frustrating to the player.) It would probably not be possible to continually update the full length of a trajectory while the vessel is accelerating, but it should take much less than a second to calculate out the full trajectory after acceleration ceases in most cases.\u003C/p\u003E\n"},{"CreatedByName":"jebisanaggie","CreatedById":79732,"CreatedDateTime":"2013-09-08T19:16:51Z","Content":"\n\u003Cp\u003EExcuse my ignorance here, but if you matched your orbit EXACTLY with Kerbin\u0027s orbit, wouldn\u0027t you also have zero relative velocity, in effect making L4 and L5 span the entirety of Kerbin\u0027s orbit?\u003C/p\u003E\n"},{"CreatedByName":"Geschosskopf","CreatedById":69507,"CreatedDateTime":"2013-09-08T22:02:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Brotoro\u0022 data-cite=\u0022Brotoro\u0022\u003E\u003Cdiv\u003EEvrion is correct, Geschosskoph. The L4 and L5 points in KSP do not work like the real ones (they do not have the same effect). Sure, you would stay in the same place relative to the secondary body in KSP if your ship was EXACTLY at the L5 point (or any point EXACTLY on the secondary body\u0027s orbit...which is unrealistic), but with a real L4 or L5 point, there is a large volume of space around that point where a ship will end up moving around the Lagrange point and not drift away. This does NOT happen in KSP. If you are even the tiniest bit off from the L4 or L5 points, your ship will drift away over time. So those points DO NOT act like real Lagrange points, hence \u0022they do not work.\u0022\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOK, so you want ships to orbit around the L3/L4/L5 points instead of having to sit exactly on them. Then make a mod that creates that condition. I doubt this would work for L1/L2 without the sort of rigid structure I proposed above but it would probably work at the other points. Just put a \u0022singularity\u0022 at the L3/L4/L5 points. That is, something undetectable apart from its gravity to create an SOI in the desired area. Problem solved.\u003C/p\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2013-09-08T22:19:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jebisanaggie\u0022 data-cite=\u0022jebisanaggie\u0022\u003E\u003Cdiv\u003EExcuse my ignorance here, but if you matched your orbit EXACTLY with Kerbin\u0027s orbit, wouldn\u0027t you also have zero relative velocity, in effect making L4 and L5 span the entirety of Kerbin\u0027s orbit?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell yes, keyword being \u003Cem\u003Eexactly\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003EThe nice things about Lagrange points is that they\u0027re stable, so if you\u0027re off a little bit (within limits) the orbit will correct itself, instead of your craft drifting off further and further over time. And unless you match Kerbin orbit \u003Cem\u003Eexactly\u003C/em\u003E, you \u003Cem\u003Ewill\u003C/em\u003E drift off.\u003C/p\u003E\n"},{"CreatedByName":"Evrion","CreatedById":70825,"CreatedDateTime":"2013-09-08T22:41:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Geschosskopf\u0022 data-cite=\u0022Geschosskopf\u0022\u003E\u003Cdiv\u003EOK, so you want ships to orbit around the L3/L4/L5 points instead of having to sit exactly on them. Then make a mod that creates that condition. I doubt this would work for L1/L2 without the sort of rigid structure I proposed above but it would probably work at the other points. Just put a \u0022singularity\u0022 at the L3/L4/L5 points. That is, something undetectable apart from its gravity to create an SOI in the desired area. Problem solved.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EL4 and L5 are the only stable Lagrange points. They have the nifty feature that if you wander around them a bit, they pull you back. It\u0027s not really an orbit because those points themselves move as the secondary body moves.\u003C/p\u003E\u003Cp\u003EIf they worked right, then things like this could be done:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Interplanetary_Transport_Network\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Interplanetary_Transport_Network\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIf they work by some sort of vague simulation like you suggest than all you can do is stay there, which is not really much different from the current situation. An orbit could be done, but Lagrange \u0022orbits\u0022 aren\u0027t the same as a regular orbit. There are even some cool things like the \u0022Horseshoe orbit\u0022 that become possible if they are more properly simulated.\u003C/p\u003E\u003Cp\u003EI understand that it\u0027s all in terms of output. A good simulation would allow for all the fun things that can be done with Lagrange points IRL (Look them up!), and quick and dirty approach (a very Kerbal one?) would not really allow for much new and really not be worthwhile.\u003C/p\u003E\n"},{"CreatedByName":"arq","CreatedById":71084,"CreatedDateTime":"2013-09-09T05:27:03Z","Content":"\n\u003Cp\u003EReally you just need to match your orbital period to follow Kerbin. You\u0027d need to use RCS (or better yet an ion engine) to tune it, but it can be done. Probably to within minutes per orbit, if not better.\u003C/p\u003E\n"}]}