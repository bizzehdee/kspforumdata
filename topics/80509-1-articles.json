{"TopicId":80509,"ForumId":29,"TopicTitle":"Seeking documentation of queueSpot parameter in RenderingManager.AddToPostDrawQueue","CreatedByName":"Dave Kerbin","CreatedById":78777,"CreatedDateTime":"2014-08-02T17:30:17Z","PageNum":1,"Articles":[{"CreatedByName":"Dave Kerbin","CreatedById":78777,"CreatedDateTime":"2014-08-02T17:30:17Z","Content":"\n\u003Cp\u003EI want to find out what the queueSpot parameter represents in the RenderingManager.AddToPostDrawQueue method.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void AddToPostDrawQueue(int queueSpot, Callback drawFunction);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAll the examples I can find seem to use arbitrary values (0, 1, 3 and 5) without any explaination. I\u0027ve experimented and found that apart from 0 (which results in my window being drawn even when F2 is pressed) they seem to be the same. I\u0027m not very comfortable just passing in a random value and not knowing what I might be doing. I have seen one mention made about how the RenderingManager class has a field called postDrawQueue which is an array of callbacks and a theory that the queueSpot parameter might be linked to this array.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic Callback[] postDrawQueue;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFollowing that logic I tried out this code and it seems to work, but I\u0027d still really prefer to know what the parameter is supposed to be for instead of going on a hunch.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EqueueSpot = RenderingManager.fetch.postDrawQueue.Length; // get next available slot?\u003Cbr\u003ERenderingManager.AddToPostDrawQueue(queueSpot, DrawFunction);\u003Cbr\u003E...\u003Cbr\u003ERenderingManager.RemoveFromPostDrawQueue(queueSpot, DrawFunction);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2014-08-02T20:52:58Z","Content":"\n\u003Cp\u003EI know this is not answering your question, but might I ask what it is that you\u0027re trying to do?\u003C/p\u003E\n"},{"CreatedByName":"Dave Kerbin","CreatedById":78777,"CreatedDateTime":"2014-08-02T21:11:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022blizzy78\u0022 data-cite=\u0022blizzy78\u0022\u003E\u003Cdiv\u003EI know this is not answering your question, but might I ask what it is that you\u0027re trying to do?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI want to draw a simple informational window tied to the application bar (something like the resource, contracts or notification bar app). To the best of my knowledge using the post-drawing queue is the correct way to do this so that it will be drawn along with the other UI elements and be automatically excluded when the user toggles the F2 key. However I don\u0027t know what queueSpot represents - is it supposed to be a unique value, is it a depth sorting value, or maybe something else entirely? As a result my current function for determining a \u0027valid\u0027 queueSpot value is a complete stab in the dark.\u003C/p\u003E\n"},{"CreatedByName":"blizzy78","CreatedById":68543,"CreatedDateTime":"2014-08-02T23:29:40Z","Content":"\n\u003Cp\u003EYou don\u0027t use the RenderingManager to draw a simple window. In OnGUI(), you should use GUILayout.Window() to do that. To register for showing/hiding the UI (F2 key), you should use GameEvents.onHideUI/onShowUI.\u003C/p\u003E\n"}]}