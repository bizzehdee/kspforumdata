{"TopicId":119112,"ForumId":29,"TopicTitle":"Trying to fix a NullReferenceException in an outdated mod to make it compatible with KSP 1.0.4","CreatedByName":"CoriW","CreatedById":57866,"CreatedDateTime":"2015-08-23T02:22:34Z","PageNum":1,"Articles":[{"CreatedByName":"CoriW","CreatedById":57866,"CreatedDateTime":"2015-08-23T02:22:34Z","Content":"\n\u003Cp\u003EHello, I\u0027ve been trying to update \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/114618-0-90-ShipEffects-Sound-Mod-Dynamic-Sound-Effects-v0-2-6-DEV-HAULTED\u0022 rel=\u0022external nofollow\u0022\u003EShipEffects: Dynamic Sound Effects\u003C/a\u003E to function properly with KSP 1.0.4, as the Developer has stated that development of the mod has haulted and anyone is welcome to keep it updated.\u003C/p\u003E\u003Cp\u003ESo the mod (which was compiled for KSP 0.90.0) works perfectly except under very specific and very hard to replicate conditions, in which case it will spam NullReferenceExceptions. So that is the only thing that needs to be fixed in order to call the mod 1.0.4 compatible, however in order to fix the problem I needed to cause the NullReferenceException to fire so that I could locate the source of the problem. This took several attempts and I finally was able to cause the NullReferenceException to fire, and locate the code block that was causing it.\u003C/p\u003E\u003Cp\u003EWhile I was able to locate the code block that was causing the problem, I needed to pinpoint what line of code was causing the NullReferenceException, and so I threw in some try-catch statements so that when it fired, I would know exactly where and why... BUT I can\u0027t get the NullReferenceException to fire again, and I\u0027ve been trying to get it to fire for hours... So here I am with a modified .dll that would tell me the exact location of the problem down to the very line, and I can\u0027t use it because I cant get the darn thing to fire.\u003C/p\u003E\u003Cp\u003ENow I only have basic, maybe a bit of intermediate experience with C#, and no experience modding KSP at all. So while I would probably be able to come up with some solution to the problem if I could get it to fire with my modified .dll, I suspect that someone more experienced would be able to see the problem by simply looking at the code. This is why I\u0027ve come here for assistance, because I have the output from the NullReferenceException, and the source code for the plugin, I just need somebody with a bit more experience to help me out.\u003C/p\u003E\u003Cp\u003EWith all of that being said, here\u0027s the error and the source.\u003C/p\u003E\u003Cp\u003ENullReferenceException:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ENullReferenceException\u003Cbr\u003E  at (wrapper managed-to-native) UnityEngine.AudioSource:get_isPlaying ()\u003Cbr\u003E\u003Cbr\u003E  at ShipEffects.SEMaster.SoundFX (.FXGroup fx, Single volume, Single volCtrl, Single spread, Boolean play) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ShipEffects.SEMaster.SoundFX (.FXGroup fx, Boolean play) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ShipEffects.SEMaster.Update () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E(Filename:  Line: -1)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESource:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing System.Reflection;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing KSP;\u003Cbr\u003E\u003Cbr\u003Enamespace ShipEffects\u003Cbr\u003E{\u003Cbr\u003E    [KSPAddon(KSPAddon.Startup.Flight, false)]\u003Cbr\u003E    public class SEMaster : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        //soundnames\u003Cbr\u003E        string small_rattles = \u0022ShipEffects/Sounds/small_rattles\u0022;\u003Cbr\u003E        string big_rattles = \u0022ShipEffects/Sounds/big_rattles\u0022;\u003Cbr\u003E        string rumble = \u0022ShipEffects/Sounds/rumble\u0022;\u003Cbr\u003E        string vibrations = \u0022ShipEffects/Sounds/vibrations\u0022;\u003Cbr\u003E        string stress_big = \u0022ShipEffects/Sounds/stress_big\u0022;\u003Cbr\u003E        string atmos_normal = \u0022ShipEffects/Sounds/atmos_normal\u0022;\u003Cbr\u003E\u003Cbr\u003E        public string thumpLowSound = \u0022ShipEffects/Sounds/thump_low\u0022;\u003Cbr\u003E        public string thumpHeavySound = \u0022ShipEffects/Sounds/thump_heavy\u0022;\u003Cbr\u003E\u003Cbr\u003E        public string dockedClip = \u0022ShipEffects/Sounds/docked_sound\u0022;\u003Cbr\u003E        public string undockedClip = \u0022ShipEffects/Sounds/undocked_sound\u0022;\u003Cbr\u003E\u003Cbr\u003E        //groups\u003Cbr\u003E        FXGroup smallRattlesGroup = new FXGroup(\u0022smallRattlesFXGroup\u0022);\u003Cbr\u003E        FXGroup bigRattlesGroup = new FXGroup(\u0022bigRattlesFXGroup\u0022);\u003Cbr\u003E        FXGroup rumbleGroup = new FXGroup(\u0022rumbleFXGroup\u0022);\u003Cbr\u003E        FXGroup vibrationsGroup = new FXGroup(\u0022vibrationsFXGroup\u0022);\u003Cbr\u003E        FXGroup atmosphereGroup = new FXGroup(\u0022atmosphereFXGroup\u0022);\u003Cbr\u003E        FXGroup stressBigGroup = new FXGroup(\u0022stressBigFXGroup\u0022);\u003Cbr\u003E\u003Cbr\u003E        FXGroup thumpLowGroup = new FXGroup(\u0022ThumpLowFXGroup\u0022);\u003Cbr\u003E        FXGroup thumpHeavyGroup = new FXGroup(\u0022ThumpHeavyFXGroup\u0022);\u003Cbr\u003E\u003Cbr\u003E        FXGroup dockedGroup = new FXGroup(\u0022DockFXGroup\u0022);\u003Cbr\u003E        FXGroup undockedGroup = new FXGroup(\u0022DockFXGroup\u0022);\u003Cbr\u003E\u003Cbr\u003E        //Settings\u003Cbr\u003E        public float masterVolume = 1f;\u003Cbr\u003E        public float rVolCtrl = 1f;\u003Cbr\u003E        public float vVolCtrl = 1f;\u003Cbr\u003E        public float rmVolCtrl = 1f;\u003Cbr\u003E        public float sVolCtrl = 1f;\u003Cbr\u003E        public float aVolCtrl = 0.7f;\u003Cbr\u003E        public float tVolCtrl = 0.7f;\u003Cbr\u003E\u003Cbr\u003E        public float resistMultiplier = 1.0f;\u003Cbr\u003E        public float reEntryMultiplier = 8.0f;\u003Cbr\u003E\u003Cbr\u003E        //sets\u003Cbr\u003E        bool rumbleSet;\u003Cbr\u003E        bool smallRattlesSet;\u003Cbr\u003E        bool bigRattlesSet;\u003Cbr\u003E        bool vibrationsSet;\u003Cbr\u003E        bool atmosphereSet;\u003Cbr\u003E        bool stressBigSet;\u003Cbr\u003E\u003Cbr\u003E        bool thumpLowSet;\u003Cbr\u003E        bool thumpHeavySet;\u003Cbr\u003E\u003Cbr\u003E        bool dockedSet;\u003Cbr\u003E        bool undockedSet;\u003Cbr\u003E\u003Cbr\u003E        bool gamePaused = false;\u003Cbr\u003E\u003Cbr\u003E        Vessel vessel;\u003Cbr\u003E        AerodynamicsFX aeroFx;\u003Cbr\u003E\u003Cbr\u003E        float vesselMass;\u003Cbr\u003E        float vesselAcceleration;\u003Cbr\u003E        float vesselRot;\u003Cbr\u003E        float surfSpeed;\u003Cbr\u003E        float atmDensity;\u003Cbr\u003E        float engineThrust;\u003Cbr\u003E        float vResist;\u003Cbr\u003E        float engineAccel;\u003Cbr\u003E        float engineMicro;\u003Cbr\u003E        float burnDownTime = 0;\u003Cbr\u003E        float[] atmBurnDowntimes = new float[] { 1.0f };\u003Cbr\u003E\u003Cbr\u003E        float counter = 0;\u003Cbr\u003E\u003Cbr\u003E        bool doEngineThrust;\u003Cbr\u003E        bool onlyIVA = true;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        void Start()\u003Cbr\u003E        {\u003Cbr\u003E            vessel = FlightGlobals.ActiveVessel;\u003Cbr\u003E            if (vessel == null || !HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                return;\u003Cbr\u003E\u003Cbr\u003E            smallRattlesSet = createGroup(smallRattlesGroup, vessel, small_rattles, true, true);\u003Cbr\u003E            bigRattlesSet = createGroup(bigRattlesGroup, vessel, big_rattles, true, true);\u003Cbr\u003E            rumbleSet = createGroup(rumbleGroup, vessel, rumble, true, true);\u003Cbr\u003E            vibrationsSet = createGroup(vibrationsGroup, vessel, vibrations, true, true);\u003Cbr\u003E            stressBigSet = createGroup(stressBigGroup, vessel, stress_big, true, true);\u003Cbr\u003E            atmosphereSet = createGroup(atmosphereGroup, vessel, atmos_normal, true, true);\u003Cbr\u003E\u003Cbr\u003E            thumpLowSet = createGroup(thumpLowGroup, vessel, thumpLowSound, false, false);\u003Cbr\u003E            thumpHeavySet = createGroup(thumpHeavyGroup, vessel, thumpHeavySound, false, false);\u003Cbr\u003E\u003Cbr\u003E            dockedSet = createGroup(dockedGroup, vessel, dockedClip, false, true);\u003Cbr\u003E            undockedSet = createGroup(undockedGroup, vessel, undockedClip, false, true);\u003Cbr\u003E\u003Cbr\u003E            LoadSettings();\u003Cbr\u003E\u003Cbr\u003E            GameEvents.onPartCouple.Add(this.onVesselDock);\u003Cbr\u003E            GameEvents.onPartUndock.Add(this.onVesselUndock);\u003Cbr\u003E\u003Cbr\u003E            GameEvents.onGamePause.Add(this.onGamePaused);\u003Cbr\u003E            GameEvents.onGameUnpause.Add(this.onGameUnpaused);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        void LoadSettings()\u003Cbr\u003E        {\u003Cbr\u003E            foreach (ConfigNode node in GameDatabase.Instance.GetConfigNodes(\u0022SHIPEFFECTS_SETTINGS\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                if (node.HasValue(\u0022OnlyInIVA\u0022))\u003Cbr\u003E                    bool.TryParse(node.GetValue(\u0022OnlyInIVA\u0022), out onlyIVA);\u003Cbr\u003E\u003Cbr\u003E                if (node.HasValue(\u0022masterVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022masterVolume\u0022), out masterVolume);\u003Cbr\u003E                if (node.HasValue(\u0022rattleVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022rattleVolume\u0022), out rVolCtrl);\u003Cbr\u003E                if (node.HasValue(\u0022vibrationVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022vibrationVolume\u0022), out vVolCtrl);\u003Cbr\u003E                if (node.HasValue(\u0022rumbleVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022rumbleVolume\u0022), out rmVolCtrl);\u003Cbr\u003E                if (node.HasValue(\u0022thumpVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022thumpVolume\u0022), out tVolCtrl);\u003Cbr\u003E                if (node.HasValue(\u0022stressVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022stressVolume\u0022), out sVolCtrl);\u003Cbr\u003E                if (node.HasValue(\u0022atmosphereVolume\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022atmosphereVolume\u0022), out aVolCtrl);\u003Cbr\u003E\u003Cbr\u003E                if (node.HasValue(\u0022ResistMultiplier\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022ResistMultiplier\u0022), out resistMultiplier);\u003Cbr\u003E                if (node.HasValue(\u0022ReEntryMultiplier\u0022))\u003Cbr\u003E                    float.TryParse(node.GetValue(\u0022ReEntryMultiplier\u0022), out reEntryMultiplier);\u003Cbr\u003E\u003Cbr\u003E                Debug.Log(\u0022ShipEffects Volume Settings loaded\u0022);\u003Cbr\u003E                break;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public bool createGroup(FXGroup group, Vessel vessel, string clip, bool loop, bool fxBypass)\u003Cbr\u003E        {\u003Cbr\u003E            group.audio = vessel.gameObject.AddComponent\u0026lt;AudioSource\u0026gt;();\u003Cbr\u003E            group.audio.clip = GameDatabase.Instance.GetAudioClip(clip);\u003Cbr\u003E            group.audio.Stop();\u003Cbr\u003E            group.audio.loop = loop;\u003Cbr\u003E            group.audio.rolloffMode = AudioRolloffMode.Logarithmic;\u003Cbr\u003E            group.audio.playOnAwake = false;\u003Cbr\u003E            group.audio.maxDistance = 100f;\u003Cbr\u003E            group.audio.panLevel = 1f;\u003Cbr\u003E            group.audio.dopplerLevel = 0f;\u003Cbr\u003E\u003Cbr\u003E            group.audio.bypassEffects = fxBypass;\u003Cbr\u003E\u003Cbr\u003E            Debug.Log(\u0022ShipEffects: \u0022 \u002B group.name \u002B \u0022 is Created\u0022);\u003Cbr\u003E\u003Cbr\u003E            return true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        void SoundFX(FXGroup fx, float volume, float volCtrl, float spread, bool play)\u003Cbr\u003E        {\u003Cbr\u003E            if (!gamePaused \u0026amp;\u0026amp; !fx.audio.isPlaying \u0026amp;\u0026amp; play == true)\u003Cbr\u003E            {\u003Cbr\u003E                fx.audio.Play();\u003Cbr\u003E                fx.audio.volume = (Mathf.Clamp(volume, 0, 1f) * volCtrl) * masterVolume;\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                fx.audio.volume = Mathf.Clamp(volume, 0, 1f);\u003Cbr\u003E            }\u003Cbr\u003E            if (play == false)\u003Cbr\u003E            {\u003Cbr\u003E                fx.audio.Stop();\u003Cbr\u003E            }\u003Cbr\u003E            fx.audio.spread = spread;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        void SoundFX(FXGroup fx, bool play)\u003Cbr\u003E        {\u003Cbr\u003E            SoundFX(fx, 0, 0, 0, play);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        float dockTime = 0;\u003Cbr\u003E        float[] dockTimes = new float[] { 0.25f };\u003Cbr\u003E        bool ifUndocking = false;\u003Cbr\u003E        public void onVesselDock(GameEvents.FromToAction\u0026lt;Part, Part\u0026gt; action)\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E            dockTime = dockTimes[0];\u003Cbr\u003E            ifUndocking = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void onVesselUndock(Part action)\u003Cbr\u003E        {\u003Cbr\u003E            dockTime = dockTimes[0];\u003Cbr\u003E            ifUndocking = true;\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        void Update()\u003Cbr\u003E        {\u003Cbr\u003E            vessel = FlightGlobals.ActiveVessel;\u003Cbr\u003E\u003Cbr\u003E            if (vessel == null || vessel.isEVA || !HighLogic.LoadedSceneIsFlight)\u003Cbr\u003E                return;\u003Cbr\u003E\u003Cbr\u003E            //grab the data we need\u003Cbr\u003E            surfSpeed = (float)vessel.srfSpeed;\u003Cbr\u003E            atmDensity = (float)vessel.atmDensity;\u003Cbr\u003E            vesselMass = vessel.GetTotalMass();\u003Cbr\u003E            vesselRot = (float)Math.Sqrt(Math.Pow(vessel.angularVelocity.x, 2) \u002B Math.Pow(vessel.angularVelocity.y, 2) \u002B Math.Pow(vessel.angularVelocity.z, 2));\u003Cbr\u003E            vesselAcceleration = (float)Math.Sqrt(Math.Pow(vessel.acceleration.x, 2) \u002B Math.Pow(vessel.acceleration.y, 2) \u002B Math.Pow(vessel.acceleration.z, 2)) * 0.1f;\u003Cbr\u003E            vResist = (atmDensity * surfSpeed * 0.01f) * vesselAcceleration;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            if (aeroFx == null)\u003Cbr\u003E            {\u003Cbr\u003E                GameObject fx = GameObject.Find(\u0022FXLogic\u0022);\u003Cbr\u003E                if (fx != null)\u003Cbr\u003E                {\u003Cbr\u003E                    aeroFx = fx.GetComponent\u0026lt;AerodynamicsFX\u0026gt;();\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if ((aeroFx != null) \u0026amp;\u0026amp; (aeroFx.FxScalar \u0026gt; 0.01))\u003Cbr\u003E            {\u003Cbr\u003E                if (aeroFx.fxLight.color.b \u0026lt; 0.12f)\u003Cbr\u003E                {\u003Cbr\u003E\u003Cbr\u003E                    burnDownTime = atmBurnDowntimes[0];\u003Cbr\u003E\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                if (aeroFx.fxLight.color.b \u0026gt; 0.20f)\u003Cbr\u003E                {\u003Cbr\u003E\u003Cbr\u003E                    if (aeroFx.FxScalar \u0026gt; 0.1)\u003Cbr\u003E                        vResist \u002B= (aeroFx.FxScalar * 2);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (burnDownTime \u0026gt; 0)\u003Cbr\u003E            {\u003Cbr\u003E                vResist \u002B= (aeroFx.FxScalar * burnDownTime * reEntryMultiplier);\u003Cbr\u003E\u003Cbr\u003E                burnDownTime -= Time.deltaTime;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            //thickeratmosphericsound in thicker atmospheres\u003Cbr\u003E            if (atmDensity \u0026gt; 0)\u003Cbr\u003E            {\u003Cbr\u003E                float airPressure = 1f / atmDensity;\u003Cbr\u003E                atmosphereGroup.audio.pitch = Mathf.Clamp(airPressure, 0, 1.5f);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            foreach (Part part in vessel.parts)\u003Cbr\u003E            {\u003Cbr\u003E                foreach (PartModule module in part.Modules)\u003Cbr\u003E                {\u003Cbr\u003E                    if (module.moduleName.Contains(\u0022ModuleEnginesFX\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        ModuleEnginesFX e = module as ModuleEnginesFX;\u003Cbr\u003E                        if (e.isOperational)\u003Cbr\u003E                        {\u003Cbr\u003E\u003Cbr\u003E                            engineThrust \u002B= (e.finalThrust);\u003Cbr\u003E                        }\u003Cbr\u003E                        if (engineThrust \u0026gt; 0)\u003Cbr\u003E                            doEngineThrust = true;\u003Cbr\u003E                    }\u003Cbr\u003E                    else if (module.moduleName.Contains(\u0022ModuleEngine\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        ModuleEngines e = module as ModuleEngines;\u003Cbr\u003E                        if (e.isOperational)\u003Cbr\u003E                        {\u003Cbr\u003E\u003Cbr\u003E                            engineThrust \u002B= (e.finalThrust);\u003Cbr\u003E                        }\u003Cbr\u003E\u003Cbr\u003E                        if (engineThrust \u0026gt; 0)\u003Cbr\u003E                            doEngineThrust = true;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (engineThrust \u0026gt; 0 \u0026amp;\u0026amp; doEngineThrust == true)\u003Cbr\u003E            {\u003Cbr\u003E                engineMicro = engineThrust / 1000f;\u003Cbr\u003E                engineAccel = Mathf.Abs(((engineThrust / vesselMass) * 0.1f) - vesselAcceleration) \u002B engineMicro;\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E            else if (engineThrust \u0026lt;= 0)\u003Cbr\u003E            {\u003Cbr\u003E                doEngineThrust = false;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            vResist \u002B= engineAccel;\u003Cbr\u003E\u003Cbr\u003E            vResist *= resistMultiplier;\u003Cbr\u003E\u003Cbr\u003E            bool isCrewed = false;\u003Cbr\u003E\u003Cbr\u003E            foreach (Part part in vessel.parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (part.protoModuleCrew.Count \u0026gt;= 1)\u003Cbr\u003E                {\u003Cbr\u003E                    isCrewed = true;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (!gamePaused)\u003Cbr\u003E            {\u003Cbr\u003E\u003Cbr\u003E                if (isCrewed \u0026amp;\u0026amp; !MapView.MapIsEnabled \u0026amp;\u0026amp; (onlyIVA == false || InternalCamera.Instance.isActive))\u003Cbr\u003E                {\u003Cbr\u003E                    //wind and pressure?\u003Cbr\u003E                    if (surfSpeed \u0026gt; 10 || vesselRot \u0026gt; 1.5f)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(atmosphereGroup, ((atmDensity * surfSpeed - 10f) / 80f) \u002B ((vesselRot - 1.5f) / 7.0f * atmDensity), aVolCtrl, 90f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(atmosphereGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    //dynamics\u003Cbr\u003E                    if (vResist \u0026gt; 0.5)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(smallRattlesGroup, (vResist - 0.5f) / 4f, rVolCtrl, 90f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(smallRattlesGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E                    if (vResist \u0026gt; 0.8 || vesselRot \u0026gt; 1.5f)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(vibrationsGroup, ((vResist - 0.8f) / 2f) \u002B ((vesselRot - 1.5f) / 6f), vVolCtrl, 35f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(vibrationsGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E                    if (vResist \u0026gt; 1 || vesselRot \u0026gt; 2.0f)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(rumbleGroup, ((vResist - 1f) / 2f) \u002B ((vesselRot - 2.0f) / 6f), rmVolCtrl, 180f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(rumbleGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E                    if (vResist \u0026gt; 4.0)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(bigRattlesGroup, (vResist - 5f) / 4f, rVolCtrl, 90f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(bigRattlesGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E                    if (vResist \u0026gt; 8.0)\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(stressBigGroup, (vResist - 6f) / 6f, sVolCtrl, 90f, true);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        SoundFX(stressBigGroup, false);\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    if (dockTime \u0026gt; 0)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (ifUndocking)\u003Cbr\u003E                            SoundFX(undockedGroup, 1f, 1f, 45f, true);\u003Cbr\u003E                        if (!ifUndocking)\u003Cbr\u003E                            SoundFX(dockedGroup, 1f, 1f, 45f, true);\u003Cbr\u003E\u003Cbr\u003E                        dockTime -= Time.deltaTime;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    if (vResist \u0026gt; 1.8)\u003Cbr\u003E                    {\u003Cbr\u003E                        counter \u002B= Time.deltaTime;\u003Cbr\u003E                        if (counter \u0026gt; 0.26f)\u003Cbr\u003E                            counter = 1;\u003Cbr\u003E                        if (counter \u0026lt; 0.25f)\u003Cbr\u003E                        {\u003Cbr\u003E                            if (vResist \u0026gt; 2.0f \u0026amp;\u0026amp; vResist \u0026lt; 5.0)\u003Cbr\u003E                            {\u003Cbr\u003E                                SoundFX(thumpLowGroup, (vResist - 2.0f) / 3f, tVolCtrl, 180f, true);\u003Cbr\u003E                            }\u003Cbr\u003E                            if (vResist \u0026gt; 4.0f \u0026amp;\u0026amp; vResist \u0026lt; 8.0)\u003Cbr\u003E                            {\u003Cbr\u003E                                SoundFX(thumpHeavyGroup, (vResist - 4.0f) / 4f, tVolCtrl, 180f, true);\u003Cbr\u003E                            }\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        counter = 0;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    SoundFX(atmosphereGroup, false);\u003Cbr\u003E                    SoundFX(smallRattlesGroup, false);\u003Cbr\u003E                    SoundFX(vibrationsGroup, false);\u003Cbr\u003E                    SoundFX(bigRattlesGroup, false);\u003Cbr\u003E                    SoundFX(rumbleGroup, false);\u003Cbr\u003E                    SoundFX(stressBigGroup, false);\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                SoundFX(atmosphereGroup, false);\u003Cbr\u003E                SoundFX(smallRattlesGroup, false);\u003Cbr\u003E                SoundFX(vibrationsGroup, false);\u003Cbr\u003E                SoundFX(bigRattlesGroup, false);\u003Cbr\u003E                SoundFX(rumbleGroup, false);\u003Cbr\u003E                SoundFX(stressBigGroup, false);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            engineMicro = 0;\u003Cbr\u003E            engineThrust = 0;\u003Cbr\u003E            engineAccel = 0;\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void onGamePaused()\u003Cbr\u003E        {\u003Cbr\u003E            gamePaused = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void onGameUnpaused()\u003Cbr\u003E        {\u003Cbr\u003E            gamePaused = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void OnDestroy()\u003Cbr\u003E        {\u003Cbr\u003E            GameEvents.onGamePause.Remove(new EventVoid.OnEvent(onGamePaused));\u003Cbr\u003E            GameEvents.onGameUnpause.Remove(new EventVoid.OnEvent(onGameUnpaused));\u003Cbr\u003E            GameEvents.onPartCouple.Remove(this.onVesselDock);\u003Cbr\u003E            GameEvents.onPartUndock.Remove(this.onVesselUndock);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EOh and for legal reasons... The source code is the intellectual property of \u003C/span\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/members/143826-ensouensou\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003Eensouensou\u003C/span\u003E\u003C/a\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003E licensed under a \u003C/span\u003E\u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/4.0/\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003ECC BY-NC-SA 4.0\u003C/span\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-23T02:40:00Z\u0022 title=\u002208/23/2015 02:40  AM\u0022 data-short=\u00228 yr\u0022\u003EAugust 23, 2015\u003C/time\u003E by CoriW\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-23T02:42:26Z","Content":"\n\u003Cp\u003EWhile it\u0027s not certain, I would look at this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evoid SoundFX(FXGroup fx, float volume, float volCtrl, float spread, bool play)\u003Cbr\u003E        {\u003Cbr\u003E            if (!gamePaused \u0026amp;\u0026amp; !fx.audio.isPlaying \u0026amp;\u0026amp; play == true)\u003Cbr\u003E            {\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESpecifically the !fx.audio.isPlaying check.\u003C/p\u003E\u003Cp\u003EThis is from the error line of UnityEngine.AudioSource:get_isPlaying().\u003C/p\u003E\u003Cp\u003EMy assumption is that somehow the fx.audio object does not exist, therefore when the mod tries to see if fx.audio is playing, it can\u0027t find the fx.audio object and throws a nullRef.\u003C/p\u003E\u003Cp\u003EYou can prove this by adding a Debug.Log(\u00221\u0022); line just before and Debug.Log(\u00222\u0022); line after.\u003C/p\u003E\u003Cp\u003EIf it is in fact that line, there will be a 1 in the log just before the null ref error and the 2 will not log.\u003C/p\u003E\u003Cp\u003EIf the 1 does not log the error is earlier, if the 2 does log, the error is later in the code.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"CoriW","CreatedById":57866,"CreatedDateTime":"2015-08-23T03:06:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EWhile it\u0027s not certain, I would look at this:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evoid SoundFX(FXGroup fx, float volume, float volCtrl, float spread, bool play)\u003Cbr\u003E        {\u003Cbr\u003E            if (!gamePaused \u0026amp;\u0026amp; !fx.audio.isPlaying \u0026amp;\u0026amp; play == true)\u003Cbr\u003E            {\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESpecifically the !fx.audio.isPlaying check.\u003C/p\u003E\u003Cp\u003EThis is from the error line of UnityEngine.AudioSource:get_isPlaying().\u003C/p\u003E\u003Cp\u003EMy assumption is that somehow the fx.audio object does not exist, therefore when the mod tries to see if fx.audio is playing, it can\u0027t find the fx.audio object and throws a nullRef.\u003C/p\u003E\u003Cp\u003EYou can prove this by adding a Debug.Log(\u00221\u0022); line just before and Debug.Log(\u00222\u0022); line after.\u003C/p\u003E\u003Cp\u003EIf it is in fact that line, there will be a 1 in the log just before the null ref error and the 2 will not log.\u003C/p\u003E\u003Cp\u003EIf the 1 does not log the error is earlier, if the 2 does log, the error is later in the code.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHey Diazo, thanks for the reply.\u003C/p\u003E\u003Cp\u003EThe biggest problem that I\u0027m having right now is that I can\u0027t debug it properly because I can\u0027t get it to throw the NullRef, I even tried something similar with Debug.Log to what you suggested before I came here for help, and just tried exactly what you suggested a few times before posting this. As I said in the OP the NullRef seems to be very hard to replicate. It seems to be exceedingly rare to happen and I can\u0027t figure out why it happens because I\u0027ve been doing the same thing that caused it to happen the first time and it simply won\u0027t happen for me again. Meanwhile in the ShipEffects thread \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/members/113781-Enceos\u0022 rel=\u0022external nofollow\u0022\u003EEnceos\u003C/a\u003E claims to get the NullRef frequently, where as I\u0027ve only been able to get it once in a number of hours.\u003C/p\u003E\u003Cp\u003EThat being said I\u0027m stuck between a rock and a hard place, I can\u0027t properly debug due to not being able to trigger the NullRef, even though I know the block of code that causes it... It\u0027s actually quite frustrating. Would you by chance have any idea\u0027s on how to fix something without being able to properly debug it as mentioned above?\u003C/p\u003E\u003Cp\u003EAlso too I\u0027m not sure that this would be related to my problem but I\u0027ve noticed that the original .dll is 24kb whereas every time I re-compile it, it comes out to be only 14kb while maintaining it\u0027s functionality...\u003C/p\u003E\u003Cp\u003EEDIT: \u003Cstrong\u003EI just made a big step in the right direction\u003C/strong\u003E. So I decided that I was getting nowhere and to start from scratch and thus I went back to the original .dll, and after some experimenting and tinkering I was able to find a way to reliably replicate the NullRef! Now what I\u0027m going to do it re-compile it again and try what I did to replicate it, because I now have a sneaking suspicion that the reason I couldn\u0027t replicate it before was simply because the old .dll was compiled for 0.90.0 where as mile is compiled for 1.0.4... If that\u0027s what is really going on here then the solution to update the mod is as simple as a re-compile! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT: Alright... So it wasn\u0027t as simple as a re-compile, however I still have found a way to reliably re-produce the NullRef, and so now I can actually finally pinpoint the problem.\u003C/p\u003E\u003Cp\u003EEDIT: Okay so I finally have a definitive answer to the cause of the NullRef. @Diazo you were completely right, for some reason the fx.audio object does not exist when the mod tried to access it, now that I know that for sure all I have to do is code a solution.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-08-23T03:45:47Z\u0022 title=\u002208/23/2015 03:45  AM\u0022 data-short=\u00228 yr\u0022\u003EAugust 23, 2015\u003C/time\u003E by CoriW\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-08-23T03:53:41Z","Content":"\n\u003Cp\u003EYou need to be able to reproduce the error in order to fix it. :/\u003C/p\u003E\u003Cp\u003EIn order to narrow it down, I would compile a version of the .dll that spammed Debug.Log\u0027s all over the place so Enceos can generate a log for you.\u003C/p\u003E\u003Cp\u003EThere\u0027s always a reason things behave differently, you just have to find it.\u003C/p\u003E\u003Cp\u003EIn this case, I would add Debug.Logs in the Start() method making sure the effects loaded correctly and the Debug.Logs in the SoundFX methods to narrow down exactly which line of code is throwing the nullRef.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"CoriW","CreatedById":57866,"CreatedDateTime":"2015-08-23T04:27:30Z","Content":"\n\u003Cp\u003EWell... It took a lot of frustration but once I finally figured out how to replicate the problem I was able to very quickly find a solution. I now officially have the mod in a state in which it appears to be fully and completely functional in KSP 1.0.4! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EBasically what was happening was that the fx.audio object was being removed for some reason which was throwing the NullRef, and my solution was to simply add a check to the part of the code that accessed the fx.audio object in order to check if it was null or not before trying to access it. However it didn\u0027t end there because after the fx.audio object was removed, while it wouldn\u0027t throw NullRef\u0027s anymore, the mod would stop functioning completely, so I had to add an else that said if fx.audio was null, to then re-create the fx.audio object so that the rest of the code could continue functioning normally.\u003C/p\u003E\n"}]}