{"TopicId":73894,"ForumId":29,"TopicTitle":"Reworking the sfr Command Pod plugin","CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-02T05:38:33Z","PageNum":1,"Articles":[{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-02T05:38:33Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EPremise\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Esfr\u0027s Command Pod plugin allows Kerbal occupants inside a properly-configured command pod to be visible from outside the vessel (essentially, see-through windows from the outside). While the add-on still works in 0.23.5 for the most part, there are a number of outstanding issues:\u003C/p\u003E\u003Cp\u003E - The camera for the internal IVA view is dependent on the orientation of the root (first) part of a vessel, rather than that of the command pod / crew cabin itself\u003C/p\u003E\u003Cp\u003E - A vessel with more than one sfr-powered command pod / crew cabin will end up aligning the internal IVA view to the root part / first sfr-powered command pod / crew cabin defined\u003C/p\u003E\u003Cp\u003E - It is not clear whether the plugin is restricted to actual command pods, or if crew cabins with no command authority are also able to use this plugin\u003C/p\u003E\u003Cp\u003E - sfr only visits the forums occasionally, such that plugin maintenance issues are slow to be addressed (his only method of distribution is also the now-defunct Spaceport)\u003C/p\u003E\u003Cp\u003E - Some add-ons, such as Alskari\u0027s Hollow Structure and Hulls and BobCat Industries\u0027 Tesla Recon Rover, have the sfr plugin as a dependency, yet suffer from the aforementioned issues.\u003C/p\u003E\u003Cp\u003EFinally, I personally would like to make this as a dependency FusTek Station Parts / upcoming FusTek Space Exploration Vehicle part packs, but the current version of the plugin as-is is unsuitable due to the aforementioned issues.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EObjective\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EMy primary objective is to rework the plugin to address the aforementioned issues, and publish it via more publicly-available channels such as CurseForge, Dropbox or MediaFire.\u003C/p\u003E\u003Cp\u003EMy secondary objective is to seek a new, permanent home of the plugin code, preferably with a popular dependency such as Firespitter - I personally prefer to spend most of my time making new parts than wrestling code, hence the intention for the handover.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ELicencing / Permissions\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Esfr\u0027s source code file states that his work is licenced under CC BY-SA 3.0, and so as long as the derivative provides full credit to sfr, and is redistributed under the same license, it should be kosher. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/*\u003Cbr\u003E * sfr\u003Cbr\u003E * License: BY: Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0): http://creativecommons.org/licenses/by-sa/3.0/\u003Cbr\u003E */\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Chr\u003E\u003Cp\u003E\u003Cstrong\u003EHelp Needed\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EGiven the following source code, I would like to:\u003C/p\u003E\u003Cp\u003E - Strip out the portions pertaining to the hatch animation, as it is unnecessary IMHO\u003C/p\u003E\u003Cp\u003E - Figure out how to change the IVA camera to align with the module\u0027s own transform, instead of the root part\u003C/p\u003E\u003Cp\u003E - Ensure that multiple sfr-powered pods / cabins can work simultaneously, each with their own independent IVA camera transforms\u003C/p\u003E\u003Cp\u003E - Ensure that the plugin can also work for non-command pod crewed cabins, such as my FusTek Kupola and various non-command pod compartments Alskari made for HSH\u003C/p\u003E\u003Cp\u003EHere\u0027s the full source code as originally included in the Spaceport download:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/*\u003Cbr\u003E * sfr\u003Cbr\u003E * License: BY: Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0): http://creativecommons.org/licenses/by-sa/3.0/\u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace sfrPartModules1\u003Cbr\u003E{\u003Cbr\u003E    class sfrUtility\u003Cbr\u003E    {\u003Cbr\u003E        public static Camera FindCamera(string name)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (Camera c in Camera.allCameras)\u003Cbr\u003E                if (c.name == name)\u003Cbr\u003E                    return c;\u003Cbr\u003E            return null;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void LogCameras()\u003Cbr\u003E        {\u003Cbr\u003E            int i = 0;\u003Cbr\u003E            foreach (Camera c in Camera.allCameras)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Cam \u0022 \u002B i\u002B\u002B \u002B \u0022 \u0022 \u002B c.name \u002B \u0022 \u0022 \u002B c.cullingMask);\u003Cbr\u003E                Debug.Log(c.transform.position \u002B \u0022 \u0022 \u002B c.transform.rotation.eulerAngles \u002B \u0022 \u0022 \u002B c.fov \u002B \u0022 \u0022 \u002B c.depth \u002B \u0022 \u0022 \u002B c.clearFlags);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void LogModules(Part part)\u003Cbr\u003E        {\u003Cbr\u003E            int i = 0;\u003Cbr\u003E            foreach (PartModule p in part.Modules)\u003Cbr\u003E                Debug.Log(\u0022Mod \u0022 \u002B i\u002B\u002B \u002B \u0022 \u0022 \u002B p.name \u002B \u0022 \u0022 \u002B p.GUIName \u002B \u0022 \u0022 \u002B p.guiText);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public class sfrCommandPod : CommandPod\u003Cbr\u003E    {\u003Cbr\u003E        public string doorTransformName;\u003Cbr\u003E        public float openAngle = 45f;\u003Cbr\u003E        Transform doorTransform;\u003Cbr\u003E\u003Cbr\u003E        Shader glassShader, metalShader, diffuseShader;\u003Cbr\u003E\u003Cbr\u003E        void AddShader(string transformName, Shader s)\u003Cbr\u003E        {\u003Cbr\u003E            Transform t = FindModelTransform(transformName);\u003Cbr\u003E            t.renderer.material.shader = s;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        int CrewNumber = 0;\u003Cbr\u003E        bool DoorOpen = false;\u003Cbr\u003E\u003Cbr\u003E         int CrewBoarding()\u003Cbr\u003E         {\u003Cbr\u003E             int Result = 0;\u003Cbr\u003E\u003Cbr\u003E            if (CrewNumber \u0026lt; protoModuleCrew.Count)\u003Cbr\u003E                Result = 1;\u003Cbr\u003E             else if (CrewNumber \u0026gt; protoModuleCrew.Count)\u003Cbr\u003E                Result = -1;\u003Cbr\u003E             else if (CrewNumber == protoModuleCrew.Count)\u003Cbr\u003E                 Result = 0;\u003Cbr\u003E\u003Cbr\u003E             CrewNumber = protoModuleCrew.Count;\u003Cbr\u003E             return Result;\u003Cbr\u003E         }\u003Cbr\u003E\u003Cbr\u003E         IEnumerator\u0026lt;WaitForSeconds\u0026gt; OpenDoor()\u003Cbr\u003E         {\u003Cbr\u003E             if (!DoorOpen)\u003Cbr\u003E                 doorTransform.Rotate(0, 0, openAngle, Space.Self);\u003Cbr\u003E             yield return new WaitForSeconds(2);\u003Cbr\u003E //            Debug.Log(\u0022Crew member on board\u0022);\u003Cbr\u003E             doorTransform.Rotate(0, 0, -openAngle, Space.Self);\u003Cbr\u003E         }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartAwake()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartAwake \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartAwake();\u003Cbr\u003E\u003Cbr\u003E            metalShader = Shader.Find(\u0022Specular\u0022);\u003Cbr\u003E            glassShader = Shader.Find(\u0022Transparent/Specular\u0022);\u003Cbr\u003E            diffuseShader = Shader.Find(\u0022Diffuse\u0022);\u003Cbr\u003E\u003Cbr\u003E            AddShader(\u0022Pod\u0022, metalShader);\u003Cbr\u003E            AddShader(\u0022DoorAxle\u0022, metalShader);\u003Cbr\u003E            AddShader(\u0022Hatch\u0022, metalShader);\u003Cbr\u003E            AddShader(\u0022WindGlass\u0022, glassShader);\u003Cbr\u003E            AddShader(\u0022SideGlass\u0022, glassShader);\u003Cbr\u003E            AddShader(\u0022UpGlass\u0022, glassShader);\u003Cbr\u003E\u003Cbr\u003E            Transform t = FindModelTransform(\u0022DoorLight\u0022);\u003Cbr\u003E            Light l = t.GetComponent\u0026lt;Light\u0026gt;();\u003Cbr\u003E            l.shadows = LightShadows.Soft;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartStart()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartStart \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartStart();\u003Cbr\u003E\u003Cbr\u003E            doorTransform = FindModelTransform(doorTransformName);\u003Cbr\u003E//            Debug.Log(doorTransform);\u003Cbr\u003E\u003Cbr\u003E             if (protoModuleCrew.Count == 0)\u003Cbr\u003E            {\u003Cbr\u003E               doorTransform.Rotate(0, 0, openAngle, Space.Self);\u003Cbr\u003E                 DoorOpen = true;\u003Cbr\u003E             }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onStartComplete()\u003Cbr\u003E        {\u003Cbr\u003E            base.onStartComplete();\u003Cbr\u003E//            Debug.LogWarning(\u0022onStartComplete \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onFlightStart()\u003Cbr\u003E        {\u003Cbr\u003E            base.onFlightStart();\u003Cbr\u003E//            Debug.LogWarning(\u0022onFlightStart \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E\u003Cbr\u003E            sfrUtility.LogModules(this);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override bool onPartActivate()\u003Cbr\u003E        {\u003Cbr\u003E            return base.onPartActivate();\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartActivate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartDeactivate()\u003Cbr\u003E        {\u003Cbr\u003E            base.onPartDeactivate();\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartActivate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartUpdate()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022OnPartUpdate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartUpdate();\u003Cbr\u003E\u003Cbr\u003E             int Boarding = CrewBoarding();\u003Cbr\u003E             if (Boarding \u0026gt; 0)\u003Cbr\u003E            {\u003Cbr\u003E//                Debug.Log(\u0022Crew member boarded\u0022);\u003Cbr\u003E                 StartCoroutine(OpenDoor());\u003Cbr\u003E                 DoorOpen = false;\u003Cbr\u003E             }\u003Cbr\u003E            else if (Boarding \u0026lt; 0)\u003Cbr\u003E             {\u003Cbr\u003E                 if (protoModuleCrew.Count == 0)\u003Cbr\u003E                {\u003Cbr\u003E                     doorTransform.Rotate(0, 0, openAngle, Space.Self);\u003Cbr\u003E                     DoorOpen = true;\u003Cbr\u003E                 }\u003Cbr\u003E                 else\u003Cbr\u003E                     StartCoroutine(OpenDoor());\u003Cbr\u003E             }\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onEditorUpdate()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022OnEditorUpdate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onEditorUpdate();\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public class sfrInternal : PartModule\u003Cbr\u003E    {\u003Cbr\u003E\u003Cbr\u003E        Transform kspParent;\u003Cbr\u003E        Vector3 kspPosition = new Vector3(18.3f, -6.9f, 0);\u003Cbr\u003E        Quaternion kspRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E        bool isActive = true;\u003Cbr\u003E\u003Cbr\u003E        public override void OnAwake()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnAwake();\u003Cbr\u003E//            Debug.LogWarning(\u0022sfrInternal OnAwake \u0022 \u002B GameInfo.gameScene \u002B \u0022 \u0022 \u002B part \u002B \u0022 \u0022 \u002B vessel);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E//            Debug.LogWarning(\u0022sfrInternal OnLoad \u0022 \u002B node.name);\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnSave(node);\u003Cbr\u003E//            Debug.LogWarning(\u0022sfrInternal OnSave \u0022 \u002B node.name);\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E//            Debug.LogWarning(\u0022sfrInternal OnStart, StartState: \u0022 \u002B state);\u003Cbr\u003E\u003Cbr\u003E            Camera c = sfrUtility.FindCamera(\u0022Main Camera\u0022);\u003Cbr\u003E            if (c)\u003Cbr\u003E                c.cullingMask |= 1 \u0026lt;\u0026lt; 16 | 1 \u0026lt;\u0026lt; 20;\u003Cbr\u003E\u003Cbr\u003E            if(!part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E                    part.CreateInternalModel();\u003Cbr\u003E                }\u003Cbr\u003E                catch (Exception e)\u003Cbr\u003E                {\u003Cbr\u003E                    Debug.LogException(e, this);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if(part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                if (state != StartState.Editor)\u003Cbr\u003E                    kspParent = part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnUpdate();\u003Cbr\u003E//            Debug.LogWarning(\u0022sfrInternal OnUpdate\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (isActive != part.vessel.isActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E            Camera c = sfrUtility.FindCamera(\u0022Main Camera\u0022);\u003Cbr\u003E            if (c)\u003Cbr\u003E                c.cullingMask |= 1 \u0026lt;\u0026lt; 16 | 1 \u0026lt;\u0026lt; 20;\u003Cbr\u003E\u003Cbr\u003E                part.CreateInternalModel();\u003Cbr\u003E                kspParent = InternalCamera.Instance.transform.parent; // part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.SetVisible(true);\u003Cbr\u003E                part.vessel.SetActiveInternalPart(part);\u003Cbr\u003E\u003Cbr\u003E                if (part.protoModuleCrew.Count \u0026gt; 0 \u0026amp;\u0026amp; isActive)\u003Cbr\u003E                {\u003Cbr\u003E                    part.vessel.SpawnCrew();\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }      \u003Cbr\u003E\u003Cbr\u003E            if(!part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                part.CreateInternalModel();\u003Cbr\u003E                kspParent = InternalCamera.Instance.transform.parent; // part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.SetVisible(true);\u003Cbr\u003E                part.vessel.SetActiveInternalPart(part);\u003Cbr\u003E\u003Cbr\u003E                if (part.protoModuleCrew.Count \u0026gt; 0 \u0026amp;\u0026amp; isActive)\u003Cbr\u003E                {\u003Cbr\u003E                    part.vessel.SpawnCrew();\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                if (sfrUtility.FindCamera(\u0022InternalCamera\u0022))\u003Cbr\u003E                {\u003Cbr\u003E                    if (part.vessel.isActiveVessel)\u003Cbr\u003E                    {\u003Cbr\u003E                        part.internalModel.transform.position = kspPosition; // Vector3.zero;\u003Cbr\u003E                        part.internalModel.transform.parent = kspParent;\u003Cbr\u003E                        part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                    part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                    part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            catch (Exception e)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.LogException(e, this);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd here\u0027s my early attempt at stripping out the hatch animation code and removing the non-glass shaders:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/*\u003Cbr\u003E * TransparentViewports plugin (transView)\u003Cbr\u003E *\u003Cbr\u003E * Author:        Robin \u0022sumghai\u0022 Chang\u003Cbr\u003E *                and members of the Kerbal Space Program user community\u003Cbr\u003E * \u003Cbr\u003E * Based on:    sfr Command Pod plugin by sfr\u003Cbr\u003E *\u003Cbr\u003E * License:        Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)\u003Cbr\u003E *                 http://www.creativecommons.org/licenses/by-sa/3.0/\u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Enamespace transViewPartModules1\u003Cbr\u003E{\u003Cbr\u003E    class transViewUtility\u003Cbr\u003E    {\u003Cbr\u003E        public static Camera FindCamera(string name)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (Camera c in Camera.allCameras)\u003Cbr\u003E                if (c.name == name)\u003Cbr\u003E                    return c;\u003Cbr\u003E            return null;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void LogCameras()\u003Cbr\u003E        {\u003Cbr\u003E            int i = 0;\u003Cbr\u003E            foreach (Camera c in Camera.allCameras)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.Log(\u0022Cam \u0022 \u002B i\u002B\u002B \u002B \u0022 \u0022 \u002B c.name \u002B \u0022 \u0022 \u002B c.cullingMask);\u003Cbr\u003E                Debug.Log(c.transform.position \u002B \u0022 \u0022 \u002B c.transform.rotation.eulerAngles \u002B \u0022 \u0022 \u002B c.fov \u002B \u0022 \u0022 \u002B c.depth \u002B \u0022 \u0022 \u002B c.clearFlags);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void LogModules(Part part)\u003Cbr\u003E        {\u003Cbr\u003E            int i = 0;\u003Cbr\u003E            foreach (PartModule p in part.Modules)\u003Cbr\u003E                Debug.Log(\u0022Mod \u0022 \u002B i\u002B\u002B \u002B \u0022 \u0022 \u002B p.name \u002B \u0022 \u0022 \u002B p.GUIName \u002B \u0022 \u0022 \u002B p.guiText);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public class transViewCommandPod : CommandPod\u003Cbr\u003E    {\u003Cbr\u003E        Shader glassShader, metalShader, diffuseShader;\u003Cbr\u003E\u003Cbr\u003E        void AddShader(string transformName, Shader s)\u003Cbr\u003E        {\u003Cbr\u003E            Transform t = FindModelTransform(transformName);\u003Cbr\u003E            t.renderer.material.shader = s;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartAwake()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartAwake \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartAwake();\u003Cbr\u003E\u003Cbr\u003E            //metalShader = Shader.Find(\u0022Specular\u0022);\u003Cbr\u003E            glassShader = Shader.Find(\u0022Transparent/Specular\u0022);\u003Cbr\u003E            //diffuseShader = Shader.Find(\u0022Diffuse\u0022);\u003Cbr\u003E\u003Cbr\u003E            //AddShader(\u0022Pod\u0022, metalShader);\u003Cbr\u003E            //AddShader(\u0022DoorAxle\u0022, metalShader);\u003Cbr\u003E            //AddShader(\u0022Hatch\u0022, metalShader);\u003Cbr\u003E            AddShader(\u0022WindGlass\u0022, glassShader);\u003Cbr\u003E            AddShader(\u0022SideGlass\u0022, glassShader);\u003Cbr\u003E            AddShader(\u0022UpGlass\u0022, glassShader);\u003Cbr\u003E\u003Cbr\u003E            //Transform t = FindModelTransform(\u0022DoorLight\u0022);\u003Cbr\u003E            //Light l = t.GetComponent\u0026lt;Light\u0026gt;();\u003Cbr\u003E            //l.shadows = LightShadows.Soft;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartStart()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartStart \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartStart();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onStartComplete()\u003Cbr\u003E        {\u003Cbr\u003E            base.onStartComplete();\u003Cbr\u003E//            Debug.LogWarning(\u0022onStartComplete \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onFlightStart()\u003Cbr\u003E        {\u003Cbr\u003E            base.onFlightStart();\u003Cbr\u003E//            Debug.LogWarning(\u0022onFlightStart \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E\u003Cbr\u003E            transViewUtility.LogModules(this);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override bool onPartActivate()\u003Cbr\u003E        {\u003Cbr\u003E            return base.onPartActivate();\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartActivate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartDeactivate()\u003Cbr\u003E        {\u003Cbr\u003E            base.onPartDeactivate();\u003Cbr\u003E//            Debug.LogWarning(\u0022onPartActivate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onPartUpdate()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022OnPartUpdate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onPartUpdate();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        protected override void onEditorUpdate()\u003Cbr\u003E        {\u003Cbr\u003E//            Debug.LogWarning(\u0022OnEditorUpdate \u0022 \u002B GameInfo.gameScene);\u003Cbr\u003E            base.onEditorUpdate();\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public class transViewInternal : PartModule\u003Cbr\u003E    {\u003Cbr\u003E\u003Cbr\u003E        Transform kspParent;\u003Cbr\u003E        Vector3 kspPosition = new Vector3(18.3f, -6.9f, 0);\u003Cbr\u003E        Quaternion kspRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E        bool isActive = true;\u003Cbr\u003E\u003Cbr\u003E        public override void OnAwake()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnAwake();\u003Cbr\u003E//            Debug.LogWarning(\u0022transViewInternal OnAwake \u0022 \u002B GameInfo.gameScene \u002B \u0022 \u0022 \u002B part \u002B \u0022 \u0022 \u002B vessel);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E//            Debug.LogWarning(\u0022transViewInternal OnLoad \u0022 \u002B node.name);\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnSave(node);\u003Cbr\u003E//            Debug.LogWarning(\u0022transViewInternal OnSave \u0022 \u002B node.name);\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E//            Debug.LogWarning(\u0022transViewInternal OnStart, StartState: \u0022 \u002B state);\u003Cbr\u003E\u003Cbr\u003E            Camera c = transViewUtility.FindCamera(\u0022Main Camera\u0022);\u003Cbr\u003E            if (c)\u003Cbr\u003E                c.cullingMask |= 1 \u0026lt;\u0026lt; 16 | 1 \u0026lt;\u0026lt; 20;\u003Cbr\u003E\u003Cbr\u003E            if(!part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E                    part.CreateInternalModel();\u003Cbr\u003E                }\u003Cbr\u003E                catch (Exception e)\u003Cbr\u003E                {\u003Cbr\u003E                    Debug.LogException(e, this);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if(part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                if (state != StartState.Editor)\u003Cbr\u003E                    kspParent = part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnUpdate();\u003Cbr\u003E//            Debug.LogWarning(\u0022transViewInternal OnUpdate\u0022);\u003Cbr\u003E\u003Cbr\u003E            if (isActive != part.vessel.isActiveVessel)\u003Cbr\u003E            {\u003Cbr\u003E            Camera c = transViewUtility.FindCamera(\u0022Main Camera\u0022);\u003Cbr\u003E            if (c)\u003Cbr\u003E                c.cullingMask |= 1 \u0026lt;\u0026lt; 16 | 1 \u0026lt;\u0026lt; 20;\u003Cbr\u003E\u003Cbr\u003E                part.CreateInternalModel();\u003Cbr\u003E                kspParent = InternalCamera.Instance.transform.parent; // part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.SetVisible(true);\u003Cbr\u003E                part.vessel.SetActiveInternalPart(part);\u003Cbr\u003E\u003Cbr\u003E                if (part.protoModuleCrew.Count \u0026gt; 0 \u0026amp;\u0026amp; isActive)\u003Cbr\u003E                {\u003Cbr\u003E                    part.vessel.SpawnCrew();\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }      \u003Cbr\u003E\u003Cbr\u003E            if(!part.internalModel)\u003Cbr\u003E            {\u003Cbr\u003E                part.CreateInternalModel();\u003Cbr\u003E                kspParent = InternalCamera.Instance.transform.parent; // part.internalModel.transform.parent;\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.SetVisible(true);\u003Cbr\u003E                part.vessel.SetActiveInternalPart(part);\u003Cbr\u003E\u003Cbr\u003E                if (part.protoModuleCrew.Count \u0026gt; 0 \u0026amp;\u0026amp; isActive)\u003Cbr\u003E                {\u003Cbr\u003E                    part.vessel.SpawnCrew();\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            try\u003Cbr\u003E            {\u003Cbr\u003E                if (transViewUtility.FindCamera(\u0022InternalCamera\u0022))\u003Cbr\u003E                {\u003Cbr\u003E                    if (part.vessel.isActiveVessel)\u003Cbr\u003E                    {\u003Cbr\u003E                        part.internalModel.transform.position = kspPosition; // Vector3.zero;\u003Cbr\u003E                        part.internalModel.transform.parent = kspParent;\u003Cbr\u003E                        part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    part.internalModel.transform.parent = part.transform;\u003Cbr\u003E                    part.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003Cbr\u003E                    part.internalModel.transform.localPosition = Vector3.zero;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            catch (Exception e)\u003Cbr\u003E            {\u003Cbr\u003E                Debug.LogException(e, this);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI have yet to compile this, but in the meantime, I\u0027d like to figure out how to fix the IVA camera transforms first - specifically, which parts of the code are responsible for defining the IVA camera transform orientation, and how would I change it so that it works on a per-module basis rather than via the vessel\u0027s root part?\u003C/p\u003E\u003Cp\u003EThanks in advance.\u003C/p\u003E\n"},{"CreatedByName":"Snjo","CreatedById":57198,"CreatedDateTime":"2014-06-02T10:21:46Z","Content":"\n\u003Cp\u003EThe internal model has a hard coded rotation of 90,180,0, so if you add that to the part\u0027s rotation, that might work.\u003C/p\u003E\u003Cp\u003E(I have not read through the source yet, but just thought I\u0027d chime in with that piece of non obvious info)\u003C/p\u003E\n"},{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-03T01:09:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Snjo\u0022 data-cite=\u0022Snjo\u0022\u003E\u003Cdiv\u003EThe internal model has a hard coded rotation of 90,180,0, so if you add that to the part\u0027s rotation, that might work.\u003Cp\u003E(I have not read through the source yet, but just thought I\u0027d chime in with that piece of non obvious info)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, I see. I\u0027m guessing this means I have to go through, find the following lines:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.internalModel.transform.localRotation = new Quaternion(0, 0.7f, -0.7f, 0);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand apply the hard-coded internal rotation to the existing quaternions somehow?\u003C/p\u003E\u003Cp\u003EI\u0027ll look into this a little later this week - thanks!\u003C/p\u003E\u003Cp\u003E(NB Advice and suggestions still welcome - I dabbled in C# for work-related purposes, just not nearly enough for KSP plugin authoring)\u003C/p\u003E\n"},{"CreatedByName":"dtoxic","CreatedById":103573,"CreatedDateTime":"2014-06-13T02:02:04Z","Content":"\n\u003Cp\u003Eany news or an eta release on this plugin ?\u003C/p\u003E\u003Cp\u003Eanother thing maybe it helps (but probably just a shot in the dark)\u003C/p\u003E\u003Cp\u003Ei;am using this plugin and bobcat home 3 (tesla rover) and my log is spammed with NullReferenceException: Object reference not set to an instance of an object\u003C/p\u003E\u003Cp\u003Ei think its cause the source code doesn\u0027t have damage colliders defined in it maybe you can take a look at that if you have spare time but like i said its probably just a shot in the dark\u003C/p\u003E\u003Cp\u003Etake care\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-13T02:09:47Z\u0022 title=\u002206/13/2014 02:09  AM\u0022 data-short=\u002210 yr\u0022\u003EJune 13, 2014\u003C/time\u003E by dtoxic\u003C/strong\u003E\n\u003Cbr\u003Eadditional info\n\u003C/span\u003E\n"},{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-13T03:40:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022dtoxic\u0022 data-cite=\u0022dtoxic\u0022\u003E\u003Cdiv\u003Eany news or an eta release on this plugin ?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ve spoken to Mihara, and he\u0027s working on his own version of a PartModule to support transparent pods, which will probably be bundled with JSI RasterPropMonitor.\u003C/p\u003E\u003Cp\u003E \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/30803-WIP-FusTek-Station-Parts-Dev-Thread-%28continuation-of-fusty-s-original-work%29?p=1210683\u0026amp;viewfull=1#post1210683\u0022 rel=\u0022external nofollow\u0022\u003EWIP tests can be seen here\u003C/a\u003E, and while there are still a few minor issues, for the most part it resolves the main problem mentioned in this thread. Not sure about the NullReferenceExceptions, however.\u003C/p\u003E\n"},{"CreatedByName":"dtoxic","CreatedById":103573,"CreatedDateTime":"2014-06-13T04:01:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sumghai\u0022 data-cite=\u0022sumghai\u0022\u003E\u003Cdiv\u003EI\u0027ve spoken to Mihara, and he\u0027s working on his own version of a PartModule to support transparent pods, which will probably be bundled with JSI RasterPropMonitor.\u003Cp\u003E \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/30803-WIP-FusTek-Station-Parts-Dev-Thread-%28continuation-of-fusty-s-original-work%29?p=1210683\u0026amp;viewfull=1#post1210683\u0022 rel=\u0022external nofollow\u0022\u003EWIP tests can be seen here\u003C/a\u003E, and while there are still a few minor issues, for the most part it resolves the main problem mentioned in this thread. Not sure about the NullReferenceExceptions, however.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eok thx for the info \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2014-06-13T22:09:50Z","Content":"\n\u003Cp\u003EFor the record, \u003Ca href=\u0022https://github.com/Mihara/RasterPropMonitor/blob/master/RasterPropMonitor/Auxiliary%20modules/JSITransparentPod.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Mihara/RasterPropMonitor/blob/master/RasterPropMonitor/Auxiliary%20modules/JSITransparentPod.cs\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI think it works about as good as I can make it, unless someone finds another issue. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"dtoxic","CreatedById":103573,"CreatedDateTime":"2014-06-13T22:21:28Z","Content":"\n\u003Cp\u003Ewhen can we get the compiled version to try it out? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-13T22:31:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022dtoxic\u0022 data-cite=\u0022dtoxic\u0022\u003E\u003Cdiv\u003Ewhen can we get the compiled version to try it out? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMihara just sent me an updated dev build with a few fixes - he and I agreed that we need to do some more stress testing with regards to how docking, crew transfer, potential conflicts with the core JSI RPM props etc may affect the transparent pod PartModule.\u003C/p\u003E\u003Cp\u003EOnce he and I feel we\u0027re confident we\u0027ve sussed out these issues, Mihara may make the auxiliary function available for wider testing.\u003C/p\u003E\n"},{"CreatedByName":"dtoxic","CreatedById":103573,"CreatedDateTime":"2014-06-13T22:39:13Z","Content":"\n\u003Cp\u003Ecool \u003C/p\u003E\u003Cp\u003Ehope both of you get it to work \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"sumghai","CreatedById":66272,"CreatedDateTime":"2014-06-16T09:22:19Z","Content":"\n\u003Cp\u003EMihara and I have verified that his new PartModule is working properly, and resolved practically all of the issues we\u0027ve encountered (other than the inability to view the insides of other transparent pods while in IVA):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/57603-0-23-5-RasterPropMonitor-make-your-IVA-a-glass-cockpit-%28v0-16%29-20-Apr?p=1211267\u0026amp;viewfull=1#post1211267\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/57603-0-23-5-RasterPropMonitor-make-your-IVA-a-glass-cockpit-%28v0-16%29-20-Apr?p=1211267\u0026amp;viewfull=1#post1211267\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAs such, I believe this thread has served its purpose \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"UbioZur","CreatedById":72946,"CreatedDateTime":"2014-06-16T11:09:06Z","Content":"\n\u003Cp\u003Eclosed as requested by sumghai.\u003C/p\u003E\n"}]}