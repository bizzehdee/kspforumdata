{"TopicId":68043,"ForumId":34,"TopicTitle":"Universal Storage 1.4.0.0 (For KSP 1.4.x) 13th March 2018","CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-04-04T15:12:57Z","PageNum":25,"Articles":[{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-20T23:10:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DMagic\u0022 data-cite=\u0022DMagic\u0022\u003E\u003Cdiv\u003EThis seems kind-of superfluous. We already have three very good in-line batteries, the largest of which is very thin, looks fine, and has a very high capacity. And for other situations you can always stuff the radially attached batteries into an empty bay.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, we\u0027ve also got fine in-line fuel tanks and monopropellant, but there are wedges for those. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe KAS functionality could come in handy with battery wedges.\u003C/p\u003E\u003Cp\u003EThat being said, I\u0027m much more excited for TAC support.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-20T23:11:16Z\u0022 title=\u002207/20/2014 11:11  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 20, 2014\u003C/time\u003E by okbillybunnyface\u003C/strong\u003E\n\u003Cbr\u003Etac\n\u003C/span\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-20T23:12:33Z","Content":"\n\u003Cp\u003EI have a question that I am sure has been asked before: Does the science bay hide the parts inside from FAR drag?\u003C/p\u003E\n"},{"CreatedByName":"Daishi","CreatedById":85055,"CreatedDateTime":"2014-07-21T00:56:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022okbillybunnyface\u0022 data-cite=\u0022okbillybunnyface\u0022\u003E\u003Cdiv\u003EI have a question that I am sure has been asked before: Does the science bay hide the parts inside from FAR drag?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt will do in the next update \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T01:18:35Z","Content":"\n\u003Cp\u003EFixed the Elektron problem, I\u0027ve set the input to use more water, then the output to give most of it back.\u003C/p\u003E\u003Cp\u003EHowever this doesn\u0027t solve the issue where the water is still used even when you run out of power.\u003C/p\u003E\u003Cp\u003EThere doesn\u0027t seem to be a way around this in stock KSP. I\u0027ll keep looking into it.\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-21T01:18:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Daishi\u0022 data-cite=\u0022Daishi\u0022\u003E\u003Cdiv\u003EIt will do in the next update \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAmazing, I can\u0027t wait! This mod is quickly becoming indispensable, haha. It cleans up crafts so nicely. The improvements over stock stuff alone are great, but once the TAC pack is done.... @_@\u003C/p\u003E\u003Cp\u003EGreat work! ^^\u003C/p\u003E\n"},{"CreatedByName":"Olterin","CreatedById":116073,"CreatedDateTime":"2014-07-21T08:44:10Z","Content":"\n\u003Cp\u003EAn idea on how to approach the Elektron issue of continuing resource consumption - stock jet engines stop working when they run out of intake air, maybe something similar can be done with the Elektron?\u003C/p\u003E\n"},{"CreatedByName":"Lionel_de_Lion","CreatedById":115862,"CreatedDateTime":"2014-07-21T11:55:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Paul Kingtiger\u0022 data-cite=\u0022Paul Kingtiger\u0022\u003E\u003Cdiv\u003EFixed the Elektron problem, I\u0027ve set the input to use more water, then the output to give most of it back.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat, if I may say, is a stroke of genius!\u003C/p\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T11:55:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Olterin\u0022 data-cite=\u0022Olterin\u0022\u003E\u003Cdiv\u003EAn idea on how to approach the Elektron issue of continuing resource consumption - stock jet engines stop working when they run out of intake air, maybe something similar can be done with the Elektron?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe stop producing output, but they still use up fuel. Same with rocket engines. It affects any part that uses the ModuleEngine and ModuleGenerator function is KSP.\u003C/p\u003E\u003Cp\u003EI raised this as a possible bug, but have been told it\u0027s been designed to do that and is working as intended.\u003C/p\u003E\u003Cp\u003EThe next course of action is to ask Squad to change it or make it toggleable in the part.cfg file.\u003C/p\u003E\u003Cp\u003EBut as of right now, short of writing custom code (which is beyond me) we\u0027re stuck.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-21T11:58:36Z\u0022 title=\u002207/21/2014 11:58  AM\u0022 data-short=\u00229 yr\u0022\u003EJuly 21, 2014\u003C/time\u003E by Paul Kingtiger\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Lionel_de_Lion","CreatedById":115862,"CreatedDateTime":"2014-07-21T11:57:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Olterin\u0022 data-cite=\u0022Olterin\u0022\u003E\u003Cdiv\u003EAn idea on how to approach the Elektron issue of continuing resource consumption - stock jet engines stop working when they run out of intake air, maybe something similar can be done with the Elektron?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe difference with the Elektron is that it isn\u0027t running out of its fuel. Running out of ElectricCharge just means you can\u0027t switch off an already firing engine - the opposite of the behaviour that\u0027s wanted for the Elektron.\u003C/p\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T12:03:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Lionel_de_Lion\u0022 data-cite=\u0022Lionel_de_Lion\u0022\u003E\u003Cdiv\u003EThe difference with the Elektron is that it isn\u0027t running out of its fuel. Running out of ElectricCharge just means you can\u0027t switch off an already firing engine - the opposite of the behaviour that\u0027s wanted for the Elektron.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESort of. The way the logic works is you have inputs and outputs.\u003C/p\u003E\u003Cp\u003EIf you have more than one input then they must all be available for the output to work. Run out of 1 and the output with stop, be that H2 and O2 in the elektron or thrust in an engine.\u003C/p\u003E\u003Cp\u003EHowever all inputs will continue to flow while the part is switched on (or thrust \u0026gt; 0), the system doesn\u0027t care if 1 or more input has run out, the others will keep going.\u003C/p\u003E\u003Cp\u003EWhat is needed is a true/false flag in the part.cfg that will detect when 1 input has run out and automatically stop the other inputs as well as the output (deactivate the generator / engine)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EHaving done my own testing this isn\u0027t what happens at all. Engines do cut off all inputs when one runs out, which makes sense.\u003C/p\u003E\u003Cp\u003EHowever generators don\u0027t. \u003C/p\u003E\u003Cp\u003EYou can follow my support request here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/87260-Input-resources-in-Generator-module\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/87260-Input-resources-in-Generator-module\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-21T12:59:36Z\u0022 title=\u002207/21/2014 12:59  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 21, 2014\u003C/time\u003E by Paul Kingtiger\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T19:02:02Z","Content":"\n\u003Cp\u003EUpdate on the elektron (and other generators, which is currently the Sabatier and the Fuel Cell).\u003C/p\u003E\u003Cp\u003EI can fix the small numbers problem in the Elektron by using more water in the input but giving most of it back in the output. So that\u0027s easy.\u003C/p\u003E\u003Cp\u003EHowever the issue when it\u0027s still using water even without power is an issue with KSP and not something I can fix or work around. I\u0027ve raised this with the KSP team and we\u0027re now all on the same page. It\u0027s going to be added to the list of things to look at. However as to when it\u0027s fixed, no idea. Because it doesn\u0027t effect any stock parts it may not be fixed at all until stock parts need it. Hopefully it\u0027s a quick thing to fix and it might be included in 0.25? Who knows, but we\u0027ve done all we can.\u003C/p\u003E\u003Cp\u003EHowever there is another avenue open to me, which I\u0027m currently testing. If I can get it to work and all come together then we might has a great fix with a more immediate time scale (in the order of days rather than months).\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-21T21:48:35Z","Content":"\n\u003Cp\u003EI wonder how hard it would be to code a new ModuleGenerator. I\u0027m pretty experienced in Unity/C#. Methinks I\u0027ll make a stab at it for funzies. I\u0027m sure others will encounter this issue; it might be nice for the modding community to have.\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-21T22:48:34Z","Content":"\n\u003Cp\u003EActually, I\u0027m noticing there is a public \u0022requiresAllInputs\u0022 boolean in the ModuleGenerator object, and that the Sabatier part.cfg isn\u0027t setting it. If you haven\u0027t already, you might try adding \u0022requiresAllInputs = true\u0022 to the part.cfg\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-21T22:54:35Z\u0022 title=\u002207/21/2014 10:54  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 21, 2014\u003C/time\u003E by okbillybunnyface\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-21T22:51:38Z","Content":"\n\u003Cimg src=\u0022http://i.imgur.com/STiCcq1.jpg\u0022 alt=\u0022STiCcq1.jpg\u0022\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T23:05:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022okbillybunnyface\u0022 data-cite=\u0022okbillybunnyface\u0022\u003E\u003Cdiv\u003EI wonder how hard it would be to code a new ModuleGenerator. I\u0027m pretty experienced in Unity/C#. Methinks I\u0027ll make a stab at it for funzies. I\u0027m sure others will encounter this issue; it might be nice for the modding community to have.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf you could get something working that would be Amazing!\u003C/p\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-21T23:09:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022okbillybunnyface\u0022 data-cite=\u0022okbillybunnyface\u0022\u003E\u003Cdiv\u003EActually, I\u0027m noticing there is a public \u0022requiresAllInputs\u0022 boolean in the ModuleGenerator object, and that the Sabatier part.cfg isn\u0027t setting it. If you haven\u0027t already, you might try adding \u0022requiresAllInputs = true\u0022 to the part.cfg\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s not mentioned in the documentation. Giving it a try now.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EDoesn\u0027t make any difference, it still drains \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe other main issue with ModuleGenerator is that it doesn\u0027t like small fractions.\u003C/p\u003E\u003Cp\u003ETo get it to work at all I have to increase the input rate then give some of it back as an output as shown below (Lionel_de_Lion worked this out above).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\t\tMODULE\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tname = ModuleGenerator\u003Cbr\u003E\t\t\t\tisAlwaysActive = False\u003Cbr\u003E\t\t\t\trequiresAllInputs = true\u003Cbr\u003E\t\t\t\tactivateGUIName = Electrolysis On\u003Cbr\u003E\t\t\t\tshutdownGUIName = Electrolysis Off\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tINPUT_RESOURCE\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t   name = Water\u003Cbr\u003E\t\t\t\t\t   // Units: Liters per second\u003Cbr\u003E\t\t\t\t\t   rate = 0.001036\u003Cbr\u003E\t\t\t\t\t}\t\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tINPUT_RESOURCE\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\tname = ElectricCharge\u003Cbr\u003E\t\t\t\t\t\trate = 22\u003Cbr\u003E\t\t\t\t\t}\t\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tOUTPUT_RESOURCE\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\tname = Hydrogen\u003Cbr\u003E\t\t\t\t\t\t// Units: Liters per second\u003Cbr\u003E\t\t\t\t\t\trate = 0.0448\u003Cbr\u003E\t\t\t\t\t}\t\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tOUTPUT_RESOURCE\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t\tname = Oxygen\u003Cbr\u003E\t\t\t\t\t\t// Units: Liters per second\u003Cbr\u003E\t\t\t\t\t\trate = 0.0224\u003Cbr\u003E\t\t\t\t\t}\t\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tOUTPUT_RESOURCE\t\u003Cbr\u003E\t\t\t\t\t{\u003Cbr\u003E\t\t\t\t\t   name = Water\u003Cbr\u003E\t\t\t\t\t   // Units: Liters per second\u003Cbr\u003E\t\t\t\t\t   rate = 0.001\u003Cbr\u003E\t\t\t\t\t}\t\u003Cbr\u003E\t\t\t}\t\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-21T23:17:20Z\u0022 title=\u002207/21/2014 11:17  PM\u0022 data-short=\u00229 yr\u0022\u003EJuly 21, 2014\u003C/time\u003E by Paul Kingtiger\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-21T23:42:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Paul Kingtiger\u0022 data-cite=\u0022Paul Kingtiger\u0022\u003E\u003Cdiv\u003EThat\u0027s not mentioned in the documentation. Giving it a try now.\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EDoesn\u0027t make any difference, it still drains \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe other main issue with ModuleGenerator is that it doesn\u0027t like small fractions.\u003C/p\u003E\u003Cp\u003ETo get it to work at all I have to increase the input rate then give some of it back as an output as shown below (Lionel_de_Lion worked this out above).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, I\u0027m seeing the same thing here. I guess that would have been too easy. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m pretty sure the issue with rate is that it\u0027s using a float value, which only has precision to 7 digits. It doesn\u0027t exactly make sense to me, since the resources are stored in doubles, but w/e squad.\u003C/p\u003E\u003Cp\u003EI\u0027ll see what I can do.\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T01:55:37Z","Content":"\n\u003Cp\u003EWell, I managed to make something that should address the constant use of resources. It inherits all the functions of the stock ModuleGenerator, except it automatically tells the generator to shutdown if one of the input resources is deprived. I don\u0027t recommend using this with isAlwaysActive=true. I have no idea what will happen, lol. \u003C/p\u003E\u003Cp\u003EAlso, I should note that the player can still toggle the generator back on, and it will run for an extremely short amount of time before turning itself back off. I don\u0027t know why anyone would do this, since it\u0027d just behave as before and consume (a tiny amount of) resources with no benefit.\u003C/p\u003E\u003Cp\u003EJust put the .dll in your mod\u0027s plugins folder, and use the module name \u0022ModuleGeneratorB\u0022 instead of \u0022ModuleGenerator\u0022. All other parameters should be identical to the stock ModuleGenerator.\u003C/p\u003E\u003Cp\u003EHere\u0027s a link: \u003Ca href=\u0022https://onedrive.live.com/redir?resid=D7B085CDE92BD749%216152\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://onedrive.live.com/redir?resid=D7B085CDE92BD749%216152\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIf anyone is interested, here is the code (feel free to do whatever with it):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class ModuleGeneratorB : ModuleGenerator\u003Cbr\u003E{\u003Cbr\u003E    ModuleGenerator.GeneratorResource[] stuff;\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        stuff = inputList.ToArray();\u003Cbr\u003E        for (int i = 0; i \u0026lt; stuff.Length; i\u002B\u002B)\u003Cbr\u003E        {\u003Cbr\u003E            if (stuff[i].isDeprived)\u003Cbr\u003E            {\u003Cbr\u003E                ShutdownAction(new KSPActionParam(KSPActionGroup.None, KSPActionType.Deactivate));\u003Cbr\u003E                break;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-22T03:44:19Z\u0022 title=\u002207/22/2014 03:44  AM\u0022 data-short=\u00229 yr\u0022\u003EJuly 22, 2014\u003C/time\u003E by okbillybunnyface\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T02:05:34Z","Content":"\n\u003Cp\u003EI\u0027m not sure what to do about the low precision with resource consumption. I can\u0027t see into the stock ModuleGenerator, so I have no way of figuring out why it\u0027s messing up. I strongly suspect it\u0027s converting the double-precision resource values to match rate, which is just a float, but the only real/non-hacky fix I can currently thing of would be to rewrite the entire ModuleGenerator instead of inheriting from it, which would take a LOT more poking around the game\u0027s code. :\\\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T02:10:42Z","Content":"\n\u003Cp\u003EBTW, \u0022requiresAllInputs\u0022 is set to true by default. If it\u0027s set to false, running out of a resource doesn\u0027t stop the part from generating output resources. Instead, the efficiency will just decrease, lol.\u003C/p\u003E\n"},{"CreatedByName":"Daishi","CreatedById":85055,"CreatedDateTime":"2014-07-22T02:18:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022okbillybunnyface\u0022 data-cite=\u0022okbillybunnyface\u0022\u003E\u003Cdiv\u003EI\u0027m not sure what to do about the low precision with resource consumption. I can\u0027t see into the stock ModuleGenerator, so I have no way of figuring out why it\u0027s messing up. I strongly suspect it\u0027s converting the double-precision resource values to match rate, which is just a float, but the only real/non-hacky fix I can currently thing of would be to rewrite the entire ModuleGenerator instead of inheriting from it, which would take a LOT more poking around the game\u0027s code. :\\\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m sure (if its not somehow deliberate) it\u0027ll get patched sometime. In any case, thank you\u003Cem\u003E so much\u003C/em\u003E for your help! We\u0027ll have to have a kudos section in our release docs and include you in it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T03:32:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Daishi\u0022 data-cite=\u0022Daishi\u0022\u003E\u003Cdiv\u003EI\u0027m sure (if its not somehow deliberate) it\u0027ll get patched sometime. In any case, thank you\u003Cem\u003E so much\u003C/em\u003E for your help! We\u0027ll have to have a kudos section in our release docs and include you in it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re welcome! That\u0027s not necessary; there are worse ways I could have spent my evening, and it only took a couple hours. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T04:20:20Z","Content":"\n\u003Cp\u003EI\u0027m noticing that it is a little tricky to reactivate a generator that has run out of resources in the past when the resources have been restored, presumably because it\u0027s being shutdown again before isDeprived can be set back to false by the generator.\u003C/p\u003E\u003Cp\u003EAdditionally, the output resources are being filled at the normal rate even if the input resources are being supplied at less than the consumption rate, but I\u0027m pretty sure that\u0027s an issue with the stock generator module rather than what I\u0027ve done.\u003C/p\u003E\u003Cp\u003EI\u0027ll try and fix it, but it\u0027ll probably be tomorrow sometime before I can.\u003C/p\u003E\n"},{"CreatedByName":"okbillybunnyface","CreatedById":19009,"CreatedDateTime":"2014-07-22T09:51:32Z","Content":"\n\u003Cp\u003ESo, out of a pervasive curiosity, I ended up learning how to write modules, and then wrote a whole new generator module. \u0026gt;_\u0026gt;;\u003C/p\u003E\u003Cp\u003EI \u003Cem\u003Eknow\u003C/em\u003E it doesn\u0027t have the issue I mentioned in my last post, and I believe it shouldn\u0027t have the precision issue either.\u003C/p\u003E\u003Cp\u003EHere is a link \u003Ca href=\u0022https://onedrive.live.com/redir?resid=D7B085CDE92BD749!6159\u0026amp;authkey=!AOw-n6vJsRrKA-Y\u0026amp;ithint=folder%2C\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://onedrive.live.com/redir?resid=D7B085CDE92BD749!6159\u0026amp;authkey=!AOw-n6vJsRrKA-Y\u0026amp;ithint=folder%2c\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis is how the part.cfg should look:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ModuleResourceConverter\u003Cbr\u003E\tINPUT_RESOURCE\u003Cbr\u003E\t{\u003Cbr\u003E\t   name = ElectricCharge\u003Cbr\u003E\t   rate = 1\u003Cbr\u003E\t}\u003Cbr\u003E\tINPUT_RESOURCE\u003Cbr\u003E\t{\u003Cbr\u003E\t   name = XenonGas\u003Cbr\u003E\t   rate = 1\u003Cbr\u003E\t}\u003Cbr\u003E\tOUTPUT_RESOURCE\u003Cbr\u003E\t{\u003Cbr\u003E\t   name = MonoPropellant\u003Cbr\u003E\t   rate = 1\u003Cbr\u003E\t}\t\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESource Code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eclass ModuleResourceConverter : PartModule\u003Cbr\u003E{\u003Cbr\u003E    private double efficiency = 1.00;\u003Cbr\u003E\u003Cbr\u003E    [KSPField(isPersistant = true, guiActive = true, guiName = \u0022Activated\u0022)]\u003Cbr\u003E    public bool generatorIsActive = false;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public override string GetInfo()\u003Cbr\u003E    {\u003Cbr\u003E        string info = \u0022Input Resources:\\n\u0022;\u003Cbr\u003E\u003Cbr\u003E        foreach (ModuleGenerator.GeneratorResource resource in inputList)\u003Cbr\u003E        {\u003Cbr\u003E            info = String.Concat(info, resource.name \u002B \u0022 (\u0022 \u002B resource.rate \u002B \u0022 units/second)\\n\u0022);\u003Cbr\u003E        }\u003Cbr\u003E        info = String.Concat(info, \u0022\\nOutput Resources:\\n\u0022);\u003Cbr\u003E        foreach (ModuleGenerator.GeneratorResource resource in outputList)\u003Cbr\u003E        {\u003Cbr\u003E            info = String.Concat(info, resource.name \u002B \u0022 (\u0022 \u002B resource.rate \u002B \u0022 units/second)\\n\u0022);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        return info;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private ResourceTracker[] inputResources;\u003Cbr\u003E\u003Cbr\u003E    public List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt; inputList = new List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt;();\u003Cbr\u003E    public List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt; outputList = new List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt;();\u003Cbr\u003E    public override void OnLoad(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        inputList.Clear();\u003Cbr\u003E        outputList.Clear();\u003Cbr\u003E        foreach (ConfigNode subNode in node.nodes)\u003Cbr\u003E        {\u003Cbr\u003E            ModuleGenerator.GeneratorResource stuff;\u003Cbr\u003E            switch (subNode.name)\u003Cbr\u003E            {\u003Cbr\u003E                case \u0022INPUT_RESOURCE\u0022:\u003Cbr\u003E                    stuff = new ModuleGenerator.GeneratorResource();\u003Cbr\u003E                    stuff.Load(subNode);\u003Cbr\u003E                    inputList.Add(stuff);\u003Cbr\u003E                    break;\u003Cbr\u003E                case \u0022OUTPUT_RESOURCE\u0022:\u003Cbr\u003E                    stuff = new ModuleGenerator.GeneratorResource();\u003Cbr\u003E                    stuff.Load(subNode);\u003Cbr\u003E                    outputList.Add(stuff);\u003Cbr\u003E                    break;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        inputResources = new ResourceTracker[inputList.Count];\u003Cbr\u003E        int temp = 0;\u003Cbr\u003E        foreach (ModuleGenerator.GeneratorResource resource in inputList)\u003Cbr\u003E        {\u003Cbr\u003E            inputResources[temp] = new ResourceTracker(resource.name, resource.id, resource.rate);\u003Cbr\u003E            temp\u002B\u002B;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnSave(ConfigNode node)\u003Cbr\u003E    {\u003Cbr\u003E        foreach (ModuleGenerator.GeneratorResource resource in inputList)\u003Cbr\u003E        {\u003Cbr\u003E            resource.Save(node.AddNode(\u0022INPUT_RESOURCE\u0022));\u003Cbr\u003E        }\u003Cbr\u003E        foreach (ModuleGenerator.GeneratorResource resource in outputList)\u003Cbr\u003E        {\u003Cbr\u003E            resource.Save(node.AddNode(\u0022OUTPUT_RESOURCE\u0022));\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnStart(StartState state)\u003Cbr\u003E    {\u003Cbr\u003E        Events[\u0022Activate\u0022].active = true;\u003Cbr\u003E        Events[\u0022Deactivate\u0022].active = false;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnAwake()\u003Cbr\u003E    {\u003Cbr\u003E        if (inputList == null)\u003Cbr\u003E        {\u003Cbr\u003E            inputList = new List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E        if (outputList == null)\u003Cbr\u003E        {\u003Cbr\u003E            outputList = new List\u0026lt;ModuleGenerator.GeneratorResource\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public override void OnUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        if (generatorIsActive)\u003Cbr\u003E        {\u003Cbr\u003E            efficiency = 1.00;\u003Cbr\u003E\u003Cbr\u003E            //Gather resources\u003Cbr\u003E            for (int i = 0; i \u0026lt; inputResources.Length; i\u002B\u002B)\u003Cbr\u003E            {\u003Cbr\u003E                inputResources[i].request = inputResources[i].rate * TimeWarp.deltaTime;\u003Cbr\u003E                inputResources[i].amount \u002B= part.RequestResource(inputResources[i].id, inputResources[i].request - inputResources[i].amount);\u003Cbr\u003E\u003Cbr\u003E                double ratio = inputResources[i].amount / inputResources[i].request;\u003Cbr\u003E                if (ratio \u0026lt; efficiency) { efficiency = ratio; }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            //Subtract required resources\u003Cbr\u003E            for (int i = 0; i \u0026lt; inputResources.Length; i\u002B\u002B)\u003Cbr\u003E            {\u003Cbr\u003E                inputResources[i].amount -= inputResources[i].request * efficiency;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            //Deliver output resources\u003Cbr\u003E            foreach (ModuleGenerator.GeneratorResource resource in outputList)\u003Cbr\u003E            {\u003Cbr\u003E                part.RequestResource(resource.id, -resource.rate * efficiency * TimeWarp.deltaTime);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPAction(\u0022Activate Converter\u0022)]\u003Cbr\u003E    public void ActivateAction(KSPActionParam param)\u003Cbr\u003E    {\u003Cbr\u003E        Activate();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPAction(\u0022Shutdown Converter\u0022)]\u003Cbr\u003E    public void ShutdownAction(KSPActionParam param)\u003Cbr\u003E    {\u003Cbr\u003E        Deactivate();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPAction(\u0022Toggle Converter\u0022)]\u003Cbr\u003E    public void ToggleAction(KSPActionParam param)\u003Cbr\u003E    {\u003Cbr\u003E        if (generatorIsActive)\u003Cbr\u003E        {\u003Cbr\u003E            Deactivate();\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            Activate();\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiActive = true, guiName = \u0022Activate Converter\u0022, active = true, guiActiveUnfocused = false, guiActiveEditor = false, externalToEVAOnly = true)]\u003Cbr\u003E    public void Activate()\u003Cbr\u003E    {\u003Cbr\u003E        Events[\u0022Activate\u0022].active = false;\u003Cbr\u003E        Events[\u0022Deactivate\u0022].active = true;\u003Cbr\u003E\u003Cbr\u003E        generatorIsActive = true;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    [KSPEvent(guiActive = true, guiName = \u0022Deactivate Converter\u0022, active = false, guiActiveUnfocused = false, guiActiveEditor = false, externalToEVAOnly = true)]\u003Cbr\u003E    public void Deactivate()\u003Cbr\u003E    {\u003Cbr\u003E        Events[\u0022Activate\u0022].active = true;\u003Cbr\u003E        Events[\u0022Deactivate\u0022].active = false;\u003Cbr\u003E\u003Cbr\u003E        generatorIsActive = false;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private class ResourceTracker\u003Cbr\u003E    {\u003Cbr\u003E        public int id;\u003Cbr\u003E        public double rate;\u003Cbr\u003E        public double amount;\u003Cbr\u003E        public double request;\u003Cbr\u003E\u003Cbr\u003E        public ResourceTracker(string name, int id, double rate)\u003Cbr\u003E        {\u003Cbr\u003E            this.id = id;\u003Cbr\u003E            this.rate = rate;\u003Cbr\u003E            this.amount = 0;\u003Cbr\u003E            this.request = 0;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHave fun with it. o/\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-22T09:54:50Z\u0022 title=\u002207/22/2014 09:54  AM\u0022 data-short=\u00229 yr\u0022\u003EJuly 22, 2014\u003C/time\u003E by okbillybunnyface\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Paul Kingtiger","CreatedById":57455,"CreatedDateTime":"2014-07-22T13:23:00Z","Content":"\n\u003Cp\u003EThanks for doing all this, you are a star!\u003C/p\u003E\u003Cp\u003EThe auto stop works perfectly!\u003C/p\u003E\u003Cp\u003EThe rounding issue is still there, although it\u0027s different to the stock generator.\u003C/p\u003E\u003Cp\u003EIn stock you\u0027ve have to accelerate time to x50 to get it to work. With yours you only have to go to x5\u003C/p\u003E\u003Cp\u003EHowever you can\u0027t get around it by adding additional inputs but giving it back as an output like I did with stock.\u003C/p\u003E\u003Cp\u003EI did some digging around last night and TAC LS has a generator module, TACGenericConverter which stops all inputs and deals with small fractions. It\u0027s part of the TACLS.dll but it is separated out in the source code. I tried comparing yours with theirs but my limited coding knowledge isn\u0027t really helping here \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E It\u0027s overly complex for what we need as it has a scale factor system to make it easy to use in different sized parts (which TAC does a lot of)\u003C/p\u003E\u003Cp\u003EI don\u0027t know if it would be useful to you (TAC\u0027s licence allows derivatives).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/**\u003Cbr\u003E * Thunder Aerospace Corporation\u0027s Life Support for Kerbal Space Program.\u003Cbr\u003E * Written by Taranis Elsu.\u003Cbr\u003E * \u003Cbr\u003E * (C) Copyright 2013, Taranis Elsu\u003Cbr\u003E * \u003Cbr\u003E * Kerbal Space Program is Copyright (C) 2013 Squad. See http://kerbalspaceprogram.com/. This\u003Cbr\u003E * project is in no way associated with nor endorsed by Squad.\u003Cbr\u003E * \u003Cbr\u003E * This code is licensed under the Attribution-NonCommercial-ShareAlike 3.0 (CC BY-NC-SA 3.0)\u003Cbr\u003E * creative commons license. See \u0026lt;http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode\u0026gt;\u003Cbr\u003E * for full details.\u003Cbr\u003E * \u003Cbr\u003E * Attribution \u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC You are free to modify this code, so long as you mention that the resulting\u003Cbr\u003E * work is based upon or adapted from this code.\u003Cbr\u003E * \u003Cbr\u003E * Non-commercial - You may not use this work for commercial purposes.\u003Cbr\u003E * \u003Cbr\u003E * Share Alike \u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC If you alter, transform, or build upon this work, you may distribute the\u003Cbr\u003E * resulting work only under the same or similar license to the CC BY-NC-SA 3.0 license.\u003Cbr\u003E * \u003Cbr\u003E * Note that Thunder Aerospace Corporation is a ficticious entity created for entertainment\u003Cbr\u003E * purposes. It is in no way meant to represent a real entity. Any similarity to a real entity\u003Cbr\u003E * is purely coincidental.\u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace Tac\u003Cbr\u003E{\u003Cbr\u003E    /*\u003Cbr\u003E     * Example config file:\u003Cbr\u003E     *    MODULE\u003Cbr\u003E     *    {\u003Cbr\u003E     *       name = TacGenericConverter\u003Cbr\u003E     *\u003Cbr\u003E     *       // Displayed when right clicking the part\u003Cbr\u003E     *       converterName = Carbon Extractor\u003Cbr\u003E     *\u003Cbr\u003E     *       // [Optional] Sets the converter so that it is enabled initially\u003Cbr\u003E     *       // so that you do not need to worry about forgeting to turn it on\u003Cbr\u003E     *       // before launching.\u003Cbr\u003E     *       // converterEnabled = false\u003Cbr\u003E     *\u003Cbr\u003E     *       // [Optional] When set to true, the converter cannot be disabled\u003Cbr\u003E     *       // (or turned off)\u003Cbr\u003E     *       // alwaysOn = false\u003Cbr\u003E     *\u003Cbr\u003E     *       // Number of units to convert per day (24 hours)\u003Cbr\u003E     *       conversionRate = 8\u003Cbr\u003E     *\u003Cbr\u003E     *       // A comma separated list of resources to use as inputs.\u003Cbr\u003E     *       // For each resource, list the resource name and the amount (which\u003Cbr\u003E     *       // is multiplied by the conversionRate)\u003Cbr\u003E     *       inputResources = CarbonDioxide, 1, ElectricCharge, 1000\u003Cbr\u003E     *\u003Cbr\u003E     *       // A comma separated list of resources to output. Same as above\u003Cbr\u003E     *       // but also specify whether it should keep converting if the\u003Cbr\u003E     *       // resource is full (generating excess that will be thrown away).\u003Cbr\u003E     *       outputResources = Oxygen, 0.9, false, Waste, 2.218, true\u003Cbr\u003E     *\u003Cbr\u003E     *       // [Optional] When set to true, the converter will not run unless\u003Cbr\u003E     *       // on a planet that has oxygen in the atmosphere (only Kerbin or\u003Cbr\u003E     *       // Laythe).\u003Cbr\u003E     *       requiresOxygenAtmo = false\u003Cbr\u003E     *    }\u003Cbr\u003E     * or\u003Cbr\u003E     *    MODULE\u003Cbr\u003E     *    {\u003Cbr\u003E     *       name = TacGenericConverter\u003Cbr\u003E     *       converterName = Water Purifier\u003Cbr\u003E     *       conversionRate = 8\u003Cbr\u003E     *       inputResources = WasteWater, 1, ElectricCharge, 1000\u003Cbr\u003E     *       outputResources = Water, 0.9, false, Waste, 6.382, true\u003Cbr\u003E     *    }\u003Cbr\u003E     */\u003Cbr\u003E    [KSPModule(\u0022TAC Converter\u0022)]\u003Cbr\u003E    public class TacGenericConverter : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        private static char[] delimiters = { \u0027 \u0027, \u0027,\u0027, \u0027\\t\u0027, \u0027;\u0027 };\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public string converterName = \u0022TAC Generic Converter\u0022;\u003Cbr\u003E\u003Cbr\u003E        [KSPField(guiActive = true, guiName = \u0022Converter Status\u0022)]\u003Cbr\u003E        public string converterStatus = \u0022Unknown\u0022;\u003Cbr\u003E\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public bool converterEnabled = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public bool alwaysOn = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public float conversionRate = 1.0f;\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public string inputResources = \u0022\u0022;\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public string outputResources = \u0022\u0022;\u003Cbr\u003E\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public bool requiresOxygenAtmo = false;\u003Cbr\u003E\u003Cbr\u003E        private double lastUpdateTime = 0.0f;\u003Cbr\u003E\u003Cbr\u003E        private List\u0026lt;ResourceRatio\u0026gt; inputResourceList;\u003Cbr\u003E        private List\u0026lt;ResourceRatio\u0026gt; outputResourceList;\u003Cbr\u003E\u003Cbr\u003E        public override void OnAwake()\u003Cbr\u003E        {\u003Cbr\u003E            this.Log(\u0022OnAwake\u0022);\u003Cbr\u003E            base.OnAwake();\u003Cbr\u003E            UpdateResourceLists();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            this.Log(\u0022OnStart: \u0022 \u002B state);\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E            if (state != StartState.Editor)\u003Cbr\u003E            {\u003Cbr\u003E                part.force_activate();\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            UpdateEvents();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnFixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            base.OnFixedUpdate();\u003Cbr\u003E\u003Cbr\u003E            if (Time.timeSinceLevelLoad \u0026lt; 1.0f || !FlightGlobals.ready)\u003Cbr\u003E            {\u003Cbr\u003E                return;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            if (lastUpdateTime == 0.0f)\u003Cbr\u003E            {\u003Cbr\u003E                // Just started running\u003Cbr\u003E                lastUpdateTime = Planetarium.GetUniversalTime();\u003Cbr\u003E                return;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            GlobalSettings globalSettings = TacLifeSupport.Instance.globalSettings;\u003Cbr\u003E\u003Cbr\u003E            double deltaTime = Math.Min(Planetarium.GetUniversalTime() - lastUpdateTime, globalSettings.MaxDeltaTime);\u003Cbr\u003E            lastUpdateTime \u002B= deltaTime;\u003Cbr\u003E\u003Cbr\u003E            if (converterEnabled)\u003Cbr\u003E            {\u003Cbr\u003E                if (requiresOxygenAtmo \u0026amp;\u0026amp; !vessel.mainBody.atmosphereContainsOxygen)\u003Cbr\u003E                {\u003Cbr\u003E                    converterStatus = \u0022Atmo lacks oxygen.\u0022;\u003Cbr\u003E                    return;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                double desiredAmount = conversionRate * deltaTime;\u003Cbr\u003E                double maxElectricityDesired = Math.Min(desiredAmount, conversionRate * Math.Max(globalSettings.ElectricityMaxDeltaTime, TimeWarp.fixedDeltaTime)); // Limit the max electricity consumed when reloading a vessel\u003Cbr\u003E\u003Cbr\u003E                // Limit the resource amounts so that we do not produce more than we have room for, nor consume more than is available\u003Cbr\u003E                foreach (ResourceRatio output in outputResourceList)\u003Cbr\u003E                {\u003Cbr\u003E                    if (!output.allowExtra)\u003Cbr\u003E                    {\u003Cbr\u003E                        if (output.resource.id == globalSettings.ElectricityId \u0026amp;\u0026amp; desiredAmount \u0026gt; maxElectricityDesired)\u003Cbr\u003E                        {\u003Cbr\u003E                            // Special handling for electricity\u003Cbr\u003E                            double desiredElectricity = maxElectricityDesired * output.ratio;\u003Cbr\u003E                            double availableSpace = -part.IsResourceAvailable(output.resource, -desiredElectricity);\u003Cbr\u003E                            desiredAmount = desiredAmount * (availableSpace / desiredElectricity);\u003Cbr\u003E                        }\u003Cbr\u003E                        else\u003Cbr\u003E                        {\u003Cbr\u003E                            double availableSpace = -part.IsResourceAvailable(output.resource, -desiredAmount * output.ratio);\u003Cbr\u003E                            desiredAmount = availableSpace / output.ratio;\u003Cbr\u003E                        }\u003Cbr\u003E\u003Cbr\u003E                        if (desiredAmount \u0026lt;= 0.000000001)\u003Cbr\u003E                        {\u003Cbr\u003E                            // Out of space, so no need to run\u003Cbr\u003E                            converterStatus = \u0022No space for more \u0022 \u002B output.resource.name;\u003Cbr\u003E                            return;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                foreach (ResourceRatio input in inputResourceList)\u003Cbr\u003E                {\u003Cbr\u003E                    if (input.resource.id == globalSettings.ElectricityId \u0026amp;\u0026amp; desiredAmount \u0026gt; maxElectricityDesired)\u003Cbr\u003E                    {\u003Cbr\u003E                        // Special handling for electricity\u003Cbr\u003E                        double desiredElectricity = maxElectricityDesired * input.ratio;\u003Cbr\u003E                        double amountAvailable = part.IsResourceAvailable(input.resource, desiredElectricity);\u003Cbr\u003E                        desiredAmount = desiredAmount * (amountAvailable / desiredElectricity);\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        double amountAvailable = part.IsResourceAvailable(input.resource, desiredAmount * input.ratio);\u003Cbr\u003E                        desiredAmount = amountAvailable / input.ratio;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    if (desiredAmount \u0026lt;= 0.000000001)\u003Cbr\u003E                    {\u003Cbr\u003E                        // Not enough input resources\u003Cbr\u003E                        converterStatus = \u0022Not enough \u0022 \u002B input.resource.name;\u003Cbr\u003E                        return;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                foreach (ResourceRatio input in inputResourceList)\u003Cbr\u003E                {\u003Cbr\u003E                    double desired;\u003Cbr\u003E                    if (input.resource.id == globalSettings.ElectricityId)\u003Cbr\u003E                    {\u003Cbr\u003E                        desired = Math.Min(desiredAmount, maxElectricityDesired) * input.ratio;\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        desired = desiredAmount * input.ratio;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    double actual = part.TakeResource(input.resource, desired);\u003Cbr\u003E\u003Cbr\u003E                    if (actual \u0026lt; (desired * 0.999))\u003Cbr\u003E                    {\u003Cbr\u003E                        this.LogWarning(\u0022OnFixedUpdate: obtained less \u0022 \u002B input.resource.name \u002B \u0022 than expected: \u0022 \u002B desired.ToString(\u00220.000000000\u0022) \u002B \u0022/\u0022 \u002B actual.ToString(\u00220.000000000\u0022));\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                foreach (ResourceRatio output in outputResourceList)\u003Cbr\u003E                {\u003Cbr\u003E                    double desired;\u003Cbr\u003E                    if (output.resource.id == globalSettings.ElectricityId)\u003Cbr\u003E                    {\u003Cbr\u003E                        desired = Math.Min(desiredAmount, maxElectricityDesired) * output.ratio;\u003Cbr\u003E                    }\u003Cbr\u003E                    else\u003Cbr\u003E                    {\u003Cbr\u003E                        desired = desiredAmount * output.ratio;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    double actual = -part.TakeResource(output.resource.id, -desired);\u003Cbr\u003E\u003Cbr\u003E                    if (actual \u0026lt; (desired * 0.999) \u0026amp;\u0026amp; !output.allowExtra)\u003Cbr\u003E                    {\u003Cbr\u003E                        this.LogWarning(\u0022OnFixedUpdate: put less \u0022 \u002B output.resource.name \u002B \u0022 than expected: \u0022 \u002B desired.ToString(\u00220.000000000\u0022) \u002B \u0022/\u0022 \u002B actual.ToString(\u00220.000000000\u0022));\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                converterStatus = \u0022Running\u0022;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnLoad(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            this.Log(\u0022OnLoad: \u0022 \u002B node);\u003Cbr\u003E            base.OnLoad(node);\u003Cbr\u003E            lastUpdateTime = Utilities.GetValue(node, \u0022lastUpdateTime\u0022, lastUpdateTime);\u003Cbr\u003E\u003Cbr\u003E            UpdateResourceLists();\u003Cbr\u003E            UpdateEvents();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnSave(ConfigNode node)\u003Cbr\u003E        {\u003Cbr\u003E            node.AddValue(\u0022lastUpdateTime\u0022, lastUpdateTime);\u003Cbr\u003E            this.Log(\u0022OnSave: \u0022 \u002B node);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override string GetInfo()\u003Cbr\u003E        {\u003Cbr\u003E            StringBuilder sb = new StringBuilder();\u003Cbr\u003E            sb.Append(converterName);\u003Cbr\u003E            sb.Append(\u0022\\n\\nInputs:\u0022);\u003Cbr\u003E            foreach (var input in inputResourceList)\u003Cbr\u003E            {\u003Cbr\u003E                double ratio = input.ratio * conversionRate;\u003Cbr\u003E                sb.Append(\u0022\\n - \u0022).Append(input.resource.name).Append(\u0022: \u0022).Append(Utilities.FormatValue(ratio, 3)).Append(\u0022U/sec\u0022);\u003Cbr\u003E            }\u003Cbr\u003E            sb.Append(\u0022\\n\\nOutputs: \u0022);\u003Cbr\u003E            foreach (var output in outputResourceList)\u003Cbr\u003E            {\u003Cbr\u003E                double ratio = output.ratio * conversionRate;\u003Cbr\u003E                sb.Append(\u0022\\n - \u0022).Append(output.resource.name).Append(\u0022: \u0022).Append(Utilities.FormatValue(ratio, 3)).Append(\u0022U/sec\u0022);\u003Cbr\u003E            }\u003Cbr\u003E            sb.Append(\u0022\\n\u0022);\u003Cbr\u003E            if (requiresOxygenAtmo)\u003Cbr\u003E            {\u003Cbr\u003E                sb.Append(\u0022\\nRequires an atmosphere containing Oxygen.\u0022);\u003Cbr\u003E            }\u003Cbr\u003E            if (alwaysOn)\u003Cbr\u003E            {\u003Cbr\u003E                sb.Append(\u0022\\nCannot be turned off.\u0022);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            return sb.ToString();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(active = false, guiActive = true, guiActiveEditor = true, guiName = \u0022Activate Converter\u0022)]\u003Cbr\u003E        public void ActivateConverter()\u003Cbr\u003E        {\u003Cbr\u003E            converterEnabled = true;\u003Cbr\u003E            UpdateEvents();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(active = false, guiActive = true, guiActiveEditor = true, guiName = \u0022Deactivate Converter\u0022)]\u003Cbr\u003E        public void DeactivateConverter()\u003Cbr\u003E        {\u003Cbr\u003E            converterEnabled = false;\u003Cbr\u003E            UpdateEvents();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPAction(\u0022Toggle Converter\u0022)]\u003Cbr\u003E        public void ToggleConverter(KSPActionParam param)\u003Cbr\u003E        {\u003Cbr\u003E            converterEnabled = !converterEnabled;\u003Cbr\u003E            UpdateEvents();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateEvents()\u003Cbr\u003E        {\u003Cbr\u003E            if (alwaysOn)\u003Cbr\u003E            {\u003Cbr\u003E                Events[\u0022ActivateConverter\u0022].active = false;\u003Cbr\u003E                Events[\u0022DeactivateConverter\u0022].active = false;\u003Cbr\u003E                converterEnabled = true;\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                Events[\u0022ActivateConverter\u0022].active = !converterEnabled;\u003Cbr\u003E                Events[\u0022DeactivateConverter\u0022].active = converterEnabled;\u003Cbr\u003E\u003Cbr\u003E                if (!converterEnabled)\u003Cbr\u003E                {\u003Cbr\u003E                    converterStatus = \u0022Inactive\u0022;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateResourceLists()\u003Cbr\u003E        {\u003Cbr\u003E            if (inputResourceList == null)\u003Cbr\u003E            {\u003Cbr\u003E                inputResourceList = new List\u0026lt;ResourceRatio\u0026gt;();\u003Cbr\u003E            }\u003Cbr\u003E            if (outputResourceList == null)\u003Cbr\u003E            {\u003Cbr\u003E                outputResourceList = new List\u0026lt;ResourceRatio\u0026gt;();\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            ParseInputResourceString(inputResources, inputResourceList);\u003Cbr\u003E            ParseOutputResourceString(outputResources, outputResourceList);\u003Cbr\u003E\u003Cbr\u003E            Events[\u0022ActivateConverter\u0022].guiName = \u0022Activate \u0022 \u002B converterName;\u003Cbr\u003E            Events[\u0022DeactivateConverter\u0022].guiName = \u0022Deactivate \u0022 \u002B converterName;\u003Cbr\u003E            Actions[\u0022ToggleConverter\u0022].guiName = \u0022Toggle \u0022 \u002B converterName;\u003Cbr\u003E            Fields[\u0022converterStatus\u0022].guiName = converterName;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void ParseInputResourceString(string resourceString, List\u0026lt;ResourceRatio\u0026gt; resources)\u003Cbr\u003E        {\u003Cbr\u003E            resources.Clear();\u003Cbr\u003E\u003Cbr\u003E            string[] tokens = resourceString.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\u003Cbr\u003E\u003Cbr\u003E            for (int i = 0; i \u0026lt; (tokens.Length - 1); i \u002B= 2)\u003Cbr\u003E            {\u003Cbr\u003E                PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(tokens[i]);\u003Cbr\u003E                double ratio;\u003Cbr\u003E                if (resource != null \u0026amp;\u0026amp; double.TryParse(tokens[i \u002B 1], out ratio))\u003Cbr\u003E                {\u003Cbr\u003E                    resources.Add(new ResourceRatio(resource, ratio));\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    this.Log(\u0022Cannot parse \\\u0022\u0022 \u002B resourceString \u002B \u0022\\\u0022, something went wrong.\u0022);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            var ratios = resources.Aggregate(\u0022\u0022, (result, value) =\u0026gt; result \u002B value.resource.name \u002B \u0022, \u0022 \u002B value.ratio \u002B \u0022, \u0022);\u003Cbr\u003E            this.Log(\u0022Input resources parsed: \u0022 \u002B ratios \u002B \u0022\\nfrom \u0022 \u002B resourceString);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void ParseOutputResourceString(string resourceString, List\u0026lt;ResourceRatio\u0026gt; resources)\u003Cbr\u003E        {\u003Cbr\u003E            resources.Clear();\u003Cbr\u003E\u003Cbr\u003E            string[] tokens = resourceString.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\u003Cbr\u003E\u003Cbr\u003E            for (int i = 0; i \u0026lt; (tokens.Length - 2); i \u002B= 3)\u003Cbr\u003E            {\u003Cbr\u003E                PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(tokens[i]);\u003Cbr\u003E                double ratio;\u003Cbr\u003E                bool allowExtra;\u003Cbr\u003E                if (resource != null \u0026amp;\u0026amp; double.TryParse(tokens[i \u002B 1], out ratio) \u0026amp;\u0026amp; bool.TryParse(tokens[i \u002B 2], out allowExtra))\u003Cbr\u003E                {\u003Cbr\u003E                    resources.Add(new ResourceRatio(resource, ratio, allowExtra));\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    this.Log(\u0022Cannot parse \\\u0022\u0022 \u002B resourceString \u002B \u0022\\\u0022, something went wrong.\u0022);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            var ratios = resources.Aggregate(\u0022\u0022, (result, value) =\u0026gt; result \u002B value.resource.name \u002B \u0022, \u0022 \u002B value.ratio \u002B \u0022, \u0022);\u003Cbr\u003E            this.Log(\u0022Output resources parsed: \u0022 \u002B ratios \u002B \u0022\\nfrom \u0022 \u002B resourceString);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public class ResourceRatio\u003Cbr\u003E    {\u003Cbr\u003E        public PartResourceDefinition resource;\u003Cbr\u003E        public double ratio;\u003Cbr\u003E        public bool allowExtra;\u003Cbr\u003E\u003Cbr\u003E        public ResourceRatio(PartResourceDefinition resource, double ratio, bool allowExtra = false)\u003Cbr\u003E        {\u003Cbr\u003E            this.resource = resource;\u003Cbr\u003E            this.ratio = ratio;\u003Cbr\u003E            this.allowExtra = allowExtra;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"}]}