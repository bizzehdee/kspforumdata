{"TopicId":104266,"ForumId":44,"TopicTitle":"Following in HarvesteR\u0026#039;s footsteps (Unity maths)","CreatedByName":"Corbald","CreatedById":2219,"CreatedDateTime":"2015-04-16T17:17:06Z","PageNum":1,"Articles":[{"CreatedByName":"Corbald","CreatedById":2219,"CreatedDateTime":"2015-04-16T17:17:06Z","Content":"\n\u003Cp\u003E(Mods: Is this the right place to ask this?)\u003C/p\u003E\u003Cp\u003EHey all, I need some help! I have been working for a while on a project of my own. I have a lot of stuff that I have already done, but now it comes time to do the thing I\u0027ve been dreading the most... the math of orbital dynamics and conics. I have a rudimentary understanding of how cones draw ellipses and how planets sit in the foci, but I\u0027m trying to really wrap my mind around the math. I can\u0027t read mathematical notation and have only a high-school education. I\u0027m ADHD and haven\u0027t been in school for 24 years. As you can imagine, this has been an uphill battle for me, the entire time! None the less, I have tackled a lot of difficult problems, including dynamic LoD, procedural generation, networking, optimization and more.\u003C/p\u003E\u003Cp\u003EIn trying to make the numbers actually mean something to my idiot brain, I stumbled upon a post by none other than HarvesteR, himself (\u003Ca href=\u0022http://www.orbiter-forum.com/showthread.php?t=20580\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.orbiter-forum.com/showthread.php?t=20580\u003C/a\u003E). He seems to be asking some of the same questions that I am, and seems to be at around the same stage that I am (at that moment in time). Now, we all know that he was successful in \u003Cem\u003Ehis\u003C/em\u003E attempts, so I think I\u0027m on the right track.\u003C/p\u003E\u003Cp\u003EIn that post, Arrowstar very kindly supplies him with a MATLAB example which spits out all the relevant data points for an orbit. I\u0027m really hoping you guys can help me get the MATLAB gibberish to produce some real numbers, so that I can actually learn something and get my mind to visualize these concepts. I have a lot of references that I have dug up via Googling around, and I hope that if I can get this thing running, I can actually make some headway.\u003C/p\u003E\u003Cp\u003EHere\u0027s what I have: (I have commented relevant lines of code with the pertinent questions I have.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003Eusing System.Collections;\u003Cbr\u003E\u003Cbr\u003Epublic class Manager : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E    // Use this for initialization\u003Cbr\u003E    void Start()\u003Cbr\u003E    {\u003Cbr\u003E        GameObject[] Objects = GameObject.FindGameObjectsWithTag(\u0022Star\u0022);\u003Cbr\u003E\u003Cbr\u003E        //Initial \u0027kick\u0027\u003Cbr\u003E        foreach (GameObject ObjectA in Objects)\u003Cbr\u003E        {\u003Cbr\u003E            ObjectA.GetComponent\u0026lt;Rigidbody\u0026gt;().AddForce(new Vector3(0, 0, 1)); //Initial \u0027kick\u0027\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    void ApplyGravity(Rigidbody A, Rigidbody \u003Cbr\u003E    {\u003Cbr\u003E        //This is how to get the distance vector between two objects. (I totally stole most of this function, \u003Cbr\u003E        //but I understand it now, so I\u0027ll rewrite it to suit my project, later.)\u003Cbr\u003E        Vector3 dist = B.transform.position - A.transform.position;\u003Cbr\u003E        float r = dist.magnitude;\u003Cbr\u003E        dist /= r;\u003Cbr\u003E\u003Cbr\u003E        //This is the Newton\u0027s equation\u003Cbr\u003E        //G = 6.67 * 10^-11 N.m\u00C3\u201A\u00C2\u00B2.kg^-2\u003Cbr\u003E        double G = 6.674f * (10 ^ 11);\u003Cbr\u003E        float force = ((float)G * A.mass * B.mass) / (r * r);\u003Cbr\u003E\u003Cbr\u003E        //Then, just apply the forces\u003Cbr\u003E        A.AddForce(dist * force);\u003Cbr\u003E        B.AddForce(-dist * force);\u003Cbr\u003E\u003Cbr\u003E        //note that there are only two objects in my scene, a \u0027planet\u0027 with x,y,z locked, and a \u0027moon\u0027\u003Cbr\u003E        //the \u0027moon\u0027 is the only object which will get a force, for this example, due to the constraints on the other body.\u003Cbr\u003E\u003Cbr\u003E        //DrawOrbit(A.position, A.position \u002B A.velocity, dist * force); //this will call the orbital calculation stuff below.\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHere\u0027s the code for the function I\u0027m having issues with\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    void DrawOrbit(Vector3 rVect, Vector3 vVect, float muCB)\u003Cbr\u003E    {\u003Cbr\u003E        //Here begins the MATLAB code provided to HarvesteR\u003Cbr\u003E        //  function [sma, ecc, inc, longAscNode, ArgPeri, TrueAnom] = getKeplerFromState(rVect,vVect,muCB) \u003Cbr\u003E        //% getKeplerFromState() returns Keplerian orbital elements when provided\u003Cbr\u003E        //% with the state (cartesian position vector, cartesian velocity vector) of\u003Cbr\u003E        //% a spacecraft or celestial body.\u003Cbr\u003E        //%\u003Cbr\u003E        //% INPUTS\u003Cbr\u003E        //% rVect - a 3x1 vector that contains the x,y,z components of the orbiting\u003Cbr\u003E        //% body\u0027s current position relative to the central body.  Units: [km]\u003Cbr\u003E        //% vVect - a 3x1 vector that contains the x,y,z components of the orbiting\u003Cbr\u003E        //% body\u0027s current velocity vector relative to the central body.  Units:\u003Cbr\u003E        //% [km/sec]\u003Cbr\u003E        //% muCB - the gravitational parameter of the central body.  Units: km^3/s^2 //(What, of the above, goes here?\u003Cbr\u003E        //%\u003Cbr\u003E        //%OUTPUTS\u003Cbr\u003E        //% sma - semi-major axis of the orbit.  Units: [km]\u003Cbr\u003E        //% ecc - eccentricity of the orbit.  Units: dimensionless\u003Cbr\u003E        //% inc - inclination angle of the orbit.  Units: radian\u003Cbr\u003E        //% longAscNode - Longitude of ascending node of the orbit.  Units: radian\u003Cbr\u003E        //% ArgPeri - Argument of periapse of the orbit.  Units: radian.\u003Cbr\u003E        //% TrueAnom - Current true anomaly of the spacecraft/body in the orbit.\u003Cbr\u003E        //% Units: radian\u003Cbr\u003E\u003Cbr\u003E        //r=norm(rVect);\u003Cbr\u003E        //rUnitVect=rVect/r;\u003Cbr\u003E        //v=norm(vVect);\u003Cbr\u003E\u003Cbr\u003E        float r = rVect.magnitude; //matlab \u0027norm\u0027 is Unity Vector3.magnitude?\u003Cbr\u003E        Vector3 rUnitVect = rVect.normalized; // rVect/r is Unity Vector3.normalized?\u003Cbr\u003E        float v = vVect.magnitude;\u003Cbr\u003E\u003Cbr\u003E        //hVect=cross(rVect,vVect);\u003Cbr\u003E        //h=norm(hVect);\u003Cbr\u003E        //hUnitVect=hVect/h;\u003Cbr\u003E        //ThetaUnitVect=cross(hUnitVect,rUnitVect);\u003Cbr\u003E\u003Cbr\u003E        Vector3 hVect = Vector3.Cross(rVect, vVect);\u003Cbr\u003E        float h = hVect.magnitude;\u003Cbr\u003E        Vector3 hUnitVect = hVect.normalized;\u003Cbr\u003E        Vector3 ThetaUnitVect = Vector3.Cross(hUnitVect, rUnitVect);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        //Energy=v^2/2 - muCB/r;\u003Cbr\u003E        //sma=-muCB/(2*Energy);\u003Cbr\u003E\u003Cbr\u003E        float Energy = Mathf.Pow( v, 2 )/ 2 - muCB / r; //Am I doing order of operation right?\u003Cbr\u003E        float sma = -muCB / (2 * Energy);\u003Cbr\u003E\u003Cbr\u003E        //p=h^2/muCB;\u003Cbr\u003E        //ecc=sqrt(-p/sma \u002B 1);\u003Cbr\u003E\u003Cbr\u003E        float p = Mathf.Pow(h, 2) / muCB;\u003Cbr\u003E        float ecc = Mathf.Sqrt(-p / sma \u002B 1);\u003Cbr\u003E\u003Cbr\u003E        //TrueAnom=acos((p/r - 1)/(ecc));\u003Cbr\u003E        //if(dot(rVect,vVect)\u0026lt;0)\u003Cbr\u003E        //    TrueAnom=-TrueAnom;\u003Cbr\u003E        //end\u003Cbr\u003E\u003Cbr\u003E        float TrueAnom = Mathf.Acos((p / r - 1) / ecc);\u003Cbr\u003E        if (Vector3.Dot(rVect, vVect) \u0026lt; 0)\u003Cbr\u003E        {\u003Cbr\u003E            TrueAnom = -TrueAnom;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //inc=acos(hUnitVect(3));\u003Cbr\u003E\u003Cbr\u003E        float inc = Mathf.Acos(hUnitVect[2]); //Unity vectors are from 0-2, not 1-3\u003Cbr\u003E\u003Cbr\u003E        //longAscNode_1=AngleZero2Pi(asin(hUnitVect(1)/sin(inc))); //is AngleZero2Pi a matlab function? what is this?\u003Cbr\u003E        //longAscNode_2=AngleZero2Pi(pi-asin(hUnitVect(1)/sin(inc)));\u003Cbr\u003E        //longAscNode_3=AngleZero2Pi(acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E        //longAscNode_4=AngleZero2Pi(-acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E\u003Cbr\u003E        //longAscNodeSet1=round(1000*[longAscNode_1,longAscNode_2])/1000; //is this a Mathf.Round as a vector2?\u003Cbr\u003E        //longAscNodeSet2=round(1000*[longAscNode_3,longAscNode_4])/1000;\u003Cbr\u003E\u003Cbr\u003E        //[val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2); //am I finding the intersection of two vector2\u0027s? I don\u0027t know how to read this!\u003Cbr\u003E        //longAscNode=longAscNodeSet1(ia); //I don\u0027t know how to read this!\u003Cbr\u003E\u003Cbr\u003E        //Theta_1=AngleZero2Pi(asin(rUnitVect(3)/sin(inc))); //Quesion as above\u003Cbr\u003E        //Theta_2=AngleZero2Pi(pi-asin(rUnitVect(3)/sin(inc)));\u003Cbr\u003E        //Theta_3=AngleZero2Pi(acos(ThetaUnitVect(3)/sin(inc)));\u003Cbr\u003E        //Theta_4=AngleZero2Pi(-acos(ThetaUnitVect(3)/sin(inc)));\u003Cbr\u003E\u003Cbr\u003E        //ThetaSet1=round(1000*[Theta_1,Theta_2])/1000; //Quesion as above\u003Cbr\u003E        //ThetaSet2=round(1000*[Theta_3,Theta_4])/1000;\u003Cbr\u003E\u003Cbr\u003E        //[val,ia,ib]=intersect(ThetaSet1,ThetaSet2); //Quesion as above\u003Cbr\u003E        //Theta=ThetaSet1(ia); //Quesion as above\u003Cbr\u003E\u003Cbr\u003E        //ArgPeri=Theta-TrueAnom; //If I could figure out the above, this might make sense!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        //some stuff will go here to draw the elipse/orbits. I\u0027ll tackle that later, after I make sense of the rest.\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFinally, some code to apply a basic orbit, it\u0027s bad, but it\u0027s working\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003E    void FixedUpdate()\u003Cbr\u003E    {\u003Cbr\u003E        //Get every object \u003Cbr\u003E        GameObject[] Objects = GameObject.FindGameObjectsWithTag(\u0022Star\u0022); //This runs too often. Extract to Start() later to optimize.\u003Cbr\u003E\u003Cbr\u003E        //the gravity between each couple of object is calculated\u003Cbr\u003E        foreach (GameObject ObjectA in Objects)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (GameObject ObjectB in Objects)\u003Cbr\u003E            {\u003Cbr\u003E                //Objects must not self interact \u003Cbr\u003E                if (ObjectA == ObjectB)\u003Cbr\u003E                    continue;\u003Cbr\u003E\u003Cbr\u003E                ApplyGravity(ObjectA.GetComponent\u0026lt;Rigidbody\u0026gt;(), ObjectB.GetComponent\u0026lt;Rigidbody\u0026gt;()); //should store these GetComponents, they run too often.\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHopefully, someone can make some sense of this. I\u0027m really stuck here! Please note that I DO NOT intend to reuse 90% of this code, as it\u0027s not all mine. Once I can understand what\u0027s going on, I\u0027ll re-write for my project.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-16T17:34:19Z\u0022 title=\u002204/16/2015 05:34  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 16, 2015\u003C/time\u003E by Corbald\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"*Aqua*","CreatedById":103926,"CreatedDateTime":"2015-04-17T01:10:24Z","Content":"\n\u003Cp\u003EMy comments start with // ***.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E//r=norm(rVect);\u003Cbr\u003E//rUnitVect=rVect/r;\u003Cbr\u003E//v=norm(vVect);\u003Cbr\u003E\u003Cbr\u003E// *** about Unity Vector3: http://docs.unity3d.com/ScriptReference/Vector3.html\u003Cbr\u003E// *** looks right\u003Cbr\u003Efloat r = rVect.magnitude; //matlab \u0027norm\u0027 is Unity Vector3.magnitude?\u003Cbr\u003EVector3 rUnitVect = rVect.normalized; // rVect/r is Unity Vector3.normalized?\u003Cbr\u003Efloat v = vVect.magnitude;\u003Cbr\u003E\u003Cbr\u003E//hVect=cross(rVect,vVect);\u003Cbr\u003E//h=norm(hVect);\u003Cbr\u003E//hUnitVect=hVect/h;\u003Cbr\u003E//ThetaUnitVect=cross(hUnitVect,rUnitVect);\u003Cbr\u003E\u003Cbr\u003EVector3 hVect = Vector3.Cross(rVect, vVect);\u003Cbr\u003Efloat h = hVect.magnitude;\u003Cbr\u003EVector3 hUnitVect = hVect.normalized;\u003Cbr\u003EVector3 ThetaUnitVect = Vector3.Cross(hUnitVect, rUnitVect);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E//Energy=v^2/2 - muCB/r;\u003Cbr\u003E//sma=-muCB/(2*Energy);\u003Cbr\u003E\u003Cbr\u003Efloat Energy = Mathf.Pow( v, 2 )/ 2 - muCB / r; //Am I doing order of operation right?\u003Cbr\u003E        // *** looks ok, but if you are unsure put it into brackets\u003Cbr\u003E        // *** example: ((v*v) / 2) - (muCB / r) - it\u0027ll calculate v*v fist, then v\u00C3\u201A\u00C2\u00B2 / 2, then muCB / r and finally the substraction\u003Cbr\u003Efloat sma = -muCB / (2 * Energy);\u003Cbr\u003E\u003Cbr\u003E//p=h^2/muCB;\u003Cbr\u003E//ecc=sqrt(-p/sma \u002B 1);\u003Cbr\u003E\u003Cbr\u003Efloat p = Mathf.Pow(h, 2) / muCB;\u003Cbr\u003Efloat ecc = Mathf.Sqrt(-p / sma \u002B 1);\u003Cbr\u003E\u003Cbr\u003E//TrueAnom=acos((p/r - 1)/(ecc));\u003Cbr\u003E//if(dot(rVect,vVect)\u0026lt;0)\u003Cbr\u003E//    TrueAnom=-TrueAnom;\u003Cbr\u003E//end\u003Cbr\u003E\u003Cbr\u003Efloat TrueAnom = Mathf.Acos((p / r - 1) / ecc);\u003Cbr\u003Eif (Vector3.Dot(rVect, vVect) \u0026lt; 0)\u003Cbr\u003E{\u003Cbr\u003E    TrueAnom = -TrueAnom;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E//inc=acos(hUnitVect(3));\u003Cbr\u003E\u003Cbr\u003Efloat inc = Mathf.Acos(hUnitVect[2]); //Unity vectors are from 0-2, not 1-3\u003Cbr\u003E\u003Cbr\u003E//longAscNode_1=AngleZero2Pi(asin(hUnitVect(1)/sin(inc))); //is AngleZero2Pi a matlab function? what is this?\u003Cbr\u003E        // *** couldn\u0027t find that in the documentation, must be a custom method or from an old MATLAB version\u003Cbr\u003E//longAscNode_2=AngleZero2Pi(pi-asin(hUnitVect(1)/sin(inc)));\u003Cbr\u003E//longAscNode_3=AngleZero2Pi(acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E//longAscNode_4=AngleZero2Pi(-acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E\u003Cbr\u003E//longAscNodeSet1=round(1000*[longAscNode_1,longAscNode_2])/1000; //is this a Mathf.Round as a vector2?\u003Cbr\u003E        // *** I think it is.\u003Cbr\u003E//longAscNodeSet2=round(1000*[longAscNode_3,longAscNode_4])/1000;\u003Cbr\u003E\u003Cbr\u003E//[val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2); //am I finding the intersection of two vector2\u0027s? I don\u0027t know how to read this!\u003Cbr\u003E        // *** foo[a, b, c] is an array: \u0027foo\u0027 is the name of it, abc are the names of three elements inside the array.\u003Cbr\u003E        // *** The named elements allow direct access to array element.\u003Cbr\u003E        // *** Therefore [val,ia,ib] is an unnamed array with three elements, named val, ia and ib.\u003Cbr\u003E//longAscNode=longAscNodeSet1(ia); //I don\u0027t know how to read this!\u003Cbr\u003E        // *** I, too, have no idea what happens here.\u003Cbr\u003E\u003Cbr\u003E//Theta_1=AngleZero2Pi(asin(rUnitVect(3)/sin(inc))); //Quesion as above\u003Cbr\u003E//Theta_2=AngleZero2Pi(pi-asin(rUnitVect(3)/sin(inc)));\u003Cbr\u003E//Theta_3=AngleZero2Pi(acos(ThetaUnitVect(3)/sin(inc)));\u003Cbr\u003E//Theta_4=AngleZero2Pi(-acos(ThetaUnitVect(3)/sin(inc)));\u003Cbr\u003E\u003Cbr\u003E//ThetaSet1=round(1000*[Theta_1,Theta_2])/1000; //Quesion as above\u003Cbr\u003E//ThetaSet2=round(1000*[Theta_3,Theta_4])/1000;\u003Cbr\u003E\u003Cbr\u003E//[val,ia,ib]=intersect(ThetaSet1,ThetaSet2); //Quesion as above\u003Cbr\u003E//Theta=ThetaSet1(ia); //Quesion as above\u003Cbr\u003E\u003Cbr\u003E//ArgPeri=Theta-TrueAnom; //If I could figure out the above, this might make sense!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E//some stuff will go here to draw the elipse/orbits. I\u0027ll tackle that later, after I make sense of the rest.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evoid FixedUpdate()\u003Cbr\u003E{\u003Cbr\u003E    //Get every object \u003Cbr\u003E    GameObject[] Objects = GameObject.FindGameObjectsWithTag(\u0022Star\u0022); //This runs too often. Extract to Start() later to optimize.\u003Cbr\u003E            // *** Am I right that the amount of \u0027Star\u0027 objects don\u0027t change while playing? In that case it might be a good idea to only\u003Cbr\u003E            // *** search for them once and put the result into an array.\u003Cbr\u003E\u003Cbr\u003E    //the gravity between each couple of object is calculated\u003Cbr\u003E    foreach (GameObject ObjectA in Objects)\u003Cbr\u003E    {\u003Cbr\u003E        foreach (GameObject ObjectB in Objects)\u003Cbr\u003E                // *** Two nested loops are bad if there are a lot of objects because they need a runtime of (number of objects)^2.\u003Cbr\u003E                // *** You can do this when you know the number of objects stays small.\u003Cbr\u003E        {\u003Cbr\u003E            //Objects must not self interact \u003Cbr\u003E            if (ObjectA == ObjectB)\u003Cbr\u003E                continue;\u003Cbr\u003E\u003Cbr\u003E            ApplyGravity(ObjectA.GetComponent\u0026lt;Rigidbody\u0026gt;(), ObjectB.GetComponent\u0026lt;Rigidbody\u0026gt;()); //should store these GetComponents, they run too often.\u003Cbr\u003E                    // *** Same as above. If the objects don\u0027t get replaced during play, store them into a property or something like that to avoid using the methods.\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you want to understand what you are calculating then read a book about the prediction calculation of an orbit. Whoever wrote the MATLAB code did the same thing. A lot of that stuff is weird for me, too.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-17T01:13:53Z\u0022 title=\u002204/17/2015 01:13  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 17, 2015\u003C/time\u003E by *Aqua*\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Corbald","CreatedById":2219,"CreatedDateTime":"2015-04-17T02:50:34Z","Content":"\n\u003Cp\u003EHey Aqua, thanks for the response. Looks like I need to know how AngleZero2Pi works. Hopefully someone that understands the maths can help me figure that out. Unfortunately, I can\u0027t learn from math books, as previous experience has taught me. My mind can\u0027t stay focused to that degree. I HAVE, however, primed myself with a bit of understanding from the helpful folks who air lessons on Youtube. That said, I\u0027m not going to understand it until I put it in practice. Thus this endeavor.\u003C/p\u003E\u003Cp\u003ESo, the questions remaining are:\u003C/p\u003E\u003Cp\u003EHow do these work?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//longAscNode_1=AngleZero2Pi(asin(hUnitVect(1)/sin(inc))); //is AngleZero2Pi a matlab function? what is this?\u003Cbr\u003E        // *** couldn\u0027t find that in the documentation, must be a custom method or from an old MATLAB version\u003Cbr\u003E//longAscNode_2=AngleZero2Pi(pi-asin(hUnitVect(1)/sin(inc)));\u003Cbr\u003E//longAscNode_3=AngleZero2Pi(acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E//longAscNode_4=AngleZero2Pi(-acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//[val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2); //am I finding the intersection of two vector2\u0027s? I don\u0027t know how to read this!\u003Cbr\u003E        // *** foo[a, b, c] is an array: \u0027foo\u0027 is the name of it, abc are the names of three elements inside the array.\u003Cbr\u003E        // *** The named elements allow direct access to array element.\u003Cbr\u003E        // *** Therefore [val,ia,ib] is an unnamed array with three elements, named val, ia and ib.\u003Cbr\u003E//longAscNode=longAscNodeSet1(ia); //I don\u0027t know how to read this!\u003Cbr\u003E        // *** I, too, have no idea what happens here.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eif longAscNodeSet1 and longAscNodeSet2 are vector2\u0027s, then [val,ia,ib] should be a vector2, but it\u0027s got three elements. what the heck is \u0027val\u0027? If it IS a vector 2, then longAscNodeSet1(ia) should be something like longAscNodeSet1.x, riiiight?\u003C/p\u003E\u003Cp\u003E*Later*, I found this for [val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EDefine two vectors with values in common.\u003Cbr\u003E\u003Cbr\u003EA = [7 1 7 7 4]; B = [7 0 4 4 0];\u003Cbr\u003EFind the values common to both A and B, as well as the index vectors ia and ib, such that C = A(ia) and C = B(ib).\u003Cbr\u003E\u003Cbr\u003E[C,ia,ib] = intersect(A,\u003Cbr\u003EC =\u003Cbr\u003E\u003Cbr\u003E     4     7\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eia =\u003Cbr\u003E\u003Cbr\u003E     5\u003Cbr\u003E     1\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eib =\u003Cbr\u003E\u003Cbr\u003E     3\u003Cbr\u003E     1\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWorst case: I write a function which does this, myself. Does unity do anything like this, built in? I\u0027ll run with the assumption that it does not (since I can\u0027t find anything in their docs) and code my own, but if anyone knows a shortcut, lemme know!\u003C/p\u003E\u003Cp\u003EThat just leaves AngleZero2Pi! Anyone have insight?\u003C/p\u003E\n"},{"CreatedByName":"Fel","CreatedById":57121,"CreatedDateTime":"2015-04-17T05:43:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Corbald\u0022 data-cite=\u0022Corbald\u0022\u003E\u003Cdiv\u003EHey Aqua, thanks for the response. Looks like I need to know how AngleZero2Pi works. Hopefully someone that understands the maths can help me figure that out. Unfortunately, I can\u0027t learn from math books, as previous experience has taught me. My mind can\u0027t stay focused to that degree. I HAVE, however, primed myself with a bit of understanding from the helpful folks who air lessons on Youtube. That said, I\u0027m not going to understand it until I put it in practice. Thus this endeavor.\u003Cp\u003ESo, the questions remaining are:\u003C/p\u003E\u003Cp\u003EHow do these work?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//longAscNode_1=AngleZero2Pi(asin(hUnitVect(1)/sin(inc))); //is AngleZero2Pi a matlab function? what is this?\u003Cbr\u003E        // *** couldn\u0027t find that in the documentation, must be a custom method or from an old MATLAB version\u003Cbr\u003E//longAscNode_2=AngleZero2Pi(pi-asin(hUnitVect(1)/sin(inc)));\u003Cbr\u003E//longAscNode_3=AngleZero2Pi(acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E//longAscNode_4=AngleZero2Pi(-acos(-hUnitVect(2)/sin(inc)));\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//[val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2); //am I finding the intersection of two vector2\u0027s? I don\u0027t know how to read this!\u003Cbr\u003E        // *** foo[a, b, c] is an array: \u0027foo\u0027 is the name of it, abc are the names of three elements inside the array.\u003Cbr\u003E        // *** The named elements allow direct access to array element.\u003Cbr\u003E        // *** Therefore [val,ia,ib] is an unnamed array with three elements, named val, ia and ib.\u003Cbr\u003E//longAscNode=longAscNodeSet1(ia); //I don\u0027t know how to read this!\u003Cbr\u003E        // *** I, too, have no idea what happens here.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eif longAscNodeSet1 and longAscNodeSet2 are vector2\u0027s, then [val,ia,ib] should be a vector2, but it\u0027s got three elements. what the heck is \u0027val\u0027? If it IS a vector 2, then longAscNodeSet1(ia) should be something like longAscNodeSet1.x, riiiight?\u003C/p\u003E\u003Cp\u003E*Later*, I found this for [val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EDefine two vectors with values in common.\u003Cbr\u003E\u003Cbr\u003EA = [7 1 7 7 4]; B = [7 0 4 4 0];\u003Cbr\u003EFind the values common to both A and B, as well as the index vectors ia and ib, such that C = A(ia) and C = B(ib).\u003Cbr\u003E\u003Cbr\u003E[C,ia,ib] = intersect(A,\u003Cbr\u003EC =\u003Cbr\u003E\u003Cbr\u003E     4     7\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eia =\u003Cbr\u003E\u003Cbr\u003E     5\u003Cbr\u003E     1\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eib =\u003Cbr\u003E\u003Cbr\u003E     3\u003Cbr\u003E     1\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWorst case: I write a function which does this, myself. Does unity do anything like this, built in? I\u0027ll run with the assumption that it does not (since I can\u0027t find anything in their docs) and code my own, but if anyone knows a shortcut, lemme know!\u003C/p\u003E\u003Cp\u003EThat just leaves AngleZero2Pi! Anyone have insight?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.google.com/search?q=%2BAngleZero2Pi\u0026amp;spell\u0026amp;hl=en\u0026amp;sa=X\u0026amp;\u0026amp;as_q\u0026amp;nfpr=1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.google.com/search?q=%2BAngleZero2Pi\u0026amp;spell\u0026amp;hl=en\u0026amp;sa=X\u0026amp;\u0026amp;as_q\u0026amp;nfpr=1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ECustom function, my guess? some kind of wrap.\u003C/p\u003E\u003Cp\u003EAngle = 540; \u003C/p\u003E\u003Cp\u003EEquivalent Angle = 540 - 360 = 180\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www.mathworks.com/help/map/ref/wraptopi.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.mathworks.com/help/map/ref/wraptopi.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ElongAscNodeSet1=round(1000*[longAscNode_1,longAscNode_2])/1000;\u003Cbr\u003ElongAscNodeSet2=round(1000*[longAscNode_3,longAscNode_4])/1000;\u003Cbr\u003E\u003Cbr\u003E[val,ia,ib]=intersect(longAscNodeSet1,longAscNodeSet2);\u003Cbr\u003ElongAscNode=longAscNodeSet1(ia);\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ethis just says, stupidly (the performance gain for using SSE code is near zero) [actually, I would argue that it is worse off because it is bad SSE code]\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eif (longAscNode_1 == longAscNode_3 || longAscNode_1 == longAscNode_4) longAscNode = longAscNode_1;\u003Cbr\u003Eif (longAscNode_2 == longAscNode_3 || longAscNode_2 == longAscNode_4) longAscNode = longAscNode_2;\u003Cbr\u003E\u003Cbr\u003EOf course, \u0022if both\u0022 then you get a bug where longAscNode = [longAscNode_1, longAscNode_2]\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-17T05:56:26Z\u0022 title=\u002204/17/2015 05:56  AM\u0022 data-short=\u00229 yr\u0022\u003EApril 17, 2015\u003C/time\u003E by Fel\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Corbald","CreatedById":2219,"CreatedDateTime":"2015-04-17T14:27:23Z","Content":"\n\u003Cp\u003EFel, Aqua, you two are CHAMPS! Chuck Norris aspires to be like you! This should be enough for me to get something working!\u003C/p\u003E\u003Cp\u003EFel, I should have realized that the longAscNode gobbledygook was if\u0027s. Makes sense when you run numbers through it! DOH! The Lambda wrapping function would have kept me guessing for weeks! I kept getting lost in the interior of the function\u0027s argument calls! Thanks for clearing that up, especially.\u003C/p\u003E\n"}]}