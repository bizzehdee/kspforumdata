{"TopicId":139320,"ForumId":29,"TopicTitle":"Writing to and reading values from .craft file?","CreatedByName":"blorgon","CreatedById":159569,"CreatedDateTime":"2016-05-08T17:55:54Z","PageNum":1,"Articles":[{"CreatedByName":"blorgon","CreatedById":159569,"CreatedDateTime":"2016-05-08T17:55:54Z","Content":"\n\u003Cp\u003E\nI\u0027m working on a plugin that will need to utilize a name-tagging system for crew-able parts. I\u0027ve looked through the kOS source code (kOS uses a right click context menu to give parts a name tag), but honestly, I can\u0027t figure out what a lot of it means, since almost none of it is commented out.\u00A0There are a few things I need to do differently, anyway. I need to give parts name tags only in the editor, I need to give the editor an *additional* description-type box via a GUI, and I need my plugin to be able to read those values when the craft is loaded onto the launchpad for the first time. I\u0027m brand new to C#, and I\u0027ve been looking through the new API stickied in this sub, but I really don\u0027t know what a lot of it means since most of the entries don\u0027t have descriptions. Even the ones that do, I can\u0027t figure out how to actually write them into my code.\n\u003C/p\u003E\n\u003Cp\u003E\nThe way I understand it, I need to be able to write these name tags to my plugin\u0027s corresponding\u00A0config node\u00A0in the .craft file, and the description-type box input needs to create a field\u00A0and then\u00A0write\u00A0a value for it at the top of the .craft file, where the vessel name and description go. So, I need to figure out how to write these values into the .craft file AND how to later read them.\n\u003C/p\u003E\n\u003Cp\u003E\nYes, yes, I need to learn more C#. I get that, \u003Cem\u003Ebut this is part of my learning\u003C/em\u003E. I\u0027m at a point in the development of my plugin where I just don\u0027t know how I can progress further without having to resort to just asking somebody more experienced to just explain stuff to me\u2014which, believe me, is super frustrating. I would really prefer to learn this stuff on my own, since you\u0027re all busy with your own plugins, and I like figuring things out on my own,\u00A0but I\u0027m starting to lose confidence in my ability to actually get this working in a reasonable amount of time.\n\u003C/p\u003E\n\u003Cp\u003E\nAny and all help is greatly appreciated!\n\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2016-05-08T19:43:38Z","Content":"\n\u003Cp\u003E\nSaving and loading Part based variables are relatively easy. Make a \u003Ca href=\u0022https://github.com/Crzyrndm/Thermal-Monitor/blob/master/Thermal%20Monitor/Thermal%20Monitor/Thermal%20Monitor.cs#L10\u0022 rel=\u0022external nofollow\u0022\u003EPartModule\u003C/a\u003E, add a \u003Ca href=\u0022https://github.com/Crzyrndm/Thermal-Monitor/blob/master/Thermal%20Monitor/Thermal%20Monitor/Thermal%20Monitor.cs#L13\u0022 rel=\u0022external nofollow\u0022\u003Estring global variable\u003C/a\u003E, and tag it with \u003Ca href=\u0022https://github.com/Crzyrndm/RW-Saturatable/blob/master/SaturatableRW/RWSaturatable.cs#L89\u0022 rel=\u0022external nofollow\u0022\u003EKSPField \u003C/a\u003Eattribute with \u0022isPersistent=true\u0022 and \u0022guiActiveEditor=true\u0022. That gives you a string on that part which is visible in the editor and will be the same value on the launchpad (after the modules .OnLoad method has run that is)\n\u003C/p\u003E\n\u003Cp\u003E\nTo get the value back, you can either check it inside the module or get it from any other class in your project with: aVessel.parts\u003Cem\u003E.Modules.GetModule\u0026lt;MyModule\u0026gt;().stringVar \u003C/em\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-08T19:44:15Z\u0022 title=\u002205/08/2016 07:44  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 8, 2016\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"blorgon","CreatedById":159569,"CreatedDateTime":"2016-05-09T14:45:23Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222569490\u0022 data-ipsquote-contentid=\u0022139320\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221462736618\u0022 data-ipsquote-userid=\u002292871\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 hours ago, Crzyrndm said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSaving and loading Part based variables are relatively easy. Make a \u003Ca href=\u0022https://github.com/Crzyrndm/Thermal-Monitor/blob/master/Thermal%20Monitor/Thermal%20Monitor/Thermal%20Monitor.cs#L10\u0022 rel=\u0022external nofollow\u0022\u003EPartModule\u003C/a\u003E, add a \u003Ca href=\u0022https://github.com/Crzyrndm/Thermal-Monitor/blob/master/Thermal%20Monitor/Thermal%20Monitor/Thermal%20Monitor.cs#L13\u0022 rel=\u0022external nofollow\u0022\u003Estring global variable\u003C/a\u003E, and tag it with \u003Ca href=\u0022https://github.com/Crzyrndm/RW-Saturatable/blob/master/SaturatableRW/RWSaturatable.cs#L89\u0022 rel=\u0022external nofollow\u0022\u003EKSPField \u003C/a\u003Eattribute with \u0022isPersistent=true\u0022 and \u0022guiActiveEditor=true\u0022. That gives you a string on that part which is visible in the editor and will be the same value on the launchpad (after the modules .OnLoad method has run that is)\n\u003C/p\u003E\n\u003Cp\u003E\nTo get the value back, you can either check it inside the module or get it from any other class in your project with: aVessel.parts\u003Cem\u003E.Modules.GetModule\u0026lt;MyModule\u0026gt;().stringVar \u003C/em\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAwesome. Thank you! As soon as finals are done today I\u0027m gonna dig in and start working on that.\n\u003C/p\u003E\n\u003Cp\u003E\nQuick clarification:\n\u003C/p\u003E\n\u003Cp\u003E\nIn the module, I could have, say, three different values\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EName = value1\nDescription = value2\nTitle = value3\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nand call all three using\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EaVessel.parts.Modules.GetModule\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;MyModule\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E().stringName\naVessel.parts.Modules.GetModule\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;MyModule\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E().stringDescription\naVessel.parts.Modules.GetModule\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;MyModule\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E().stringTitle\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-09T14:49:55Z\u0022 title=\u002205/09/2016 02:49  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 9, 2016\u003C/time\u003E by blorgon\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"blorgon","CreatedById":159569,"CreatedDateTime":"2016-05-09T17:56:18Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222569490\u0022 data-ipsquote-contentid=\u0022139320\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221462736618\u0022 data-ipsquote-userid=\u002292871\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n22 hours ago, Crzyrndm said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThat gives you a string on that part which is visible in the editor and will be the same value on the launchpad (after the modules .OnLoad method has run that is)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAnother question, what about dynamically declaring those variables? Unless I\u0027m misunderstanding you, it sounds like what you\u0027re suggesting is declaring the string in the code, and that will show up in the editor and on the pad. I need to have the user be able to write their own values. I\u0027m still looking around (mostly unsuccessfully) for a good resource on building a GUI, so that the user can actually do this.\n\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2016-05-09T19:56:25Z","Content":"\n\u003Cp\u003E\nThen you probably want a ConfigNode to save to/load from rather than an explicit string, or you can explicitly modify the PartModules OnSave/Onload methods to save/load a list/array/custom class that KSP might not serialise by default\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pun\u0022\u003E[\u003C/span\u003E\u003Cspan\u003EKSPField\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EisPersistent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E myVars\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Somewhere else...\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// loading\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\nstring\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E[]\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E stuff \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E myVars\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetValues\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\nforeach\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estring s in stuff\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// parse the strings saved however you like \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//saving\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\nmyVars\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EClear\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// I think that\u0027s the right method. You almost certainly want to load it all in and then recreate the serialised node whenever you save.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\nmyVars\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAddValue\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022key\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022value\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// I don\u0027t normally bother with the key for fully custom stuff, just format the value with all the information you need\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-09T19:59:52Z\u0022 title=\u002205/09/2016 07:59  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 9, 2016\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"}]}