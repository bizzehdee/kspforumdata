{"TopicId":138993,"ForumId":55,"TopicTitle":"Basic Profiling Support for KSP innards and Mods","CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-04T22:18:51Z","PageNum":1,"Articles":[{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-04T22:18:51Z","Content":"\n\u003Cp\u003E\nWhile we do have a FPS view under the debug window we lack any kind of info on what exactly is affecting the speed.\u003Cbr\u003E\nThis wastes a LOT of unneeded cpu cycles and end user\u00A0performance, since modders dont have access to a proper profiling window and thus cannot estimate the CPU\u00A0cost of their mod effectively. ( which in turn means un-optimized mods or worst case someone doing per frame calculations since\u00A0they don\u0027t feel a drastic draw-down using only a few mods )\u003Cbr\u003E\nI heard you are using the default unity update loop logic and thus are not directly in control of calling the updates ( which could be a effective improvement if you take the amount of classes attached to each object in regard - see\u00A0\u003Ca href=\u0022http://blogs.unity3d.com/2015/12/23/1k-update-calls/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://blogs.unity3d.com/2015/12/23/1k-update-calls/\u003C/a\u003E\u00A0), So you cannot enforce profiling by yourself - however using a simple stopwatch list and dictionary with some public access functions you can allow both yourself and modders to add named entries into a list which allow a quick view of the innards of whats taking so long.\u003Cbr\u003E\nOften the cause of slowdowns can be incompability between mods or just issue with version updates like we just had with 1.1.2, and as a end user i at least\u00A0had a very hard time figuring out exactly which mod was causing the issue (131 installed mods and counting)...\u003Cbr\u003E\u003Cbr\u003E\nI\u0027m thus proposing a simple piece of code like unitiy\u0027s\u00A0profiler:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre style=\u0022margin:0px 0px 30px;padding:20px;font-size:.9375em;font-weight:normal;font-style:normal;font-family:Consolas, Monaco, \u0027Andale Mono\u0027, monospace;border:1px solid rgb(221,221,221);color:rgb(69,84,99);font-variant:normal;letter-spacing:normal;line-height:21.6px;text-indent:0px;text-transform:none;word-spacing:0px;background:rgb(255,255,255);\u0022\u003E\n        KSP\u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Profiler.BeginSample.html\u0022 style=\u0022color:rgb(184,60,130);text-decoration:underline;\u0022 rel=\u0022external nofollow\u0022\u003EProfiler.BeginSample\u003C/a\u003E(\u0022MyPieceOfCode\u0022);\n        KSP\u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Profiler.EndSample.html\u0022 style=\u0022color:rgb(184,60,130);text-decoration:underline;\u0022 rel=\u0022external nofollow\u0022\u003EProfiler.EndSample\u003C/a\u003E(\u0022MyPieceOfCode\u0022);\u003C/pre\u003E\n\u003Cp\u003E\nOnce EndSample is called you check the correct stopwatch and insert its elapsedtime into a dictionary with the name as key, and show under the default F12 FPS view as a list,\u003Cbr\u003E\nIt would be up to SQUAD and the modders to add this to their code for now, but it would be a very helpful tool for everyone involced and allows us end users to get a idea of whats causing our \u0026lt; 100 part craft to snail along with low FPS and horrible simulationtime ratio.\n\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2016-05-05T01:25:37Z","Content":"\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/102909-ksp-plugin-debugging-and-profiling-for-visual-studio-and-monodevelop-on-all-os/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-05T10:22:39Z","Content":"\n\u003Cp\u003E\nYes i tried that as a end user to track a slowdown i had, which made me create this post.\u003Cbr\u003E\nWhile this hack\u00A0does allow one to test ones own mod, as a end user its not helpful at all.\u003Cbr\u003E\n1) because 99,9% of all lines are just mono.dll or unityengine.dll calls with no info since its not a full debug release with\u00A0the necessary\u00A0pdb files,\u003Cbr\u003E\n2) because there is no consensus that this has to be supported offiicially,\u00A0mods dont release the pdb files with their mods either.\u003Cbr\u003E\nSo i can only see that something is taking up time, but i can see the same info inside the simple FPS viewer.\u003Cbr\u003E\nWhat is missing is a way to see if its a MechJeb feature that is using 17ms per frame, or\u00A0Remote Tech... or some SQUAD function, like calculating resources or the new\u00A0wheels code - so you can report the issue to the correct person... which then can track it with debugging their own code.\u003Cbr\u003E\nAtm its just guesswork and many many hours spend uninstalling and reinstalling folders and mods to circle in what can be the cause.\u003Cbr\u003E\nWhich means its really not useful for tracking real life situations ( bug only appears after long duration and in combination with x )\u00A0\u00A0- only\u00A0once a bug has already been confirmed and found a way to recreate it will this help to advance the tracking of whats wrong.\u003Cbr\u003E\u003Cbr\u003E\nSo either we need to promote debuggability, and provide pdb files as default for this ( which requires\u00A0people to be power users with coding \u0026amp; profiling\u00A0knowledge to report better\u00A0error reports )\u00A0...\u003Cbr\u003E\nor we need basic profiling support so its just a matter of reading a simple list box that anyone can do.\u003Cbr\u003E\u003Cbr\u003E\nEDIT:\u003Cbr\u003E\nAnd as far as modders are concerned, there is simply no way to test a mod in all possible combinations with other mods / Real life situations.\u003Cbr\u003E\n\u0022In game\u0022 profiling would allow to collect data from the actual users,\u00A0beyond the developers controlled environment,\u00A0and detect conflicts/issues\u00A0by simply comparing data from multiple users,\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-05T12:02:07Z\u0022 title=\u002205/05/2016 12:02  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 5, 2016\u003C/time\u003E by Lennartos\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2016-05-05T18:41:59Z","Content":"\n\u003Cp\u003E\nAll mods must release source with them, therefore you can recompile them with pdb files.\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-05T19:50:31Z","Content":"\n\u003Cp\u003E\nYes, if the cause was a mod, and\u00A0i already knew which mod was causing the issue i could debug that single mod and solve it.\u003Cbr\u003E\nBut thats not really solving the issue, which is figuring out WHICH of the 130 mods i need to look at - or if its a mod at all.\u003Cbr\u003E\nWe simply lack some very basic tools to get a overview over whats happening - WHY is FPS low - what part of the code/game is slowing down.\u003Cbr\u003E\nAnything i say more would essentially just be repeating the points above.\u003Cbr\u003E\u003Cbr\u003E\nFinding a known issue, in a known filebase (which mod / part of the codebase) that is easely reproducable is a lot different from finding \u0022random\u0022 slowdowns that only happen after playing a while.\u003Cbr\u003E\nThe second DO happen, and my game still isn\u0027t that fluid atm\u00A0and i simply have no chance of knowing\u00A0whats causing it without recompiling 130 mods and hoping i will get lucky.\u003Cbr\u003E\nDictionary with stopwatch would be a few hours / single day well spend for future patches.\n\u003C/p\u003E\n"},{"CreatedByName":"ShotgunNinja","CreatedById":159391,"CreatedDateTime":"2016-05-05T23:24:26Z","Content":"\n\u003Cp\u003E\nI think its not practical to assume most mods will use this feature if present, so that you can have a panoramic view of what\u0027s taking time. The unaccounted\u00A0time will then be a problem in the analysis. Also profiling isn\u0027t cheap,\u00A0the reason is for the time measurement you got only two choices at the end of the day: call QueryPerformanceCounter, or get the timestamp register value. The former is slow (in the realtime graphics sense of the term), the latter is faster but can\u0027t be interpreted as wall clock. If you get key methods (the most called, incidentally the ones you want t o profile)\u00A0to open and close with a WINAPI call, or even rdtsc, you will just add a lot\u00A0of overhead, I mean it, a lot. This is a common problem, many are just moving to external sample-based profilers for this. The best solution, in my opinion, is to make your own simple profiler and use it to profile\u00A0your own mod, then disable it in release.\n\u003C/p\u003E\n\u003Cp\u003E\nMaybe we could collaborate to make one and share it with the community, to avoid reinventing the wheel? I like the API you proposed,\u00A0I created and used something very similar for a long time. Regards.\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-06T10:21:12Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222563859\u0022 data-ipsquote-contentid=\u0022138993\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221462490666\u0022 data-ipsquote-userid=\u0022159391\u0022 data-ipsquote-username=\u0022ShotgunNinja\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n10 hours ago, ShotgunNinja said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI think its not practical to assume most mods will use this feature if present, so that you can have a panoramic view of what\u0027s taking time. The unaccounted\u00A0time will then be a problem in the analysis. Also profiling isn\u0027t cheap,\u00A0the reason is for the time measurement you got only two choices at the end of the day: call QueryPerformanceCounter, or get the timestamp register value. The former is slow (in the realtime graphics sense of the term), the latter is faster but can\u0027t be interpreted as wall clock. If you get key methods (the most called, incidentally the ones you want t o profile)\u00A0to open and close with a WINAPI call, or even rdtsc, you will just add a lot\u00A0of overhead, I mean it, a lot. This is a common problem, many are just moving to external sample-based profilers for this. The best solution, in my opinion, is to make your own simple profiler and use it to profile\u00A0your own mod, then disable it in release.\n\u003C/p\u003E\n\u003Cp\u003E\nMaybe we could collaborate to make one and share it with the community, to avoid reinventing the wheel? I like the API you proposed,\u00A0I created and used something very similar for a long time. Regards.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell only if it would be official from SQUAD\u00A0would modders likely integrate into all, but yeah - making our own solution might be a first step to general acceptance.\u003Cbr\u003E\nI have never made GUI inside KSP - im thinking we will need something to simulate a treeview to hide away internal \u0022inclusive\u0022 nodes until wanted.\u003Cbr\u003E\nSo \u002B button to expand a node - do you have the necessary knowledge to do that atm?\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-06T11:16:05Z","Content":"\n\u003Cp\u003E\nAs for performance i got a few ideas:\u003Cbr\u003E\n1) its disabled per default, once activated we sum all times together until deactivated again ( we then show accumulated performance statistics or measurement window)\u003Cbr\u003E\n2) we already know that its single threaded, so there is actually no need for more complexity than a single stopwatch and then just get the elapsed time on each sample start /end.\u003Cbr\u003E\nThe speed cost during those few seconds is neglible and easely acceptable since it doesnt affect runtime performance for end users\u003Cbr\u003E\u003Cbr\u003E\nThe only real cost\u00A0is checking/detecting if the mod is installed and then skip the code.\u003Cbr\u003E\nWhats the best way to solve that?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-06T11:16:36Z\u0022 title=\u002205/06/2016 11:16  AM\u0022 data-short=\u00228 yr\u0022\u003EMay 6, 2016\u003C/time\u003E by Lennartos\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ShotgunNinja","CreatedById":159391,"CreatedDateTime":"2016-05-06T12:33:56Z","Content":"\n\u003Cp\u003E\nI have messed around with GUILayout stuff and it should\u0027t be hard to make an UI for this.\n\u003C/p\u003E\n\u003Cp\u003E\nI was thinking more about a self-contained class that one would just include in its sources, instead of a mod.\n\u003C/p\u003E\n\u003Cp\u003E\nI believe C# has some facilities to disable\u00A0functions\u00A0using compiler flags (so no code is emitted, and the dev don\u0027t need to comment / uncomment\u00A0the profiler calls). That can be used for the profiling calls.\n\u003C/p\u003E\n\u003Cp\u003E\nDetecting if a mod is installed is \u0027relatively\u0027 costly, but can be done just once (then we just evaluate a bool for each profiling call). I we use\u00A0the \u0027include in your source\u0027 \u00A0approach we don\u0027t even need to do this.\n\u003C/p\u003E\n\u003Cp\u003E\nDo you have any experience with writing hierarchical profilers? Myself I always wrote and use \u0027flat\u0027 ones. Sure it may be desiderable to have the hierarchy.\n\u003C/p\u003E\n\u003Cp\u003E\nWe should make a\u00A0\u0027frame-based\u0027 profiler, were each entry has:\n\u003C/p\u003E\n\u003Cp\u003E\n- average function time\u003Cbr\u003E\n- number of calls\u003Cbr\u003E\n- total function time\n\u003C/p\u003E\n\u003Cp\u003E\nall relative to the last frame.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat you think?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2016-05-06T18:51:36Z","Content":"\n\u003Cp\u003E\nOnGUI is not a good choice. It chucks garbage and is itself slow.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso IIRC from Sarbian you will at least get toplines without pdbs. I highly suggest you try the method described before baldly dismissing it.\n\u003C/p\u003E\n"},{"CreatedByName":"Padishar","CreatedById":97386,"CreatedDateTime":"2016-05-06T20:31:30Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222565567\u0022 data-ipsquote-contentid=\u0022138993\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221462560696\u0022 data-ipsquote-userid=\u002275006\u0022 data-ipsquote-username=\u0022NathanKell\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, NathanKell said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOnGUI is not a good choice. It chucks garbage and is itself slow.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIndeed it is. \u00A0Try installing \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/139128-112-memgraph-1001/\u0022 rel=\u0022\u0022\u003Ethis mod\u003C/a\u003E and then, once at the main menu, hit Mod-F2 to display the log window. \u00A0When I did this earlier I was getting ~28 KB/s sat at the main menu but nearly 5 MB/s when the log dialog was open...\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve also written a \u003Ca href=\u0022https://github.com/Gerry1135/PatchReqRes\u0022 rel=\u0022external nofollow\u0022\u003Esimple profiler\u003C/a\u003E for the internals of KSP that graphs\u00A0the percentage of time the main thread spends in various functions. \u00A0A mod can easily be profiled by inserting the start and stop calls directly in the mod source or the PatchAsm part could be extended to support patching of different assemblies.\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-06T21:02:19Z","Content":"\n\u003Cp\u003E\nvery interesting Padishar, will test immidiatly.\u003Cbr\u003E\nBut sounds to me like you almost solved it all already.\n\u003C/p\u003E\n\u003Cp\u003E\nIf \u003Cspan style=\u0022color:rgb(39,42,52);font-family:\u0027Helvetica Neue\u0027, Helvetica, Arial, sans-serif;font-size:14px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:22.4px;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;float:none;background-color:rgb(255,255,255);\u0022\u003EPatchAsm\u003C/span\u003E could also\u00A0auto insert your profile code automatically in all the assemblies with assembly\u00A0name \u002B class name filled in ( attaching to basic entries like updpate etc ), then we\u00A0would already be golden for a quick overview.\u003Cbr\u003E\nAnd again: we dont need another profile method for code we created ourselves, thats what serbians hack is for\u00A0- the point is to oveview ALL code paths and\u00A0detect anomalies ( something broke / is incompatible )\u00A0\u00A0or general resource usage ( so we know cost of specific mods )\u003Cbr\u003E\u003Cbr\u003E\nEven better: we would have memory \u002B profiling in one tool.\n\u003C/p\u003E\n"},{"CreatedByName":"Lennartos","CreatedById":163579,"CreatedDateTime":"2016-05-06T21:21:38Z","Content":"\n\u003Cp\u003E\nJust tried serbians profile hack again, and this time installed 5.2.4 instead of using the 5.3.1 i already use for a project.\u003Cbr\u003E\nNow i actually get correct profile data, and a basic\u00A0overview.\u003Cbr\u003E\u003Cbr\u003E\nIts not something that the average user can do, but at a glance i can now see that a really big sinner is ampyear, consuming an entire 4ms \u002B allocating 358KB\u00A0each frame.\n\u003C/p\u003E\n"}]}