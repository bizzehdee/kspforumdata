{"TopicId":43707,"ForumId":34,"TopicTitle":"kOS Scriptable Autopilot System 0.9","CreatedByName":"KevinLaity","CreatedById":68050,"CreatedDateTime":"2013-08-24T14:28:17Z","PageNum":83,"Articles":[{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-25T19:22:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AbeS\u0022 data-cite=\u0022AbeS\u0022\u003E\u003Cdiv\u003EIs it too hard to get isp, like we get maxthrust? that would be a pretty nice addition, also dry and/or fuel mass would be wonderful! KER and MJ have that info already!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t know. I really like to use \u003Cem\u003Emaxthrust\u003C/em\u003E, but at the same time I realize it is not something you can realistically query in a real craft. That is even more the case with mass, which is impossible to accurately measure in flight. Yet with kOS it is possible.\u003C/p\u003E\u003Cp\u003EI would like things like (individual) engine thrust, which can be realistically measured, along with individual engine control. That way you can write your own stabilisation control instead of just locking yourself to a heading.\u003C/p\u003E\n"},{"CreatedByName":"nothke","CreatedById":51185,"CreatedDateTime":"2013-11-25T20:06:01Z","Content":"\n\u003Cp\u003Ehow to check if RCS or SAS are NOT on?\u003C/p\u003E\u003Cp\u003E\u0022if SAS\u0022 works, but there is no negation.. \u0022SAS = OFF\u0022 \u0022!SAS\u0022 \u0022NOT SAS\u0022 \u0022SAS = 0\u0022 doesn\u0027t work...\u003C/p\u003E\u003Cp\u003EOr do I need to set an int variable to do this (as I am doing right now)?\u003C/p\u003E\u003Cp\u003EAlso how to check when the gear has completed retracting / extending?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-25T20:13:07Z\u0022 title=\u002211/25/2013 08:13  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 25, 2013\u003C/time\u003E by nothke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-25T20:37:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nothke\u0022 data-cite=\u0022nothke\u0022\u003E\u003Cdiv\u003Ehow to check if RCS or SAS are NOT on?\u003Cp\u003E\u0022if SAS\u0022 works, but there is no negation.. \u0022SAS = OFF\u0022 \u0022!SAS\u0022 \u0022NOT SAS\u0022 \u0022SAS = 0\u0022 doesn\u0027t work...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis works:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EIf sas = \u0022False\u0022 {print \u0022SAS is not on\u0022.}.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAlso how to check when the gear has completed retracting / extending?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI do not think you can check whether it is done retracting or extending. As soon as the command to extend/retract is given, the boolean will return True/False as if it was already done. The best solution would probably be to wait the time it takes to extend or retract.\u003C/p\u003E\n"},{"CreatedByName":"foma87","CreatedById":94434,"CreatedDateTime":"2013-11-25T20:51:21Z","Content":"\n\u003Cp\u003EHi there. This is my first post. I\u00C3\u201A\u00C2\u00B4ve been a long time stalker on these forums and basically just registered because of KOS. I\u00C3\u201A\u00C2\u00B4d like to say that this is an incredible mod. Thanks for all the work!\u003C/p\u003E\u003Cp\u003ENow I\u00C3\u201A\u00C2\u00B4m not sure if this is the right thread for it, since I don\u0060t know if the problem I encounter with my script is a mathematical one or a bug in the mod. Anyway, since I\u00C3\u201A\u00C2\u00B4ve already started, I might as well just state my problem:\u003C/p\u003E\u003Cp\u003EWhat I am trying to achieve is have a readout of the angle between 2 bodies orbiting the same body. I took Kerbin, a satellite in Kerbin orbit and the Mun as an example. This is basically what it looks like (excuse my paint):\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/WTPVz4b.png\u0022 alt=\u0022WTPVz4b.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe angle needed is \u00C3\u017D\u00C2\u00B3. Now in order to get \u00C3\u017D\u00C2\u00B3 basic triangulation is used in the form of this formula, since the length of the sides of the triangle are known:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://upload.wikimedia.org/math/3/6/6/36630193028e4ef714b66789b3820619.png\u0022 alt=\u002236630193028e4ef714b66789b3820619.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is what it looks like when scripted:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E//Altitude of the Satellite\u003C/p\u003E\u003Cp\u003Eset a to altitude. \u003C/p\u003E\u003Cp\u003E//Altitude of the Mun\u003C/p\u003E\u003Cp\u003Eset b to 11400000. \u003C/p\u003E\u003Cp\u003E//Distance between Satellite and Mun\u003C/p\u003E\u003Cp\u003Eset c to target:distance.\u003C/p\u003E\u003Cp\u003E//Triangulation formula\u003C/p\u003E\u003Cp\u003Eset d to (b^2\u002Ba^2-c^2)/(2*a*\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E.\u003C/p\u003E\u003Cp\u003Eset phi to arccos(d).\u003C/p\u003E\u003Cp\u003E//Angle readout\u003C/p\u003E\u003Cp\u003Eprint \u0022phi\u0022.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENote: Explanations were added in this script. Additionally the original script loops this procedure.\u003C/p\u003E\u003Cp\u003EThe problem is, the \u0022phi\u0022-readouts are often NaN\u00C3\u201A\u00C2\u00B0 (I\u00C3\u201A\u00C2\u00B4d be very thankful if anyone could explain this expression to me). Sometimes I get correct angle readouts (compared with VOIDmod current phase angles), and sometimes I get NaN\u00C3\u201A\u00C2\u00B0. Specifically when \u00C3\u017D\u00C2\u00B3 gets wide (from my impression I\u00C3\u201A\u00C2\u00B4d say when \u00C3\u017D\u00C2\u00B3\u0026gt;120\u00C3\u201A\u00C2\u00B0). I say impression, because I haven\u0060t found it to be always at the same degree.\u003C/p\u003E\u003Cp\u003EI would like to ask if anyone else has tried using this method to calculate angles or knows any other method for getting precise angles, or if I completely messed up the approach to this problem. The angle would be used to compare the optimal ejection angle with the current phase angle, in order to script the transfer burn at exactly the right place. Would be much appreciated.\u003C/p\u003E\n"},{"CreatedByName":"nothke","CreatedById":51185,"CreatedDateTime":"2013-11-25T21:00:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EThis works:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EIf sas = \u0022False\u0022 {print \u0022SAS is not on\u0022.}.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI do not think you can check whether it is done retracting or extending. As soon as the command to extend/retract is given, the boolean will return True/False as if it was already done. The best solution would probably be to wait the time it takes to extend or retract.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks! It would be useful to add the SAS = \u0022False\u0022 to the wiki.\u003C/p\u003E\n"},{"CreatedByName":"Sma","CreatedById":67377,"CreatedDateTime":"2013-11-26T00:45:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nothke\u0022 data-cite=\u0022nothke\u0022\u003E\u003Cdiv\u003EThanks! It would be useful to add the SAS = \u0022False\u0022 to the wiki.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMaybe I just don\u0027t get it but why would you need to know if it was off or on? Other than for printing it to a script. You could always just set sas to off so then you know it\u0027s off and go from there. Me personally at the start of my launch script I set it to on, launch, wait until about 500m or 1000 meter then use my lock steering command of choice, and turn SAS off. When using lock steering there is really no need for SAS to be on and I\u0027ve noticed in most cases having it on won\u0027t allow the lock steering command to work.\u003C/p\u003E\u003Cp\u003EI can see more of a need to know the state of the gears though, although I don\u0027t know that it would actually return properly. Say if the gear took 10 seconds to deploy/retract, and you polled with in that 10 seconds, in my thinking it\u0027d reply that it was in whatever state you asked about just because it\u0027s basically a boolean (off/on). Might be best, if you have something thats dependent on the gears being deployed/retracted (like a hover script waiting to land), to count how long it takes to deploy, then just issue a wait statement for however long it takes, plus maybe a second or two before continuing to descend.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T00:59:14Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022foma87\u0022 data-cite=\u0022foma87\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhat I am trying to achieve is have a readout of the angle between 2 bodies orbiting the same body. I took Kerbin, a satellite in Kerbin orbit and the Mun as an example. This is basically what it looks like (excuse my paint):\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/WTPVz4b.png\u0022 alt=\u0022WTPVz4b.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI see a few potential problems:\u003C/p\u003E\u003Cp\u003E1 - You mention that the Mun\u0027s altitude is the length of line B. It is not. Altitude is the distance to the parent body\u0027s SURFACE, not to it\u0027s CENTER. TO get the distance of B you have to add Mun:Altitude to Kerbin\u0027s radius. (which is 600,000). The same is true for the length of A - you need to add your altitude to Kerbin\u0027s radius.\u003C/p\u003E\u003Cp\u003E2 - Be aware that there is an annoying discrepency in the frame of referenced for reported numbers. A body\u0027s POSITION is given relative to your craft, but a body\u0027s VELOCITY is given relative to the body your craft is orbiting. I don\u0027t know why they\u0027re different, but as long as you are aware of it you can translate between the two frames of reference easily enough once you know your own position relative to the parent body, and if you transform your UP direction into a unit vector using tfDirToUnitV here: \u003Ca href=\u0022http://kos.wikia.com/wiki/Tutorial_with_example_-_Conversion_from_Directions_to_XYZs\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kos.wikia.com/wiki/Tutorial_with_example_-_Conversion_from_Directions_to_XYZs\u003C/a\u003E (once you turn your UP direction into a unit vector, if you multiply it by the scalar (body\u0027s radius \u002B my altitude), you get your position relative to the parent body. So with that you can add that vector to the Moon\u0027s position relative to you, to get its position relative to the parent body.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe problem is, the \u0022phi\u0022-readouts are often NaN\u00C3\u201A\u00C2\u00B0 (I\u00C3\u201A\u00C2\u00B4d be very thankful if anyone could explain this expression to me). \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWithout giving all the ugly details of how floating point numbers are stored in binary form, suffice it to say that there are some bit patterns that are invalid and don\u0027t really map to anything real. These patterns are used deliberately to store the fact that a numerical result is \u0022impossible\u0022 or \u0022infinite\u0022.\u003C/p\u003E\u003Cp\u003EWhen KoS returns \u0022Inf\u0022 for a number, it means \u0022You tried dividing by zero\u0022. (Yes, I know dividing by zero doesn\u0027t *always* mean it\u0027s a phenomenon that approaches infinity, but computer numbers tend to assume it does.) \u003C/p\u003E\u003Cp\u003EWhen kOS returns \u0022NaN\u0022 for a number, it\u0027s an acronym that means, literally, \u0022Not a Number\u0022. That might sound like something Kevin made up, but it\u0027s not. That\u0027s been a longstanding well known acronym in computer programming languages. NaN is used for situations where the resulting number is mathematically not possible to represent as a real number at all. Examples include:\u003C/p\u003E\u003Cp\u003E- Trying to take the square root of a negative number returns NaN.\u003C/p\u003E\u003Cp\u003E- Trying to use inverse trig functions like arccos on a value that cannot possibly be a cosine.\u003C/p\u003E\u003Cp\u003E\u0022NaN\u0027 is probably coming from your arccos. The value inside the expression is probably less than -1 or larger than \u002B1 so there\u0027s no such angle which would have that cosine.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-26T01:01:20Z\u0022 title=\u002211/26/2013 01:01  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 26, 2013\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T01:00:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EThis works:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EIf sas = \u0022False\u0022 {print \u0022SAS is not on\u0022.}.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn general the lack of an \u0022else\u0022, combined with the lack of a \u0022not\u0022 operator, makes some things a lot messier than they need to be.\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-26T01:53:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Sma\u0022 data-cite=\u0022Sma\u0022\u003E\u003Cdiv\u003EI can see more of a need to know the state of the gears though, although I don\u0027t know that it would actually return properly. Say if the gear took 10 seconds to deploy/retract, and you polled with in that 10 seconds, in my thinking it\u0027d reply that it was in whatever state you asked about just because it\u0027s basically a boolean (off/on).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI tested it earlier this evening (see post above) and I just tested it again. I just noticed some behaviour that might come in handy:\u003C/p\u003E\u003Cp\u003E- \u003Cstrong\u003EGears\u003C/strong\u003E will report whatever status was requested. As soon as you tell kOS \u003Cem\u003Egears on\u003C/em\u003E, it will report \u003Cem\u003ETrue\u003C/em\u003E, even when still deploying. The same goes for retraction; as soon as you give the command \u003Cem\u003Egears off\u003C/em\u003E it will report \u003Cem\u003EFalse\u003C/em\u003E, even when still retracting.\u003C/p\u003E\u003Cp\u003E- \u003Cstrong\u003ELegs\u003C/strong\u003E will report \u003Cem\u003ETrue\u003C/em\u003E only when fully deployed. When deploying or retracting legs will report \u003Cem\u003EFalse\u003C/em\u003E. When you ask about legs through the \u003Cem\u003Egears\u003C/em\u003E command however, they report like gears would.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMight be best, if you have something thats dependent on the gears being deployed/retracted (like a hover script waiting to land), to count how long it takes to deploy, then just issue a wait statement for however long it takes, plus maybe a second or two before continuing to descend.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI feel the nicest way to do this is to detect whether the gears are down or not. If not, deploy and wait. If so, go ahead with the program. Please note that this code will also wait when no legs are present. You can check for that by checking the status again. If it is still \u003Cem\u003EFalse\u003C/em\u003E, no legs were present. \u003C/p\u003E\u003Cp\u003EThat last bit is also the reason that polling for leg deployment instead of having a fixed count is probably not a good idea; when you wait for the legs to fully deploy and return \u003Cem\u003ETrue\u003C/em\u003E but no legs are on the craft, the program will get stuck in that loop.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif legs = \u0022False\u0022 {legs on. wait 3.}.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn general the lack of an \u0022else\u0022, combined with the lack of a \u0022not\u0022 operator, makes some things a lot messier than they need to be.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI consider it a charming clunkiness for now. Pretty much everything is possible, you just need to get a little creative. We wouldn\u0027t want the coders to get lazy \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-26T01:55:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003ENaN is used for situations where the resulting number is mathematically not possible to represent as a real number at all. Examples include:\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cem\u003ENaN\u003C/em\u003E also appears when a sensor is not turned on and in similar situations.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T02:09:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003E\u003Cem\u003ENaN\u003C/em\u003E also appears when a sensor is not turned on and in similar situations.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUseful to know.\u003C/p\u003E\u003Cp\u003EI wasn\u0027t answering the \u0022what does it mean in KOS\u0022 sort of question but more the \u0022what does the acronym NaN mean\u0022 question in the general sense. The fact that kOS was designed to overload the meaning of NaN by also using it for disabled sensors (which makes sense and I didn\u0027t know that, thanks for the heads up) is sort of another layer on top of the question of just \u0022I\u0027ve never seen \u0027NaN\u0027 before what does it mean?\u0022.\u003C/p\u003E\u003Cp\u003EBut without an isNaN() check being implemented, returning NaN to the user isn\u0027t a very useful way to report that the sensor is turned off. Your script code can\u0027t respond to the condition because NaN doesn\u0027t work like normal numbers and you can\u0027t just put it in an expression like:\u003C/p\u003E\u003Cp\u003E if value = NaN { ... do something ... }.\u003C/p\u003E\u003Cp\u003E(And according to the IEEE standards, you\u0027re not *supposed* to be able to do that with a NaN. Languages are meant to provide some sort of a function call or macro syntax that lets you check it by saying isNaN( value ), apparently because there are multiple binary representations that all mean NaN so it\u0027s possible for one NaN to not equal another NaN if you just check them the raw way.)\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-26T02:22:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EBut without an isNaN() check being implemented, returning NaN to the user isn\u0027t a very useful way to report that the sensor is turned off. Your script code can\u0027t respond to the condition because NaN doesn\u0027t work like normal numbers and you can\u0027t just put it in an expression like:\u003C/p\u003E\u003Cp\u003E if value = NaN { ... do something ... }.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, you can do that. I have been using that on my Negative Gravioli Detector, since I always forget to turn it on. I like my craft to check as much as possible for themselves - that mitigates user error (and I am quite an erroneous user \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E). I use it in combination with Sensor Reporter, but I am sure the method can be used in other situations where I have seen \u003Cem\u003ENaN\u003C/em\u003E appear too.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Eif sensor!grav() = \u0022NaN\u0022 {set x to sensor!grav!toggle().}.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003ESensors are turned on in a peculiar way.\u003C/span\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-26T02:24:35Z\u0022 title=\u002211/26/2013 02:24  AM\u0022 data-short=\u002210 yr\u0022\u003ENovember 26, 2013\u003C/time\u003E by Camacha\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T02:26:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EActually, you can do that. I have been using that on my Negative Gravioli Detector, since I always forget to turn it on. I like my craft to check as much as possible for themselves - that mitigates user error (and I am quite an erroneous user \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E). I use it in combination with Sensor Reporter, but I am sure the method can be used in other situations where I have seen \u003Cem\u003ENaN\u003C/em\u003E appear too.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, I see. So when it says NaN for a number it is in fact casting it to a string so you can check against the literal \u0022NaN\u0022. But why doesn\u0027t it complain about comparing a number to a string when sensor!grav() is a real number and not NaN?\u003C/p\u003E\n"},{"CreatedByName":"AeroEngy","CreatedById":92772,"CreatedDateTime":"2013-11-26T02:35:34Z","Content":"\n\u003Cp\u003EHello kOS uber users. I just found this mod and so far so good. I was able to cobble together a PI throttle controller which holds my craft to within around 5/ms of terminal velocity (until the atmosphere thins out) and puts me in a decent circular orbit.\u003C/p\u003E\u003Cp\u003EAnyway, I am trying to figure out this coordinate system when looking at various bodies \u003Cem\u003EbodyName\u003C/em\u003E:position and \u003Cem\u003EbodyName\u003C/em\u003E:body:position vectors. I don\u0027t really fully understand the difference and hope someone here can shed some light on what these represent, what is the origin for each is, etc. I read through the Wiki ... but couldn\u0027t find any information about these parameters. I know the origin moves around based on SOI and other factors but don\u0027t know how these are built in vectors for each body are handled. Actually it was shear luck that I stumbled upon these at all since I found no documentation regarding them.\u003C/p\u003E\u003Cp\u003EI thought that maybe Duna:position was the position vector from my craft (in 100km orbit) to Duna for example. IF so where do the unit vectors along x, y, and z point (NED or something else)?\u003C/p\u003E\u003Cp\u003ESimilarly, I guessed that maybe Duna:body:positon was Duna\u0027s position vector from its parent Kerbol. However, when querying the magnitude of the vector it was larger than Duna\u0027s apoapsis ... which didn\u0027t make any sense. Also the Z direction was larger than I expected since I guessed that z was maybe perpendicular to orbital plane. My goal here is to define the position vector of Kerbin (Kerbin:body:position ???) and another planet like Duna relative to Kerbol. Then use the vector\u0027s to calculate the phase angle via dot product or 2-D arctans as an estimate. \u003C/p\u003E\u003Cp\u003EI am guessing its not that simple or others would have done it already. Any help shedding some light would be appreciated.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T03:04:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AeroEngy\u0022 data-cite=\u0022AeroEngy\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAnyway, I am trying to figure out this coordinate system when looking at various bodies \u003Cem\u003EbodyName\u003C/em\u003E:position and \u003Cem\u003EbodyName\u003C/em\u003E:body:position vectors. I don\u0027t really fully understand the difference and hope someone here can shed some light on what these represent, what is the origin for each is, etc. I read through the Wiki ... but couldn\u0027t find any information about these parameters. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThey\u0027re relatively recent and I\u0027m thinking of overhauling the wiki page on XYZ coordinate system to talk about them.\u003C/p\u003E\u003Cp\u003EOne exceedingly annoying \u0022feature\u0022 about them is that the origin of the coordinate system for a body\u0027s POSITION and the origin of the coordinate system for a body\u0027s VELOCITY are not the same. Since velocity and position are directly connected to each other, having them reported in different coordinate systems so you constantly have to shift the origin when using them together is really messy.\u003C/p\u003E\u003Cp\u003EA body\u0027s VELOCITY is given in a coordinate system relative to your parent body you are currently orbiting.\u003C/p\u003E\u003Cp\u003EBUT, a body\u0027s POSITION is given in a coordinate system relative to your craft\u0027s position as origin, NOT the body your craft is orbiting.\u003C/p\u003E\u003Cp\u003ESo for example if you are orbiting Kerbin, then Mun:POSITION is the position vector from YOU to the Mun. while Mun:VELOCITY is the velocity vector of the Mun relative to Kerbin, not relative to YOU. \u003C/p\u003E\u003Cp\u003ETo prove this get into an orbit around Kerbin and keep printing both Mun:POSITION:MAG and Mun:VELOCITY:MAG. as you orbit. As you change position and velocity going around Kerbin, Mun:POSITION is smaller when you\u0027re on the side of Kerbin closest to it, and it gets bigger when you\u0027re on the side of Kerbin facing away from it. BUT, Mun:Velocity is only changing by a tiny amount as it slowly orbits Kerbin, while if it was based on being relative to you like the position was, it should be giving drastically different numbers when you\u0027re flying toward, away from, or perpendicular to it as you orbit around Kerbin.\u003C/p\u003E\u003Cp\u003EI\u0027m not sure if this is KOS doing this or if this is just KOS exposing a weirdness about the underlying KSP C# API.\u003C/p\u003E\u003Cp\u003EIt\u0027s workable as it is, as long as you know this fact, as you can always adjust between the two frames of reference because you can get your position relative to the body you orbit, but it\u0027s really odd that you have to make the adjustment because the system is being inconsistent with itself.\u003C/p\u003E\n"},{"CreatedByName":"AeroEngy","CreatedById":92772,"CreatedDateTime":"2013-11-26T04:18:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThey\u0027re relatively recent and I\u0027m thinking of overhauling the wiki page on XYZ coordinate system to talk about them.\u003Cp\u003EBUT, a body\u0027s POSITION is given in a coordinate system relative to your craft\u0027s position as origin, NOT the body your craft is orbiting.\u003C/p\u003E\u003Cp\u003ESo for example if you are orbiting Kerbin, then Mun:POSITION is the position vector from YOU to the Mun. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI double checked this with my DUNA:POSITION vector\u0027s magnitude when duna and kerbin were more or less aligned got a magnitude of ~6.0x10^9 which seems about right for the distance between their orbits. However, I am still a bit confused as the actual vector was V(3.5*10^9, -1.2x10^7,-5.1x10^9). So what does the x, y, and z components of that vector represent? I thought maybe one of them was UP and the reference was rotating or something ... but I let my craft orbit to the other side of Kerbin so UP was in a new direction ... but the vector looked similar (no sign flips).\u003C/p\u003E\u003Cp\u003EYou didn\u0027t mention the \u003Cem\u003EbodyName\u003C/em\u003E:BODY:POSITION vector. While I was orbiting Kerbin I got the magnitude of both Kerbin:BODY:POSITION and DUNA:BODY:POSITION. Both vectors looked almost the same with magnitudes of 1.36x10^10 [V(-7.4x10^9, -1.0x10^3, 1.1x10^10)] ... which made me guess this is my craft\u0027s position with respect to Kerbol. So it seems that the NAME:BODY:POSITION vector is the same for each named body ... is this correct?? And if so ... again which direction are the components of the position vector pointing. Y is above the orbital plane? x and z are pointing to some fixed point or arbitrarily set at loading ?\u003C/p\u003E\u003Cp\u003EThanks,\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T05:04:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AeroEngy\u0022 data-cite=\u0022AeroEngy\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EYou didn\u0027t mention the \u003Cem\u003EbodyName\u003C/em\u003E:BODY:POSITION vector. While I was orbiting Kerbin I got the magnitude of both Kerbin:BODY:POSITION and DUNA:BODY:POSITION.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat makes sense, because Kerbin:BODY and Duna:BODY are two different ways to refer to the same object - the Sun.\u003C/p\u003E\u003Cp\u003EThe special keywords \u003Cem\u003EKerbin\u003C/em\u003E and \u003Cem\u003EDuna\u003C/em\u003E already *are* objects of type BODY. You probably should have just typed \u003Cem\u003EKerbin:POSITION\u003C/em\u003E and \u003Cem\u003EDuna:POSITION\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003EEach object of type BODY has a property, also called BODY, which is referring to the parent body that body orbits (this is a holdover from the fact that when you type just BODY, it refers to the thing your craft orbits. I\u0027d have preferred a less confusing term like \u0022PARENTBODY\u0022.)\u003C/p\u003E\u003Cp\u003ESo when you said \u003Cem\u003EKerbin:BODY\u003C/em\u003E you ended up referring not to Kerbin, but the thing Kerbin orbits - the Sun. This is why \u003Cem\u003EKerbin:body\u003C/em\u003E and \u003Cem\u003EDuna:body\u003C/em\u003E are the same thing.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T05:08:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AeroEngy\u0022 data-cite=\u0022AeroEngy\u0022\u003E\u003Cdiv\u003E So what does the x, y, and z components of that vector represent? \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou say you read through the Wiki. Have you seen this page?\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://kos.wikia.com/wiki/Tutorial_-_XYZ_system_of_KSP\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kos.wikia.com/wiki/Tutorial_-_XYZ_system_of_KSP\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ECaveat: I wrote that based on guesswork and trial and error taking different readings at different positions until I\u0027d worked it out. So I don\u0027t know if it\u0027s right or not. The coordinate system of KSP is weird because it keeps changing where the origin is depending on context.\u003C/p\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-11-26T05:45:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn general the lack of an \u0022else\u0022, combined with the lack of a \u0022not\u0022 operator, makes some things a lot messier than they need to be.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Etotally signed.\u003C/p\u003E\n"},{"CreatedByName":"wingnut","CreatedById":57702,"CreatedDateTime":"2013-11-26T07:20:33Z","Content":"\n\u003Cp\u003EDid any of you have a problem before, that running a script from the launchpad freezes your game?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-11-26T09:20:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022wingnut\u0022 data-cite=\u0022wingnut\u0022\u003E\u003Cdiv\u003EDid any of you have a problem before, that running a script from the launchpad freezes your game?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere were some bugs that could cause that that I encountered in previous versions. I am not aware of any in the current version. Can you post the script you\u0027re trying to run?\u003C/p\u003E\n"},{"CreatedByName":"wingnut","CreatedById":57702,"CreatedDateTime":"2013-11-26T09:48:15Z","Content":"\n\u003Cp\u003EThis is one of the scripts I\u0027m trying to run and I\u0027m almost certain that I did not change anything before it stopped working. But something significant must have been changed, why would it stop working then?:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edeclare parameter apo.\u003Cbr\u003Eset var to altitude.\u003Cbr\u003Elock throttle to 1.\u003Cbr\u003ESAS ON.\u003Cbr\u003ESTAGE.\u003Cbr\u003Ewait until altitude \u0026gt; var.\u003Cbr\u003EPRINT \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 LIFTOFF\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 LIFTOFF\u0022 to shiplog.\u003Cbr\u003Ewait until altitude \u0026gt; 10000.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INITIATE PITCH PROGRAMME\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INITIATE PITCH PROGRAMME\u0022 to shiplog.\u003Cbr\u003ESAS OFF.\u003Cbr\u003Elock steering to heading 90 by 45.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 45\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 45\u0022 to shiplog.\u003Cbr\u003Ewait until apoapsis \u0026gt; 70000.\u003Cbr\u003Elock steering to heading 90 by 0.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 90\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 90\u0022 to shiplog.\u003Cbr\u003Euntil apoapsis \u0026gt; apo {\u003Cbr\u003E\tif stage:liquidfuel \u0026lt; 1 {\u003Cbr\u003E\t\tbreak.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 MECO\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 MECO\u0022 to shiplog.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002B FLOOR(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B FLOOR(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022 to shiplog.\u003Cbr\u003Ewait 1.\u003Cbr\u003ESTAGE.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 STAGE 1 SEPARATION\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 STAGE 1 SEPARATION\u0022 to shiplog.\u003Cbr\u003Elock steering to PROGRADE.\u003Cbr\u003E\u003Cbr\u003Ewait until eta:apoapsis \u0026lt; 60.\u003Cbr\u003Eset r to 600000.\u003Cbr\u003Eset os to r*sqrt(9.807/(r\u002Bapoapsis)).\u003Cbr\u003Eset vel to velocity:orbit.\u003Cbr\u003Eset dv to sqrt(vel:x^2 \u002B vel:y^2 \u002B vel:z^2).\u003Cbr\u003Eset dv to os - dv.\u003Cbr\u003Eset bt to dv/(maxthrust/mass).\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ORBIT INSERTION BURN. BT \u0022 \u002B round(bt,2) \u002B \u0022s\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ORBIT INSERTION BURN. BT \u0022 \u002B round(bt,2) \u002B \u0022s\u0022 to shiplog.\u003Cbr\u003Ewait until eta:apoapsis \u0026lt; bt/2 \u002B 1.\u003Cbr\u003Elock throttle to 1.\u003Cbr\u003Ewait until periapsis \u0026gt; 70000.\u003Cbr\u003Euntil periapsis \u0026gt; 70000 {\u003Cbr\u003E\tif stage:liquidfuel \u0026lt; 1 {\u003Cbr\u003E\t\tbreak.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003Eset ecc to ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Euntil ecc \u0026lt; 0.1 {\u003Cbr\u003E\tset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003E\tif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003E\t\tbreak.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.5.\u003Cbr\u003Euntil ecc \u0026lt; 0.05 {\u003Cbr\u003E\tset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003E\tif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003E\t\tbreak.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.3.\u003Cbr\u003Euntil ecc \u0026lt; 0.005 {\u003Cbr\u003E\tset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003E\tif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003E\t\tbreak.\u003Cbr\u003E\t}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.\u003Cbr\u003ETOGGLE AG2.\u003Cbr\u003EPRINT \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INSERTION BURN COMPLETE\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INSERTION BURN COMPLETE\u0022 to shiplog.\u003Cbr\u003Eset ecc to ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ECCENTRICITY \u0022 \u002B round(ecc, 4).\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ECCENTRICITY \u0022 \u002B round(ecc, 4) to shiplog.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002Bfloor(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B floor(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022 to shiplog.\u003Cbr\u003ESTAGE.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022PAYLOAD RELEASED\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022PAYLOAD RELEASED\u0022 to shiplog.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI have other scripts which cause the game to freeze as well when run from the launchpad. It doesn\u0027t matter if the script is run from the archive or copied to the vehicle\u0027s volume and run from there - both cases cause a freeze.\u003C/p\u003E\u003Cp\u003EEdit: this is the previous version of the script which still works on the launchpad:\u003C/p\u003E\u003Cp\u003EI checked it with Tortoise Merge and there are some changes of whitespaces in a couple of lines and I removed some print statements which were paired with log statements. I didn\u0027t have the time to investigate it more thoroughly yet.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edeclare parameter apo.\u003Cbr\u003Eset var to altitude.\u003Cbr\u003Elock throttle to 1.\u003Cbr\u003ESAS ON.\u003Cbr\u003ESTAGE.\u003Cbr\u003Ewait until altitude \u0026gt; var.\u003Cbr\u003EPRINT \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 LIFTOFF\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 LIFTOFF\u0022 to shiplog.\u003Cbr\u003Ewait until altitude \u0026gt; 10000.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INITIATE PITCH PROGRAMME\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 INITIATE PITCH PROGRAMME\u0022 to shiplog.\u003Cbr\u003ESAS OFF.\u003Cbr\u003Elock steering to heading 90 by 45.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 45\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 45\u0022 to shiplog.\u003Cbr\u003Ewait until apoapsis \u0026gt; 70000.\u003Cbr\u003Elock steering to heading 90 by 0.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 90\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 PITCH TO 90\u0022 to shiplog.\u003Cbr\u003Euntil apoapsis \u0026gt; apo {\u003Cbr\u003Eif stage:liquidfuel \u0026lt; 1 {\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 TARGET APOAPSIS NOT REACHED\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 TARGET APOAPSIS NOT REACHED\u0022 to shiplog.\u003Cbr\u003Ebreak.\u003Cbr\u003E}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 MECO\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 MECO\u0022 to shiplog.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002B FLOOR(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B FLOOR(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002B FLOOR(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B FLOOR(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022 to shiplog.\u003Cbr\u003Ewait 1.\u003Cbr\u003ESTAGE.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 STAGE 1 SEPARATION\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 STAGE 1 SEPARATION\u0022 to shiplog.\u003Cbr\u003Elock steering to PROGRADE.\u003Cbr\u003E\u003Cbr\u003Ewait until eta:apoapsis \u0026lt; 60.\u003Cbr\u003Eset r to 600000.\u003Cbr\u003Eset os to r*sqrt(9.807/(r\u002Bapoapsis)).\u003Cbr\u003Eset vel to velocity:orbit.\u003Cbr\u003Eset dv to sqrt(vel:x^2 \u002B vel:y^2 \u002B vel:z^2).\u003Cbr\u003Eset dv to os - dv.\u003Cbr\u003Eset bt to dv/(maxthrust/mass).\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ORBIT INSERTION BURN. BT \u0022 \u002B round(bt,2) \u002B \u0022s\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ORBIT INSERTION BURN. BT \u0022 \u002B round(bt,2) \u002B \u0022s\u0022 to shiplog.\u003Cbr\u003Ewait until eta:apoapsis \u0026lt; bt/2 \u002B 1.\u003Cbr\u003Elock throttle to 1.\u003Cbr\u003Ewait until periapsis \u0026gt; 70000.\u003Cbr\u003Euntil periapsis \u0026gt; 70000 {\u003Cbr\u003Eif stage:liquidfuel \u0026lt; 1 {\u003Cbr\u003Ebreak.\u003Cbr\u003E}.\u003Cbr\u003E}.\u003Cbr\u003Eset ecc to ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Euntil ecc \u0026lt; 0.1 {\u003Cbr\u003Eset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Eif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003Ebreak.\u003Cbr\u003E}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.5.\u003Cbr\u003Euntil ecc \u0026lt; 0.05 {\u003Cbr\u003Eset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Eif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003Ebreak.\u003Cbr\u003E}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.3.\u003Cbr\u003Euntil ecc \u0026lt; 0.005 {\u003Cbr\u003Eset ecc TO ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Eif ecc \u0026lt; ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)) {\u003Cbr\u003Ebreak.\u003Cbr\u003E}.\u003Cbr\u003E}.\u003Cbr\u003Elock throttle to 0.\u003Cbr\u003ETOGGLE AG2.\u003Cbr\u003EPRINT \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 CIRCULARIZATION BURN COMPLETE\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 CIRCULARIZATION BURN COMPLETE\u0022 to shiplog.\u003Cbr\u003Eset ecc to ((r\u002Bapoapsis) - (r\u002Bperiapsis))/((r\u002Bapoapsis) \u002B (r\u002Bperiapsis)).\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ECCENTRICITY \u0022 \u002B round(ecc, 4).\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ECCENTRICITY \u0022 \u002B round(ecc, 4) to shiplog.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002Bfloor(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B floor(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022\u002Bfloor(STAGE:LIQUIDFUEL) \u002B \u0022/\u0022 \u002B floor(STAGE:OXIDIZER) \u002B \u0022 PROPELLANT/OXIDIZER REMAINING\u0022 to shiplog.\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ANTENNA DEPLOYED\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 ANTENNA DEPLOYED\u0022 to shiplog.\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-26T14:37:06Z\u0022 title=\u002211/26/2013 02:37  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 26, 2013\u003C/time\u003E by wingnut\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"AeroEngy","CreatedById":92772,"CreatedDateTime":"2013-11-26T13:06:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYou say you read through the Wiki. Have you seen this page?\u003Cp\u003E\u003Ca href=\u0022http://kos.wikia.com/wiki/Tutorial_-_XYZ_system_of_KSP\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://kos.wikia.com/wiki/Tutorial_-_XYZ_system_of_KSP\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ECaveat: I wrote that based on guesswork and trial and error taking different readings at different positions until I\u0027d worked it out. So I don\u0027t know if it\u0027s right or not. The coordinate system of KSP is weird because it keeps changing where the origin is depending on context.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI did read that but there are a couple of missing pieces that are still throwing me off:\u003C/p\u003E\u003Cp\u003E1) As you said when I query Duna:position the vector\u0027s origin is my craft and not the Kerbin centered XYZ described in the Wiki. The wiki page explain the XYZ system when Kerbin is the origin but not when the the craft is the origin. I would need to transform Duna:position into a common coordinate system before doing any vector math. I am not sure how to do this since I don\u0027t know their systems orientation wrt each other.\u003C/p\u003E\u003Cp\u003E2) Kerbin:BODY:position seems to give me my position with respect to a Sun centered origin. However, again this seems to have a different origin I would need some information to transform the coordinates.\u003C/p\u003E\u003Cp\u003EHere is a crappy sketch of my thought process, what I believe each position vector represents and my issues,\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://oi43.tinypic.com/334kuj4.png\u0022 alt=\u0022334kuj4.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EA = Kerbin:BODY:position (origin at sun ?, xyz system unknown)\u003C/p\u003E\u003Cp\u003EB = Kerbin:position (origin at craft, xyz system unknown)\u003C/p\u003E\u003Cp\u003EC = Duna:position (origin at craft, xyz system unknown)\u003C/p\u003E\u003Cp\u003EGoal determine vectors A\u002BC and A\u002BB (dashed lines) via simple vector addition. Calculate angle between using dot products. \u003C/p\u003E\u003Cp\u003EHowever, I can\u0027t add the vectors until they are all in the same coordinate system with the same origin.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-11-26T13:15:06Z\u0022 title=\u002211/26/2013 01:15  PM\u0022 data-short=\u002210 yr\u0022\u003ENovember 26, 2013\u003C/time\u003E by AeroEngy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Sma","CreatedById":67377,"CreatedDateTime":"2013-11-26T14:37:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E- \u003Cstrong\u003ELegs\u003C/strong\u003E will report \u003Cem\u003ETrue\u003C/em\u003E only when fully deployed. When deploying or retracting legs will report \u003Cem\u003EFalse\u003C/em\u003E. When you ask about legs through the \u003Cem\u003Egears\u003C/em\u003E command however, they report like gears would.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThats good to know, wonder why the same isn\u0027t true for gears.\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-11-26T15:48:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThe coordinate system of KSP is weird because it keeps changing where the origin is depending on context.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis might be of how KSP functions internally. Because Unity does not deal well with the vast scale of the Kerbin system, some trickery is involved where you do not move as much as you would think and the universe actually scales and moves around you. There are some interesting video\u0027s Squad made on this subject.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022wingnut\u0022 data-cite=\u0022wingnut\u0022\u003E\u003Cdiv\u003EThis is one of the scripts I\u0027m trying to run and I\u0027m almost certain that I did not change anything before it stopped working. But something significant must have been changed, why would it stop working then?:\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThese are your culprits. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022PAYLOAD RELEASED\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022 \u0022PAYLOAD RELEASED\u0022 to shiplog.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMaybe there are more, but I am sure they will be of the same type. kOS does not like unmatched quotation marks at all. Leaving any in your code is bound to result in a lock-up. Your code should be:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprint \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022PAYLOAD RELEASED\u0022.\u003Cbr\u003Elog \u0022GET:\u0022\u002Bround(missiontime)\u002B\u0022PAYLOAD RELEASED\u0022 to shiplog.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe next time something like this happens, it helps to isolate bits of code. Just comment off everything except for the first few lines and uncomment them bit by bit working down, testing along the way. That way you will find out where the problem lies.\u003C/p\u003E\n"}]}