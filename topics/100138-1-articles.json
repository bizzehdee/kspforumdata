{"TopicId":100138,"ForumId":36,"TopicTitle":"[Plugin/Tool] [1.1.x] HeightmapExtractor v1.1/HeightmapManager v1.1 | 03/05/16","CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-19T20:21:00Z","PageNum":1,"Articles":[{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-19T20:21:00Z","Content":"While working on a side project of mine, I ended up needing the exact ground altitude of each coordinate on the planets in KSP. Didn\u0027t take me quite long to realize how ridiculously slow the PQS is for this kind of job. I ended up creating this, and I thought releasing this in the wild may be useful to anyone else needing to know the altitude at precise locations on specific bodies.\n\n**HeightmapExtractor v1.1**\n\nDownload: [Github](https://github.com/StupidChris/HeightmapExtractor/releases/tag/v1.1)\n\n**Changelog:**\n\nSpoiler\n\nMay 3rd 2016\n    v1.1\n    -KSP 1.1 upgrade\n    -Upgraded to C# 6.0 code\n    -Fixed a few generation bugs\n    -Fixed problems with AppLauncher button\n    \n    February 19th 2015\n    v1.0\n    - Initial release.\n\n* * *\n\n**HeightmapManager v1.1**\n\nDownload: [Github](https://github.com/StupidChris/HeightmapExtractor/releases/tag/v1.1)\n\n**Changelog:**\n\nSpoiler\n\nMay 3rd 2016\n    v1.1\n    -Upgraded to KSP 1.1\n    -Fixed ReadPixels2D returning the same array as the heightmap\n    \n    February 19th 2015\n    v1.0\n    - Initial release.\n\n* * *\n\n[License](https://creativecommons.org/licenses/by-nc-sa/4.0/) | [Source](https://github.com/StupidChris/HeightmapExtractor)\n\n* * *\n\nThis tool is twofold, so I\u0027ll explain both parts separately:\n\nHeightmapExtractor:\n\nThis first part is what does the big, slow work. Basically, what this does is that upon loading the SpaceCenter scene, it will access the PQS system and start to read the altitude of every CelestialBody in the game over all it\u0027s surface, store it, and output the result as a data dump as well as a grayscale image. You can control the resolution of the maps, the starting/ending points in both latitude and longitude, which CelestialBodies are extracted, the scanning speed (adjust to your hardware), if the maps are flipped horizontally/vertically, altitude limits for the maps (say you want to ignore oceans), if the grayscale colours are inverted, and how the heightmap is saved (image, binary dump, or both). It makes for a flexible tool that can map specific portions of each body in the game if needed. The data dumps are saved under the .bin format and can then be moved and used at other places.\n\nThe extraction process can be very long. For 1440x720px maps, it can take about one to two minutes per map, and doubling the resolution usually augments map creation time by a factor of four. If my memory serves me right, doing all the bodies in the stock game at 2880x1440px resolution took about 30 minutes on my machine (AMD A-10). This is *long* because the PQS is ridiculously slow. This is why this exists, to have a faster alternative to probing the PQS to get ground altitude.\n\nThe Space Center also has an Applauncher button to pop a menu allowing to reload the settings config in game, as well as restarting the scanning process if necessary.\n\n* * *\n\nHeightmapManager:\n\nThis second part is basically just a tool to treat and use the data created by the extractor. Simply reference the .dll in your project and include it in your Plugins folder. Multiple occurences of the plugin in the GameData folder are not a problem, if correctly referenced your mod should only use the version you packaged. HeightmapManager only contains two classes, Heightmap.cs, and MathUtils.cs. The first is the one you\u0027re interested in, the second is a bunch of Math methods used internally.\n\nThe Heightmap object will allow you to load the raw data dumps created by the HeightmapExtractor into a memory array by only from their path. From there, you can access the height value of each pixel using an indexer. Please note that the the (0, 0) point on the map is the top left corner, and for a given point (x, y), x is the position on the horizontal axis, and y on the vertical axis.\n\nThe Heightmap also has an included bilinear reading method which basically takes two numbers between 0 and 1, treats them as proportions on the map, and does a bilinear approximation of the four closest pixels if it does not exactly match a specific pixel.\n\nTo give you an idea of how fast using those Heightmap objects is compared to probing the PQS, for my personal use while using the data to create maps depending on the altitude, getting the altitude from 1440x720px maps took 1.5s with those objects, against around a minute and a half while probing the PQS. Here is an example:\n\nSpoiler\n\nusing System;\n    using System.IO;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using UnityEngine;\n    using HeightmapManager;\n    \n    /* HeightmapExtractor was made by Christophe Savard (stupid_chris), and is licensed under\n    * CC-BY-NC-SA 4.0 INTL. If you have any questions about this, please contact me on the forums. */\n    \n    namespace HeightmapExtractor\n    {[KSPAddon(KSPAddon.Startup.SpaceCentre, true)]public class SpeedTest : MonoBehaviour{\tprivate CelestialBody kerbin = null;\tprivate readonly Color red = new Color(1, , , 1);\tprivate readonly Color blank = new Color(1, 1, 1, );private void Start()\t{\t\tkerbin = FlightGlobals.Bodies.Find(b =\u003E b.bodyName == \u0022Kerbin\u0022);\t\tStartCoroutine(CreateMaps());\t}private double TerrainAltitude(double longitude, double latitude)\t{\t\tVector3d radial = QuaternionD.AngleAxis(longitude, Vector3d.down) * QuaternionD.AngleAxis(latitude, Vector3d.forward) * Vector3d.right;\t\treturn kerbin.pqsController.GetSurfaceHeight(radial) - kerbin.pqsController.radius;\t}private IEnumerator\u003CYieldInstruction\u003E CreateMaps()\t{\t\tTexture2D map = new Texture2D(1440, 720, TextureFormat.ARGB32, false);\t\tColor[] pixels = new Color[1036800];\t//Generating from looking up the PQS\t\tStopwatch timer = Stopwatch.StartNew();\t\tfor (int y = ; y \u003C 720; y\u002B\u002B)\t\t{\t\t\tdouble latitude = ((y * 180d) / 720d) - 90d;\t\t\tfor (int x = ; x \u003C 1440; x\u002B\u002B)\t\t\t{\t\t\t\tdouble longitude = ((x * 360d) / 1440d) - 180d;\t\t\t\tint index = (1440 * y) \u002B x;\t\t\t\tdouble altitude = TerrainAltitude(longitude, latitude);\t\t\t\tpixels[index] = altitude \u003E  ? red : blank;\t\t\t}\t\t\tif (y % 90 == ) { yield return new WaitForEndOfFrame(); }\t\t}\t\ttimer.Stop();\t\tprint(String.Format(\u0022Total time using PQS: {0}s\u0022, timer.Elapsed.TotalSeconds));\t\tmap.SetPixels(pixels);\t\tmap.Apply();\t\tFile.WriteAllBytes(Path.Combine(HeightmapUtils.mapsURL, \u0022PQS_Kerbin_test.png\u0022), map.EncodeToPNG());\tmap = new Texture2D(1440, 720, TextureFormat.ARGB32, false);\t\tpixels = new Color[1036800];\t//Generating from the precomputed heightmap\t\ttimer.Reset();\t\ttimer.Start();\t\tHeightmap heightmap = new Heightmap(Path.Combine(HeightmapUtils.mapsURL, \u0022Kerbin_raw.bin\u0022));\t\tfor (int y = ; y \u003C 720; y\u002B\u002B)\t\t{\t\t\tfor (int x = ; x \u003C 1440; x\u002B\u002B)\t\t\t{\t\t\t\tint index = (1440 * y) \u002B x;\t\t\t\tdouble altitude = heightmap[x, y];\t\t\t\tpixels[index] = altitude \u003E  ? red : blank;\t\t\t}\t\t\tif (y % 90 == ) { yield return new WaitForEndOfFrame(); }\t\t}\t\ttimer.Stop();\t\tprint(String.Format(\u0022Total time using heightmap: {0}s\u0022, timer.Elapsed.TotalSeconds));\t\tmap.SetPixels(pixels);\t\tmap.Apply();\t\tFile.WriteAllBytes(Path.Combine(HeightmapUtils.mapsURL, \u0022Heightmap_Kerbin_test.png\u0022), map.EncodeToPNG());\tTexture2D.Destroy(map);\t}}\n    }\n\n\u003E \n\u003E \n\u003E \n\u003E  \n\u003E \n\u003E \n\nBasically what this does is try to create an image of the land above the sea level for Kerbin. It first does so by using the PQS to know the altitude of a specific coordinate, then the second time using a pregenerated Heightmap. Here are the results:\n\nSpoiler\n\nUsing the PQS:\n\n[![TUyFjF5.png](http://i.imgur.com/TUyFjF5.png)](http://i.imgur.com/TUyFjF5.png)\n\nTotal generation time: **97.3493251s**\n\nUsing the heightmap:\n\n[![x6ppsgk.png](http://i.imgur.com/x6ppsgk.png)](http://i.imgur.com/x6ppsgk.png)\n\nTotal generation time: **1.6762808s**\n\nThat makes it only 1.71% the time of the PQS technique. That\u0027s quite the improvement.\n\nAll you need to do, is to run the extractor once, create the binary dumps, include the dumps as well as the HeightmapManager.dll with your mod, and you don\u0027t need to touch snail-trail PQS anymore. Simple enough?\n\nAnd to show what I mean, here are 2880x1440px maps create by the extractor (open them in full scale to understand how large):\n\n\u003Ciframe class=\u0022imgur-album\u0022 frameborder=\u00220\u0022 height=\u0022550\u0022 src=\u0022//imgur.com/a/SYOyK/embed?background=ffffff\u0026text=1a1a1a\u0026link=4e76c9\u0022 width=\u0022100%\u0022\u003E\u003C/iframe\u003E\n\nThe images being .png are 8bit grayscale images, unfortunately, restrictions from KSP prevent saving 16bpp grayscale images directly, so the color resolution is only 256 shades. That\u0027s why the data dumps are required.\n\n**Edited \u003Ctime datetime=\u00222016-05-03T04:57:08Z\u0022 title=\u002205/03/2016 04:57  AM\u0022 data-short=\u00228 yr\u0022\u003EMay 3, 2016\u003C/time\u003E by stupid\\_chris**\n  \nUpdated to 1.1"},{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2015-02-19T20:56:09Z","Content":"What exactly is the utility of this plugin?"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-19T21:04:29Z","Content":"\u003E \n\u003E What exactly is the utility of this plugin?\n\nFor modders. Read through what I wrote."},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-19T22:02:15Z","Content":"Man, it really brings out the Perlin in KSP..."},{"CreatedByName":"_Augustus_","CreatedById":115084,"CreatedDateTime":"2015-02-19T22:06:06Z","Content":"This confirms that Erin was nothing more than Laythe with a deformed height map."},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-02-19T23:47:09Z","Content":"Of course, now that you\u0027ve done all the extracting, you could just put up the resulting files and save us from needing to actually use the plugin for the stock planets... but don\u0027t mind me... I\u0027m just a silly duct tape owner, I don\u0027t really know anything."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-20T02:31:38Z","Content":"\u003E \n\u003E Man, it really brings out the Perlin in KSP...\n\nYeah, all the small bodies are pretty much just that. Probably why they all look the same, and why they look nothing like real life asteroids.\n\n\u003E \n\u003E This confirms that Erin was nothing more than Laythe with a deformed height map.\n\nEh, Laythe is mostly seaground, and that is clearly Perlin too.\n\n\u003E \n\u003E Of course, now that you\u0027ve done all the extracting, you could just put up the resulting files and save us from needing to actually use the plugin for the stock planets... but don\u0027t mind me... I\u0027m just a silly duct tape owner, I don\u0027t really know anything.\n\nI could, but then again, the plugin is there so that people can create the mpas they need, not those I need. This can be use to extract the data from RSS, or Kopernicus, or any other planetary mod. This can be used to create area specific zoomed in maps. Some people may only need low resolution maps. Some may need very high resolution ones. If I posted the set I have, most people may need to create their own anyway. That\u0027s why this tool is out there, so that everyone can do whatever.\n\nI\u0027m going to post them anyway, but yeah, thought it was worth mentioning.\n\nAlso: I\u0027ll write a short example to show the difference between using this and directly accessing the PQS."},{"CreatedByName":"Tommygun","CreatedById":41293,"CreatedDateTime":"2015-02-20T02:42:05Z","Content":"\u003E \n\u003E What exactly is the utility of this plugin?\n\n\u0022Nap-of-the-earth\u0022 KSP cruise missile guidance mod..... ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-20T04:12:05Z","Content":"And as promised, the speed test:\n\n    using System;using System.IO;using System.Collections.Generic;using System.Diagnostics;using UnityEngine;using HeightmapManager;/* HeightmapExtractor was made by Christophe Savard (stupid_chris), and is licensed under * CC-BY-NC-SA 4.0 INTL. If you have any questions about this, please contact me on the forums. */namespace HeightmapExtractor{    [KSPAddon(KSPAddon.Startup.SpaceCentre, true)]    public class SpeedTest : MonoBehaviour    {        private CelestialBody kerbin = null;        private readonly Color red = new Color(1, 0, 0, 1);        private readonly Color blank = new Color(1, 1, 1, 0);        private void Start()        {            kerbin = FlightGlobals.Bodies.Find(b =\u003E b.bodyName == \u0022Kerbin\u0022);            StartCoroutine(CreateMaps());        }        private double TerrainAltitude(double longitude, double latitude)        {            Vector3d radial = QuaternionD.AngleAxis(longitude, Vector3d.down) * QuaternionD.AngleAxis(latitude, Vector3d.forward) * Vector3d.right;            return kerbin.pqsController.GetSurfaceHeight(radial) - kerbin.pqsController.radius;        }        private IEnumerator CreateMaps()        {            Texture2D map = new Texture2D(1440, 720, TextureFormat.ARGB32, false);            Color[] pixels = new Color[1036800];            //Generating from looking up the PQS            [COLOR=\u0022#0000FF\u0022]Stopwatch timer = Stopwatch.StartNew();            for (int y = 0; y \u003C 720; y\u002B\u002B)            {                double latitude = ((y * 180d) / 720d) - 90d;                for (int x = 0; x \u003C 1440; x\u002B\u002B)                {                    double longitude = ((x * 360d) / 1440d) - 180d;                    int index = (1440 * y) \u002B x;                    double altitude = TerrainAltitude(longitude, latitude);                    pixels[index] = altitude \u003E 0 ? red : blank;                }                if (y % 90 == 0) { yield return new WaitForEndOfFrame(); }            }[/COLOR]            timer.Stop();            print(String.Format(\u0022Total time using PQS: {0}s\u0022, timer.Elapsed.TotalSeconds));            map.SetPixels(pixels);            map.Apply();            File.WriteAllBytes(Path.Combine(HeightmapUtils.mapsURL, \u0022PQS_Kerbin_test.png\u0022), map.EncodeToPNG());            map = new Texture2D(1440, 720, TextureFormat.ARGB32, false);            pixels = new Color[1036800];            //Generating from the precomputed heightmap            timer.Reset();            [COLOR=\u0022#0000FF\u0022]timer.Start();            Heightmap heightmap = new Heightmap(Path.Combine(HeightmapUtils.mapsURL, \u0022Kerbin_raw.bin\u0022));            for (int y = 0; y \u003C 720; y\u002B\u002B)            {                for (int x = 0; x \u003C 1440; x\u002B\u002B)                {                    int index = (1440 * y) \u002B x;                    double altitude = heightmap[x, y];                    pixels[index] = altitude \u003E 0 ? red : blank;                }                if (y % 90 == 0) { yield return new WaitForEndOfFrame(); }            }            timer.Stop();[/COLOR]            print(String.Format(\u0022Total time using heightmap: {0}s\u0022, timer.Elapsed.TotalSeconds));            map.SetPixels(pixels);            map.Apply();            File.WriteAllBytes(Path.Combine(HeightmapUtils.mapsURL, \u0022Heightmap_Kerbin_test.png\u0022), map.EncodeToPNG());            Texture2D.Destroy(map);        }    }}\n\nBasically what this does is try to create an image of the land above the sea level for Kerbin. It first does so by using the PQS to know the altitude of a specific coordinate, then the second time using a pregenerated Heightmap. Here are the results:\n\nUsing the PQS:\n\n[![TUyFjF5.png](http://i.imgur.com/TUyFjF5.png)](http://i.imgur.com/TUyFjF5.png)\n\nTotal generation time: **97.3493251s**\n\nUsing the heightmap:\n\n[![x6ppsgk.png](http://i.imgur.com/x6ppsgk.png)](http://i.imgur.com/x6ppsgk.png)\n\nTotal generation time: **1.6762808s**\n\nThat makes it only 1.71% the time of the PQS technique. That\u0027s quite the improvement.\n\nEDIT:\n\nAlso uploaded the precomputed Heightmaps I have, downloads available in the OP.\n\n**Edited \u003Ctime datetime=\u00222015-02-20T04:39:50Z\u0022 title=\u002202/20/2015 04:39  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 20, 2015\u003C/time\u003E by stupid\\_chris**"},{"CreatedByName":"philotical","CreatedById":109390,"CreatedDateTime":"2015-02-20T19:30:26Z","Content":"That\u0027s great - thanks..\n\nNow the ignorant question.. - a little OT maybe, but I hope you stumbled over an answer while doing this\n\nCould this or a similiar technique be used to extract the planet textures?\n\nTo create a highres area foto of a sort?\n\nDoes the PQS also hold the texture info somewhere?\n\nI\u0027m fondling for a while with this idea, but didn\u0027t get usefull results.."},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-20T22:17:06Z","Content":"Most, but not all, bodies in KSP have heightmaps. However, the heightmap is *just one PQSMod amongst many*. What Chris\u0027s tool does is export the \\*final\\* heightmap, i.e. the topography of the planet rendered to map form, *not* the original heightmap used by the VertexHeightMap PQSMod."},{"CreatedByName":"Proot","CreatedById":98932,"CreatedDateTime":"2015-02-20T22:44:46Z","Content":"This is huge!\n\nI mean... endless possibilities... ![:kiss:](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_kiss.gif) Thanks Chris!"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-21T04:09:10Z","Content":"\u003E \n\u003E That\u0027s great - thanks..\n\u003E Now the ignorant question.. - a little OT maybe, but I hope you stumbled over an answer while doing this\n\u003E \n\u003E Could this or a similiar technique be used to extract the planet textures?\n\u003E \n\u003E To create a highres area foto of a sort?\n\u003E \n\u003E Does the PQS also hold the texture info somewhere?\n\u003E \n\u003E I\u0027m fondling for a while with this idea, but didn\u0027t get usefull results..\n\nAs Nathan said, not like I did it. It has been done and can be done, but Im pretty sure you dont need to itterate like I did to do it, I think the maps are stored somewhere. Probably try probing the ScaledSpaceTransform materials?\n\n\u003E \n\u003E This is huge!\n\u003E I mean... endless possibilities... ![:kiss:](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_kiss.gif) Thanks Chris!\n\nThanks! Looking forward to what Can come out of this ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"Tommygun","CreatedById":41293,"CreatedDateTime":"2015-02-21T12:16:09Z","Content":"Does anyone know of a free utility program that could turn this information into isometric height maps?\n\nSomething like a more simple version of this.\n\n![3D_TopoMap.gif](http://forums.autodesk.com/autodesk/attachments/autodesk/66/104084/1/3D_TopoMap.gif)"},{"CreatedByName":"sashan","CreatedById":98897,"CreatedDateTime":"2015-02-21T13:38:56Z","Content":"This has great potential for optimizing ScanSat, a big performance killer."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-21T18:19:21Z","Content":"\u003E \n\u003E Does anyone know of a free utility program that could turn this information into isometric height maps?\n\u003E Something like a more simple version of this.\n\u003E \n\u003E [http://forums.autodesk.com/autodesk/attachments/autodesk/66/104084/1/3D_TopoMap.gif](http://forums.autodesk.com/autodesk/attachments/autodesk/66/104084/1/3D_TopoMap.gif)\n\nI\u0027m pretty sure tools like this must be custom built, it needs to access the specific program of whatever made it.\n\n\u003E \n\u003E This has great potential for optimizing ScanSat, a big performance killer.\n\nI\u0027m not exactly sure how ScanSat works, but that could be a possibility."},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2015-02-21T18:59:32Z","Content":"\u003E \n\u003E This has great potential for optimizing ScanSat, a big performance killer.\n\nI\u0027ve considered something like this before, but there are a few complicating factors for SCANsat. The map is re-sizable, so you would need one very large data file for each planet. Most of the time you could just interpolate a smaller map from the bigger data file. But if you wanted something bigger it wouldn\u0027t be possible, or you would have to revert to the slow method. It might be best just to impose some certain maximum size, and if someone wants to export a larger map maybe a separate interface could be provided.\n\nThere is also potentially a problem with on-disk size of all the data files. With mod planets such databases could easily run into the 100s of MB. 16 bits per position (~65000 possible values) would probably be enough to cover the height range of most planets, so that would help keep the size down to some extent, but it\u0027s still a lot of space."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-21T23:56:01Z","Content":"If those are the problem, I can point out solutions.\n\nFirst off, this is already 16bit of data precision. The maps are stored as arrays of signed shorts, and the resolution of each pixel is to the meter. for the \\*very\\* large maps (2880px per 1440px) That makes 7.9Mb of space per map. For all stock bodies, this is about 118MB in total. Honestly, thats pretty small in disk space. And 2880x1440 is large for a map I dont think much larger should be needed. Since the format is .bin, theyre not loaded by KSP unless you are using them, and since you can only load the current body and that the GC throws out arrays fast, that means barely no effect on RAM. Once you have larger maps, you can easily downscale loslessly. As I said, bilinear interpolation is included to read the map.\n\nBasically, all this means is longer download times. Its in game speed vs disk space.\n\n**Edited \u003Ctime datetime=\u00222015-02-21T23:58:34Z\u0022 title=\u002202/21/2015 11:58  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 21, 2015\u003C/time\u003E by stupid\\_chris**"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-23T03:20:58Z","Content":"To get the heightmap, you need to read out the data from the MapSO that\u0027s a member of the PQSMod\\_VertexHeightMap object. That\u0027s just an uncompressed array of the heightmap image."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-23T13:55:05Z","Content":"\u003E \n\u003E To get the heightmap, you need to read out the data from the MapSO that\u0027s a member of the PQSMod\\_VertexHeightMap object. That\u0027s just an uncompressed array of the heightmap image.\n\nWait, what are you replying to? ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-24T07:35:46Z","Content":"To this:\n\n\u003E \n\u003E As Nathan said, not like I did it. It has been done and can be done, but Im pretty sure you dont need to itterate like I did to do it, I think the maps are stored somewhere. Probably try probing the ScaledSpaceTransform materials?\n\nBecause the texture itself will not exist.\\* You can compile the MapSO to texture2D, then export that, though.\n\n\\*I dearly hope it won\u0027t. That would be the utmost of stupidity / profligacy, to keep *two* uncompressed copies of the heightmap lying around..."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-25T10:35:34Z","Content":"\u003E \n\u003E To this:\n\u003E Because the texture itself will not exist.\\* You can compile the MapSO to texture2D, then export that, though.\n\u003E \n\u003E \\*I dearly hope it won\u0027t. That would be the utmost of stupidity / profligacy, to keep *two* uncompressed copies of the heightmap lying around...\n\nI\u0027m rather suprised I\u0027ll admit that the full texture of the planet isn\u0027t stored in the ScaledSpaceTransform materials :/ I\u0027d expect a reference to be found for it to display correctly."},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-25T22:04:09Z","Content":"The diffuse and normal maps used for scaledspace are linked to in the material applied there, yes, but they\u0027re marked as unreadable so you can\u0027t extract them. But we were talking about the heightmap, which is neither of those."},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2015-02-26T04:37:15Z","Content":"\u003E \n\u003E The diffuse and normal maps used for scaledspace are linked to in the material applied there, yes, but they\u0027re marked as unreadable so you can\u0027t extract them. But we were talking about the heightmap, which is neither of those.\n\nPhilotical was asking about surface map, not heightmap ![:P](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif)"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-26T06:36:22Z","Content":"Wow, I misread that rather badly. Only way to get hi-res planet textures is by doing what Chris did but in color, or using the built-in CreateMaps() method that he despises. You can\u0027t get the existing scaled space textures (unless you dig in the assets) because they\u0027re loaded (and set to read-only) before plugins are, to the best of my knowledge, but besides they\u0027re only 2048x1024."}]}