{"TopicId":107123,"ForumId":29,"TopicTitle":"Is it possible to edit the right-click action menu?","CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-03T10:16:03Z","PageNum":1,"Articles":[{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-03T10:16:03Z","Content":"\n\u003Cp\u003EAs the title says, I was wondering whether it is possible to edit the right-click action menu of parts when in the VAB and in-flight.\u003C/p\u003E\u003Cp\u003EThanks\u003C/p\u003E\u003Cp\u003EEDIT: To clarify, I want to edit one of the built-in options in the right-click menu.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-04T16:10:34Z\u0022 title=\u002205/04/2015 04:10  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 4, 2015\u003C/time\u003E by Zarpar\u003C/strong\u003E\n\u003Cbr\u003ETo clarify question\n\u003C/span\u003E\n"},{"CreatedByName":"Kanddak","CreatedById":55380,"CreatedDateTime":"2015-05-03T13:58:39Z","Content":"\n\u003Cp\u003ETake a look at \u003Ca href=\u0022https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs\u003C/a\u003E ; that\u0027s an example of a partmodule that defines two events for the part\u0027s action menu, where each event deactivates itself and activates the other event.\u003C/p\u003E\u003Cp\u003EI\u0027m new at this myself so I don\u0027t know if there\u0027s a good way to activate and deactivate events belonging to other partmodules, so if that\u0027s what you\u0027re hoping to do, hopefully someone more experienced than me will come tell us about it.\u003C/p\u003E\n"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-04T16:09:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kanddak\u0022 data-cite=\u0022Kanddak\u0022\u003E\u003Cdiv\u003ETake a look at \u003Ca href=\u0022https://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/taraniselsu/TacExamples/blob/master/03-PartRightClicking/Source/PartRightClick.cs\u003C/a\u003E ; that\u0027s an example of a partmodule that defines two events for the part\u0027s action menu, where each event deactivates itself and activates the other event.\u003Cp\u003EI\u0027m new at this myself so I don\u0027t know if there\u0027s a good way to activate and deactivate events belonging to other partmodules, so if that\u0027s what you\u0027re hoping to do, hopefully someone more experienced than me will come tell us about it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis examples appears to add something to the right-click menu, whereas I want to edit a built-in option. I\u0027ll clarify it in the OP.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-04T17:25:45Z","Content":"\n\u003Cp\u003EEdit in what way? Basically yes (the prefabs are exposed), but working with EzGUI by hand is tedious. If you had some idea of what you wanted to do it would be helpful\u003C/p\u003E\n"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-05T06:50:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EEdit in what way? Basically yes (the prefabs are exposed), but working with EzGUI by hand is tedious. If you had some idea of what you wanted to do it would be helpful\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI was essentially trying to research whether \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/118636-Put-Numbers-into-the-VAB-sliders-for-easier-and-faster-tweaking-of-thrust\u0022 rel=\u0022external nofollow\u0022\u003Ethis\u003C/a\u003E was possible.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-05T17:22:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Zarpar\u0022 data-cite=\u0022Zarpar\u0022\u003E\u003Cdiv\u003EI was essentially trying to research whether \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/118636-Put-Numbers-into-the-VAB-sliders-for-easier-and-faster-tweaking-of-thrust\u0022 rel=\u0022external nofollow\u0022\u003Ethis\u003C/a\u003E was possible.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s a good suggestion. I spent about 20 minutes poking at it and came up with this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[KSPAddon(KSPAddon.Startup.EditorAny, true)]\u003Cbr\u003Epublic class CtrlClickEditNumber : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private const string ControlLockId = \u0022InputValueDialogLock\u0022;\u003Cbr\u003E    private UIPartActionFloatRange paFloatRange;\u003Cbr\u003E\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        DontDestroyOnLoad(this);\u003Cbr\u003E\u003Cbr\u003E        paFloatRange =\u003Cbr\u003E            UIPartActionController.Instance.fieldPrefabs.FirstOrDefault(\u003Cbr\u003E                fi =\u0026gt; fi.GetType() == typeof(UIPartActionFloatRange)) as UIPartActionFloatRange;\u003Cbr\u003E\u003Cbr\u003E        if (paFloatRange == null)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.LogError(\u0022Failed to find a UI prefab. Post a bug report\u0022);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        paFloatRange.gameObject.PrintComponents(new DebugLog(\u0022FloatRange\u0022));\u003Cbr\u003E        paFloatRange.gameObject.AddComponent\u0026lt;ControlClickEntersEditMode\u0026gt;();\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eclass ControlClickEntersEditMode : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private const string ControlLockId = \u0022FloatSliderEditModeLock\u0022;\u003Cbr\u003E    private const float ColorChangePerSecond = 2f;\u003Cbr\u003E\u003Cbr\u003E    private static Color FlashColor = new Color(255f, 255f, 255f);\u003Cbr\u003E    private static char[] ValidCharacters = {\u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027, \u0027-\u0027, \u0027,\u0027, \u0027.\u0027};\u003Cbr\u003E\u003Cbr\u003E    private Material _backgroundMaterial;\u003Cbr\u003E    private Color _originalBackgroundColor;\u003Cbr\u003E    private Gradient _gradient;\u003Cbr\u003E    private UIPartActionFieldItem _fieldItem;\u003Cbr\u003E    private UIProgressSlider _slider;\u003Cbr\u003E    private UIButton _button;\u003Cbr\u003E    private SpriteText _ourSpriteText;\u003Cbr\u003E    private SpriteText _originalSpriteText;\u003Cbr\u003E    private bool _editMode = false;\u003Cbr\u003E    private string _inputString = string.Empty;\u003Cbr\u003E    private float _initialValue = 0f;\u003Cbr\u003E\u003Cbr\u003E    private void Start()\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022ControlClickEntersEditMode instantiated\u0022);\u003Cbr\u003E\u003Cbr\u003E        if (!LookupComponents())\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ControlClickEntersEditMode: failed to find a dependency\u0022);\u003Cbr\u003E            Destroy(this);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        // the game sets the original sprite text every frame, overwriting any changes. Instead of \u003Cbr\u003E        // playing LateUpdate shenanigans and fighting it, clone that component and then we can\u003Cbr\u003E        // activate/deactive our custom text as needed\u003Cbr\u003E        var clone = Instantiate(_originalSpriteText.gameObject, _originalSpriteText.transform.position, _originalSpriteText.transform.rotation) as GameObject;\u003Cbr\u003E\u003Cbr\u003E        _ourSpriteText = clone.GetComponent\u0026lt;SpriteText\u0026gt;();\u003Cbr\u003E        _ourSpriteText.Text = \u0022\u0026lt;not set\u0026gt;\u0022;\u003Cbr\u003E\u003Cbr\u003E        clone.SetActive(false);\u003Cbr\u003E        clone.transform.parent = _originalSpriteText.transform.parent;\u003Cbr\u003E        clone.layer = _originalSpriteText.gameObject.layer;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        _gradient = new Gradient();\u003Cbr\u003E        _gradient.SetKeys(\u003Cbr\u003E            new[]\u003Cbr\u003E            {\u003Cbr\u003E                new GradientColorKey(_originalBackgroundColor, 0f),\u003Cbr\u003E                new GradientColorKey(FlashColor, 1f)\u003Cbr\u003E            },\u003Cbr\u003E            new[] {new GradientAlphaKey(.5f, 0f), new GradientAlphaKey(.9f, 1f)});\u003Cbr\u003E\u003Cbr\u003E        _button.AddValueChangedDelegate(OnSliderClick);\u003Cbr\u003E        _initialValue = _slider.Value;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private bool LookupComponents()\u003Cbr\u003E    {\u003Cbr\u003E        _fieldItem = gameObject.GetComponent\u0026lt;UIPartActionFieldItem\u0026gt;();\u003Cbr\u003E        if (_fieldItem == null)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ERROR: Couldn\u0027t find UIPartActionFieldItem on \u0022 \u002B gameObject.name);\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        _slider = GetComponentsInChildren\u0026lt;UIProgressSlider\u0026gt;(true).FirstOrDefault();\u003Cbr\u003E        if (_slider == null)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ERROR: Couldn\u0027t find UIProgressSlider\u0022);\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        _slider.AddValueChangedDelegate(OnSliderClick);\u003Cbr\u003E\u003Cbr\u003E        _button = GetComponentsInChildren\u0026lt;UIButton\u0026gt;(true).FirstOrDefault();\u003Cbr\u003E        if (_button == null)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ERROR: Couldn\u0027t find UIButton\u0022);\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        var background = transform.Find(\u0022Background\u0022);\u003Cbr\u003E        if (background == null)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ERROR: Couldn\u0027t find Background transform\u0022);\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E        _backgroundMaterial = background.renderer.material; // this causes the material to be clone\u003Cbr\u003E        _originalBackgroundColor = _backgroundMaterial.color;\u003Cbr\u003E\u003Cbr\u003E        // the game seems to set the text value of this every frame. Instead of fighting with\u003Cbr\u003E        // it or playing LateUpdate shenanigans, we\u0027ll just clone it and hide the original\u003Cbr\u003E        // when needed\u003Cbr\u003E        _originalSpriteText = GetComponentsInChildren\u0026lt;SpriteText\u0026gt;(true).FirstOrDefault(st =\u0026gt; st.name == \u0022amnt\u0022);\u003Cbr\u003E        if (_originalSpriteText == null)\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022ERROR: couldn\u0027t find SpriteText\u0022);\u003Cbr\u003E            return false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        return true;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void OnDestroy()\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022ControlClickEntersEditMode destroying\u0022);\u003Cbr\u003E\u003Cbr\u003E        Destroy(_backgroundMaterial);\u003Cbr\u003E        _slider.RemoveValueChangedDelegate(OnSliderClick);\u003Cbr\u003E        _button.RemoveValueChangedDelegate(OnSliderClick);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void OnSliderClick(IUIObject obj)\u003Cbr\u003E    {\u003Cbr\u003E        if (Input.GetKey(KeyCode.LeftControl))\u003Cbr\u003E            SetEditMode(true);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void SetFieldValue(float value)\u003Cbr\u003E    {\u003Cbr\u003E        _fieldItem.Field.SetValue(value, _fieldItem.Field.host);\u003Cbr\u003E        _ourSpriteText.Text = value.ToString(new NumberFormatInfo());\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void Update()\u003Cbr\u003E    {\u003Cbr\u003E        if (!_editMode) return;\u003Cbr\u003E\u003Cbr\u003E        if (Input.GetKeyDown(KeyCode.Escape))\u003Cbr\u003E        {\u003Cbr\u003E            _inputString = _initialValue.ToString(\u0022F2\u0022);\u003Cbr\u003E            SetEditMode(false);\u003Cbr\u003E\u003Cbr\u003E        }\u003Cbr\u003E        else if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.KeypadEnter))\u003Cbr\u003E        {\u003Cbr\u003E            if (!IsNumeric(_inputString))\u003Cbr\u003E            {\u003Cbr\u003E                Debug.LogError(\u0022Couldn\u0027t set slider value because \u0027\u0022 \u002B _inputString \u002B \u0022\u0027 is nonnumeric\u0022);\u003Cbr\u003E                SetFieldValue(_initialValue);\u003Cbr\u003E            }\u003Cbr\u003E            else SetFieldValue(float.Parse(_inputString, NumberStyles.Float));\u003Cbr\u003E\u003Cbr\u003E            SetEditMode(false);\u003Cbr\u003E        } else if (Input.anyKeyDown)\u003Cbr\u003E        {\u003Cbr\u003E            if (ValidCharacters.Contains(Event.current.character))\u003Cbr\u003E            {\u003Cbr\u003E                _inputString \u002B= Event.current.character;\u003Cbr\u003E            } else if (Input.GetKeyDown(KeyCode.Backspace))\u003Cbr\u003E            {\u003Cbr\u003E                if (_inputString.Length \u0026gt; 0) _inputString = _inputString.Substring(0, _inputString.Length - 1);\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            _ourSpriteText.Text = _inputString;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private bool IsNumeric(string str)\u003Cbr\u003E    {\u003Cbr\u003E        float result;\u003Cbr\u003E\u003Cbr\u003E        return float.TryParse(str, NumberStyles.Float, new NumberFormatInfo(), out result);\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void SetEditMode(bool tf)\u003Cbr\u003E    {\u003Cbr\u003E        if (tf)\u003Cbr\u003E        {\u003Cbr\u003E            if (!_editMode)\u003Cbr\u003E            {\u003Cbr\u003E                _editMode = true;\u003Cbr\u003E                _originalSpriteText.gameObject.SetActive(false);\u003Cbr\u003E                _ourSpriteText.gameObject.SetActive(true);\u003Cbr\u003E                _inputString = _fieldItem.Field.GetValue\u0026lt;float\u0026gt;(_fieldItem.Field.host).ToString(\u0022F2\u0022);\u003Cbr\u003E\u003Cbr\u003E                InputLockManager.SetControlLock(ControlTypes.All, ControlLockId);\u003Cbr\u003E                StartCoroutine(\u0022FlashySlider\u0022);\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            _editMode = false;\u003Cbr\u003E            _originalSpriteText.gameObject.SetActive(true);\u003Cbr\u003E            _ourSpriteText.gameObject.SetActive(false);\u003Cbr\u003E            InputLockManager.RemoveControlLock(ControlLockId);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private IEnumerator FlashySlider()\u003Cbr\u003E    {\u003Cbr\u003E        float delta = 0f;\u003Cbr\u003E\u003Cbr\u003E        while (_editMode)\u003Cbr\u003E        {\u003Cbr\u003E            delta = UtilMath.WrapAround(delta \u002B Time.deltaTime*ColorChangePerSecond, 0f, 2f);\u003Cbr\u003E\u003Cbr\u003E            _backgroundMaterial.color = _gradient.Evaluate(delta \u0026lt; 1f ? delta : 2f - delta);\u003Cbr\u003E\u003Cbr\u003E            yield return 0;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        _backgroundMaterial.color = _originalBackgroundColor;\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt needs polish and support for the other slider types but it\u0027s a working prototype to get you started (Ctrl\u002Bclick on a slider to enter edit mode, escape cancels, enter confirms). I tested it on the engine thrust limit slider\u003C/p\u003E\n"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-06T20:59:51Z","Content":"\n\u003Cp\u003EWow this is detailed, thanks. You ok with me building on this for a full mod, with credit to you for the prototype?\u003C/p\u003E\u003Cp\u003EEDIT: Also, what is a UIPartActionFloatRange?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-05-06T21:36:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Zarpar\u0022 data-cite=\u0022Zarpar\u0022\u003E\u003Cdiv\u003EWow this is detailed, thanks. You ok with me building on this for a full mod, with credit to you for the prototype?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes absolutely.\u003C/p\u003E\u003Cp\u003EUIPartActionFloatRange is a component that contains the logic for the slider used for KSPFields marked with the UI_FloatRange attribute. When a UIPartActionWindow is created, each PartModule field is checked for attributes that determine whether or not and how that field gets displayed in the part popup menu; in this case, we\u0027re modifying the prefab that will be used for PartModule fields with the UI_FloatRange attribute.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-06T21:43:05Z\u0022 title=\u002205/06/2015 09:43  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 6, 2015\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Zarpar","CreatedById":142729,"CreatedDateTime":"2015-05-07T17:06:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EYes absolutely.\u003Cp\u003EUIPartActionFloatRange is a component that contains the logic for the slider used for KSPFields marked with the UI_FloatRange attribute. When a UIPartActionWindow is created, each PartModule field is checked for attributes that determine whether or not and how that field gets displayed in the part popup menu; in this case, we\u0027re modifying the prefab that will be used for PartModule fields with the UI_FloatRange attribute.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI can\u0027t appear to get this code to work. I\u0027ve got all the right imports added and compiled it to a dll placed in GameData/PluginName but keep getting the error \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAssemblyLoader: Exception loading \u0027PluginName\u0027: System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEDIT: Fixed now, I was compiling for .NET 4.0 instead of 3.5.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-07T17:12:43Z\u0022 title=\u002205/07/2015 05:12  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 7, 2015\u003C/time\u003E by Zarpar\u003C/strong\u003E\n\u003C/span\u003E\n"}]}