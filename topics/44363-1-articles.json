{"TopicId":44363,"ForumId":55,"TopicTitle":"Compile all of those text files to binary","CreatedByName":"technicalfool","CreatedById":70430,"CreatedDateTime":"2013-08-30T08:44:29Z","PageNum":1,"Articles":[{"CreatedByName":"technicalfool","CreatedById":70430,"CreatedDateTime":"2013-08-30T08:44:29Z","Content":"\n\u003Cp\u003EBefore I start: I\u0027m no expert. I have a degree in a relevant field, which basically means I know enough to be dangerous, but Shigeru Miyamoto I am most certainly not.\u003C/p\u003E\u003Cp\u003EThat said, I notice that a lot of the resources in KSP take the form of text-based files. These will all have to be parsed before being loaded into memory. So, once they are loaded, is there any reason that the big blob in RAM can\u0027t just be dumped to disk for a faster load next time? A rudimentary check to see if any part files have changed or added, and then loading the game can be one big (and more efficient) stream-into-RAM operation. Hell, you could even cheese the checking by just having a \u0022changed.cfg\u0022 or something that gets deleted if you\u0027ve added a mod or want to refresh the blob.\u003C/p\u003E\u003Cp\u003EAm I preaching to the choir and that\u0027s already what\u0027s going to happen later in development, or is this a half decent idea?\u003C/p\u003E\n"},{"CreatedByName":"allmhuran","CreatedById":66124,"CreatedDateTime":"2013-08-30T12:04:58Z","Content":"\n\u003Cp\u003EThe idea is sound, we do it with a couple of tools we\u0027ve built at work. In order to detect if anything new needs to be loaded we just write out a simple text list of loaded files (the cache inventory.. text so a programmer can read it too if necessary) with their last modified date times and the last cached date time in the header (ie, \u0022now\u0022 after loading) along with the binary disk cache itself. When the tools initialize they check the cache inventory first before loading a file. New or changed files aren\u0027t matched to the inventory and are thus reloaded from the plain-old-text when needed.\u003C/p\u003E\u003Cp\u003ENot sure whether something like this is already planned.\u003C/p\u003E\n"},{"CreatedByName":"gloowa","CreatedById":22683,"CreatedDateTime":"2013-08-30T22:18:07Z","Content":"\n\u003Cp\u003EWas suggested way back, in form of game reading this binaries, and separate exe that goes over all config files and re-compiles where necessary producing new binaries. Not sure if it got any response.\u003C/p\u003E\u003Cp\u003EBut the principle is sound and could cut a lot of time from loading, i think that text parsing is one of the slowest things one can do when storing data.\u003C/p\u003E\u003Cp\u003EOn the other hand, we\u0027re still in beta so it\u0027s nice to have option to easily change part config without any additional hassle.\u003C/p\u003E\n"},{"CreatedByName":"SilverWarior","CreatedById":80669,"CreatedDateTime":"2013-08-30T22:35:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022gloowa\u0022 data-cite=\u0022gloowa\u0022\u003E\u003Cdiv\u003EOn the other hand, we\u0027re still in beta so it\u0027s nice to have option to easily change part config without any additional hassle.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs far as I this is exactly the reasony why this is implemented this way as it is now.\u003C/p\u003E\u003Cp\u003EBut as far as I know Squad is working on new ingame resource managment system which would be storing all tha data inside a local database and also alow changing most of the values even while the game is already running. Athleast that was the original idea.\u003C/p\u003E\n"}]}