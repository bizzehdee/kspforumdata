{"TopicId":121435,"ForumId":36,"TopicTitle":"[WIP][Plugin/Tool][November 1] AssemblyReloader - Tool for plugin authors","CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-09-22T17:29:14Z","PageNum":1,"Articles":[{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-09-22T17:29:14Z","Content":"\n\u003Cp\u003E\nOne of the first things almost everybody that writes a plugin for KSP discovers is that you\u0027re going to spend a \u003Cem\u003Elot\u003C/em\u003E of time restarting the game. It\u0027d be pretty neato if you could just press a button and see your current version running in a few seconds, wouldn\u0027t it? This tool is designed to do that with a few restrictions.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve brain dumped most of the important details into the manual. If you find a bug, have a comment or suggestion and so on let me know. It\u0027s only been tested on Windows 7/32 bit KSP so far but there isn\u0027t any technical reason aside from coder goof that would prevent it from running on other systems as far as I know.\n\u003C/p\u003E\n\u003Cblockquote lang=\u0022en\u0022 xml:lang=\u0022en\u0022\u003E\n\u003Ca href=\u0022//imgur.com/a/wsrZO\u0022 rel=\u0022external nofollow\u0022\u003EJavascript is disabled. View full album\u003C/a\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nSupported types:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nMonoBehaviour (w \u0026amp; w/o KSPAddon)\n\u003C/li\u003E\n\u003Cli\u003E\nPartModule\n\u003C/li\u003E\n\u003Cli\u003E\nScenarioModule\n\u003C/li\u003E\n\u003Cli\u003E\nVesselModule\n\u003C/li\u003E\n\u003Cli\u003E\nAny type not blacklisted below\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nKnown Issues:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nNone yet\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nPlanned Features (note: if your plugin contains any of these types, it won\u0027t be reloadable -- see manual):\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nContracts\n\u003C/li\u003E\n\u003Cli\u003E\nStrategies\n\u003C/li\u003E\n\u003Cli\u003E\nKerbal experience traits\n\u003C/li\u003E\n\u003Cli\u003E\nKerbal experience effects\n\u003C/li\u003E\n\u003Cli\u003E\nParts (the type itself)\n\u003C/li\u003E\n\u003Cli\u003E\nInternalModules\n\u003C/li\u003E\n\u003Cli\u003E\nUndoubtedly I\u0027ve forgotten some other types that need custom code\n\u003C/li\u003E\n\u003Cli\u003E\nInterface improvements\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis is meant to replicate stock behaviour as closely as possible, down to the order things are initialized. If you see something that doesn\u0027t seem right or behaviour is different when loaded by AssemblyReloader as opposed to the game\u0027s AssemblyLoader, let me know.\n\u003C/p\u003E\n\u003Cp\u003E\nDon\u0027t use it with a save you care about naturally, there\u0027s all kinds of potential to wreck things using this. Make a backup, quicksave before reloading, etc\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cstrong\u003EDownload:\u003C/strong\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://bitbucket.org/xEvilReeperx/ksp_assemblyreloader/downloads/KSP-1.3-AssemblyReloader.zip\u0022 rel=\u0022external nofollow\u0022\u003EDownload\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cstrong\u003EChangelog:\u003C/strong\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n1.0.2 (Nov 16 2015)\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nPartModule.OnInitialize now called correctly for reloaded PartModules\n\u003C/li\u003E\n\u003Cli\u003E\nKSPAddons now created after all loaders have run\n\u003C/li\u003E\n\u003Cli\u003E\nEveryScene addons no longer created twice\n\u003C/li\u003E\n\u003Cli\u003E\nFixed some serialization issues\n\u003C/li\u003E\n\u003Cli\u003E\nAdded ApplicationLauncher button\n\u003C/li\u003E\n\u003Cli\u003E\nFixed an issue that prevented Cecil from correctly resolving assemblies referenced by a reloadable plugin outside of the reloadable plugin\u0027s folder\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n1.0.1\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nAdded check against KSPAddon-marked PartModules\n\u003C/li\u003E\n\u003Cli\u003E\nFixed a bug that tried to access opcodes in method definitions that had no body\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nSource:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://bitbucket.org/xEvilReeperx/ksp_assemblyreloader/src\u0022 rel=\u0022external nofollow\u0022\u003EAssemblyReloader\u003C/a\u003E (GPLv3)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://bitbucket.org/xEvilReeperx/reepercommon/src\u0022 rel=\u0022external nofollow\u0022\u003EReeperCommon (dependency)\u003C/a\u003E (GPLv3)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://bitbucket.org/xEvilReeperx/ksp_reeperassemblylibrary/src\u0022 rel=\u0022external nofollow\u0022\u003EReeperAssemblyLibrary (dependency)\u003C/a\u003E (GPLv3)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://bitbucket.org/xEvilReeperx/ksp_reeperloader/src\u0022 rel=\u0022external nofollow\u0022\u003EReeperLoader (dependency)\u003C/a\u003E (GPLv3)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/strangeioc/strangeioc\u0022 rel=\u0022external nofollow\u0022\u003EStrangeIoC (dependency)\u003C/a\u003E (\u003Ca href=\u0022https://github.com/strangeioc/strangeioc/blob/master/StrangeIoC/LICENSE-2.0.txt\u0022 rel=\u0022external nofollow\u0022\u003EAPACHE license\u003C/a\u003E)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/jbevain/cecil\u0022 rel=\u0022external nofollow\u0022\u003EMono.Cecil 0.9.6 (dependency)\u003C/a\u003E (\u003Ca href=\u0022https://github.com/jbevain/cecil/blob/master/LICENSE.md\u0022 rel=\u0022external nofollow\u0022\u003EMIT/X11 license\u003C/a\u003E)\n\u003C/p\u003E\n\u003Cp\u003E\nLicense: \u003Ca href=\u0022http://www.gnu.org/licenses/gpl-3.0.en.html\u0022 rel=\u0022external nofollow\u0022\u003EGPLv3\u003C/a\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-07-08T16:24:50Z\u0022 title=\u002207/08/2017 04:24  PM\u0022 data-short=\u00227 yr\u0022\u003EJuly 8, 2017\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003Cbr\u003E1.3\n\u003C/span\u003E\n"},{"CreatedByName":"Acea","CreatedById":98766,"CreatedDateTime":"2015-09-22T17:53:18Z","Content":"\n\u003Cp\u003EDefinitely nice work man\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-09-24T04:05:05Z","Content":"\n\u003Cp\u003EThanks! So uhhh anyone had a chance to try it out?\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-09-24T04:18:03Z","Content":"\n\u003Cp\u003EAlas I have not, but I want to congratulate you as well, this sounds awesome!\u003C/p\u003E\n"},{"CreatedByName":"rabidninjawombat","CreatedById":108889,"CreatedDateTime":"2015-09-24T04:30:00Z","Content":"\n\u003Cp\u003EIve gotta a little plug-in work on my to do list on my day off tomorrow so im definitely gonna give it a spin! Cant imagine how much time this could save not having to reload textures EVERYTIME! Thanks for doing this.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-09-28T12:55:48Z","Content":"\n\u003Cp\u003EWell it\u0027s saved me a lot of time, I\u0027m surprised more people haven\u0027t tried it ... or is there a problem getting it to work? Let me know if I haven\u0027t explained something well in the manual, it was a bit of a rush job to get something out for feedback\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-05T11:51:47Z","Content":"\n\u003Cp\u003EJust making sure this wasn\u0027t forgotten \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-05T13:35:36Z","Content":"\n\u003Cp\u003EIn theory I\u0027ll be diving back into AGX shortly here which is a pretty involved mod and so should be a good test of this. If it works it will save me a ton of time.\u003C/p\u003E\u003Cp\u003EMy only question would be if non-inherited classes reload? I have a lot of code in the PartModule and KSPAddon types that will be caught, but I then also have a lot of classes of my own present that would need to reload as well.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class MyClass\u003Cbr\u003E{\u003Cbr\u003E/code\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs what I\u0027m talking about.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-05T14:03:31Z","Content":"\n\u003Cp\u003EYes, all of the types local to a version of the assembly are unique to it and will be \u0022reloaded\u0022 in the sense that from their perspective, they\u0027re being created for the very first time. \u003C/p\u003E\u003Cp\u003EThe types that need special code from AssemblyReloader are the ones that KSP \u0022magically\u0022 finds. I put the restriction in place because it would otherwise be possible to have multiple versions of an assembly being actively used leading to a great deal of confusion.\u003C/p\u003E\u003Cp\u003EYou\u0027ll be responsible for any cleanup though. Example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class MySettingsSingleton\u003Cbr\u003E{\u003Cbr\u003E    private static MySettingsSingleton _instance;\u003Cbr\u003E\u003Cbr\u003E    public static MySettingsSingleton Instance\u003Cbr\u003E    {\u003Cbr\u003E        get\u003Cbr\u003E        {\u003Cbr\u003E            if (_instance != null) return _instance;\u003Cbr\u003E            _instance = new MySettingsSingleton();\u003Cbr\u003E            GameEvents.onGameStateSave.Add(_instance.OnGameSave);\u003Cbr\u003E            GameEvents.onGameStateLoad.Add(_instance.OnGameLoad);\u003Cbr\u003E\u003Cbr\u003E            return _instance;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnGameSave(ConfigNode config)\u003Cbr\u003E    {\u003Cbr\u003E        // ...\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private void OnGameLoad(ConfigNode config)\u003Cbr\u003E    {\u003Cbr\u003E        // ...\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhen the plugin containing this type is reloaded, this particular object will stick around due to its static nature. When the \u0022new\u0022 version refers to a MySettingsSingleton, it will refer to \u003Cem\u003Eits own version\u003C/em\u003E which hasn\u0027t been initialized and suddenly you\u0027ve now got two of them hanging around. This example is pretty harmless because those GameEvent registrations will be forcefully removed on reload making it inert (and a warning will be displayed in the log letting you know you\u0027ve forgotten to unregister something) but you can see how there might be unintended consequences depending on what exactly this object does\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-05T14:47:36Z","Content":"\n\u003Cp\u003EHmmm.\u003C/p\u003E\u003Cp\u003EI\u0027ll have to remember to do clean testing at the end then, I do have some static stuff that might run afoul of that, but I think it all reloads on game scene switch so a quick jump back to spacecenter should fix any issues I run into.\u003C/p\u003E\u003Cp\u003EI\u0027ll let you know how it goes when I get a chance to look at this, will probably be a few days still.\u003C/p\u003E\u003Cp\u003EActually, how do you use this at all? I have my dev environment setup to create the revised .dll files directly into my testing KSP install GameData directory, if I try to build a new version with KSP still open the build fails because Visual Studio can\u0027t lock the files to overwrite them. Do I need to build to another directory and copy them in via Windows Explorer?\u003C/p\u003E\u003Cp\u003E(Apologies if this is in the manual, on mobile and have not yet downloaded it.)\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-05T15:21:50Z","Content":"\n\u003Cp\u003EIt is but no biggie. Rename the dll to reloadable (\u0022MyPlugin.dll\u0022 -\u0026gt; \u0022MyPlugin.reloadable\u0022, \u0022MyPlugin.dll.mdb\u0022 -\u0026gt; \u0022MyPlugin.reloadable.mdb\u0022 if you use debug symbols). The tool will load it in a way that doesn\u0027t lock the file. A simple post-build event works great\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-05T18:15:56Z","Content":"\n\u003Cp\u003EAlright, I\u0027ll give that a shot.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-07T03:15:20Z","Content":"\n\u003Cp\u003EOkay, I\u0027ve gotten a chance to try this out and unfortunately it seems to cause issues with ModuleManager.\u003C/p\u003E\u003Cp\u003EMaking no other changes (so my mod is still AGExt.dll), extracting the AssemblyReloader folder into my GameData directory causes ModuleManager to stall at the following location:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[ModuleManager] ModuleManager env info\u003Cbr\u003EWin32NT FFFFFFFFFFFFFFFF\u003Cbr\u003EArgs: \u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EArgumentException: The specified path is not of a legal form (empty).\u003Cbr\u003E  at System.IO.Path.InsecureGetFullPath (System.String path) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at System.IO.Path.GetFullPath (System.String path) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at System.Diagnostics.FileVersionInfo.GetVersionInfo (System.String fileName) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ModuleManager.MMPatchLoader.PrePatchInit () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ModuleManager.MMPatchLoader\u002B\u0026lt;ProcessPatch\u0026gt;c__Iterator0.MoveNext () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E(Filename:  Line: -1)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote that AssemblyeReloader doesn\u0027t actually throw an error, KSP just sits with a stalled loading bar and nothing writes to the log.\u003C/p\u003E\u003Cp\u003ENote I alt-tabbed, this is the last thing in the output_log.txt with KSP still running.\u003C/p\u003E\u003Cp\u003EAfter Alt-F4\u0027ing KSP and deleting the AssemblyReloaded folder from my GameData directory, making no other change, KSP starts normally.\u003C/p\u003E\u003Cp\u003EFull output_log.txt here: \u003Ca href=\u0022https://drive.google.com/file/d/0B6-5UOjSWq7bQ2FZZ1dTY2p1MFE/view?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://drive.google.com/file/d/0B6-5UOjSWq7bQ2FZZ1dTY2p1MFE/view?usp=sharing\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ENote that I\u0027ve added the \u0022KSPSTALLSHERE\u0022 line to indicate where KSP stalls in the loading process.\u003C/p\u003E\u003Cp\u003ETo test, I went ahead and renamed my AGExt.dll file to AGExt.reloadable and tried booting KSP, but that caused AssemblyReloader to throw the following error: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ELoad(Audio): SmartParts/Sounds/buzz\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: No configuration file found at \u0022H:\\1.0.4 Dev\\GameData\\Diazo\\AGExt\\AGExt.reloadable.config\u0022; defaults will be used\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: First-load for plugin Diazo/AGExt/AGExt\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: No previous assembly handle\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Loading plugin AGExt\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Loading AGExt without symbols\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Checking AGExt for unsupported types...\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Unsupported type check complete\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Changing plugin identity\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Helper type successfully inserted\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Creating proxy method for get_CodeBase\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Proxy method System.String AssemblyReloaderInjected.Helper::get_CodeBase(System.Reflection.Assembly) created\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Creating proxy method for get_Location\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Proxy method System.String AssemblyReloaderInjected.Helper::get_Location(System.Reflection.Assembly) created\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon attributes with ReloadableAddonAttribute\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon attribute on ActionGroupsExtended.AGXMainMenu\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon attribute on ActionGroupsExtended.AGXEditor\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon attribute on ActionGroupsExtended.AGXFlight\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon attribute on ActionGroupsExtended.AGExtMainMenu\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Replacing KSPAddon references with ReloadableAddonAttribute references\u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Exception while loading plugin: System.NullReferenceException: Object reference not set to an instance of an object\u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.Weaving.Operations.CommandReplaceKSPAddonWithReloadableAddon.ReplaceKSPAddonReferencesWithReloadableAddon (Mono.Cecil.TypeDefinition type) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.Weaving.Operations.CommandReplaceKSPAddonWithReloadableAddon.Execute () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.executeCommand (ICommand command) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.SignalCommandBinder.invokeCommand (System.Type cmd, ICommandBinding binding, System.Object data, Int32 depth) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.next (ICommandBinding binding, System.Object data, Int32 depth) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.ReleaseCommand (ICommand command) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.next (ICommandBinding binding, System.Object data, Int32 depth) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.ReleaseCommand (ICommand command) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.next (ICommandBinding binding, System.Object data, Int32 depth) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.ReleaseCommand (ICommand command) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.next (ICommandBinding binding, System.Object data, Int32 depth) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.command.impl.CommandBinder.ReactTo (System.Object trigger, System.Object data) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at (wrapper delegate-invoke) System.Action\u00602\u0026lt;strange.extensions.signal.api.IBaseSignal, object[]\u0026gt;:invoke_void__this___IBaseSignal_object[] (strange.extensions.signal.api.IBaseSignal,object[])\u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.signal.impl.BaseSignal.Dispatch (System.Object[] args) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at strange.extensions.signal.impl.Signal\u00601[T].Dispatch (.T type1) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.Weaving.WovenRawAssemblyDataFactory.Weave (Mono.Cecil.AssemblyDefinition definition) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.Weaving.WovenRawAssemblyDataFactory.Create (ReeperAssemblyLibrary.ReeperAssembly assembly) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.Weaving.WriteRawAssemblyDataToDisk.Create (ReeperAssemblyLibrary.ReeperAssembly assembly) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ReeperAssemblyLibrary.ReeperAssemblyLoader.LoadAssembly (ReeperAssemblyLibrary.ReeperAssembly assembly) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at ReeperAssemblyLibrary.ReeperAssemblyLoader.Load (ReeperAssemblyLibrary.ReeperAssembly assembly) [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E  at AssemblyReloader.ReloadablePlugin.CommandLoadReloadablePlugin.Execute () [0x00000] in \u0026lt;filename unknown\u0026gt;:0 \u003Cbr\u003E\u003Cbr\u003E(Filename: C:/buildslave/unity/build/artifacts/StandalonePlayerGenerated/UnityEngineDebug.cpp Line: 56)\u003Cbr\u003E\u003Cbr\u003EART: AGExt: Plugin loaded successfully!\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHowever, this also hits the ModuleManger stall I linked above so I can\u0027t actually test anything as KSP never loads.\u003C/p\u003E\u003Cp\u003EThis is on a Windows 7 64-bit computer.\u003C/p\u003E\u003Cp\u003ELet me know if there is any information I can get you.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-07T03:24:22Z\u0022 title=\u002210/07/2015 03:24  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 7, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-07T05:09:01Z","Content":"\n\u003Cp\u003ECool, thanks for trying it out. The issue with ModuleManager is mentioned briefly in the manual but basically it\u0027s trying to get a file path of an assembly and because of the way I load them, the field is blank. It\u0027s easily fixed inside the MM code though (bolded):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eforeach (AssemblyLoader.LoadedAssembly mod in AssemblyLoader.loadedAssemblies)\u003Cbr\u003E            {\u003Cbr\u003E                try\u003Cbr\u003E                {\u003Cbr\u003E [B]                   if (string.IsNullOrEmpty(mod.assembly.Location))\u003Cbr\u003E                        continue;[/B]\u003Cbr\u003E\u003Cbr\u003E                    FileVersionInfo fileVersionInfo = FileVersionInfo.GetVersionInfo(mod.assembly.Location);\u003Cbr\u003E\u003Cbr\u003E                    AssemblyName assemblyName = mod.assembly.GetName();\u003Cbr\u003E[snip]\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAccessing that same field \u003Cstrong\u003Einside\u003C/strong\u003E of your reloaded assembly (usually via Assembly.GetExecutingAssembly().Location/CodeBase) is fine since it will be replaced with a call to a method that returns the correct thing, assuming you have the relevant option enabled.\u003C/p\u003E\u003Cp\u003EThe other issue was a facepalm oversight of mine and is now fixed in 1.0.1 \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-07T14:51:58Z","Content":"\n\u003Cp\u003EOkay, just to make sure I\u0027m following you correctly, I need to download the ModuleManger.cs file, make the change you\u0027ve noted and compile a custom version correct? (I\u0027m pretty sure I\u0027ve found the exact location I need to make the change already.)\u003C/p\u003E\u003Cp\u003EAs I use MM to add custom partModules, this is something I need to do before I can proceed any farther with this.\u003C/p\u003E\u003Cp\u003ENow, another question about AssemblyLoader. I think I\u0027m okay as I\u0027m referencing another mod, but in my mod this line of code is okay? (referencing the FAR .dll file)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EAssembly FarAsm = null;\u003Cbr\u003E                            foreach (AssemblyLoader.LoadedAssembly Asm in AssemblyLoader.loadedAssemblies)\u003Cbr\u003E                            {\u003Cbr\u003E                                if (Asm.dllName == \u0022FerramAerospaceResearch\u0022)\u003Cbr\u003E                                {\u003Cbr\u003E                                    //Debug.Log(\u0022far found\u0022);\u003Cbr\u003E                                    FarAsm = Asm.assembly;\u003Cbr\u003E                                }\u003Cbr\u003E                            }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAs the FAR.dll file is not reloadable, this is okay as I understand the manual included in the .zip file. (The Dependencies/Reference section under Requirements near the start of the .pdf.)\u003C/p\u003E\u003Cp\u003EMy only concern is that when I hit my own mod (which is reloadable), will this cause issues and break the forEach?\u003C/p\u003E\u003Cp\u003EWill test once I\u0027m home from work tonight.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-07T17:13:29Z","Content":"\n\u003Cp\u003EMM: Yep\u003C/p\u003E\u003Cp\u003ECode snippet: Yep also safe. I\u0027m going to have to come up with a better explanation in the manual. Essentially I load the [reloadable] assemblies from memory which prevents them from having an actual Assembly.Location value and causes Assembly.CodeBase on them to point to the loader instead. \u003Cem\u003EInside\u003C/em\u003E of your reloadable plugin, I can literally rewrite the call, so something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class TestMethodInterception : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private void Awake()\u003Cbr\u003E    {\u003Cbr\u003E        print(\u0022CodeBase (executing assembly): \u0022 \u002B Assembly.GetExecutingAssembly().CodeBase);\u003Cbr\u003E        print(\u0022CodeBase (typeof assembly): \u0022 \u002B typeof (TestMethodInterception).Assembly.CodeBase);\u003Cbr\u003E\u003Cbr\u003E        print(\u0022Location (executing assembly): \u0022 \u002B Assembly.GetExecutingAssembly().Location);\u003Cbr\u003E        print(\u0022Location (typeof assembly): \u0022 \u002B typeof (TestMethodInterception).Assembly.Location);\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWill be rewritten as (see YourPlugin.reloadable.patched inside your favorite disassembler):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic class TestMethodInterception : MonoBehaviour\u003Cbr\u003E{\u003Cbr\u003E    private void Awake()\u003Cbr\u003E    {\u003Cbr\u003E        MonoBehaviour.print(\u0022CodeBase (executing assembly): \u0022 \u002B Helper.get_CodeBase(System.Reflection.Assembly.GetExecutingAssembly()));\u003Cbr\u003E        MonoBehaviour.print(\u0022CodeBase (typeof assembly): \u0022 \u002B Helper.get_CodeBase(typeof(TestMethodInterception).Assembly));\u003Cbr\u003E        MonoBehaviour.print(\u0022Location (executing assembly): \u0022 \u002B Helper.get_Location(System.Reflection.Assembly.GetExecutingAssembly()));\u003Cbr\u003E        MonoBehaviour.print(\u0022Location (typeof assembly): \u0022 \u002B Helper.get_Location(typeof(TestMethodInterception).Assembly));\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWith that helper method being injected as:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Einternal class Helper\u003Cbr\u003E{\u003Cbr\u003E    public static string get_CodeBase(System.Reflection.Assembly assembly)\u003Cbr\u003E    {\u003Cbr\u003E        if (object.ReferenceEquals(System.Reflection.Assembly.GetExecutingAssembly(), assembly))\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022file:///[...]/Kerbal Space Program/GameData/TestMethodInterception/TestMethodInterception.reloadable\u0022;\u003Cbr\u003E        }\u003Cbr\u003E        return assembly.CodeBase;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    public static string get_Location(System.Reflection.Assembly assembly)\u003Cbr\u003E    {\u003Cbr\u003E        if (object.ReferenceEquals(System.Reflection.Assembly.GetExecutingAssembly(), assembly))\u003Cbr\u003E        {\u003Cbr\u003E            return \u0022[...]\\\\Kerbal Space Program\\\\GameData\\\\TestMethodInterception\\\\TestMethodInterception.reloadable\u0022;\u003Cbr\u003E        }\u003Cbr\u003E        return assembly.Location;\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBut for other plugins that have already been loaded, it\u0027s already too late and nothing I can do. That\u0027s why MM stalls out, an empty Assembly.Location is not a path of legal form\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-09T04:24:22Z","Content":"\n\u003Cp\u003EAlright, with the modified ModuleManager installed, this appears to work as advertised.\u003C/p\u003E\u003Cp\u003EI ran out of time tonight and only got some very limited testing in with adding and removing some Debug.Log lines from my KSPAddon classes, but reloading in the game did work and the Debug.Log lines changed as I expected.\u003C/p\u003E\u003Cp\u003EDid not get a chance to test PartModule (or other class types) unfortunately.\u003C/p\u003E\u003Cp\u003EHowever, as this does require a modified ModuleManager, I am making my tweak available under MM\u0027s CC Share-Alike license.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/SirDiazo/ModuleManager/releases/tag/2.6.9AR\u0022 rel=\u0022external nofollow\u0022\u003EModuleManager 2.6.9 AssemblyReloader version available here. (Including Source)\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ELicense remains unchanged from Sarbien\u0027s ModuleManager version. However, please only use this with AssemblyReloader installed, the tweak is minor but I have not extensively tested it and make no promises it won\u0027t do something odd.\u003C/p\u003E\u003Cp\u003EStandard MM install, drop the .dll in your GameData directory and make sure it is the only ModuleManager.dll present.\u003C/p\u003E\u003Cp\u003EI\u0027ll be on my mobile tomorrow, but will not be back at my KSP computer for any further testing until the weekend.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-09T04:32:40Z\u0022 title=\u002210/09/2015 04:32  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 9, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2015-10-12T03:48:54Z","Content":"\n\u003Cp\u003EWow, I must say I\u0027m certainly liking this mod.\u003C/p\u003E\u003Cp\u003EI got in several hours of development work on my own mod today and this mod made testing code changes so much faster.\u003C/p\u003E\u003Cp\u003EDo a new build, run a .bat file to copy the new .dll file over to the .reloadable file and hit a button inside KSP and your changes are there.\u003C/p\u003E\u003Cp\u003EIt does take KSP a few seconds to reload your mod\u0027s files, but it is massively faster then the minutes it takes to exit and restart KSP itself.\u003C/p\u003E\u003Cp\u003EAs an added bonus I gave Sarbian a heads-up about the fact I\u0027d released a derived version of ModuleManager (to handle the empty FileVersionInfo tag) and he\u0027s actually incorporated them into the official ModuleManager. Not released yet so you will have to use the modulemanager in my previous post for now, but on a go forwards basis ModuleManager 2.6.12 or newer should work with AssemblyReloader without issue.\u003C/p\u003E\u003Cp\u003EThanks very much for the time saver EvilReeper, I\u0027ll be using this on all my mod development work going forward.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-12T04:17:46Z\u0022 title=\u002210/12/2015 04:17  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 12, 2015\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-10-12T05:37:19Z","Content":"\n\u003Cp\u003EThe 2.6.12 MM is \u003Ca href=\u0022https://ksp.sarbian.com/jenkins/job/ModuleManager/lastSuccessfulBuild/artifact/ModuleManager-2.6.12.zip\u0022 rel=\u0022external nofollow\u0022\u003Eavailable\u003C/a\u003E. I ll edit MM thread later; when the jetlag is gone \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThanks for your work on this. it looks awesome\u003C/p\u003E\n"},{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2015-10-15T20:17:47Z","Content":"\n\u003Cp\u003EWas going to give this a go today. but your bitbucket links for source and download are dead?\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-15T23:52:17Z","Content":"\n\u003Cp\u003EHmmm they seem to be working for me, are they still down for you?\u003C/p\u003E\n"},{"CreatedByName":"JPLRepo","CreatedById":114736,"CreatedDateTime":"2015-10-15T23:58:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EHmmm they seem to be working for me, are they still down for you?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYep thanks, working now. Must have been down earlier.\u003C/p\u003E\n"},{"CreatedByName":"Fwiffo","CreatedById":148084,"CreatedDateTime":"2015-10-31T07:42:57Z","Content":"\n\u003Cp\u003EThis looks awesome. Quick question, will assemblies loaded this way still be interactively debuggable in Visual Studio (using the steps described here \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/114241-KSP-Plugin-debugging-for-Visual-Studio-and-Monodevelop-on-all-OS)?\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/114241-KSP-Plugin-debugging-for-Visual-Studio-and-Monodevelop-on-all-OS)?\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-10-31T08:00:47Z","Content":"\n\u003Cp\u003EYep, if there are symbols they\u0027ll be read as well (Foo.reloadable and Foo.reloadable.mdb for example). I detach, rebuild and reattach on my copy of VS ... not sure if this is required or not. It\u0027s not tested on MonoDevelop but I don\u0027t see why it wouldn\u0027t work there too. Let me know if not\u003C/p\u003E\n"},{"CreatedByName":"Fwiffo","CreatedById":148084,"CreatedDateTime":"2015-10-31T10:20:58Z","Content":"\n\u003Cp\u003ECool. I\u0027m using VS2015 so can\u0027t help you with MonoDevelop. One more (dumb) question: Since it doesn\u0027t appear to integrate with Stock toolbar yet, if you accidentally hit the \u0022X\u0022 button is there a way to bring the Assembly Reloader window back up? (Sorry if I missed this in the manual)\u003C/p\u003E\u003Cp\u003EAlso a suggestion: It would be really slick if we could find a way to automate the build-attach-reload cycle (i.e. so that hitting one button in Visual Studio would cause the following: Build, Debug | Attach Unity Debugger, select the first instance, hit ok, then fire off a \u0022sideband\u0022 message to your addin to reload mine). That would speed up the Edit-Test cycle even more!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-31T10:34:46Z\u0022 title=\u002210/31/2015 10:34  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 31, 2015\u003C/time\u003E by Fwiffo\u003C/strong\u003E\n\u003C/span\u003E\n"}]}