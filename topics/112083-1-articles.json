{"TopicId":112083,"ForumId":36,"TopicTitle":"3d Mesh generated from functions using blender.","CreatedByName":"CoolHardMaths","CreatedById":145729,"CreatedDateTime":"2015-06-05T18:00:22Z","PageNum":1,"Articles":[{"CreatedByName":"CoolHardMaths","CreatedById":145729,"CreatedDateTime":"2015-06-05T18:00:22Z","Content":"Hello, My name is Rick and I\u0027ve beenplaying KSP for a while now. The game is so greatly improved with theuse of mods such as B9 that I felt the need to contribute. So I\u0027madapting an idea I had (originally for designing ship hulls) to makea blender extension for designing KSP parts. The plugin will allowyou to auto generate a mesh from a 3 variable function and create acollision mesh.\n\nThis is my plan for development.\n\nFirst release\n\n- \n- develop algorithm to generate simple mesh object\n- add material to the mesh\n- auto generate collision mesh\n- create GUI\n\nSecond release\n\n- \n- add peicewise functionality(use different functions for x \u003E or \u003C whatever)\n\nThird release\n\n- \n- improve vertex spacing to reduce polygon count to smallest possible number\n\nSo before I start, while learning touse unity/blender, I have a few questions from the modding community.\n\nAny words of wisdom?\n\nHas anybody tried this?\n\nWhat features would you like to seefrom this?\n\nWhat else can be automated in blender?\n\nWould you make use of this plugin?\n\nWhere can I find good python in blendertutorials?\n\nHas this given you any ideas? Pleaseshare below.\n\nThank you."},{"CreatedByName":"Randazzo","CreatedById":136468,"CreatedDateTime":"2015-06-05T19:01:30Z","Content":"Sincerely not intending to rain on your parade, but Unity provides this function in about three clicks (two if the mesh is already selected) for simple meshes like hulls. Something that could generate convex colliders for complex objects would be awesome, however.\n\nEdit: Or I\u0027ve completely misunderstood and you\u0027re talking about the actual model mesh being generated. That too, would be great.\n\n**Edited \u003Ctime datetime=\u00222015-06-05T19:08:56Z\u0022 title=\u002206/05/2015 07:08  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 5, 2015\u003C/time\u003E by Randazzo**"},{"CreatedByName":"CoolHardMaths","CreatedById":145729,"CreatedDateTime":"2015-06-05T19:49:46Z","Content":"\u003E \n\u003E Sincerely not intending to rain on your parade, but Unity provides this function in about three clicks (two if the mesh is already selected) for simple meshes like hulls. Something that could generate convex colliders for complex objects would be awesome, however.\n\u003E Edit: Or I\u0027ve completely misunderstood and you\u0027re talking about the actual model mesh being generated. That too, would be great.\n\nDon\u0027t be sorry for parade raining, That\u0027s why I added that Q\u0026A at the end so people could let me know if I\u0027m wasting time. That being said yes I am talking about generating the actual model."},{"CreatedByName":"CoolHardMaths","CreatedById":145729,"CreatedDateTime":"2015-06-06T01:38:28Z","Content":"Alright, progress. I have programmed a dirty python class (in IDLE not blender) which takes a function with parameters z,x and returns y. It then adds each new vertex to a list. Currently its just a jumbled list of vertices in the order they where generated. \n\nThe blender API looks simple enough so as soon as I find away to assign vertex tuples to faces I should have a working prototype. The function for generating vertices has to be hard coded unfortunately and I\u0027m currently testing with a simple hemisphere.\n\nI\u0027m also starting to think it might be much cleaner to generate meshes radially rather than up from a grid.\n\nYour thoughts would be appreciated.\n\nimport math\n\nclass f3dmesh:\n\n #class 3d mesh is an object which handles a mesh based on the output of a 3 var function\n\n vertices = []\n\n edges = []\n\n faces = []\n\n def \\_\\_init\\_\\_(self):\n\n self.data = []\n\n def make\\_vector(self,x,y,z):\n\n #return a list object in x,y,z format\n\n vec = (x,y,z)\n\n return vec\n\n def obj\\_func(self,x,z):\n\n #this function defines the geometric function of the vectors\n\n #will return string \u0022none\u0022 if encountering a domain error\n\n try:\n\n #FUNCTION GOES HERE\n\n y = math.sqrt(pow(5, 2) - pow(x, 2) -pow(z, 2))\n\n return y\n\n except:\n\n return \u0022none\u0022\n\n def build\\_mesh(self ,Xrange, Zrange):\n\n #scan through Z for each val X\n\n for indexX in Xrange:\n\n for indexZ in Zrange:\n\n #get val of Y from obj\\_func(x,z)\n\n Y = self.obj\\_func(indexX, indexZ)\n\n if Y != \u0027none\u0027:\n\n #add to vertices if Y is defined at x,z\n\n self.vertices.append(self.make\\_vector(indexX, Y,indexZ))\n\n def get\\_verticies():\n\n return vertices\n\n def get\\_edges():\n\n return edges\n\n def get\\_faces():\n\n return faces"}]}