{"TopicId":103957,"ForumId":36,"TopicTitle":"[DMPServer Plugin] DMPExtendedPlugins","CreatedByName":"dsonbill","CreatedById":115997,"CreatedDateTime":"2015-04-12T03:42:13Z","PageNum":1,"Articles":[{"CreatedByName":"dsonbill","CreatedById":115997,"CreatedDateTime":"2015-04-12T03:42:13Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003EWARNING: This can be \u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003Eincredibly\u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003C/em\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E dangerous; don\u0027t do something stupid with this - always think carefully about what you are putting in the shell folder, \u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003Eespecially\u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003C/em\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E on Linux!\u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EDMPExtendedPlugins is a plugin for DarkMultiPlayer server. It adds scripted admin commands to DMPServer via batch (windows), shell/bash/whatever (linux, hopefully - untested. someone take a look at the code and tell me if it\u0027s going to work, or just try it), and IronPython (Python 2.7, included binaries).\u003C/p\u003E\u003Cp\u003EIronPython is licensed under the Apache License, Version 2.0 \u003Ca href=\u0022http://opensource.org/licenses/apache2.0.php\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://opensource.org/licenses/apache2.0.php\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe source for IronPython can be found at \u003Ca href=\u0022http://ironpython.net/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ironpython.net/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EDMPScriptedCommands is released under CC0 1.0 \u003Ca href=\u0022https://creativecommons.org/publicdomain/zero/1.0/\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://creativecommons.org/publicdomain/zero/1.0/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe source for DMPScriptedCommands can be found at \u003Ca href=\u0022http://pastebin.com/B6vJyK62\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://pastebin.com/B6vJyK62\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cstrong\u003EInstallation \u0026amp; Download\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E1. Download DMPExtendedPlugins, bundled with IronPython: \u003C/em\u003E\u003Ca href=\u0022https://mega.co.nz/#!i9VkgTRY!0CwvSsONNhkrblyb2fJp7zvim9yK2h6_ZUCxX1Qg9Mc\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://mega.co.nz/#!i9VkgTRY!0CwvSsONNhkrblyb2fJp7zvim9yK2h6_ZUCxX1Qg9Mc\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E2. Extract all contents to DMPServer directory\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E3. Run DMPServer, it will make the necessary directories in Plugins\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E4. Put batch/shell scripts in Plugins/shell\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E5. Put python scripts in Plugins/py\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EList of Available DMP Python Functions/Methods/Whathaveyou\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EDarkLog.Normal(str)\u003C/span\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDarkLog.Debug(srt)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDarkLog.Error(srt)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDarkLog.Fatal(str)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMessageReader/Writer\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EClients # Clients is ClientHandler\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDarkMultiPlayerCommon # Must instantiate Common class, and probably enums too\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EOnRegister function # See Example in Plugins/py\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EExecute function # See Example in Plugins/py\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EAbility to register script or just execute when loaded, leading to whatever possibility you can think of using it for\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EBasic DMPPlugin interface functions; can\u0027t register it\u0027s own message types yet, because this is still \u0022server-side only\u0022\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EWill soon have other fancy functions to make your modding/scripting life easier with DMP \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003EWant another function delegated to scripts? Ask in the thread!\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EBasic Example Python Script\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edescription = \u0022A simple test script\u0022\u003Cbr\u003E#register_command = False #Default is True. If set to False, Execute will be called as soon as the script is read.\u003Cbr\u003Ecall_onregister = True #Default is False. If set to True, runs OnRegister once upon registering command.\u003Cbr\u003Ecall_onmessagereceived = True #Default is False.\u003Cbr\u003E#call_onclientconnect = True #Default is False.\u003Cbr\u003E#call_onclientdisconnect = True #Default is False.\u003Cbr\u003E#call_onclientauthenticated = True #Default is False.\u003Cbr\u003E#call_onupdate = True #Default is False.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E#OnRegister is ignored if register_command is set to False\u003Cbr\u003E#OnRegister must take a string arg, because I\u0027m very hacky \u003Cbr\u003Edef OnRegister(compliance):\u003Cbr\u003E    # OnRegister Test\u003Cbr\u003E    DarkLog.Debug(\u0022Called OnRegister!\u0022) #Do heavy initialization here for commands.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef Execute(args):\u003Cbr\u003E    # Logging Test\u003Cbr\u003E    DarkLog.Normal(\u0022Logging from Python! [args] is \u0022 \u002B args)\u003Cbr\u003E    DarkLog.Normal(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Error(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Debug(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Fatal(\u0022Messaging Testing\u0022)\u003Cbr\u003E\u003Cbr\u003E    # Common Access Test\u003Cbr\u003E    comn = Common()\u003Cbr\u003E    DarkLog.Debug(\u0022Python Common Access Test: DMP \u0022 \u002B comn.PROGRAM_VERSION)\u003Cbr\u003E\u003Cbr\u003E    # Clients Access Test\u003Cbr\u003E    clients = Clients()\u003Cbr\u003E    DarkLog.Debug(\u0022Python ClientHandler Access Test: Active Clients: \u0022 \u002B str(clients.GetActiveClientCount()))\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E#DMP Plugin Interface\u003Cbr\u003Edef OnUpdate():\u003Cbr\u003E    pass\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef OnClientConnect(client):\u003Cbr\u003E    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 connected with the server\u0022)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef OnClientAuthenticated(client):\u003Cbr\u003E    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 authenticated with the server\u0022)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef OnClientDisconnect(client):\u003Cbr\u003E    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B client.playerName \u002B \u0022 disconnected from the server\u0022)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef OnMessageReceived(client, message):\u003Cbr\u003E    DarkLog.Debug(\u0022[ExamplePluginTest] \u0022 \u002B \u0022Got a \u0022 \u002B str(message.type) \u002B \u0022 message from \u0022 \u002B client.playerName)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDMPServer Example Output:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E[19:53:36][DEBUG] : Loading settings...\u003Cbr\u003E[19:53:36][DEBUG] : System.IO compression works: True, test time: 6 ms.\u003Cbr\u003E[19:53:36][DEBUG] : Loading plugins!\u003Cbr\u003E[19:53:36][DEBUG] : Loaded C:\\Users\\Lance\\Desktop\\DMPServer\\Plugins\\DMPScriptedC\u003Cbr\u003Eommands.dll\u003Cbr\u003E[19:53:36][DEBUG] : Loading plugin: DMPScriptedCommands.ShellCommands\u003Cbr\u003E[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test\u003Cbr\u003E[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test1\u003Cbr\u003E[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test2\u003Cbr\u003E[19:53:36][INFO] : [ScriptedCommands|ShellCommands] Registered Command: test3\u003Cbr\u003E[19:53:36][DEBUG] : Loaded plugin: DMPScriptedCommands.ShellCommands\u003Cbr\u003E[19:53:36][DEBUG] : Loading plugin: DMPScriptedCommands.PyCommands\u003Cbr\u003E[19:53:37][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest\u003Cbr\u003E[19:53:37][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest2\u003Cbr\u003E[19:53:37][DEBUG] : Loaded plugin: DMPScriptedCommands.PyCommands\u003Cbr\u003E[19:53:37][DEBUG] : Done!\u003Cbr\u003E[19:53:37][INFO] : Starting DMPServer v0.2.1.2, protocol 37\u003Cbr\u003E[19:53:37][INFO] : Loading universe...\u003Cbr\u003E[19:53:37][INFO] : Starting SUBSPACE server on port 6703...\u003Cbr\u003E[19:53:37][INFO] : Removed 0 debris\u003Cbr\u003E[19:53:38][INFO] : Ready!\u003Cbr\u003E/pytest2\u003Cbr\u003E[19:54:02][INFO] : Command input: /pytest2\u003Cbr\u003E[19:54:02][INFO] : Logging from Python! [args] is\u003Cbr\u003E[19:54:02][INFO] : Messaging Testing\u003Cbr\u003E[19:54:02][ERROR] : Messaging Testing\u003Cbr\u003E[19:54:02][DEBUG] : Messaging Testing\u003Cbr\u003E[19:54:02][FATAL] : Messaging Testing\u003Cbr\u003E[19:54:02][ERROR] : [PYTHON COMMAND ERROR]  index out of range: 0\u003Cbr\u003E/pytest2 arg1 asd;lajk\u003Cbr\u003E[19:54:09][INFO] : Command input: /pytest2 arg1 asd;lajk\u003Cbr\u003E[19:54:09][INFO] : Logging from Python! [args] is arg1 asd;lajk\u003Cbr\u003E[19:54:09][INFO] : Messaging Testing\u003Cbr\u003E[19:54:09][ERROR] : Messaging Testing\u003Cbr\u003E[19:54:09][DEBUG] : Messaging Testing\u003Cbr\u003E[19:54:09][FATAL] : Messaging Testing\u003Cbr\u003E[19:54:09][INFO] : Arg 1: arg1  Arg 2: asd;lajk\u003Cbr\u003E/test\u003Cbr\u003E[19:54:38][INFO] : Command input: /test\u003Cbr\u003E/reloadPython\u003Cbr\u003E[19:54:42][INFO] : Command input: /reloadPython\u003Cbr\u003E[19:54:42][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest\u003Cbr\u003E[19:54:42][INFO] : [ScriptedCommands|PyCommands] Registered Command: pytest2\u003Cbr\u003E[19:54:43][INFO] : [Shell Output]========================[Shell Output]\u003Cbr\u003ESuper epic results!\u003Cbr\u003EAnd here\u0027s the second line!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003EWaiting for 5 seconds, press a key to continue ..0\u003Cbr\u003EOutput after sleeping 5 seconds!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E/pytest2 arg1 asd;laj\u003Cbr\u003E[19:54:55][INFO] : Command input: /pytest2 arg1 asd;laj\u003Cbr\u003E[19:54:55][INFO] : Logging from Python! [args] is arg1 asd;laj\u003Cbr\u003E[19:54:55][INFO] : Messaging Testing\u003Cbr\u003E[19:54:55][ERROR] : Messaging Testing\u003Cbr\u003E[19:54:55][DEBUG] : Messaging Testing\u003Cbr\u003E[19:54:55][FATAL] : Messaging Testing\u003Cbr\u003E[19:54:55][INFO] : Arg 1: arg1  Arg 2: asd;laj\u003Cbr\u003E[19:54:55][INFO] : File Changed\u003Cbr\u003E/help\u003Cbr\u003E[19:55:06][INFO] : Command input: /help\u003Cbr\u003E[19:55:06][INFO] : exit            - Shuts down the server\u003Cbr\u003E[19:55:06][INFO] : quit            - Shuts down the server\u003Cbr\u003E[19:55:06][INFO] : shutdown        - Shuts down the server\u003Cbr\u003E[19:55:06][INFO] : restart         - Restarts the server\u003Cbr\u003E[19:55:06][INFO] : kick            - Kicks a player from the server\u003Cbr\u003E[19:55:06][INFO] : ban             - Bans a player from the server\u003Cbr\u003E[19:55:06][INFO] : banip           - Bans an IP Address from the server\u003Cbr\u003E[19:55:06][INFO] : bankey          - Bans a Guid from the server\u003Cbr\u003E[19:55:06][INFO] : pm              - Sends a message to a player\u003Cbr\u003E[19:55:06][INFO] : admin           - Sets a player as admin/removes admin from t\u003Cbr\u003Ehe player\u003Cbr\u003E[19:55:06][INFO] : whitelist       - Change the server whitelist\u003Cbr\u003E[19:55:06][INFO] : test            - Shell Command\u003Cbr\u003E[19:55:06][INFO] : test1           - Shell Command\u003Cbr\u003E[19:55:06][INFO] : test2           - Shell Command\u003Cbr\u003E[19:55:06][INFO] : test3           - Shell Command\u003Cbr\u003E[19:55:06][INFO] : reloadShell     - Reloads the shell commands from scom\u003Cbr\u003E[19:55:06][INFO] : pytest          - Python Command\u003Cbr\u003E[19:55:06][INFO] : pytest2         - A simple test script\u003Cbr\u003E[19:55:06][INFO] : reloadPython    - Reloads the python commands from pycom\u003Cbr\u003E[19:55:06][INFO] : help            - Displays this help\u003Cbr\u003E[19:55:06][INFO] : say             - Broadcasts a message to clients\u003Cbr\u003E[19:55:06][INFO] : dekessler       - Clears out debris from the server\u003Cbr\u003E[19:55:06][INFO] : nukeksc         - Clears ALL vessels from KSC and the Runway\u003Cbr\u003E[19:55:06][INFO] : listclients     - Lists connected clients\u003Cbr\u003E[19:55:06][INFO] : countclients    - Counts connected clients\u003Cbr\u003E[19:55:06][INFO] : connectionstats - Displays network traffic usage\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E#Contents of Plugins/scom/test.cmd\u003Cbr\u003E@echo off\u003Cbr\u003Eecho Super epic results!\u003Cbr\u003Eecho And here\u0027s the second line!\u003Cbr\u003Etimeout 5\u003Cbr\u003Eecho Output after sleeping 5 seconds!\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E#Contents of Plugins/pycom/pytest.py\u003Cbr\u003Edescription = \u0022A simple test script\u0022\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Edef Execute(args):\u003Cbr\u003E    # Logging Test\u003Cbr\u003E    DarkLog.Normal(\u0022Logging from Python! [args] is \u0022 \u002B args)\u003Cbr\u003E    DarkLog.Normal(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Error(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Debug(\u0022Messaging Testing\u0022)\u003Cbr\u003E    DarkLog.Fatal(\u0022Messaging Testing\u0022)\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    # Args test\u003Cbr\u003E    arg_list = args.split()\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    DarkLog.Normal(\u0022Arg 1: \u0022 \u002B arg_list[0] \u002B \u0022  Arg 2: \u0022 \u002B arg_list[1])\u003Cbr\u003E    DarkLog.Normal(\u0022File Changed\u0022)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EChangelog\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E-----------------\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EThe scripts can now be run automatically as part of plugin load, so you can write complete plugins in Python as long as what you need is there.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ESince the scripts run in their own threads, you can just run indefinitely - just be careful about what you do, obviously. I believe the scripts need access to more functions.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EChanged name to DMPExtendedPlugins, as per above functionality.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EAdded quite a few functions/data stuffs.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EChanged pycom and scom to py and shell, respectively, to reflect the more general nature of the scripts.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EAdded the basic DMPPlugin Interface.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003EPrevent everything from dying upon failed scriptstuffs.\u003C/em\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-04-12T22:54:40Z\u0022 title=\u002204/12/2015 10:54  PM\u0022 data-short=\u00229 yr\u0022\u003EApril 12, 2015\u003C/time\u003E by dsonbill\u003C/strong\u003E\n\u003C/span\u003E\n"}]}