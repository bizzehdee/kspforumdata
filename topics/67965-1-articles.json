{"TopicId":67965,"ForumId":44,"TopicTitle":"Solving diff equations","CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-04-04T02:45:41Z","PageNum":1,"Articles":[{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-04-04T02:45:41Z","Content":"\n\u003Cp\u003EHello everyone, i ve been trying to get the max height for my rocket taking drag into account (irl), variations in the angle of the rocket with respect to the airflow and a whole bunch of other things and i ended up with several differential equations. Im not going to explain much of what the equations look like themselves but just trying to get a general idea. The way i ve been solving them so far is by simply using excel spreadsheets where for a small time interval i treat all of the functions of time as a constant and then do an approximation as if the acceleration was constant. This could sort of be expressed like so,\u003C/p\u003E\u003Cp\u003Efrom t0 to t1:a=r(t1)-n(x\u0027(t0))*(m(x(t0)). Then i get the displacement in t1: 1/2*(r(t1)-n(x\u0027(t1))*(m(x(t0)))*t1^2, and velocity: t1*(r(t1)-n(x\u0027(t1))*(m(x(t0))) From t1 to t2 acceleration would be:\u003C/p\u003E\u003Cp\u003Er(t2)-n(x\u0027(t1))*m(x(t1)). As you can see, to solve for t=n i am using previous values from t=n-k, now would there be a way of expressing this whole thing with maybe sigma notation and then take the limit as t1-t2 approaches zero and the ammount of small t s i need approaches infinity. \u003C/p\u003E\u003Cp\u003ESorry if you dont understand anything of what im saying, im not all that good at explaining myself and do not know all that much about these topics. \u003C/p\u003E\u003Cp\u003EThank you very much!\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-04-04T04:12:49Z","Content":"\n\u003Cp\u003EIf you ignore change of rocket\u0027s mass as it burns fuel and assume constant thrust, there is an analytic solution.\u003C/p\u003E\u003Cp\u003EGiven an equation:\u003C/p\u003E\u003Cp\u003Ev\u0027 = a - kv\u003Csup\u003E2\u003C/sup\u003E\u003C/p\u003E\u003Cp\u003EYou can find terminal velocity, v\u003Csub\u003Et\u003C/sub\u003E = Sqrt[a/k] for which v\u0027 = 0. Naturally, a = F/m - g, where F is thrust and m is mass of the rocket, which you can also think of as acceleration of the rocket without drag. In that case, velocity changes as the function of time.\u003C/p\u003E\u003Cp\u003Ev(t) = v\u003Csub\u003Et\u003C/sub\u003E Tanh(a t/v\u003Csub\u003Et\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003ETanh is hyperbolic tangent. Tanh(x) = sinh(x)/cosh(x). If your software does not have hyperbolic functions, sinh(x) = (exp(x) - exp(-x))/2 and cosh(x) = (exp(x) \u002B exp(-x))/2. This equation gives v(0) = 0, starts out accelerating at rate a, and then settles on v = v\u003Csub\u003Et\u003C/sub\u003E after a while.\u003C/p\u003E\u003Cp\u003EOf course, you want h(t). The solution to h\u0027 = v from above yields:\u003C/p\u003E\u003Cp\u003Eh(t) = v\u003Csub\u003Et\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E/a ln(cosh(a t/v\u003Csub\u003Et\u003C/sub\u003E))\u003C/p\u003E\u003Cp\u003ESo all you need to know are a, k, and the amount of time t that the engine burns to figure out altitude and velocity the rocket attains once the engine cuts out. From there on, rocket coasts.\u003C/p\u003E\u003Cp\u003Ev\u0027 = -g - kv\u003Csup\u003E2\u003C/sup\u003E\u003C/p\u003E\u003Cp\u003EThe parameter k is still exactly the same, but without thrust, the only other force is gravity, which also slows down your rocket. Re-defining v\u003Csub\u003Et\u003C/sub\u003E as Sqrt(g/k), we arrive at a solution which is very similar to the earlier equation.\u003C/p\u003E\u003Cp\u003Ev(t) = -v\u003Csub\u003Et\u003C/sub\u003E Tan(g t/v\u003Csub\u003Et\u003C/sub\u003E - c)\u003C/p\u003E\u003Cp\u003EThis is essentially the same equation, but with Tan instead of Tanh and a bit of a twist that without parameter c, v(0) would be 0. And we want v(0) to be whatever velocity the rocket had when engine cut out. So solving for v(0) = v\u003Csub\u003E0\u003C/sub\u003E we get the value for c.\u003C/p\u003E\u003Cp\u003Ec = Tan\u003Csup\u003E-1\u003C/sup\u003E(v\u003Csub\u003E0\u003C/sub\u003E/v\u003Csub\u003Et\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003EThis also tells us when the rocket will reach the apex. It will happen the moment gt/v\u003Csub\u003Et\u003C/sub\u003E = c. So all that\u0027s left is figuring out altitude. Again, I\u0027m going to use h\u0027 = v, so this will need some corrections in a moment.\u003C/p\u003E\u003Cp\u003Eh(t) = v\u003Csub\u003Et\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E/g log(cos(g t/v\u003Csub\u003Et\u003C/sub\u003E - c))\u003C/p\u003E\u003Cp\u003EYou should note immediately that at the apex, I get h = 0. That\u0027s because h(0) is negative. Just a side effect of solving a differential equation. But if all you want is the altitude to which rocket climbs, then -h(0) is exactly what you are looking for.\u003C/p\u003E\u003Cp\u003EPutting it all together, the full equation for the actual maximum altitude the rocket will reach is the following.\u003C/p\u003E\u003Cp\u003EH = v\u003Csub\u003Et1\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E/a ln(cosh(a T/v\u003Csub\u003Et1\u003C/sub\u003E)) - v\u003Csub\u003Et2\u003C/sub\u003E\u003Csup\u003E2\u003C/sup\u003E/g log(cos(-c))\u003C/p\u003E\u003Cp\u003EWhere:\u003C/p\u003E\u003Cp\u003EH : Maximum height.\u003C/p\u003E\u003Cp\u003Ev\u003Csub\u003Et1\u003C/sub\u003E = Sqrt(a/k) : Ascent terminal velocity.\u003C/p\u003E\u003Cp\u003Ea = F/m - g : Initial acceleration of the rocket\u003C/p\u003E\u003Cp\u003Eg : Acceleration due to gravity, or 9.8m/s\u003Csup\u003E2\u003C/sup\u003E\u003C/p\u003E\u003Cp\u003ET : Length of time that engine runs.\u003C/p\u003E\u003Cp\u003EF : Average thrust of the engine. (Assumed to be constant.)\u003C/p\u003E\u003Cp\u003Ev\u003Csub\u003Et2\u003C/sub\u003E = Sqrt(g/k) : Coasting terminal velocity.\u003C/p\u003E\u003Cp\u003Ec = Tan\u003Csup\u003E-1\u003C/sup\u003E(v\u003Csub\u003E0\u003C/sub\u003E/v\u003Csub\u003Et2\u003C/sub\u003E) : Time offset.\u003C/p\u003E\u003Cp\u003Ev\u003Csub\u003E0\u003C/sub\u003E = v\u003Csub\u003Et1\u003C/sub\u003E Tanh(a T/v\u003Csub\u003Et1\u003C/sub\u003E) : Rocket\u0027s velocity when engine cuts out.\u003C/p\u003E\u003Cp\u003Ek : Drag coefficient divided by mass. It\u0027s probably easier to estimate coasting terminal velocity and get k from that. Or use drag formulas available for rocketry.\u003C/p\u003E\u003Cp\u003EYou should be able to estimate all of these parameters and get a somewhat descent estimate of max height.\u003C/p\u003E\u003Cp\u003EOf course, if you want to be more precise, you need to take into account the thrust profile and the change in mass. (Which also depends on thrust profile.) That will require numerical integration.\u003C/p\u003E\u003Cp\u003EIf you want to do the numerical integration, I would strongly recommend forgetting about Excell and learning to use Matlab/Octave. They use mostly the same language, but you can get Octave for free. I can walk you through setting up a numerical integrator for this problem in Octave, if you want.\u003C/p\u003E\u003Cp\u003EOh, and somebody should check my math above. The functional forms are correct, but I might have messed up the coefficients here and there. Or forgot a minus sign. Or something equally silly. Please, let me know if there is a mistake.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-04-05T00:05:54Z","Content":"\n\u003Cp\u003EI know that solution but that is not taking the density of air changing as a function of height which is quite important when it comes to the max height of my rocket, considering it has an impulse of about 800ns. \u003C/p\u003E\u003Cp\u003EThe general equation i am looking to solve is this: k/(m(t))-r(x\u00C3\u201A\u00C2\u00B4(t))*n(\u00C3\u0192\u00E2\u20AC\u201D(t))/m(t)-x\u00C3\u201A\u00C2\u00B4\u00C3\u201A\u00C2\u00B4(t)=0. In my case, m(t) would be the rocket s mass as a function of time, k the force it exerts, \u003C/p\u003E\u003Cp\u003Er(x\u00C3\u201A\u00C2\u00B4(t) the velocity s part of the drag equation, and n(x(t)) the density as a function of height .I ve been trying to solve it by using the regular e^rt method used in homogenous diff equations but it seems to get quite complicated. I would be more than pleased if you could help me set the equations up in Octave and solve it. This will be useful because if I want to build the flight computer i ve been thinking of it d have to solve these equations on the fly to estimate apogee and then even more complex equations for the max deflection angle of the fins and such. Thank you very much!\u003C/p\u003E\n"},{"CreatedByName":"Jimbimbibble","CreatedById":77859,"CreatedDateTime":"2014-04-09T17:28:22Z","Content":"\n\u003Cp\u003EIt looks like the initial method you described is essentially Euler\u0027s Method (am I correct?). If you want to improve your approximation, you can use the Improved Euler Method and iterate a few times per data point until it converges. This would be too tedious to do by hand, but you could write a program in VBA to solve this. In case you don\u0027t know, VBA is a programming language used to write macros is Excel. You can access it by going to the toolbar settings and turn on \u0022developer\u0022. You can use the spreadsheet to read in data and output results, which is convenient and there are a lot of built-in functions in VBA that make it easy to learn.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-04-09T18:56:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jimbimbibble\u0022 data-cite=\u0022Jimbimbibble\u0022\u003E\u003Cdiv\u003EIt looks like the initial method you described is essentially Euler\u0027s Method (am I correct?).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELooks like it. And while implicit Euler is an improvement, there are better, simpler methods. Even though it\u0027s not designed to deal with drag, Verlet should work extremely well here.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mardlamock\u0022 data-cite=\u0022mardlamock\u0022\u003E\u003Cdiv\u003EThe general equation i am looking to solve is this: k/(m(t))-r(x\u00C3\u201A\u00C2\u00B4(t))*n(\u00C3\u0192\u00E2\u20AC\u201D(t))/m(t)-x\u00C3\u201A\u00C2\u00B4\u00C3\u201A\u00C2\u00B4(t)=0. In my case, m(t) would be the rocket s mass as a function of time, k the force it exerts, \u003Cp\u003Er(x\u00C3\u201A\u00C2\u00B4(t) the velocity s part of the drag equation, and n(x(t)) the density as a function of height .I ve been trying to solve it by using the regular e^rt method used in homogenous diff equations but it seems to get quite complicated. I would be more than pleased if you could help me set the equations up in Octave and solve it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHere is the basic code using Velocity Verlet as the integration method. \u003Ca href=\u0022http://pastebin.com/1j0Mhpn1\u0022 rel=\u0022external nofollow\u0022\u003Erocket.m\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ETo run it in octave, just find create a file with this code somewhere, say, \u0022C:\\code\\rocket.m\u0022. Start up octave, navigate to this directory using command \u0022cd c:\\code\u0022 and then just run \u0022rocket\u0022. (Extension isn\u0027t needed. It will look for a .m file.)\u003C/p\u003E\u003Cp\u003EIt\u0027s pretty basic, but you can probably figure out how to modify it to fit your parameters.\u003C/p\u003E\n"},{"CreatedByName":"mardlamock","CreatedById":38972,"CreatedDateTime":"2014-04-10T00:06:46Z","Content":"\n\u003Cp\u003EThank you very much, i had no idea what i was doing had a name and everything, i just thought of it on my own and ended up with that method. I also thought of doing a more accurate method where i do the integrals of the rocket s acceleration due to its own thrust (f/m(t)) and get a better result. Thanks a LOT for the code, comments made it much easier to understand. My math teacher got me a book on diff equations of these sorts and i will be reading that to try and find an exact solution to the problem, that would make it i think a lot easier for when i put all the code onto an arduino and have it log data and correct its path, that will happen much later though. Do you guys happen to have any idea on how it is done in real spacecraft, do they use really good approximations or do they try to solve the equations exactly? I ve been looking into what might make in the futurue a good business, small disposable launchers capable of taking multiple cubesats into orbit and for a decent price, also giving flexibility to the companies wishing to use them. Once again, \u003C/p\u003E\u003Cp\u003EThank you very much!\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-04-10T09:58:58Z","Content":"\n\u003Cp\u003ESmall rockets are much harder to do efficiently than large ones, unfortunately. That\u0027s why you don\u0027t see a lot of dedicated cubesat launchers. They are usually taken \u0022along for a ride\u0022 with heavier cargo.\u003C/p\u003E\u003Cp\u003EIn terms of what they really use for real rockets, they are essentially the same equations, but the methods for solving them are more complicated. A general book on diff equations probably won\u0027t be much help on numerical methods, but there are books on numerical methods for solving differential equations. There is good info on Wikipedia, too. If you look up Runge-Kutta Methods, you\u0027ll find some good info to get you started.\u003C/p\u003E\u003Cp\u003EThe other big difference is drag model. I\u0027m pretty sure your rocket will stay strictly sub-sonic. Once you get into transonic regions, drag model changes a lot. Working out exactly how your rocket is going to behave as it goes from Mach .9 to Mach 1.1 is going to be very difficult. But that can be a fairly quick section, especially if you throttle up to punch through transonic faster. But then the supersonic flight will have a different drag coefficient, and as you start getting into hypersonic, things start to change again. This is something that a lot of numerical work would get into. The good news is that if your rocket is perfectly cylindrical, especially if your upper stages have no exposed fins, you can build a fairly simple numerical solver that will give you very good results. But you do need to understand a lot of hydrodynamics to write the code for it. There might be some libraries or even complete programs for it out there, though.\u003C/p\u003E\u003Cp\u003EAnd, of course, you\u0027ll need more realistic fuel flow solution. In that sample code, I\u0027ve assumed constant fuel flow for constant thrust and constant I\u003Csub\u003ESP\u003C/sub\u003E. That\u0027s not going to be the case for a real rocket. Be it solid fuel, hybrid, or liquid rocket, you will have variations in fuel flow throughout ascent. So you\u0027ll have a separate differential equation for mass of the rocket, which you\u0027ll be solving together with equations of motion as a system. It\u0027s not that much more difficult, but one is the first order and the other is second order, and it\u0027s something you need to understand how to deal with. If you understand completely how Runge-Kutta methods work, though, and how to apply them to higher order equations, you\u0027ll be able to figure it out, even if you end up using a more complex method as a basis.\u003C/p\u003E\n"}]}