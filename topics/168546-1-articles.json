{"TopicId":168546,"ForumId":29,"TopicTitle":"Unity Rotation code for pitch roll yaw question","CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-14T21:40:37Z","PageNum":1,"Articles":[{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-14T21:40:37Z","Content":"\n\u003Cp\u003E\nDisclosure I also posted this question on the kOS Reddit.\u003Cbr\u003E\u003Cbr\u003E\nI was wondering if anyone can explain to me what the quanterion multplication is doing in the follow code from MechJeb2 ie how the rotations produce the desired result:\u003Cbr\u003E\u003Cbr\u003E\u003Cspan style=\u0022background-color:#ffffff;color:#404040;font-size:14px;\u0022\u003ErotationSurface = Quaternion.LookRotation(north, up);\u003C/span\u003E\u003Cbr\u003E\nrotationVesselSurface = Quaternion.Inverse(Quaternion.Euler(90, 0, 0) * Quaternion.Inverse(vessel.GetTransform().rotation) * rotationSurface);\u003Cbr\u003E\u003Cbr\u003E\nWhat appears to get\u00A0returned is the pitch, roll and yaw values like what you would see on the KSP Navball.\u003Cbr\u003E\u003Cbr\u003E\nI am trying to reverse-engineer the code because I am impressed and I want to understand for my education.\u00A0But I keep getting results that do\u00A0 not agree with MechJeb2\u00A0results. The strange thing is my version almost works if I remove the Euler(90,0,0) rotation - the need for this rotation is really puzzling.\u003Cbr\u003E\u003Cbr\u003E\nI do accept that quanterions can give counter-intuitive results so I will accept it just works, but I do need to know the order the rotations are being performed in.\u003Cbr\u003E\u003Cbr\u003E\nBTW why GetTransform instead of the Unity Transform?\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-12-15T10:43:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244523\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513287637\u0022 data-ipsquote-userid=\u0022183539\u0022 data-ipsquote-username=\u0022Harry Twinotter\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 hours ago, Harry Twinotter said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBTW why GetTransform instead of the Unity Transform?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003EGetTransform on the vessel returns the transform of the current \u0022control as\u0022 part.\u00A0\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003EAs for the Quats (black) magic... I would rather not go there \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Boris-Barboris","CreatedById":133181,"CreatedDateTime":"2017-12-15T11:34:37Z","Content":"\n\u003Cp\u003E\nJust a couple of tips that may or may not help:\n\u003C/p\u003E\n\u003Cp\u003E\nEvery game object in unity has a transform. Transform is probably (Unity is not open sourced) a tuple of parent transform, local translation vector, local scaling vector and local rotation quaternion. Cached global (wich take parent transform in mind) translation\\scaling\\rotation are usually maintained under the hood. Essentially, transform gives each object it\u0027s own euclidean space (consisting of origin and three axels), and each transform describes, how to get from global, universal unity euclidean space to this game object\u0027s space, and vice versa.\n\u003C/p\u003E\n\u003Cp\u003E\nNow imagine a KSP aircraft. It has cockpit. Cockpit is a \u0022control from here\u0022 part, it is a game object, it has it\u0027s own space, it has transform. KSP has these conventions:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u0022right\u0022 unity vector of cockpit\u0027s transform is an X axel of cockpit\u0027s euclidean space. It\u0027s usually directed towards your right hand\\wing.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022up\u0022 is Y axel, it\u0027s usually the direction the plane\\rocket is flying. When simple rocket is just spawned from \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, it\u0027s command pod\u0027s \u0022up\u0022 vector is directed towards zenith.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022forward\u0022 is Z axel, it\u0027s usually directed towards plane\u0027s belly.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nKeep in mind Unity uses left-handed coordinate systems.\u003Cbr\u003E\nNow, if you take vector (1, 0, 0) in cockpit\u0027s space, wich corresponds to the direction of the right wing, and apply cockpit transform\u0027s rotation to it (by multiplying it on rotation quaternion), you will get the direction the right wing is facing in global unity reference frame (in KSP this frame is usually non-moving relative to closest\u0027s planet surface, and planetarium axis-aligned, iirc).\n\u003C/p\u003E\n\u003Cp\u003E\nNow, there\u0027s a little gotcha in multiplication order in Unity, I\u0027m sure sarbian will not mind this private message disclosure:\u003Cbr\u003E\u003Cimg alt=\u00222uaPriZ.png\u0022 class=\u0022ipsImage\u0022 height=\u0022482\u0022 src=\u0022https://i.imgur.com/2uaPriZ.png\u0022 width=\u00221011\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-15T11:48:24Z\u0022 title=\u002212/15/2017 11:48  AM\u0022 data-short=\u00226 yr\u0022\u003EDecember 15, 2017\u003C/time\u003E by Boris-Barboris\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-12-15T13:41:31Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244876\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513337677\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI\u0027m sure sarbian will not mind this private message disclosure\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIndeed \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nI will just add this, as it may (or may not, it\u0027s quaternion after all) make things clearer\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://answers.unity.com/questions/810579/quaternion-multiplication-order.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://answers.unity.com/questions/810579/quaternion-multiplication-order.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-15T14:08:57Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244876\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513337677\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nJust a couple of tips that may or may not help:\n\u003C/p\u003E\n\u003Cp\u003E\nEvery game object in unity has a transform. Transform is probably (Unity is not open sourced) a tuple of parent transform, local translation vector, local scaling vector and local rotation quaternion. Cached global (wich take parent transform in mind) translation\\scaling\\rotation are usually maintained under the hood. Essentially, transform gives each object it\u0027s own euclidean space (consisting of origin and three axels), and each transform describes, how to get from global, universal unity euclidean space to this game object\u0027s space, and vice versa.\n\u003C/p\u003E\n\u003Cp\u003E\nNow imagine a KSP aircraft. It has cockpit. Cockpit is a \u0022control from here\u0022 part, it is a game object, it has it\u0027s own space, it has transform. KSP has these conventions:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u0022right\u0022 unity vector of cockpit\u0027s transform is an X axel of cockpit\u0027s euclidean space. It\u0027s usually directed towards your right hand\\wing.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022up\u0022 is Y axel, it\u0027s usually the direction the plane\\rocket is flying. When simple rocket is just spawned from \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, it\u0027s command pod\u0027s \u0022up\u0022 vector is directed towards zenith.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022forward\u0022 is Z axel, it\u0027s usually directed towards plane\u0027s belly.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nKeep in mind Unity uses left-handed coordinate systems.\u003Cbr\u003E\nNow, if you take vector (1, 0, 0) in cockpit\u0027s space, wich corresponds to the direction of the right wing, and apply cockpit transform\u0027s rotation to it (by multiplying it on rotation quaternion), you will get the direction the right wing is facing in global unity reference frame (in KSP this frame is usually non-moving relative to closest\u0027s planet surface, and planetarium axis-aligned, iirc).\n\u003C/p\u003E\n\u003Cp\u003E\nNow, there\u0027s a little gotcha in multiplication order in Unity, I\u0027m sure sarbian will not mind this private message disclosure:\u003Cbr\u003E\u003Cimg alt=\u00222uaPriZ.png\u0022 class=\u0022ipsImage\u0022 height=\u0022482\u0022 src=\u0022https://i.imgur.com/2uaPriZ.png\u0022 width=\u00221011\u0022\u003E\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks. I did get the impression the multiplication order was right to left, not left to right (at least when it come to applying rotations to orientations). The Unity doco is ambiguous. And I get that context is everything, you need to get your head around whether the quant you are interested in is a rotation for rotating a real object (hence the quants coordinates have no meaning in world space), or if the quant is an orientation of a real object and the coordinates do have a meaning in world space.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-15T14:24:20Z\u0022 title=\u002212/15/2017 02:24  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 15, 2017\u003C/time\u003E by Harry Twinotter\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-15T14:22:39Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244861\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513334586\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003EGetTransform on the vessel returns the transform of the current \u0022control as\u0022 part.\u00A0\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022background-color:#ffffff;color:#353c41;font-size:14px;\u0022\u003EAs for the Quats (black) magic... I would rather not go there \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks - that makes a lot of sense. I must test that, perhaps my vessel has a misaligned\u00A0control part somewhere? Using MechJeb,\u00A0 kOS and a command pod means I have 3 potential control points on the vessel maybe. It won\u0027t take\u00A0me long to check. I remember the NavBall going nuts if I built a rover wrong.\n\u003C/p\u003E\n"},{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-15T14:41:51Z","Content":"\n\u003Cp\u003E\nChanging the orientation of the MechJeb2 module does appear to make my code return the correct values in all cases, as long as I removed the r(90,0,0) from the multiplication.\u003Cbr\u003E\u003Cbr\u003E\nI better test this again more carefully, I am tired. I will report back in a day or so.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-12-15T14:42:38Z\u0022 title=\u002212/15/2017 02:42  PM\u0022 data-short=\u00226 yr\u0022\u003EDecember 15, 2017\u003C/time\u003E by Harry Twinotter\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-24T12:07:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244523\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513287637\u0022 data-ipsquote-userid=\u0022183539\u0022 data-ipsquote-username=\u0022Harry Twinotter\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/15/2017 at 8:40 AM, Harry Twinotter said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDisclosure I also posted this question on the kOS Reddit.\u003Cbr\u003E\u003Cbr\u003E\nI was wondering if anyone can explain to me what the quanterion multplication is doing in the follow code from MechJeb2 ie how the rotations produce the desired result:\u003Cbr\u003E\u003Cbr\u003E\u003Cspan style=\u0022background-color:#ffffff;color:#404040;font-size:14px;\u0022\u003ErotationSurface = Quaternion.LookRotation(north, up);\u003C/span\u003E\u003Cbr\u003E\nrotationVesselSurface = Quaternion.Inverse(Quaternion.Euler(90, 0, 0) * Quaternion.Inverse(vessel.GetTransform().rotation) * rotationSurface);\u003Cbr\u003E\u003Cbr\u003E\nWhat appears to get\u00A0returned is the pitch, roll and yaw values like what you would see on the KSP Navball.\u003Cbr\u003E\u003Cbr\u003E\nI am trying to reverse-engineer the code because I am impressed and I want to understand for my education.\u00A0But I keep getting results that do\u00A0 not agree with MechJeb2\u00A0results. The strange thing is my version almost works if I remove the Euler(90,0,0) rotation - the need for this rotation is really puzzling.\u003Cbr\u003E\u003Cbr\u003E\nI do accept that quanterions can give counter-intuitive results so I will accept it just works, but I do need to know the order the rotations are being performed in.\u003Cbr\u003E\u003Cbr\u003E\nBTW why GetTransform instead of the Unity Transform?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOK I think I have worked out why the code gives the results it does. Once I found the error in my vessel (a misaligned MechJeb control pod), I started to get consistent results.\u003Cbr\u003E\u003Cbr\u003E\nThe \u0022magic\u0022 works like this (if I am not wrong of course):\u003Cbr\u003E\u003Cbr\u003E\n1. Create an orientation where the vessel\u0027s\u00A0pitch,roll and yaw are said to be zero. Call this the reference orientation.\u003Cbr\u003E\n2. Create a relative rotation by multiplying the reference orientation with the inverse of the vessel\u0027s orientation. In effect this\u00A0relative rotation then contains the roll, pitch and yaw of the vessel relative to the reference orientation.\u00A0\u00A0\u003Cbr\u003E\n3. Take the inverse of the relative rotation. This has the effect of converting the relative rotation\u0027s roll, pitch and yaw back into absolute terms which can then be simply read from the X,Y,Z values of the quaternion.\u003Cbr\u003E\u003Cbr\u003E\na. I get confused because quaternions are used to store both rotations and orientations. That is because rotations and orientations are the same thing, it\u0027s the context/semantics that is different.\u003Cbr\u003E\nb. I still have not worked why Euler(90,0,0) is necessary in the MechJeb C# code, but is not necessary in kOS. I am aware that kOS \u0022tweaks\u0022 some of the Unity API details, so maybe this is the explanation.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Harry Twinotter","CreatedById":183539,"CreatedDateTime":"2017-12-27T12:50:41Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223244876\u0022 data-ipsquote-contentid=\u0022168546\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221513337677\u0022 data-ipsquote-userid=\u0022133181\u0022 data-ipsquote-username=\u0022Boris-Barboris\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/15/2017 at 10:34 PM, Boris-Barboris said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nJust a couple of tips that may or may not help:\n\u003C/p\u003E\n\u003Cp\u003E\nEvery game object in unity has a transform. Transform is probably (Unity is not open sourced) a tuple of parent transform, local translation vector, local scaling vector and local rotation quaternion. Cached global (wich take parent transform in mind) translation\\scaling\\rotation are usually maintained under the hood. Essentially, transform gives each object it\u0027s own euclidean space (consisting of origin and three axels), and each transform describes, how to get from global, universal unity euclidean space to this game object\u0027s space, and vice versa.\n\u003C/p\u003E\n\u003Cp\u003E\nNow imagine a KSP aircraft. It has cockpit. Cockpit is a \u0022control from here\u0022 part, it is a game object, it has it\u0027s own space, it has transform. KSP has these conventions:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\n\u0022right\u0022 unity vector of cockpit\u0027s transform is an X axel of cockpit\u0027s euclidean space. It\u0027s usually directed towards your right hand\\wing.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022up\u0022 is Y axel, it\u0027s usually the direction the plane\\rocket is flying. When simple rocket is just spawned from \u003Cabbr title=\u0022Vehicle Assembly Building\u0022\u003EVAB\u003C/abbr\u003E, it\u0027s command pod\u0027s \u0022up\u0022 vector is directed towards zenith.\n\u003C/li\u003E\n\u003Cli\u003E\n\u0022forward\u0022 is Z axel, it\u0027s usually directed towards plane\u0027s belly.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nKeep in mind Unity uses left-handed coordinate systems.\u003Cbr\u003E\nNow, if you take vector (1, 0, 0) in cockpit\u0027s space, wich corresponds to the direction of the right wing, and apply cockpit transform\u0027s rotation to it (by multiplying it on rotation quaternion), you will get the direction the right wing is facing in global unity reference frame (in KSP this frame is usually non-moving relative to closest\u0027s planet surface, and planetarium axis-aligned, iirc).\n\u003C/p\u003E\n\u003Cp\u003E\nNow, there\u0027s a little gotcha in multiplication order in Unity, I\u0027m sure sarbian will not mind this private message disclosure:\u003Cbr\u003E\u003Cimg alt=\u00222uaPriZ.png\u0022 class=\u0022ipsImage\u0022 height=\u0022482\u0022 src=\u0022https://i.imgur.com/2uaPriZ.png\u0022 width=\u00221011\u0022\u003E\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThanks.\u00A0 I assumed the convention of the Z axis being the direction the vessel points in was also used in KSP. Apparently not - I am a bit surprised but I am sure they has their reasons.\u003Cbr\u003E\u003Cbr\u003E\nThis explains why they need to rotate by Euler(90,0,0) in KSP, this is to align the way the vessel is pointing with the Z axis that the LookRotation defines (the lookat axis is the Z axis)\u00A0. This is not required in kOS as it has already been done, the doco says the vessel \u0022facing\u0022 direction is aligned with the Z axis.\u003Cbr\u003E\u003Cbr\u003E\nI hope I got all this straight, the semantics are a bit wobbly in natural language, it might have been easier expressing it in mathematics, if I knew enough mathematics :-)\n\u003C/p\u003E\n"}]}