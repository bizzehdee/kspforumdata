{"TopicId":120685,"ForumId":20,"TopicTitle":"How do I get patches to github?","CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2015-09-11T21:27:54Z","PageNum":1,"Articles":[{"CreatedByName":"Laie","CreatedById":110461,"CreatedDateTime":"2015-09-11T21:27:54Z","Content":"\n\u003Cp\u003EFirst, where I\u0027m coming from: I\u0027m a resonably experienced Linux admin. My current experience with git and patch will handsomely fit on a teaspoon, and diff is a tool to compare configuration files. Still, I don\u0027t expect to run into any problems with the tools. What I don\u0027t know is the whole process, what I need to do. Basically, I change stuff on my end, then let git do it\u0027s magic which eventually leads to patches being uploaded to the repo. The maintainer then decides whether he merges them or not. Is this correct so far?\u003C/p\u003E\u003Cp\u003EFrom what I read, it seems that I need a github account and fork things there before I can start commiting patches. Is this so or is there a more direct route?\u003C/p\u003E\u003Cp\u003EMore generally, what\u0027s best practice for maintaining stuff on my end? Is it a good idea to tamper with things in my own Gameplay folder (I need to try them first anyway) and directly commit from there?\u003C/p\u003E\u003Cp\u003EAnd... does the nature of my questions imply that I\u0027m missing something important?\u003C/p\u003E\n"},{"CreatedByName":"Yski","CreatedById":119366,"CreatedDateTime":"2015-09-11T23:32:29Z","Content":"\n\u003Cp\u003ERight, let\u0027s see how well I can explain this. Before we begin, I should probably add that I don\u0027t claim to be an expert, so if you disagree with something I said, it\u0027s entirely possible I\u0027m wrong. \u003C/p\u003E\u003Cp\u003EAfter writing this, I realize it\u0027s a bit of a wall of text, so I added quick TL;DR bullet points to the beginning, if that\u0027s all you were looking for. You\u0027ll find a more detailed explanation below, and feel free to ask if something\u0027s still unclear. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003ELet\u0027s assume you want to fix a bug on mod X. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EFork it. That\u0027s your own version of the mod you can make the changes on, before sending a pull request so that they can be added to the original.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EClone the fork to your computer.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EMake a new branch for the fix.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EEvery time you change something, make a new commit.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EPush the changes from your computer to your fork.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ESend a pull request to merge the changes you made on your fork on the new branch to the original repository.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EIt\u0027s now up to the modder whether they accept your changes or not.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003EFirst you\u0027ll need to fork it on your GitHub account. What this basically means is, you need to have your own version of mod X on GitHub where you do the changes, before you send a pull request to ask the original modder to make those changes part of the official repository. I imagine the idea is that you can branch away from the original if need be without making things messy, but thanks to the shared history it\u0027s easy enough to merge changes as well.\u003C/p\u003E\u003Cp\u003EOnce you have your repository on GitHub, it\u0027s time to clone it on your computer. Copy the clone URL on the right of your fork, then use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit clone url/to/fork.git\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto make your local version.\u003C/p\u003E\u003Cp\u003EBy default your local copy only knows where to find the fork you cloned it from. You\u0027ll probably want to update your fork when the original mod gets updated, so it\u0027s worth telling it where to find the original repository as well. Use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit remote -v\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto see existing remotes (=repositories on GitHub), and\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit remote add name URL\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto add new ones. In this case, the URL you\u0027d want is the clone URL for the original repository you forked. \u003C/p\u003E\u003Cp\u003EWhile you\u0027re at it, if it\u0027s your first time using git on that computer, set up your user name and email so that they show up correctly on your commits.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003Cbr\u003Egit config --global user.email \u0022yourEmail@email_place.com\u0022\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit config --global user.name \u0022Your user name\u0022\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, to the interesting stuff. The way git works is that everything you work on should have its own branch, so that it\u0027s sort of isolated from everything else that\u0027s going on. It\u0027s especially important when you want to contribute more than one change on someone else\u0027s project - pull requests ask them to merge all the changes made on that branch, and if you made all your changes on the same branch, they\u0027ll either have to accept or deny all of them instead of being able to choose which ones they actually want. \u003C/p\u003E\u003Cp\u003EIn case you find branches difficult to understand, think of them as alternate universe versions of you code. No changes made in one branch affect the others until you merge them back together again. When you hop between branches, git replaces all the files with their correct \u0022alternate universe\u0022 versions, then switches them back again when you return to the original branch.\u003C/p\u003E\u003Cp\u003ETo create a new branch, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit checkout -b branchName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo switch to branch branchName, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit checkout branchName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo see a list of all your branches, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit branch\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo merge changes made on branchName to the current branch, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit merge branchName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThat little bug you were planning to fix on X? You\u0027d want to make a new branch for it. Now, if you are safely on your new bug fix branch, it\u0027s time to do the actual coding. But first, let\u0027s talk about commits.\u003C/p\u003E\u003Cp\u003EEvery time you change something, you should make a new commit, so that you can easily keep track of what changed and when, as well as revert those changes if need be. It\u0027s the same rule of thumb as with functions: your commit message should tell exactly what you changed, and if you had to use an \u0022and\u0022, it should probably be two separate commits.\u003C/p\u003E\u003Cp\u003ESo, once you\u0027ve made your changes and saved them, use either\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003Cbr\u003Eor\u003Cbr\u003Egit add fileName\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit add -i\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto stage the files, in other words add them to be committed. If you just give git a file to add, it\u0027ll add all the changes to that file. Add -i on the other hand lets you pick files as well as specific chunks of code you changed that you want to stage, so that\u0027s what I\u0027d recommend you use. If you accidentally added something you didn\u0027t mean to, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit reset fileName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto un-add it.\u003C/p\u003E\u003Cp\u003EOnce that\u0027s done, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit commit -m \u0022Your commit message.\u0022\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto commit your changes. You can then use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit log\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto see your commits, and\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit diff\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eto see what changed between them.\u003C/p\u003E\u003Cp\u003EOnce you\u0027ve made and committed all the changes you want, it\u0027s time to push them to your repository. That just means you upload your changes to GitHub. When pushing from a new branch for the first time, go to that branch and use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit push -u origin branchName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt tells git to push changes on branchName to where the repository was cloned from, in other words your fork on GitHub, as well as to push there by default from now on. After that just\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit push\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewill do the trick.\u003C/p\u003E\u003Cp\u003EIf you need to do the opposite and pull changes from GitHub, use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Egit pull remoteName branchName\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E,where remoteName is one of those remote repositories I had you tell Git about earlier. By default, origin points to the GitHub repository you cloned your local copy from. branchName is the branch you wish to update. Note that it\u0027ll only pull the changes made to that branch on the GitHub repo.\u003C/p\u003E\u003Cp\u003ENow it\u0027s time to send a pull request. Go to the branch you want to merge to the official version on your GitHub repository, and make a pull request. Explain what you changed and why, and wait until the requests gets accepted. Once that\u0027s done, you can safely delete the branch.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EOh, and as for the second question, it\u0027s probably best to keep the project and your GameData folder separate. I\u0027d just copy the relevant files to GameData as need be, feels more organized.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-12T00:17:48Z\u0022 title=\u002209/12/2015 12:17  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 12, 2015\u003C/time\u003E by Yski\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-09-12T01:21:23Z","Content":"\n\u003Cp\u003EPersonally I make a symlink from, say, (repo for RP-0)/GameData/RP-0 to KSP/GameData/RP-0, so changes appear in GameData but the excess repo stuff does not.\u003C/p\u003E\u003Cp\u003ENote that RP-0, and perhaps some other mods but RP-0 seems most relevant \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E has a build script. Run make from the repo root if you change tree.yml any; that will generate the (git-ignored) Tree.cfg that actually is used by KSP.\u003C/p\u003E\u003Cp\u003EAlso worth mentioning that most mods don\u0027t include built dlls in their repos, so you may have to build from source, depending on what you want to do (for my stuff, RO, RSS, and most others do have dlls in git, but RealFuels does not).\u003C/p\u003E\u003Cp\u003EOh! Almost forgot. There is an easier way for making small changes.\u003C/p\u003E\u003Cp\u003EOpen the target repo in your web browser, and be logged into your Github account. Browse to the file you want to edit. Click the pencil icon (upper right corner of the file display) and you can make changes in the web editor.\u003C/p\u003E\u003Cp\u003EWhen done, type in a commit message (and, if \u0026gt;30char, an extended commit message in the big box below). Then click \u0022Suggest Change\u0022. Then keep click the green boxes to actually make a pull request (there\u0027s at least one more, on the next screen; there might be a third, I don\u0027t recall).\u003C/p\u003E\u003Cp\u003EIf you want to add more changes to that PR, open *your* fork of the repo (that was just created by the steps above) and go to the branch that has the changes (patch-1 if it\u0027s the first time, else patch-something). Then edit the files same as above, but choose \u0022commit directly\u0022 when committing. Your PR will automatically update.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-12T01:25:03Z\u0022 title=\u002209/12/2015 01:25  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 12, 2015\u003C/time\u003E by NathanKell\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Yski","CreatedById":119366,"CreatedDateTime":"2015-09-12T08:01:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EOh! Almost forgot. There is an easier way for making small changes.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENice, I didn\u0027t know that one. Learned something new today \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"}]}