{"TopicId":210989,"ForumId":20,"TopicTitle":"KSP KOS Fly By Wire Script","CreatedByName":"pizzaboy150","CreatedById":90315,"CreatedDateTime":"2022-12-09T19:42:13Z","PageNum":1,"Articles":[{"CreatedByName":"pizzaboy150","CreatedById":90315,"CreatedDateTime":"2022-12-09T19:42:13Z","Content":"\n\u003Cp\u003E\nHi All,\n\u003C/p\u003E\n\u003Cp\u003E\nSo with Chat GPT\u00A0 launch I though it would be fun to test it on a few scripts to see how it would perform.\n\u003C/p\u003E\n\u003Cp\u003E\nI have very basic knowledge of vector math or PID loops but I am a coder so thought it would be fun\u00A0 to try and write a fly by wire type script for KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nThe script runs surprisingly well, though it is easy to break particularly if you try and yaw / rudder while it is running.\n\u003C/p\u003E\n\u003Cp\u003E\nThe code was created in chat GPT but in a pesudo code format so all I did was translate it into KOS code and run it.\n\u003C/p\u003E\n\u003Cp\u003E\nThere is a lot wrong with it such as exiting cleanly and passing back control to the player again. But as a starting point to send craft in a particular orientation it works pretty well.\n\u003C/p\u003E\n\u003Cp\u003E\nIt does depend how well the craft fly\u0027s but if the craft is stable then it seems to have no problems.\u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnyways I have no real use for the code but thought it maybe fun to share for anyone trying to do something similar.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E//\n// FLY BY WIRE SCRIPT\n//\n\nset desiredPitch to 90 - vectorangle(ship:up:forevector, ship:facing:forevector).\nset desiredRoll  to 0.0.\n\nset pitch to 0.0. // Pitch value to set the control to\nset roll  to 0.0. // Roll  value to set the control to\n\nset speed to 0.25. // Max speed we can set pitch and roll at full value\n\n// Adjustment speeds for pitch\nset pitchKp to 0.01.   // Big adjustment speed\nset pitchKi to 0.001.  // Medium adjustment speed\nset pitchKd to 0.0001. // Fine adjustment speed\n\n// Adjustment speeds for roll\nset rollKp to 0.01.     // Big adjustment speed\nset rollKi to 0.0001.   // Medium adjustment speed\nset rollKd to 0.00001.  // Fine adjustment speed\n\n// Pitch variables\nset pitchIntegral to 0.0.\nset pitchError to 0.0.\nset pitchPreviousError to 0.0.\n\n// Roll variables\nset rollIntegral to 0.0.\nset rollError to 0.0.\nset rollPreviousError to 0.0.\n\n// Just an infiniate loop to get going\nset loop to 0.0.\nuntil loop \u0026gt; 0.0 {\n\n    clearScreen.\n    print \u0022FLY BY WIRE PROGRAM\u0022.\n    print \u0022=============================\u0022.\n\n    // Get current pitch and roll\n    set currentPitch to 90 - vectorangle(ship:up:forevector, ship:facing:forevector).\n    set currentRoll  to arctan2(-vdot(ship:facing:starvector, ship:up:forevector), vdot(ship:facing:topvector, ship:up:forevector)).\n\n    // Set desired attitude from pilot input\n    if ship:control:pilotpitch \u0026gt; 0 { set desiredPitch to desiredPitch \u002B ship:control:pilotpitch * speed. }\n    if ship:control:pilotpitch \u0026lt; 0 { set desiredPitch to desiredPitch \u002B ship:control:pilotpitch * speed. }\n    if ship:control:pilotroll  \u0026gt; 0 { set desiredRoll  to desiredRoll  \u002B ship:control:pilotroll  * speed. }\n    if ship:control:pilotroll  \u0026lt; 0 { set desiredRoll  to desiredRoll  \u002B ship:control:pilotroll  * speed. }\n\n    // Calculate the difference for all axis\n    set pitchError to desiredPitch - currentPitch.\n    set rollError  to desiredRoll  - currentRoll.\n\n    // Set the integral and derivative\n    set pitchIntegral   to pitchIntegral \u002B pitchError.\n    set pitchDerivative to pitchError    - pitchPreviousError.\n    set rollIntegral    to rollIntegral  \u002B rollError.\n    set rollDerivative  to rollError     - rollPreviousError.\n    \n    // Calculate control signal\n    set pitch to pitchKp * pitchError \u002B pitchKi * pitchIntegral \u002B pitchKd * pitchDerivative.\n    set roll  to rollKp  * rollError  \u002B rollKi  * rollIntegral  \u002B rollKd  * rollDerivative.\n\n    // Update controls\n    set ship:control:pitch to pitch.\n    set ship:control:roll  to roll.\n\n    // Update error for next calculation\n    set pitchPreviousError to pitchError.\n    set rollPreviousError  to rollError.\n\n    // Debug to see values\n    print \u0022DESIRED PITCH  :\u0022 \u002B round(desiredPitch, 2).\n    print \u0022DESIRED ROLL   :\u0022 \u002B round(desiredRoll,  2).\n    print \u0022CURRENT PITCH  :\u0022 \u002B round(currentPitch, 2).\n    print \u0022CURRENT ROLL   :\u0022 \u002B round(currentRoll,  2).\n    print \u0022PITCH INPUT    :\u0022 \u002B round(pitch,        2).\n    print \u0022ROLL INPUT     :\u0022 \u002B round(roll,         2).\n\n    // Wait for next calculation\n    wait 0.02.\n}\u003C/pre\u003E\n\u003Cp\u003E\nP.S if you find you are getting a lot of oscillations when using it then play with the adjustment speeds. the current settings seem to work okay for the stock Aeris 3A but other craft may need tweaks. From what I can tell the 3 adjustments speeds limit how fast it adjust the controls. If they are out further then it uses the larger adjustments then gets finer as it get closer to it target pitch or roll.\n\u003C/p\u003E\n\u003Cp\u003E\nHave fun!\n\u003C/p\u003E\n"},{"CreatedByName":"Gargamel","CreatedById":64714,"CreatedDateTime":"2022-12-10T16:56:57Z","Content":"\n\u003Cp\u003E\nMoved to add-on discussion\u00A0\n\u003C/p\u003E\n"}]}