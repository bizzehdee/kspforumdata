{"TopicId":164063,"ForumId":20,"TopicTitle":"Calculate landing coordinates on Kerbin","CreatedByName":"MusicalHQ","CreatedById":180254,"CreatedDateTime":"2017-08-04T17:31:55Z","PageNum":1,"Articles":[{"CreatedByName":"MusicalHQ","CreatedById":180254,"CreatedDateTime":"2017-08-04T17:31:55Z","Content":"\n\u003Cp\u003E\nIs there any way to semi-accurately predict where a craft would land? Mechjeb does this and gives a latitude and longitude, but I do not understand how it works. I\u0027m trying to write a script that lands a sub-orbital rocket back on the launch pad in python using kRPC.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, what would be a good way to steer the rocket onto the launch pad? The standard space plane control surfaces wouldn\u0027t work for a rocket in freefall.\n\u003C/p\u003E\n"},{"CreatedByName":"Dman979","CreatedById":123837,"CreatedDateTime":"2017-08-04T17:40:49Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223139934\u0022 data-ipsquote-contentid=\u0022164063\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221501867915\u0022 data-ipsquote-userid=\u0022180254\u0022 data-ipsquote-username=\u0022MusicalHQ\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n9 minutes ago, MusicalHQ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIs there any way to semi-accurately predict where a craft would land? Mechjeb does this and gives a latitude and longitude, but I do not understand how it works. I\u0027m trying to write a script that lands a sub-orbital rocket back on the launch pad in python using kRPC.\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, what would be a good way to steer the rocket onto the launch pad? The standard space plane control surfaces wouldn\u0027t work for a rocket in freefall.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027s a mod called Trajectories that can give you an idea of where the craft will land.\n\u003C/p\u003E\n\u003Cp\u003E\nA.I.R.B.R.A.K.E.S at the top of the rocket could be used to create drag on one side of the rocket\u0027s body, causing it to tilt away from the prograde vector; the resulting body lift can cause some small course changes.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-04T17:41:53Z\u0022 title=\u002208/04/2017 05:41  PM\u0022 data-short=\u00226 yr\u0022\u003EAugust 4, 2017\u003C/time\u003E by Dman979\u003C/strong\u003E\n\u003Cbr\u003EClarification.\n\u003C/span\u003E\n"},{"CreatedByName":"MusicalHQ","CreatedById":180254,"CreatedDateTime":"2017-08-04T17:45:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223139941\u0022 data-ipsquote-contentid=\u0022164063\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221501868449\u0022 data-ipsquote-userid=\u0022123837\u0022 data-ipsquote-username=\u0022Dman979\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nJust now, Dman979 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThere\u0027s a mod called Trajectories that can give you an idea of where the craft will land.\n\u003C/p\u003E\n\u003Cp\u003E\nA.I.R.B.R.A.K.E.S could be used to create drag on one side of the rocket\u0027s body, causing it to tilt away from the prograde vector; the resulting body lift can cause some small course changes.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe air breaks sound interesting - thanks.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, I need to be able to get the coordinates for the landing within in my python program. kRPC\u00A0allows python to interface with ksp, but doesn\u0027t interface with mods. Is there an equation to estimate the landing site? This would probably get complicated taking into account drag, so assuming a vacuum.\n\u003C/p\u003E\n"},{"CreatedByName":"Mudkip909","CreatedById":180021,"CreatedDateTime":"2017-08-04T20:16:13Z","Content":"\n\u003Cp\u003E\nreminded me i need mechjeb. thx.\n\u003C/p\u003E\n"},{"CreatedByName":"OhioBob","CreatedById":128005,"CreatedDateTime":"2017-08-04T22:34:52Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223139945\u0022 data-ipsquote-contentid=\u0022164063\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221501868752\u0022 data-ipsquote-userid=\u0022180254\u0022 data-ipsquote-username=\u0022MusicalHQ\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, MusicalHQ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHowever, I need to be able to get the coordinates for the landing within in my python program. kRPC\u00A0allows python to interface with ksp, but doesn\u0027t interface with mods. Is there an equation to estimate the landing site? This would probably get complicated taking into account drag, so assuming a vacuum.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nEven without drag, it\u0027s still not easy.\u00A0 Do you know the semimajor axis and eccentricity of the lander\u0027s orbit (even though it\u0027s suborbital, it\u0027s still an orbit)?\u00A0 If so, what I would probably try doing is compute the lander\u0027s true anomaly at its current position, and its true anomaly intersecting the planet\u0027s surface.\u00A0 True anomaly can be computed \u003Ca href=\u0022http://www.braeunig.us/space/orbmech.htm\u0022 rel=\u0022external nofollow\u0022\u003Eusing equation 4.43\u003C/a\u003E.\u00A0 From that there is probably a way to compute the location of the landing site in relation to the lander\u0027s current position.\u00A0 Unfortunately I have no idea what the solution is off the top of my head.\n\u003C/p\u003E\n"},{"CreatedByName":"Spricigo","CreatedById":166502,"CreatedDateTime":"2017-08-04T22:46:17Z","Content":"\n\u003Cp\u003E\nMaybe you get more luck asking on the threads of the mods how they do it. \u00A0(both the data and the calculation they do) And try to reproduce it with kRPC.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAlternatively you may also look at kRPC thread (also KoS) \u00A0if someone did something similar.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI say that because for the \u0027regular player\u0027 \u00A0that\u0027s too much hassle to care. A rough estimate is enough for our needs(or we can use a mod)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: well, \u00A0at least that is what I thought that before \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/128005-ohiobob/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022128005\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/128005-ohiobob/\u0022 rel=\u0022\u0022\u003E@OhioBob\u003C/a\u003E reply.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnd everything that you may use to steer a plane can also be used to steer a rocket. \u00A0The \u00A0rocket only lack the aerodynamic characteristics (like lot of wings) \u00A0to make it effective.\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-04T23:02:46Z\u0022 title=\u002208/04/2017 11:02  PM\u0022 data-short=\u00226 yr\u0022\u003EAugust 4, 2017\u003C/time\u003E by Spricigo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"OhioBob","CreatedById":128005,"CreatedDateTime":"2017-08-04T23:25:55Z","Content":"\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003EAdding to my previous post...\u00A0 The difference in true anomaly,\u00A0\u0394\u003C/span\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u03BD\u003C/span\u003E\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E, between the current location and where the orbit intersects the ground is the angular distance the vehicle will travel along its current heading until touchdown.\u00A0 If you know the coordinates of the sub-vehicle point and the heading, you should be able to compute the landing site.\u00A0 Just move \u0394\u003C/span\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u03BD\u003C/span\u003E\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E degrees from the sub-vehicle point in the direction the vehicle is moving and you\u0027re there.\u00A0 If you want to know the linear distance rather than angular, it\u0027s \u03C0R\u003C/span\u003E\u003Cfont face=\u0022Arial\u0022\u003E\u0394\u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003E\u03BD\u003C/span\u003E\u003C/font\u003E\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E/180, where R = radius of planet.\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003ESo if you know semimajor axis, eccentricity, current altitude, heading, and sub-vehicle point, it should be solvable.\u00A0 I think all of those are given by \u003Cabbr title=\u0022Kerbal Engineer Redux (mod)\u0022\u003EKER\u003C/abbr\u003E and MechJeb, so hopefully you have access to them. \u00A0\u003C/span\u003E\u003Cfont face=\u0022Arial\u0022\u003EIf you don\u0027t know one or more of those, then you\u0027re going to have to figure something else out.\u003C/font\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cfont face=\u0022Arial\u0022\u003EI also agree with \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/166502-spricigo/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022166502\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/166502-spricigo/\u0022 rel=\u0022\u0022\u003E@Spricigo\u003C/a\u003E.\u00A0 Ask those who have already figured it out.\u003C/font\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-05T02:32:03Z\u0022 title=\u002208/05/2017 02:32  AM\u0022 data-short=\u00226 yr\u0022\u003EAugust 5, 2017\u003C/time\u003E by OhioBob\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-05T03:44:59Z","Content":"\n\u003Cp\u003E\nI\u0027m working on a similar problem... \u00A0starting with vacuum landings and going to play with atmospheres at SOME point. \u00A0 At the moment I\u0027ve got a decently functioning vacuum lander script - that doesn\u0027t do any targeting - but controls descent with reasonable efficiency. \u00A0 It\u0027s the lander script in my example directory -\u003Ca href=\u0022https://github.com/krpc/krpc-library/blob/master/Art_Whaleys_KRPC_Demos/landing.py\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/krpc/krpc-library/blob/master/Art_Whaleys_KRPC_Demos/landing.py\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe fun bits are mostly a KRPC/Python port of the mechjeb suicide burn calculation equations, which seems like it might be useful to you. \u00A0I don\u0027t begin to understand the maths, but I get the same numbers mechjeb does, so it\u0027s working. \u00A0((actually, my routine is maybe slightly BETTER at avoiding terrain than mechjeb - because mechjeb only looks at the altitude of the projected landing site... \u00A0and my routine samples terrain heights along the landing path and tries to kill horizontal velocity by the altitude of the highest obstacle along the course. \u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe closest I can get off the top of my head to what you want to do is this bit- \u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Ev = conn.space_center.active_vessel\nradius = v.orbit.body.equatorial_radius \u002B v.flight().surface_altitude\nTA = v.orbit.true_anomaly_at_radius(radius)\nTA = -1 * TA   #look on the negative (descending) side of the orbit\nimpact_time = v.orbit.ut_at_true_anomaly(TA)\nimpact_place = v.orbit.position_at(impact_time, v.orbit.body.reference_frame)\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd IMPORTANT - that position_at(ut, reference frame) bit is\u00A0actually in the development builds of KRPC but not the .39 release yet - I just added it to the code last month. \u00A0It should be in the next release. \u00A0 \u00A0The missing piece THEN becomes... \u00A0turning a vector position into a latitude and longitude? \u00A0 Which I don\u0027t think exists yet... \u00A0so maybe I\u0027ll see if I can figure that out and get it into the development release too, because it seems a useful bit to have? \u00A0Off the top of my head... \u00A0you could maybe cludge it using what already exists in KRPC by getting the vector position at the\u00A0vessel\u0027s latitude and longitude, at the same altitude as \u0027radius,\u0027 then calculating the distance between the two points... \u00A0then using some haversine derived math to get the lat and lon of the second point based on distance and heading? \u00A0 PART of that math is in that same landing.py file - \u00A0the\u00A0coords_down_bearing(lat, lon, bearing, distance, body): function. \u00A0You just need to calculate the bearing. \u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nUpdate - a quick peek in the KSP API confirms that getting the latitude, longitude and altitude of a point in world space is easy - \u00A0I\u0027ve opened an issue on the KRPC github to see how djungelorm prefers me to do it, but as soon as he gets back to me on that, I\u0027ll add those methods to KRPC and then you\u0027ll have them in the development build... \u00A0which.. \u00A0will.. \u00A0MOSTLY get you where you want to be for vacuum planets. \u00A0Atmospheres... \u00A0that\u0027s a different animal. \u00A0I\u0027d look at how the trajectories mod does it and try to port that over if the license allows. And in fact... I WILL be doing that at some point soon for my own curiosity as well! \u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-05T04:43:37Z\u0022 title=\u002208/05/2017 04:43  AM\u0022 data-short=\u00226 yr\u0022\u003EAugust 5, 2017\u003C/time\u003E by artwhaley\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MusicalHQ","CreatedById":180254,"CreatedDateTime":"2017-08-05T11:54:51Z","Content":"\n\u003Cp\u003E\nSo far I\u0027ve been able to get the vector position of where the orbit intersects the ground (thanks, the position_at() seems very useful). However, the vector doesn\u0027t take into account Kerbins rotation, so doesn\u0027t give the true landing site. Is there any way to account for this?\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-05T23:44:05Z","Content":"\n\u003Cp\u003E\nYou\u0027re totally right about error from that one. \u00A0 I don\u0027t see an obvious way to get that answer without computing it via haversine related math. \u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn that landing script I linked above, the\u00A0coords_down_bearing function does the right math, mostly, for you. \u00A0 It takes a current latitude and longitude, a bearing and a distance and gives you the new latitude and longitude. \u00A0So... \u00A0ONCE I get Djungelorm\u0027s guidance on adding the lat and longitude from position vector routines to KRPC... \u00A0 what you\u0027ll have to do sounds like...\n\u003C/p\u003E\n\u003Cp\u003E\nGet the Lat and Lon where you\u0027d land if you were landing NOW...\n\u003C/p\u003E\n\u003Cp\u003E\nGet the time till impact\n\u003C/p\u003E\n\u003Cp\u003E\nmultiply that time by the rotational speed of the planet to get the degrees rotated between now and then\n\u003C/p\u003E\n\u003Cp\u003E\nFind the circumference of the planet at the landing latitude\n\u003C/p\u003E\n\u003Cp\u003E\nuse circumference and the rotation angle to get the overland distance between where you\u0027d land now and where you\u0027ll actually be landing then....\n\u003C/p\u003E\n\u003Cp\u003E\nand then the math from that coords_down_bearing function will get you the rest of the way \u00A0- coords_down_bearing(current_lat, current_lon, 270, overland_distance, orbital_body_in_question)\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"MusicalHQ","CreatedById":180254,"CreatedDateTime":"2017-08-08T12:33:31Z","Content":"\n\u003Cp\u003E\nI played around with the position_at() function, and managed to get it to work, so that it gave me my landing predictions as a position vector. But... it wasn\u0027t accurate enough for me. So I started from scratch on a predictor that took into account drag. Using some equations, I was able to start with a velocity, and simulate what would happen using a basic physics model until it hit the ground. This turned out to be a lot simpler than I thought it would be - the hardest part was figuring out the atmospheric density on Kerbin at different altitudes (because its modeled on the US standard atmosphere).\n\u003C/p\u003E\n\u003Cp\u003E\nI wrote some functions (\u003Ca href=\u0022https://github.com/MusicalHQ/KSP-Landing-Predictions/blob/master/Landing.py\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/MusicalHQ/KSP-Landing-Predictions/blob/master/Landing.py\u003C/a\u003E) for this.\n\u003C/p\u003E\n\u003Cp\u003E\nSo far, you can use the functions to calculate landing coordinates (right now just position vectors for body.reference_frame)\u00A0on bodies with no atmosphere, and on Kerbin. I\u0027ll try and\u00A0add Eve, Duna, Laythe, Earth, Venus, Mars,\u00A0Titan and maybe some OPM moons too.\n\u003C/p\u003E\n\u003Cp\u003E\nMy trajectories line up pretty well to mechjeb\u0027s, but that\u0027s the problem. My only way of checking whether my math is correct is comparing my results to mechjeb. If someone could have a look at the code and tell me whether my math makes sense, it would be appreciated.\n\u003C/p\u003E\n\u003Cp\u003E\nThe only thing holding back the speed of the calculations is drawing the trajectory. I have a few ideas about how to fix this, but right now if you want to calculate the landing site, turn off drawing.\n\u003C/p\u003E\n"},{"CreatedByName":"OhioBob","CreatedById":128005,"CreatedDateTime":"2017-08-08T17:11:41Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/180254-musicalhq/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022180254\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/180254-musicalhq/\u0022 rel=\u0022\u0022\u003E@MusicalHQ\u003C/a\u003E, it looks like you\u0027re computing Kerbin\u0027s atmospheric temperature, pressure, and density using an equation from the KSP Wiki and \u003Ca href=\u0022http://www.braeunig.us/space/atmmodel.htm#table4\u0022 rel=\u0022external nofollow\u0022\u003Ethis web page\u003C/a\u003E.\u00A0 I\u0027m actually the guy who wrote that part of the Wiki and the reference web page.\u00A0 It looks to me like the code you\u0027ve written will work, but the downside is that is only works for Kerbin\u0027s stock atmosphere, nor does it account for location.\u00A0 You probably want a more universal way of doing it that will work with any planet or atmosphere.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP computes temperature and pressure using animation curves.\u00A0 A couple years ago \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275006\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75006-nathankell/\u0022 rel=\u0022\u0022\u003E@NathanKell\u003C/a\u003E told me how the curves are evaluated.\u00A0 I\u0027m not a computer programmer so I don\u0027t necessarily understand it all, but perhaps you will.\u00A0 This is what he told me:\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAll curves are evaluated like this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022http://answers.unity3d.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cu\u003E\u003Cfont color=\u0022#0066cc\u0022\u003Ehttp://answers.unity3d.com/questions/464782/t-is-the-math-behind-animationcurveevaluate.html\u003C/font\u003E\u003C/u\u003E\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nPressure is calculated by evaluating the pressure curve against altitude. (result, kPa). Ambient temperature at that altitude is (in K):\n\u003C/p\u003E\n\u003Cp\u003E\n1. atmosphereTemperatureOffset = (currentMainBody.latitudeTemperatureBiasCurve.Evaluate(latitude)\n\u003C/p\u003E\n\u003Cp\u003E\n\u002B (currentMainBody.latitudeTemperatureSunMultCurve.Evaluate(latitude) * sunDotNormalized)\n\u003C/p\u003E\n\u003Cp\u003E\n\u002B currentMainBody.axialTemperatureSunMultCurve.Evaluate(sunAxialDot));\n\u003C/p\u003E\n\u003Cp\u003E\n2. temperature = currentMainBody.GetTemperature(altitude) // base temperature\n\u003C/p\u003E\n\u003Cp\u003E\n\u002B currentMainBody.atmosphereTemperatureSunMultCurve.Evaluate((float)altitude) // altitude-based multiplier to temperature delta\n\u003C/p\u003E\n\u003Cp\u003E\n* atmosphereTemperatureOffset;\n\u003C/p\u003E\n\u003Cp\u003E\nDensity is then pressure * 1000.0 * atmosphereMolarMass / (PhysicsGlobals.IdealGasConstant * temperature); (in kg/m^3)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe temperature equation above is outdated because there were additional curves added about a year ago.\u00A0 I can probably go through my notes and construct an updated equation, but I don\u0027t want to bother unless it is something you need.\u00A0 If the above is something you can use, please let me know and I\u0027ll figure what changes are necessary.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-08T19:11:48Z\u0022 title=\u002208/08/2017 07:11  PM\u0022 data-short=\u00226 yr\u0022\u003EAugust 8, 2017\u003C/time\u003E by OhioBob\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"OhioBob","CreatedById":128005,"CreatedDateTime":"2017-08-08T18:59:36Z","Content":"\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003EI just remembered that I included the updated temperature equation in \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/142686-modeling-atmospheres-in-ksp/\u0022 rel=\u0022\u0022\u003Ethis thread\u003C/a\u003E.\u00A0 The equation is,\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cfont color=\u0022#000000\u0022\u003ETemperature\u003Cbr\u003E\n= currentMainBody.atmosphereTemperatureCurve.Evaluate(altitude)\u003Cbr\u003E\n\u002B atmosphereTemperatureOffset * currentMainBody.atmosphereTemperatureSunMultCurve.Evaluate(altitude)\u003C/font\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cfont color=\u0022#000000\u0022\u003Ewhere,\u003C/font\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cfont color=\u0022#000000\u0022\u003EatmosphereTemperatureOffset\u003Cbr\u003E\n= currentMainBody.latitudeTemperatureBiasCurve.Evaluate(latitude)\u003Cbr\u003E\n\u002B currentMainBody.latitudeTemperatureSunMultCurve.Evaluate(latitude) * sunDotNormalized\u003Cbr\u003E\n\u002B currentMainBody.axialTemperatureSunBiasCurve.Evaluate((float)currentMainBody.orbit.trueAnomaly * Mathf.Rad2Deg) * currentMainBody.axialTemperatureSunMultCurve.Evaluate(latitude))\u003Cbr\u003E\n\u002B currentMainBody.eccentricityTemperatureBiasCurve.Evaluate((float)((currentMainBody.orbit.radius - currentMainBody.orbit.PeR) / (currentMainBody.orbit.ApR - currentMainBody.orbit.PeR)))\u003C/font\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\n\u003Cbr\u003E\u003Cfont\u003EI believe th\u003C/font\u003E\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cfont color=\u0022#000000\u0022\u003Ee pressure equation should be,\u003C/font\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\n\u003Cspan style=\u0022font-family:Arial, Helvetica, sans-serif;\u0022\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\u003Cfont color=\u0022#000000\u0022\u003EPressure = currentMainBody.atmospherePressureCurve.Evaluate(altitude)\u003C/font\u003E\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\nAnd finally,\n\u003C/p\u003E\n\u003Cp style=\u0022margin:0in 0in 8pt;\u0022\u003E\nDensity = pressure * 1000.0 * atmosphereMolarMass / (PhysicsGlobals.IdealGasConstant * temperature)\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-08T19:09:39Z\u0022 title=\u002208/08/2017 07:09  PM\u0022 data-short=\u00226 yr\u0022\u003EAugust 8, 2017\u003C/time\u003E by OhioBob\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Vanamonde","CreatedById":27914,"CreatedDateTime":"2017-08-09T02:53:12Z","Content":"\n\u003Cp\u003E\nIt looks like this is seeking or planning to make a mod, and so, moved to the modding subforum.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-09T08:03:40Z","Content":"\n\u003Cp\u003E\nI gave this a try... and am getting results that agree exactly with the aeroGUI window... \u00A0so I think it\u0027s working. \u00A0 I temporarily had a method to get the temperature out, and that agreed with the aero GUI as well, and was considerably warmer than the FlightGlobals.getExternalTemperature results, so I THINK it\u0027s getting the correct temperature adjusted for latitude.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E            var adjustedPosition \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E referenceFrame\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EPositionToWorldSpace\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EPosition\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EToVector\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E());\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            var altitude \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetAltitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EadjustedPosition\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            var latitude \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetLatitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EadjustedPosition\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            var pressure \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFlightGlobals\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgetStaticPressure\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EadjustedPosition\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            var temperature \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFlightGlobals\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgetExternalTemperature\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ealtitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                              \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EatmosphereTemperatureSunMultCurve\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEvaluate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E((\u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ealtitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                              \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ElatitudeTemperatureBiasCurve\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEvaluate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E((\u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Elatitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                                 \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ElatitudeTemperatureSunMultCurve\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEvaluate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E((\u003C/span\u003E\u003Cspan\u003Efloat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Elatitude\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// fix that 0 into latitude\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                                 \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EInternalBody\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EaxialTemperatureSunMultCurve\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EEvaluate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EFlightGlobals\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EgetAtmDensity\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Epressure\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E temperature\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nHere\u0027s a VERY experimental version of the space center dll, that should replace the one in your gamedata/krpc/ folder... \u00A0TEMPORARILY AND WITH CAUTION. \u00A0\u003Ca href=\u0022https://drive.google.com/file/d/0B3q8VwW68f8AdXhEQVR3UlpPWUk/view?usp=sharing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://drive.google.com/file/d/0B3q8VwW68f8AdXhEQVR3UlpPWUk/view?usp=sharing\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nIt adds four\u00A0methods to the celestial body class that have been spawned by this discussion -\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nlatitude, longitude, and altitude, and atmospheric density\u00A0from position methods. \u00A0 \u00A0Is there any need to be able to get temperature or pressure at a given position, if you already have the density? \u00A0 They\u0027re easy to implement, but if they\u0027re unnecessary I hate to clutter up the API.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThe code for the changes I\u0027ve made is all visible in my fork, via the pull request.\n\u003C/p\u003E\n"},{"CreatedByName":"OhioBob","CreatedById":128005,"CreatedDateTime":"2017-08-09T15:25:42Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223143934\u0022 data-ipsquote-contentid=\u0022164063\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221502265820\u0022 data-ipsquote-userid=\u0022118388\u0022 data-ipsquote-username=\u0022artwhaley\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, artwhaley said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIs there any need to be able to get temperature or pressure at a given position, if you already have the density?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf all you\u0027re trying to do is take drag into account, then you should only need density.\u00A0 If there\u0027s a way to get density without temperature and pressure, then I don\u0027t see any reason to get temperature and pressure.\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-09T20:23:03Z","Content":"\n\u003Cp\u003E\nWell, then... \u00A0that experimental version of the SpaceCenter dll ought to help, as it lets you grab density for any point in space. \u00A0Let me know if there\u0027s anything else that would both help, and be broadly applicable to others. \u00A0I think all 4 methods in that PR fit the bill.\u00A0I always try to strike a balance between those two with contributing methods to KRPC, and Djungelorm has been pretty patient with me so far! \u00A0lol.\n\u003C/p\u003E\n"}]}