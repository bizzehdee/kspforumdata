{"TopicId":131613,"ForumId":20,"TopicTitle":"Let\u0026#039;s Talk About Procedural Engines","CreatedByName":"Sauron","CreatedById":69931,"CreatedDateTime":"2016-02-08T05:21:52Z","PageNum":1,"Articles":[{"CreatedByName":"Sauron","CreatedById":69931,"CreatedDateTime":"2016-02-08T05:21:52Z","Content":"\n\u003Cp\u003E\nSoooo...\n\u003C/p\u003E\n\u003Cp\u003E\nThis little rant has come about after playing some RSS/64k career games but the points I make are also applicable (less so, admittedly) to a stock game. I\u0027ve found the reliance on IRL engines in any realism overhaul games highly irritating. There are always niches that I really want to fill but can\u0027t because of a dearth of RL options (this is most notable with small engines, lander engines, and engines with poorly represnted fuels like methane.)\n\u003C/p\u003E\n\u003Cp\u003E\nTo that end, I\u0027d like to propose a (hopefully) reasonably easy to implement way that someone with some degree of modding ability might go about making a procedural engine mod as well as some game balance considerations.\n\u003C/p\u003E\n\u003Cp\u003E\nEach procedural engine would consist of two meshes, an engine housing, and an engine bell. Housings would be a fixed shape--just scaleable. Housings would also include any turbomachinery, pumps, etc.\n\u003C/p\u003E\n\u003Cp\u003E\nOnly the bell would be procedural with 3 general options: surface, vacuum, and low-profile. Again, bells would be modified mostly by scaling.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis offers interesting game design considerations. For example:\n\u003C/p\u003E\n\u003Cp\u003E\n-Low profile engines would have worse TWR and ISP (bells not ideally shaped, machinery compacted in awkward ways).\n\u003C/p\u003E\n\u003Cp\u003E\n-In RSS, choices of pressure fed, turbopump driven, control over the number of ignitions, throttleability, etc.\n\u003C/p\u003E\n\u003Cp\u003E\n-Integration with KCT and similar to reward desgning vehicles with a common lineage--each procedural engine would have to be discretely represented.\n\u003C/p\u003E\n\u003Cp\u003E\n-Balanced tradeoffs between TWR and ISP would be interesting ways to distinguish engines\n\u003C/p\u003E\n\u003Cp\u003E\n-Because stock is much simpler there\u0027s less need for a mod like this but if it\u0027s pretty enough there\u0027ll always be uses \u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI feel like this is a relatively low-effort way of getting procedural engines without a really involved procedural system. The real trick is game balance.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"MatterBeam","CreatedById":133334,"CreatedDateTime":"2016-02-08T17:53:13Z","Content":"\n\u003Cp\u003E\nYou\u0027d need an intersection between someone capable of modelling and texturing relatively complex parts, and someone who can make sense of FireSpitter\u0027s model switching.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThat\u0027s... rare, and those capable are usually tied up in their own projects.\n\u003C/p\u003E\n\u003Cp\u003E\nIn the meantime, I strongly recommend you look at\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/117662-105-custom-clusters-more-freedom-in-engine-design-0531/\u0022\u003E Custom Clusters\u003C/a\u003E. For tips on how to use them, look at my \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/121354-rss-algerian-aerospace-program-alternative-history-may-1967/\u0022\u003ERSS career rockets\u003C/a\u003E.\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2016-02-08T20:45:35Z","Content":"\n\u003Cp\u003E\nThe modelling and model switching aren\u0027t that hard if that was all you wanted to accomplish. \u00A0JSI Part utilities creates a pretty easy to manipulate mechanism for making a part that has several potential configurations. \u00A0At the moment it just affects mass, cost, node placement and resources.. \u00A0but it could probably be expanded to swap fuel and curves too? \u00A0If so, you\u0027re looking at a few dozen lines of c# and then the rest of the mod making will happen in config files? \u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Sauron","CreatedById":69931,"CreatedDateTime":"2016-02-10T15:26:50Z","Content":"\n\u003Cp\u003E\nSee, I don\u0027t think from a technical perspective this would be any harder than p-fairings. In fact, let\u0027s use that example.\n\u003C/p\u003E\n\u003Cp\u003E\nSuppose there\u0027s a mesh switchable set of superstructures that project a guide mesh exactly like p-fairings. This can be tweaked according to engine parameters, etc. The bell is a separate mesh. If you couldn\u0027t do it in one part you could do it in two.\n\u003C/p\u003E\n\u003Cp\u003E\nI feel like balance is a muuch bigger challenge.\n\u003C/p\u003E\n"},{"CreatedByName":"Mad Rocket Scientist","CreatedById":139256,"CreatedDateTime":"2016-02-11T03:21:57Z","Content":"\n\u003Cp\u003E\nI\u0027ve thought about this too, and here\u0027s what I\u0027d do:\n\u003C/p\u003E\n\u003Cp\u003E\nMake the engines modular, so you can mix-\u0027n-match MCCs, turbopumps, gimbals, and nozzles.\n\u003C/p\u003E\n"},{"CreatedByName":"Sauron","CreatedById":69931,"CreatedDateTime":"2016-02-11T20:15:49Z","Content":"\n\u003Cp\u003E\n@MRS: That strikes me as a much more ambitious and technically difficult project. I\u0027d rather have a slightly hackier system and the design flexibility of procedural engines.\n\u003C/p\u003E\n"},{"CreatedByName":"EatVacuum","CreatedById":72754,"CreatedDateTime":"2016-02-11T21:43:16Z","Content":"\n\u003Cp\u003E\nI\u0027d love to see procedural engines. My vision\u00A0is to have two components, a procedural \u0022engine\u0022 representing the reaction chamber, pumps etc. and a procedural bell. That would probably work best for modelling, but also for figuring out the important numbers,\n\u003C/p\u003E\n\u003Cp\u003E\nThe engine portion should take the fuel and oxidizer and convert it into \u0022potential thrust\u0022, the bell would take the potential thrust and modify it formulaicly dependent on the current atmospheric pressure (or lack thereof) and the design of the bell into the\u00A0\u0022actual\u0022 thrust.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nEngine size and tech would determine how much fuel could be processed per second, that and the Isp of the fuel would determine the potential thrust. Efficiency could be lowered somewhat by the technology of the engine - the Isp numbers available assuming ideal temperature, pressure etc. in the reaction chamber, but working pressure and temperature is limited by the available materials. Similarly open cycle engines are less efficient then closed cycle.\n\u003C/p\u003E\n\u003Cp\u003E\nThe\u00A0radius of the bell\u0027s throat would be determined based on the engine specs, the bell\u0027s exit would be determined by player choice. The efficiency with which the potential thrust is converted to actual thrust is determined by the ratio of throat \u00A0to exit and the ambient pressure at the nozzle exit. The length of the nozzle would determined by the nozzle exit diameter assuming efficient bell nozzle shape is followed. Players should be presented with a couple od presets for the bell - probably sea level optimized, vacuum optimized and intermediate, But they should also be allowed to choose any point on the scale - do I live with the weight and size of a fully optimized vacuum bell or do I sacrifice some efficiency to save on weight with a smaller bell?\n\u003C/p\u003E\n\u003Cp\u003E\nGiven the formulas for thrust, Isp etc. are well known, balance shouldn\u0027t be difficult. The one thing that would have to be worked out carefully is the ratio of engine weight to thrust. That is determined by engineering considerations, materials technology and so on, not as easy as calculating thrust. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022true\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2016-02-12T07:15:33Z","Content":"\n\u003Cp\u003E\nThere\u0027s a small hassle that comes with any multiple part solution to procedural engines - and that is that the entire \u0027engine\u0027 game module is attached to a single part... \u00A0so your bell will always BE the engine... \u00A0now, making a partmodule that you add to your engine that communicates with a different partmodule in\u00A0it\u0027s parent part to find out what the parent part thinks the curves and thrust settings for the engine should be isn\u0027t impossible at all, but it\u0027s not nearly as straightforward as just adding the parameters you need to modify to something existing, like JSIPartUtilities and then the whole rest of the mod is made in the \u0027cfg\u0027 file... \u00A0 \u00A0You just define 20 different possible setups for your engine with whatever combination of models you want for the upper engine and bell nozzle and then in the VAB your user is able to just click through the different setups and watch the engineer or mechjeb window tell them what their delta-v and TWR would be with each setting of the magic button.\n\u003C/p\u003E\n"}]}