{"TopicId":171397,"ForumId":20,"TopicTitle":"kOS issues - PID problem or more serious?","CreatedByName":"RizzoTheRat","CreatedById":123362,"CreatedDateTime":"2018-02-25T21:32:58Z","PageNum":1,"Articles":[{"CreatedByName":"RizzoTheRat","CreatedById":123362,"CreatedDateTime":"2018-02-25T21:32:58Z","Content":"\n\u003Cp\u003E\nAny kOS experts around?\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m a noob to kOS and and am trying to make a landing script, with the intention of eventually having it do precision landing near a target.\n\u003C/p\u003E\n\u003Cp\u003E\nCurrently I have it converting the ALT:RADAR output in to a vector in the SHIP:UP direction, then calculating the acceleration vector it needs in order to stop in time. I\u0027m currently only testing it in the vertical but hopefully this approach should work in 3D (have to split in to in X,Y,Z axes for the calcs though as I can\u0027t do it in all in vector form).\u00A0 I then have a PID loop to set the throttle for the required acceleration.\u00A0 It mostly works testing it just in the vertical but I can\u0027t tune the throttle properly, it starts off not putting enough in so it then has to crank the throttle up until it pegs at full thrust but too late to stop it crashing.\n\u003C/p\u003E\n\u003Cp\u003E\nI assume the regular oscillation just need the PID constants tuning properly, but I find it strange that\u00A0after a few cycles\u00A0the P value oscillates around an average of 4 or 5 rather than zero.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022Vv1a4gz.png\u0022 class=\u0022ipsImage\u0022 height=\u0022467\u0022 src=\u0022https://i.imgur.com/Vv1a4gz.png\u0022 width=\u0022750\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nThe ships\u0027s a basic single stage with a \u003Cabbr title=\u0022Thrust-to-weight ratio\u0022\u003ETWR\u003C/abbr\u003E of about 3.5, with a Gravioli detector\u00A0and a accelerometer\u00A0attached.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAny thoughts on what I\u0027m doing wrong?\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003ECLEARSCREEN.\nset cutalt to 1000.\nset Thrott to 1.\nSet MyHeading to Up.\nLOCK STEERING TO MyHeading.\nlock Throttle to Thrott.\nstage.\ngear off.\n\nwait until ship:altitude\u0026gt;cutalt.\nset Thrott to 0.\nwait until ship:altitude\u0026gt;cutalt*1.5.\n\nwhen ship:altitude\u0026lt;500 then {\n\tgear on.\n}.\n\nSET g TO ship:sensors:grav.  //vector\nset maxAcc to ship:maxthrust/ship:mass-g:mag. //as a scalar, this is max in up direction, should be higher in other directions\n\n//set up initial values\nset AccReq to -ship:up:vector*0.1.\nset TargetVel to 2 * ship:up:vector.\n\n//Logs stuff to screen but Ive stripped them out to simplify the post\nuntil AccReq:mag \u0026gt; (maxAcc*0.5) {\n\tset Vel to ship:velocity:surface.\n\tset Dist to ship:up:vector * alt:radar.  //hopefully this is as a vector but in the up direction\n\tset AccNow TO SHIP:SENSORS:ACC - SHIP:SENSORS:GRAV.  //current acceleration vector\n\tset AccDir to (vdot(accnow,AccReq))/abs(vdot(accnow,AccReq)).\n\t\n\tset AccReqX to ((Vel:x^2 - targetvel:x^2)/(2*Dist:x)).\n\tset AccReqY to ((Vel:y^2 - targetvel:y^2)/(2*Dist:y)).\n\tset AccReqZ to ((Vel:z^2 - targetvel:z^2)/(2*Dist:z)).\n\tset AccReq to V(AccReqX,AccReqY,AccReqZ).\n}.\n\nset Thrott to 1.\n\nlock P to AccReq:mag-AccDir*AccNow:mag.\nLOCK in_deadband TO ABS(P) \u0026lt; 0.01.\n\nSET I TO 0.\nSET D TO 0.\nSET P0 TO P.\n\nSET Kp TO 0.01.\nSET Ki TO 0.006.\nSET Kd TO 0.006.\n\nLOCK dThrott TO Kp * P\u002B Ki * I \u002B Kd * D.\n\nLOG \u0022Test file output\u0022 TO output_log.\nLOG \u0022Time,AccNow,Vel,Dist,AccReq,P,I,D,dT,dThrott,Thrott,AccDir\u0022 TO output_log.\n\nSET t0 TO TIME:SECONDS.\nSet tLog to time:seconds.\nLOCK logline TO (TIME:SECONDS - tlog)\u002B\u0022,\u0022\u002BAccNow:mag\u002B\u0022,\u0022\u002Bvel:mag\u002B\u0022,\u0022\u002BDist:mag\u002B\u0022,\u0022\u002BAccReq:mag\u002B\u0022,\u0022\u002BP\u002B\u0022,\u0022\u002BI\u002B\u0022,\u0022\u002BD\u002B\u0022,\u0022\u002BdT\u002B\u0022,\u0022\u002BdThrott\u002B\u0022,\u0022\u002BThrott\u002B\u0022,\u0022\u002BAccDir.\n      \nUNTIL Vel:mag \u0026lt; 1 {\n\tset Vel to ship:velocity:surface.\n\tset Dist to ship:up:vector * alt:radar.  //hopefully this is as a vector but in the up direction\n\tset AccNow TO SHIP:SENSORS:ACC - SHIP:SENSORS:GRAV.  //current acceleration vector\n\tset AccDir to (vdot(accnow,AccReq))/abs(vdot(accnow,AccReq)).\n\tset AccReqX to ((Vel:x^2 - targetvel:x^2)/(2*Dist:x)).\n\tset AccReqY to ((Vel:y^2 - targetvel:y^2)/(2*Dist:y)).\n\tset AccReqZ to ((Vel:z^2 - targetvel:z^2)/(2*Dist:z)).\n\tset AccReq to V(AccReqX,AccReqY,AccReqZ).\n\t\n\tSET dt TO TIME:SECONDS - t0.\n    IF dt \u0026gt; 0 {\n        if not in_deadband{\n\t\t\tSET I TO I \u002B P * dt.\n\t\t\tSET D TO (P - P0) / dt.\n\t\t\tIF Ki \u0026gt; 0 {\n                SET I TO MIN(1.0/Ki, MAX(-1.0/Ki, I)).\n            }\n\t\t\tSET thrott to MIN(1, MAX(0, thrott \u002B dthrott)).\n\t\t\t\t\t\n\t\t\tSET P0 TO P.\n\t\t\tSET t0 TO TIME:SECONDS.\n\t\t\tlog logline to output_log.\n\t\t}.\n    }.\n    WAIT 0.001.\n}.\nwait until ship:altitude\u0026gt;2000.\nset Thrott to 0.\nCOPYPATH(\u0022output_log\u0022, \u00220:/\u0022).\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-02-25T21:39:39Z\u0022 title=\u002202/25/2018 09:39  PM\u0022 data-short=\u00226 yr\u0022\u003EFebruary 25, 2018\u003C/time\u003E by RizzoTheRat\u003C/strong\u003E\n\u003C/span\u003E\n"}]}