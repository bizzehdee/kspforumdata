{"TopicId":160469,"ForumId":20,"TopicTitle":"Unity can take advantage of GPU Accelerated Physics with NVidia PhysX","CreatedByName":"/not/pol/","CreatedById":172548,"CreatedDateTime":"2017-05-10T22:01:54Z","PageNum":1,"Articles":[{"CreatedByName":"/not/pol/","CreatedById":172548,"CreatedDateTime":"2017-05-10T22:01:54Z","Content":"\n\u003Cp\u003E\nIs it possible for a mod to be made that can shift some of the physics over to the (heavily underutilized by unity games) GPU. Unity 5 Has support for it but i want to know if its possible for a mod to do it or if squad needs to add this function in for nvidia cards\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-05-10T22:05:35Z\u0022 title=\u002205/10/2017 10:05  PM\u0022 data-short=\u00227 yr\u0022\u003EMay 10, 2017\u003C/time\u003E by /not/pol/\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DrLicor","CreatedById":165712,"CreatedDateTime":"2017-05-11T00:06:58Z","Content":"\n\u003Cp\u003E\nI found an old topic about it:\n\u003C/p\u003E\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/94261-gpu-based-physics-calculation/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/33940-what-not-to-suggest/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\nBut personally, I don\u0027t think it will make a lot of a difference, like doubling your FPS. (when your rig is balanced. WIth an underpowered CPU and overpowered GPU, slight change it will)\u003Cbr\u003E\nGPU aren\u0027t made for the calculation bit of a game. I think you only get a difference of 10% to 25%...\u003Cbr\u003E\nAlso, from what I understand, it is more to help the GPU to render things; \u0022\u003Cem\u003EIt allows better simulation of things like smoke/fog, fire, water, cloth and bounding/falling/rolling objects giving games that support it a more detailed and realistic look and feel.\u003C/em\u003E\u0022 quote from\u00A0coozie7 at\u00A0www.tomshardware.co.u\u00A0\u003Cbr\u003E\u003Cbr\u003E\nI can be wrong, maybe some other guys here have knowledge of the whole thing. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-05-11T00:08:20Z\u0022 title=\u002205/11/2017 12:08  AM\u0022 data-short=\u00227 yr\u0022\u003EMay 11, 2017\u003C/time\u003E by DrLicor\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Streetwind","CreatedById":98962,"CreatedDateTime":"2017-05-11T08:26:44Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172548-notpol/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022172548\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172548-notpol/\u0022 rel=\u0022\u0022\u003E@/not/pol/\u003C/a\u003E You need to understand the difference between CPUs and GPUs.\n\u003C/p\u003E\n\u003Cp\u003E\nA CPU has a small number - usually 2 to 6 - of really capable, intelligent, super high clocked cores. It can do anything you throw at it, and it can do it better and faster than any other thing inside your computer, but it can only do a few things at once.\n\u003C/p\u003E\n\u003Cp\u003E\nMeanwhile, a GPU has a ridiculously large number - usually over a thousand - of extremely simple, dumb and moderately clocked cores. It can do only a limited number of specialized tasks, and it can\u0027t do them very fast. Complex tasks need to be emulated by breaking them down into simple tasks, which makes their execution even slower and less efficient. However, the GPU can do an extremely large number of these tasks at the same time.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first takeaway is that each of these two units is better suited for certain tasks. Give a single, very complex task to a GPU, and it will perform really badly, because it will struggle with the difficulty while 99% of its hardware lies unused. Give a ton of super simple tasks to a CPU, and it will perform really badly, because it has to go through them one after the other. In order to unlock the full potential of a CPU, you need to give it a task that\u0027s worthy of its abilities; in order to unlock the full potential of a GPU, you need to give it a massively parallel heap of simple tasks.\n\u003C/p\u003E\n\u003Cp\u003E\nSo if you want to accelerate the physics simulation of KSP via the GPU, you need to ask yourself two questions: one, is the task simple? And two, is the task massively parallel?\n\u003C/p\u003E\n\u003Cp\u003E\nRegarding question one: physics simulation is largely maths. Pure maths is a simple task. GPUs are good at pure maths. This means that the answer is positive.\n\u003C/p\u003E\n\u003Cp\u003E\nRegarding question two: physics simulation attempts to determine the action and reaction of every member of a system of actors. There are different kinds of actor systems: one in which each actor is affected by outside influences alone, and one in which the way each actor behaves is strongly dependant on the way all other actors behave. And example of the former is the simulation of smoke, cloth or liquid. Each particle or sub-area is influenced by things like gravity and wind, but do not care much about what other actors are doing. This means that each individual actor can have the vast majority of its math calculated individually. If you have ten thousand particles, you can do ten thousand times the same math in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP, however, is an example of the latter. Each actor (in this case, a part on a vessel) is strongly dependant on the other actors. Specifically, a part interacts directly with the part it is attached to, and the parts attached to itself; all of which also do this, causing a chain reaction of interdependence without a clear start or end. A part can begin oscillating around its own joints because a part way up or down the stack, which the part in question isn\u0027t even connected to, isn\u0027t properly strutted. Then, you have vessel-wide effects, such as: is this part shielded from aerodynamic drag, or is it exposed, based on the geometry of the vessel as a whole? And all of these facts can spontaneously change everytime the player clicks the mouse or hits the spacebar, or even as a result of an environmental event.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is why the physics simulation of a single ship in KSP is \u003Cem\u003Esingle-threaded\u003C/em\u003E. That is, only one core at a time takes care of one whole ship at a time, to ensure that the result of the physics simulation accounts for all of the parts and all of their interdependence \u003Cem\u003Eat the same time\u003C/em\u003E. If you decided to treat every part as an individual physics object, and have it calculated in an individual thread on an individual core, then that core would have to look a the state of the vessel from the last frame, and take all of the relevant interdependence parameters from there. It would then calculate its part\u0027s behavior based on this \u0027best guess\u0027 of the situation around it. But it uses past data, not current data, and therefore this only works fine if nothing changes on the vessel. However, between that last frame and the current one that\u0027s being calculated, the player could be starting a steering input, or throttling up, or even staging. The individually calculated part would be unable to account for the fact that a different part is suddenly exerting thrust or torque, or that the vessel just lost half its mass, or that the decoupler force is effecting a sudden attitude shift. Therefore the independent calculation of the part will introduce a tiny, imperceptible error into the finished frame. And then, the next frame starts, and each individual core must again make a best guess for the vessel\u0027s situation based on past data. But the past data now has an error in it, which causes false input conditions, which causes the output to be wrong again - likely more wrong than before. It gets worse with each frame, and it\u0027s really hard to recover from. So the answer to the question \u0022is it massively parallel\u0022 is negative. This is not something you can easily split up.\n\u003C/p\u003E\n\u003Cp\u003E\nPerhaps this problem could be solved by introducing management processes which track the vessel state and issue the correct input conditions to the calculation units on the GPU. But then, what did you gain? In order to avoid the CPU doing work, you just introduced a new job for the CPU to do, which is largely identical to the job you wanted it to avoid doing in the first place! Remember, math is easy. It\u0027s the tracking and consistency keeping that\u0027s the hard part. So you gain almost nothing by splitting off the easy part. However, the resulting code would be orders of magnitude more complex to troubleshoot, bugfix and maintain. Everytime the physics simulation did something it\u0027s not supposed to do, you\u0027d need to try and tell apart the case where it\u0027s actually doing something wrong, and the case where one parallel calculation unit among hundreds is simply not properly synched. These things look virtually identical. It\u0027s extremely troublesome to deal with, and certainly not worth the minor advantage that may or may not even manifest. Would you accept 10% more FPS for a less stable, less predictable physics engine combined with greatly increased development and bugfixing times? I\u0027d guess not!\n\u003C/p\u003E\n\u003Cp\u003E\nSo KSP does the next-best thing it can. It bundles the physics simulation of a single ship into a single thread that keeps track of itself in the best possible manner, and then gives that complex task to the unit which is most suited to complex tasks and runs at the highest individual clock speed: a CPU core.\n\u003C/p\u003E\n"},{"CreatedByName":"/not/pol/","CreatedById":172548,"CreatedDateTime":"2017-05-11T13:29:21Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223052840\u0022 data-ipsquote-contentid=\u0022160469\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221494491204\u0022 data-ipsquote-userid=\u002298962\u0022 data-ipsquote-username=\u0022Streetwind\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, Streetwind said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172548-notpol/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022172548\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172548-notpol/\u0022 rel=\u0022\u0022\u003E@/not/pol/\u003C/a\u003E You need to understand the difference between CPUs and GPUs.\n\u003C/p\u003E\n\u003Cp\u003E\nA CPU has a small number - usually 2 to 6 - of really capable, intelligent, super high clocked cores. It can do anything you throw at it, and it can do it better and faster than any other thing inside your computer, but it can only do a few things at once.\n\u003C/p\u003E\n\u003Cp\u003E\nMeanwhile, a GPU has a ridiculously large number - usually over a thousand - of extremely simple, dumb and moderately clocked cores. It can do only a limited number of specialized tasks, and it can\u0027t do them very fast. Complex tasks need to be emulated by breaking them down into simple tasks, which makes their execution even slower and less efficient. However, the GPU can do an extremely large number of these tasks at the same time.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first takeaway is that each of these two units is better suited for certain tasks. Give a single, very complex task to a GPU, and it will perform really badly, because it will struggle with the difficulty while 99% of its hardware lies unused. Give a ton of super simple tasks to a CPU, and it will perform really badly, because it has to go through them one after the other. In order to unlock the full potential of a CPU, you need to give it a task that\u0027s worthy of its abilities; in order to unlock the full potential of a GPU, you need to give it a massively parallel heap of simple tasks.\n\u003C/p\u003E\n\u003Cp\u003E\nSo if you want to accelerate the physics simulation of KSP via the GPU, you need to ask yourself two questions: one, is the task simple? And two, is the task massively parallel?\n\u003C/p\u003E\n\u003Cp\u003E\nRegarding question one: physics simulation is largely maths. Pure maths is a simple task. GPUs are good at pure maths. This means that the answer is positive.\n\u003C/p\u003E\n\u003Cp\u003E\nRegarding question two: physics simulation attempts to determine the action and reaction of every member of a system of actors. There are different kinds of actor systems: one in which each actor is affected by outside influences alone, and one in which the way each actor behaves is strongly dependant on the way all other actors behave. And example of the former is the simulation of smoke, cloth or liquid. Each particle or sub-area is influenced by things like gravity and wind, but do not care much about what other actors are doing. This means that each individual actor can have the vast majority of its math calculated individually. If you have ten thousand particles, you can do ten thousand times the same math in parallel.\n\u003C/p\u003E\n\u003Cp\u003E\nKSP, however, is an example of the latter. Each actor (in this case, a part on a vessel) is strongly dependant on the other actors. Specifically, a part interacts directly with the part it is attached to, and the parts attached to itself; all of which also do this, causing a chain reaction of interdependence without a clear start or end. A part can begin oscillating around its own joints because a part way up or down the stack, which the part in question isn\u0027t even connected to, isn\u0027t properly strutted. Then, you have vessel-wide effects, such as: is this part shielded from aerodynamic drag, or is it exposed, based on the geometry of the vessel as a whole? And all of these facts can spontaneously change everytime the player clicks the mouse or hits the spacebar, or even as a result of an environmental event.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is why the physics simulation of a single ship in KSP is \u003Cem\u003Esingle-threaded\u003C/em\u003E. That is, only one core at a time takes care of one whole ship at a time, to ensure that the result of the physics simulation accounts for all of the parts and all of their interdependence \u003Cem\u003Eat the same time\u003C/em\u003E. If you decided to treat every part as an individual physics object, and have it calculated in an individual thread on an individual core, then that core would have to look a the state of the vessel from the last frame, and take all of the relevant interdependence parameters from there. It would then calculate its part\u0027s behavior based on this \u0027best guess\u0027 of the situation around it. But it uses past data, not current data, and therefore this only works fine if nothing changes on the vessel. However, between that last frame and the current one that\u0027s being calculated, the player could be starting a steering input, or throttling up, or even staging. The individually calculated part would be unable to account for the fact that a different part is suddenly exerting thrust or torque, or that the vessel just lost half its mass, or that the decoupler force is effecting a sudden attitude shift. Therefore the independent calculation of the part will introduce a tiny, imperceptible error into the finished frame. And then, the next frame starts, and each individual core must again make a best guess for the vessel\u0027s situation based on past data. But the past data now has an error in it, which causes false input conditions, which causes the output to be wrong again - likely more wrong than before. It gets worse with each frame, and it\u0027s really hard to recover from. So the answer to the question \u0022is it massively parallel\u0022 is negative. This is not something you can easily split up.\n\u003C/p\u003E\n\u003Cp\u003E\nPerhaps this problem could be solved by introducing management processes which track the vessel state and issue the correct input conditions to the calculation units on the GPU. But then, what did you gain? In order to avoid the CPU doing work, you just introduced a new job for the CPU to do, which is largely identical to the job you wanted it to avoid doing in the first place! Remember, math is easy. It\u0027s the tracking and consistency keeping that\u0027s the hard part. So you gain almost nothing by splitting off the easy part. However, the resulting code would be orders of magnitude more complex to troubleshoot, bugfix and maintain. Everytime the physics simulation did something it\u0027s not supposed to do, you\u0027d need to try and tell apart the case where it\u0027s actually doing something wrong, and the case where one parallel calculation unit among hundreds is simply not properly synched. These things look virtually identical. It\u0027s extremely troublesome to deal with, and certainly not worth the minor advantage that may or may not even manifest. Would you accept 10% more FPS for a less stable, less predictable physics engine combined with greatly increased development and bugfixing times? I\u0027d guess not!\n\u003C/p\u003E\n\u003Cp\u003E\nSo KSP does the next-best thing it can. It bundles the physics simulation of a single ship into a single thread that keeps track of itself in the best possible manner, and then gives that complex task to the unit which is most suited to complex tasks and runs at the highest individual clock speed: a CPU core.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou missed the point. i was just asking if it was possible to implement PhsyX into KSP via a mod. since PhsyX is supported by Unity for physics acceleration. im going to take your answer as a no, and next time please put a TL;DR, although this is a good in depth explanation when someone asks why KSP Physics are single threaded.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-05-11T13:35:32Z\u0022 title=\u002205/11/2017 01:35  PM\u0022 data-short=\u00227 yr\u0022\u003EMay 11, 2017\u003C/time\u003E by /not/pol/\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"DrLicor","CreatedById":165712,"CreatedDateTime":"2017-05-11T13:33:24Z","Content":"\n\u003Cp\u003E\nNah he had it pretty right, showing us how ksp calculates singlethreated and that Phsyx won\u0027t make much of a difference. But indeed. The answer is no and with the great info \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/98962-streetwind/\u0026amp;do=hovercard\u0022 data-mentionid=\u002298962\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/98962-streetwind/\u0022 rel=\u0022\u0022\u003E@Streetwind\u003C/a\u003E gave, I don\u0027t think it will ever be. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Streetwind","CreatedById":98962,"CreatedDateTime":"2017-05-11T13:38:15Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223053017\u0022 data-ipsquote-contentid=\u0022160469\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221494509361\u0022 data-ipsquote-userid=\u0022172548\u0022 data-ipsquote-username=\u0022/not/pol/\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 minutes ago, /not/pol/ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\ni was just asking if it was possible to implement PhsyX into KSP via a mod.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo, you\u0027d have to rewrite the base executable and libraries entirely.\n\u003C/p\u003E\n"},{"CreatedByName":"/not/pol/","CreatedById":172548,"CreatedDateTime":"2017-05-11T13:39:53Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223053030\u0022 data-ipsquote-contentid=\u0022160469\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221494509895\u0022 data-ipsquote-userid=\u002298962\u0022 data-ipsquote-username=\u0022Streetwind\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 minute ago, Streetwind said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nNo, you\u0027d have to rewrite the base executable and libraries entirely.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nk.\n\u003C/p\u003E\n"},{"CreatedByName":"AG5BPilot","CreatedById":146044,"CreatedDateTime":"2017-05-11T18:37:36Z","Content":"\n\u003Cp\u003E\nGraphics cards (GPUs -- graphics processing units) are immensely powerful supercomputers on a chip. \u00A0But like other supercomputers, they achieve their processing power through massively parallel computations. \u00A0Saying \u0022Graphics cards are good for rendering but not much else\u0022 is not correct. \u00A0Any problem that is suitable for a supercomputer (i.e., weather forecasting) could be done on GPUs. \u00A0There are many real-world applications out there that take full advantage of the processing power of GPUs. \u00A0(Google \u0022CUDA\u0022 or \u0022OpenCL\u0022 for more information.)\n\u003C/p\u003E\n\u003Cp\u003E\nWhether or not KSP\u0027s physics computations could be done on a GPU depends on how easily the code lends itself to massive parallel processing. \u00A0I suspect that it is not\u00A0a good fit for running on a GPU. \u00A0This isn\u0027t because GPU\u0027s are dumb, or limited, but because the basic problem isn\u0027t one that can be efficiently split into thousands of parts.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-05-11T19:14:09Z","Content":"\n\u003Cp\u003E\nIt could be done. It would be a pain to do so. And it is not done in Unity. As far as I know the Physx bundled in Unity is not built with GPU accel enabled. If you have an article that says otherwise I would love to read it.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd it most likely would not improve perf all that much given how ksp vessel are made (Vessel are full of joint and that (AFAIK) prevents parallel processing. GPU physic does fine with many distinct object)\n\u003C/p\u003E\n"},{"CreatedByName":"Alshain","CreatedById":110959,"CreatedDateTime":"2017-05-12T01:26:35Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223053534\u0022 data-ipsquote-contentid=\u0022160469\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221494530049\u0022 data-ipsquote-userid=\u002257146\u0022 data-ipsquote-username=\u0022sarbian\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n6 hours ago, sarbian said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIt could be done. It would be a pain to do so. And it is not done in Unity. As far as I know the Physx bundled in Unity is not built with GPU accel enabled. If you have an article that says otherwise I would love to read it.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd it most likely would not improve perf all that much given how ksp vessel are made (Vessel are full of joint and that (AFAIK) prevents parallel processing. GPU physic does fine with many distinct object)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nUnity 5 does have GPU Accelerated physics on CUDA but it is very limited.\u00A0 Cloth rendering only AFAIK.\u00A0 So they could make the flag at \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E more realistic, but that\u0027s about it.\n\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2017-05-12T09:59:41Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223053927\u0022 data-ipsquote-contentid=\u0022160469\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221494552395\u0022 data-ipsquote-userid=\u0022110959\u0022 data-ipsquote-username=\u0022Alshain\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, Alshain said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nUnity 5 does have GPU Accelerated physics on CUDA but it is very limited.\u00A0 Cloth rendering only AFAIK.\u00A0 So they could make the flag at \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E more realistic, but that\u0027s about it.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nPhysx has flags to push more of the physics in the GPU and those are not enabled\u00A0\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nEdit : on 3.4, and Unity is still on 3.3...\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-05-12T10:20:01Z\u0022 title=\u002205/12/2017 10:20  AM\u0022 data-short=\u00227 yr\u0022\u003EMay 12, 2017\u003C/time\u003E by sarbian\u003C/strong\u003E\n\u003C/span\u003E\n"}]}