{"TopicId":164025,"ForumId":20,"TopicTitle":"(Request) A kOS VTOL auto hover script","CreatedByName":"Vaxuality","CreatedById":180344,"CreatedDateTime":"2017-08-03T14:29:41Z","PageNum":1,"Articles":[{"CreatedByName":"Vaxuality","CreatedById":180344,"CreatedDateTime":"2017-08-03T14:29:41Z","Content":"\n\u003Cp\u003E\nGreetings,\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve kind of been wanting to make a \u003Cabbr title=\u0022Vertical Take-Off and Landing\u0022\u003EVTOL\u003C/abbr\u003E hover script with kOS, but after several hours of attempting, there were no good results.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027d like to ask if anyone has an already made script that will do the trick, I am not requesting someone to make it feom scratch, just if anyone already has one.\n\u003C/p\u003E\n\u003Cp\u003E\nThanks.\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-04T23:41:16Z","Content":"\n\u003Cp\u003E\nI haven\u0027t gotten into KOS yet, but have done this with KRPC and might be able to help with the concept. \u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI used a PID loop (and I believe that KOS has a generic \u0027hardware\u0027 PID available for you to use?). \u00A0 To hover, I used a setpoint of 0 and input vertical velocity as my measurement variable, and the output was fed into the throttle. \u00A0 You could also probably use the altitude you want to hover at as the setpoint and then measure the actual altitude, if you were more worried about that than about vertical velocity. \u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Benjamin Kerman","CreatedById":172792,"CreatedDateTime":"2017-08-05T22:26:10Z","Content":"\n\u003Cp\u003E\nNever used KOS, but programming experience says something like this:\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nStart\nif vertSpeed \u0026gt; 0, decrease throttle by 1\nif vertSpeed \u0026lt; 0, increase throttle by 1\nif forwardSpeed\n...\u003C/pre\u003E\n\u003Cp\u003E\nKinda like that.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"artwhaley","CreatedById":118388,"CreatedDateTime":"2017-08-05T23:33:44Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172792-benjamin-kerman/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022172792\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/172792-benjamin-kerman/\u0022 rel=\u0022\u0022\u003E@Benjamin Kerman\u003C/a\u003E\u00A0\u00A0- that was my first attempt as well when I was trying to limit dynamic pressure on an ascent script.\u00A0\u00A0I found it over corrected a lot! \u00A0 Switching even to a proportional control helps, if you\u0027re not ready to get into a full PID controller. \u00A0A pseudocode example might be =\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EkP \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u00A0             \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E# sorta arbitrary value for the proportional gain - tune this until you \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\t\t      \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E# get the balance you want between strong reaction/over correction\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \ntarget_speed \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E      \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E#For a hover - could be not zero for a controlled climb or descent\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\nLOOP INDEFINITELY\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u00A0 \u00A0 error \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E target_speed \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E vertical_speed        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E# calculate the error                 \u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u00A0 \u00A0 correction \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E error \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E kP                      \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E# multiply error by the gain\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u00A0 \u00A0 set throttle \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E throttle \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E correction         \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E# apply the correction to the throttle value.   \u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThat way we instantly react to the value that we\u0027re measuring in a way that is proportional to the error. \u00A0If we\u0027re a little high, a slight negative correction gets made. \u00A0If we\u0027re way low, a large positive correction gets made. \u00A0And when we cross the correct value, we don\u0027t have to wait a few cycles for the value to incrementally return to zero.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nTo improve that to a PI controller, all we have to do is this -\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EkP = .2 \u00A0             # sorta arbitrary value for the proportional gain - tune this until you \n\t\t\t\t      # get the balance you want between strong reaction/over correction\u0027\n\nI =  0                 # The integral term. A sort of memory for how long we\u0027ve had an error in the vertical velocity\nkI = .1               # gain for the integral.\n\nMaxI = 10              #Max and minimum I values to prevent \u0027windup.\u0027 \nMinI = -10\n  \ntarget_speed = 0      #For a hover - could be not zero for a controlled climb or descent\n\nLOOP INDEFINITELY:\n\u00A0 \u00A0 error = target_speed - vertical_speed        # calculate the error\n\t\n\tI = I \u002B error                               #Integrate the errors\n\tif I \u0026gt; MaxI then I = MaxI\n\tif I \u0026lt; MinI then I = MinI\n\n\u00A0 \u00A0 correction = (error * kP) \u002B (I * kI)                      # multiply error and integral by gains\n\u00A0 \u00A0 set throttle = throttle \u002B correction         # apply the correction to the throttle value.   \u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThat\u0027s 13 lines of code for a fairly adaptable controller routine. \u00A0What we added with the I - \u00A0 we keep a sum of all the errors we\u0027ve measured... and multiply that times the kI gain. \u00A0What this does is pretty intuitive once you think about it... \u00A0let\u0027s give an example. \u00A0\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWith the code above, say we\u0027re 1 m/s too high - as in we\u0027re drifting upward at 1 m/s. \u00A0 \u00A0 In \u00A0the first cycle through the loop:\n\u003C/p\u003E\n\u003Cp\u003E\nerror = -1,\n\u003C/p\u003E\n\u003Cp\u003E\nI = 0 \u002B -1\n\u003C/p\u003E\n\u003Cp\u003E\nSo the correction applied to the throttle will be (-1 * .2) \u002B (-1 * .1) \u00A0 \u00A0 \u00A0or \u00A0-.3\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIf that isnt\u0027 enough to fix it, and we\u0027re STILL climbing at 1 m/s in the next cycle, NOW I = -1 \u002B -1. \u00A0 So this time through the correction is (-1 *.2) \u002B (-2 * .1) \u00A0 or -.4.\n\u003C/p\u003E\n\u003Cp\u003E\nThe longer we\u0027re wrong, the harder it will \u0027lean\u0027 on the throttle to bring us back into balance. \u00A0This way we get small corrections for quick flutters, and stronger corrections when something goes way wonky and stays that way.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-08-05T23:34:33Z\u0022 title=\u002208/05/2017 11:34  PM\u0022 data-short=\u00226 yr\u0022\u003EAugust 5, 2017\u003C/time\u003E by artwhaley\u003C/strong\u003E\n\u003C/span\u003E\n"}]}