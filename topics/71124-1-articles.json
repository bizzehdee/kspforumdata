{"TopicId":71124,"ForumId":16,"TopicTitle":"Math- Calculating delta V for an interplanetary transfer","CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-01T11:42:56Z","PageNum":1,"Articles":[{"CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-01T11:42:56Z","Content":"\n\u003Cp\u003EI\u0027m having some difficulty figuring out the math for transferring from orbit around one planet/moon to the orbit around another. I know about all the charts that provide the approximate values, but I\u0027d like to know the mathematical equations necessary to calculate the exact values. \u003C/p\u003E\u003Cp\u003ESo far, using the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Vis-viva_equation\u0022 rel=\u0022external nofollow\u0022\u003EVis-viva equation\u003C/a\u003E, along with Hohmann transfer calculations, I\u0027ve managed to get accurate values from the surface to orbit around a body at a specific altitude, with or without atmosphere, I can calculate orbital velocity at a specific altitude, I can calculate the speed I need to be traveling when I leave the SOI to reach another planet/moon, and I know the speed I will be traveling when I enter the SOI of the target body. \u003Cem\u003EWhat I have not been able to calculate is exactly how much delta V I\u0027ll have to expend at a given periapsis altitude to escape at the desired velocity.\u003C/em\u003E \u003C/p\u003E\u003Cp\u003ERe-arranging the Vis-viva equation, with \u003Cem\u003Ea\u003C/em\u003E as the semi-major axis, I get:\u003C/p\u003E\u003Cp\u003Ea= 1/((2/r)-(v^2/u)). \u003C/p\u003E\u003Cp\u003EBut this is giving me incorrect values for \u003Cem\u003Ea\u003C/em\u003E from what I know to be the correct answer. Anybody know the math and willing to walk me through it here? Thanks!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-05T06:14:28Z\u0022 title=\u002205/05/2014 06:14  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 5, 2014\u003C/time\u003E by Amagi82\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Supernovy","CreatedById":29617,"CreatedDateTime":"2014-05-01T11:51:04Z","Content":"\n\u003Cp\u003EIf I\u0027m understanding the question correctly, this should help: \u003Ca href=\u0022https://en.wikipedia.org/wiki/Hyperbolic_trajectory#Hyperbolic_excess_velocity\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Hyperbolic_trajectory#Hyperbolic_excess_velocity\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ESetting the vis-viva SMA to the same as the one given by that should give you the correct periapsis velocity. The \u00C3\u017D\u00E2\u20AC\u009Dv will be this velocity minus circular orbit velocity at the periapsis altitude.\u003C/p\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-01T22:26:15Z","Content":"\n\u003Cp\u003ELet\u0027s go from planet A to planet B, where planet B orbits farther from the sun S.\u003C/p\u003E\u003Cp\u003ELet small first letters denote the ship, and capitol first letters denote the planets:\u003C/p\u003E\u003Cp\u003ErA = the ship\u0027s radius around planet A\u003C/p\u003E\u003Cp\u003ERA = the planet\u0027s radius around the sun S\u003C/p\u003E\u003Cp\u003EvA = the ship\u0027s velocity relative to planet A\u003C/p\u003E\u003Cp\u003EVA = planet A\u0027s velocity relative to sun S = sqrt(muS / RA)\u003C/p\u003E\u003Cp\u003EAdditionally, let sA be the radius of the SOI of planet A.\u003C/p\u003E\u003Cp\u003E1) Start at circular orbit around A:\u003C/p\u003E\u003Cp\u003EvA^2 = muA / rA\u003C/p\u003E\u003Cp\u003E2) Burn dv1 up to velocity v1. We will determine dv1 and thus v1 later.\u003C/p\u003E\u003Cp\u003Ev1^2 = (vA \u002B dv1)^2 = muA (2/rA - 1/aA)\u003C/p\u003E\u003Cp\u003Eor\u003C/p\u003E\u003Cp\u003E1/aA = 2/rA - v1^2 / muA\u003C/p\u003E\u003Cp\u003E3) Just before you leave planet A\u0027s SOI, you have slowed down to:\u003C/p\u003E\u003Cp\u003Ev2^2 = muA (2/sA - 1/aA)\u003C/p\u003E\u003Cp\u003Ev2^2 = v1^2 - muA (2/rA - 2/sA)\u003C/p\u003E\u003Cp\u003E4) Once you exit A\u0027s SOI, (if you exit prograde) you gain planet A\u0027s orbital velocity VA:\u003C/p\u003E\u003Cp\u003Ev3 = v2 \u002B VA\u003C/p\u003E\u003Cp\u003E5) Now pick your velocity v3 outside the SOI so that you intercept your target half way around the sun:\u003C/p\u003E\u003Cp\u003ESo you are on an elliptical orbit around the sun with semi-major axis (RA \u002B RB)/2, with velocity v3 at RA:\u003C/p\u003E\u003Cp\u003Ev3^2 = muS (2/RA - 2/(RA\u002BRB))\u003C/p\u003E\u003Cp\u003E6) You can solve for dv1 now, your transfer burn from planet A.\u003C/p\u003E\u003Cp\u003EFind v3.\u003C/p\u003E\u003Cp\u003ESolve for v2: v2 = v3 - VA\u003C/p\u003E\u003Cp\u003ESolve for v1. v1 = sqrt(v2^2 \u002B muA (2/rA - 2/sA)\u003C/p\u003E\u003Cp\u003Edv1 = v1 - vA\u003C/p\u003E\u003Cp\u003E7) Now do the reverse at planet B. Solve for the circularization burn at planet B.\u003C/p\u003E\u003Cp\u003EBefore entering the SOI at planet B you are going v4:\u003C/p\u003E\u003Cp\u003Ev4^2 = muS (2/RB - 2/(RA\u002BRB))\u003C/p\u003E\u003Cp\u003E8) Entering the SOI, you lose B\u0027s orbital velocity:\u003C/p\u003E\u003Cp\u003Ev5 = v4 - VB\u003C/p\u003E\u003Cp\u003E9) Inside the SOI, find aB, the semi-major axis of your hyperbolic orbit of planet B:\u003C/p\u003E\u003Cp\u003Ev5^2 = muB (2/sB - 1/aB)\u003C/p\u003E\u003Cp\u003E10) At planet B periapsis, use 1/aB to find your velocity:\u003C/p\u003E\u003Cp\u003Ev6^2 = muB (2/rB - 1/aB) = v5^2 \u002B muB (2/rB - 2/sB)\u003C/p\u003E\u003Cp\u003E11) Circularize at B periapsis:\u003C/p\u003E\u003Cp\u003EvB^2 = muB / rB\u003C/p\u003E\u003Cp\u003EdvB = v6 - vB\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-01T22:36:55Z\u0022 title=\u002205/01/2014 10:36  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 1, 2014\u003C/time\u003E by Yasmy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dkmdlb","CreatedById":70275,"CreatedDateTime":"2014-05-01T22:54:56Z","Content":"\n\u003Cp\u003EYou ninja\u0027d me. I was just about to post the very same thing....\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003E.\u003C/p\u003E\u003Cp\u003EI swear.\u003C/p\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-02T05:18:13Z","Content":"\n\u003Cp\u003ENinja\u0027d again, Dkmdlb!\u003C/p\u003E\u003Cp\u003EI\u0027ll simplify the above so people can plug in numbers:\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00E2\u20ACv\u003Csub\u003E1\u003C/sub\u003E = sqrt( (\u00C3\u017D\u00C2\u00BC\u003Csub\u003ES\u003C/sub\u003E/R\u003Csub\u003EA\u003C/sub\u003E) (sqrt(2R\u003Csub\u003EB\u003C/sub\u003E/(R\u003Csub\u003EA\u003C/sub\u003E\u002BR\u003Csub\u003EB\u003C/sub\u003E)) - 1)\u003Csup\u003E2\u003C/sup\u003E \u002B \u00C3\u017D\u00C2\u00BC\u003Csub\u003EA\u003C/sub\u003E (2/r\u003Csub\u003EA\u003C/sub\u003E - 2/s\u003Csub\u003EA\u003C/sub\u003E) ) - sqrt(\u00C3\u017D\u00C2\u00BC\u003Csub\u003EA\u003C/sub\u003E/r\u003Csub\u003EA\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00E2\u20ACv\u003Csub\u003E2\u003C/sub\u003E = sqrt( (\u00C3\u017D\u00C2\u00BC\u003Csub\u003ES\u003C/sub\u003E/R\u003Csub\u003EB\u003C/sub\u003E) (sqrt(2R\u003Csub\u003EA\u003C/sub\u003E/(R\u003Csub\u003EA\u003C/sub\u003E\u002BR\u003Csub\u003EB\u003C/sub\u003E)) - 1)\u003Csup\u003E2\u003C/sup\u003E \u002B \u00C3\u017D\u00C2\u00BC\u003Csub\u003EB\u003C/sub\u003E (2/r\u003Csub\u003EB\u003C/sub\u003E - 2/s\u003Csub\u003EB\u003C/sub\u003E) ) - sqrt(\u00C3\u017D\u00C2\u00BC\u003Csub\u003EB\u003C/sub\u003E/r\u003Csub\u003EB\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003EPleasingly symmetric, as it should be. What it means is that you have to spend the Hohmann transfer \u00C3\u017D\u00E2\u20ACv plus the planetary escape \u00C3\u017D\u00E2\u20ACv burn minus your orbital velocity around the planet at each planet.\u003C/p\u003E\u003Cp\u003EN.B.: I\u0027ve edited the above to change sqrt(2/r\u003Csub\u003EA\u003C/sub\u003E - 2/s\u003Csub\u003EA\u003C/sub\u003E) to (2/r\u003Csub\u003EA\u003C/sub\u003E - 2/s\u003Csub\u003EA\u003C/sub\u003E). Likewise for the second equation.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-05T16:55:12Z\u0022 title=\u002205/05/2014 04:55  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 5, 2014\u003C/time\u003E by Yasmy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-02T05:44:45Z","Content":"\n\u003Cp\u003EThe above applies to planets in circular or nearly circular orbits.\u003C/p\u003E\u003Cp\u003EIt also applies to transfers between two moons orbiting the same planet.\u003C/p\u003E\u003Cp\u003EAnd, of course, if body B has an atmosphere, you can avoid paying most of \u00C3\u017D\u00E2\u20ACv\u003Csub\u003E2\u003C/sub\u003E.\u003C/p\u003E\n"},{"CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-05T11:26:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Yasmy\u0022 data-cite=\u0022Yasmy\u0022\u003E\u003Cdiv\u003ENinja\u0027d again, Dkmdlb!\u003Cp\u003EI\u0027ll simplify the above so people can plug in numbers:\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00E2\u20ACv\u003Csub\u003E1\u003C/sub\u003E = sqrt( (\u00C3\u017D\u00C2\u00BC\u003Csub\u003ES\u003C/sub\u003E/R\u003Csub\u003EA\u003C/sub\u003E) (sqrt(2R\u003Csub\u003EB\u003C/sub\u003E/(R\u003Csub\u003EA\u003C/sub\u003E\u002BR\u003Csub\u003EB\u003C/sub\u003E)) - 1)\u003Csup\u003E2\u003C/sup\u003E \u002B \u00C3\u017D\u00C2\u00BC\u003Csub\u003EA\u003C/sub\u003E sqrt(2/r\u003Csub\u003EA\u003C/sub\u003E - 2/s\u003Csub\u003EA\u003C/sub\u003E) ) - sqrt(\u00C3\u017D\u00C2\u00BC\u003Csub\u003EA\u003C/sub\u003E/r\u003Csub\u003EA\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00E2\u20ACv\u003Csub\u003E2\u003C/sub\u003E = sqrt( (\u00C3\u017D\u00C2\u00BC\u003Csub\u003ES\u003C/sub\u003E/R\u003Csub\u003EB\u003C/sub\u003E) (sqrt(2R\u003Csub\u003EA\u003C/sub\u003E/(R\u003Csub\u003EA\u003C/sub\u003E\u002BR\u003Csub\u003EB\u003C/sub\u003E)) - 1)\u003Csup\u003E2\u003C/sup\u003E \u002B \u00C3\u017D\u00C2\u00BC\u003Csub\u003EB\u003C/sub\u003E sqrt(2/r\u003Csub\u003EB\u003C/sub\u003E - 2/s\u003Csub\u003EB\u003C/sub\u003E) ) - sqrt(\u00C3\u017D\u00C2\u00BC\u003Csub\u003EB\u003C/sub\u003E/r\u003Csub\u003EB\u003C/sub\u003E)\u003C/p\u003E\u003Cp\u003EPleasingly symmetric, as it should be. What it means is that you have to spend the Hohmann transfer \u00C3\u017D\u00E2\u20ACv plus the planetary escape \u00C3\u017D\u00E2\u20ACv burn minus your orbital velocity around the planet at each planet.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPlugging in values for a Kerbin to Moho trip, I\u0027m getting the following (wrong) value for \u00C3\u017D\u00E2\u20ACv\u003Csub\u003E1\u003C/sub\u003E.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www.wolframalpha.com/input/?i=%CE%94v1\u002B%3D\u002Bsqrt%28\u002B1.17e18%2F13599840256%29\u002B%28sqrt%282*5263138304%2F%2813599840256%2B5263138304%29%29\u002B-\u002B1%29\u002B%2B\u002B3.53e12\u002Bsqrt%282%2F700000\u002B-\u002B2%2F84159286%29\u002B\u002B-\u002Bsqrt%283.53e12%2F700000%29\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.wolframalpha.com/input/?i=%CE%94v1\u002B%3D\u002Bsqrt%28\u002B1.17e18%2F13599840256%29\u002B%28sqrt%282*5263138304%2F%2813599840256%2B5263138304%29%29\u002B-\u002B1%29\u002B%2B\u002B3.53e12\u002Bsqrt%282%2F700000\u002B-\u002B2%2F84159286%29\u002B\u002B-\u002Bsqrt%283.53e12%2F700000%29\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-05T12:02:43Z\u0022 title=\u002205/05/2014 12:02  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 5, 2014\u003C/time\u003E by Amagi82\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-05T17:09:16Z","Content":"\n\u003Cp\u003E1) See above where I\u0027ve fixed a mistake. That second sqrt() shouldn\u0027t have been there. Sorry about that, and thank you for checking my math. My initial post on how to derive the delta-v was correct (if somewhat simple) though.\u003C/p\u003E\u003Cp\u003E2) Careful how you enter into wolframalpha. You made a couple mistakes. Here ya go:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www.wolframalpha.com/input/?i=sqrt%28\u002B1.17e18%2F13599840256\u002B%28sqrt%282*5263138304%2F%2813599840256%2B5263138304%29%29\u002B-\u002B1%29%5E2\u002B%2B\u002B3.53e12\u002B%282%2F700000\u002B-\u002B2%2F84159286%29%29\u002B\u002B-\u002Bsqrt%283.53e12%2F700000%29\u0022 rel=\u0022external nofollow\u0022\u003EIdealized Kerbin -\u0026gt; Moho transfer burn\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EAnd let me know if you have any more problems.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-05T17:17:08Z\u0022 title=\u002205/05/2014 05:17  PM\u0022 data-short=\u002210 yr\u0022\u003EMay 5, 2014\u003C/time\u003E by Yasmy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LethalDose","CreatedById":92657,"CreatedDateTime":"2014-05-05T18:21:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Yasmy\u0022 data-cite=\u0022Yasmy\u0022\u003E\u003Cdiv\u003E1) See above where I\u0027ve fixed a mistake. That second sqrt() shouldn\u0027t have been there. Sorry about that, and thank you for checking my math. My initial post on how to derive the delta-v was correct (if somewhat simple) though.\u003Cp\u003E2) Careful how you enter into wolframalpha. You made a couple mistakes. Here ya go:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www.wolframalpha.com/input/?i=sqrt%28\u002B1.17e18%2F13599840256\u002B%28sqrt%282*5263138304%2F%2813599840256%2B5263138304%29%29\u002B-\u002B1%29%5E2\u002B%2B\u002B3.53e12\u002B%282%2F700000\u002B-\u002B2%2F84159286%29%29\u002B\u002B-\u002Bsqrt%283.53e12%2F700000%29\u0022 rel=\u0022external nofollow\u0022\u003EIdealized Kerbin -\u0026gt; Moho transfer burn\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EAnd let me know if you have any more problems.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat assumptions are being made for the \u0022idealization\u0022 of the Moho burn? No inclination change and intercepting Moho at it\u0027s apoapsis?\u003C/p\u003E\u003Cp\u003EAlso, don\u0027t forget you\u0027ll need ~ 2 - 2.5 km/s dV to slow down at your interception.\u003C/p\u003E\n"},{"CreatedByName":"Yasmy","CreatedById":79995,"CreatedDateTime":"2014-05-05T20:21:54Z","Content":"\n\u003Cp\u003EWe\u0027re not forgetting the insertion burn. That is \u00C3\u017D\u00E2\u20ACv\u003Csub\u003E2\u003C/sub\u003E above. We\u0027re just debugging the transfer burn calculation at the moment.\u003C/p\u003E\u003Cp\u003EJust for kicks, the above formula for the insertion burn at Moho from Kerbin gives about \u003Ca href=\u0022http://www.wolframalpha.com/input/?i=sqrt%28\u002B1.17e18%2F5263138304\u002B%28sqrt%282*13599840256%2F%2813599840256%2B5263138304%29%29\u002B-\u002B1%29%5E2\u002B%2B\u002B1.6860938e11\u002B%282%2F275000\u002B-\u002B2%2F9646663%29%29\u002B\u002B-\u002Bsqrt%281.6860938e11%2F275000%29\u0022 rel=\u0022external nofollow\u0022\u003E2.4k m/s\u003C/a\u003E for injection to a 25km circular Moho orbit.\u003C/p\u003E\u003Cp\u003EAssumptions/idealizations/approximations:\u003C/p\u003E\u003Cp\u003E1) circular orbits\u003C/p\u003E\u003Cp\u003E2) zero inclination orbits\u003C/p\u003E\u003Cp\u003E3) spacecraft exits/enters planet at the planet\u0027s orbital radius around Kerbol, rather than \u002B/- the impact parameter (the distance between your SOI exit line and the planet prograde line)\u003C/p\u003E\u003Cp\u003ESo, YMMV, by a lot of dV. This was just a quick lesson on how to compute combined escape \u002B Hohmann transfer \u002B insertion.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-05-06T01:25:45Z\u0022 title=\u002205/06/2014 01:25  AM\u0022 data-short=\u002210 yr\u0022\u003EMay 6, 2014\u003C/time\u003E by Yasmy\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Amagi82","CreatedById":43131,"CreatedDateTime":"2014-05-06T10:23:03Z","Content":"\n\u003Cp\u003EThank you very much, Yasmy. I\u0027ve been working on an android app, and the equation is working properly now. For anyone else working with Java programs, the following may be helpful:\u003C/p\u003E\u003Cp\u003Estatic double gravParameter[] = { 1.1723328e18, 1.6860938e11, 8.1717302e12, 8289449.8, 3.5316e12, 6.5138398e10, 1.7658e9, 3.0136321e11,\u003C/p\u003E\u003Cp\u003E 1.8568369e10, 2.1484489e10, 2.8252800e14, 1.962e12, 2.074815e11, 2.82528e12, 2.4868349e9, 7.2170208e8, 7.4410815e10 };\u003C/p\u003E\u003Cp\u003E static double scaleHeight[] = { 0, 0, 7000, 0, 5000, 0, 0, 3000, 0, 0, 10000, 4000, 0, 0, 0, 0, 0 }; // atmospheric scale height\u003C/p\u003E\u003Cp\u003E static double surfacePressure[] = { 0, 0, 5, 0, 1, 0, 0, 0.2, 0, 0, 15, 0.8, 0, 0, 0, 0, 0 }; // surface pressure in atmospheres\u003C/p\u003E\u003Cp\u003E static double equatorialRadius[] = { 0, 250000, 700000, 13000, 600000, 200000, 60000, 320000, 130000, 138000, 6000000, 500000, 300000,\u003C/p\u003E\u003Cp\u003E 600000, 65000, 44000, 210000 };\u003C/p\u003E\u003Cp\u003E static double siderealRotationVelocity[] = { 0, 1.2982, 54.636, 2.8909, 174.53, 9.0416, 9.3315, 30.688, 12.467, 24.916, 1047.2, 59.297,\u003C/p\u003E\u003Cp\u003E 17.789, 17.789, 0.75005, 0.30653, 1.2982 };\u003C/p\u003E\u003Cp\u003E static double semiMajorAxis[] = { 0, 5263138304L, 9832684544L, 31500000, 13599840256L, 12000000, 47000000, 20726155264L, 3200000,\u003C/p\u003E\u003Cp\u003E 40839348203L, 68773560320L, 27184000, 43152000, 68500000, 128500000, 179890000, 90118820000L };\u003C/p\u003E\u003Cp\u003E static double eccentricity[] = { 0, 0.2, 0.01, 0.55, 0, 0, 0, 0.05, 0.03, 0.14, 0.05, 0, 0, 0, 0.24, 0.17, 0.26 };\u003C/p\u003E\u003Cp\u003E static double sphereOfInfluence[] = { 0, 9646663, 85109365, 126123, 84159286, 2429559, 2429559, 47921949, 1049599, 32832840,\u003C/p\u003E\u003Cp\u003E 2455985200L, 3723646, 2406401, 10856518, 1221061, 1042139, 119100000 };\u003C/p\u003E\u003Cp\u003E static int minOrbit[] = { 0, 6817, 96708, 6400, 69078, 7061, 5725, 41447, 12725, 5670, 138155, 55262, 7976, 12695, 21758, 5590, 3874 };\u003C/p\u003E\u003Cp\u003E static int highPoint[] = { 0, 6817, 7526, 6400, 6761, 7061, 5725, 8264, 12725, 5670, 0, 5600, 7976, 12695, 21758, 5590, 3874 };\u003C/p\u003E\u003Cp\u003E // This method calculates the exact deltaV required to get to orbit around any body in KSP\u003C/p\u003E\u003Cp\u003E public static double getToOrbit(int planet, double takeOffAltitude, double orbitClearance) {\u003C/p\u003E\u003Cp\u003E double r1 = equatorialRadius[planet] \u002B takeOffAltitude;\u003C/p\u003E\u003Cp\u003E double r2 = equatorialRadius[planet] \u002B minOrbit[planet] \u002B orbitClearance;\u003C/p\u003E\u003Cp\u003E double gravity = (gravParameter[planet]) / (r1 * r1); // force of gravity at a given altitude\u003C/p\u003E\u003Cp\u003E double pressure = surfacePressure[planet] * Math.exp(-takeOffAltitude / scaleHeight[planet]); // pressure at a given altitude\u003C/p\u003E\u003Cp\u003E double atmosphericDensity = 1.2230948554874 * pressure;\u003C/p\u003E\u003Cp\u003E double terminalVelocity = Math.sqrt((1250 * gravParameter[planet]) / (r1 * r1 * atmosphericDensity));\u003C/p\u003E\u003Cp\u003E double deltaV;\u003C/p\u003E\u003Cp\u003E // Includes calculations for atmospheric losses only when atmosphere is present\u003C/p\u003E\u003Cp\u003E if (surfacePressure[planet] != 0) {\u003C/p\u003E\u003Cp\u003E deltaV = (Math.sqrt(gravParameter[planet] / r1) * Math.sqrt((2 * r2) / (r1 \u002B r2))\u003C/p\u003E\u003Cp\u003E \u002B (Math.sqrt(gravParameter[planet] / r2) * (1 - (Math.sqrt((2 * r1) / (r1 \u002B r2))))) - siderealRotationVelocity[planet])\u003C/p\u003E\u003Cp\u003E \u002B ((4 * gravity * scaleHeight[planet]) / terminalVelocity);\u003C/p\u003E\u003Cp\u003E } else {\u003C/p\u003E\u003Cp\u003E deltaV = Math.sqrt(gravParameter[planet] / r1) * Math.sqrt((2 * r2) / (r1 \u002B r2))\u003C/p\u003E\u003Cp\u003E \u002B (Math.sqrt(gravParameter[planet] / r2) * (1 - (Math.sqrt((2 * r1) / (r1 \u002B r2))))) - siderealRotationVelocity[planet];\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E // Returns deltaV rounded to the nearest tenth.\u003C/p\u003E\u003Cp\u003E return Math.round(deltaV * 10.0) / 10.0;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E // Minimum delta V from orbit around planetStart necessary to intersect planetEnd\u0027s orbit, not including inclination changes\u003C/p\u003E\u003Cp\u003E public static double getDeltaVInjectionBurn(int planetStart, int planetEnd, double altitudeStart) {\u003C/p\u003E\u003Cp\u003E return Math.sqrt((gravParameter[0] / semiMajorAxis[planetStart])\u003C/p\u003E\u003Cp\u003E * Math.pow(Math.sqrt((2 * semiMajorAxis[planetEnd] / (semiMajorAxis[planetStart] \u002B semiMajorAxis[planetEnd]))) - 1, 2)\u003C/p\u003E\u003Cp\u003E \u002B gravParameter[planetStart]\u003C/p\u003E\u003Cp\u003E * ((2 / (equatorialRadius[planetStart] \u002B altitudeStart)) - (2 / sphereOfInfluence[planetStart])))\u003C/p\u003E\u003Cp\u003E - Math.sqrt(gravParameter[planetStart] / (equatorialRadius[planetStart] \u002B altitudeStart));\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E // Minimum delta V necessary for capture and circularization at planetEnd, assuming no aerobraking\u003C/p\u003E\u003Cp\u003E public static double getDeltaVInsertionBurn(int planetStart, int planetEnd, double altitudeEnd) {\u003C/p\u003E\u003Cp\u003E return Math.sqrt((gravParameter[0] / semiMajorAxis[planetEnd])\u003C/p\u003E\u003Cp\u003E * Math.pow(Math.sqrt((2 * semiMajorAxis[planetStart] / (semiMajorAxis[planetStart] \u002B semiMajorAxis[planetEnd]))) - 1, 2)\u003C/p\u003E\u003Cp\u003E \u002B gravParameter[planetEnd] * ((2 / (equatorialRadius[planetEnd] \u002B altitudeEnd)) - (2 / sphereOfInfluence[planetEnd])))\u003C/p\u003E\u003Cp\u003E - Math.sqrt(gravParameter[planetEnd] / (equatorialRadius[planetEnd] \u002B altitudeEnd));\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\n"}]}