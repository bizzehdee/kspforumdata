{"TopicId":18728,"ForumId":16,"TopicTitle":"Get Celestial Body Orbital (etc.) Elements from KSP itself?","CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-06T13:38:47Z","PageNum":1,"Articles":[{"CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-06T13:38:47Z","Content":"\n\u003Cp\u003EWhile we have the Wiki, I\u0027d like to know where and in what format KSP stores, or otherwise how to extract or display or save in some readable fashion, the various orbital and planetary elements KSP stores directly from the game. I\u0027ve used the wiki, but after a little confusion over a tidally locked moon whose X rotation period doesn\u0027t equal its Y orbital period, I\u0027d rather see what I can pull directly out of the game. I\u0027d like to be able to calculate orbits for Molniya constellations and other eccentric orbits which require the sidereal rotation period of the body, as well as plug in accurate values for orbital transfer math (once I learn said math).\u003C/p\u003E\n"},{"CreatedByName":"maltesh","CreatedById":17144,"CreatedDateTime":"2012-09-06T14:45:55Z","Content":"\n\u003Cp\u003EIf you want to extract it yourself, you\u0027re probably going to have to look into \u003Ca href=\u0022http://kspwiki.nexisonline.net/wiki/Plugins\u0022 rel=\u0022external nofollow\u0022\u003Eplugin coding\u003C/a\u003E, and grab the information from the Orbit class.\u003C/p\u003E\u003Cp\u003EI don\u0027t think a Molniya orbit around the Mun is possible. Quick mucking around with an orbital calculator (and assuming a 38-hour 36 minute sidereal period for the Mun) gives me an apoapsis of about 3300 km on an orbit with eccentricity 0.74 and a period of about 19 hours 18 minutes. That\u0027s higher than the Munar SOI radius. You\u0027ve got to drop the eccentricity to about 0.3 to fit the orbit inside the Munar SOI.\u003C/p\u003E\u003Cp\u003EWith Kerbin, you\u0027ve got a different problem. Kerbin\u0027s sidereal rotation period is 6 hours, requiring a 3-hour period for a Molniya, but a three-hour orbit with eccentricity 0.74 hits the planet. I chose to lower the eccentricity to \u003Cspan style=\u0022font-family:Arial;\u0022\u003E\u003Cspan style=\u0022color:#222222;\u0022\u003E0.679611726 for my Molniya constellation, which works out a periapsis at 100km altitude \u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\n"},{"CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-09T06:03:27Z","Content":"\n\u003Cp\u003EThank you, maltesh. I do have to ask, then, what are the _defining_ parameters of a Molniya orbit? When I was looking at I, I thought the defining parameters were \u003C/p\u003E\u003Cp\u003E1) orbital period 1/2 sidereal rotation rate of the body being orbited\u003C/p\u003E\u003Cp\u003E2) Inclination set to zero out oblate body perturbations (116.6 or 63.4 degrees)\u003C/p\u003E\u003Cp\u003E2a) Alternate: for perfect spheres, coverage far from the equator (high or low latitudes)\u003C/p\u003E\u003Cp\u003E3) As large as is practical Apoapsis loiter, i.e. a \u0022highly eccentric\u0022 orbit with a Periapsis as close to the body as is deemed safe/desirable.\u003C/p\u003E\u003Cp\u003EI didn\u0027t think any _particular_ eccentricity was required or even important; just because Earth Molniya orbits use Ecc 0.74 doesn\u0027t mean you\u0027d stick with 0.74 around a planet Earth\u0027s size with a dramatically different density, does it?\u003C/p\u003E\u003Cp\u003EThus, for Kerbal, my lua (via Mechjeb Autom8) calculations show a pretty tight Molniya orbit around Kerbin to be 70000.0000007m Periapsis and 3099882.16762357m Apoapsis, assuming 70km as a hard floor for Periapsis.\u003C/p\u003E\u003Cp\u003EExample of elements from a ship in a slightly safer Molniya orbit:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u0026gt; require \u0022SimpleKSPOrbitalOperations\u0022\u003Cbr\u003E\u0026gt; printSkomKSPCurrentOrbitalElements()\u003Cbr\u003EorbitApA 3091223.15732252\u003Cbr\u003EorbitPeA 75180.8230804288\u003Cbr\u003EorbitPeriod 10785.3686006449\u003Cbr\u003EorbitTimeToAp 2324.66911005364\u003Cbr\u003EorbitTimeToPe 7717.35341037608\u003Cbr\u003EorbitLAN (RA/Long of Ascending Node) 213.427100427749\u003Cbr\u003EorbitArgumentOfPeriapsis (APe) 219.071721398138\u003Cbr\u003EorbitLongitudeOfPeriapsis (LPe) 72.4988218258869\u003Cbr\u003EorbitInclination 63.3747757462778\u003Cbr\u003EorbitEccentricity 0.690738270649006\u003Cbr\u003EorbitSemiMajorAxis (a) 2183201.99020147\u003Cbr\u003EspeedOrbital 772.447710561223\u003Cbr\u003EspeedSurface 933.959438086068\u003Cbr\u003EspeedVertical 447.721196680242\u003Cbr\u003EspeedHorizontal 819.649902264227\u003Cbr\u003EvesselHeading 262.950357055664\u003Cbr\u003EvesselPitch -24.3717094421387\u003Cbr\u003EvesselRoll 28.5230310440063\u003Cbr\u003EaltitudeASL 2589812.40431608\u003Cbr\u003EaltitudeTrue 2589411.90915805\u003Cbr\u003EaltitudeBottom 2589411.90915805\u003Cbr\u003Elatitude 15.5475476988583\u003Cbr\u003Elongitude 61.1391499060891\u003Cbr\u003Eradius 3189852.69837219\u003Cbr\u003Elocalg 0.3470805440598\u003Cbr\u003EatmosphericDensity 0\u003Cbr\u003Etime 8428218.41378137\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFor the Mun, I calculate that an Apoapsis of 2429999.9999757m and a Periapsis of 1328033.84149341m is about as close as we can come to a Molniya orbit; it\u0027s going to have a much lower loiter time, but it\u0027s still a 1/2 sidereal (I think; I\u0027m still trying to get a solid answer on the Mun\u0027s sidereal rotation rate) rotation rate, eccentric orbit, and thus it\u0027ll still show up over the same spot on the surface every other Apoapsis, and spend more than half the time over it.\u003C/p\u003E\u003Cp\u003EHow much more, I don\u0027t yet know the math to figure out, so I can\u0027t tell you how many more satellites per constellation are required... but I believe it can be done over the Mun.\u003C/p\u003E\u003Cp\u003EFor Minmus, I get an Apoapsis of 2712999.99997287m and a Periapsis of 2664532.22551369m, so it\u0027s technically a Molniya orbit, but the loiter time is going to be barely, barely more than a circular orbit would have, so yes, practically, Minmus doesn\u0027t have a very useful Molniya available.\u003C/p\u003E\u003Cp\u003EMy constants may be wrong, of course.\u003C/p\u003E\u003Cp\u003EP.S. With some help from r4m0n, the mechjeb.core.targetBody.orbit.* parameters will give me the Keplerian orbital elements except True Anomaly/Mean Anomaly at Epoch, and I don\u0027t yet see anything to get me sidereal rotational period (and I don\u0027t expect to find end of atmosphere/highest mountain, Hill sphere of influence, or sidereal rotation rate out of them, though sidereal rotation rate would be most excellent for Molniya calculations).\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-09-09T06:06:48Z\u0022 title=\u002209/09/2012 06:06  AM\u0022 data-short=\u002211 yr\u0022\u003ESeptember 9, 2012\u003C/time\u003E by Nadrek\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-20T13:43:58Z","Content":"\n\u003Cp\u003EWith great thanks to the developers of KSP and Mechjeb and r4m0n in specific (and MonoDevelop_ to get some more parameters, I\u0027ve compiled an initial draft of Celestial Body parameters in KSP. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://pastebin.com/DfH5rSmU\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://pastebin.com/DfH5rSmU\u003C/a\u003E (older, less complete but still 100% accurate data at \u003Ca href=\u0022http://pastebin.com/4wXDzBdG\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://pastebin.com/4wXDzBdG\u003C/a\u003E)\u003C/p\u003E\u003Cp\u003Eand snippets of the initial draft lua code for Autom8 - units are in the comments where I know them.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Efunction guessSomBodyFullnameFromShortname(Shortname)\u003Cbr\u003E  -- added in v0.003\u003Cbr\u003E  --print(\u0022guessSomBodyFullnameFromShortname got shortname \u0022 .. Shortname)\u003Cbr\u003E  localFullName = \u0022Unknown_Full_Name\u0022\u003Cbr\u003E  if Shortname == \u0022Kerbin\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Kerbin\u0022\u003Cbr\u003E  elseif Shortname == \u0022Mun\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Kerbin_Mun\u0022\u003Cbr\u003E  elseif Shortname == \u0022Minmus\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Kerbin_Minmus\u0022\u003Cbr\u003E  elseif Shortname == \u0022Moho\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Moho\u0022\u003Cbr\u003E  elseif Shortname == \u0022Eve\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Eve\u0022\u003Cbr\u003E  elseif Shortname == \u0022Gilly\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Eve_Gilly\u0022\u003Cbr\u003E  elseif Shortname == \u0022Duna\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Duna\u0022\u003Cbr\u003E  elseif Shortname == \u0022Ike\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Duna_Ike\u0022\u003Cbr\u003E  elseif Shortname == \u0022Jool\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Jool\u0022\u003Cbr\u003E  elseif Shortname == \u0022Laythe\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Jool_Laythe\u0022\u003Cbr\u003E  elseif Shortname == \u0022Vall\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Jool_Vall\u0022\u003Cbr\u003E  elseif Shortname == \u0022Tylo\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Jool_Tylo\u0022\u003Cbr\u003E  elseif Shortname == \u0022Bop\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol_Jool_Bop\u0022\u003Cbr\u003E  elseif Shortname == \u0022Sun\u0022 then\u003Cbr\u003E    return \u0022KSP_Galaxy1_Kerbol\u0022\u003Cbr\u003E  elseif Shortname == nil then\u003Cbr\u003E    return nil\u003Cbr\u003E  end\u003Cbr\u003Eend\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E  globalRadiansToDegreesMultiplier = 180/math.pi -- in pure units.  Multiply radians by this to get degrees.\u003Cbr\u003E  globalDegreesToRadiansMultiplier = 1/(180/math.pi) -- in pure units.  Multiply degrees by this to get radians.\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Efunction reportSkomKSPCurrentOrbitalElementsDegreesFromObt(Orbit)\u003Cbr\u003E  -- added in v0.003, variables renamed/updated in v0.004 and (orbit) passin added\u003Cbr\u003E  -- possible sources of Orbit:\u003Cbr\u003E  --   mechjeb.core.targetVessel.orbit (select target Vessel or Debris, NOT Bodies, in Rendevous Module GUI)\u003Cbr\u003E  --   mechjeb.core.targetBody.orbit (select target Celestial Body in Rendevous Module GUI)\u003Cbr\u003E  --   mechjeb.core.part.vessel.orbit (your own current vessel, but .name shows your craft name)\u003Cbr\u003E  --   mechjeb.core.part.orbit (your own current vessel, but .name shows mumech.mechjeb)\u003Cbr\u003E  --     local Orbits = script.call(\u0022Planetarium.Orbits\u0022)\u003Cbr\u003E  --     local i = 1\u003Cbr\u003E  --     for i = 1, 4 do\u003Cbr\u003E  --       \u0026lt;whatever you want, with Orbits[i]\u0026gt;\u003Cbr\u003E  --     end\u003Cbr\u003E\u003Cbr\u003E  -- Simply returns a set of variables for other use.\u003Cbr\u003E  -- Apa is the Apoapsis from sea level in meters\u003Cbr\u003E  -- Apr is the Apoapsis from the center of the body (radius) in meters\u003Cbr\u003E  -- Pea is the Periapsis from sea level in meters\u003Cbr\u003E  -- Per is the Periapsis from the center of the body (radius) in meters\u003Cbr\u003E  -- Sop is the sidereal orbital period in seconds\u003Cbr\u003E  -- Tmtoap is the time to Apoapsis in seconds\u003Cbr\u003E  -- Tmtope is the time to Periapsis in seconds\u003Cbr\u003E  -- Lan is the Longitude of the Ascending Node in degrees\u003Cbr\u003E  -- Ape is the Argument of Periapsis in degrees\u003Cbr\u003E  -- Lpe is the Longitude of Periapsis in degrees\u003Cbr\u003E  -- Ma is the Mean Anomaly in degrees\u003Cbr\u003E  -- Maae is the Mean Anomaly at Epoch in degrees\u003Cbr\u003E  -- Ta is the True Anomaly in degrees\u003Cbr\u003E  -- Ea is the Eccentric Anomaly in degrees\u003Cbr\u003E  -- Epch is the Epoch in seconds since the start of the KSP universe (i.e. since time 0 in persistence.sfs or vessel.time, etc.)\u003Cbr\u003E  -- Strtut is the Start of UT in seconds... someone tell me what this is, please?\u003Cbr\u003E  -- Inc is the Inclination of the orbit in degrees\u003Cbr\u003E  -- Ecc is the eccentricity of the orbit\u003Cbr\u003E  -- a is the semi-major axis in meters\u003Cbr\u003E  -- Posvec3[1] is the position vector ?x? ??\u003Cbr\u003E  -- Posvec3[2] is the position vector ?y? ??\u003Cbr\u003E  -- Posvec3[3] is the position vector ?z? ??\u003Cbr\u003E  -- Velvec3[1] is the velocity vector ?x? ??\u003Cbr\u003E  -- Velvec3[2] is the velocity vector ?y? ??\u003Cbr\u003E  -- Velvec3[3] is the velocity vector ?z? ??\u003Cbr\u003E  -- l is the semi-latus rectum in meters\u003Cbr\u003E  -- Os is the ?? Unknown type does not match navball ?? orbital velocity in m/s\u003Cbr\u003E  -- Oe is the ?? Unknown ?? orbital energy in ??\u003Cbr\u003E  -- Altunk is the ?? Unknown type - not true, ASL, or bottom ?? altitude in meters\u003Cbr\u003E  -- Rfcb is the Radius From Central Body in meters, the distance in meters from the orbiting\u003Cbr\u003E  --   object to the center of gravity it\u0027s orbiting (i.e. the center of the planet)\u003Cbr\u003E  -- Obt is the ??\u003Cbr\u003E  -- Obtae is the ?? at epoch\u003Cbr\u003E  -- Sevp is the ??\u003Cbr\u003E  -- Sevs is the ??\u003Cbr\u003E  -- E is the ??\u003Cbr\u003E  -- V is the ??\u003Cbr\u003E  -- Frme is the ??\u003Cbr\u003E  -- Frmv is the ??\u003Cbr\u003E  -- Toe is the ??\u003Cbr\u003E  -- Tov is the ??\u003Cbr\u003E  -- Utappr is the ?? -- probably encounter related\u003Cbr\u003E  -- Utsoi is the ?? -- probably hill sphere of influence related\u003Cbr\u003E  -- Refbodnamefull is the fully qualified name of the body it\u0027s orbiting, i.e. Universe_Galaxy_Solarsystem_Planet_Moon, i.e. KSP_Galaxy1_Kerbol_Kerbin_Mun or RL_MilkyWay_Sol_Earth\u003Cbr\u003E  -- Refbodnameshort is the short name of the body its orbiting, i.e. \u0022Mun\u0022 or \u0022Jupiter\u0022\u003Cbr\u003E  -- Clappr is the ?? -- probably encounter related\u003Cbr\u003E  -- Clectr1 is the ?? -- probably encounter related\u003Cbr\u003E  -- Clectr2 is the ?? -- probably encounter related\u003Cbr\u003E  -- Crappr is the ?? -- probably encounter related\u003Cbr\u003E  -- Eccvec3[1] is the ??\u003Cbr\u003E  -- Eccvec3[2] is the ??\u003Cbr\u003E  -- Eccvec3[3] is the ??\u003Cbr\u003E  -- Hvec3[1] is the ??\u003Cbr\u003E  -- Hvec3[2] is the ??\u003Cbr\u003E  -- Hvec3[3] is the ??\u003Cbr\u003E  -- Fevp is the ??\u003Cbr\u003E  -- Fevs is the ??\u003Cbr\u003E  -- mag is the ??\u003Cbr\u003E  -- Clsencbodynamefull is the fully qualified name of the closest encounter body, or nil\u003Cbr\u003E  -- Clsencbodynameshort is the fully qualified name of the closest encounter body, or nil\u003Cbr\u003E  -- TODO - a few more items, including next patch and previous patch.\u003Cbr\u003E  --[[ example:\u003Cbr\u003E    require \u0022SimpleKSPOrbitalMechanics\u0022\u003Cbr\u003E    do\u003Cbr\u003E      local Orbits = script.call(\u0022Planetarium.Orbits\u0022)\u003Cbr\u003E      local i = 1 -- planet\u003Cbr\u003E      local j = 1 -- moon\u003Cbr\u003E      local localApa, localApr, localPea, localPer, localSop, localTmtoap, localTmtope, localLan, localApe, localLpe, localMa, localMaae, localTa,\u003Cbr\u003E      localEa, localEpch, localInc, localEcc, locala, localStrtut, localEndut, localPosvec3, localVelvec3, locall, localOs, localOe, localAltunk, localRfcb,\u003Cbr\u003E      localObt, localObtae, localSevp, localSevs, localE, localV, localFrme, localFrmv, localToe, localTov, localUtappr, localUtsoi, localRefbodnamefull,\u003Cbr\u003E      localRefbodnameshort, localClappr, localClectr1, localClectr2, localCrappr, localEccvec3, localHvec3, localFevp, localFevs, localMag,\u003Cbr\u003E      localClsencbodynamefull, localClsencbodynameshort\u003Cbr\u003E-- these are for planets\u003Cbr\u003E--      = reportSkomKSPCurrentOrbitalElementsDegreesFromObt(Orbits[2].referenceBody.orbitingBodies[i].orbit)\u003Cbr\u003E      = reportSkomKSPCurrentOrbitalElementsDegreesFromObt(Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].orbit)\u003Cbr\u003E      --  = reportSkomKSPCurrentOrbitalElementsDegreesFromObt(mechjeb.core.part.vessel.orbit)\u003Cbr\u003E--      print(\u0022Nameshort \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].name)\u003Cbr\u003E--      print(\u0022Namefull \u0022 .. guessSomBodyFullnameFromShortname(Orbits[2].referenceBody.orbitingBodies[i].name))\u003Cbr\u003E--      --print(Orbits[2].referenceBody.orbitingBodies[2].gravParameter .. \u0022 \u0022 .. Orbits[1].referenceBody.orbitingBodies[2].name)\u003Cbr\u003E--      print(\u0022Gm \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].gravParameter)\u003Cbr\u003E--      print(\u0022Hsoi \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].hillSphere)\u003Cbr\u003E--      print(\u0022Radius \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].Radius)\u003Cbr\u003E--      --print(\u0022Rotates \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].rotates)\u003Cbr\u003E--      print(\u0022RotationPeriod \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].rotationPeriod)\u003Cbr\u003E--      print(\u0022Soi \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].sphereOfInfluence)\u003Cbr\u003E      print(\u0022Nameshort \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].name)\u003Cbr\u003E      print(\u0022Namefull \u0022 .. guessSomBodyFullnameFromShortname(Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].name))\u003Cbr\u003E      print(\u0022Nameindex \u0022 .. i .. \u0022,\u0022 .. j)\u003Cbr\u003E      --print(Orbits[2].referenceBody.orbitingBodies[2].gravParameter .. \u0022 \u0022 .. Orbits[1].referenceBody.orbitingBodies[2].name)\u003Cbr\u003E      print(\u0022Gm \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].gravParameter)\u003Cbr\u003E      print(\u0022Hsoi \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].hillSphere)\u003Cbr\u003E      print(\u0022Radius \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].Radius)\u003Cbr\u003E      --print(\u0022Rotates \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].rotates)\u003Cbr\u003E      print(\u0022RotationPeriod \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].rotationPeriod)\u003Cbr\u003E      print(\u0022Soi \u0022 .. Orbits[2].referenceBody.orbitingBodies[i].orbitingBodies[j].sphereOfInfluence)\u003Cbr\u003E\u003Cbr\u003E      print(\u0022Apa \u0022 .. localApa)\u003Cbr\u003E      print(\u0022Apr \u0022 .. localApr)\u003Cbr\u003E      print(\u0022Pea \u0022 .. localPea)\u003Cbr\u003E      print(\u0022Per \u0022 .. localPer)\u003Cbr\u003E      print(\u0022Sop \u0022 .. localSop)\u003Cbr\u003E      print(\u0022Tmtoap \u0022 .. localTmtoap)\u003Cbr\u003E      print(\u0022Tmtope \u0022 .. localTmtope)\u003Cbr\u003E      print(\u0022Lan \u0022 .. localLan)\u003Cbr\u003E      print(\u0022Ape \u0022 .. localApe)\u003Cbr\u003E      print(\u0022Lpe \u0022 .. localLpe)\u003Cbr\u003E      print(\u0022Ma \u0022 .. localMa)\u003Cbr\u003E      print(\u0022Ta \u0022 .. localTa)\u003Cbr\u003E      print(\u0022Ea \u0022 .. localEa)\u003Cbr\u003E      print(\u0022Maae \u0022 .. localMaae)\u003Cbr\u003E      print(\u0022Epch \u0022 .. localEpch)\u003Cbr\u003E      print(\u0022Inc \u0022 .. localInc)\u003Cbr\u003E      print(\u0022Ecc \u0022 .. localEcc)\u003Cbr\u003E      print(\u0022a \u0022 .. locala)\u003Cbr\u003E      print(\u0022Strtut \u0022 .. localStrtut)\u003Cbr\u003E      print(\u0022Endut \u0022 .. localEndut)\u003Cbr\u003E      print(\u0022Pos[1] \u0022 .. localPosvec3[1])\u003Cbr\u003E      print(\u0022Pos[2] \u0022 .. localPosvec3[2])\u003Cbr\u003E      print(\u0022Pos[3] \u0022 .. localPosvec3[3])\u003Cbr\u003E      print(\u0022Vel[1] \u0022 .. localVelvec3[1])\u003Cbr\u003E      print(\u0022Vel[2] \u0022 .. localVelvec3[2])\u003Cbr\u003E      print(\u0022Vel[3] \u0022 .. localVelvec3[3])\u003Cbr\u003E      print(\u0022l \u0022 .. locall)\u003Cbr\u003E      print(\u0022Os \u0022 .. localOs)\u003Cbr\u003E      print(\u0022Oe \u0022 .. localOe)\u003Cbr\u003E      print(\u0022Altunk \u0022 .. localAltunk)\u003Cbr\u003E      print(\u0022Rfcb \u0022 .. localRfcb)\u003Cbr\u003E      print(\u0022Obt \u0022 .. localObt)\u003Cbr\u003E      print(\u0022Obtae \u0022 .. localObtae)\u003Cbr\u003E      print(\u0022Sevp \u0022 .. localSevp)\u003Cbr\u003E      print(\u0022Sevs \u0022 .. localSevs)\u003Cbr\u003E      print(\u0022E \u0022 .. localE)\u003Cbr\u003E      print(\u0022V \u0022 .. localV)\u003Cbr\u003E      print(\u0022Frme \u0022 .. localFrme)\u003Cbr\u003E      print(\u0022Frmv \u0022 .. localFrmv)\u003Cbr\u003E      print(\u0022Toe \u0022 .. localToe)\u003Cbr\u003E      print(\u0022Tov \u0022 .. localTov)\u003Cbr\u003E      print(\u0022Utappr \u0022 .. localUtappr)\u003Cbr\u003E      print(\u0022Utsoi \u0022 .. localUtsoi)\u003Cbr\u003E      print(\u0022Refbodnamefull \u0022 .. localRefbodnamefull)\u003Cbr\u003E      print(\u0022Refbodnameshort \u0022 .. localRefbodnameshort)\u003Cbr\u003E      print(\u0022Clappr \u0022 .. localClappr)\u003Cbr\u003E      print(\u0022Clectr1 \u0022 .. localClectr1)\u003Cbr\u003E      print(\u0022Clectr2 \u0022 .. localClectr2)\u003Cbr\u003E      print(\u0022Crappr \u0022 .. localCrappr)\u003Cbr\u003E      print(\u0022Eccvec3[1] \u0022 .. localEccvec3[1])\u003Cbr\u003E      print(\u0022Eccvec3[2] \u0022 .. localEccvec3[2])\u003Cbr\u003E      print(\u0022Eccvec3[3] \u0022 .. localEccvec3[3])\u003Cbr\u003E      print(\u0022Hvec3[1] \u0022 .. localHvec3[1])\u003Cbr\u003E      print(\u0022Hvec3[2] \u0022 .. localHvec3[2])\u003Cbr\u003E      print(\u0022Hvec3[3] \u0022 .. localHvec3[3])\u003Cbr\u003E      print(\u0022Fevp \u0022 .. localFevp)\u003Cbr\u003E      print(\u0022Fevs \u0022 .. localFevs)\u003Cbr\u003E      print(\u0022Mag \u0022 .. localMag)\u003Cbr\u003E      if localClsencbodynamefull ~= nil then\u003Cbr\u003E        print(\u0022Clsencbodynamefull \u0022 .. localClsencbodynamefull)\u003Cbr\u003E        print(\u0022Clsencbodynameshort \u0022 .. localClsencbodynameshort)\u003Cbr\u003E      else\u003Cbr\u003E        print(\u0022Clsencbodynamefull nil\u0022)\u003Cbr\u003E        print(\u0022Clsencbodynameshort nil\u0022)\u003Cbr\u003E      end\u003Cbr\u003E    end\u003Cbr\u003E  ]]\u003Cbr\u003E  local localClosestEncounterBodyNameshort = nil\u003Cbr\u003E  if Orbit.closestEncounterBody ~= nil then\u003Cbr\u003E    localClosestEncounterBodyNameshort = Orbit.closestEncounterBody.name\u003Cbr\u003E  end\u003Cbr\u003E  return Orbit.ApA, Orbit.ApR, Orbit.PeA, Orbit.PeR, Orbit.period, Orbit.timeToAp, Orbit.timeToPe, Orbit.LAN, Orbit.argumentOfPeriapsis,\u003Cbr\u003E    calcSomLpeFromLanApe(Orbit.LAN, Orbit.argumentOfPeriapsis), (Orbit.meanAnomaly * globalRadiansToDegreesMultiplier),\u003Cbr\u003E    (Orbit.meanAnomalyAtEpoch * globalRadiansToDegreesMultiplier), Orbit.trueAnomaly, (Orbit.eccentricAnomaly * globalRadiansToDegreesMultiplier),\u003Cbr\u003E    Orbit.epoch, Orbit.inclination, Orbit.eccentricity,\u003Cbr\u003E    Orbit.semiMajorAxis, Orbit.StartUT, Orbit.EndUT, Orbit.pos, Orbit.vel, Orbit.semiLatusRectum, Orbit.orbitalSpeed, Orbit.orbitalEnergy,\u003Cbr\u003E    Orbit.altitude, Orbit.radius, Orbit.ObT, Orbit.ObTAtEpoch, Orbit.SEVp, Orbit.SEVs, Orbit.E, Orbit.V, Orbit.fromE, Orbit.fromV, Orbit.toE, Orbit.toV,\u003Cbr\u003E    Orbit.UTappr, Orbit.UTsoi, guessSomBodyFullnameFromShortname(Orbit.referenceBody.name), Orbit.referenceBody.name, Orbit.ClAppr, Orbit.ClEctr1, Orbit.ClEctr2, Orbit.CrAppr,\u003Cbr\u003E    Orbit.eccVec, Orbit.h, Orbit.FEVp, Orbit.FEVs, Orbit.mag, guessSomBodyFullnameFromShortname(localClosestEncounterBodyNameshort)\u003Cbr\u003E    localClosestEncounterBodyNameshort\u003Cbr\u003E\u003Cbr\u003Eend\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-09-26T02:27:37Z\u0022 title=\u002209/26/2012 02:27  AM\u0022 data-short=\u002211 yr\u0022\u003ESeptember 26, 2012\u003C/time\u003E by Nadrek\u003C/strong\u003E\n\u003Cbr\u003EMore data\n\u003C/span\u003E\n"},{"CreatedByName":"maltesh","CreatedById":17144,"CreatedDateTime":"2012-09-21T09:36:18Z","Content":"\n\u003Cp\u003EI would suspect The Eccvecs are the three components of the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Eccentricity_vector\u0022 rel=\u0022external nofollow\u0022\u003EEccentricity Vector\u003C/a\u003E and the Hvecs are the three components of the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Orbital_angular_momentum_vector\u0022 rel=\u0022external nofollow\u0022\u003ESpecific Relative Angular Momentum\u003C/a\u003E vector.\u003C/p\u003E\u003Cp\u003EWell done. The primary thing that I\u0027d change is to return Mean Anomaly and Mean Anomaly at Epoch in radians. Mean Anomaly is more a quasi-angular parameter than an angle, and is more useful in the equations I\u0027ve found in radians than in degrees. (Also, it seems to be that the Devs choose Mean Anomaly at Epoch UT=0.0 to have one of four values in radians for the celestial bodies: 0.1, 0.9, 1.7, or 3.14)\u003C/p\u003E\n"},{"CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-22T02:32:07Z","Content":"\n\u003Cp\u003EThank you - I\u0027ll update my comments with your information. Any ideas on the units they\u0027re in?\u003C/p\u003E\u003Cp\u003EI understand about the Radians comment, but note this was generated with procedure \u0022reportSkomKSPCurrentOrbitalElementsDegreesFromObt\u0022 - every angular measure is in degrees. Another variant is planned, where every angular measure will be in radians. \u003C/p\u003E\u003Cp\u003EI don\u0027t believe that mixed degrees and radians is a good way of reporting data; nor do I believe that mixed meters and kilometers is a good way of reporting data. One unit for angle, one for length, one for time, and so on, always consistent - users can convert as they wish... if they know the source unit. If the source units different field to field, that\u0027s hard to keep track of for new users who haven\u0027t memorized any particular convention... and I have some doubts that there is only one worldwide convention. Even if there is, I\u0027m targetting brand new users, so I stand by consistency - anyone else can take my SimpleKSPOrbitalMechanics.lua and either change it directly, or write a function and converts some fields to one unit and some to another unit.\u003C/p\u003E\n"},{"CreatedByName":"Nadrek","CreatedById":25326,"CreatedDateTime":"2012-09-26T02:24:45Z","Content":"\n\u003Cp\u003ESecond pass complete; added several body parameters, including atmosphere values and GeeASL (Kerbin G\u0027s at sea level), time warp altitude limits, and a few other values.\u003C/p\u003E\u003Cp\u003EAlso included basic information on Kerbol!\u003C/p\u003E\u003Cp\u003EThis variant still has all angles in degrees, since more of them are commonly used as degrees than as radians.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://pastebin.com/DfH5rSmU\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://pastebin.com/DfH5rSmU\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ECode and explanations are at the end.\u003C/p\u003E\n"}]}