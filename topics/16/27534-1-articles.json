{"TopicId":27534,"ForumId":16,"TopicTitle":"How to calculate lift?","CreatedByName":"unWinged","CreatedById":50597,"CreatedDateTime":"2013-05-19T10:04:48Z","PageNum":1,"Articles":[{"CreatedByName":"unWinged","CreatedById":50597,"CreatedDateTime":"2013-05-19T10:04:48Z","Content":"\n\u003Cp\u003EI want to start building some planes and spaceplanes, but I want to be able to estimate how much lift will wings generate.\u003C/p\u003E\u003Cp\u003EI know that lift and drag are mass dependent. And it can be represented as:\u003C/p\u003E\u003Cp\u003EF_lift = mass*lift*v^2*C\u003C/p\u003E\u003Cp\u003Ewhere:\u003C/p\u003E\u003Cp\u003EF_lift is lift force,\u003C/p\u003E\u003Cp\u003Emass is mass of wing,\u003C/p\u003E\u003Cp\u003Elift is lift coefficient,\u003C/p\u003E\u003Cp\u003Ev is velocity,\u003C/p\u003E\u003Cp\u003Eand C is some magic coefficient dependent on angle of attack and pressure.\u003C/p\u003E\u003Cp\u003EI know it\u0027s crude, but should be sufficient for start...\u003C/p\u003E\u003Cp\u003ETo estimate C I made simple experiment:\u003C/p\u003E\u003Cp\u003EThis is CruiseJake, simple cruise missile\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/QXtgIa0.jpg\u0022 alt=\u0022QXtgIa0.jpg\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/V72BJYV.png\u0022 alt=\u0022V72BJYV.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ETo estimate C I ignored many variables (like engine thrust and that there are more than just main wings on it)\u003C/p\u003E\u003Cp\u003ESo I got\u003C/p\u003E\u003Cp\u003Eforce of lift equal of force of gravity (should work for simple calculation),\u003C/p\u003E\u003Cp\u003Elift rating of wings 1.9,\u003C/p\u003E\u003Cp\u003Emass of wings 2*0.07 = 0.14 t,\u003C/p\u003E\u003Cp\u003Emass of craft = 6.956 t,\u003C/p\u003E\u003Cp\u003Evelocity = 149.2 m/s,\u003C/p\u003E\u003Cp\u003Egravity = 9.81 m/s^2\u003C/p\u003E\u003Cp\u003Eand solving my equation for C:\u003C/p\u003E\u003Cp\u003EC = mass_craft*g/(mass*lift*v^2)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EC = 0.01106\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ENOTE this value is true for altitide 1350m on Kerbin and Angle of Atteck of 10 degree\u003C/p\u003E\u003Cp\u003EI know it will suffice for simple planes and maybe some crude spaceplanes, and I will probably make some better experiments later...\u003C/p\u003E\u003Cp\u003EBut does anyone know actual lift equation for KSP or have some thoughts, advice or data?\u003C/p\u003E\u003Cp\u003EP.S. I don\u0027t know why SPH picture is crappy jpg and in-flight one is png...\u003C/p\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2013-05-19T12:20:30Z","Content":"\n\u003Cp\u003EYour equation is off in a few key ways:\u003C/p\u003E\u003Cp\u003E- KSP lift is linear in airspeed, not quadratic\u003C/p\u003E\u003Cp\u003E- It depends (linearly) on air density\u003C/p\u003E\u003Cp\u003E- It depends on angle of attack according to some function I don\u0027t know. The function is different for control surfaces versus wings.\u003C/p\u003E\u003Cp\u003E- It depends (linearly) on the lift coefficient of each wing part\u003C/p\u003E\u003Cp\u003E- It does not depend on mass.\u003C/p\u003E\u003Cp\u003E- I\u0027m fairly certain the force is directed up compared to the wing (which isn\u0027t necessarily up compared to the cockpit).\u003C/p\u003E\u003Cp\u003EI suggest a simpler testbed: roll carts down the runway with wings angled at various angles, and note down their takeoff speed. That will let you calculate the force of lift after a bit of trigonometry.\u003C/p\u003E\n"},{"CreatedByName":"unWinged","CreatedById":50597,"CreatedDateTime":"2013-05-19T13:04:25Z","Content":"\n\u003Cp\u003EI assumed that it depends on mass because drag is mass dependent, same with squared velocity.\u003C/p\u003E\u003Cp\u003EAnd your test idea is great, will work with it later \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EWith linear dependency on air density, which can be measured by pressure it should be easy to predict lift at higher altitudes.\u003C/p\u003E\u003Cp\u003EThanks \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EIn my case I designed vessel first then came up with idea to test lift, and everything was done without thinking it through..\u003C/p\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2013-05-20T21:08:17Z","Content":"\n\u003Cp\u003EThere was a small group of us trying to figure out lift before the forum purge, this is as far as we got. At some point, the aerodynamic model will get improved, but for now, it\u0027s possible to get more lift than drag, which gets us the infiniglide bug.\u003C/p\u003E\n"},{"CreatedByName":"unWinged","CreatedById":50597,"CreatedDateTime":"2013-05-21T15:45:19Z","Content":"\n\u003Cp\u003EI hope that after aerodynamic improvements it will be more intuitive to calculate lift... For now I will make myself some kind of table with some basic estimations.\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-14T12:54:28Z","Content":"\n\u003Cp\u003ESo after some research and digging in the kerbal source binaries, as well as some experimenting with plugins and custom lift equations, along with debugging the forces by drawing in the vectors, I\u0027ve actually managed to translate the nonsense lift equation kerbal uses into plain english.\u003C/p\u003E\u003Cp\u003ECrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003Ewhere AoA is the angle between the velocity and the forward vector of the wing,\u003C/p\u003E\u003Cp\u003Eand StupidAoA is the angle between the velocity and the upward vector of the wing,\u003C/p\u003E\u003Cp\u003EwingRight is the vector to the right of the wing as placed, or can be thought of as the cross product of the wings up and forward vectors\u003C/p\u003E\u003Cp\u003EThe practical upshot of this I\u0027ve found, noticeable when debugging in particular, is when rolling down the runway, quite often I\u0027m producing a massive force downwards into the runway, explaining why I can\u0027t take off until I fall off the end of the runway and my angle of attack suddenly changes enough to snap my lift back upwards and I can take off.\u003C/p\u003E\u003Cp\u003EThe Control surfaces use exactly the same equation, but the velocity fed in is transformed first to adjust the result of the lift equation. I can understand why that\u0027s done, and I\u0027ll try and post the simple english of that specific transformation in the coming days, but it shouldn\u0027t be too hard to guess that.\u003C/p\u003E\u003Cp\u003EI\u0027m attaching some debug Plugins I\u0027ve been using, if you change any control surface or winglet\u0027s module from \u0022Winglet\u0022 or \u0022ControlSurface\u0022 to \u0022WingletDebug\u0022 or \u0022ControlSurfaceDebug\u0022 respectively in their relevant part.cfg you should see the debug lines for lift and velocity drawn.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www./download/3ad8dn5rrk71h78/KSPLiftMarker.dll\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/3ad8dn5rrk71h78/KSPLiftMarker.dll\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2013-08-14T13:40:23Z","Content":"\n\u003Cp\u003EDeflectionLiftCoeff is the lift value listed in the VAB?\u003C/p\u003E\u003Cp\u003ECareful with the \u0022up\u0022 and \u0022forward\u0022 vectors -- for a part in KSP, transform.up means up the stack, which is generally the forward direction of the spacecraft, whereas transform.forward is the axis that points away from the core of the planet when your plane is ready to launch on the runway.\u003C/p\u003E\u003Cp\u003EControl surfaces definitely change the velocity a bit to take account of the control input. But the numbers are also different; max around 60 degrees rather than around 30, and max much higher.\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-14T14:02:55Z","Content":"\n\u003Cp\u003EDeflectionLiftCoeff is the lift value of the wing specified in the VAB and in the cfg file, yes.\u003C/p\u003E\u003Cp\u003EI\u0027m aware of the differences between the up and forward vectors, the one\u0027s I\u0027ve stated up there are the sensible interpretations of forward and up for a wing. (Forward is parrallel to the vector to the planets core when on the runway, not necissarily away from it. With the symmetry in the SPH, one wings\u0027 forward will be up and one will be down due to rotation, not reflection.)\u003C/p\u003E\u003Cp\u003EThe only thing that changes when a control surface is adjusted is the velocity vector that\u0027s fed into that lift equation, though I\u0027m still trying to work out the exact tranformations used to adjust it. I imagine if that can be fixed to be more sensible, we may see the infiniglide bug dissapear.\u003C/p\u003E\u003Cp\u003EIt should be noted that the position on which lift acts on wings and control surfaces are different. With Wings and static lift surfaces the lift is aplied to the joint between the wing and the object its attached to, whilst with control surfaces the lift is applied to the center of the objects surface (read center of mass). The plugin I wrote demonstrates this.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-14T14:11:32Z\u0022 title=\u002208/14/2013 02:11  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 14, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Geschosskopf","CreatedById":69507,"CreatedDateTime":"2013-08-14T14:38:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ChevronTango\u0022 data-cite=\u0022ChevronTango\u0022\u003E\u003Cdiv\u003ESo after some research and digging in the kerbal source binaries, as well as some experimenting with plugins and custom lift equations, along with debugging the forces by drawing in the vectors, I\u0027ve actually managed to translate the nonsense lift equation kerbal uses into plain english.\u003Cp\u003ECrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo, how does wing area play into this? In the VAB and SPH, various parts say they have X amount of \u0022lift\u0022, and in general the bigger the part, the higher the \u0022lift\u0022 value. Does that mean anything at all?\u003C/p\u003E\u003Cp\u003EI want to make an airplane with an insanely low wing loading, so it can fly at low speed even in the thin air of Duna. I have this idea that if I put as many wings on it as possible, it might work. But I don\u0027t see anything above about wing area.\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-14T15:08:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Geschosskopf\u0022 data-cite=\u0022Geschosskopf\u0022\u003E\u003Cdiv\u003ESo, how does wing area play into this? In the VAB and SPH, various parts say they have X amount of \u0022lift\u0022, and in general the bigger the part, the higher the \u0022lift\u0022 value. Does that mean anything at all?\u003Cp\u003EI want to make an airplane with an insanely low wing loading, so it can fly at low speed even in the thin air of Duna. I have this idea that if I put as many wings on it as possible, it might work. But I don\u0027t see anything above about wing area.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENear as I can make out, the wing area doesn\u0027t play a part in any way, only the lift value. The lift value is not calculated, its set by the part in its settings, so no doubt the Kerbal designers put in a higher lift value for larger parts. My advice for high lift to drag and weight ratios is to use delta wings. Angle them back 10 degrees and don\u0027t use two many, though for duna or some other atmosphere you\u0027ll probably want more.\u003C/p\u003E\u003Cp\u003ESome quick calculations of the equations suggests that the ideal angle of attack is 25.7381 degrees. As in that generates the maximum amount of lift for the velocity input.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-14T15:37:39Z\u0022 title=\u002208/14/2013 03:37  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 14, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003Cbr\u003EMinor maths\n\u003C/span\u003E\n"},{"CreatedByName":"Geschosskopf","CreatedById":69507,"CreatedDateTime":"2013-08-14T16:46:46Z","Content":"\n\u003Cp\u003EEgad! That\u0027s actually depressing. But thanks very much for the pointers.\u003C/p\u003E\n"},{"CreatedByName":"The Lone Wolfling","CreatedById":13675,"CreatedDateTime":"2013-08-19T11:23:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ChevronTango\u0022 data-cite=\u0022ChevronTango\u0022\u003E\u003Cdiv\u003ECrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat about the drag value of wings?\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-19T11:47:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Lone Wolfling\u0022 data-cite=\u0022The Lone Wolfling\u0022\u003E\u003Cdiv\u003EWhat about the drag value of wings?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ethe drag equations for all parts in kerbal are as found on the \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Eatmosphere\u003C/a\u003E page of the wiki.\u003C/p\u003E\u003Cp\u003Ethe coefficient of Drag used in the wiki is calculated by the winglet thusly:\u003C/p\u003E\u003Cp\u003Ed = Abs(cos(StupidAoA))*NativeDragCoefficient;\u003C/p\u003E\u003Cp\u003Ewhere NativeDragCoefficient is the drag of the wing specified in the parts.cfg for it, and also noted in the VAB and SPH display for the part.\u003C/p\u003E\u003Cp\u003EStupidAoA is as mentioned previously, the angle between the velocity vector and the wings upwards vector.\u003C/p\u003E\u003Cp\u003Eso a wing has no drag when its angle of attack is zero and maximum drag when the wing is perpendicular to the direction of travel, which makes sense when all things are considered.\u003C/p\u003E\u003Cp\u003EEdit: It should be noted that with a breif look through the rest of Kerbals Source, this is the only example I can find of a parts drag not being constant\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-19T12:01:01Z\u0022 title=\u002208/19/2013 12:01  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 19, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The Lone Wolfling","CreatedById":13675,"CreatedDateTime":"2013-08-19T14:40:21Z","Content":"\n\u003Cp\u003ELift = CrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003EDrag = Abs(cos(StupidAoA))*NativeDragCoefficient;\u003C/p\u003E\u003Cp\u003ECannot you rearrange this, as StupidAoA = AoA \u002B pi/2?\u003C/p\u003E\u003Cp\u003ELift = CrossProduct(velocity, wingRight) * sin(AoA) * (1 - Abs(sin(AoA))) * cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003EDrag = Abs(sin(AoA))*NativeDragCoefficient;\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-19T14:51:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Lone Wolfling\u0022 data-cite=\u0022The Lone Wolfling\u0022\u003E\u003Cdiv\u003ELift = CrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003Cp\u003EDrag = Abs(cos(StupidAoA))*NativeDragCoefficient;\u003C/p\u003E\u003Cp\u003ECannot you rearrange this, as StupidAoA = AoA \u002B pi/2?\u003C/p\u003E\u003Cp\u003ELift = CrossProduct(velocity, wingRight) * sin(AoA) * (1 - Abs(sin(AoA))) * cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003EDrag = Abs(sin(AoA))*NativeDragCoefficient;\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Enot quite, and this does raise a slight issue with the terminology I chose. \u003C/p\u003E\u003Cp\u003EIf you assume velocity is always in the plane created by the upwards and forwards velocities then your reduction hold true, however if there is a sideslip then the AoA I mentioned no longer is completely accurate, as its the angle between the velocity and the forward vector, which is no longer zero, despite the StupidAoA I mentioned staying at pi/2 (ie the wingUp vector is still perpendicular to the velocity) in this example. My naming of variables was a little off here so I apologise for any confusion it may have caused. \u003C/p\u003E\u003Cp\u003EAssuming velocity is only ever forward, which for most simple calculations is a fair assumption, your simplification is valid.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-19T15:04:04Z\u0022 title=\u002208/19/2013 03:04  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 19, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The Lone Wolfling","CreatedById":13675,"CreatedDateTime":"2013-08-19T15:40:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ChevronTango\u0022 data-cite=\u0022ChevronTango\u0022\u003E\u003Cdiv\u003Enot quite, and this does raise a slight issue with the terminology I chose. \u003Cp\u003EIf you assumes velocity is always in the plane created by the upwards and forwards velocities then your reduction hold true, however if there is a sideslip then the AoA I mentioned no longer is completely accurate, as its the angle between the velocity and the forward vector, which is no longer zero, despite the StupidAoA I mentioned staying at pi/2 (ie the wingUp vector is still perpendicular to the velocity) in this example. My naming of variables was a little off here so I apologise for any confusion it may have caused. \u003C/p\u003E\u003Cp\u003EAssuming velocity is only ever forward, which for most simple calculations is a fair assumption, your simplification is valid.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh, ok. About drag: what about air intakes?\u003C/p\u003E\u003Cp\u003EWell, continuing in the same vein, let\u0027s assume AoA \u0026gt;= 0, and we\u0027re moving straight forwards.\u003C/p\u003E\u003Cp\u003ELift = velocity * sin(AoA) * (1 - sin(AoA)) * cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003EDrag = sin(AoA)*NativeDragCoefficient;\u003C/p\u003E\u003Cp\u003EForce(Drag) = 0.5 * StaticAirPressure * velocity^2 * Drag * mass \u002B otherDrag\u003C/p\u003E\u003Cp\u003EForce(Drag) = 0.5 * StaticAirPressure * velocity^2 * sin(AoA)*NativeDragCoefficient * mass \u002B otherDrag\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-19T16:35:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Lone Wolfling\u0022 data-cite=\u0022The Lone Wolfling\u0022\u003E\u003Cdiv\u003EOh, ok. About drag: what about air intakes?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAir Intakes are trickier. The base part has a native drag that\u0027s static, (for the ram Air Intake 0.3 defined in the part cfg) and that performs universally like all other drag on any object, however there is an additional intake drag on this part aswell which has some interesting maths.\u003C/p\u003E\u003Cp\u003EI\u0027ll try and sum up both these in one equation to make life easier.\u003C/p\u003E\u003Cp\u003Ed = NativeDrag \u002B Clamp(0.6 * velocityMagnitude * intakeSurfaceArea * cos(AoA), 0, 2)\u003C/p\u003E\u003Cp\u003Ewhere Clamp(in, min, max); is equal to Max(0,Min(1,in));\u003C/p\u003E\u003Cp\u003Eor rather\u003C/p\u003E\u003Cp\u003EClamp(in, min, max) {\u003C/p\u003E\u003Cp\u003Eif (in\u0026lt;=min) return min;\u003C/p\u003E\u003Cp\u003Eif (in\u0026gt;=max) return max;\u003C/p\u003E\u003Cp\u003Ereturn in;\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003Eso in summation the maximum drag for the Ram Air Intake is when its facing the velocity vector dead on and at sufficient speed, at which point the drag becomes 2.3, and when its side on perpendicular or backwards to the direction of travel its 0.3\u003C/p\u003E\u003Cp\u003EI\u0027m going to relook at this soon to make sure I haven\u0027t done something monumentally thick. The fact that we\u0027re using VelocityMagnitude is surprising to me, so if someone can check my research and/or maths I\u0027d apreciate it.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Lone Wolfling\u0022 data-cite=\u0022The Lone Wolfling\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWell, continuing in the same vein, let\u0027s assume AoA \u0026gt;= 0, and we\u0027re moving straight forwards.\u003C/p\u003E\u003Cp\u003ELift = velocity * sin(AoA) * (1 - sin(AoA)) * cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003EDrag = sin(AoA)*NativeDragCoefficient;\u003C/p\u003E\u003Cp\u003EForce(Drag) = 0.5 * StaticAirPressure * velocity^2 * Drag * mass \u002B otherDrag\u003C/p\u003E\u003Cp\u003EForce(Drag) = 0.5 * StaticAirPressure * velocity^2 * sin(AoA)*NativeDragCoefficient * mass \u002B otherDrag\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAssuming those preconditions about the lift surfaces, yes, that\u0027s right, where otherDrag presumably is the rest of the craft\u0027s drag.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-19T17:21:54Z\u0022 title=\u002208/19/2013 05:21  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 19, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The Lone Wolfling","CreatedById":13675,"CreatedDateTime":"2013-08-20T00:12:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ChevronTango\u0022 data-cite=\u0022ChevronTango\u0022\u003E\u003Cdiv\u003Ed = NativeDrag \u002B Clamp(0.6 * velocityMagnitude * intakeSurfaceArea * cos(AoA), 0, 2)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat about when closed? Just the native drag?\u003C/p\u003E\u003Cp\u003EAlso, this seems suspect. The radial air intake at 0 speed displays a drag coefficient of 0 open, and 0.2 closed.\u003C/p\u003E\u003Cp\u003EThe 0.2 closed suggests that it displays the total drag, but the 0 open suggests that it displays the additional drag only.\u003C/p\u003E\u003Cp\u003EWhat gives?\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-20T00:21:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Lone Wolfling\u0022 data-cite=\u0022The Lone Wolfling\u0022\u003E\u003Cdiv\u003EWhat about when closed? Just the native drag?\u003Cp\u003EAlso, this seems suspect. The radial air intake at 0 speed displays a drag coefficient of 0 open, and 0.2 closed.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe drag is just nativeDrag when the intake is deactivated/closed. This is yet another bug in the game, where when deactivated we set the intakedrag variable, which isn\u0027t being used by anything, to equal the nativeDrag variable, presumably as placeholder. The Upshot of this however is that the variable is used in the GUI, so when closed its simply the nativeDrag and when open its the intakeDrag without the NativeDrag. I shall lodge another bug report on this one. My decompiler didn\u0027t quite catch all the private properties and variable names correctly with this one so I can\u0027t be as specific in the bug report as I\u0027d like.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-20T00:40:36Z\u0022 title=\u002208/20/2013 12:40  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 20, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2013-08-20T05:12:50Z","Content":"\n\u003Cp\u003EThe \u0022NativeDrag \u002B\u0022 bit is newish; used to be you could close intakes and they\u0027d actually have zero drag. It changed in 0.20 I think, or maybe 0.19.\u003C/p\u003E\u003Cp\u003EThe dependence on area is a nuisance. If you have a part with an intake and you scale it up to twice the diameter (4x the intake), it now has 4x the drag at low speed. I\u0027ve noticed this, though not I hadn\u0027t tracked down the exact code.\u003C/p\u003E\u003Cp\u003EBy the way, the reason I hadn\u0027t tracked down the exact code is that officially, Squad look down on decompiling their work -- and I don\u0027t really blame them.\u003C/p\u003E\n"},{"CreatedByName":"ChevronTango","CreatedById":70939,"CreatedDateTime":"2013-08-20T10:20:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022numerobis\u0022 data-cite=\u0022numerobis\u0022\u003E\u003Cdiv\u003EBy the way, the reason I hadn\u0027t tracked down the exact code is that officially, Squad look down on decompiling their work -- and I don\u0027t really blame them.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t want to get into a debate on the subject, I\u0027d feel antsy about it if I were them I suppose, but whatever happens now and however you look at it, we at least now have some solid formula\u0027s for lift and drag and a couple bug reports lodged that should hopefully help a few people out.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-20T16:45:04Z\u0022 title=\u002208/20/2013 04:45  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 20, 2013\u003C/time\u003E by ChevronTango\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"The Lone Wolfling","CreatedById":13675,"CreatedDateTime":"2013-08-21T00:57:09Z","Content":"\n\u003Cp\u003ESo, with the proceeding data in mind, I decided to make a table to see what wings are the best. The results are... surprising-ish.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EName\t\t\t\tMass\tLift\tDrag\tTotal Drag\tL/D Ratio\tL/M Ratio\u003Cbr\u003ESmall Control Surface\t\t0.01\t0.5\t0.5\t0.005\t\t100\t\t50\u003Cbr\u003EDelta-Deluxe Winglet\t\t0.02\t0.7\t0.6\t0.012\t\t58.33333333\t35\u003Cbr\u003ESwept Wings\t\t\t0.05\t1.6\t0.6\t0.03\t\t53.33333333\t32\u003Cbr\u003EStructural Wing\t\t\t0.05\t1\t0.4\t0.02\t\t50\t\t20\u003Cbr\u003EWing Connector\t\t\t0.05\t1\t0.4\t0.02\t\t50\t\t20\u003Cbr\u003EDelta Wing\t\t\t0.07\t1.9\t0.6\t0.042\t\t45.23809524\t27.14285714\u003Cbr\u003EAV-R8 Winglet\t\t\t0.02\t0.4\t0.5\t0.01\t\t40\t\t20\u003Cbr\u003EStandard Canard\t\t\t0.04\t0.7\t0.5\t0.02\t\t35\t\t17.5\u003Cbr\u003EAdvanced Canard\t\t\t0.04\t0.7\t0.5\t0.02\t\t35\t\t17.5\u003Cbr\u003EStandard Control Surface\t0.04\t0.7\t0.5\t0.02\t\t35\t\t17.5\u003Cbr\u003ETail Fin\t\t\t0.02\t0.3\t0.5\t0.01\t\t30\t\t15\u003Cbr\u003EAV-T1 Winglet\t\t\t0.05\t0.3\t0.5\t0.025\t\t12\t\t6\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFirst off, interestingly enough, the best wings in terms of Lift/Drag ratio are the same best wings in terms of Lift/Mass ratio, with the exception of the delta wing.\u003C/p\u003E\u003Cp\u003ESecond, the basic swept wings are better than the various delta wings.\u003C/p\u003E\u003Cp\u003EAlso, the small control surface is the best, but the standard control surface is near the worst. Weird, huh.\u003C/p\u003E\u003Cp\u003EAlso, have you figured out the control surface calculations yet, ChevronTango?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-21T13:58:23Z\u0022 title=\u002208/21/2013 01:58  PM\u0022 data-short=\u002210 yr\u0022\u003EAugust 21, 2013\u003C/time\u003E by The Lone Wolfling\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Radam","CreatedById":79910,"CreatedDateTime":"2013-08-25T08:26:06Z","Content":"\n\u003Cp\u003ESo correct me if Im wrong, but at 23km at 1200ms lift for delta wing at 10\u00C3\u201A\u00C2\u00B0 would be:\u003C/p\u003E\u003Cp\u003EL=1200ms*0.01bar*1.9*0.141=0.03 t? For a spaceplane with 10 of those it would be 0.3t which is basically nothing.\u003C/p\u003E\n"},{"CreatedByName":"Radam","CreatedById":79910,"CreatedDateTime":"2013-08-27T16:02:18Z","Content":"\n\u003Cp\u003EDo rotating wings still work in 0.21?\u003C/p\u003E\n"},{"CreatedByName":"hydropos","CreatedById":76550,"CreatedDateTime":"2013-08-31T06:32:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ChevronTango\u0022 data-cite=\u0022ChevronTango\u0022\u003E\u003Cdiv\u003ESo after some research and digging in the kerbal source binaries, as well as some experimenting with plugins and custom lift equations, along with debugging the forces by drawing in the vectors, I\u0027ve actually managed to translate the nonsense lift equation kerbal uses into plain english.\u003Cp\u003ECrossProduct(velocity, wingRight) * Cos(StupidAoA) * (1 - Abs(Cos(StupidAoA))) * Cos(AoA) * deflectionLiftCoeff * StaticAirPressure;\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIs this force acting in the direction orthogonal to the wing surface, or is this only the vertical component? If the former, then high AoA\u0027s would be bad, since a substantial part of the wing force would be fighting the engines.\u003C/p\u003E\n"}]}