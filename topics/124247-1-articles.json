{"TopicId":124247,"ForumId":29,"TopicTitle":"How to get quantity of a resource","CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2015-11-01T21:14:42Z","PageNum":1,"Articles":[{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2015-11-01T21:14:42Z","Content":"\n\u003Cp\u003EHow would I get the quantity of a resource for the active vessel as well as the quantity of a resource in a given part? I know this is possible with the RequestResource method, but am struggling to pull it off. \u003C/p\u003E\u003Cp\u003EThanks\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2015-11-02T01:05:12Z","Content":"\n\u003Cp\u003EThere is a vessel.getActiveResource(Resource def) but I\u0027m not clear on what that does or how to use it. If I needed to do that right now I\u0027d probably use List\u0026lt;PartResource\u0026gt; = part.Resources.GetAll(int id) then sum the contents of the list.\u003C/p\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2015-11-02T01:27:01Z","Content":"\n\u003Cp\u003EI figured out finding the quantity of a resource for the vessel:\u003C/p\u003E\u003Cp\u003EDefinition = PartResourceLibrary.Instance.GetDefinition(\u0022string\u0022)\u003C/p\u003E\u003Cp\u003EAmount = this.vessel.GetActiveResource(Definition).amount\u003C/p\u003E\u003Cp\u003EFor a part, I\u0027m still stuck. Here\u0027s my line of code:\u003C/p\u003E\u003Cp\u003EAmount = this.part.RequestResource(\u0022string\u0022, double)\u003C/p\u003E\u003Cp\u003EIs this really the right approach? Is there something else that takes the place of double to convince the RequestResource method to spit out a number?\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-11-02T02:29:36Z","Content":"\n\u003Cp\u003EWhat is your problem with part.requestResource? You tell it which resource to use and how much of it and it returns the amount you actually consumed. The only way I can think of to go wrong is forgetting to scale the request quantity by fixedDeltaTime and getting a consumption rate that is much higher than intended\u003C/p\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2015-11-02T02:47:25Z","Content":"\n\u003Cp\u003EApparently my problem is not understanding what RequestResource returns. I was thinking I could get the remaining amount of a resource in a part using it. \u003C/p\u003E\u003Cp\u003EStill, if you can right click on a fuel tank and see how much fuel and oxidizer is left, there must be a way to get the remaining quantity of any resource.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-11-02T05:45:28Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.Resources.Get(resourceID).amount // For the current quantity in a part\u003Cbr\u003Epart.Resources.Get(resourceID).maxAmount // For the maximum a part can hold\u003Cbr\u003Epart.GetConnectedResources(resourceID, flowmode, resources) // returns the quantities of all parts that a part can request fuel from given a flowmode (by reference, \u0022resources\u0022 is the resulting list) . The sum of the amounts in resources is the total quantity accessible\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can get the resourceID from the instance of PartResourceLibrary by name or from any propellant / resource you have access to\u003C/p\u003E\n"},{"CreatedByName":"Fengist","CreatedById":78435,"CreatedDateTime":"2015-11-02T12:13:05Z","Content":"\n\u003Cp\u003EHere\u0027s some functions I use in the plugin I use for my submarine that may help. They made my life easier.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        //gets the id of the named resource found in a part\u003Cbr\u003E        public static int GetResourceID(this Part part, string resourceName)\u003Cbr\u003E        {\u003Cbr\u003E            PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(resourceName);\u003Cbr\u003E            return resource.id;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //gets the amount of resource in one part.\u003Cbr\u003E        public static double GetResourceAmount(this Part part, string resourceName)\u003Cbr\u003E        {\u003Cbr\u003E            PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(resourceName);\u003Cbr\u003E            return part.Resources.Get(resource.id).amount;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //gets how much empty resource space the part has\u003Cbr\u003E        public static double GetResourceSpace(this Part part, string resourceName)\u003Cbr\u003E        {\u003Cbr\u003E            PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(resourceName);\u003Cbr\u003E            double amt = part.Resources.Get(resource.id).amount;\u003Cbr\u003E            double max = part.Resources.Get(resource.id).maxAmount;\u003Cbr\u003E            return max - amt;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //returns the first part found with a named resource.  I use this to locate a part that I\u0027m going to use All_Vessel flow mode on.\u003Cbr\u003E        public static Part GetResourcePart(Vessel v, string resourceName)\u003Cbr\u003E        {\u003Cbr\u003E            foreach (Part mypart in v.parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (mypart.Resources.Contains(resourceName))\u003Cbr\u003E                {\u003Cbr\u003E                    return mypart;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            return null;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        //gets the total amount of a resource found on the entire vessel\u003Cbr\u003E        public static double GetResourceTotal(Vessel v, string resourceName)\u003Cbr\u003E        {\u003Cbr\u003E            PartResourceDefinition resource = PartResourceLibrary.Instance.GetDefinition(resourceName);\u003Cbr\u003E            double amount = 0;\u003Cbr\u003E            foreach (Part mypart in v.parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (mypart.Resources.Contains(resourceName))\u003Cbr\u003E                {\u003Cbr\u003E                    amount \u002B= MPFunctions.GetResourceAmount(mypart, resourceName);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            return amount;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo find a part with a resource: Here, I\u0027m looking for exactly two parts on the boat that have my ballast resource.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E            foreach (Part mypart in this.vessel.parts)\u003Cbr\u003E            {\u003Cbr\u003E                if (mypart.Resources.Contains(\u0022CompressedWater\u0022))\u003Cbr\u003E                {\u003Cbr\u003E                    if (rescount == 0)\u003Cbr\u003E                    { Part1 = mypart; }\u003Cbr\u003E                    if (rescount == 1)\u003Cbr\u003E                    { Part2 = mypart; }\u003Cbr\u003E                    rescount\u002B\u002B;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo consume electric charge you\u0027d do this:\u003C/p\u003E\u003Cp\u003EIn the start: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ebatid = MPFunctions.GetResourceID(Part1, \u0022ElectricCharge\u0022);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhere batid is an int and Part1 is a Part.\u003C/p\u003E\u003Cp\u003EYou can then in update or fixedupdate\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Edouble rFlow = rPart.RequestResource(batid,rConsume,ResourceFlowMode.ALL_VESSEL);\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Ewhere rConsume is the amount of charge you\u0027re requesting to use and rFlow is how much it actually consumed.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-11-02T19:23:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Fengist\u0022 data-cite=\u0022Fengist\u0022\u003E\u003Cdiv\u003EYou can then in update or fixedupdate\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou should always be using fixedUpdate for resource consumption since you need to scale it by fixed delta time to get a rate per game second. The rate of calls to Update (using delta time) is totally independent to how fast the game time is moving so if you use that you will get resource consumption that varies depending on the vessel and what you are doing with it\u003C/p\u003E\n"},{"CreatedByName":"wizzlebippi","CreatedById":85324,"CreatedDateTime":"2015-11-03T01:52:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epart.Resources.Get(resourceID).amount // For the current quantity in a part\u003Cbr\u003Epart.Resources.Get(resourceID).maxAmount // For the maximum a part can hold\u003Cbr\u003Epart.GetConnectedResources(resourceID, flowmode, resources) // returns the quantities of all parts that a part can request fuel from given a flowmode (by reference, \u0022resources\u0022 is the resulting list) . The sum of the amounts in resources is the total quantity accessible\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou can get the resourceID from the instance of PartResourceLibrary by name or from any propellant / resource you have access to\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s it, thanks. I have more math issues to work out, but this gets me much closer.\u003C/p\u003E\n"}]}