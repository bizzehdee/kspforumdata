{"TopicId":59040,"ForumId":36,"TopicTitle":"[WIP] Jebnix - A kOS Alternative","CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:35:42Z","PageNum":3,"Articles":[{"CreatedByName":"nothke","CreatedById":51185,"CreatedDateTime":"2014-01-20T12:25:24Z","Content":"\n\u003Cp\u003EJust got an idea:\u003C/p\u003E\u003Cp\u003EWhat about adding an ability to detect exceptions, and then, instead of just terminating the program, being able to do something else, like run an abort program. Sometimes, it happens that things happen very quickly, like launching or landing a rover, and you really want to have some fail-safe program behind it. Or you could even run a self-destruct program, as many real world rockets are adjusted to in case of a software error.\u003C/p\u003E\u003Cp\u003Efor example\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EIFEXCEPTION { RUN KerbalX_abort. }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EKnowing there will be nothke making those parts, I would not like to not have them. But, many \u0022computational\u0022 tools were questioned because of their reliance with parts (MechJeb, Protractor, Kerbal Engineer Redux, kOS itself, to name a few).\u003Cp\u003EI would propose the possibility to have two different setup for the same functionality, and believe it may be as easy as to set a switch or a config value, to let the user decide if Jebnix is made dependent on its parts or not with that user install.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmmm, maybe a compromise could be made so that each pod includes a computer and a single hard drive for example, and that you could add more additional part-hard drives if you wanted more code on board.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-20T12:30:00Z\u0022 title=\u002201/20/2014 12:30  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 20, 2014\u003C/time\u003E by nothke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2014-01-21T00:33:45Z","Content":"\n\u003Cp\u003EI am really happy to see the kOS idea picked up by someone obviously capable and willing. The coming period I will (un)fortunately be of limited use due to my (hopefully) graduation work, but I wish you all the best and will help where possible.\u003C/p\u003E\u003Cp\u003ESomething I wonder about is the language: Kevin had a very specific goal in mind when creating KerboScript. How are you going to extend the language without it being nether fish nor fowl. Without pursuing the same goals I guess there is a real danger of it being too simple for power users, while not providing any ease for first time users.\u003C/p\u003E\u003Cp\u003ECompiling the code does seem like a very interesting possibility. Although I think a (relatively slow) scripting language provides certain challenges, a fast compiled program combined with extended and extensive control over seperate inputs/control surfaces would enable users to create incredibly complex and amazing auto pilot systems.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-23T13:47:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ECompiling the code does seem like a very interesting possibility. Although I think a (relatively slow) scripting language provides certain challenges, a fast compiled program combined with extended and extensive control over seperate inputs/control surfaces would enable users to create incredibly complex and amazing auto pilot systems.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt could be implemented using a pseudo-compile pre-parse model like a lot of modern \u0022interpreted\u0022 scripting languages use. In this model, it behaves like an interpreted language in the sense that a user directly \u0022runs\u0022 the ASCII source code without making a binary code version first, but what the \u0022interpreter\u0022 actually does when you run it is take a first pass through the entire source code of the program before it starts doing anything, and it pre-compiles it up front into some internal tighter representation that\u0027s not quite machine code and not quite source code but something halfway between. Then it runs that.\u003C/p\u003E\u003Cp\u003EThe biggest advantage that model has in performance is that you don\u0027t pay the parsing cost repeatedly when running a loop, like you would when running a truly 100% interpreted language. If a 5-line loop runs 100 times, you pay the cost of parsing 5 lines of code, not the cost of parsing 500 lines of code.\u003C/p\u003E\u003Cp\u003EThe second advantage isn\u0027t about performance but about exposing syntax errors in the infrequently run code. In a truly 100% interpreted language, if there\u0027s code that normally never runs and only runs when certain exceptional conditions become true, the syntax of those statements is never properly checked until that condition happens to occur at runtime. Code that, for example, checks for weird cases that \u0022shouldn\u0027t happen\u0022, could have a secret hidden syntax error in it for years that never gets found because the code has to actually execute before the error is found. A pre-parse \u0022interpreted\u0022 language engine reports syntax errors in code regardless of whether it ends up ever executing or not.\u003C/p\u003E\u003Cp\u003EOn the topic of slow language challenges, while it\u0027s true that a slow language running slow code does sort of present a lot of fun challenges that it\u0027s been fun to work with in kOS, the brute force slow implementation of kOS has also created a problem of bogus simulation artifacts in the underlying KSP engine itself that are not meant to be part of that challenge. It\u0027s one thing for slow execution to cause your code to have poor reaction times. It\u0027s something else entirely for it to cause the entire universe itself to keep stuttering and halting because kOS is exceuting it\u0027s hooks slowly enough to clog up the KSP engine itself.\u003C/p\u003E\u003Cp\u003EThe model used by KSP to have Mods run \u0027hook\u0027 routines sort of requires those hooks to finish their tasks quickly. It\u0027s sort of like the bad old days of cooperative multitasking on Macs before they switched to running on UNIX. One slow \u0027citizen\u0027 can ruin it for the rest of the system very easily. In that regard, to make Jebnix play nice with other mods sort of requires that it be made faster and more efficient than kOS was.\u003C/p\u003E\n"},{"CreatedByName":"jxi24","CreatedById":102030,"CreatedDateTime":"2014-01-28T15:42:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nothke\u0022 data-cite=\u0022nothke\u0022\u003E\u003Cdiv\u003EJust got an idea:\u003Cp\u003EWhat about adding an ability to detect exceptions, and then, instead of just terminating the program, being able to do something else, like run an abort program. Sometimes, it happens that things happen very quickly, like launching or landing a rover, and you really want to have some fail-safe program behind it. Or you could even run a self-destruct program, as many real world rockets are adjusted to in case of a software error.\u003C/p\u003E\u003Cp\u003Efor example\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EIFEXCEPTION { RUN KerbalX_abort. }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnother idea would be to use a \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ETry ... Catch ... \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn order to have it run different programs based on the excpetion. Or something along those lines to do something different for different kinds of exceptions.\u003C/p\u003E\u003Cp\u003EAnd maybe also add the ability to throw our own exceptions if we have some numerical calculation that gets out of hand (error gets to large for example). I don\u0027t know, just throwing out some ideas.\u003C/p\u003E\n"},{"CreatedByName":"jxi24","CreatedById":102030,"CreatedDateTime":"2014-01-28T17:09:57Z","Content":"\n\u003Cp\u003EOn another note, I am also willing to help in testing if you need people.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T22:44:39Z","Content":"\n\u003Cp\u003EFirst of all, I\u0027d like to thank everyone for their continued support. Sorry I disappeared for a couple weeks, but I had a handful of emergencies all pop up at the same time.\u003C/p\u003E\u003Cp\u003EThe college semester has started, so most of my time is being dedicated towards my school work. However, work is continuing even if it doesn\u0027t look like it.\u003C/p\u003E\u003Cp\u003EA few weeks ago, I started working on a closely related project that will enable me to explore the idea of having an IMU that keeps track of the current pitch-roll-yaw angles, allowing the user to program their directions that way if they so choose. I had to stop working on that temporarily to finish another project (I\u0027m a very busy person, obviously), however, work will proceed again this week, and I think I\u0027ve got everything narrowed down.\u003C/p\u003E\u003Cp\u003ETwo things: \u003C/p\u003E\u003Cp\u003E1. No matter how long I might be quiet, this project will not die. Even when I\u0027m quiet, I\u0027m still working.\u003C/p\u003E\u003Cp\u003E2. Please please \u003Cstrong\u003Eplease PLEASE\u003C/strong\u003E read the first post on this thread before asking for a feature. The first post has a list of features that are probably going to be added. I kind of feel like a jerk whenever I have to point out that the requested feature is already on the list.\u003C/p\u003E\u003Cp\u003EAlso, check if the date/time on the \u0022Last Edited\u0022 part of the first post. If it\u0027s been changed since you\u0027ve last read it, you\u0027re going to miss something.\u003C/p\u003E\u003Cp\u003ENow I will respond to each of you individually.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T22:51:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FanaticalFighter\u0022 data-cite=\u0022FanaticalFighter\u0022\u003E\u003Cdiv\u003EWow, this will be amazing. Any idea when you\u0027ll be able to do the alpha testing? \u003Cp\u003EAlso, I have one small recommendation. Using kOS in Real Solar System, I couldn\u0027t connect to the archive (I think the location of Kerbin is hardcoded into kOS) Could you code in something that figures out where Kerbin is and does the whole antenna thing accordingly?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will look into this. I don\u0027t use Real Solar System, nor do I know how it works. So keep watch on the development so when testing does begin, you will be able to help me get it working with Real Solar System.\u003C/p\u003E\u003Cp\u003EI don\u0027t know when the alpha will be ready. I am hesitant to make an estimation because I\u0027m ALWAYS late when I do that. I consider this project still in the early stages. There are large chunks of the KSP API that I still need to learn, and get some additional talent aboard.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:01:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mihara\u0022 data-cite=\u0022Mihara\u0022\u003E\u003Cdiv\u003E/me peeks in.\u003Cp\u003EJust when I wanted to start working on kOS/RPM integration.\u003C/p\u003E\u003Cp\u003EI want a place where I can hook a terminal in, partless or not. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, I was really hoping I could figure out a way to make Jebnix work with RPM. I\u0027m working on a conceptual testbed for Jebnix\u0027s navigation system that uses RPM as it\u0027s GUI, and I\u0027d love to be able to use RPM as an optional console for Jebnix. The only thing I would need is the ability to get keyboard input from RPM.\u003C/p\u003E\u003Cp\u003EI\u0027m utterly unfamiliar with designing GUIs for KSP so I\u0027ll probably need a lot of guidance in this area. However, the RPM system is brilliantly easy to use from the programmer\u0027s end.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:13:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022willow\u0022 data-cite=\u0022willow\u0022\u003E\u003Cdiv\u003EInstead of building your own language, or continuing on the \u0022less than stellar\u0022 syntax of kOs.\u003Cp\u003EWhy not simply implement an existing game scripting library? Like Lua, or Javascript? \u003C/p\u003E\u003Cp\u003EThe obvious benefits are twofold...\u003C/p\u003E\u003Cp\u003EFirst of all you don\u0027t have to worry about language and syntax, only implementation, so you can spend all your time on getting the language to work with KSP well..\u003C/p\u003E\u003Cp\u003ESecondly. People don\u0027t need to learn a new language which in it\u0027s initial stages is likely to be very fickle and buggy. And they get to use existing editing tools like luaedit and learn from existing internet resources.\u003C/p\u003E\u003Cp\u003EYour work would then be restricted to handling in and output to and from the script. Meaning you get to add lots of features in little time once the initial plumbing is done.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are several reasons why I chose to continue using KerboScript.\u003C/p\u003E\u003Cp\u003E1. The language may have a variety of syntax issues, but it is incredibly easy to learn.\u003C/p\u003E\u003Cp\u003E2. I spent several weeks working on and perfecting a unified guidance system for my rockets, and all of it is written in KerboScript. Personally, I don\u0027t want to have to convert the whole thing to a different language.\u003C/p\u003E\u003Cp\u003E3. In order to implement a language, one must be intimately familiar with it, either by designing it from scratch, or knowing A LOT about it. I may not have designed KerboScript, but I do know it pretty well, and there are a few people around here that can help fill in the gaps in my knowledge. I do not know Lua, and I really don\u0027t like JavaScript, but I do know that KerboScript has a lot of potential if given a little TLC. \u003C/p\u003E\u003Cp\u003E4. I have done this type of thing before (including implementing a new language), and I know how to do it right. I\u0027ve been studying language design and implementation for several years.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:15:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI hadn\u0027t noticed this thread before. This would be good if it can be accomplished. It\u0027s a pretty ambitious set of goals.\u003Cp\u003EWhat are the plans for release?\u003C/p\u003E\u003Cp\u003E1 - Release nothing until all the goals in the bullet-point list are met.\u003C/p\u003E\u003Cp\u003E2 - Release when some of them are met, and plan to hit the rest in future updates.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m going to release as I get things done. My first goal is to have a version that works with the existing KerboScript language, and includes a few core language improvements (such as if-else) that are easier to implement from the beginning.\u003C/p\u003E\u003Cp\u003EFrom there, I will add features starting with language features and moving towards functional features, releasing every few weeks.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:38:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EDo you plan to use the addition operator (\u002B) for string concatenation like what kOS does now? Because if so then it would be nice if there was a way for the script writer to pick which meaning of \u0022\u002B\u0022 was meant - string concatenation or math addition. Imagine if you implemented automatic casting (which I think is the right way to go to make the language newbie-friendly), then it would be very odd and confusing if the following two statements get treated differently:\u003Cp\u003Eset val to \u002250\u0022.\u003C/p\u003E\u003Cp\u003Eset answer to val \u002B 1. // Result: answer = \u0022501\u0022 because \u0027\u002B\u0027 is concatenation.\u003C/p\u003E\u003Cp\u003Eset answer to val - 1. // Result: answer = 49 because \u0027-\u0027 is math subtraction and \u002250\u0022 got parsed into a number.\u003C/p\u003E\u003Cp\u003ETo have the \u0027-\u0027 and the \u0027\u002B\u0027 operator give such opposite behaviors would be weird, and it would mean if you really DO want addition you\u0027d have to subtract a negative, which would be really messy looking.\u003C/p\u003E\u003Cp\u003EOne possible solution: Don\u0027t overload the meaning of \u0022\u002B\u0022 to be concatenate anymore. Concatenate with a different operator. (problem, backward compatibility with kosscript).\u003C/p\u003E\u003Cp\u003EAnother possible solution: Although automatic casting exists, also provide a means for manual casting, so someone can do something like this:\u003C/p\u003E\u003Cp\u003Eset answer to val:AS_NUMBER \u002B 1.\u003C/p\u003E\u003Cp\u003E(I was thinking what would make a good \u0022cast\u0022 operator and thought the : suffix format might work for it and be in keeping with how the rest of kOS looks, as in: :AS_NUMBER or :AS_STRING. )\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for responding to this. I was hoping to get a response several weeks ago, but didn\u0027t, so I implemented this without anyone\u0027s judgement, but it can be easily changed.\u003C/p\u003E\u003Cp\u003EI have a different set of implementation rules for each operation. A Value object has an underlying type value, which determines whether the Value is a string, floating-point (double), integer, boolean, ordered pair, etc, etc, etc. Each binary operator compares the operands internal types, and performs casts based upon a set of order rules. For example:\u003C/p\u003E\u003Cp\u003EThe \u002B operator does a string concatenation first, only if one of the values has an internal type as a string. Then it tries it for floating-point, then integers, then booleans, then complex types.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static Value operator \u002B(Value a, Value \u003Cbr\u003E        {\u003Cbr\u003E            if (a.IsNull | b.IsNull) throw new NullReferenceException();\u003Cbr\u003E\u003Cbr\u003E            if ((a.Type == ValueTypes.String) | (b.Type == ValueTypes.String))\u003Cbr\u003E                return new Value(a.StringValue \u002B b.StringValue);\u003Cbr\u003E            else if ((a.Type == ValueTypes.Float) | (b.Type == ValueTypes.Float))\u003Cbr\u003E                return new Value(a.FloatValue \u002B b.FloatValue);\u003Cbr\u003E            else if ((a.Type == ValueTypes.Integer) | (b.Type == ValueTypes.Integer))\u003Cbr\u003E                return new Value(a.IntegerValue \u002B b.IntegerValue);\u003Cbr\u003E            else if ((a.Type == ValueTypes.Boolean) | (b.Type == ValueTypes.Boolean))\u003Cbr\u003E                return new Value((a.IntegerValue \u002B b.IntegerValue) != 0 ? true : false);\u003Cbr\u003E            else if ((a.Type == ValueTypes.OrderedPair) | (b.Type == ValueTypes.OrderedPair))\u003Cbr\u003E                return new Value(new OrderedPair(a.OrderedPairValue.X \u002B b.OrderedPairValue.X, a.OrderedPairValue.Y \u002B b.OrderedPairValue.Y));\u003Cbr\u003E            else\u003Cbr\u003E                return new Value();\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAlso, some operations cannot be performed on certain types as it is currently written.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset val to \u002250\u0022.\u003Cbr\u003Eset answer to val \u002B 1.\u003Cbr\u003Eprint answer.\u003Cbr\u003Eset answer to val - 1.\u003Cbr\u003Eprint answer.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWould result in.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E501\u003Cbr\u003EInvalidOperationException: Cannot perform subtraction with a string value.\u003Cbr\u003E501\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe second occurrence of \u0022501\u0022 will be because I don\u0027t plan on having a program halt because of an error unless it is explicitly told to do so in the code. The code will run into an exception at \u0022set answer to val - 1.\u0022, ignore the line, and execute the next.\u003C/p\u003E\u003Cp\u003EI really like your idea of explicit casting. Implementing that will solve the problem.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset val to \u002250\u0022.\u003Cbr\u003Eset answer to val:ToNumber \u002B 1.\u003Cbr\u003Eprint answer.\u003Cbr\u003Eset answer to val:ToNumber - 1.\u003Cbr\u003Eprint answer.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWould result in.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E51\u003Cbr\u003E49\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI could implement it as such:\u003C/p\u003E\u003Cp\u003EToInt - casts the value to an integer\u003C/p\u003E\u003Cp\u003EToFloat - casts the value to a double\u003C/p\u003E\u003Cp\u003EToNumber - if the value has a fractional value, converts it to a double. otherwise, converts it to an int.\u003C/p\u003E\u003Cp\u003EToString - casts the value to a string\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:39:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI think it makes sense to invent a Part for this - a small itty bitty thing the same size as the little science instruments like the Gravioli Detector of Seismometer. Then instead of using the orientation of the craft, you base it on the orientation of the part. Whichever way the distance-finder-part is pointed, that\u0027s the line it shoots its \u0022ray\u0022 in to look for intersecting terrain. Most of the time, you\u0027ll want to mount it aimed down to get the behavior you mention, but for other purposes you could mount it in other directions.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ve been wanting to make a part like this for a while, though it will be part of another project that I\u0027m also working on.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:46:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Rosco P. Coltrane\u0022 data-cite=\u0022Rosco P. Coltrane\u0022\u003E\u003Cdiv\u003EBesides wishing you good luck, I\u0027d also like to make a petition here: please document your stuff! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003Cp\u003EAs the author of an IDE for kOS looking into supporting Jebnix, lack of documentation is a hell of a problem. And for your potential users too.\u003C/p\u003E\u003Cp\u003EGood luck man!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrust me, I try to document EVERYTHING. Sometimes it\u0027s tough (I hate writing documentation), but if I don\u0027t document stuff, it comes back to bite me when I forget what I\u0027m doing exactly. Part of the project includes writing a thorough language specification. You\u0027ll find what I have done so far in the codebase wiki. It\u0027s not anywhere near finished, but it will detail all language keywords, functions, types, and other language features.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/griderd/Jebnix/wiki/KerboScript-Plus-Plus-Language-Specification\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix/wiki/KerboScript-Plus-Plus-Language-Specification\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:50:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EBecause this project looks ambitious and I therefore expect it will be quite a while before there\u0027s a release, I\u0027ll continue using eerandrake\u0027s attempts to make a kOS 10.0 that is compatible with KSP 0.23 in the meantime. But once this thing is working well I\u0027d definitely want to use it.\u003Cp\u003ETo that end, is backward compatibility with kOSscript really a necessary goal? If you\u0027re going to rebuild everything from the ground up anyway, and it will probably differ enough to require people to re-write scripts anyway (many scripts have weird twiddly behavior to work around bugs that you\u0027d hopefully be trying to get rid of), maybe it\u0027s not as important to make it kosscript compatible. I don\u0027t know - it\u0027s up to you at any rate. I wish you good luck. I want to use this.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKeeping compatibility with the older language is partially a selfish goal. I spent several weeks writing a unified guidance system that I have no urge to rewrite in it\u0027s entirety. However, I plan on allowing programmers to implement whatever language they like on the system. The front end and back ends are going to be two different systems.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-28T23:55:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EI am really happy to see the kOS idea picked up by someone obviously capable and willing. The coming period I will (un)fortunately be of limited use due to my (hopefully) graduation work, but I wish you all the best and will help where possible.\u003Cp\u003ESomething I wonder about is the language: Kevin had a very specific goal in mind when creating KerboScript. How are you going to extend the language without it being nether fish nor fowl. Without pursuing the same goals I guess there is a real danger of it being too simple for power users, while not providing any ease for first time users.\u003C/p\u003E\u003Cp\u003ECompiling the code does seem like a very interesting possibility. Although I think a (relatively slow) scripting language provides certain challenges, a fast compiled program combined with extended and extensive control over seperate inputs/control surfaces would enable users to create incredibly complex and amazing auto pilot systems.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOne of my goals for KerboScript\u002B\u002B (as I\u0027m calling it) is to make it as KerboScript compatible as possible. You\u0027ll still be able to run your old code with little to no modification. However, there will be a variety of additions to the language that will make it more powerful for the power user, without sacrificing the ease of the language.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-29T14:38:14Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003EKeeping compatibility with the older language is partially a selfish goal. I spent several weeks writing a unified guidance system that I have no urge to rewrite in it\u0027s entirety. However, I plan on allowing programmers to implement whatever language they like on the system. The front end and back ends are going to be two different systems.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETrue, but my point is that there will inevitably be incompatibilities with exisitng kosscript because of how quirky and weird kOS behaves and some of that quirky behavior you probably won\u0027t *want* to emulate as it\u0027s actually buggy design. That means people will have to go over their existing code anyway and find out why things changed, and that might make a clean break better.\u003C/p\u003E\u003Cp\u003EIt\u0027s a bit like the problem people have who implement WINE. Re-implementing the Windows API to work correctly actually isn\u0027t enough to make it compatibile. They also have to make it have the same BUGs and really stupid behaviors as exist in the original, even in places where the original behavior is clearly wrong, to make it really compatible.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-01-29T17:01:27Z","Content":"\n\u003Cp\u003EMust say I concur with Steven Mading here.\u003C/p\u003E\u003Cp\u003EThe history of Information Technology is filled with examples of poor solutions, being preferred over some more solid and straightforward ones just to keep backward compatibility. Just look at MS-DOS Memory Management, for one. Would be better to design without such constraints, and if required to allow backward compatibility by means of a dedicated additional plugin.\u003C/p\u003E\n"},{"CreatedByName":"Sacred Aardvark","CreatedById":85856,"CreatedDateTime":"2014-01-29T17:43:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EWould be better to design without such constraints, and if required to allow backward compatibility by means of a dedicated additional plugin.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELooking at the first post, isn\u0027t this what he is planning to do? There will be a separate dll for each language interpreter, just that the first interpreter will be for kerboScript. One could code a different one to interpret say lua and feed it to Jebnix for execution.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022woodywood245\u0022 data-cite=\u0022woodywood245\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003EJebnix will also include\u003C/strong\u003E a modularized system. The Jebnix computer will exist in one DLL, while the KerboScript\u002B\u002B engine will exist in another DLL. This will allow me to modify one without disrupting the other, and for myself and others to interchange scripting engines, or add additional scripting engines to the existing system. More detail to come.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2014-01-30T05:26:48Z","Content":"\n\u003Cp\u003EJust out of curiosity will this use the same mod plugin system, so that mods written to work with kOS will work with this without being changed?\u003C/p\u003E\n"},{"CreatedByName":"Rokker","CreatedById":15359,"CreatedDateTime":"2014-01-31T22:01:13Z","Content":"\n\u003Cp\u003EI have a few ideas, though they may be kind of hard to accomplish. One would be that as you progress through and unlock more of the tech tree or just certain branches, the amount of memory storage density of the part increases in a way sort of like how mechjeb unlocks more capabilities the farther into the tree you get. Another idea is to allow the exporting of data from the game into something like a .txt so that you can log certain things, like sensor readouts or fuel usage. Lastly, something I would like to see is for it to be easy to make parts from other mods easily compatible with the system. For example lets say I want to use the magnetometer from the KSP Interstellar mod. I would like to be able to write a simple .cfg and be able to activate and deactivate it through code, and if possible, obtain the number readouts from it and print them. Sorry if any of these features have been mentioned or are on the first post. I tried to read all the posts and everything in the first post, but I may have missed or forgotten something.\u003C/p\u003E\u003Cp\u003EEdit: Oh and also it would be nice if you could work with Cilph and see if we can finally get a RemoteTech 2 compatible computer. And along with being able to tell apoapsis and periapsis, a semi-major axis ability would be nice. Also, while loops would be nice.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-01T09:57:19Z\u0022 title=\u002202/01/2014 09:57  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 1, 2014\u003C/time\u003E by Rokker\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2014-01-31T22:21:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022willow\u0022 data-cite=\u0022willow\u0022\u003E\u003Cdiv\u003EInstead of building your own language, or continuing on the \u0022less than stellar\u0022 syntax of kOs.\u003Cp\u003EWhy not simply implement an existing game scripting library? Like Lua, or Javascript? \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is such a great idea. One can argue that even a language like Javascript is not \u0022Kerbalesque\u0022 enough but the syntax of kerboscript always drove me nuts. Not that it was a big problem, since kOS was somehow not able to control any rocket once it left the launchpad I wasn\u0027t using it anyway, but it would be so much easier if it\u0027s just using a well-documented language without issues around operators, etc.\u003C/p\u003E\n"},{"CreatedByName":"jxi24","CreatedById":102030,"CreatedDateTime":"2014-02-01T03:13:47Z","Content":"\n\u003Cp\u003EContinuing on this line of thought. The idea I had was adding in a communication delay based on the file size. I know that a signal delay was mentioned, but I am referring to uploading or downloading scripts from the mission control. Just like what would happen in the real world you have some speed of transmission of the data which can be upgraded in the tech tree. And maybe on top of that add the ability to use input files so that you can write a generic code you send up with the probe and then if you need to make changes just have a short file to be read by the script to preform the actions.\u003C/p\u003E\n"},{"CreatedByName":"Rokker","CreatedById":15359,"CreatedDateTime":"2014-02-01T09:50:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jxi24\u0022 data-cite=\u0022jxi24\u0022\u003E\u003Cdiv\u003EContinuing on this line of thought. The idea I had was adding in a communication delay based on the file size. I know that a signal delay was mentioned, but I am referring to uploading or downloading scripts from the mission control. Just like what would happen in the real world you have some speed of transmission of the data which can be upgraded in the tech tree. And maybe on top of that add the ability to use input files so that you can write a generic code you send up with the probe and then if you need to make changes just have a short file to be read by the script to preform the actions.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eso... sort of like science transmitting takes time and has to go in packets. I wouldn\u0027t be opposed to just using the stats of the antennas and their transfer rates.\u003C/p\u003E\n"},{"CreatedByName":"Garek","CreatedById":73214,"CreatedDateTime":"2014-02-01T10:39:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Rokker\u0022 data-cite=\u0022Rokker\u0022\u003E\u003Cdiv\u003EEdit: Oh and also it would be nice if you could work with Cilph and see if we can finally get a RemoteTech 2 compatible computer. And along with being able to tell apoapsis and periapsis, a semi-major axis ability would be nice. Also, while loops would be nice.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, RemoteTech 2 integration would be awesome, I can\u0027t imagine how one would do powered probe landings without it. About the SMA, isn\u0027t that just the average of Apoapsis and Periapsis heights plus body radius? Of course, having it in the standard library would be nice.\u003C/p\u003E\n"},{"CreatedByName":"Sacred Aardvark","CreatedById":85856,"CreatedDateTime":"2014-02-01T14:29:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kerbart\u0022 data-cite=\u0022Kerbart\u0022\u003E\u003Cdiv\u003E One can argue that even a language like Javascript is not \u0022Kerbalesque\u0022 enough but the syntax of kerboscript always drove me nuts.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027ll do KS over JS or lua any day. Only issue I had with KS was the fact that I kept using semicolons instead of periods, but that\u0027s not a big deal.\u003C/p\u003E\u003Cp\u003EIf kerboscript gets dropped, lets change to MEL! (or Ch, or Rexx, or Squirrel, or AngelScript, etc)\u003C/p\u003E\u003Cp\u003E[edit] reading this now it seems less lighthearted than I intended it to be :|\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-01T17:03:07Z\u0022 title=\u002202/01/2014 05:03  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 1, 2014\u003C/time\u003E by Sacred Aardvark\u003C/strong\u003E\n\u003C/span\u003E\n"}]}