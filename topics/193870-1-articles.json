{"TopicId":193870,"ForumId":20,"TopicTitle":"Tech Tree by Rocket Type","CreatedByName":"Probus","CreatedById":102512,"CreatedDateTime":"2020-05-14T15:54:08Z","PageNum":1,"Articles":[{"CreatedByName":"Probus","CreatedById":102512,"CreatedDateTime":"2020-05-14T15:54:09Z","Content":"\n\u003Cp\u003E\nWould anyone be interested in collaborating on a Tech Tree that was laid out by actual rocket types.\u00A0 I played with the idea a long time ago, but I was too busy to do it by myself.\u00A0 It looked something like this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022HRT.PNG\u0022 class=\u0022ipsImage\u0022 data-ratio=\u0022110.90\u0022 height=\u0022768\u0022 width=\u0022692\u0022 src=\u0022http://www.kersh.com/HRT.PNG\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nMaybe to the left would be international rockets and the right be US rockets.\u00A0 Or left to right by first launch date.\u00A0 But each branch would be a single rocket type with a few cross links.\u00A0 So Juno, Redstone, Atlas, Titan, Saturn I, Saturn V, Delta, Shuttle, Falcon 1, Falcon 9....\u00A0 Where maybe to the left you could start with R-7, Vostok, Soyuz, Proton, etc...\n\u003C/p\u003E\n\u003Cp\u003E\nMany stock parts would be depreciated and replaced with part packs like FASA, BDB, US/Soviet Launchers by\u00A0\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57210-frizzank/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257210\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57210-frizzank/\u0022 rel=\u0022\u0022\u003E@frizzank\u003C/a\u003E, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105588-cobaltwolf/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022105588\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105588-cobaltwolf/\u0022 rel=\u0022\u0022\u003E@CobaltWolf\u003C/a\u003E, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/97711-raidernick/\u0026amp;do=hovercard\u0022 data-mentionid=\u002297711\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/97711-raidernick/\u0022 rel=\u0022\u0022\u003E@raidernick\u003C/a\u003E, etc...\n\u003C/p\u003E\n\u003Cp\u003E\nHave a separate branch for things like science experiments, probes, space station parts...\n\u003C/p\u003E\n\u003Cp\u003E\nJust brainstorming.\u00A0 I just don\u0027t have time to do it all myself, but I wouldn\u0027t mind collaborating with a crew.\u00A0 Maybe each person could take on a rocket system.\u00A0 Some part packs are huge!\u00A0 And I\u0027m talking to you \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105588-cobaltwolf/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022105588\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/105588-cobaltwolf/\u0022 rel=\u0022\u0022\u003E@CobaltWolf\u003C/a\u003E\u00A0so rocket systems would be better allocated to different contributors and added 1 at a time.\n\u003C/p\u003E\n\u003Cp\u003E\nI would be willing to set up the tree.\u00A0 The tech tree editor I use (TED) can save the tree out as a stock tree (as well as a YongeTech tree).\n\u003C/p\u003E\n\u003Cp\u003E\nSome tech tree builders may be interested in contributing like \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/148945-pap1723/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022148945\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/148945-pap1723/\u0022 rel=\u0022\u0022\u003E@pap1723\u003C/a\u003E, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/83952-nertea/\u0026amp;do=hovercard\u0022 data-mentionid=\u002283952\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/83952-nertea/\u0022 rel=\u0022\u0022\u003E@Nertea\u003C/a\u003E,\u00A0\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/122369-thejesuit/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022122369\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/122369-thejesuit/\u0022 rel=\u0022\u0022\u003E@theJesuit\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Probus","CreatedById":102512,"CreatedDateTime":"2020-05-15T16:30:37Z","Content":"\n\u003Cp\u003E\nI\u0027ll take that as a complete lack of interest. lol\n\u003C/p\u003E\n\u003Cp\u003E\nWell, if anyone runs across this thread in the future and would like to put something together, just let me know.\n\u003C/p\u003E\n\u003Cp\u003E\nThanks!\n\u003C/p\u003E\n"},{"CreatedByName":"frizzank","CreatedById":57210,"CreatedDateTime":"2020-07-01T22:22:49Z","Content":"\n\u003Cp\u003E\nSorry for the late response but I think this is a great idea.\n\u003C/p\u003E\n\u003Cp\u003E\nI really like the idea of putting them on a timeline but I would do some digging and find out which ones were based on previous tech directly and make those dependencies.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nFor instance, the Saturn 1B was made up of 8 Redstone tanks clustered around a Jupiter tank.\n\u003C/p\u003E\n\u003Cp\u003E\nhttps://en.wikipedia.org/wiki/Saturn_IB\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"MKSheppard","CreatedById":53580,"CreatedDateTime":"2020-07-02T20:16:10Z","Content":"\n\u003Cp\u003E\nOkay, so you\u0027ll need Module Manager and then apply the following CFG file in your GameData Directory:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E//Add part name to description\n//Created by Tonka Crash in 179413-mod-to-show-part-name\n\n@PART[*]:FINAL { @description = #$description$ \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;color\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E#7F7F7F\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E [$name$]\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E }\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThis will add a part name to the game as a debug feature to the end of descriptions in everything.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\u003Cp\u003E\nAnother nice feature you can do for Quality of Life Improvements is this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E@PART[seatExternalCmd]  //EAS External Command Seat\n{\n%TechRequired = externalcontrol\n@description = #$description$ \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;color\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E#FF0000\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E[Stock KSP]\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Cimg class=\u0022ipsImage\u0022 alt=\u0022uuXewwx.png\u0022 src=\u0022https://i.imgur.com/uuXewwx.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"MKSheppard","CreatedById":53580,"CreatedDateTime":"2020-07-03T12:36:54Z","Content":"\n\u003Cp\u003E\nHow far have you gotten? I\u0027ve been working on a tech tree of my own for about a month now. If nothing else, I can send you lists full of stuff like:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E@PART[EnginePlate_2] //Stock Squad EP-25 Engine Plate (2.5m)\n{\n\t%TechRequired = liquid_rocketry_3\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThat you can then adapt, since the hardest part of starting a tech tree from scratch is getting partnames for everything and then remembering what they\u0027re for.\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2020-07-03T13:35:32Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223813550\u0022 data-ipsquote-contentid=\u0022193870\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221593720970\u0022 data-ipsquote-userid=\u002253580\u0022 data-ipsquote-username=\u0022MKSheppard\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, MKSheppard said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis will add a part name to the game as a debug feature to the end of descriptions in everything.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nOr you could install the mod Partinfo, which displays a bit more info for all parts:\n\u003C/p\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedauthorid=\u0022129964\u0022 data-embedcontent=\u0022\u0022 data-embedid=\u0022embed6080602298\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/182040-19x-partinfo/\u0026amp;do=embed\u0022 style=\u0022height:211px;max-width:502px;\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"linuxgurugamer","CreatedById":129964,"CreatedDateTime":"2020-07-03T14:04:44Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223813550\u0022 data-ipsquote-contentid=\u0022193870\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221593720970\u0022 data-ipsquote-userid=\u002253580\u0022 data-ipsquote-username=\u0022MKSheppard\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n17 hours ago, MKSheppard said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nOkay, so you\u0027ll need Module Manager and then apply the following CFG file in your GameData Directory:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E//Add part name to description\n//Created by Tonka Crash in 179413-mod-to-show-part-name\n\n@PART[*]:FINAL { @description = #$description$ \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;color\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E#7F7F7F\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E [$name$]\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E }\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThis will add a part name to the game as a debug feature to the end of descriptions in everything.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nAnother nice feature you can do for Quality of Life Improvements is this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E@PART[seatExternalCmd]  //EAS External Command Seat\n{\n%TechRequired = externalcontrol\n@description = #$description$ \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;color\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E#FF0000\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E[Stock KSP]\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/color\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nBoth are very elegant means of displaying the information.\u00A0 I like having alternatives, even if one is mine.\n\u003C/p\u003E\n\u003Cp\u003E\nBut I don\u0027t understand the second one.\u00A0 As it is, it will only touch the EAS External Command Set.\u00A0 Yet your example shows from Near Future Launch Vehicles in red.\u00A0 Did you paste the wrong stanza?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-03T14:08:22Z\u0022 title=\u002207/03/2020 02:08  PM\u0022 data-short=\u00224 yr\u0022\u003EJuly 3, 2020\u003C/time\u003E by linuxgurugamer\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"MKSheppard","CreatedById":53580,"CreatedDateTime":"2020-07-21T21:15:38Z","Content":"\n\u003Cp\u003E\nHere\u0027s a way to auto generate a tech tree config for using parts of a mod easily using Python 3.xx:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E#simply place this into a folder and run it.\n\nimport os\nimport re #regular expressions\n\n#variables\ncwd = os.getcwd() #This sets the current root working directory to that the python file is in.\nbasedirname = os.path.basename(os.getcwd()) #gets simple base name of directory\n\nKSPTitleCleaned = \u0022\u0022 #blank since it is used in IF loop\nRealTitleCleaned = \u0022\u0022 #blank since it is used in IF loop\nPartNameCleaned = \u0022\u0022 #blank since it is used in IF loop\n\n#function\ndef fixVariable(in_str):\n    return re.sub(\u0027^.*?= \u0027, \u0027\u0027, in_str) # this removes everything before the = sign in a string, plus the = sign itself.\n\nACRONYM = input(\u0022enter acronym (e.g. BDB) that will be used in filenames:\u0022)\n\nwith open(ACRONYM \u002B basedirname \u002B \u0022_DUMP.txt\u0022, \u0027w\u0027) as DumpFile:\n\n    for subdir, dirs, files in os.walk(cwd): #this walks through all subdirs\n\n        CurrentDir = subdir.replace(cwd, \u0022\u0022); #remove super long full directory listing\n        CurrentDir = CurrentDir[1:] #remove first character\n        CurrentDir = CurrentDir.replace(\u0022\\\\\u0022, \u0022 -- \u0022); # get rid of backslashes for neatness and to avoid loveing up CFGs\n        DumpFile.write(\u0022\\n\u0022)\n        DumpFile.write(\u0022 // \u0022 \u002B ACRONYM \u002B \u0022 -- \u0022 \u002B CurrentDir \u002B \u0022 =====================================================================\u0022 \u002B \u0022\\n\u0022)\n        \n        for file in files:\n            if file.endswith(\u0022.cfg\u0022):\n                \n                with open(os.path.join(subdir, file), \u0027r\u0027,encoding=\u0027utf-8\u0027,errors=\u0027ignore\u0027) as PartFile:\n                    \n                        for line in PartFile:\n                            if \u0027real_title\u0027 in line:\n                                RealTitleCleaned = line\n                                RealTitleCleaned = fixVariable(RealTitleCleaned)\n                                RealTitleCleaned = RealTitleCleaned.strip()\n\n                        if (RealTitleCleaned == \u0022\u0022): #if no real title entry....\n                            PartFile.seek(0) # go back to line 0 of partfile.\n\n                            for line in PartFile:\n                                if \u0027title\u0027 in line:\n                                    KSPTitleCleaned = line\n                                    KSPTitleCleaned = fixVariable(KSPTitleCleaned)\n                                    KSPTitleCleaned = KSPTitleCleaned.strip()\n\n                        PartFile.seek(0) # go back to line 0 of partfile.\n                        \n                        for line in PartFile:\n                            if \u0027name\u0027 in line:\n                                PartNameCleaned = line\n                                PartNameCleaned = fixVariable(PartNameCleaned)\n                                PartNameCleaned = PartNameCleaned.strip()\n                                break\n\n                        DumpFile.write(\u0022@PART[\u0022 \u002B PartNameCleaned \u002B \u0022]{%TechRequired = PLACEHOLDER} // \u0022\u002B RealTitleCleaned \u002B KSPTitleCleaned \u002B \u0022\\n\u0022)\n                        KSPTitleCleaned = \u0022\u0022 # zero it out since the IF branch may not always fire each time.\n                        RealTitleCleaned = \u0022\u0022 # zero it out since the IF branch may not always fire each time.\n\n        DumpFile.write(\u0022 // =========================================================================================\u0022 \u002B \u0022\\n\u0022)\n\nos.system(\u0022pause\u0022) #pause so we can see there are no errors.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThis generates a text file with the following parameters:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E // BDB -- Agena =====================================================================\n@PART[bluedog_agenaB //]{%TechRequired = PLACEHOLDER} // Advanced Agena engine upgrade\n@PART[bluedog_ATDA_Battery]{%TechRequired = PLACEHOLDER} // Augmented Target Docking Adapter Battery Unit\n@PART[bluedog_ATDA_RCS]{%TechRequired = PLACEHOLDER} // Augmented Target Docking Adapter RCS System\n@PART[bluedog_ATDA_VHFAntenna]{%TechRequired = PLACEHOLDER} // Augmented Target Docking Adapter VHF Antenna\n@PART[bluedog_AgenaA]{%TechRequired = PLACEHOLDER} // XLR81-BA-5 Agena-A/B Liquid Fuel Engine\n@PART[bluedog_AgenaB_FairingBase_Ranger]{%TechRequired = PLACEHOLDER} // JPL 0.9375m flared fairing base\n@PART[bluedog_AgenaD]{%TechRequired = PLACEHOLDER} // XLR81-BA-13 Agena-D Liquid Fuel Engine\n@PART[bluedog_AgenaD_FairingBase_LunarOrbiter]{%TechRequired = PLACEHOLDER} // Lunar Orbiter 0.9375m Flared Fairing Base\n@PART[bluedog_Agena_AInterstage]{%TechRequired = PLACEHOLDER} // Agena 1.25m to 0.9375m Interstage\n@PART[bluedog_Agena_Avionics]{%TechRequired = PLACEHOLDER} // Agena Telemetry Response Unit\n@PART[bluedog_Agena_Decoupler_LunarOrbiter]{%TechRequired = PLACEHOLDER} // Lunar Orbiter Payload Separation Mechanism\n@PART[bluedog_Agena_EngineMount]{%TechRequired = PLACEHOLDER} // Agena Engine Mount\n@PART[bluedog_Agena_EngineShroud]{%TechRequired = PLACEHOLDER} // Agena A/B Equipment Rack\n@PART[bluedog_Agena_Engine_8096C]{%TechRequired = PLACEHOLDER} // XLR81-8096C Advanced Agena Engine\n@PART[bluedog_Agena_Engine_XLR81]{%TechRequired = PLACEHOLDER} // Bell XLR-81-8096B\n@PART[bluedog_Agena_EquipmentRack]{%TechRequired = PLACEHOLDER} // Agena D Equipment Rack\n@PART[bluedog_Agena_MaterialsBay]{%TechRequired = PLACEHOLDER} // Agena 9.375m Materials Bay\n@PART[bluedog_Agena_MultiPayloadAdapter]{%TechRequired = PLACEHOLDER} // Agena Multiple Payload Adapter\n@PART[bluedog_Agena_RetroThrustModule]{%TechRequired = PLACEHOLDER} // Agena Retro Thrust Module\n@PART[bluedog_Agena_SLV3B_FairingBase]{%TechRequired = PLACEHOLDER} // Atlas SLV-3B 1.875m Adapter Fairing Base\n@PART[bluedog_Agena_SLV3B_Interstage]{%TechRequired = PLACEHOLDER} // Atlas SLV-3B 0.9375m Interstage\n@PART[bluedog_Agena_StraightInterstage]{%TechRequired = PLACEHOLDER} // Agena 0.9375 Interstage\n@PART[bluedog_Agena_Tank_Long]{%TechRequired = PLACEHOLDER} // Agena-240BD Liquid Fuel Tank\n@PART[bluedog_Agena_Tank_Short]{%TechRequired = PLACEHOLDER} // Agena-120A Liquid Fuel Tank\n@PART[bluedog_Agena_UllageMotor]{%TechRequired = PLACEHOLDER} // Agena A/B Ullage Motor\n@PART[bluedog_Carrack_AgenaAdapter]{%TechRequired = PLACEHOLDER} // Carrack/Agena Adapter\n@PART[bluedog_Carrack_StraightAdapter]{%TechRequired = PLACEHOLDER} // Carrack 1.5m Straight Adapter\n@PART[bluedog_Carrack_WideAdapter]{%TechRequired = PLACEHOLDER} // Carrack 2.1m  Wide Adapter\n@PART[bluedog_GATV_AcquisitionLight]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Acquisition Light\n@PART[bluedog_GATV_DockingPort]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Docking Port\n@PART[bluedog_GATV_LBandAntenna]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Command Antenna\n@PART[bluedog_GATV_MMDetector]{%TechRequired = PLACEHOLDER} // S-00M Micrometeroid Package\n@PART[bluedog_GATV_MaterialsBay]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle 0.9375m Materials Bay\n@PART[bluedog_GATV_NoseCone]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Nose Cone\n@PART[bluedog_GATV_NuclearPackage]{%TechRequired = PLACEHOLDER} // N-00K Nuclear Package\n@PART[bluedog_GATV_RunningLight]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Running Light\n@PART[bluedog_GATV_SPS]{%TechRequired = PLACEHOLDER} // Model 8250 Agena-D Secondary Engine\n@PART[bluedog_GATV_SPS_LFO]{%TechRequired = PLACEHOLDER} // Model 8250-B Agena-D Secondary Engine\n@PART[bluedog_GATV_SPS_RCS]{%TechRequired = PLACEHOLDER} // Model 8250-C Agena-D Secondary Engine\n@PART[bluedog_GATV_SpiralAntenna]{%TechRequired = PLACEHOLDER} // Agena Target Vehicle Spiral Command Antenna\n@PART[bluedog_Keyhole_Camera_KH1]{%TechRequired = PLACEHOLDER} // KH-1 Corona Camera System\n@PART[bluedog_Keyhole_Camera_KH4]{%TechRequired = PLACEHOLDER} // KH-4 Corona Camera System\n@PART[bluedog_Keyhole_Camera_KH4B]{%TechRequired = PLACEHOLDER} // KH-4B Corona Camera System\n@PART[bluedog_Keyhole_Camera_KH7]{%TechRequired = PLACEHOLDER} // KH-7 Gambit Camera System\n@PART[bluedog_Keyhole_Camera_KH8]{%TechRequired = PLACEHOLDER} // KH-8 Gambit 3 Camera System\n@PART[bluedog_Keyhole_DualAdapter]{%TechRequired = PLACEHOLDER} // Keyhole Dual Adapter\n@PART[bluedog_Keyhole_OCV_KH7]{%TechRequired = PLACEHOLDER} // KH-7 \u0022Gambit\u0022 Orbital Control Vehicle\n@PART[bluedog_Keyhole_RVAdapter]{%TechRequired = PLACEHOLDER} // Keyhole RVA1 0.9375m to 0.625m Adapter\n@PART[bluedog_Titan3B_Interstage]{%TechRequired = PLACEHOLDER} // Titan IIIB 1.875m to 0.9375m Adapter Interstage\n@PART[bluedog_agenaAntenna]{%TechRequired = PLACEHOLDER} // Agena Command Antenna\n@PART[bluedog_agenaLongTank]{%TechRequired = PLACEHOLDER} // Agena-200D Liquid Fuel Tank\n@PART[bluedog_agenaLongWhiteTank]{%TechRequired = PLACEHOLDER} // Agena-200 Liquid Fuel Tank\n@PART[bluedog_agenaMediumTank]{%TechRequired = PLACEHOLDER} // Agena-140B Liquid Fuel Tank\n@PART[bluedog_agenaNoseCone]{%TechRequired = PLACEHOLDER} // Agena Nose Cone\n@PART[bluedog_agenaPort]{%TechRequired = PLACEHOLDER} // Agena Docking Port\n@PART[bluedog_agenaProbeCore]{%TechRequired = PLACEHOLDER} // Agena Telemetry Response Unit\n@PART[bluedog_agenaSecondaryEngine]{%TechRequired = PLACEHOLDER} // Model 8250 Agena-D Secondary Engine\n@PART[bluedog_agenaShortTank]{%TechRequired = PLACEHOLDER} // Agena-70W Liquid Fuel Tank\n@PART[bluedog_agenaShortTankM]{%TechRequired = PLACEHOLDER} // Agena-70 Liquid Fuel Tank\n // =========================================================================================\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nYou\u0027ll still have to do cleanup work, but most of the hard work is done for you, and you can focus on where to assign parts in your tech tree, instead of having to copy partnames.\n\u003C/p\u003E\n"},{"CreatedByName":"MKSheppard","CreatedById":53580,"CreatedDateTime":"2020-07-22T21:52:59Z","Content":"\n\u003Cp\u003E\nUpdated python file that handles localizations (sorta).\u003Cbr\u003E\u003Cbr\u003E\nYou still have to copy and paste the localization file to the directory the python file is in, and it must be named \u0022en-us.txt\u0022\n\u003C/p\u003E\n\u003Cp\u003E\nBut that\u0027s marginal amounts of work compared to copying names/partIDs by hand.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E#simply place this into a folder and run it.\n\nimport os\nimport re #regular expressions\nimport pathlib\n\n####################################################################################\n#variables\n####################################################################################\n\ncwd = os.getcwd() #This sets the current root working directory to that the python file is in.\nbasedirname = os.path.basename(os.getcwd()) #gets simple base name of directory\n\nKSPTitleCleaned = \u0022\u0022 #blank since it is used in IF loop\nRealTitleCleaned = \u0022\u0022 #blank since it is used in IF loop\nPartNameCleaned = \u0022\u0022 #blank since it is used in IF loop\nBulkhead = \u0022\u0022 #blank since it is used in IF loop\n\nLocalizationIndex = [] #create here outside of IF loop.\nLocalizationString = [] #create here outside of IF loop.\nLOC_INDEX = 0  #create here outside of IF loop.\n\n#############################################################################\n#functions\n#############################################################################\n\ndef fixVariable(in_str):\n    return re.sub(\u0027^.*?= \u0027, \u0027\u0027, in_str) # this removes everything before the = sign in a string, plus the = sign itself.\n\ndef LoadVariableBeforeSign(in_str):\n    return re.sub(\u0027\\= \u0027, \u0027\u0027, in_str) # this removes everything before the = sign in a string, plus the = sign itself.\n\n############################################################################\n\nprint(\u0022NOTE: If this contains localization strings, you must have the localization file \u0027en-us.txt\u0027 in the same directory as the python file for it to function correctly!\u0022)\nprint(\u0022\u0022)\nACRONYM = input(\u0022enter acronym (e.g. BDB) that will be used in filenames:\u0022)\n\n################################################################################\n#We do a localization scan and dump first.\n\nLocalizationFile = pathlib.Path(\u0022en-us.txt\u0022)\n\nif LocalizationFile.exists(): #if this file exists\n    print(\u0022Localization File Exists....\u0022)\n    \n    with open(LocalizationFile, \u0027r\u0027,encoding=\u0027utf-8\u0027,errors=\u0027ignore\u0027) as LocalFile:\n        \n        for line in LocalFile:\n            \n            if \u0027#LOC\u0027 in line: # we now load the index headers into the list\n                String = line\n                String = String.split(\u0027=\u0027, 1) [0]\n                String = String.strip()\n                LocalizationIndex.append(String)\n\n        print(\u0022Localization Headers Loaded....\u0022)\n        LocalFile.seek(0) # go back to line 0 of partfile.\n                        \n        for line in LocalFile:\n            \n            if \u0027#LOC\u0027 in line: # we now load the text into the list\n                String = line\n                String = String.split(\u0027=\u0027, 1) [1]\n                String = String.strip()\n                LocalizationString.append(String)\n\n        print(\u0022Localization Strings Loaded...\u0022)\n\n####################\n# Now that we have all the data loaded, we can now do our parts.\n\nwith open(ACRONYM \u002B \u0022_DUMP.txt\u0022, \u0027w\u0027) as DumpFile:\n\n    for subdir, dirs, files in os.walk(cwd): #this walks through all subdirs\n\n        CurrentDir = subdir.replace(cwd, \u0022\u0022); #remove super long full directory listing\n        CurrentDir = CurrentDir[1:] #remove first character\n        CurrentDir = CurrentDir.replace(\u0022\\\\\u0022, \u0022 -- \u0022); # get rid of backslashes for neatness and to avoid loveing up CFGs\n        DumpFile.write(\u0022\\n\u0022)\n        DumpFile.write(\u0022 // \u0022 \u002B ACRONYM \u002B \u0022 -- \u0022 \u002B CurrentDir \u002B \u0022 =====================================================================\u0022 \u002B \u0022\\n\u0022)\n        \n        for file in files:\n            if file.endswith(\u0022.cfg\u0022):\n                \n                with open(os.path.join(subdir, file), \u0027r\u0027,encoding=\u0027utf-8\u0027,errors=\u0027ignore\u0027) as PartFile:\n                    \n                        for line in PartFile:\n                            if \u0027real_title\u0027 in line:\n                                RealTitleCleaned = line\n                                RealTitleCleaned = fixVariable(RealTitleCleaned)\n                                RealTitleCleaned = RealTitleCleaned.strip()\n\n                        if (RealTitleCleaned == \u0022\u0022): #if no real title entry....\n                            PartFile.seek(0) # go back to line 0 of partfile.\n\n                            for line in PartFile:\n                                if \u0027title\u0027 in line:\n                                    KSPTitleCleaned = line\n                                    KSPTitleCleaned = fixVariable(KSPTitleCleaned)\n                                    KSPTitleCleaned = KSPTitleCleaned.strip()\n\n                                    #We now have to do error checking because of stupid localization.\n                                    if \u0022#LOC\u0022 in KSPTitleCleaned: #if the string contains a localization ID...\n                                        LOC_INDEX = LocalizationIndex.index(KSPTitleCleaned) # we get the localization index.\n                                        KSPTitleCleaned = LocalizationString[LOC_INDEX] #grab it out of the string\n                                    \n                        PartFile.seek(0) # go back to line 0 of partfile.\n                        \n                        for line in PartFile:\n                            if \u0027name\u0027 in line:\n                                PartNameCleaned = line\n                                PartNameCleaned = fixVariable(PartNameCleaned)\n                                PartNameCleaned = PartNameCleaned.strip()\n                                break\n\n                        PartFile.seek(0) # go back to line 0 of partfile.\n\n                        for line in PartFile:\n                            if \u0027bulkheadProfiles\u0027 in line:\n                                Bulkhead = line\n                                Bulkhead = fixVariable(Bulkhead)\n                                Bulkhead = Bulkhead.strip()\n\n                        DumpFile.write(\u0022@PART[\u0022 \u002B PartNameCleaned \u002B \u0022]{%TechRequired = PLACEHOLDER} // \u0022\u002B RealTitleCleaned \u002B KSPTitleCleaned \u002B \u0022 (\u0022 \u002B Bulkhead \u002B \u0022)\\n\u0022)\n                        KSPTitleCleaned = \u0022\u0022 # zero it out since the IF branch may not always fire each time.\n                        RealTitleCleaned = \u0022\u0022 # zero it out since the IF branch may not always fire each time.\n                        Bulkhead = \u0022\u0022 # zero it out since the IF branch may not always fire each time.\n                        LOC_INDEX = 0  # zero it out since the IF branch may not always fire each time.\n\n        DumpFile.write(\u0022 // =========================================================================================\u0022 \u002B \u0022\\n\u0022)\n\nos.system(\u0022pause\u0022) #pause so we can see there are no errors.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nIt basically causes this to go from:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E // BDB -- SOYUZ =====================================================================\n@PART[tantares_adapter_s0p5_s0_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_adapter_s0p5_s0_1 (size1, size0p5)\n@PART[tantares_adapter_s1_s0p5_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_adapter_s1_s0p5_1 (size1, size0p5)\n@PART[tantares_adapter_s1_s0_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_adapter_s1_s0_1 (size1, size0)\n@PART[tantares_basic_engine_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_basic_engine_s1_1 (size1)\n@PART[tantares_basic_fuel_tank_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_basic_fuel_tank_s1_1 (size1)\n@PART[tantares_crew_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_crew_s1_1 (size1, size0)\n@PART[tantares_decoupler_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_decoupler_s1_1 (size1)\n@PART[tantares_engine_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_engine_s1_1 (size1)\n@PART[tantares_fuel_tank_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_fuel_tank_s1_1 (size1)\n@PART[tantares_heatshield_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_heatshield_s1_1 (size1)\n@PART[tantares_orbital_module_s1_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_orbital_module_s1_1 (size0p5, size0)\n@PART[tantares_orbital_module_s1_2]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_orbital_module_s1_2 (size0p5, size0)\n@PART[tantares_orbital_module_s1_3]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_orbital_module_s1_3 (size0p5, size0)\n@PART[tantares_orbital_module_s1_4]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_orbital_module_s1_4 (size1)\n@PART[tantares_parachute_s0_1]{%TechRequired = PLACEHOLDER} // #LOC_tantares_tantares_parachute_s0_1 (size0)\n // =========================================================================================\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nTo this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E // BDB -- SOYUZ =====================================================================\n@PART[tantares_adapter_s0p5_s0_1]{%TechRequired = PLACEHOLDER} // Tantares Size 0.5 to Size 0 Adapter (size1, size0p5)\n@PART[tantares_adapter_s1_s0p5_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 to Size 0.5 Adapter (size1, size0p5)\n@PART[tantares_adapter_s1_s0_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 to Size 0 Adapter (size1, size0)\n@PART[tantares_basic_engine_s1_1]{%TechRequired = PLACEHOLDER} // Tantares S5.35 \u0022Rullekasse\u0022 Propulsion Unit (size1)\n@PART[tantares_basic_fuel_tank_s1_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 Basic Service Compartment (size1)\n@PART[tantares_crew_s1_1]{%TechRequired = PLACEHOLDER} // Tantares 12-A \u0022Vingleboks\u0022 Crew Capsule (size1, size0)\n@PART[tantares_decoupler_s1_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 Separator (size1)\n@PART[tantares_engine_s1_1]{%TechRequired = PLACEHOLDER} // Tantares S5.80 \u0022Vognkasse\u0022 Propulsion Unit (size1)\n@PART[tantares_fuel_tank_s1_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 Service Compartment (size1)\n@PART[tantares_heatshield_s1_1]{%TechRequired = PLACEHOLDER} // Tantares Size 1 Heatshield (size1)\n@PART[tantares_orbital_module_s1_1]{%TechRequired = PLACEHOLDER} // Tantares 93-A \u0022Eldstesf\u00E6re\u0022 Orbital Module (size0p5, size0)\n@PART[tantares_orbital_module_s1_2]{%TechRequired = PLACEHOLDER} // Tantares 93-B \u0022Eldresf\u00E6re\u0022 Orbital Module (size0p5, size0)\n@PART[tantares_orbital_module_s1_3]{%TechRequired = PLACEHOLDER} // Tantares 93-C \u0022Nysf\u00E6re\u0022 Orbital Module (size0p5, size0)\n@PART[tantares_orbital_module_s1_4]{%TechRequired = PLACEHOLDER} // Tantares 12-D \u0022Kopiboks\u0022 Orbital Module (size1)\n@PART[tantares_parachute_s0_1]{%TechRequired = PLACEHOLDER} // Tantares Size 0 Inline Parachute (size0)\n // =========================================================================================\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-22T21:55:11Z\u0022 title=\u002207/22/2020 09:55  PM\u0022 data-short=\u00223 yr\u0022\u003EJuly 22, 2020\u003C/time\u003E by MKSheppard\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Redleg1","CreatedById":156723,"CreatedDateTime":"2020-07-27T05:21:25Z","Content":"\n\u003Cp\u003E\nDang I can\u0027t believe i just found this thread!\u00A0 I have been working on a personnel version of the RP1 tech tree and was literally considering starting something along these lines.\u00A0 I was planning to make clusters of tech based on certain launchers or space vehicles, mostly from BDB but also the X-20 Moroz mod, the new X-33 mod from Angel125 and a few others.\u00A0 Please let me know you are still interested in working on this and if I can be of assistance.\u00A0 I literally have nothing else to do for the next 10 days so it would be a great way to fill my time.\n\u003C/p\u003E\n"}]}