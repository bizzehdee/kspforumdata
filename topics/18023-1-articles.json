{"TopicId":18023,"ForumId":29,"TopicTitle":"Help! OnUpdate() never seems to get called","CreatedByName":"Echo 8 \u00C3\u0192\u00E2\u20AC\u00B0R\u00C3\u0192\u00E2\u201A\u00AC","CreatedById":37973,"CreatedDateTime":"2012-08-28T13:25:02Z","PageNum":1,"Articles":[{"CreatedByName":"Echo 8 \u00C3\u0192\u00E2\u20AC\u00B0R\u00C3\u0192\u00E2\u201A\u00AC","CreatedById":37973,"CreatedDateTime":"2012-08-28T13:25:02Z","Content":"\n\u003Cp\u003EI\u0027ve been trying to make a PartModule that plays an animation when a key is pressed. Unfortunately, OnUpdate() (and OnFixedUpdate() for that matter) never seems to get called, and I can\u0027t figure out why.\u003C/p\u003E\u003Cp\u003EI\u0027ve stuck Debug.Log() calls in each overriden method, and they all show up at some point in the Debug Console, so I know that my PartModule is being loaded by KSP. The Debug Console also prints out \u0027[EE.Fuselage.Roof.Bay]: Activated\u0027 after I activate the first stage of my test spaceplane, so I\u0027m pretty sure that the part is in an active state at some point as well.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic enum AnimationState : int {\u003Cbr\u003E\u003Cbr\u003E AtBeginning = -2,\u003Cbr\u003E AtEnd = 2,\u003Cbr\u003E PlayForwards = 1,\u003Cbr\u003E PlayBackwards = -1\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Epublic class ModuleAnimatedPart : PartModule {\u003Cbr\u003E\u003Cbr\u003E [KSPField]\u003Cbr\u003E public string animationName;\u003Cbr\u003E\u003Cbr\u003E [KSPField]\u003Cbr\u003E public string activationKey;\u003Cbr\u003E\u003Cbr\u003E [KSPField]\u003Cbr\u003E public float animationState;\u003Cbr\u003E\u003Cbr\u003E // Hackish workaround to avoid having to convert from the float KSPField and integer enum values\u003Cbr\u003E private AnimationState AniState {\u003Cbr\u003E get {\u003Cbr\u003E return (AnimationState)((int)animationState);\u003Cbr\u003E }\u003Cbr\u003E set {\u003Cbr\u003E animationState = (float)((int)value);\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Constructor style setup.\u003Cbr\u003E /// Called in the Part\\\u0027s Awake method. \u003Cbr\u003E /// The model may not be built by this point.\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E public override void OnAwake() {\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnAwake\u0022);\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Called during the Part startup.\u003Cbr\u003E /// StartState gives flag values of initial state\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E public override void OnStart(StartState State)\u003Cbr\u003E {\u003Cbr\u003E // Ensure it only runs once per call to Play()\u003Cbr\u003E this.animation[this.animationName].wrapMode = WrapMode.Once;\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnStart\u0022);\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Per-frame update\u003Cbr\u003E /// Called ONLY when Part is ACTIVE!\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E public override void OnUpdate() {\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnUpdate\u0022);\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] animationState: \u0022 \u002B this.animationState);\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] activationKey Pressed: \u0022 \u002B Input.GetKey(this.activationKey));\u003Cbr\u003E // Getting desperate. Throw an exception just so something will show up\u003Cbr\u003E throw new Exception(\u0022[ModAnimatedPart] OnUpdate - Test Exception\u0022);\u003Cbr\u003E switch (AniState) {\u003Cbr\u003E case AnimationState.AtBeginning:\u003Cbr\u003E if (Input.GetKey(this.activationKey)) {\u003Cbr\u003E this.AniState = AnimationState.PlayForwards;\u003Cbr\u003E this.animation[this.animationName].speed = 1;\u003Cbr\u003E this.animation.Play(this.animationName);\u003Cbr\u003E }\u003Cbr\u003E break;\u003Cbr\u003E\u003Cbr\u003E case AnimationState.AtEnd:\u003Cbr\u003E if (Input.GetKey(this.activationKey)) {\u003Cbr\u003E this.AniState = AnimationState.PlayForwards;\u003Cbr\u003E this.animation[this.animationName].speed = -1;\u003Cbr\u003E this.animation.Play(this.animationName);\u003Cbr\u003E }\u003Cbr\u003E break;\u003Cbr\u003E\u003Cbr\u003E case AnimationState.PlayForwards:\u003Cbr\u003E if (!this.animation.IsPlaying(this.animationName)) {\u003Cbr\u003E this.AniState = AnimationState.AtEnd;\u003Cbr\u003E }\u003Cbr\u003E break;\u003Cbr\u003E\u003Cbr\u003E case AnimationState.PlayBackwards:\u003Cbr\u003E if (!this.animation.IsPlaying(this.animationName)) {\u003Cbr\u003E this.AniState = AnimationState.AtBeginning;\u003Cbr\u003E }\u003Cbr\u003E break;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Per-physx-frame update\u003Cbr\u003E /// Called ONLY when Part is ACTIVE!\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E public override void OnFixedUpdate() {\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnFixedUpdate\u0022);\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Called when PartModule is asked to save its values.\u003Cbr\u003E /// Can save additional data here.\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E /// \u0026lt;param name=\u0027node\u0027\u0026gt;The node to save in to\u0026lt;/param\u0026gt;\u003Cbr\u003E public override void OnSave(ConfigNode Node) {\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnSave\u0022);\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E /// \u0026lt;summary\u0026gt;\u003Cbr\u003E /// Called when PartModule is asked to load its values.\u003Cbr\u003E /// Can load additional data here.\u003Cbr\u003E /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E /// \u0026lt;param name=\u0027node\u0027\u0026gt;The node to load from\u0026lt;/param\u0026gt;\u003Cbr\u003E public override void OnLoad(ConfigNode Node)\u003Cbr\u003E {\u003Cbr\u003E Debug.Log(\u0022[ModAnimatedPart] OnLoad\u0022);\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E}\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E\u003Cbr\u003E// --- general parameters ---\u003Cbr\u003Ename = EE_Fuselage_Roof_Bay\u003Cbr\u003Emodule = Part\u003Cbr\u003Eauthor = Echo 8 \u00C3\u0192\u00E2\u20AC\u00B0R\u00C3\u0192\u00E2\u201A\u00AC\u003Cbr\u003E\u003Cbr\u003E// --- asset parameters ---\u003Cbr\u003Emesh = model.mu\u003Cbr\u003E\u003Cbr\u003E// --- node definitions ---\u003Cbr\u003Enode_stack_floor = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003E\u003Cbr\u003E// --- editor parameters ---\u003Cbr\u003Ecost = 240\u003Cbr\u003Ecategory = 3\u003Cbr\u003Esubcategory = 0\u003Cbr\u003Etitle = Fuselage Mk III, Cargo Bay, Roof, Bay Doors\u003Cbr\u003Emanufacturer = Echo Enterprises\u003Cbr\u003Edescription = A bay door equipped roof to a Fuselage Mk 3 compatible cargo bay.\u003Cbr\u003E\u003Cbr\u003E// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision\u003Cbr\u003EattachRules = 1,0,0,0,1\u003Cbr\u003E\u003Cbr\u003E// --- standard part parameters ---\u003Cbr\u003Emass = 0.2\u003Cbr\u003EdragModelType = default\u003Cbr\u003Emaximum_drag = 0.1\u003Cbr\u003Eminimum_drag = 0.15\u003Cbr\u003EangularDrag = 1\u003Cbr\u003EcrashTolerance = 30\u003Cbr\u003EmaxTemp = 2900\u003Cbr\u003E\u003Cbr\u003EMODULE {\u003Cbr\u003E name = ModuleAnimatedPart\u003Cbr\u003E animationName = RoofOpening\u003Cbr\u003E activationKey = Z\u003Cbr\u003E animationState = -2\u003Cbr\u003E}\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// Kerbal Space Program - Part Config\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"Echo 8 \u00C3\u0192\u00E2\u20AC\u00B0R\u00C3\u0192\u00E2\u201A\u00AC","CreatedById":37973,"CreatedDateTime":"2012-08-30T15:20:13Z","Content":"\n\u003Cp\u003ENever mind, it spontaneously decided to start working.\u003C/p\u003E\n"}]}