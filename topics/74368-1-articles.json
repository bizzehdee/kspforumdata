{"TopicId":74368,"ForumId":29,"TopicTitle":"Get any arbitrary velocity vector expressed in surface-relative frame of reference?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-06-07T03:26:15Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-06-07T03:26:15Z","Content":"\n\u003Cp\u003EYou can get the surface velocity of a vessel using Vessel.srf_velocity.\u003C/p\u003E\u003Cp\u003EBut looking all through here:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/Anatid/XML-Documentation-for-the-KSP-API\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Anatid/XML-Documentation-for-the-KSP-API\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI can\u0027t find the way to get the same information about a celestial body orbiting its primary celestial body. If a vessel was in orbit around Kerbin in a circular orbit at 11,400,000 altitude, it could report both its orbital velocity and its surface velocity relative to Kerbin. But when the Mun is in orbit around Kerbin at that distance, it can\u0027t. It only gives its orbital velocity. Is there a way to get its surface velocity too?\u003C/p\u003E\u003Cp\u003EI tried calling CelestialBody.GetSrfVelocity() but as far as I can tell it always returns (0,0,0) - making me think it\u0027s the velocity relative to the body itself rather than the velocity relative to its parent it\u0027s orbiting.\u003C/p\u003E\u003Cp\u003EIt would make sense if CelestialBody had a frame of reference transformation function that took any orbital velocity and returned the surface velocity version of it, but I can\u0027t seem to find it.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-06-07T04:02:38Z","Content":"\n\u003Cp\u003EWow bad timing. Answered my own question almost right after I asked it. \u003C/p\u003E\u003Cp\u003EThe answer is this:\u003C/p\u003E\u003Cp\u003Eassuming b = a CelestialBody\u003C/p\u003E\u003Cp\u003Eand parent = that CelestialBody\u0027s parent body.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E     surfaceVelocity =  b.orbit.GetVel() - parent.getRFrmVel( b.position );\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EgetRFrmVel() is the conversion I was looking for. You pass in a position in Unity world 3D coords, and it returns the velocity vector representing the offset difference between orbital and surface velocities at that location. You have to tell it the position, of course, because the closer to the equator plane the object is, the bigger the difference between the two is. An object above the north pole would show zero difference between the two.\u003C/p\u003E\n"}]}