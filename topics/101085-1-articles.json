{"TopicId":101085,"ForumId":36,"TopicTitle":"[WIP] Concept magnetohydrodynamic solar sails","CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-02T12:52:13Z","PageNum":1,"Articles":[{"CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-02T12:52:13Z","Content":"\n\u003Cp\u003ESo I want to build an add on that models magnetohydrodynamic solar sail. This is a field of plasma that catches the solar wind and uses that pressure to provide a vessel with thrust. These sails are like the solar sails that have been talk about before but they have an advantage over a standard solar sail, being a plasma field they are not restricted to the mass you can lift into orbit. A field can be kilometers across without having to lift that mass into orbit.\u003C/p\u003E\u003Cp\u003EThe hard part I see is that thrust is still very small, in the real world you would open the sails and leave them open for weeks to move a vehicle from Earth to the Mars. That does not really work in KSP you can not (without more mods that allow for independent actions) set the sails on a ship to Jool and then leave. You have to stay with the vessel while under thrust.\u003C/p\u003E\u003Cp\u003ETo work within the game limitations I think that the engine would work more like a thruster, It would have to have a significant Thrust but consume no fuel. To balance this engine against the rest of the game I would set up a couple of limitations; First it could not be activated inside the SOI of any planet or moon (this is a real world limitation as you would not want to drag a multi-kilometer electromagnet through the magnetosphere of a planet), Second limitation would be based on the solar panel model (the more sunlight your sail gets the more thrust you get). \u003C/p\u003E\u003Cp\u003EAs for a model I do not have one yet what I would like is an aurora borealis effect over an area around the ship. My thought on an easy early mock up would be using a stock fuel tank and 3 or 4 of the Giant solar panels. The tank would stand in for the field generator and the solar panels for the field. \u003C/p\u003E\u003Cp\u003EPlease tell me what you think.\u003C/p\u003E\n"},{"CreatedByName":"nothingSpecial","CreatedById":118683,"CreatedDateTime":"2015-03-02T13:29:36Z","Content":"\n\u003Cp\u003EYou can also add a capacitor-part for balance. It was possible in KSP Interstellar to charge up part with custom resource during timewarp, so while you can\u0027t sit through week-long burn, you can wrap for week-long recharge (also only in sun SOI), deploy magnetic field and then have thrust based on distance to Sun for time based on stored energy capacity. Maybe not realistic in process, but more bearable gameplay-wise and for the state of bodies the result will be almost the same.\u003C/p\u003E\n"},{"CreatedByName":"noonespecial","CreatedById":81942,"CreatedDateTime":"2015-03-03T01:34:07Z","Content":"\n\u003Cp\u003EThere is a working solar sail in the Interstellar Mod. Take a look to see how he did it. It also works through timewarp.\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2015-03-03T02:41:45Z","Content":"\n\u003Cp\u003EFirst thing that popped into my mind when you mentioned the modeling part was that the effect RoverDude used for his Alcubierre drive would be perfect for this \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/100798\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/100798\u003C/a\u003E.\u003C/p\u003E\n"},{"CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-03T15:08:49Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EThe Alcubierre drives are far to fast, any drive that can instantly push you to a significant percentage of lightspeed is just way over powered. In reality those drives will require the same amount of power generation as a medium sized star. I want something that is less Star Trek than a warp drive. I was thinking of something with a power out put more like that of Skipper or maybe a Mainsail. \u003C/span\u003E\u003Cspan style=\u0022color:#333333;\u0022\u003EI do like the effect rover dude uses though that is what I was looking for. I could not find anyone using the interstellar solar sails so I will have to down load them and check them out. although the sail they are talking about is a physical sail not a field.\u003C/span\u003E\u003C/p\u003E\n"},{"CreatedByName":"RoverDude","CreatedById":105198,"CreatedDateTime":"2015-03-03T15:35:47Z","Content":"\n\u003Cp\u003EActually I think they have the Alcubierre power requirements down now with some changes to the shape of a drive \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E But for 90,000 science it\u0027s a nice capstone.\u003C/p\u003E\n"},{"CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-04T15:27:42Z","Content":"\n\u003Cp\u003EI Just built my Mark 0.1 of the Solar Sail, I used the FL-R1 RCS Fuel Tank with the Yellow Tanks recolored to blue, (I have no modeling skills). I placed it in the Specialized Electrics for now I think maybe it should be its own tech node eventually. I launched it in a Sandbox and used the Infinite fuel cheat to boost the unit into space. Once I got the unit into space it worked perfectly until I turned off Infinite Fuel then no thrust. The unit had full electrical charge and even with the solar panels retracted it was not using any charge.\u003C/p\u003E\u003Cp\u003EMy process;\u003C/p\u003E\u003Cp\u003ECopied and edited the Mainsails config, \u003C/p\u003E\u003Cp\u003EUsed the FL-R1 RCS Fuel Tank\u0027s mesh, node definitions and attachment rules.\u003C/p\u003E\u003Cp\u003ECopied over and edited the images for FL-R1 RCS Fuel Tank.\u003C/p\u003E\u003Cp\u003ETo do: \u003C/p\u003E\u003Cp\u003ENeed to figure out why the sail does not work, I will post the config file in another post. \u003C/p\u003E\u003Cp\u003ENeed to add sensing of sunlight pressure, for realism. \u003C/p\u003E\u003Cp\u003ENeed to add SOI sensing. \u003C/p\u003E\u003Cp\u003ENeed to get better visual effect for sails. \u003C/p\u003E\u003Cp\u003ENeed to find a better sound files I just used the stock sound effects for the Mainsail.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://s-media-cache-ak0.pinimg.com/originals/e6/c0/36/e6c03645b9da411dbcf222306719c9fd.jpg\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://s-media-cache-ak0.pinimg.com/originals/e6/c0/36/e6c03645b9da411dbcf222306719c9fd.jpg\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://s-media-cache-ak0.pinimg.com/originals/75/c6/9b/75c69b3776348bee43007961a3203078.jpg\u0022 rel=\u0022external nofollow\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Ehttps://s-media-cache-ak0.pinimg.com/originals/75/c6/9b/75c69b3776348bee43007961a3203078.jpg\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ESpoiler alert this is the config file.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EPART{\u003Cp\u003E// Solar Clipper\u003C/p\u003E\u003Cp\u003E// Clipper Sail\u003C/p\u003E\u003Cp\u003E// \u003C/p\u003E\u003Cp\u003E// --- general parameters ---\u003C/p\u003E\u003Cp\u003Ename = Clipper Sail\u003C/p\u003E\u003Cp\u003Emodule = Part\u003C/p\u003E\u003Cp\u003Eauthor = C.A.Sizemore\u003C/p\u003E\u003Cp\u003E// --- asset parameters ---\u003C/p\u003E\u003Cp\u003Emesh = model.mu\u003C/p\u003E\u003Cp\u003Escale = 1\u003C/p\u003E\u003Cp\u003ErescaleFactor = 1\u003C/p\u003E\u003Cp\u003E// --- node definitions ---\u003C/p\u003E\u003Cp\u003Enode_stack_top = 0.0, 0.5, 0.0, 0.0, 1.0, 0.0, 2\u003C/p\u003E\u003Cp\u003Enode_stack_bottom = 0.0, -0.5, 0.0, 0.0, 1.0, 0.0, 2\u003C/p\u003E\u003Cp\u003E// --- FX definitions ---\u003C/p\u003E\u003Cp\u003E// --- Sound FX definition ---\u003C/p\u003E\u003Cp\u003Esound_vent_medium = engage\u003C/p\u003E\u003Cp\u003Esound_rocket_hard = running\u003C/p\u003E\u003Cp\u003Esound_vent_soft = disengage\u003C/p\u003E\u003Cp\u003Esound_explosion_low = flameout\u003C/p\u003E\u003Cp\u003E// --- editor parameters ---\u003C/p\u003E\u003Cp\u003ETechRequired = SpecializedElectrics\u003C/p\u003E\u003Cp\u003EentryCost = 24000\u003C/p\u003E\u003Cp\u003Ecost = 6000\u003C/p\u003E\u003Cp\u003Ecategory = Engine\u003C/p\u003E\u003Cp\u003Esubcategory = 0\u003C/p\u003E\u003Cp\u003Etitle = Solar Clipper Solar Sail\u003C/p\u003E\u003Cp\u003Emanufacturer = Kerchester Shipworks\u003C/p\u003E\u003Cp\u003Edescription = An engine that drives your ship on nothing but Kerbols solar wind.\u003C/p\u003E\u003Cp\u003E// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision\u003C/p\u003E\u003Cp\u003EattachRules = 1,0,1,1,0\u003C/p\u003E\u003Cp\u003E// --- standard part parameters ---\u003C/p\u003E\u003Cp\u003Emass = 6\u003C/p\u003E\u003Cp\u003EdragModelType = default\u003C/p\u003E\u003Cp\u003Emaximum_drag = 0.2\u003C/p\u003E\u003Cp\u003Eminimum_drag = 0.2\u003C/p\u003E\u003Cp\u003EangularDrag = 2\u003C/p\u003E\u003Cp\u003EcrashTolerance = 7\u003C/p\u003E\u003Cp\u003EbreakingForce = 200\u003C/p\u003E\u003Cp\u003EbreakingTorque = 200\u003C/p\u003E\u003Cp\u003EmaxTemp = 3600\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = ModuleEngines\u003C/p\u003E\u003Cp\u003E thrustVectorTransformName = thrustTransform\u003C/p\u003E\u003Cp\u003E exhaustDamage = False\u003C/p\u003E\u003Cp\u003E ignitionThreshold = 0.1\u003C/p\u003E\u003Cp\u003E minThrust = 0\u003C/p\u003E\u003Cp\u003E maxThrust = 1500\u003C/p\u003E\u003Cp\u003E heatProduction = 0\u003C/p\u003E\u003Cp\u003E fxOffset = 0, 0, 0.02\u003C/p\u003E\u003Cp\u003E PROPELLANT\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E name = ElectricCharge\u003C/p\u003E\u003Cp\u003E ratio = 1.8\u003C/p\u003E\u003Cp\u003E DrawGauge = True\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E atmosphereCurve\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E key = 0 4200 \u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E name = ModuleGimbal\u003C/p\u003E\u003Cp\u003E gimbalTransformName = thrustTransform\u003C/p\u003E\u003Cp\u003E gimbalRange = 1\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EMODULE\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003EEFFECTS\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E Thrust\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E AUDIO\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E clip = Squad/Sounds/sound_rocket_mini\u003C/p\u003E\u003Cp\u003E volume = 0.0 0.0\u003C/p\u003E\u003Cp\u003E volume = 1.0 1.0\u003C/p\u003E\u003Cp\u003E pitch = 0.0 0.8\u003C/p\u003E\u003Cp\u003E pitch = 1.0 1.0\u003C/p\u003E\u003Cp\u003E loop = true\u003C/p\u003E\u003Cp\u003E } \u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"RoverDude","CreatedById":105198,"CreatedDateTime":"2015-03-04T15:38:57Z","Content":"\n\u003Cp\u003EEngines require something with mass in order to work.\u003C/p\u003E\n"},{"CreatedByName":"Beale","CreatedById":70533,"CreatedDateTime":"2015-03-04T15:46:12Z","Content":"\n\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/35620-Engine-Part-With-No-Propellants\u0022 rel=\u0022external nofollow\u0022\u003EYou might find this two year old thread of mine helpful!\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EYep, you will need a \u0022pseudo propellant\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Mecripp","CreatedById":181994,"CreatedDateTime":"2015-03-04T15:52:50Z","Content":"\n\u003Cp\u003EThink it was .25 they fixed it, And think it still work that ElectricCharge can be used as a PROPELLANT by it self where before you couldn\u0027t.\u003C/p\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-03-04T16:21:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nothingSpecial\u0022 data-cite=\u0022nothingSpecial\u0022\u003E\u003Cdiv\u003EYou can also add a capacitor-part for balance. It was possible in KSP Interstellar to charge up part with custom resource during timewarp, so while you can\u0027t sit through week-long burn, you can wrap for week-long recharge (also only in sun SOI), deploy magnetic field and then have thrust based on distance to Sun for time based on stored energy capacity. Maybe not realistic in process, but more bearable gameplay-wise and for the state of bodies the result will be almost the same.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI find KSPI Solar Sails Ideal for low solar orbits, where the precise orbit, did not matter much. Going anywhere else takes too long or too difficult\u003C/p\u003E\n"},{"CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-05T05:24:10Z","Content":"\n\u003Cp\u003EOkay my solar sails need solar wind, So I will need to add a resource, Solar Wind and the Solar Sails will have to collect and use that resource. I am going to have to write my own plugin? Yikes more work but fun. \u003C/p\u003E\u003Cp\u003ESo where would I learn to write a plugin and I guess if I make it so that the solar wind is only available in Kerbols SOI and not any Planet or Moons that would give it the realism I would want.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-05T05:28:17Z\u0022 title=\u002203/05/2015 05:28  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 5, 2015\u003C/time\u003E by C.A.Sizemore\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-03-05T06:52:58Z","Content":"\n\u003Cp\u003EI would strongly advice not to use any resources as they do not behave well with high time warp.\u003C/p\u003E\u003Cp\u003EIf I were you, I would simply extend Interstellar Solar Sails. The code is stand alone enough to turn it into a separate Mod\u003C/p\u003E\u003Cp\u003EFirst try to understand the code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace FNPlugin {\u003Cbr\u003E    class ModuleSolarSail : PartModule {\u003Cbr\u003E        // Persistent True\u003Cbr\u003E        [KSPField(isPersistant = true)]\u003Cbr\u003E        public bool IsEnabled = false;\u003Cbr\u003E\u003Cbr\u003E        // Persistent False\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public float reflectedPhotonRatio = 1f;\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public float surfaceArea; // Surface area of the panel.\u003Cbr\u003E        [KSPField]\u003Cbr\u003E        public string animName;\u003Cbr\u003E\u003Cbr\u003E        // GUI\u003Cbr\u003E        [KSPField(guiActive = true, guiName = \u0022Force\u0022)]\u003Cbr\u003E        protected string forceAcquired = \u0022\u0022;\u003Cbr\u003E        [KSPField(guiActive = true, guiName = \u0022Acceleration\u0022)]\u003Cbr\u003E        protected string solarAcc = \u0022\u0022;\u003Cbr\u003E\u003Cbr\u003E        protected Transform surfaceTransform = null;\u003Cbr\u003E        protected Animation solarSailAnim = null;\u003Cbr\u003E\u003Cbr\u003E        const double kerbin_distance = 13599840256;\u003Cbr\u003E        const double thrust_coeff = 9.08e-6;\u003Cbr\u003E\u003Cbr\u003E        protected double solar_force_d = 0;\u003Cbr\u003E        protected double solar_acc_d = 0;\u003Cbr\u003E        protected long count = 0;\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Deploy Sail\u0022, active = true)]\u003Cbr\u003E        public void DeploySail() {\u003Cbr\u003E            if (animName != null \u0026amp;\u0026amp; solarSailAnim != null) {\u003Cbr\u003E                solarSailAnim[animName].speed = 1f;\u003Cbr\u003E                solarSailAnim[animName].normalizedTime = 0f;\u003Cbr\u003E                solarSailAnim.Blend(animName, 2f);\u003Cbr\u003E            }\u003Cbr\u003E            IsEnabled = true;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        [KSPEvent(guiActive = true, guiName = \u0022Retract Sail\u0022, active = false)]\u003Cbr\u003E        public void RetractSail() {\u003Cbr\u003E            if (animName != null \u0026amp;\u0026amp; solarSailAnim != null) {\u003Cbr\u003E                solarSailAnim[animName].speed = -1f;\u003Cbr\u003E                solarSailAnim[animName].normalizedTime = 1f;\u003Cbr\u003E                solarSailAnim.Blend(animName, 2f);\u003Cbr\u003E            }\u003Cbr\u003E            IsEnabled = false;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(StartState state) {\u003Cbr\u003E            if (state != StartState.None \u0026amp;\u0026amp; state != StartState.Editor) {\u003Cbr\u003E                //surfaceTransform = part.FindModelTransform(surfaceTransformName);\u003Cbr\u003E                //solarSailAnim = (ModuleAnimateGeneric)part.Modules[\u0022ModuleAnimateGeneric\u0022];\u003Cbr\u003E                if (animName != null) {\u003Cbr\u003E                    solarSailAnim = part.FindModelAnimators(animName).FirstOrDefault();\u003Cbr\u003E                }\u003Cbr\u003E                if (IsEnabled) {\u003Cbr\u003E                    solarSailAnim[animName].speed = 1f;\u003Cbr\u003E                    solarSailAnim[animName].normalizedTime = 0f;\u003Cbr\u003E                    solarSailAnim.Blend(animName, 0.1f);\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                this.part.force_activate();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnUpdate() {\u003Cbr\u003E            Events[\u0022DeploySail\u0022].active = !IsEnabled;\u003Cbr\u003E            Events[\u0022RetractSail\u0022].active = IsEnabled;\u003Cbr\u003E            Fields[\u0022solarAcc\u0022].guiActive = IsEnabled;\u003Cbr\u003E            Fields[\u0022forceAcquired\u0022].guiActive = IsEnabled;\u003Cbr\u003E            forceAcquired = solar_force_d.ToString(\u0022E\u0022) \u002B \u0022 N\u0022;\u003Cbr\u003E            solarAcc = solar_acc_d.ToString(\u0022E\u0022) \u002B \u0022 m/s\u0022;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnFixedUpdate() {\u003Cbr\u003E            if (FlightGlobals.fetch != null) {\u003Cbr\u003E                solar_force_d = 0;\u003Cbr\u003E                if (!IsEnabled) { return; }\u003Cbr\u003E                double sunlightFactor = 1.0;\u003Cbr\u003E                Vector3 sunVector = FlightGlobals.fetch.bodies[0].position - part.orgPos;\u003Cbr\u003E\u003Cbr\u003E                if (!PluginHelper.lineOfSightToSun(vessel)) {\u003Cbr\u003E                    sunlightFactor = 0.0f;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                //Debug.Log(\u0022Detecting sunlight: \u0022 \u002B sunlightFactor.ToString());\u003Cbr\u003E                Vector3d solarForce = CalculateSolarForce() * sunlightFactor;\u003Cbr\u003E                //print(surfaceArea);\u003Cbr\u003E\u003Cbr\u003E                Vector3d solar_accel = solarForce / vessel.GetTotalMass() / 1000.0 * TimeWarp.fixedDeltaTime;\u003Cbr\u003E                if (!this.vessel.packed) {\u003Cbr\u003E                    vessel.ChangeWorldVelocity(solar_accel);\u003Cbr\u003E                } else {\u003Cbr\u003E                    if (sunlightFactor \u0026gt; 0) {\u003Cbr\u003E                        double temp1 = solar_accel.y;\u003Cbr\u003E                        solar_accel.y = solar_accel.z;\u003Cbr\u003E                        solar_accel.z = temp1;\u003Cbr\u003E                        Vector3d position = vessel.orbit.getRelativePositionAtUT(Planetarium.GetUniversalTime());\u003Cbr\u003E                        Orbit orbit2 = new Orbit(vessel.orbit.inclination, vessel.orbit.eccentricity, vessel.orbit.semiMajorAxis, vessel.orbit.LAN, vessel.orbit.argumentOfPeriapsis, vessel.orbit.meanAnomalyAtEpoch, vessel.orbit.epoch, vessel.orbit.referenceBody);\u003Cbr\u003E                        orbit2.UpdateFromStateVectors(position, vessel.orbit.vel \u002B solar_accel, vessel.orbit.referenceBody, Planetarium.GetUniversalTime());\u003Cbr\u003E                        //print(orbit2.timeToAp);\u003Cbr\u003E                        if (!double.IsNaN(orbit2.inclination) \u0026amp;\u0026amp; !double.IsNaN(orbit2.eccentricity) \u0026amp;\u0026amp; !double.IsNaN(orbit2.semiMajorAxis) \u0026amp;\u0026amp; orbit2.timeToAp \u0026gt; TimeWarp.fixedDeltaTime) {\u003Cbr\u003E                            vessel.orbit.inclination = orbit2.inclination;\u003Cbr\u003E                            vessel.orbit.eccentricity = orbit2.eccentricity;\u003Cbr\u003E                            vessel.orbit.semiMajorAxis = orbit2.semiMajorAxis;\u003Cbr\u003E                            vessel.orbit.LAN = orbit2.LAN;\u003Cbr\u003E                            vessel.orbit.argumentOfPeriapsis = orbit2.argumentOfPeriapsis;\u003Cbr\u003E                            vessel.orbit.meanAnomalyAtEpoch = orbit2.meanAnomalyAtEpoch;\u003Cbr\u003E                            vessel.orbit.epoch = orbit2.epoch;\u003Cbr\u003E                            vessel.orbit.referenceBody = orbit2.referenceBody;\u003Cbr\u003E                            vessel.orbit.Init();\u003Cbr\u003E\u003Cbr\u003E                            //vessel.orbit.UpdateFromOrbitAtUT(orbit2, Planetarium.GetUniversalTime(), orbit2.referenceBody);\u003Cbr\u003E                            vessel.orbit.UpdateFromUT(Planetarium.GetUniversalTime());\u003Cbr\u003E                        }\u003Cbr\u003E\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E                solar_force_d = solarForce.magnitude;\u003Cbr\u003E                solar_acc_d = solar_accel.magnitude / TimeWarp.fixedDeltaTime;\u003Cbr\u003E                //print(solarForce.x.ToString() \u002B \u0022, \u0022 \u002B solarForce.y.ToString() \u002B \u0022, \u0022 \u002B solarForce.z.ToString());\u003Cbr\u003E            }\u003Cbr\u003E            count\u002B\u002B;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private Vector3d CalculateSolarForce() {\u003Cbr\u003E            if (this.part != null) {\u003Cbr\u003E                Vector3d sunPosition = FlightGlobals.fetch.bodies[0].position;\u003Cbr\u003E                Vector3d ownPosition = this.part.transform.position;\u003Cbr\u003E                Vector3d normal = this.part.transform.up;\u003Cbr\u003E                if (surfaceTransform != null) {\u003Cbr\u003E                    normal = surfaceTransform.forward;\u003Cbr\u003E                }\u003Cbr\u003E                Vector3d force = normal * Vector3d.Dot((ownPosition - sunPosition).normalized, normal);\u003Cbr\u003E                return force * surfaceArea * reflectedPhotonRatio * solarForceAtDistance();\u003Cbr\u003E            } else {\u003Cbr\u003E                return Vector3d.zero;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private double solarForceAtDistance() {\u003Cbr\u003E            double distance_from_sun = Vector3.Distance(FlightGlobals.Bodies[PluginHelper.REF_BODY_KERBOL].transform.position, vessel.transform.position);\u003Cbr\u003E            double force_to_return = thrust_coeff * kerbin_distance * kerbin_distance / distance_from_sun / distance_from_sun;\u003Cbr\u003E            return force_to_return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand the part file:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPART  \u003Cbr\u003E{  \u003Cbr\u003E\u003Cbr\u003E// --- general parameters ---\u003Cbr\u003Ename = SM-Solar-Sail\u003Cbr\u003Emodule = Part\u003Cbr\u003Eauthor = SasquatchMarmalade\u003Cbr\u003E\u003Cbr\u003E// --- asset parameters ---\u003Cbr\u003Emesh = model.mu\u003Cbr\u003Escale = 1\u003Cbr\u003ErescaleFactor = 1.25\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// --- node definitions ---\u003Cbr\u003Enode_stack_top = 0.0, 1.001, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003Enode_stack_bottom = 0.0, -1.001, 0.0, 0.0, 1.0, 0.0\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// --- FX definitions ---\u003Cbr\u003E\u003Cbr\u003E//fx_exhaustFlame_blue = 0.0, -10.3, 0.0, 0.0, 1.0, 0.0, running\u003Cbr\u003E//fx_gasJet_white = 0.0, -10.3, 0.0, 0.0, 1.0, 0.0, running\u003Cbr\u003E\u003Cbr\u003E// --- Sound FX definition ---\u003Cbr\u003E\u003Cbr\u003E//sound_vent_medium = engage\u003Cbr\u003E//sound_rocket_hard = running\u003Cbr\u003E//sound_vent_soft = disengage\u003Cbr\u003E//sound_explosion_low = flameout\u003Cbr\u003E\u003Cbr\u003E// --- editor parameters ---\u003Cbr\u003ETechRequired = metaMaterials\u003Cbr\u003EentryCost = 2500\u003Cbr\u003Ecost = 10000\u003Cbr\u003Ecategory = Engine\u003Cbr\u003Esubcategory = 0\u003Cbr\u003Etitle = Solar Sail\u003Cbr\u003Emanufacturer = SM Aeronautics\u003Cbr\u003Edescription = Solar sails (also called light sails or photon sails) are a form of spacecraft propulsion using the radiation pressure (also called solar pressure) from stars to push large ultra-thin mirrors to high speeds.\u003Cbr\u003E// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision\u003Cbr\u003EattachRules = 1,0,1,0,0\u003Cbr\u003E\u003Cbr\u003E// --- standard part parameters ---\u003Cbr\u003Emass = 1\u003Cbr\u003EdragModelType = default\u003Cbr\u003Emaximum_drag = 0.2\u003Cbr\u003Eminimum_drag = 0.2\u003Cbr\u003EangularDrag = 2\u003Cbr\u003EcrashTolerance = 7\u003Cbr\u003EmaxTemp = 2500\u003Cbr\u003EbreakingForce = 200\u003Cbr\u003EbreakingTorque = 200\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = ModuleSolarSail\u003Cbr\u003E    surfaceArea = 144400\u003Cbr\u003E    animName = Default Take\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-03-05T06:55:23Z\u0022 title=\u002203/05/2015 06:55  AM\u0022 data-short=\u00229 yr\u0022\u003EMarch 5, 2015\u003C/time\u003E by FreeThinker\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"C.A.Sizemore","CreatedById":111232,"CreatedDateTime":"2015-03-09T05:08:00Z","Content":"\n\u003Cp\u003EFreeThinker your saying I should copy the module from the Interstellar, which works and is stable and use my own part for the magnetohydrodynamic solar sail. \u003C/p\u003E\u003Cp\u003EI am not a programer and I get lost easily in the code.\u003C/p\u003E\u003Cp\u003EI am okay with learning to code, my problem with the interstellar solar sail is its mechanic. A magnetohydrodynamic solar sail would not need to be at a 45 degree angle to the sun neither would a true solar sail. You would tack like a sail boat either with wind to go faster or against the wind to slow. A solar sail with the solar wind directly astern would be gaining a lot of deltaV.\u003C/p\u003E\n"}]}