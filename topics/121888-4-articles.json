{"TopicId":121888,"ForumId":44,"TopicTitle":"C, C\u002B\u002B, C# Programming - what is the sense in this","CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-28T14:21:11Z","PageNum":4,"Articles":[{"CreatedByName":"DestinyPlayer","CreatedById":143980,"CreatedDateTime":"2015-10-01T09:39:16Z","Content":"\n\u003Cp\u003EJust wanted to ask, is Lua a good language to learn how to program? What do people think of it, anyway?\u003C/p\u003E\u003Cp\u003EI already went through it, so this question is out of pure curiosity.\u003C/p\u003E\n"},{"CreatedByName":"Waterlimon","CreatedById":16829,"CreatedDateTime":"2015-10-01T15:50:03Z","Content":"\n\u003Cp\u003ELua was written with the goal of maximal simplicity and being easy to embed as scripting language IIRC\u003C/p\u003E\u003Cp\u003EIf you use LuaJIT its very fast too.\u003C/p\u003E\u003Cp\u003EThough its mainly a scripting language, not used as often for standalone executables. And I would say a more strict language with strict typing leads to better code and more things learned.\u003C/p\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2015-10-01T17:12:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThis is a joke, right. My structures and consts all by themselves will be 100 lines. I have no choice but to move to C, VB is too slow, win10 makes it even slower. The assunption here is that you know what the density of Sqrt operations are in the code, as alredy describe above, i might get away with a substantila performabce tweeking the compiler, more if I use the inverse float square root function. Read the post, if you use an older c\u002B\u002B math.sqrt it can take 400 cycles, they managed to get that down to 3 specifying the inst set and using x * rsqrtss x. lol, 100 fold difference........\u003Cp\u003E To get a feel take four charcter types, lets make them bytes , now make random sized that accumulate to 150 gb. And you dont know apriori how big in terms of numer of byte strings the set is. Now i am going to give you 6gb divided in 22 units,\u003C/p\u003E\u003Cp\u003EThese units are not identical to the first, not even in pieces, they vary in both string sequnce, multiple type can exist at a position in a string and their identities are known to shrink and swell. Your job is to find which unit every piece in the first set best fits into the second and then fit those byte strings into a long chain. In addition there is degenerecy, some pieces best fit in several places, and other pieces may not fit at all, so these have to be set aside. the inclusion and set asides are determined mathematically using log functions and square roots.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt still sounds to me you\u0027re trying to speed up your processing by making your code run faster, instead of by running less code. Can\u0027t you run some cheap checks on your data? Without knowing values, you could *for instance* do an initial square root calculation based on the integer value and use a lookup instead of a \u0022real\u0022 sqrt calculation. That can give you a pass/fail in far less cycles than actually calculating the square root to the level of accuracy that is needed. Or use hashing. There are many options that save you from searching every single data set every single time, and it sounds like that\u0027s where the real profit is.\u003C/p\u003E\u003Cp\u003EOptimizing your code will rarely make it run substantially faster unless you profiled your code and know where it spends 90% of its time crunching. Optimizing your algorithm usually gets you performance increase in the order of magnitudes. It would be totally not shocked if it turns out your project can run faster in a scripting language like Python, because it allows you to discard large chunks of data based on complex algorithms, than in C or even assembler because you\u0027re using a brute-force approach.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-01T18:17:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kerbart\u0022 data-cite=\u0022Kerbart\u0022\u003E\u003Cdiv\u003EIt still sounds to me you\u0027re trying to speed up your processing by making your code run faster, instead of by running less code. Can\u0027t you run some cheap checks on your data? Without knowing values, you could *for instance* do an initial square root calculation based on the integer value and use a lookup instead of a \u0022real\u0022 sqrt calculation. That can give you a pass/fail in far less cycles than actually calculating the square root to the level of accuracy that is needed. Or use hashing. There are many options that save you from searching every single data set every single time, and it sounds like that\u0027s where the real profit is.\u003Cp\u003EOptimizing your code will rarely make it run substantially faster unless you profiled your code and know where it spends 90% of its time crunching. Optimizing your algorithm usually gets you performance increase in the order of magnitudes. It would be totally not shocked if it turns out your project can run faster in a scripting language like Python, because it allows you to discard large chunks of data based on complex algorithms, than in C or even assembler because you\u0027re using a brute-force approach.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn the process of running cheap checks right now. But last night I found someone has already done part of the alignment online, problem is they did not parse the contigs into two branches. Lets say that i gave everything a unique but near infinite meaning using long long integers (comperable to firing a bullet from an orbit between mars an earth and hitting the hole of A donut floating around in earths orbit). This means that 6 billion sites get long-long id strings (because Unidirectional integers only reach 4.8 billion it represents 32 pieces of information about a site that can identify it and. 4^32 is roughly 1/1000000 chance of hitting the wrong target) So that each site now has 1 8 byte cell. So thats 48 gb of data, and my memory is 16 gb. I can deal with this anyway because i can simply select certain sites. in the institutes they use massively paralleled processing and have a huge amount of memory, but I don\u0027t. So i have to find clever work arounds one is to simply stop at 4.8 gig, i can codify the data and cut it to 3 gigs, but there will be alot of degeneracy.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-10-01T19:36:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DestinyPlayer\u0022 data-cite=\u0022DestinyPlayer\u0022\u003E\u003Cdiv\u003EJust wanted to ask, is Lua a good language to learn how to program? What do people think of it, anyway?\u003Cp\u003EI already went through it, so this question is out of pure curiosity.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s not a bad language, but isn\u0027t great for learning. If you want to learn a script, I\u0027d start with Python.\u003C/p\u003E\u003Cp\u003EDepending on what your goals are, however, it might be a better idea to just start with C. It\u0027s a simple enough language, and it will be far more useful in the long run.\u003C/p\u003E\n"},{"CreatedByName":"codepoet","CreatedById":73449,"CreatedDateTime":"2015-10-01T20:05:47Z","Content":"\n\u003Cp\u003EI have come to this thread late, but here are a few thoughts on learning to write software and use various languages:\u003C/p\u003E\u003Cp\u003E* learn humility - there is always a better way to do it, there is always something you have not thought of, a bug you have not noticed or a test case you have not considered. Other folks might have written it differently, and there are always trade offs between efficiency, maintainability, portability, extensiblity, and time and money available.\u003C/p\u003E\u003Cp\u003E* when choosing a language or development platform there are several considerations: target platform, speed of execution, speed of development, development tools - debuggers etc, ability to link to other modules, language features, library features, interpreted or compiled. Again there are always trade offs. Different options have different benefits and drawbacks, and different folks would make different choices. No-one is right or wrong, but some will have more success than others.\u003C/p\u003E\u003Cp\u003E* Comment your code heavily right from the start. However, you should also be writing your code so that it is easy to understand without the comments. Make your flow control clear, name your variables thoughtfully, refactor your code so your methods/functions do easy to understand things, use the language features for the purpose they were intended, use standard design patterns, and design your code for reuse, even if you are not sure how you will reuse it.\u003C/p\u003E\u003Cp\u003E* Test as you go, at the finest granularity you can, and if possible automate testing too.\u003C/p\u003E\u003Cp\u003E* Understand your problem space. If you do not fully understand the concepts that you are working with, how can you expect to describe how to use them to the software?\u003C/p\u003E\u003Cp\u003E* If you really want to learn how to get the best out of a language (any language) then learn how to write a compiler and an interpreter. \u003C/p\u003E\u003Cp\u003EI am sure there are plenty more that others far greater than I could offer. I spent many years in the trade, but that was quite a while ago now. I am sure that there are better folks to learn how to code from than some random priest on the internet!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-01T20:24:40Z\u0022 title=\u002210/01/2015 08:24  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 1, 2015\u003C/time\u003E by codepoet\u003C/strong\u003E\n\u003Cbr\u003Etypo\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-02T14:06:43Z","Content":"\n\u003Cp\u003EWhy I\u0027m moving on from VB\u003C/p\u003E\u003Cp\u003EOne has to wonder how computer programmers think how outsiders might approach computer language. Now certainly on the night the folks at M$ wrote this little jewel someone must have been passing around a little microdot.\u003C/p\u003E\u003Cp\u003ESee if you can figure out where the binary input occurred (Hint think bonafida function statements). The one major difference between VB and C is in VB you never had to worry about adding additional classes or dll\u0027s to your program, not so anymore\u003C/p\u003E\u003Cp\u003EAdd IO.system class library before you begin. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E    Sub OpenSource()\u003Cbr\u003E        Dim pathSource As String = \u0022c:\\x.bin\u0022\u003Cbr\u003E        Try\u003Cbr\u003E            Using fsSource As FileStream = New FileStream(pathSource,\u003Cbr\u003E                FileMode.Open, FileAccess.Read)\u003Cbr\u003E                \u0027 Read the source file into a byte array.\u003Cbr\u003E                Dim bytes() As Byte = New Byte((fsSource.Length) - 1) {}\u003Cbr\u003E                Dim numBytesToRead As Integer = CType(fsSource.Length, Integer)\u003Cbr\u003E                Dim numBytesRead As Integer = 0\u003Cbr\u003E                While (numBytesToRead \u0026gt; 0)  \u0027 Read may return anything from 0 to numBytesToRead.\u003Cbr\u003E                    Dim n As Integer = fsSource.Read(bytes, numBytesRead, numBytesToRead)\u003Cbr\u003E                    If (n = 0) Then\u003Cbr\u003E                        Exit While  \u0027 Break when the end of the file is reached.\u003Cbr\u003E                    End If\u003Cbr\u003E                    numBytesRead = (numBytesRead \u002B n)\u003Cbr\u003E                    numBytesToRead = (numBytesToRead - n)\u003Cbr\u003E                End While\u003Cbr\u003E                numBytesToRead = bytes.Length\u003Cbr\u003E                \u0027[Write section eliminated damage would have already been done at this point]\u003Cbr\u003E            End Using\u003Cbr\u003E        Catch ioEx As FileNotFoundException\u003Cbr\u003E            Console.WriteLine(ioEx.Message)\u003Cbr\u003E        End Try\u003Cbr\u003E    End Sub\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFrom what this was cut this was a way to copy a text.file using their new code. There are so many things wrong with this code it actually boggles the mind. \u003C/p\u003E\u003Cp\u003ESo let me go through these. Why use Visual basic to copy a file.\u003C/p\u003E\u003Cp\u003E There is only one reason that I have repeatedly use binary read/write to copy a file going back as far as 1990, and only one reason, the file is too big to transport and it needs to be split. \u003C/p\u003E\u003Cp\u003ESo you might argue maybe they have another need to copy, but since their dos does if faster, but anyway, OK, granted some crytic need, but they piped the reader in advertising the sequential read/write capability.\u003C/p\u003E\u003Cp\u003EBut wait a second, why might someone actually need to \u003Cstrong\u003Esequentially read\u003C/strong\u003E a binary . . . . . . . . . . \u003Cstrong\u003E.the binary might be larger than the computers memory or the memory required to process the data in the binary\u003C/strong\u003E!\u003C/p\u003E\u003Cp\u003EDim bytes() As Byte = New Byte((fsSource.Length) - 1) {} \u0026lt;---- creates a byte() array the size of the file. It just so happens the file I read was 256Mb, but I had 22 files to read, and the last file to be read was 64Gb\u003C/p\u003E\u003Cp\u003EBefore this was created it should have queried the user if size was a certain fraction of available program memory\u003C/p\u003E\u003Cp\u003EDim numBytesToRead As Integer = CType(fsSource.Length, Integer) \u0026lt;------- if the filelength is not an integer, luckily in this instance Integers have been promoted to the old long, but the better choice was UInteger type\u003C/p\u003E\u003Cp\u003ELets just suppose that at Integer maxima (2,147,483,647) the program sends only the maxima back as the limit length, so basically that is 2Gb of the average 4Gb computer memory, and that is an awful heap of memory for VB to handle \u003C/p\u003E\u003Cp\u003EThe second thing is what might the user do with those bytes. For example I am going to expand each byte to 6 bytes, that would mean 2Gb \u002B 6Gb = 8 Gb thats the memory of the overwhelming majority of computers, and of course since these are going to be in arrays its actually over the limit of almost all PCs. There really needed to be a clarify function call on the back side of this function. \u0022Msgbox ......\u0022Do you really want to load this much data [datablocksize]?\u0022\u003C/p\u003E\u003Cp\u003EDim n As Integer = fsSource.Read(bytes, numBytesRead, numBytesToRead)\u0026lt;------This is the transfer function, hard to deduce because the output is an integer see variable array bytes tucked into the argument list.\u003C/p\u003E\u003Cp\u003EThis would not have crashed the program, the dynamic declaration of bytes() would have. \u003C/p\u003E\u003Cp\u003EIf you had a file you wanted VB to copy you would want to do this. \u003C/p\u003E\u003Cp\u003EOpen up a binary file for sequential read.\u003C/p\u003E\u003Cp\u003ERead to a certain part of the file storiing the binary in an array\u003C/p\u003E\u003Cp\u003EOpen an output file \u003C/p\u003E\u003Cp\u003Estoring the data in an output file\u003C/p\u003E\u003Cp\u003EClose the output file\u003C/p\u003E\u003Cp\u003ERepeat the Read unless the \u0027certain\u0027 size is larger than the binary information left in the file (-1). \u003C/p\u003E\u003Cp\u003EClose the binary file\u003C/p\u003E\u003Cp\u003EClose the last outfile after storing the data in it.\u003C/p\u003E\u003Cp\u003EThey made something excessively complicated providing a solution for which there is no need, are they trying to drive users to another platform?\u003C/p\u003E\n"},{"CreatedByName":"aussiedwarf","CreatedById":64535,"CreatedDateTime":"2015-10-02T16:17:00Z","Content":"\n\u003Cp\u003EVisual Basic was how I learn\u0027t to program. I then learn\u0027t C and C\u002B\u002B. I have to admit that I was put off VB after Microsoft mashed .Net on top of it. I have not used VB now in 8 years so I have forgotten much of it. From my memory, it is an ok language that can be used to do many things but there are now better tools out there. c/c\u002B\u002B for high performance code, c# or java for applications, python for easy to use smaller programs.\u003C/p\u003E\u003Cp\u003EI doubt you will get any real performance gain from using custom math functions. Things like sqrt is actually reasonably fast and run on a sqrt register on the cpu ( for desktops at least). Trigonometric functions can be slow and some performance can be gained by using tables or a much much simpler algorithm.\u003C/p\u003E\u003Cp\u003ENow I don\u0027t know how complex the processing is so I am going to make some probably wrong assumptions. When it come\u0027s down to it, reading files from a hard drive, even a SSD is many factors slower then reading from ram. There is the possibility that the code spends a lot of wasted time waiting for the data to read. Other things that can greatly improve performance is trying to make the data cache friendly. A L1 cache read is much much faster than reading from ram. If you are working with genome data, then the data may already be fairly packed and relatively cache friendly as is, depending on how you are reading it. Other possible improvements would also include using multiple threads. For something that is more advanced, you could also use SMID (Single instruction multiple data) to process more data at once. Using SSE or AVX registers once can process 4 floats, ints or doubles at once. You will certainly want to use c/c\u002B\u002B for SMID. If the algorithm can be split up hundreds of times, then running the data through the graphics card could also speed things up.\u003C/p\u003E\u003Cp\u003EAs your still learning, perhaps it would be better to start off using a c\u002B\u002B compiler to write C code and pick up on c\u002B\u002B as you progress. If you used something like github or bitbucket, it would allow us to look though and give advice as well.\u003C/p\u003E\u003Cp\u003EPB666, you also have me intrigued on what sort of processing you are doing. I don\u0027t really know much about genome sequencing/processing and I would love to understand what you are doing.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-02T18:27:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aussiedwarf\u0022 data-cite=\u0022aussiedwarf\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EPB666, you also have me intrigued on what sort of processing you are doing. I don\u0027t really know much about genome sequencing/processing and I would love to understand what you are doing.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-07T14:13:09Z","Content":"\n\u003Cp\u003ESo here is the issue. I want to pack 4 pieces of information into a byte. (byte = 2^8 possibilities, or 4^4). a 64 bit register is 8 bytes which means that i can pack 32 pieces of information into a register. \u003C/p\u003E\u003Cp\u003ESo i have an assembly language routine that does this and a few other things, is it poosible to integrate any assembly language routine into C\u002B\u002B?\u003C/p\u003E\n"},{"CreatedByName":"Nibb31","CreatedById":7272,"CreatedDateTime":"2015-10-07T15:49:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022llanthas\u0022 data-cite=\u0022llanthas\u0022\u003E\u003Cdiv\u003ELate to the party as well. \u003Cp\u003EI\u0027ve been sampling various programming languages of late (JavaScript, C\u002B\u002B, C#, and VB), and I cannot for the life of me understand why they all exist! \u003C/p\u003E\u003Cp\u003EI understand that there may be some differences in advanced usage, but what possible need could there be for all of the different syntax? console.log vs console.WriteLine for instance. How could someone NOT have standardized this by now? \u003C/p\u003E\u003Cp\u003EIf there was ONE syntax for mid-level programming languages, I should think we would leap forward in all sorts of computing-related fields. Am I missing a fundamental aspect of this?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cimg src=\u0022https://imgs.xkcd.com/comics/standards.png\u0022 alt=\u0022standards.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Mr Shifty","CreatedById":68146,"CreatedDateTime":"2015-10-07T16:16:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003ESo here is the issue. I want to pack 4 pieces of information into a byte. (byte = 2^8 possibilities, or 4^4). a 64 bit register is 8 bytes which means that i can pack 32 pieces of information into a register. \u003Cp\u003ESo i have an assembly language routine that does this and a few other things, is it poosible to integrate any assembly language routine into C\u002B\u002B?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUsually, yes, but the particular implementation depends on your compiler and machine. Assembly is always machine specific, so there\u0027s no generic case for it. You\u0027ll have to dig into your documentation to do it. \u003C/p\u003E\u003Cp\u003EIt\u0027s also probably possible to simply re-write the routine in C. C is somewhat terrible at bit-wise manipulation, but it can be done \u003Ca href=\u0022http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c\u0022 rel=\u0022external nofollow\u0022\u003Ethrough masks and the XOR operator\u003C/a\u003E. You can also do it by \u003Ca href=\u0022http://www.tutorialspoint.com/cprogramming/c_bit_fields.htm\u0022 rel=\u0022external nofollow\u0022\u003Especifying field widths\u003C/a\u003E in a struct (or, more likely, a union), but this is typically not a recommended practice because it creates non-portable code. (It will break on a machine with different register sizes and/or byte ordering.) Both methods will compile down to the bit-manipulation instructions that are found in most assembly instruction sets (a rare case where C is more verbose than assembly).\u003C/p\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-10-07T16:30:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003E... is it poosible to integrate any assembly language routine into C\u002B\u002B?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are plenty of examples given on the web, Google it.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-07T16:47:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mr Shifty\u0022 data-cite=\u0022Mr Shifty\u0022\u003E\u003Cdiv\u003EUsually, yes, but the particular implementation depends on your compiler and machine. Assembly is always machine specific, so there\u0027s no generic case for it. You\u0027ll have to dig into your documentation to do it. \u003Cp\u003EIt\u0027s also probably possible to simply re-write the routine in C. C is somewhat terrible at bit-wise manipulation, but it can be done \u003Ca href=\u0022http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c\u0022 rel=\u0022external nofollow\u0022\u003Ethrough masks and the XOR operator\u003C/a\u003E. You can also do it by \u003Ca href=\u0022http://www.tutorialspoint.com/cprogramming/c_bit_fields.htm\u0022 rel=\u0022external nofollow\u0022\u003Especifying field widths\u003C/a\u003E in a struct (or, more likely, a union), but this is typically not a recommended practice because it creates non-portable code. (It will break on a machine with different register sizes and/or byte ordering.) Both methods will compile down to the bit-manipulation instructions that are found in most assembly instruction sets (a rare case where C is more verbose than assembly).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks, as long as assembly is specific to the processor the sky is the limit?\u003C/p\u003E\n"},{"CreatedByName":"Mr Shifty","CreatedById":68146,"CreatedDateTime":"2015-10-07T17:19:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022llanthas\u0022 data-cite=\u0022llanthas\u0022\u003E\u003Cdiv\u003EI\u0027ve been sampling various programming languages of late (JavaScript, C\u002B\u002B, C#, and VB), and I cannot for the life of me understand why they all exist! \u003Cp\u003EIf there was ONE syntax for mid-level programming languages, I should think we would leap forward in all sorts of computing-related fields. Am I missing a fundamental aspect of this?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere\u0027s a sense in which all the languages you mentioned (with the exception of VB, but who codes in VB?) do share a syntax. They\u0027re all C-like -- that is semi-colon statement terminations, grouping with braces, case sensitivity, whitespace ignored, unary increment and decrement operators, type names and strictness. Java is included in that class as well, and even perl has some of those features. Certainly there are other coding models (e.g. Python), but C-like ones are easily the most common.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThanks, as long as assembly is specific to the processor the sky is the limit?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can code in assembly, compile the assembly to an object file, then link in the object file as a function call from your C or C\u002B\u002B code. There are ways to give the object file a handle that the linker will recognize, but you\u0027ll have to look those up as there\u0027s no standard way to specify a linker\u0027s activity, so it\u0027s implementation specific. There should be a section in either your compiler or linker documentation that describes how to link in an assembly object file.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-07T17:24:57Z\u0022 title=\u002210/07/2015 05:24  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 7, 2015\u003C/time\u003E by Mr Shifty\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"codepoet","CreatedById":73449,"CreatedDateTime":"2015-10-07T17:24:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mr Shifty\u0022 data-cite=\u0022Mr Shifty\u0022\u003E\u003Cdiv\u003EThere\u0027s a sense in which all the languages you mentioned (with the exception of VB, but who codes in VB?) do share a syntax. They\u0027re all C-like -- that is semi-colon statement terminations, grouping with braces, case sensitivity, whitespace ignored, unary increment and decrement operators, type names and strictness. Java is included in that class as well, and even perl has some of those features. Certainly there are other coding models (e.g. Python), but C-like ones are easily the most common.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can add PHP to the C-like list too.\u003C/p\u003E\u003Cp\u003EIf you want to know how different syntax could be lookup up LISP.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-07T17:36:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Mr Shifty\u0022 data-cite=\u0022Mr Shifty\u0022\u003E\u003Cdiv\u003EYou can code in assembly, compile the assembly to an object file, then link in the object file as a function call from your C or C\u002B\u002B code. There are ways to give the object file a handle that the linker will recognize, but you\u0027ll have to look those up as there\u0027s no standard way to specify a linker\u0027s activity, so it\u0027s implementation specific. There should be a section in either your compiler or linker documentation that describes how to link in an assembly object file.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah \u003Cem\u003ELink\u003C/em\u003E, the linux stuff is pretty well packaged to go along with C. Can\u0027t I do that with VB also, anyway aside from the point. \u003C/p\u003E\u003Cp\u003ESo if I don\u0027t want to pay the cost of transferring an array variable to an variable before the transfer I need to have 4 different variables IOW don\u0027t specify an array variable until all the assembly math is complete and ready to package. Yeah, I will have to read up on the link in and outs later this PM.\u003C/p\u003E\n"},{"CreatedByName":"aussiedwarf","CreatedById":64535,"CreatedDateTime":"2015-10-07T21:24:57Z","Content":"\n\u003Cp\u003EReading and writing 2 bits of information can be done with shifting and masking. Off the top of my head something like this should work but then I don\u0027t know fully what your assembly code does. Since it is short it could also be inlined to potentially save a function call. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//reads bits\u003Cbr\u003Eint GetBits(uint64_t bytes, int index)\u003Cbr\u003E{\u003Cbr\u003E  return (bytes \u0026gt;\u0026gt; (index * 2)) \u0026amp; 3;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E//sets bits but will not overwrite set bits\u003Cbr\u003Euint64_t SetBits(uint64_t bytes, int bits, int index)\u003Cbr\u003E{\u003Cbr\u003E  return bytes | (bits \u0026lt;\u0026lt; (index * 2));\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E//overwrites bits to be set\u003Cbr\u003Euint64_t OverwriteBits(uint64_t bytes, int bits, int index)\u003Cbr\u003E{\u003Cbr\u003E  return (bytes \u0026amp; ~(3 \u0026lt;\u0026lt; (index*2))) | (bits \u0026lt;\u0026lt; (index * 2));\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIs this just a short hand way of storing dna, so A, T, G or C?\u003C/p\u003E\u003Cp\u003ELooking back at Mr Shifty posts, he has linked to what I wrote above and is right about linking to assembly.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-07T22:07:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aussiedwarf\u0022 data-cite=\u0022aussiedwarf\u0022\u003E\u003Cdiv\u003EReading and writing 2 bits of information can be done with shifting and masking. Off the top of my head something like this should work but then I don\u0027t know fully what your assembly code does. Since it is short it could also be inlined to potentially save a function call. Is this just a short hand way of storing dna, so A, T, G or C?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, its a way of encoding a search and find string with as few bytes as possible, also can be used for direct addressing in shorter searches. A T G and C are letters they would require a full byte, so they would need to be encrypted and then packed. A, C, G, T are ASCII decimal codes 65, 67, 71, 85? and a byte is composed of 2^8 possibilities and this leaves a maximum for a split of 2^4 or 16, each of these exceed 16. \u003C/p\u003E\u003Cp\u003Eit can be accomplished by\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMOV AL, m1\u003Cbr\u003EMOV CL, 2\u003Cbr\u003ESHL AL, CL\u003Cbr\u003EADD AL, m2\u003Cbr\u003ESHL AL, CL\u003Cbr\u003EADD AL, m3\u003Cbr\u003ESHL AL, CL\u003Cbr\u003EADD AL, m4\u003Cbr\u003EMOV [Output], AL\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-10-07T22:13:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EYeah \u003Cem\u003ELink\u003C/em\u003E, the linux stuff is pretty well packaged to go along with C. Can\u0027t I do that with VB also, anyway aside from the point.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can. CRL supports execution of native code as a function call. I don\u0027t know specifics on how you\u0027d go about linking Assembly/C code from VB, or even if you can do that directly, but what you certainly can do is compile and link your Assembly/C code into a dynamic library (DLL), and load it from your VB program. Then you can call your Assembly/C functions just like you would call any other dynamic library function from VB. I have done this with C# code.\u003C/p\u003E\u003Cp\u003EWhat you will need to be a little careful about is how variables get passed to your library. I see to recall needing to set up arrays of data in a special way. But it\u0027s straight forward enough.\u003C/p\u003E\n"},{"CreatedByName":"aussiedwarf","CreatedById":64535,"CreatedDateTime":"2015-10-07T23:54:38Z","Content":"\n\u003Cp\u003EBy ATGC I mean the nucleobases adenine, thymine, guanine, and cytosine. And since there are only 4 of them, only 2 bits need to be used to store them meaning a single byte can store 4 consecutive base pairs.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-08T00:24:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aussiedwarf\u0022 data-cite=\u0022aussiedwarf\u0022\u003E\u003Cdiv\u003EBy ATGC I mean the nucleobases adenine, thymine, guanine, and cytosine. And since there are only 4 of them, only 2 bits need to be used to store them meaning a single byte can store 4 consecutive base pairs.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThey can be encoded 0~3, N which appears in poorly defined parts has to be encoded as all variants or sequence that contains it must be ignored otherwise the packing drops to 2 per byte.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-08T02:43:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EYou can. CRL supports execution of native code as a function call. I don\u0027t know specifics on how you\u0027d go about linking Assembly/C code from VB, or even if you can do that directly, but what you certainly can do is compile and link your Assembly/C code into a dynamic library (DLL), and load it from your VB program. Then you can call your Assembly/C functions just like you would call any other dynamic library function from VB. I have done this with C# code.\u003Cp\u003EWhat you will need to be a little careful about is how variables get passed to your library. I see to recall needing to set up arrays of data in a special way. But it\u0027s straight forward enough.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWow, these procedure calls are archaic, or maybe thats how C makes the code portable. . . \u003C/p\u003E\u003Cp\u003ETo pass variables you have to load them onto the stack in reverse order, but accessing the variables does not remove them from the stack; they have to be repointed or manually removed from the stack after return call is made. If the procedure is a Function proper then EAX 32 has the return value, but if its 64 bit it has to be placed in EDX and EAX. Seems is not the most clever way, particularly if you want to send an array of data to a routine you would send a pointer in EAX to where the datasegment begins. \u003C/p\u003E\u003Cp\u003EI\u0027ll have to keep this in mind because this appears not to be specific to AL calls but to all function calls in C.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-10-08T02:52:04Z","Content":"\n\u003Cp\u003EHow functions are called in C is not part of the spec, but this is the most common way, and what Visual Studio is going to work with.\u003C/p\u003E\u003Cp\u003EExcept, you don\u0027t need to \u0022remove\u0022 anything from the stack. You simply increment the stack pointer. It\u0027s literally one of the fastest operations you can perform on a CPU.\u003C/p\u003E\u003Cp\u003EBesides, Visual Basic will also use the stack under the hood, except, it\u0027s going to push a lot more information, requiring a huge overhead on function calls compared to C.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-10-08T03:20:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EHow functions are called in C is not part of the spec, but this is the most common way, and what Visual Studio is going to work with.\u003Cp\u003EExcept, you don\u0027t need to \u0022remove\u0022 anything from the stack. You simply increment the stack pointer. It\u0027s literally one of the fastest operations you can perform on a CPU.\u003C/p\u003E\u003Cp\u003EBesides, Visual Basic will also use the stack under the hood, except, it\u0027s going to push a lot more information, requiring a huge overhead on function calls compared to C.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah this author is doing that up until he gets to the Ret, then he starts backing stuff off the stack into the registers. The problem here is if you cant change the values below the calling stack pointer in the stack before the return call, you can only access them, which means at most you get a parsable 64 bit number on the return. In VB at least you can change the arguments of the procedure unless you use the byval modifyer, this means you have access to the args before the return. Anyway Im sure ive not got all the details right, i see many GFPs in my future, lol. \u003C/p\u003E\u003Cp\u003EIt looks as if the only way to access the AL procedures is through C calls, at least no other alternative is given. I will have to do more research.\u003C/p\u003E\u003Cp\u003EThis was designed for a linux C call that\u0027s supposed also to work with C\u002B\u002B.\u003C/p\u003E\n"}]}