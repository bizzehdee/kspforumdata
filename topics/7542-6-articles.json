{"TopicId":7542,"ForumId":29,"TopicTitle":"The official unoffical \u0026quot;help a fellow plugin developer\u0026quot; thread","CreatedByName":"Cephei","CreatedById":2555,"CreatedDateTime":"2012-03-04T10:02:40Z","PageNum":6,"Articles":[{"CreatedByName":"Emilio","CreatedById":12359,"CreatedDateTime":"2012-03-28T18:11:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarkun\u0022 data-cite=\u0022sarkun\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EDisclaimer: I\\\u0027m not a c# expert, been coding in it for a week or so \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EBut:\u003C/p\u003E\u003Cp\u003Eif it complaing about a lack of \u003Cstrong\u003Emain\u003C/strong\u003E method, it means it wants to treat your project as a standalone program - the main method is a standard entry point into such. I believe you have chosen wrong project type when you began coding - it should be c# library.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOoops. Now it works (raaah, compiler works, but not plugin !)\u003C/p\u003E\n"},{"CreatedByName":"Alchemist","CreatedById":8825,"CreatedDateTime":"2012-04-01T08:01:49Z","Content":"\n\u003Cp\u003EAnybody knows, how to find folder of the current part? Except for searching all the part folders for the right name in part.cfg.\u003C/p\u003E\n"},{"CreatedByName":"Emilio","CreatedById":12359,"CreatedDateTime":"2012-04-04T10:28:55Z","Content":"\n\u003Cp\u003EHow do you use the parachute animation system (cannot be retracted, disappears at 0 m/s, moving cables) in a plugin ?\u003C/p\u003E\n"},{"CreatedByName":"Alchemist","CreatedById":8825,"CreatedDateTime":"2012-04-11T09:30:40Z","Content":"\n\u003Cp\u003EIs it possible to destroy (or make completely non-interactible) node_collider?\u003C/p\u003E\u003Cp\u003EIt\\\u0027s necessary in the VAB (to handle surface attachments), but it should disappear in flight (because even allow collision flag makes it interact with other parts when it\\\u0027s disconnected). I want to competery remove this collider so that a part inside it won\\\u0027t be thrown out on disconnection (there will be multiple additional colliders to properly interact with other objects.\u003C/p\u003E\u003Cp\u003EUpdate: proved too easy: DestroyObject(this.collider);\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-15T13:30:13Z","Content":"\n\u003Cp\u003EMaking a completely custom engine class set derived straight from part.\u003C/p\u003E\u003Cp\u003ECan\\\u0027t seem to find a straight answer as to whether or not to factor Time.deltaTime into AddForceAtPosition force param.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EonActiveFixedUpdate\u003Cbr\u003E{\u003Cbr\u003E...\u003Cbr\u003Ethis.rigidbody.AddForceAtPosition(thrVector * thrust, this.transform.position, UnityEngine.ForceMode.Force);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI already have the thing flyable, and a simple test showed identical results with equivalent liquid/custom engines, but it\\\u0027s difficult to produce lag-on-demand(Only shows up when you don\\\u0027t want it). Anyone know definitely if Unity physics handles framerate internally, or if I need to compensate explicitly?\u003C/p\u003E\u003Cp\u003EMuch appreciated if anyone knows.\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-04-15T16:29:47Z","Content":"\n\u003Cp\u003EGoogled a bit, the FixedUpdate is handled framerate-indepenend, that explains why there was no difference. Otherwise, I could need some engine code for my remake of the Cephei plugin that contained decompiled code, I could also test it at extreme lag for you, so could you maybe give me that engine stuff? Thanks in advance.\u003C/p\u003E\n"},{"CreatedByName":"Victor Ludorum","CreatedById":17681,"CreatedDateTime":"2012-04-15T16:45:30Z","Content":"\n\u003Cp\u003EConsensus on the Unity forums seems to be that the integrator handles the scaling of forces (and torques) so you should \u003Cem\u003Enot\u003C/em\u003E scale them by the timestep. (This makes sense from the way most numerical integration schemes work - the scaling is part of the integration equation, not the input constants.)\u003C/p\u003E\u003Cp\u003EIt would be nice if we had access to the source code of some exemplar parts - an engine, a fuel tank, a winglet, etc. These would be invaluable for plug-in authors to ensure they are doing things the way the game expects.\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-15T23:29:04Z","Content":"\n\u003Cp\u003E TYVM for the clarification. I thought it was integrated, but was finding a couple conflicting answers from google, and just wanted to make sure it wouldn\\\u0027t come bite me later on.\u003C/p\u003E\u003Cp\u003E I\\\u0027m more than happy to give you the code, Kreuzung. Once I get a little more in there at least, right now there\\\u0027s exactly 5 lines of functional code, 2 of which simply turn the engine on/off with a key. It moves the ship, but does nothing else atm. Was going to put up a thread when it\\\u0027s a little more functional, as it\\\u0027s actually setup as a class to derive new non-rocket engine types from, rather than a monolithic new engine.\u003C/p\u003E\u003Cp\u003E On that note, just a friendly reminder that if you do not explicitly set your class itself as public, it\\\u0027s template is not available outside your particular executable, which means nobody else can tell their code what your part is, and so cannot interact with it. Not an issue most of the time; but if you have something that extends/modifies something common like fuel tanks, if you don\\\u0027t make it public, the end parts that people use will be incompatible with each other(Tank A becomes ignored by Engine \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E. r4m0n was already kind enough to agree to this, so MuMech VariableTanks shouldn\\\u0027t have any problems.\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-04-16T11:02:27Z","Content":"\n\u003Cp\u003EWe should maybe agree on some standards (like making the classes public) and maybe even create a class library that implements easy-to-modify classes that implement basic things like engine behaviour or line-of-sight (for solar stuff). In my remake of Cepheis plugin I have a class called EL_API that allows other plugin makers (and myself) to use my energy system as easy as the standard fuel system.\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-18T02:30:01Z","Content":"\n\u003Cp\u003E Ran into another problem with polymorphism and overridden virtual methods. I\\\u0027m far from knowledgeable about C#, so this may be a simple non-issue I\\\u0027m making overcomplicated.\u003C/p\u003E\u003Cp\u003E Basically, it\\\u0027s this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E {\u003Cbr\u003E public virtual void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E class Part1 : Part\u003Cbr\u003E {\u003Cbr\u003E public override void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E base.MethodA();\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E class Part2 : Part1\u003Cbr\u003E {\u003Cbr\u003E public override void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E base.MethodA(); //how to call Part MethodA directly\u003Cbr\u003E }\u003Cbr\u003E }\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  class Part\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E Is there any way to skip over the Part1 method in the daisychain and call the Part methods themselves? I found something on delegates, but it was getting ridiculously complicated.\u003C/p\u003E\u003Cp\u003EED: Assuming the only code that can be modified is the Part2 class.\u003C/p\u003E\n"},{"CreatedByName":"r4m0n","CreatedById":5404,"CreatedDateTime":"2012-04-18T06:06:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kellven\u0022 data-cite=\u0022kellven\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E Ran into another problem with polymorphism and overridden virtual methods. I\\\u0027m far from knowledgeable about C#, so this may be a simple non-issue I\\\u0027m making overcomplicated.\u003C/p\u003E\u003Cp\u003E Basically, it\\\u0027s this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E {\u003Cbr\u003E public virtual void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E class Part1 : Part\u003Cbr\u003E {\u003Cbr\u003E public override void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E base.MethodA();\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E class Part2 : Part1\u003Cbr\u003E {\u003Cbr\u003E public override void MethodA() {\u003Cbr\u003E dosomething;\u003Cbr\u003E base.MethodA(); //how to call Part MethodA directly\u003Cbr\u003E }\u003Cbr\u003E }\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  class Part\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E Is there any way to skip over the Part1 method in the daisychain and call the Part methods themselves? I found something on delegates, but it was getting ridiculously complicated.\u003C/p\u003E\u003Cp\u003EED: Assuming the only code that can be modified is the Part2 class.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EToo lazy to try it out, but you could try something like:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E  class Part2 : Part1\u003Cbr\u003E  {\u003Cbr\u003E    public override void MethodA() {\u003Cbr\u003E      dosomething;\u003Cbr\u003E      typeof(Part).GetMethod(\u0027MethodA\u0027).Invoke(this);\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMind you, this is an abomination in the name of inheritance, but probably works because of the way Reflection works.\u003C/p\u003E\u003Cp\u003EThere may be some actual mechanic in the language to do that more cleanly, but I\\\u0027m not familiar enough with C# to tell for sure (but apparently I know enough to spill that abomination above ???).\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-18T07:23:02Z","Content":"\n\u003Cp\u003EThanks, I\\\u0027ll try it out, but from what I read, not even reflection will get you past the override. Seems the method gets resolved to the most overridden version at runtime, even if you somehow fool the compiler at compile time. Fortunately, I haven\\\u0027t seen anything bad happen from not calling the Part.OnActiveFixedUpdate method, so I\\\u0027m not terribly worried right now.\u003C/p\u003E\n"},{"CreatedByName":"Victor Ludorum","CreatedById":17681,"CreatedDateTime":"2012-04-18T16:35:14Z","Content":"\n\u003Cp\u003EAs far as I\\\u0027ve been able to tell, all the Part.on{X} functions marked virtual (Part.onFlightStart(), Part.onPartExplode(), etc.) do nothing by themselves, so they are probably empty. It doesn\\\u0027t seem to matter if you call the base function or not, I\\\u0027ve yet to see any difference in behaviour.\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-22T01:45:30Z","Content":"\n\u003Cp\u003E Still might be taking a chance here, but I think this falls inside the good line on posting stuff here, and it might help someone who needs an engine with custom behavior.\u003C/p\u003E\u003Cp\u003E This is what I came up with for the public LiquidEngine definition parameters. May or may not be accurate, found with trial, error, logic, and Unity ref.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E public float fuelConsumption = 1; //Fuel consumption(kg/s)\u003Cbr\u003E public float gimbalAngleH = 0; //Horizontal gimbal rotation from input, needs to be applied to gimbal base orientation\u003Cbr\u003E public float gimbalAngleV = 0; //Vertical \u0027\u0027 These are used in calc to alter engine thrust vector\u003Cbr\u003E public float gimbalRange = 0; //Gimbal rotation maximum (in degrees?)\u003Cbr\u003E public float heatProduction = 0; //Heat produced by rocket thrust\u003Cbr\u003E public float maxThrust = 100; // m/s^2\u003Cbr\u003E public float minThrust = 0; // m/s^2 These two are used along with throttle setting to set thrust internal value\u003Cbr\u003E public Vector3 thrustVector = Vector3.up; //Set from CFG to align thrust relative to part. Used with below for untranslated orientation\u003Cbr\u003E public Vector3 thrustCenter = Vector3.zero; //Not present in LiquidEngine, but in SolidRocket, offset from part origin(is thrust origin)\u003Cbr\u003E public bool thrustVectoringCapable = false; //If false, don\\\u0027t apply gimbal\u003Cbr\u003E\u003Cbr\u003E protected float thrust; //used internally, for calculating thrust from throttle setting, becomes magnitude of vector passed to AddForce (m/s^2)\u003Cbr\u003E protected Vector3 thrVector; //Internal (transformed) thrust vector. Multiplied with above to give direction for AddForce\u003Cbr\u003E protected Quaternion initRot; //the initial (local) rotation of the (Transform) gimbal. Needed to animate the gimbal as model need not be aligned \u0026amp; at origin\u003Cbr\u003E protected Part fuelSource; //Fueltank the engine directly connects to(if any), needed for (simple) standard fuel calling, and to kill engine when tank dies.\u003Cbr\u003E protected Transform gimbal; //transform of gimbal object in model.\u003Cbr\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-22T02:05:25Z","Content":"\n\u003Cp\u003E Unity physics stuff goes in FixedUpdate blocks, which one depends on what you\\\u0027re trying to do. I use onActiveFixedUpdate() for my engine code.\u003C/p\u003E\u003Cp\u003EThere\\\u0027s four basic things an engine seems to need done inside that particular block.\u003C/p\u003E\u003Cp\u003E1. Get a direction and magnitude to apply the thrust. Also need position if you\\\u0027re using thrustCenter offset.\u003C/p\u003E\u003Cp\u003E2. Call for fuel.\u003C/p\u003E\u003Cp\u003E3. Apply the thrust.\u003C/p\u003E\u003Cp\u003E4. Manage visual effects.\u003C/p\u003E\u003Cp\u003E There\\\u0027s probably more, but this seems to be all that\\\u0027s required for my \u0027no deathray\u0027 engine bypass. Custom fuel calls can be done in other ways, the only reason to bother overriding the engine code is to remove functionality. I found that by providing your own\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprotected override void onActiveFixedUpdate()\u003C/pre\u003E\u003Cp\u003E and deriving from LiquidEngine, the whole thing doesn\\\u0027t need to be rewritten from Part. Also, your method does \u003Cspan style=\u0022text-decoration:underline;\u0022\u003Enot\u003C/span\u003E seem to need to daisychain back through \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ebase.onActiveFixedUpdate()\u003C/pre\u003E\u003Cp\u003E. You are giving your own method in LiquidEngine\\\u0027s place, and the Part method seems to not be needed.\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-22T02:42:42Z","Content":"\n\u003Cp\u003E This is some actual code I came up with to do some of what I listed above.\u003C/p\u003E\u003Cp\u003E 1.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EthrVector = transform.rotation * thrustVector;\u003C/pre\u003E\u003Cp\u003E. This will get you the basic direction to thrust toward. Still needs to be gimbal adjusted. This needs a quaterion and vector, and is the simplest way to get at them I\\\u0027ve found.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 2.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ereturn base.RequestFuel(Dest, Amount, Part.getFuelReqId());\u003C/pre\u003E\u003Cp\u003E. This is a working standard fuel call I came up with. Dest is the engine itself, Amount is fuelconsumption normalized for deltaTime, and possibly timewarp depending how used.\u003C/p\u003E\u003Cp\u003E getFuelReqId is complicated. Looking at the parameter lists, it appears vanilla fuel handling is done (async?) with a call index. This method call works for me, but I\\\u0027ve seen multiple versions in other people\\\u0027s code.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 3.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E protected void ApplyThrust(Part Me, Vector3 force, Vector3 origin)\u003Cbr\u003E {\u003Cbr\u003E if (force.magnitude == 0 || physicalSignificance != Part.PhysicalSignificance.FULL || rigidbody == null)\u003Cbr\u003E return;\u003Cbr\u003E Me.rigidbody.AddForceAtPosition(force, origin, UnityEngine.ForceMode.Force);\u003Cbr\u003E }\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  ApplyThrust(this, thrVector.normalized * thrust, transform.position \u002B thrustCenter);\u003C/pre\u003E\u003Cp\u003E I call this in a function, so Me = this. This is the heart of the engine code, is the AddForceAtPosition. It takes a direction vector with magnitude=m/s^2, the position to apply force at, and the mode.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 4.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E Visual effects I just use an on/off if statement, and \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMathf.Lerp(0.5F, 1.0F, (float) (thrust/maxThrust));\u003C/pre\u003E\u003Cp\u003E to scale the effects. No idea if this is the right way to do it, but it works for me.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E I\\\u0027ve done this in 3 posts just incase it\\\u0027s decided something is too detailed. I don\\\u0027t use or have a decompiler, and this is all my own code, anyone if free to use it. I tried to keep it as generalized as possible to avoid possible appearance of duplicating KSP code, some things can only really be written one way without intentionally adding slowcode however.\u003C/p\u003E\n"},{"CreatedByName":"r4m0n","CreatedById":5404,"CreatedDateTime":"2012-04-22T04:04:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022kellven\u0022 data-cite=\u0022kellven\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E This is some actual code I came up with to do some of what I listed above.\u003C/p\u003E\u003Cp\u003E 1.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EthrVector = transform.rotation * thrustVector;\u003C/pre\u003E\u003Cp\u003E. This will get you the basic direction to thrust toward. Still needs to be gimbal adjusted. This needs a quaterion and vector, and is the simplest way to get at them I\\\u0027ve found.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 2.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ereturn base.RequestFuel(Dest, Amount, Part.getFuelReqId());\u003C/pre\u003E\u003Cp\u003E. This is a working standard fuel call I came up with. Dest is the engine itself, Amount is fuelconsumption normalized for deltaTime, and possibly timewarp depending how used.\u003C/p\u003E\u003Cp\u003E getFuelReqId is complicated. Looking at the parameter lists, it appears vanilla fuel handling is done (async?) with a call index. This method call works for me, but I\\\u0027ve seen multiple versions in other people\\\u0027s code.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 3.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003E protected void ApplyThrust(Part Me, Vector3 force, Vector3 origin)\u003Cbr\u003E {\u003Cbr\u003E if (force.magnitude == 0 || physicalSignificance != Part.PhysicalSignificance.FULL || rigidbody == null)\u003Cbr\u003E return;\u003Cbr\u003E Me.rigidbody.AddForceAtPosition(force, origin, UnityEngine.ForceMode.Force);\u003Cbr\u003E }\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E  ApplyThrust(this, thrVector.normalized * thrust, transform.position \u002B thrustCenter);\u003C/pre\u003E\u003Cp\u003E I call this in a function, so Me = this. This is the heart of the engine code, is the AddForceAtPosition. It takes a direction vector with magnitude=m/s^2, the position to apply force at, and the mode.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E 4.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E Visual effects I just use an on/off if statement, and \u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMathf.Lerp(0.5F, 1.0F, (float) (thrust/maxThrust));\u003C/pre\u003E\u003Cp\u003E to scale the effects. No idea if this is the right way to do it, but it works for me.\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E I\\\u0027ve done this in 3 posts just incase it\\\u0027s decided something is too detailed. I don\\\u0027t use or have a decompiler, and this is all my own code, anyone if free to use it. I tried to keep it as generalized as possible to avoid possible appearance of duplicating KSP code, some things can only really be written one way without intentionally adding slowcode however.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETalking about trying to \u0027avoid possible appearance of duplicating KSP code\u0027 makes it sound like you read the source \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E.\u003C/p\u003E\u003Cp\u003EI haven\\\u0027t used your code in the VariableEngine yet due to the lack of gimballing, which is quite important (and tricky to implement well). I did have an idea of an ugly hack to do away with the deathray while keeping the base code intact, though, and I\\\u0027ll be trying it soon.\u003C/p\u003E\n"},{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2012-04-22T07:46:14Z","Content":"\n\u003Cp\u003EI started some drama about illegal code, and just wanted to be clear I wasn\\\u0027t using anything I wasn\\\u0027t supposed to.\u003C/p\u003E\u003Cp\u003EEdit: My Part derived engines actually do gimbal, it\\\u0027s just a matter of applying the pitch and yaw from the flight ctrl struct to the vector. The problem is that I don\\\u0027t know exactly where and how LiquidEngine applies it. I just sent you what I had because it seems to be flyable, though you have to rely on pod/rcs for maneuvering.\u003C/p\u003E\n"},{"CreatedByName":"Victor Ludorum","CreatedById":17681,"CreatedDateTime":"2012-04-23T19:59:07Z","Content":"\n\u003Cp\u003EHas anyone managed to get fxgroups working? I want to emit a visual burst kind of like when an RCS thruster fires. In the RCS block .cfg, there are lines like this:\u003C/p\u003E\u003Cp\u003E[tt]fx_gasJet_white = -0.609303, 1.58536, -0.0059382, -0.173648, 0.984808, 0.0, rcsGroup0[/tt]\u003C/p\u003E\u003Cp\u003EWhich I assume is a position and vector, with some kind of ID string at the end.\u003C/p\u003E\u003Cp\u003EThen Part has a [tt]List\u0026lt;FXGroup\u0026gt; fxGroups;[/tt]\u003C/p\u003E\u003Cp\u003Ewhich I\\\u0027m guessing is a reference to each fx_ line in the .cfg, though I don\\\u0027t know if it\\\u0027s auto-populated. \u003C/p\u003E\u003Cp\u003E(Edit: Turns out it is populated, but with FXGroups with ids \u0027prelaunch\u0027, \u0027activate\u0027, active\u0027, and \u0027deactivate\u0027. None of the fx_ lines in the .cfg seem to be present so they probably have to be parsed/added somehow.)\u003C/p\u003E\u003Cp\u003EThere\\\u0027s also [tt]Part.findFxGroup(string).[/tt] FXGroup itself has[tt] begin()[/tt] and [tt]Burst()[/tt] member functions. \u003C/p\u003E\u003Cp\u003EI\\\u0027ve tried a few things but without effect, mostly it seems I can\\\u0027t initialize the FXGroup correctly. Anyone had any more success than this? I guess I could learn Unity\\\u0027s particle system and create it from scratch, but it seems silly to do that when it\\\u0027s already in the game.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-04-23T23:32:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\\\u0027ve tried a few things but without effect, mostly it seems I can\\\u0027t initialize the FXGroup correctly. Anyone had any more success than this? I guess I could learn Unity\\\u0027s particle system and create it from scratch, but it seems silly to do that when it\\\u0027s already in the game.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003EI\\\u0027d recommend learning \u003Ca href=\u0022http://unity3d.com/support/documentation/ScriptReference/ParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity particle system\u003C/a\u003E, it\\\u0027s quite simple. You can make a particle emitter working in \u003Cem\u003Eless than 20\u003C/em\u003E lines of code.\u003Cp\u003ELook for examples in \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/index.php?topic=8117\u0022 rel=\u0022external nofollow\u0022\u003EVoid Bukerneering Particle Cannon\u003C/a\u003E and \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/index.php?topic=10598\u0022 rel=\u0022external nofollow\u0022\u003EGravitsapa\u003C/a\u003E plugins.\u003C/p\u003E\n"},{"CreatedByName":"r4m0n","CreatedById":5404,"CreatedDateTime":"2012-04-24T03:14:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tosh\u0022 data-cite=\u0022Tosh\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\\\u0027d recommend learning \u003Ca href=\u0022http://unity3d.com/support/documentation/ScriptReference/ParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EUnity particle system\u003C/a\u003E, it\\\u0027s quite simple. You can make a particle emitter working in \u003Cem\u003Eless than 20\u003C/em\u003E lines of code.\u003C/p\u003E\u003Cp\u003ELook for examples in \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/index.php?topic=8117\u0022 rel=\u0022external nofollow\u0022\u003EVoid Bukerneering Particle Cannon\u003C/a\u003E and \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/index.php?topic=10598\u0022 rel=\u0022external nofollow\u0022\u003EGravitsapa\u003C/a\u003E plugins.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECorrection: Cloning one of the existing effects and changing a few parameters takes only a few lines of code, creating a new particle effect purely from C# is currently IMPOSSIBLE.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-04-24T03:37:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022r4m0n\u0022 data-cite=\u0022r4m0n\u0022\u003E\u003Cdiv\u003ECorrection: Cloning one of the existing effects and changing a few parameters takes only a few lines of code, creating a new particle effect purely from C# is currently IMPOSSIBLE.\u003C/div\u003E\u003C/blockquote\u003EI meant exactly the same -- instantiating one of \u003Cem\u003Eexisting \u003C/em\u003EKSP effects and adjusting \u003Cem\u003Eall the particle\\\u0027s behavior\u003C/em\u003E (speed and speed variance, life duration, damping force, etc..). \u003Cp\u003EAnd as concerning a new particle \u003Cem\u003Etype... \u003C/em\u003EI wonder is it possible to load an external PNG as a particle texture? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"r4m0n","CreatedById":5404,"CreatedDateTime":"2012-04-24T03:52:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tosh\u0022 data-cite=\u0022Tosh\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI meant exactly the same -- instantiating one of \u003Cem\u003Eexisting \u003C/em\u003EKSP effects and adjusting \u003Cem\u003Eall the particle\\\u0027s behavior\u003C/em\u003E (speed and speed variance, life duration, damping force, etc..). \u003C/p\u003E\u003Cp\u003EAnd as concerning a new particle \u003Cem\u003Etype... \u003C/em\u003EI wonder is it possible to load an external PNG as a particle texture? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u0027\u003Cem\u003Eall the particle\\\u0027s behavior\u003C/em\u003E\u0027 is also incorrect. Unity doesn\\\u0027t have C# classes for \u003Ca href=\u0022http://unity3d.com/support/documentation/Components/class-MeshParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EMeshParticleEmitter\u003C/a\u003E and \u003Ca href=\u0022http://unity3d.com/support/documentation/Components/class-EllipsoidParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EEllipsoidParticleEmitter\u003C/a\u003E, so the attributes unique to them are inaccessible, making some changes impossible. Also, I haven\\\u0027t been able to change the color of the particles in my attempts, but maybe I just didn\\\u0027t try hard enough.\u003C/p\u003E\n"},{"CreatedByName":"Tosh","CreatedById":11055,"CreatedDateTime":"2012-04-24T04:13:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022r4m0n\u0022 data-cite=\u0022r4m0n\u0022\u003E\u003Cdiv\u003EUnity doesn\\\u0027t have C# classes for \u003Ca href=\u0022http://unity3d.com/support/documentation/Components/class-MeshParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EMeshParticleEmitter\u003C/a\u003E and \u003Ca href=\u0022http://unity3d.com/support/documentation/Components/class-EllipsoidParticleEmitter.html\u0022 rel=\u0022external nofollow\u0022\u003EEllipsoidParticleEmitter\u003C/a\u003E\u003C/div\u003E\u003C/blockquote\u003EAh. I never considered \u003Cem\u003Ethose\u003C/em\u003E ones, point emitter was good enough for me :\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E(Edit: Turns out it is populated, but with FXGroups with ids \u0027prelaunch\u0027, \u0027activate\u0027, active\u0027, and \u0027deactivate\u0027. None of the fx_ lines in the .cfg seem to be present so they probably have to be parsed/added somehow.)\u003C/div\u003E\u003C/blockquote\u003EI\\\u0027ve just re-read your post...\u003Cp\u003EThose \u003Cem\u003E\u0027prelaunch\u0027, \u0027activate\u0027, active\u0027 \u003C/em\u003Eand \u003Cem\u003E\u0027deactivate\u0027 \u003C/em\u003E groups just tell the game \u003Cem\u003Ewhen\u003C/em\u003E to display a certain effect. For example, an engine has the following FX definitions in its .CFG:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- FX definitions ---\u003Cbr\u003Efx_exhaustFlame_blue = 0.0, -0.8, 0.0, 0.0, 1.0, 0.0, active\u003Cbr\u003Efx_exhaustLight_blue = 0.0, -0.8, 0.0, 0.0, 0.0, 1.0, active\u003Cbr\u003Efx_smokeTrail_light = 0.0, -3.0, 0.0, 0.0, 1.0, 0.0, active\u003Cbr\u003E// --- Sound FX definition ---\u003Cbr\u003Esound_vent_medium = activate\u003Cbr\u003Esound_rocket_hard = active\u003Cbr\u003Esound_vent_soft = deactivate\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EEffects \u003Cem\u003Ethemselves \u003C/em\u003Eare stored in game resources library under exactly the same name as corresponding .CGF line. For example, \u003Cem\u003Efx_exhaustFlame_yellow \u003C/em\u003Eeffect may be started with the following code -- \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EGameObject o = Object.Instantiate( \u0027Effects/fx_exhaustFlame_yellow\u0027 ) as GameObject;\u003Cbr\u003EParticleEmitter e = o.particleEmitter;\u003Cbr\u003E// do some setup with that ParticleEmitter; see Unity reference\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Victor Ludorum","CreatedById":17681,"CreatedDateTime":"2012-04-24T17:58:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Tosh\u0022 data-cite=\u0022Tosh\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThose \u003Cem\u003E\u0027prelaunch\u0027, \u0027activate\u0027, active\u0027 \u003C/em\u003Eand \u003Cem\u003E\u0027deactivate\u0027 \u003C/em\u003E groups just tell the game \u003Cem\u003Ewhen\u003C/em\u003E to display a certain effect. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell yes, I\\\u0027m guessing those particular groups are standard for all parts, that are fired automatically (?) when those events happen. But some parts (I think only the RCS thrusters at the moment) define custom group ID strings in the .cfg, like \u003Cem\u003ErcsGroup0\u003C/em\u003E etc., that I think are triggered manually.\u003C/p\u003E\u003Cp\u003EIf you derive a part from RCSModule, you can list the contents of fxGroups and find those custom IDs there (along with the standard ones). You can also trigger them to fire using [tt]findFXGroup(\u0027rcsGroup0\u0027).Burst()[/tt] and the like. However if you try to define your own custom fx ID in the .cfg you get an error during loading:\u003C/p\u003E\u003Cp\u003EERROR: FX Group \\\u0027testGroup\\\u0027 not found in TestPart\u003C/p\u003E\u003Cp\u003ESo they\\\u0027re not being automatically parsed, you probably have to predefine them in the code somehow.\u003C/p\u003E\u003Cp\u003EAll in all using Unity\\\u0027s particle system directly will probably be less work (actually I know it is; I already have it half-working, I just need to tune the effect parameters to what I want) but I\\\u0027d like to get a handle on FXGroups too, especially as they seem to handle sounds as well.\u003C/p\u003E\n"}]}