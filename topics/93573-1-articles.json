{"TopicId":93573,"ForumId":20,"TopicTitle":"Shader loader/replacer","CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-12-18T19:30:30Z","PageNum":1,"Articles":[{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-12-18T19:30:30Z","Content":"\n\u003Cp\u003EHey All!\u003C/p\u003E\u003Cp\u003EI was thinking about creating a shader loader for EVE, and then it occurred to me, why not just make it a new standalone plugin?\u003C/p\u003E\u003Cp\u003EThe idea is that it would read in all files ending in *.shader, load them up in unity so that they can be called on with Shader.Find().\u003C/p\u003E\u003Cp\u003EI *think* this should work with parts, but I\u0027m not entirely certain. This could mean authors could craft their own shaders for specific uses, and have an easy way to get them into KSP.\u003C/p\u003E\u003Cp\u003EThoughts?\u003C/p\u003E\n"},{"CreatedByName":"nlight","CreatedById":123442,"CreatedDateTime":"2014-12-18T20:12:08Z","Content":"\n\u003Cp\u003EI am very happy that I\u0027m seeing this thread! I have put some work into making this happen but sadly it\u0027s not at all trivial. The first issue I encountered was that you cannot just pass shader code to Material, you have to go through the Unity compiler first, open up the compiled shader and copy its source. This is semi- OK, it makes things a bit inflexible but we can work with it. The other issues are worse though - first KSP renders with 3 cameras instead of one and blends the results onto each other. This makes many usually trivial post-processing effects like SSAO, DoF and many others to now become very tricky to implement. This is mostly due to the three cameras having different far/ near planes and therefore their depth buffer ranges are very different, I cannot see how this can be worked around without major loss of precision somewhere, maybe somebody can prove me wrong. I see replacing part shaders as being doable in two ways - either walk the scene and forcibly replace all Renderer.material\u0027s or use Unity\u0027s render with replacement shaders functionality. Both of the approaches have different drawbacks, but I have mostly explored rendering with replaced shaders so I can tweak the cameras to get proper depth buffers. Another thing I\u0027ve tried is forcing deferred rendering on all the cameras, but many fixes need to be made for this to work also. I hope somebody can figure out how to get a normal and depth buffer with good precision that contains the whole scene, this will at least open up the possibility of a nice post-processing framework. As to replacing part shaders, this will also be fun to do, the only success I\u0027ve had is to write shaders that have completely identical inputs/ outputs to KSP\u0027s stock shaders (which I\u0027ve had to decompile for this). Also it seems that for some reason most of the part shaders are marked as Transparent and this brings a whole another bunch of problems. Sorry if this seems somewhat incoherent, I\u0027ve worked on this some time ago and some details slip my mind, this is pretty much what I can remember.\u003C/p\u003E\u003Cp\u003EHere is my \u003Ca href=\u0022https://github.com/AlexanderDzhoganov/ksp-graphics-overhaul\u0022 rel=\u0022external nofollow\u0022\u003EGitHub repo\u003C/a\u003E that I\u0027ve now made public which contains a semi- working implementation of depth of field \u002B some material replacement by walking the scene. The DoF implementation has its own huge issues but the shader loading stuff is there. Sadly I\u0027ve seem to have lost the shader sources themselves, but the dof shader was from the default unity pack so it should be pretty easy to setup.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-18T20:15:00Z\u0022 title=\u002212/18/2014 08:15  PM\u0022 data-short=\u00229 yr\u0022\u003EDecember 18, 2014\u003C/time\u003E by nlight\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-12-18T20:32:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nlight\u0022 data-cite=\u0022nlight\u0022\u003E\u003Cdiv\u003EI am very happy that I\u0027m seeing this thread! I have put some work into making this happen but sadly it\u0027s not at all trivial. The first issue I encountered was that you cannot just pass shader code to Material, you have to go through the Unity compiler first, open up the compiled shader and copy its source. This is semi- OK, it makes things a bit inflexible but we can work with it. The other issues are worse though - first KSP renders with 3 cameras instead of one and blends the results onto each other. This makes many usually trivial post-processing effects like SSAO, DoF and many others to now become very tricky to implement. This is mostly due to the three cameras having different far/ near planes and therefore their depth buffer ranges are very different, I cannot see how this can be worked around without major loss of precision somewhere, maybe somebody can prove me wrong. I see replacing part shaders as being doable in two ways - either walk the scene and forcibly replace all Renderer.material\u0027s or use Unity\u0027s render with replacement shaders functionality. Both of the approaches have different drawbacks, but I have mostly explored rendering with replaced shaders so I can tweak the cameras to get proper depth buffers. Another thing I\u0027ve tried is forcing deferred rendering on all the cameras, but many fixes need to be made for this to work also. I hope somebody can figure out how to get a normal and depth buffer with good precision that contains the whole scene, this will at least open up the possibility of a nice post-processing framework. As to replacing part shaders, this will also be fun to do, the only success I\u0027ve had is to write shaders that have completely identical inputs/ outputs to KSP\u0027s stock shaders (which I\u0027ve had to decompile for this). Also it seems that for some reason most of the part shaders are marked as Transparent and this brings a whole another bunch of problems. Sorry if this seems somewhat incoherent, I\u0027ve worked on this some time ago and some details slip my mind, this is pretty much what I can remember.\u003Cp\u003EHere is my \u003Ca href=\u0022https://github.com/AlexanderDzhoganov/ksp-graphics-overhaul\u0022 rel=\u0022external nofollow\u0022\u003EGitHub repo\u003C/a\u003E that I\u0027ve now made public which contains a semi- working implementation of depth of field \u002B some material replacement by walking the scene. The DoF implementation has its own huge issues but the shader loading stuff is there. Sadly I\u0027ve seem to have lost the shader sources themselves, but the dof shader was from the default unity pack so it should be pretty easy to setup.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHa! Funny! I did pretty much the EXACT same thing with KSP for my EVE overhaul... The atmosphere effect and ocean depth changes I\u0027m working on required a working depth buffer, so I extracted the Squad shaders so I could add the \u0022RenderType\u0022 shader tag to them. I then grab all the materials and forcefully replace all the shaders. I do this at the begining before parts are created, so when the parts are duplicated, they bring the new shader with them. I also go through the cameras and enable the depth rendering. It works pretty well for me, but unfortunately, as you said, the multiple cameras thing is tricky. So far, I\u0027ve resigned to only doing depth stuff on the \u0022Far\u0022 camera, and making sure the effects \u0022fade in\u0022 as they approach the camera before they hit the near clipping plane.\u003C/p\u003E\u003Cp\u003EYou can check out all the work I\u0027ve done so far at \u003Ca href=\u0022https://github.com/rbray89/EnvironmentalVisualEnhancements/tree/Overhaul\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/rbray89/EnvironmentalVisualEnhancements/tree/Overhaul\u003C/a\u003E\u003C/p\u003E\n"}]}