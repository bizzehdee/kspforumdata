{"TopicId":159001,"ForumId":29,"TopicTitle":"[SOLVED] c-sharp or ksp api problem","CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-10T21:55:13Z","PageNum":1,"Articles":[{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-10T21:55:13Z","Content":"\n\u003Cp\u003E\nI\u0027ve got serious problem with using a List / Dictionary collection classes where adding data in one event does not\n\u003C/p\u003E\n\u003Cp\u003E\npropagate to other event.\n\u003C/p\u003E\n\u003Cp\u003E\nCode example:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ECollections\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGeneric\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELinq\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EText\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EUnityEngine\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enamespace\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ETestPartPlugin\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ETestPartPlugin\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EPartModule\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Estruct\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E teststruct\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E string s\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eclass\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E testclass\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E string s\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n        \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// this is shared among events, it will be passed as argument, for purposes of this example its not a problem ?\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;teststruct\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E l \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EList\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0026lt;teststruct\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E string ss\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E override \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EOnLoad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E node\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            base\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EOnLoad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Enode\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            ss \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E string\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0027x\u0027\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E10\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// just allocate in runtime and fill it with dummy data, for reference to the problem at hand\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            teststruct t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//now the interesting part\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Efor\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E10\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u002B)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                t \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E teststruct\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//also did same with testclass, same problem\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Es \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022a\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//dummy fill\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E i\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                l\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Et\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//add new item. if i looped in collection inside here, it would work\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n        \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Epublic\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E override \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Evoid\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EOnStartFinished\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EStartState\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E state\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// now the troublesome part\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            base\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EOnStartFinished\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Estate\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022LIST DUMP START\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            foreach \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eteststruct t in l\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n                \u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022string: \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Es \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022 int: \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EToString\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E());\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// BANG ! List/struct is empty !\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022LIST DUMP END\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n            \u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022simple string test: \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E ss\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//this worked, meh ...\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI need a mutable collection that will be filled in OnLoad() and then later being used in OnStartFinished() . Right now, when i fill data in OnLoad(), inside OnStartFinished() my collection will be empty, no data is present. What now ? would using \u0022out\u0022 keyword in method argument work ? I tried \u0022ref\u0022 also with no result.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-14T06:03:53Z\u0022 title=\u002204/14/2017 06:03  AM\u0022 data-short=\u00227 yr\u0022\u003EApril 14, 2017\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Warezcrawler","CreatedById":145377,"CreatedDateTime":"2017-04-10T23:31:36Z","Content":"\n\u003Cp\u003E\nTry and put your Debug.Logs in the OnLoad() as well... See what it was then. Lists work just fine across methods, as long as they are commonly defined in the class. Also try and keep track of the size of the list, is that changing between the two methods?\n\u003C/p\u003E\n\u003Cp\u003E\nNote: You do not need to keep base.Onload(...) or\u00A0base.OnStartFinished(...) both are empty placeholders for modding. Second, only need to use OnStartFinished() if you need to change something which is done in the Start() of the PartModule, otherwise OnStart() is just fine.\n\u003C/p\u003E\n\u003Cp\u003E\nI do something like this in my mod, and it is fine. MultiMode is a custom class, but I used a struct earlier and it works too. I use mine across all methods in my class basically.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Epublic List\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;MultiMode\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E modes { get; protected set; }\nMRC = part.FindModulesImplementing\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ModuleResourceConverter\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E();\n\npublic void initializeSettings()\n{\n\tmodes = new List\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;MultiMode\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E(MRC.Count);\n\tfor (int i = 0; i \u0026lt; MRC.Count; i\u002B\u002B)\n\t{\n\t\tmodes.Add(new MultiMode()\n\t\t{\n\t\t\tmoduleIndex = i,\n\t\t\tID = i.ToString(),\n\t\t\tName = MRC[i].ConverterName\n\t\t});\n\t}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/WarezCrawler/Guybrush101/blob/master/GTI_MultiModeConverter/GTI_MultiModeConverter.cs#L22-L34\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/WarezCrawler/Guybrush101/blob/master/GTI_MultiModeConverter/GTI_MultiModeConverter.cs#L22-L34\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2017-04-10T23:46:58Z","Content":"\n\u003Cp\u003E\nThe \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/153765-getting-started-the-basics-of-writing-a-plug-in/\u0022 rel=\u0022\u0022\u003Eunofficial documentation\u003C/a\u003E says that PartModule.OnLoad is \u0022Run when a game load happens.\u0022 From that description, it\u0027s not very clear whether it runs\u00A0if you\u0027re already loaded and just switching scenes, for example. I wouldn\u0027t be surprised if it simply isn\u0027t being called at all in your test case.\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2017-04-11T00:52:25Z","Content":"\n\u003Cp\u003E\nThis thread will help if you are interested in the order of events and which methods are called for a PartModule.\n\u003C/p\u003E\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/145340-the-lifecycle-of-a-part-module-a-primer/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-11T01:25:22Z","Content":"\n\u003Cp\u003E\nFirstly, thanks to all for replies !\n\u003C/p\u003E\n\u003Cp\u003E\nSecondly, i forgot to mention that example plugin was tested in \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E editor scene and OnLoad() does get called properly, every time.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat i don\u0027t understand, is that my list simply does not \u0022carry over\u0022 to OnStartFinished(), as if it was never called. Simply all references inside\n\u003C/p\u003E\n\u003Cp\u003E\nList were lost, wiped clean. Any attempt to use complex type (class, struct, list, dictionary) fails to retain reference outside calling method.\n\u003C/p\u003E\n\u003Cp\u003E\nCalling GC.KeepAlive() on my list and its newly added item at end of OnLoad() also failed.\n\u003C/p\u003E\n\u003Cp\u003E\nI tried searching on net but no such problems were mentioned (i find most solutions over at stackexchange).\n\u003C/p\u003E\n\u003Cp\u003E\nThe above example source is what i have compiled into DLL, copied into subfolder in GameData and referenced it in part cfg via MODULE{} node.\n\u003C/p\u003E\n\u003Cp\u003E\nI did look at plugin sources at github and pretty much everywhere List is normally used from OnLoad(), nothing unusual. I\u0027m starting to believe something is wrong with my VS 2015 CE install.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-11T01:26:00Z\u0022 title=\u002204/11/2017 01:26  AM\u0022 data-short=\u00227 yr\u0022\u003EApril 11, 2017\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2017-04-11T01:43:29Z","Content":"\n\u003Cp\u003E\nWhat happens if you use your testclass instead of teststruct? The \u003Ca href=\u0022https://msdn.microsoft.com/en-us/library/0taef578.aspx\u0022 rel=\u0022external nofollow\u0022\u003EC# docs\u003C/a\u003E say, \u0022A struct is a value type, while a class is a reference type,\u0022 which makes me suspect that this line:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003El\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EAdd\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Et\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n... is actually adding repeated references to the \u003Cem\u003Esame\u003C/em\u003E\u00A0object, and\u00A0this line\u00A0clears/resets that one object instead of creating a new one and assigning a reference to it:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003Et \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Enew\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E teststruct\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nWhat I\u0027m really wondering now is...\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022string: \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Es \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022 int: \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ei\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EToString\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E());\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// BANG ! List/struct is empty !\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n... does this comment mean the List is empty, or the struct is empty? What\u0027s the actual output?\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-11T01:51:27Z","Content":"\n\u003Cp\u003E\nIn the meantime i\u0027ve changed struct to class and same thing happened.\n\u003C/p\u003E\n\u003Cp\u003E\nI know c# has garbage collector that frees unused stuff from memory as soon as all references are gone (included leaving method\u0027s scope). But keeping a reference inside a List should keep GC from freeing it.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027m just reusing the same variable to point to newly created item to be added into List, this shouldn\u0027t be the problem ?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-11T01:52:46Z\u0022 title=\u002204/11/2017 01:52  AM\u0022 data-short=\u00227 yr\u0022\u003EApril 11, 2017\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-11T02:10:47Z","Content":"\n\u003Cp\u003E\nI did a similar test in Unity3D (attached a script to camera, filled a text mesh with output) and let it run. It worked from start. \u003Cimg alt=\u0022:huh:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 title=\u0022:huh:\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-11T02:11:25Z\u0022 title=\u002204/11/2017 02:11  AM\u0022 data-short=\u00227 yr\u0022\u003EApril 11, 2017\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-11T10:45:33Z","Content":"\n\u003Cp\u003E\nHere is the \u003Ca href=\u0022https://www.dropbox.com/s/a355mdg3lazp7kn/TestPartPlugin.zip?dl=0\u0022 rel=\u0022external nofollow\u0022\u003Eproject file\u003C/a\u003E with compiled DLL in debug mode.\n\u003C/p\u003E\n\u003Cp\u003E\nPlease review at your leisure.\n\u003C/p\u003E\n\u003Cp\u003E\nThanks in advance !\n\u003C/p\u003E\n\u003Cp\u003E\nNOTE: I\u0027m on win 7 x64, KSP 1.2.2, VS 2015 CE update 3. Performed one VS installation repair.\n\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2017-04-11T16:46:21Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223016916\u0022 data-ipsquote-contentid=\u0022159001\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221491873922\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n15 hours ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSecondly, i forgot to mention that example plugin was tested in \u003Cabbr title=\u0022SpacePlane Hangar\u0022\u003ESPH\u003C/abbr\u003E editor scene and OnLoad() does get called properly, every time.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nCan you clarify how you\u0027re testing this? OnLoad will only run in the editor if the parts are being loaded from disk or the editor cache so when you say \u0022every time\u0022 I\u0027m suspicious. It certainly won\u0027t be running when you pick a part from the parts list and then place it onto the ship, for example\n\u003C/p\u003E\n"},{"CreatedByName":"Warezcrawler","CreatedById":145377,"CreatedDateTime":"2017-04-11T17:03:21Z","Content":"\n\u003Cp\u003E\nTry viewing these videos. They helped me in the beginning. At about 6m 25s in it discusses when the different methods are being run (i.e. onstart(), onload() etc.)\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo ipsEmbeddedVideo_limited\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022true\u0022 frameborder=\u00220\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/GxeZDvyT7UY?feature=oembed\u0022 width=\u0022480\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2017-04-11T20:11:36Z","Content":"\n\u003Cp\u003E\nI would add a Debug.Log line to your OnLoad() method so you can tell when it running first.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve had issues in the past where the order that Start and Load run in does not seem to be set so my guess is that things are working fine, it\u0027s just that OnStartFinished() is running before OnLoad() does so at that time the list is in fact empty.\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n"},{"CreatedByName":"Warezcrawler","CreatedById":145377,"CreatedDateTime":"2017-04-11T22:16:25Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223017727\u0022 data-ipsquote-contentid=\u0022159001\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221491941496\u0022 data-ipsquote-userid=\u002281549\u0022 data-ipsquote-username=\u0022Diazo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n2 hours ago, Diazo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI would add a Debug.Log line to your OnLoad() method so you can tell when it running first.\n\u003C/p\u003E\n\u003Cp\u003E\nI\u0027ve had issues in the past where the order that Start and Load run in does not seem to be set so my guess is that things are working fine, it\u0027s just that OnStartFinished() is running before OnLoad() does so at that time the list is in fact empty.\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI agree with D, that you need to add logs to the onload and follow the execution order. However, I\u0027ve never encountered that Onload(), OnStart etc. load order have been different. That said, I\u0027m much newer to modding KSP than D is, he is usually right....\n\u003C/p\u003E\n\u003Cp\u003E\n(OnAwake) --\u0026gt; Onload --\u0026gt; OnStart --\u0026gt; OnStartFinished\n\u003C/p\u003E\n\u003Cp\u003E\nI think OnAwake is not run every time a module is created, so maybe only for static stuff? (I\u0027m not sure with the awake part).\n\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2017-04-12T01:44:15Z","Content":"\n\u003Cp\u003E\nIt comes back to not being sure about the order of operations thing.\n\u003C/p\u003E\n\u003Cp\u003E\nWay back when (KSP 0.90 days), I ran into this issue myself where the different methods were running out of order, or at least in a different order then I expected.\n\u003C/p\u003E\n\u003Cp\u003E\nThe conclusion I came to at the time was that in the editor they ran OnStart then OnLoad, while in flight they ran OnLoad then OnStart, so I decoupled my methods so that it doesn\u0027t matter which one ran first.\n\u003C/p\u003E\n\u003Cp\u003E\nHowever, that doesn\u0027t make any logical sense but as I still decouple my methods to this day I\u0027ve never actually tested what the order the methods run in on the current version of KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nSo yes, it is quite easy to get things out of order. Stick Debug.Log lines \u003Cem\u003Eeverywhere\u003C/em\u003E so you know exactly what is happening when is the best advice I have for you right now.\n\u003C/p\u003E\n\u003Cp\u003E\nD.\n\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2017-04-12T01:56:01Z","Content":"\n\u003Cp\u003E\nFound setting this up very helpful for debugging\n\u003C/p\u003E\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/102909-ksp-plugin-debugging-and-profiling-for-visual-studio-and-monodevelop-on-all-os/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-13T15:59:12Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/120438-wasml/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022120438\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/120438-wasml/\u0022 rel=\u0022\u0022\u003E@wasml\u003C/a\u003E Thanks for the info, will look into it. If i ever intend to continue writing plugins, debugging will be unavoidable.\n\u003C/p\u003E\n\u003Cp\u003E\nOne other thing : Does this in-game-debug enable me to explore data structures ? Like for example how does API \u0022see\u0022 my config nodes in part cfg, when i traverse all ConfigNode items in VS ?\n\u003C/p\u003E\n\u003Cp\u003E\n@ALL thanks for the insights, because of your effort i have realized that PartModules are designed to have static data structures, some flexibility is possible in flight scenes.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, the module that i write is not purely a PartModule, or more accurately, it needs more than PartModule can offer on it\u0027s own. So, i further researched the subject and came up with my working solution for loading part config in editor.\n\u003C/p\u003E\n\u003Cp\u003E\nMy module needs to configure itself from part config in flight and editor scenes.\n\u003C/p\u003E\n\u003Cp\u003E\nBelow is example code, a promising start.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rootNode \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELoad\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan\u003EKSPUtil\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EApplicationRootPath\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022GameData/0000_MyMods/mypart.cfg\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan\u003EConfigNode\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E moduleNode \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EGetNode\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022PART\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003EGetNodes\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022MODULE\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003EWhere\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Em \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E m\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ename \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E==\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022YourModuleClassName\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003ESingle\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E().\u003C/span\u003E\u003Cspan\u003EGetNodes\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E();\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nI can put this in OnStart() and have my config available in editor. Drawback is that i don\u0027t know how to obtain my module DLL path from part config is was called from and then use that to build a full path. As it is now, path is hard-coded into plugin, if i can just somehow obtain assembly path it could make my plugin more portable...\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-04-13T16:08:11Z\u0022 title=\u002204/13/2017 04:08  PM\u0022 data-short=\u00227 yr\u0022\u003EApril 13, 2017\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2017-04-13T16:40:56Z","Content":"\n\u003Cp\u003E\nWow i found a \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/32915-partmoduleonload-is-schizophrenic-heres-how-to-fix-it/\u0022 rel=\u0022\u0022\u003Efully working example\u003C/a\u003E that enables my plugin to load config from any folder, it is a direct copy/paste into test project in VS. I can now load required config data into plugin inside editor from relevant part config.\n\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2017-04-14T00:35:08Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223019929\u0022 data-ipsquote-contentid=\u0022159001\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221492099152\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDoes this in-game-debug enable me to explore data structures ? Like for example how does API \u0022see\u0022 my config nodes in part cfg, when i traverse all ConfigNode items in VS ?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThe debug allows you to see the variables/constants/etc that you\u0027ve declared \u002B the public stuff from KSP. If it\u0027s not public - not that I know of but I\u0027m fairly new to C#/.net.\n\u003C/p\u003E\n"}]}