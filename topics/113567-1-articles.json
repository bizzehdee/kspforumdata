{"TopicId":113567,"ForumId":32,"TopicTitle":"Is Kerbal Space Program Single-Threaded?","CreatedByName":"fangflight","CreatedById":118144,"CreatedDateTime":"2015-06-21T04:23:49Z","PageNum":1,"Articles":[{"CreatedByName":"fangflight","CreatedById":118144,"CreatedDateTime":"2015-06-21T04:23:49Z","Content":"\n\u003Cp\u003EIs this game Single-Threaded or Multi-Threaded? I am trying to design a budget PC that can run this game acceptably well.\u003C/p\u003E\n"},{"CreatedByName":"zekes","CreatedById":23840,"CreatedDateTime":"2015-06-21T04:24:33Z","Content":"\n\u003Cp\u003ESingle-Threaded due to Unity. That\u0027s why budget PCs will do well while mutli-core will suffer, it\u0027s the way the cores work, sadly.\u003C/p\u003E\n"},{"CreatedByName":"fangflight","CreatedById":118144,"CreatedDateTime":"2015-06-21T04:26:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zekes\u0022 data-cite=\u0022zekes\u0022\u003E\u003Cdiv\u003ESingle-Threaded due to Unity. That\u0027s why budget PCs will do well while mutli-core will suffer, it\u0027s the way the cores work, sadly.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo that\u0027s why my quad core desktop was running even worse than my dual core laptop...\u003C/p\u003E\n"},{"CreatedByName":"NovaSilisko","CreatedById":3897,"CreatedDateTime":"2015-06-21T04:37:57Z","Content":"\n\u003Cp\u003EContrary to popular belief, Unity \u003Cem\u003Ecan\u003C/em\u003E multithread \u003Cem\u003Esome\u003C/em\u003E things. Mostly things that are strictly data handling - for example, manipulating meshes. However, objects can\u0027t be created or destroyed on separate threads, so the applications are limited. However, KSP\u0027s terrain system is an ideal candidate for multithreading one day, if you ask me...\u003C/p\u003E\n"},{"CreatedByName":"SAI Peregrinus","CreatedById":125558,"CreatedDateTime":"2015-06-21T05:42:49Z","Content":"\n\u003Cp\u003EKSP is multithreaded. Just not the physics. Sound is a separate thread (actually several), I/O streams are threaded, etc. If you have Process Explorer, right-click KSP.exe, click properties, select the Threads tab, and see all the threads. So all the processor intensive stuff is in a single thread, and the disk I/O is going to be slow anyway, so it\u0027s single-threaded where it matters.\u003C/p\u003E\n"},{"CreatedByName":"xtoro","CreatedById":79015,"CreatedDateTime":"2015-06-21T06:54:56Z","Content":"\n\u003Cp\u003EI don\u0027t see why separate ships within physics range can\u0027t do their own physics on different cores though if they\u0027re not interacting with each other...\u003C/p\u003E\n"},{"CreatedByName":"Wolf Baginski","CreatedById":138549,"CreatedDateTime":"2015-06-21T09:47:12Z","Content":"\n\u003Cp\u003EThis sounds like one of those complicated things, but multi-core computing has been around for long enough that, just as with 64-bit, the general lack starts to feel disappointing. 64-bit processors were launched in 2003, 64-bit Windows XP in 2005. Multi-core was a bit earlier. Multi-threading isn\u0027t quite the same but overlaps. A thread is a logical structure for splitting up the work, for such purposes as multi-tasking and tack-switching.\u003C/p\u003E\u003Cp\u003EI know it can get complicated, but, as we know, they got a man to the moon more quickly.\u003C/p\u003E\u003Cp\u003E(I don\u0027t expect Squad to be fixing the problem, any more than I expect them to be fixing Windows or designing processor chips.)\u003C/p\u003E\n"},{"CreatedByName":"softweir","CreatedById":2795,"CreatedDateTime":"2015-06-21T11:50:06Z","Content":"\n\u003Cp\u003EAs has been mentioned above, Unity 4.x does very little multi-threading, so KSP is limited by that. In theory HarvesteR and co could try to improve the multi-threading a little, but that is back-breaking work and a good way to introduce horrible bugs and performance problems - much better to leave this sort of thing to the experts!\u003C/p\u003E\u003Cp\u003EI know that Unity 5 will be able to multi-thread physics, and that alone will be a significant improvement! It also has a unified, efficient UI package, which will improve matters when UI elements are active, and Unity Inc have claimed that Win 64 will be stable, which will have the Windows mod-collectors cheering. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Matt77","CreatedById":69015,"CreatedDateTime":"2015-06-21T15:20:38Z","Content":"\n\u003Cp\u003EI asked a similar question just recently, and people confirmed that although KSP is multi-threaded, the physics aren\u0027t - so it\u0027s single-threaded performance that matters.\u003C/p\u003E\u003Cp\u003EI went from an Athlon 64 X2 6000\u002B (3Ghz I think) to an Intel I3 4170 (3.7Ghz). The difference was substantial. I was also told Intel really out-performs AMD in single-threaded performance. This was backed up by all the comparisons I looked at.\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-06-21T15:57:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xtoro\u0022 data-cite=\u0022xtoro\u0022\u003E\u003Cdiv\u003EI don\u0027t see why separate ships within physics range can\u0027t do their own physics on different cores though if they\u0027re not interacting with each other...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is very likely to be the case with Unity 5.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wolf Baginski\u0022 data-cite=\u0022Wolf Baginski\u0022\u003E\u003Cdiv\u003EThis sounds like one of those complicated things, but multi-core computing has been around for long enough that, just as with 64-bit, the general lack starts to feel disappointing. 64-bit processors were launched in 2003, 64-bit Windows XP in 2005. Multi-core was a bit earlier. Multi-threading isn\u0027t quite the same but overlaps. A thread is a logical structure for splitting up the work, for such purposes as multi-tasking and tack-switching.\u003Cp\u003EI know it can get complicated, but, as we know, they got a man to the moon more quickly.\u003C/p\u003E\u003Cp\u003E(I don\u0027t expect Squad to be fixing the problem, any more than I expect them to be fixing Windows or designing processor chips.)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is one of those things that seems to be misunderstood a lot. Making a task multithreaded isn\u0027t so much a case of developers putting time into it, it has more to do with the nature of the task itself. Some tasks lend themselves very well to parallelization, like compression, rendering, cryptography; the programs for those have been multithreaded for decades. Some tasks are not easy to parallelize, and even when they are forced into multiple threads the management of the interacting threads starts to become the limiting factor (funnily, multithread management is not an easily threaded task).\u003C/p\u003E\u003Cp\u003EUnfortunately, the type of physics problem that a single vessel in KSP represents is not an easily threaded one. Unity 5 will definitely bring improvements for single vessels (its single thread performance is substantially better), but I\u0027m not convinced that we\u0027ll see big gains from multithreading other than when more than one vessel is in physics range.\u003C/p\u003E\n"},{"CreatedByName":"NovaSilisko","CreatedById":3897,"CreatedDateTime":"2015-06-21T17:18:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Red Iron Crown\u0022 data-cite=\u0022Red Iron Crown\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EUnfortunately, the type of physics problem that a single vessel in KSP represents is not an easily threaded one. Unity 5 will definitely bring improvements for single vessels (its single thread performance is substantially better), but I\u0027m not convinced that we\u0027ll see big gains from multithreading other than when more than one vessel is in physics range.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, you can only get so much from the multithreaded physics. Like I said before - the terrain in KSP is very greedy for processing power simply due to the amount of math it has to do to form all the vertices and stitch them up and make UV maps, etc, etc. If, one day, \u003Cem\u003Ethat\u003C/em\u003E were all multithreaded, it would be a massive boon to KSP. Experimentation in the past with terrain generation in Unity has convinced me of this - on a single thread, the generator would take upward of 10-20 seconds to generate everything. On multiple threads? \u003Cem\u003ELess than a quarter of a second.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EHopefully it can happen...\u003C/p\u003E\n"},{"CreatedByName":"xtoro","CreatedById":79015,"CreatedDateTime":"2015-06-21T18:42:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Red Iron Crown\u0022 data-cite=\u0022Red Iron Crown\u0022\u003E\u003Cdiv\u003EThat is very likely to be the case with Unity 5.\u003Cp\u003EThis is one of those things that seems to be misunderstood a lot. Making a task multithreaded isn\u0027t so much a case of developers putting time into it, it has more to do with the nature of the task itself. Some tasks lend themselves very well to parallelization, like compression, rendering, cryptography; the programs for those have been multithreaded for decades. Some tasks are not easy to parallelize, and even when they are forced into multiple threads the management of the interacting threads starts to become the limiting factor (funnily, multithread management is not an easily threaded task).\u003C/p\u003E\u003Cp\u003EUnfortunately, the type of physics problem that a single vessel in KSP represents is not an easily threaded one. Unity 5 will definitely bring improvements for single vessels (its single thread performance is substantially better), but I\u0027m not convinced that we\u0027ll see big gains from multithreading other than when more than one vessel is in physics range.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESource? Or speculation? I\u0027ve programmed multithreaded apps, and yes, the management can be tricky with synchronization and preventing thread locks, but it can be done. And once you have a good system in place to handle the threads properly, you never have to worry about it again unless you change the thread sync behavior.\u003C/p\u003E\n"},{"CreatedByName":"includao","CreatedById":145136,"CreatedDateTime":"2015-06-21T19:09:20Z","Content":"\n\u003Cp\u003EUnity is amazing and terrible at the same time, when it comes to threading and efficient processor usage.\u003C/p\u003E\n"},{"CreatedByName":"Red Iron Crown","CreatedById":12858,"CreatedDateTime":"2015-06-21T21:02:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xtoro\u0022 data-cite=\u0022xtoro\u0022\u003E\u003Cdiv\u003ESource? Or speculation? I\u0027ve programmed multithreaded apps, and yes, the management can be tricky with synchronization and preventing thread locks, but it can be done. And once you have a good system in place to handle the threads properly, you never have to worry about it again unless you change the thread sync behavior.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EInteresting article about parallel constrained rigid body solvers (behind a paywall, but the summary should give you the gist): \u003Ca href=\u0022http://dl.acm.org/citation.cfm?id=2077406\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://dl.acm.org/citation.cfm?id=2077406\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt proposes splitting groups of bodies into batches for solving, but the critical thing is \u0022In a batch, no body is shared among constraints, so they can be solved in parallel.\u0022 Sounds like one batch per vessel, or at the very best one batch per major branch of the vessel tree (though this would be broken by parts between batches, like struts, fuel lines, and some docking port connections). Further, \u0022An introduction of batch solves the problem of constraint solving, but batch creation itself is a serial process.\u0022, so even if you are able to implement batch solving on a single vessel the scheduler that creates the batches each frame would still be a single thread with at best O(n) scaling with part count. Plus, this is a theory paper, no guarantee that PhysX\u0027s multithreaded implementation uses it, and I consider it unlikely as constrained rigidbody chains are not exactly a common thing in videogames (KSP notwithstanding).\u003C/p\u003E\u003Cp\u003EMy interpretation of all this is that it\u0027s unlikely we\u0027ll get more than a single thread per vessel. I could certainly (hopefully) be wrong about that, as I\u0027m not a mathematician, computer scientist, or physicist, but I\u0027m keeping my expectations low for multithreading.\u003C/p\u003E\n"},{"CreatedByName":"xtoro","CreatedById":79015,"CreatedDateTime":"2015-06-21T21:37:29Z","Content":"\n\u003Cp\u003EI think it can be solved by using some method to split a single ship into several sections in which different threads will handle different sections. Select a part to use which will link the 2 threads together, so to speak.\u003C/p\u003E\u003Cp\u003EI made these images a while ago to suggest this but I never got around to posting it. Lets say the physics engine decided that one of the fuel tanks (highlighted in blue) is where the physics for the ship will be split in 2:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/o5pu10Q\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/o5pu10Q.png\u0022 alt=\u0022o5pu10Q.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EPhysics thread 1 (above), handles all physics for the link (blue) part, and below. It doesn\u0027t see anything above it. However, the link part will have the same total mass, and the same center of mass of itself and all parts above it. This artificial center of mass and artificial added mass will simulate having the entire ship actually being there. But, the thread is still only computing for the link part and below. Any drag or lateral forces coming from the top half of the ship as a result of atmosphere, reaction wheels or RCS, is not calculated by this thread. Its forces are being passed from Thread 2, and exerted onto the link part. Similarly, any forces being applied from the engines, gimbaling, rcs etc such as thrust, drag, rotation, etc to the link part, are being passed onto Thread 2.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/j2bmBio\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/j2bmBio.png\u0022 alt=\u0022j2bmBio.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThread 2 (above) is only aware of the link part, and above. It doesn\u0027t see anything below the link part. It only reacts to and computes forces against the link part and everything above it. For Thread 2, the link part has the same mass as itself, plus everything \u003Cem\u003Ebelow \u003C/em\u003Eit. When the engines produce thrust, Thread 2 doesn\u0027t see it. But since Thread 1 is exerting thrust (or any force) on the link part, Thread 2 sees this force being applied to the link part as well. It doesn\u0027t matter where this force originates from because all that Thread 2 cares about is the link part and above. So as far as Thread 2 is concerned, there is thrust, or acceleration being applied from link one originating from a virtual CoT which is, in reality, the real location of the engine.\u003C/p\u003E\u003Cp\u003ESo for a simplified example:\u003C/p\u003E\u003Cp\u003EThe rocket in the pictures launches. X kN of thrust are coming from the engines. Thread 1 is pushing physical force from the engines all the way up to the link part, and that\u0027s it. Thread 2 is receiving data that the link part is exerting Y kN of upwards force (Y=X kN - the kN expended from moving the mass of the lower part of the ship). \u003C/p\u003E\u003Cp\u003EThe ship starts moving upwards and the upper parts start dragging (I know all parts get drag but I\u0027m leaving it out for simplification). Thread 2 exerts downward drag forces all the way down to the link part. Thread 1 receives drag resistance from the link part which is equal to the entire drag from all parts that Thread 2 has calculated.\u003C/p\u003E\u003Cp\u003EThe upper part of the ship has RCS thrusters which start firing towards the 90* heading. Thread 2 handles the upper part of the ship and exerts lateral force towards the 90* heading, to the link part. Thread 1 receives lateral forces from the link part, towards the 90* heading. But the important part is that this force does not act like there are RCS thrusters on the link part. The force is duplicated from the same source and with the same force as if the entire top of the ship was actually there. This means you still get the leverage force from having the RCS thrusters up high towards the top.\u003C/p\u003E\u003Cp\u003EThat\u0027s my theory of how it could work. There would of course be a thread which would be handling the data exchange between threads, using the link parts as physical inputs and outputs. But doing it this way means that each thread has less work to do per physics frame. Now imagine a much larger ship. It may be split into 3,4,5,6 sections, with each section being computed by individual threads. The more sections you have, the more threads you\u0027re using, and the more physics is being calculated at once.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-21T23:55:03Z\u0022 title=\u002206/21/2015 11:55  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 21, 2015\u003C/time\u003E by xtoro\u003C/strong\u003E\n\u003Cbr\u003ESpelling, clarification.\n\u003C/span\u003E\n"}]}