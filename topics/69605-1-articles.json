{"TopicId":69605,"ForumId":44,"TopicTitle":"DIY microcontroller","CreatedByName":"rpayne88","CreatedById":58336,"CreatedDateTime":"2014-04-17T03:52:15Z","PageNum":1,"Articles":[{"CreatedByName":"rpayne88","CreatedById":58336,"CreatedDateTime":"2014-04-17T03:52:15Z","Content":"\n\u003Cp\u003EI am trying to design a payload for a high powered rocket. I want the payload to take pressure, humidity, and temperature readings, then transmit the information back to my laptop in real time. The transmitter will be an XBee Pro 900 RPSMA. What I need help doing, though, is designing a minimalist microcontroller to take the data from the sensors and send it into the XBee for transmission. I want to design this from scratch, rather than use an Arduino in order to minimize weight.\u003C/p\u003E\u003Cp\u003EAnyone have any suggestions?\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-17T04:02:40Z","Content":"\n\u003Cp\u003Eyou dont so much design an mcu as much as picking one (though you can spin a soft processor on an fpga, but im not going there). arduino uses an 8-bit avr (well some of them, the due is a 32-bit arm chip).\u003C/p\u003E\u003Cp\u003Earms give you a lot of performance and lower power operation than avr. figure out how much cpu power, memory, and on chip features you need and pick a chip that fits those needs. it sounds like you are just sending a small amount of data, so you are basically reading sensors and transmitting their data. so an 8 bit chip might be all you need. there is pic, avr, ti, propeller, several others.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-17T04:06:06Z\u0022 title=\u002204/17/2014 04:06  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 17, 2014\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Idobox","CreatedById":80299,"CreatedDateTime":"2014-04-17T04:06:14Z","Content":"\n\u003Cp\u003EPIC are a favorite for DIY projects because of historic reasons, and the bunch of free tools.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-17T04:07:49Z","Content":"\n\u003Cp\u003Ei use avr but thats just because im familiar with the tool chain.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-04-17T04:09:34Z","Content":"\n\u003Cp\u003EIt\u0027s not particularly hard to design an 8-bit or 16-bit MCU, but manufacturing one is a completely different matter. There are a few places that build custom chips, but it\u0027s not cheap. As Nuke says, you are probably best to go with an existing solution.\u003C/p\u003E\u003Cp\u003EPersonally, I like the \u003Ca href=\u0022https://www.microchip.com/\u0022 rel=\u0022external nofollow\u0022\u003EMicrochip\u003C/a\u003E\u0027s PIC series. They are inexpensive, easy to code for, have great selection of features, and some of them come in tiniest packages. The drawback is fairly low clock speeds on most of them. So you need to make sure that the feature package matches your application very closely. Fortunately, it\u0027s possible to do more often than not.\u003C/p\u003E\u003Cp\u003EEdit: Come to think of it, there is one more option. There are some field-programmable controllers out there. It\u0027s going to be considerably more expensive, eat up more power, and probably be less flexible than stock MCU, but if it\u0027s just about having a project, and you absolutely must have a custom controller, that\u0027s an affordable option.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-17T04:22:54Z\u0022 title=\u002204/17/2014 04:22  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 17, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Idobox","CreatedById":80299,"CreatedDateTime":"2014-04-17T04:47:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIt\u0027s not particularly hard to design an 8-bit or 16-bit MCU, but manufacturing one is a completely different matter. There are a few places that build custom chips, but it\u0027s not cheap. As Nuke says, you are probably best to go with an existing solution.\u003Cp\u003EPersonally, I like the \u003Ca href=\u0022https://www.microchip.com/\u0022 rel=\u0022external nofollow\u0022\u003EMicrochip\u003C/a\u003E\u0027s PIC series. They are inexpensive, easy to code for, have great selection of features, and some of them come in tiniest packages. The drawback is fairly low clock speeds on most of them. So you need to make sure that the feature package matches your application very closely. Fortunately, it\u0027s possible to do more often than not.\u003C/p\u003E\u003Cp\u003EEdit: Come to think of it, there is one more option. There are some field-programmable controllers out there. It\u0027s going to be considerably more expensive, eat up more power, and probably be less flexible than stock MCU, but if it\u0027s just about having a project, and you absolutely must have a custom controller, that\u0027s an affordable option.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t think he wants to build a \u00C3\u201A\u00C2\u00B5controller. And PIC are quite expensive for what they are (around 1 or 2$ a piece), but you save a lot on the tools, which makes it great for amateurs, and bad for large scale production. A 8bit PIC16F should easily do the trick.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe transmitter will be an XBee Pro 900 RPSMA\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAre you sure you will have enough range with that? You might need a high gain antenna, at least on the ground. I\u0027s better to avoid using such an antenna on the rocket itself as it is larger and will work only when pointing toward the receiver.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-17T07:19:16Z","Content":"\n\u003Cp\u003Ethat xbee will do 10km, and all the ones of that model had one of those screw on antennas, so high gain is an option. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.sparkfun.com/products/9099\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.sparkfun.com/products/9099\u003C/a\u003E\u003C/p\u003E\u003Cp\u003Exbee has the best options for long range. i just wish their radios had fewer pins (bluetooth has the same problem). its fine if you just want to buy dev boards instead of designing your own pcbs.\u003C/p\u003E\u003Cp\u003Ei mostly use nrf24l01\u002B radios, ive got some cheap ones that can do 50 meters and another more expensive pair that can do 1km, though thats not good enough for this application.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-17T07:22:38Z\u0022 title=\u002204/17/2014 07:22  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 17, 2014\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Idobox","CreatedById":80299,"CreatedDateTime":"2014-04-17T08:53:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nuke\u0022 data-cite=\u0022Nuke\u0022\u003E\u003Cdiv\u003Ethat xbee will do 10km, and all the ones of that model had one of those screw on antennas, so high gain is an option. \u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe data sheet says you need a high gain antenna to get 10km. And at 900MHz, these are quite big. For example, a 4 elements Yagi Uda would already be 15 by 50cm for a meagre 9dB of gain (compared to 2dB by default)\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-17T09:14:18Z","Content":"\n\u003Cp\u003Ethis begs the question: how much range does he actually need? \u0022high powered rocket\u0022 is kinda vague.\u003C/p\u003E\n"},{"CreatedByName":"ecat","CreatedById":68747,"CreatedDateTime":"2014-04-17T15:14:40Z","Content":"\n\u003Cp\u003EA few of thoughts come to mind.\u003C/p\u003E\u003Cp\u003EIf the rocket or payload are designed to be recovered then forget the xbee and just log the data \u002B time stamp to flash. Quite a saving in power, cost and weight.\u003C/p\u003E\u003Cp\u003EHow much data is there to be logged? One set of pressure, humidity, and temperature readings per second? 10 per second? 100?\u003C/p\u003E\u003Cp\u003EIf your data rate is small wrt the available bandwidth you can either knock yourself out on error correction and hopefully increase the effective range, or investigate lower bandwidth greater range transmitter options.\u003C/p\u003E\u003Cp\u003EIf the size of the required antenna is a problem on the way up, can you log the data, detach the payload with a small parachute and transmit the data on the way back down? Maybe even integrate the antenna into the parachute?\u003C/p\u003E\u003Cp\u003EThere are so many possible microcontroller options. Here are two ready made to get you started:\u003C/p\u003E\u003Cp\u003EEasy option: Arduino Pro Mini 328 \u003Ca href=\u0022https://www.sparkfun.com/products/11113\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.sparkfun.com/products/11113\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EMore powerful: PIC32-PINGUINO \u003Ca href=\u0022https://www.olimex.com/Products/Duino/PIC32/PIC32-PINGUINO-MICRO/open-source-hardware\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.olimex.com/Products/Duino/PIC32/PIC32-PINGUINO-MICRO/open-source-hardware\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFinally, the smallest Arduino I\u0027m aware of \u003Ca href=\u0022http://www.frantone.com/CuteUino/cuteuino.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.frantone.com/CuteUino/cuteuino.html\u003C/a\u003E because Arduino does make life, or at least software, easy\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-17T15:36:24Z\u0022 title=\u002204/17/2014 03:36  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 17, 2014\u003C/time\u003E by ecat\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"-Velocity-","CreatedById":74097,"CreatedDateTime":"2014-04-17T17:53:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nuke\u0022 data-cite=\u0022Nuke\u0022\u003E\u003Cdiv\u003Ethis begs the question: how much range does he actually need? \u0022high powered rocket\u0022 is kinda vague.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot as vague as you might think. High power rocketry generally just means in excess of \u0022G\u0022 impulse ratings. So like, an H, I, J, K, etc. The thrust of some of these rockets gets over 1 kN. I mean, just look at this beast:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/uxgMhHOaUSY?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003EEven if you\u0027re \u0022just\u0022 using an H motor, there is plenty of thrust left over for electronics... and so I don\u0027t understand his desire to avoid Arduino- unless he\u0027s using like an H motor and is simply trying to maximize his peak altitude as much as possible.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-17T23:13:18Z","Content":"\n\u003Cp\u003Ewell in that case you have plenty of room for a high gain antennae.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ecat\u0022 data-cite=\u0022ecat\u0022\u003E\u003Cdiv\u003EA few of thoughts come to mind.\u003Cp\u003EIf the rocket or payload are designed to be recovered then forget the xbee and just log the data \u002B time stamp to flash. Quite a saving in power, cost and weight.\u003C/p\u003E\u003Cp\u003EHow much data is there to be logged? One set of pressure, humidity, and temperature readings per second? 10 per second? 100?\u003C/p\u003E\u003Cp\u003EIf your data rate is small wrt the available bandwidth you can either knock yourself out on error correction and hopefully increase the effective range, or investigate lower bandwidth greater range transmitter options.\u003C/p\u003E\u003Cp\u003EIf the size of the required antenna is a problem on the way up, can you log the data, detach the payload with a small parachute and transmit the data on the way back down? Maybe even integrate the antenna into the parachute?\u003C/p\u003E\u003Cp\u003EThere are so many possible microcontroller options. Here are two ready made to get you started:\u003C/p\u003E\u003Cp\u003EEasy option: Arduino Pro Mini 328 \u003Ca href=\u0022https://www.sparkfun.com/products/11113\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.sparkfun.com/products/11113\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EMore powerful: PIC32-PINGUINO \u003Ca href=\u0022https://www.olimex.com/Products/Duino/PIC32/PIC32-PINGUINO-MICRO/open-source-hardware\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.olimex.com/Products/Duino/PIC32/PIC32-PINGUINO-MICRO/open-source-hardware\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFinally, the smallest Arduino I\u0027m aware of \u003Ca href=\u0022http://www.frantone.com/CuteUino/cuteuino.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.frantone.com/CuteUino/cuteuino.html\u003C/a\u003E because Arduino does make life, or at least software, easy\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eif you are going big with the rocket, might as well go big with the electronics. some of these mcus have pretty large eeprom areas you can log to. adding an i2c eeprom to expand this is also an option, then again its fairly easy to connect up to sd cards. if recovery is the plan (and it should be), you might consider adding a gps to make it easier to find if it gets away from you. id also give it its own imu. if you can design the boards there are several fab houses to make them for you at about $20 per square inch. i wouldn\u0027t be surprised if someone didnt already make a special dev board for rocket telemetry, much like they do for drones.\u003C/p\u003E\n"},{"CreatedByName":"Bobnova","CreatedById":75385,"CreatedDateTime":"2014-04-22T03:27:29Z","Content":"\n\u003Cp\u003EOshpark will do PCBs for $5/square inch, extremely high quality PCBs.\u003C/p\u003E\u003Cp\u003EI\u0027d plop an Atmega328P (the chip from the Arduino, without the Arduino) in there and go to town with that. It doesn\u0027t get much easier to use.\u003C/p\u003E\n"},{"CreatedByName":"Pixelator","CreatedById":24186,"CreatedDateTime":"2014-04-22T03:55:23Z","Content":"\n\u003Cp\u003EPerhaps a Parallax Propeller? Easy to program, loads of sample code out there for working with xbee, and they are fairly self-contained, so building an MCU around one isn\u0027t too hard. Plus, the multi-core nature of the Propeller has got to help with pulling real-time data from multiple sensors and transmitting it simultaneously.\u003C/p\u003E\n"},{"CreatedByName":"Nuke","CreatedById":10883,"CreatedDateTime":"2014-04-22T04:48:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bobnova\u0022 data-cite=\u0022Bobnova\u0022\u003E\u003Cdiv\u003EOshpark will do PCBs for $5/square inch, extremely high quality PCBs.\u003Cp\u003EI\u0027d plop an Atmega328P (the chip from the Arduino, without the Arduino) in there and go to town with that. It doesn\u0027t get much easier to use.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Ethats not bad, better than last time i looked at having boards made. i make my own boards and it can be rather frustrating. layer alignment is hard and making vias sucks. \u003C/p\u003E\u003Cp\u003Eim starting to like tqfp packages, recently did a board with one, they are fairly easy to solder and hardly use any space.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-22T04:51:00Z\u0022 title=\u002204/22/2014 04:51  AM\u0022 data-short=\u002210 yr\u0022\u003EApril 22, 2014\u003C/time\u003E by Nuke\u003C/strong\u003E\n\u003C/span\u003E\n"}]}