{"TopicId":42577,"ForumId":44,"TopicTitle":"I need someone help me do some math for launch optimization","CreatedByName":"SaturnV","CreatedById":79006,"CreatedDateTime":"2013-08-15T10:56:30Z","PageNum":2,"Articles":[{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-23T06:39:22Z","Content":"\n\u003Cp\u003EAFAIK, the error in this method will be on-par with regular velocity-verlet.\u003C/p\u003E\u003Cp\u003EThere\u0027s a document which mentions this method \u003Ca href=\u0022http://physics.bu.edu/py502/lectures3/cmotion.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EStill looking into PSOPT stuff, but mostly working on reading up on the math.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT:\u003C/strong\u003E A simpler and more practical problem would be to optimize on the parameters given to the mechjeb ascent guidance system. Results from this sort of investigation would be immediately useful to players as well.\u003C/p\u003E\u003Cp\u003E(Though the problem itself isn\u0027t as cool . . .)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-23T07:05:28Z\u0022 title=\u002208/23/2013 07:05  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 23, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-23T07:28:32Z","Content":"\n\u003Cp\u003EEdited away talk of Lagrange polynomials and LGL points? Was getting interesting.\u003C/p\u003E\u003Cp\u003EI just remembered I think I still have a copy of GPOPS-II (\u003Ca href=\u0022http://vdol.mae.ufl.edu/SubmittedJournalPublications/TOMS-GPOPS-II-February-2013.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://vdol.mae.ufl.edu/SubmittedJournalPublications/TOMS-GPOPS-II-February-2013.pdf\u003C/a\u003E) somewhere, since one of the authors was asking me for help a few months ago with the Matlab interface to Ipopt. That might be easier to use than PSOPT since it\u0027s in Matlab, though it\u0027s much more restrictively licensed (only free if you work for the federal government or the University of Florida...).\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-27T23:01:21Z","Content":"\n\u003Cp\u003EJust a small update on this stuff:\u003C/p\u003E\u003Cp\u003EPSOPT is really hard to install on windows, so instead, I threw together a little pseudospectral optimal control solver in MATLAB (using fmincon from the optimization toolbox). I\u0027ve tested it on the brachistochrone problem with good results: \u003Ca href=\u0022http://imgur.com/LjYLYdM\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://imgur.com/LjYLYdM\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EI should be able to modify the code to solve for an optimal ascent trajectory (fingers crossed). \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-28T01:42:18Z","Content":"\n\u003Cp\u003EOh dear. Good luck, but I anticipate this problem to be more numerically challenging. ICLOCS maybe? \u003Ca href=\u0022http://www.ee.ic.ac.uk/ICLOCS/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www.ee.ic.ac.uk/ICLOCS/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI finished writing a direct RK4 optimization formulation, but wasn\u0027t providing a good enough initial guess to get reasonable convergence.\u003C/p\u003E\u003Cp\u003EEdit: I also spent too much time today reading and figuring out this paper that closette also linked to way back in the old max-altitude challenge: \u003Ca href=\u0022http://arxiv.org/pdf/math/0703911v1.pdf\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://arxiv.org/pdf/math/0703911v1.pdf\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ERevisited Pontryagin principle for the first time in a while, I now have a Mathematica notebook where I worked out the switching function and singular-arc throttle for KSP\u0027s drag and atmospheric-Isp model (in 2D, assuming equatorial launch). Unfortunately NDSolve didn\u0027t want to solve the boundary value problem with a piecewise-defined throttle function, and the symbolic solutions are way too long and messy to try porting them to some other language.\u003C/p\u003E\u003Cp\u003EInterestingly, in 2 or 3 dimensions, the optimal throttle direction isn\u0027t exactly aligned with velocity, rather it\u0027s aligned with the velocity costate (adjoint) vector. The costates have slightly different time evolution, but I imagine it shouldn\u0027t be too far away from the velocity direction for decent TWR.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-28T05:14:13Z\u0022 title=\u002208/28/2013 05:14  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 28, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-28T10:39:14Z","Content":"\n\u003Cp\u003EThanks for all the useful info! ICLOCS looks like a nice solution -- I\u0027ll give it a shot.\u003C/p\u003E\u003Cp\u003EI\u0027ve been able to get my homebrew solver to generate pretty accurate solutions to the (purely vertical) Goddard maximum ascent problem as defined \u003Ca href=\u0022http://tomopt.com/docs/propt/tomlab_propt044.php\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E. (\u003Ca href=\u0022http://i.imgur.com/xFKkhNh.png\u0022 rel=\u0022external nofollow\u0022\u003EMy Result\u003C/a\u003E)\u003C/p\u003E\u003Cp\u003EIt\u0027s probably too slow to solve more complicated problems, but it was a real learning experience to write. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EIn any case, I have a problem formulation (for a single-stage rocket) ready to plug into whichever solver I can get to work first:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E: \u003Ca href=\u0022http://i.imgur.com/xFBEkbu.png\u0022 rel=\u0022external nofollow\u0022\u003EProblem Formulation\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-28T11:47:23Z\u0022 title=\u002208/28/2013 11:47  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 28, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-08-28T17:31:51Z","Content":"\n\u003Cp\u003EHave you checked your solution against the analytic solutions for the simplified case? In other words, with simple exponentially dropping atmosphere, do you get optimal ascent at terminal velocity for most of the trip?\u003C/p\u003E\n"},{"CreatedByName":"ThreeKelvin","CreatedById":71863,"CreatedDateTime":"2013-08-28T20:05:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E: \u003Ca href=\u0022http://i.imgur.com/xFBEkbu.png\u0022 rel=\u0022external nofollow\u0022\u003EProblem Formulation\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELooks nice. You might want some further constraints:\u003C/p\u003E\u003Cp\u003ET(t_f) = 0 (No thrusting at the last instant in order to cheat the constraint \\dot{r}(t_f) = 0)\u003C/p\u003E\u003Cp\u003Er(t) \u0026gt;= r_{planet} (No shortcut through the planet - It might not be needed though.)\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-28T23:35:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EHave you checked your solution against the analytic solutions for the simplified case? In other words, with simple exponentially dropping atmosphere, do you get optimal ascent at terminal velocity for most of the trip?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI ran a test using KSP\u0027s dynamics and a test craft with a high TWR.\u003C/p\u003E\u003Cp\u003EThe objective was to maximize the final altitude for a vertical ascent.\u003C/p\u003E\u003Cp\u003EUsing my solver, this is what I got:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/QG2w2lE.png\u0022 rel=\u0022external nofollow\u0022\u003EVelocity as a Function of Altitude\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://i.imgur.com/moKwyMT.png\u0022 rel=\u0022external nofollow\u0022\u003EAscent Overview\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EUsing a better solver should allow these results to be refined much further.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ELooks nice. You might want some further constraints:\u003Cp\u003ET(t_f) = 0 (No thrusting at the last instant in order to cheat the constraint \\dot{r}(t_f) = 0)\u003C/p\u003E\u003Cp\u003Er(t) \u0026gt;= r_{planet} (No shortcut through the planet - It might not be needed though.)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENice catch!\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-28T23:35:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003EThanks for all the useful info! ICLOCS looks like a nice solution -- I\u0027ll give it a shot.\u003Cp\u003EI\u0027ve been able to get my homebrew solver to generate pretty accurate solutions to the (purely vertical) Goddard maximum ascent problem as defined \u003Ca href=\u0022http://tomopt.com/docs/propt/tomlab_propt044.php\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E. (\u003Ca href=\u0022http://i.imgur.com/xFKkhNh.png\u0022 rel=\u0022external nofollow\u0022\u003EMy Result\u003C/a\u003E)\u003C/p\u003E\u003Cp\u003EIt\u0027s probably too slow to solve more complicated problems, but it was a real learning experience to write. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EIn any case, I have a problem formulation (for a single-stage rocket) ready to plug into whichever solver I can get to work first:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT\u003C/strong\u003E: \u003Ca href=\u0022http://i.imgur.com/xFBEkbu.png\u0022 rel=\u0022external nofollow\u0022\u003EProblem Formulation\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, writing nontrivial stuff like this is a good way to learn, but a bad way to get something that runs quickly and reliably enough for challenging problems.\u003C/p\u003E\u003Cp\u003EYour formulation has some errors:\u003C/p\u003E\u003Cp\u003E- Drag should be defined in terms of surface-relative velocity, since the atmosphere rotates with Kerbin\u003C/p\u003E\u003Cp\u003E- rdot^2 and thetadot^2 are different units, can\u0027t add them - the magnitude of orbital velocity is sqrt(rdot^2 \u002B r^2 thetadot^2)\u003C/p\u003E\u003Cp\u003E- Similarly, missing a factor of r in the angular component of drag\u003C/p\u003E\u003Cp\u003E- Wrong sign in the exponent for pressure\u003C/p\u003E\u003Cp\u003E- Why a factor of 10 in the denominator of mdot? If you use kN for all forces and tons for all masses, then units will be fine\u003C/p\u003E\u003Cp\u003E- Shouldn\u0027t need to constrain theta, pitching below the horizon should be allowed (probably won\u0027t be optimal, but who knows)\u003C/p\u003E\u003Cp\u003E- Isp\u00AE not defined (more an omission than an error)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ThreeKelvin\u0022 data-cite=\u0022ThreeKelvin\u0022\u003E\u003Cdiv\u003ELooks nice. You might want some further constraints:\u003Cp\u003ET(t_f) = 0 (No thrusting at the last instant in order to cheat the constraint \\dot{r}(t_f) = 0)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI disagree with this one, rdot is a state so last-step thrusting can\u0027t make a difference.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-29T00:39:36Z\u0022 title=\u002208/29/2013 12:39  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 29, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-28T23:41:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EYour formulation has some errors:\u003Cp\u003E\u0026lt;snip\u0026gt;\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for finding those problems. I\u0027ll have to make a couple of changes.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-29T02:03:21Z","Content":"\n\u003Cp\u003EIn case anyone\u0027s interested, here\u0027s the Mathematica code I was playing with that shows my dynamic equations and derivation of the switching function and singular-arc throttle. I also was working in polar, but instead of theta as a state I was using horizontal speed.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPressure = AtmSLPressure*Exp[-Altitude[t]/AtmScaleHeight];\u003Cbr\u003E(* no cutoff included yet *)\u003Cbr\u003E\u003Cbr\u003EHSpeedSurf = HSpeedOrb[t] - 2*Pi*(Altitude[t] \u002B RBody)/RotPeriod;\u003Cbr\u003E\u003Cbr\u003ESpeedSurfMagnitude = Sqrt[VSpeed[t]^2 \u002B HSpeedSurf^2];\u003Cbr\u003E\u003Cbr\u003EMassDot = -Sqrt[VThrust[t]^2 \u002B HThrust[t]^2]/\u003Cbr\u003E   (g0*(IspVac \u002B (IspAtm - IspVac)*Pressure));\u003Cbr\u003E(* no Isp saturation for \u0026gt; 1 atm included yet *)\u003Cbr\u003E\u003Cbr\u003EAltitudeDot = VSpeed[t];\u003Cbr\u003E\u003Cbr\u003EVSpeedDot = VThrust[t]/Mass[t] -\u003Cbr\u003E   MuBody/(Altitude[t] \u002B RBody)^2 \u002B \u003Cbr\u003E   HSpeedOrb[t]^2/(Altitude[t] \u002B RBody) -\u003Cbr\u003E   (1/2)*DragCoefficient*Density1atm*Pressure*\u003Cbr\u003E   VSpeed[t]*SpeedSurfMagnitude;\u003Cbr\u003E\u003Cbr\u003EHSpeedOrbDot = HThrust[t]/Mass[t] -\u003Cbr\u003E   VSpeed[t]*HSpeedOrb[t]/(Altitude[t] \u002B RBody) -\u003Cbr\u003E   (1/2)*DragCoefficient*Density1atm*Pressure*\u003Cbr\u003E   HSpeedSurf*SpeedSurfMagnitude;\u003Cbr\u003E\u003Cbr\u003EHamiltonian = CostateMass[t]*MassDot \u002B CostateAltitude[t]*AltitudeDot \u002B\u003Cbr\u003E   CostateVSpeed[t]*VSpeedDot \u002B CostateHSpeedOrb[t]*HSpeedOrbDot;\u003Cbr\u003E\u003Cbr\u003EThrustTerms = CostateMass[t]*MassDot \u002B\u003Cbr\u003E   CostateVSpeed[t]*VThrust[t]/Mass[t] \u002B\u003Cbr\u003E   CostateHSpeedOrb[t]*HThrust[t]/Mass[t];\u003Cbr\u003E(* terms from the Hamiltonian that depend on thrust *)\u003Cbr\u003E\u003Cbr\u003EVThrust[t] = MaxThrust*Throttle*CostateVSpeed[t]/\u003Cbr\u003E    Sqrt[CostateVSpeed[t]^2 \u002B CostateHSpeedOrb[t]^2];\u003Cbr\u003E\u003Cbr\u003EHThrust[t] = MaxThrust*Throttle*CostateHSpeedOrb[t]/\u003Cbr\u003E    Sqrt[CostateVSpeed[t]^2 \u002B CostateHSpeedOrb[t]^2];\u003Cbr\u003E\u003Cbr\u003ESwitchingFunction = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   FullSimplify[ThrustTerms]/(MaxThrust*Throttle)];\u003Cbr\u003E\u003Cbr\u003EMassDotNew = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   Simplify[MassDot]];\u003Cbr\u003E\u003Cbr\u003ECostateMassDot = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   Simplify[D[-Hamiltonian, Mass[t]]]];\u003Cbr\u003E\u003Cbr\u003ECostateAltitudeDot = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   Simplify[D[-Hamiltonian, Altitude[t]]]];\u003Cbr\u003E\u003Cbr\u003ECostateVSpeedDot = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   Simplify[D[-Hamiltonian, VSpeed[t]]]];\u003Cbr\u003E\u003Cbr\u003ECostateHSpeedOrbDot = Assuming[{MaxThrust \u0026gt;= 0, Throttle \u0026gt;= 0},\u003Cbr\u003E   Simplify[D[-Hamiltonian, HSpeedOrb[t]]]];\u003Cbr\u003E\u003Cbr\u003ESwitchingFunctionDot = Simplify[D[SwitchingFunction, t] /.\u003Cbr\u003E    {Mass\u0027[t] -\u0026gt; MassDotNew,\u003Cbr\u003E     Altitude\u0027[t] -\u0026gt; AltitudeDot,\u003Cbr\u003E     VSpeed\u0027[t] -\u0026gt; VSpeedDot,\u003Cbr\u003E     HSpeedOrb\u0027[t] -\u0026gt; HSpeedOrbDot,\u003Cbr\u003E     CostateMass\u0027[t] -\u0026gt; CostateMassDot,\u003Cbr\u003E     CostateAltitude\u0027[t] -\u0026gt; CostateAltitudeDot,\u003Cbr\u003E     CostateVSpeed\u0027[t] -\u0026gt; CostateVSpeedDot,\u003Cbr\u003E     CostateHSpeedOrb\u0027[t] -\u0026gt; CostateHSpeedOrbDot}];\u003Cbr\u003E\u003Cbr\u003ESwitchingFunctionDotDot = D[SwitchingFunctionDot, t] /.\u003Cbr\u003E   {Mass\u0027[t] -\u0026gt; MassDotNew,\u003Cbr\u003E    Altitude\u0027[t] -\u0026gt; AltitudeDot,\u003Cbr\u003E    VSpeed\u0027[t] -\u0026gt; VSpeedDot,\u003Cbr\u003E    HSpeedOrb\u0027[t] -\u0026gt; HSpeedOrbDot,\u003Cbr\u003E    CostateMass\u0027[t] -\u0026gt; CostateMassDot,\u003Cbr\u003E    CostateAltitude\u0027[t] -\u0026gt; CostateAltitudeDot,\u003Cbr\u003E    CostateVSpeed\u0027[t] -\u0026gt; CostateVSpeedDot,\u003Cbr\u003E    CostateHSpeedOrb\u0027[t] -\u0026gt; CostateHSpeedOrbDot};\u003Cbr\u003E\u003Cbr\u003ESingularSolution = Solve[SwitchingFunctionDotDot == 0, Throttle];\u003Cbr\u003E\u003Cbr\u003ELength[SingularSolution]\u003Cbr\u003E(* this should return 1 *)\u003Cbr\u003E\u003Cbr\u003ESingularThrottle = Throttle /. SingularSolution[[1]];\u003Cbr\u003E\u003Cbr\u003EThrottle = Piecewise[{{0, SwitchingFunction \u0026lt; 0},\u003Cbr\u003E    {1, SwitchingFunction \u0026gt; 0},\u003Cbr\u003E    {SingularThrottle, True}}];\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen setting numerical values for all the constant parameters and boundary conditions and attempting to solve the boundary value problem with both state and costate dynamics, which hasn\u0027t worked yet. Tried a simple shooting method but no idea what appropriate values for costates are going to be at time 0.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-29T05:47:38Z","Content":"\n\u003Cp\u003EAlright, so I finally got PSOPT working.\u003C/p\u003E\u003Cp\u003EAs a test, I tried to optimize for the case of the purely vertical ascent of a simple craft:\u003C/p\u003E\u003Cp\u003ECommand Pod Mk1 \u002B FL-T400 Fuel Tank \u002B LV-909 Liquid Fuel Engine\u003C/p\u003E\u003Cp\u003EThe goal was to maximize the penultimate height.\u003C/p\u003E\u003Cp\u003EHere\u0027s some plots from the run:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/OvKkGMO\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/OvKkGMO.png\u0022 alt=\u0022OvKkGMO.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/wkrokSQ\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/wkrokSQ.png\u0022 alt=\u0022wkrokSQ.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/G0clolS\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/G0clolS.png\u0022 alt=\u0022G0clolS.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EHere\u0027s the output from PSOPT:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPSOPT results summary\u003Cbr\u003E=====================\u003Cbr\u003E\u003Cbr\u003EProblem: \t\t\t\t\tKSP Maximum Ascent\u003Cbr\u003ECPU time (seconds):\t\t\t\t4.790000e\u002B00\u003Cbr\u003ENLP solver used: \t\t\t\tIPOPT\u003Cbr\u003EOptimal (unscaled) cost function value: \t-8.153408e\u002B04\u003Cbr\u003EPhase 1 endpoint cost function value:\t\t-8.153408e\u002B04\u003Cbr\u003EPhase 1 integrated part of the cost: \t\t0.000000e\u002B00\u003Cbr\u003EPhase 1 initial time:\t\t\t\t0.000000e\u002B00\u003Cbr\u003EPhase 1 final time:\t\t\t\t2.525323e\u002B02\u003Cbr\u003EPhase 1 maximum relative local error:\t\t2.604555e-03\u003Cbr\u003ENLP solver reports: \t\t\t\tThe problem solved!\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt looks like the craft couldn\u0027t quite manage terminal velocity, but its velocity follows the curve quite closely in the densest part of the atmosphere.\u003C/p\u003E\u003Cp\u003EI\u0027ll try to replicate these results in-game to see how accurate they are.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-29T06:30:47Z","Content":"\n\u003Cp\u003ENice, looks pretty good. About 135 seconds of burn time is what you\u0027d expect for 2 tons of fuel at an average Isp around halfway between atmospheric and vacuum values for the LV-909. Final altitude may be a bit off what you\u0027d get from an in-game test if you didn\u0027t include the surface rotation in the simplified problem. A higher-TWR test will also be interesting to look at, naturally.\u003C/p\u003E\u003Cp\u003EWhat part of installing PSOPT gave you the most trouble, was it the Fortran-related stuff? Remember before you get too far that if you downloaded any of the HSL linear solvers for Ipopt, you can\u0027t redistribute binaries. I should\u0027ve offered some help there, a lot of the libraries are actually easier to build if you use MinGW, you can use the full GCC compilers including for Fortran and run configure scripts almost the same way as if you\u0027re using Linux.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-29T06:33:21Z\u0022 title=\u002208/29/2013 06:33  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 29, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-29T06:52:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EFinal altitude may be a bit off what you\u0027d get from an in-game test if you didn\u0027t include the surface rotation in the simplified problem.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s a good point. My model for this problem neglected rotation, so there will be a bit of a discrepancy due to that.\u003C/p\u003E\u003Cp\u003EA quick test in-game gave a final altitude of about 85Km, so there\u0027s some other source of error at work here as well.\u003C/p\u003E\u003Cp\u003E(I\u0027d expect that neglecting rotation would make my result too high rather than too low.)\u003C/p\u003E\u003Cp\u003EEdit: This might be in part due to the noise in the control function.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EWhat part of installing PSOPT gave you the most trouble?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe biggest problem I had initially was that I was trying to build PSOPT and its dependencies using visual studio. It got messy pretty fast.\u003C/p\u003E\u003Cp\u003EI ended up just installing it on my Linux VM, though the installation was still a bit tricky. Had to add some includes to a few of the source files to get it to build, along with editing some Makefiles.\u003C/p\u003E\u003Cp\u003EAlso had to make some small changes to the gnuplot interface code in PSOPT, since my system\u0027s version of gnuplot used a slightly different syntax than the one expected by PSOPT.\u003C/p\u003E\u003Cp\u003EEverything else went relatively smoothly. PSOPT\u0027s build system is just a bit brittle.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-29T07:01:31Z\u0022 title=\u002208/29/2013 07:01  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 29, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-29T07:09:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003EThat\u0027s a good point. My model for this problem neglected rotation, so there will be a bit of a discrepancy due to that.\u003Cp\u003EA quick test in-game gave a final altitude of about 85Km, so there\u0027s some other source of error at work here as well.\u003C/p\u003E\u003Cp\u003E(I\u0027d expect that neglecting rotation would make my result too high rather than too low.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhy are you thinking this direction? The centrifugal acceleration from Kerbin\u0027s surface rotation slightly reduces the effective gravity, so in-game with rotation effective gravity is slightly lower than 9.81 m/s^2, whereas in your simulation it\u0027s exactly 9.81 m/s^2 (at the surface, mu/r^2 elsewhere). You also start from a bit higher altitude than sea level on the launch pad, though from the resolution of your plot you may have already included that.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThe biggest problem I had initially was that I was trying to build PSOPT and its dependencies using visual studio. It got messy pretty fast.\u003C/p\u003E\u003Cp\u003EI ended up just installing it on my Linux VM, though the installation was still a bit tricky. Had to add some includes to a few of the source files to get it to build, along with editing some Makefiles.\u003C/p\u003E\u003Cp\u003EAlso had to make some small changes to the gnuplot interface code in PSOPT, since my system\u0027s version of gnuplot used a slightly different syntax than the one expected by PSOPT.\u003C/p\u003E\u003Cp\u003EEverything else went relatively smoothly. PSOPT\u0027s build system is just a bit brittle.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, interesting. Doesn\u0027t look like PSOPT has been updated for some time. I\u0027m more familiar with the dependency libraries than PSOPT itself. Build systems are tricky and often require active maintenance by someone who knows what they\u0027re doing, unfortunately.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-08-29T07:17:07Z","Content":"\n\u003Cp\u003EKeep in mind that the error isn\u0027t necessarily on your end. KSP might be sloppy about integrating the forces. A naive Euler integration of drag while rocket is accelerating would result in underestimating drag, and that might be responsible for KSP rocket going a few km higher.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-29T07:20:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe centrifugal acceleration from Kerbin\u0027s surface rotation slightly reduces the effective gravity, so in-game with rotation effective gravity is slightly lower than 9.81 m/s^2, whereas in your simulation it\u0027s exactly 9.81 m/s^2 (at the surface, mu/r^2 elsewhere).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGood point! I often make stupid mistakes when working with polar coordinates (like the problem of adding r_dot and theta_dot in the earlier problem formulation). In this instance I\u0027m quite happy, though, since it might mean the results are less far off than I had thought. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-29T07:22:40Z","Content":"\n\u003Cp\u003EAnd did you include the hard atmosphere cutoff at scaleheight*ln(10^6)? Probably best to do this as a problem phase, with an unknown time at the cutoff altitude. Drag up there should be almost negligible, but might integrate out to a couple m/s total?\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-29T07:31:18Z","Content":"\n\u003Cp\u003EI neglected the hard cutoff in this first run. I wouldn\u0027t imagine it would have any measurable effect (other than perhaps making the optimization problem a bit more difficult to solve). Drag acceleration at the cutoff point should be on the order of 10^-3 m/s^2 from a quick calculation.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EA naive Euler integration of drag while rocket is accelerating would result in underestimating drag, and that might be responsible for KSP rocket going a few km higher.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI wonder how significant this effect actually is.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EProbably best to do this as a problem phase, with an unknown time at the cutoff altitude.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECorrect me if I\u0027m wrong, but couldn\u0027t you just zero out the drag term in the differential constraints if r\u0026gt;r_cutoff?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-29T07:53:03Z\u0022 title=\u002208/29/2013 07:53  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 29, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-29T08:21:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ECorrect me if I\u0027m wrong, but couldn\u0027t you just zero out the drag term in the differential constraints if r\u0026gt;r_cutoff?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou could, but this would technically be a discontinuity (though a small one) and might lead to slight numerical troubles. I wonder how/if the auto-differentiation code handles conditional statements, as well. Try both and see if there\u0027s any noticeable difference?\u003C/p\u003E\u003Cp\u003ERegarding the type of integration in Unity, check this out (scroll down a bit):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://answers.unity3d.com/questions/48179/rigidbody-acceleration.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://answers.unity3d.com/questions/48179/rigidbody-acceleration.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIf the way Unity works is you calculate forces at each time step then have Unity update to the next step, then I imagine it must be doing Euler on the velocity, or maybe Stormer-Verlet on the position with a first order velocity estimate (either forward or backward difference)? It could hypothetically be using some kind of multistep method, but those are quite a bit more complicated when timestep isn\u0027t constant.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-08-29T09:35:43Z","Content":"\n\u003Cp\u003EIt\u0027s almost certainly Verlet. That\u0027s practically a standard in gaming industry. Mostly because Verlet is conservative (at least on average) under harmonic potential, meaning you don\u0027t run into problems with collisions.\u003C/p\u003E\n"},{"CreatedByName":"ThreeKelvin","CreatedById":71863,"CreatedDateTime":"2013-08-29T19:50:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI disagree with this one, rdot is a state so last-step thrusting can\u0027t make a difference.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, yes, \\dot{r} is a state, but the problem formulation is continuous, not discrete. There is no last step.\u003C/p\u003E\u003Cp\u003EEven if the problem formulation was discrete, e.g. x[n\u002B1] = f(x[n], u[n]), you\u0027d need to ensure that there\u0027d be no last step thrusting, i.e., T[N_f - 1] = 0.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-29T23:32:46Z","Content":"\n\u003Cp\u003EAlright, another quick update:\u003C/p\u003E\u003Cp\u003EI ran the vertical ascent solver on the same craft, but doubled the TWR.\u003C/p\u003E\u003Cp\u003EThe results are in agreement with the analytical solution of terminal velocity ascent.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/O6EpgxX\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/O6EpgxX.png\u0022 alt=\u0022O6EpgxX.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/JEPnUux\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/JEPnUux.png\u0022 alt=\u0022JEPnUux.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/ja0Ao7y\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.imgur.com/ja0Ao7y.png\u0022 alt=\u0022ja0Ao7y.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis is quite reassuring. I\u0027ll try to solve the full ascent into orbit problem next.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-30T03:43:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022ThreeKelvin\u0022 data-cite=\u0022ThreeKelvin\u0022\u003E\u003Cdiv\u003EWell, yes, \\dot{r} is a state, but the problem formulation is continuous, not discrete. There is no last step.\u003Cp\u003EEven if the problem formulation was discrete, e.g. x[n\u002B1] = f(x[n], u[n]), you\u0027d need to ensure that there\u0027d be no last step thrusting, i.e., T[N_f - 1] = 0.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhy? Your first post seemed to imply that some instantaneous thrust at the final time could satisfy the zero-vertical-speed terminal constraint in an unphysical way? That\u0027s not possible, since thrust enters into acceleration, it needs to be integrated over a finite time to have any effect on the vertical speed. For insertion into orbit, you actually usually do want to be thrusting at the end of the time horizon, in order to circularize.\u003C/p\u003E\n"},{"CreatedByName":"SaturnV","CreatedById":79006,"CreatedDateTime":"2013-08-31T06:23:15Z","Content":"\n\u003Cp\u003EHey guys, good discussion here\u003C/p\u003E\u003Cp\u003EK^2 \u0027s derivation is still too complicated for me, so I did some numeric simulation, the result shows that stick to terminal velocity is practically optimal\u003C/p\u003E\u003Cp\u003ESince I only care the ascend, profiles are compared with delta V used by resistance when they hit the same altitude, the less unnecessary consumption by resistance, the better a profile is.\u003C/p\u003E\u003Cp\u003EThis way we can avoid simulating the whole journey since we can tell which is better earlier.\u003C/p\u003E\u003Cp\u003ESimulation parameters\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E0.001 // step 1ms\u003Cbr\u003E999  // record every 1 second(1000ms)\u003Cbr\u003E0  // stop after fuel runs out\u003Cbr\u003E0 // start altitude 0m\u003Cbr\u003E10000  // stop if hit altitude 10km\u003Cbr\u003E5.29158E22 // kerbin mass, kg\u003Cbr\u003E600000 // kerbin radius, m\u003Cbr\u003E5000 // kerbin scale height, m\u003Cbr\u003E1.223 // kerbin sea level atmosphere density, kg/m^3\u003Cbr\u003E0.2 // rocket drag coefficient. cross-section area is not included now, because currently the area is calculated by 0.008*mass\u003Cbr\u003E15E3 // start mass, kg (mainsail 6t \u002B X200-16 9t)\u003Cbr\u003E7E3 // dry mass, kg\u003Cbr\u003E544 // fuel flow rate, kg/s (sea level, consider it\u0027s constant while it\u0027s not, but I only concern the low altitude optimization, so let\u0027s make it simple)\u003Cbr\u003E1500E3 // thrust, N\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFlight report:\u003C/p\u003E\u003Cp\u003EAscend 0, thrust is always maximized\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ETime: 14.7060 s\u003Cbr\u003EMax. Height: 5434.0120 m   // max height this rocket hit\u003Cbr\u003EMax. Velocity: 661.8994 m/s\u003Cbr\u003EMax. Thrust Acceleration: 214.2710 m/s^2\u003Cbr\u003EMax. Drag Acceleration: 144.5729 m/s^2\u003Cbr\u003EMax. Net Acceleration: 90.6002 m/s^2\u003Cbr\u003EStart \u00C3\u017D\u00E2\u20ACv:2101.4891m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv Left(5434 m): 0.0000m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv used by resi.(5434 m): 1439.5897m/s  // delta v used by gravity and air drag\u003Cbr\u003EFuel Left:0.0000kg(0.000%)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.minus.com/i7EGZuaIsoR95.png\u0022 alt=\u0022i7EGZuaIsoR95.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EAscend 1, thrust controlled to make velocity close to terminal velocity by a simple degeneration controller (proportional factor only)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ETime: 63.9200 s\u003Cbr\u003EMax. Height: 10000.0295 m\u003Cbr\u003EMax. Velocity: 267.8369 m/s\u003Cbr\u003EMax. Thrust Acceleration: 103.7592 m/s^2\u003Cbr\u003EMax. Drag Acceleration: 15.3129 m/s^2\u003Cbr\u003EMax. Net Acceleration: 90.6002 m/s^2\u003Cbr\u003EStart \u00C3\u017D\u00E2\u20ACv:2101.4891m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv Left(10000 m): 599.5070m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv used by resi.(10000 m): 1234.1452m/s\u003Cbr\u003EFuel Left:1700.0723kg(21.251%)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.minus.com/ifNv66BhHDKuX.png\u0022 alt=\u0022ifNv66BhHDKuX.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EAscend 2, thrust controlled to make velocity close to terminal velocity by a advanced prediction module controller\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ETime: 64.1270 s\u003Cbr\u003EMax. Height: 10000.1547 m\u003Cbr\u003EMax. Velocity: 267.7240 m/s\u003Cbr\u003EMax. Thrust Acceleration: 103.7592 m/s^2\u003Cbr\u003EMax. Drag Acceleration: 9.8077 m/s^2\u003Cbr\u003EMax. Net Acceleration: 90.6002 m/s^2\u003Cbr\u003EStart \u00C3\u017D\u00E2\u20ACv:2101.4891m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv Left(10000 m): 600.1021m/s\u003Cbr\u003E\u00C3\u017D\u00E2\u20ACv used by resi.(10000 m): 1233.6630m/s\u003Cbr\u003EFuel Left:1701.9503kg(21.274%)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.minus.com/i9nAm6levrqK7.png\u0022 alt=\u0022i9nAm6levrqK7.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EUnnecessary delta V consumption:\u003C/p\u003E\u003Cp\u003EAscend 0: 1439.5897m/s\u003C/p\u003E\u003Cp\u003EAscend 1: 1234.1452m/s\u003C/p\u003E\u003Cp\u003EAscend 2: 1233.6630m/s\u003C/p\u003E\u003Cp\u003EYou must noticed that if you simply max your thrust all the way, you even can not make it to 10km, however small fluctuation won\u0027t make a difference, if you get to terminal speed close enough high performance is achieved.\u003C/p\u003E\u003Cp\u003EHere I only shows you 3 picture, but I also tried the profile of close-to-terminal-velocity-minus-10, close-to-terminal-velocity-plus-10, high-twr-ascend, low-twr-ascend and so on, result is, as expected, the terminal velocity ascend is always the best.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-31T06:33:08Z\u0022 title=\u002208/31/2013 06:33  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 31, 2013\u003C/time\u003E by SaturnV\u003C/strong\u003E\n\u003C/span\u003E\n"}]}