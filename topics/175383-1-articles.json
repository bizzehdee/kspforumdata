{"TopicId":175383,"ForumId":34,"TopicTitle":"KUnit - Unit Testing framework for kerboscript (KSP KOS)","CreatedByName":"whirlwind","CreatedById":109022,"CreatedDateTime":"2018-05-27T21:22:15Z","PageNum":1,"Articles":[{"CreatedByName":"whirlwind","CreatedById":109022,"CreatedDateTime":"2018-05-27T21:22:15Z","Content":"\n\u003Cp\u003E\nWhat if something is wrong? It\u0027s time to start testing the whole Kerbol system!\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/robot-aquila/kunit\u0022 rel=\u0022external nofollow\u0022\u003EKUnit - Unit Testing framework for kerboscript\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nKUnit provides possibility to write repeatable tests for kerboscript - \u003Ca href=\u0022https://github.com/KSP-KOS/KOS\u0022 rel=\u0022external nofollow\u0022\u003EKOS programming language\u003C/a\u003E. KUnit is an instance of the xUnit architecture for unit testing frameworks.\n\u003C/p\u003E\n\u003Cp\u003E\nKUnit shouldn\u0027t force to write any tests but should help write any test you want for any code you want in case when you feel that it should be tested. There is a way how to implement, organize and run your tests. And this is KUnit. If you found this tool nice and helpful this means KUnit works well.\n\u003C/p\u003E\n\u003Cp\u003E\nKUnit also demonstrates how to use object-oriented approach in KOS programs to achieve well-looking design, maximum code reusability and exceptional software quality.\n\u003C/p\u003E\n\u003Cp\u003E\nJoin us and together we can make Kerbol more robust!\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222018-05-27T21:24:40Z\u0022 title=\u002205/27/2018 09:24  PM\u0022 data-short=\u00226 yr\u0022\u003EMay 27, 2018\u003C/time\u003E by whirlwind\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2018-05-28T01:06:32Z","Content":"\n\u003Cp\u003E\nThis is a great idea, but I want to pro-actively nip something in the bud before it gets too much of a following among kOS users in this thread - don\u0027t rely on the \u0027#\u0027 operator here.\u00A0 If you want to use this, this is the only officially supported syntax:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nlexiconobj[\u0022key\u0022]\n\u003C/pre\u003E\n\u003Cp\u003E\nand this syntax is not officially supported:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nlexiconobj#key\u003C/pre\u003E\n\u003Cp\u003E\nThey do the same exact thing (literally, they compile to the same kRISC opcodes), but the second one uses deprecated syntax that has been *documented as such* for quite some time now.\u00A0 It is dependant on an accidental hack-y side effect that the kOS devs didn\u0027t know about.\u00A0 This syntax was originally made for numerical (thus the \u0022#\u0022) list indeces but uselessly required hardcoded literal values in the source code.\u00A0 The hack-y side effect is that it also accidentally works on bare-word hardcoded literal keys for lexicons so when \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/109022-whirlwind/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022109022\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/109022-whirlwind/\u0022 rel=\u0022\u0022\u003E@whirlwind\u003C/a\u003E is trying to layer OOP concepts on top of the Lexicon type, \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/109022-whirlwind/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022109022\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/109022-whirlwind/\u0022 rel=\u0022\u0022\u003E@whirlwind\u003C/a\u003E used the \u0022#\u0022 as if it was the member separator.\n\u003C/p\u003E\n\u003Cp\u003E\nThe first syntax is a bit more typing, but it\u0027s also correct, whereas the second is depending on a side effect in the implementation of the compiler that was unintended, and not even documented.\u00A0 (The fact that you can use \u0060#\u0060 for numerical literals for array indeces was documented (but documented as deprecated as we inherited that from the old original stuff and only kept it for grandfathering), but the fact that it accidentally worked on Lexicons was not even known to the devs themselves and wasn\u0027t even documented.)\n\u003C/p\u003E\n\u003Cp\u003E\nKUnit is a great wonderful idea - but please please please stick to the officially supported syntax when using it and don\u0027t force me to have to keep supporting an old broken misfeature.\n\u003C/p\u003E\n"}]}