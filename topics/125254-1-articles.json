{"TopicId":125254,"ForumId":44,"TopicTitle":"2D Orbits making flower petal shapes","CreatedByName":"Wheffle","CreatedById":74893,"CreatedDateTime":"2015-11-13T00:56:09Z","PageNum":1,"Articles":[{"CreatedByName":"Wheffle","CreatedById":74893,"CreatedDateTime":"2015-11-13T00:56:09Z","Content":"\n\u003Cp\u003ESo I decided on a whim to see if I could program a simple 2D model of a satellite orbiting a large body. It\u0027s very simple code that calculates the force of gravity every step on the ship and applies the force to its current velocity vector. I altered the gravity constant so that calculations wouldn\u0027t involve giant numbers and I\u0027m also ignoring the mass of the satellite, I figured \u0022G*m1*m2\u0022 is a constant anyway. For a relatively circular orbit, it came out looking nice:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/195903132/forum%20pictures/orbit_1.png\u0022 alt=\u0022orbit_1.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThere are clearly some irregularities in the orbit. So I pushed the \u0022ship\u0022 into an elliptical orbit, and I got this pattern:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://dl.dropboxusercontent.com/u/195903132/forum%20pictures/orbit_2.png\u0022 alt=\u0022orbit_2.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo what\u0027s causing the orbit to \u0022flower petal\u0022 like that? Does that happen in nature? Is it a result of modeling orbits on a two dimensions vs three? Are the shortcuts from my calculations causing problems? I suppose the body itself should technically be wobbling a bit. How does KSP get around this kind of issue?\u003C/p\u003E\n"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-11-13T01:13:58Z","Content":"\n\u003Cp\u003EI think you don\u0027t have all of the Keplerian elements properly defined.\u003C/p\u003E\n"},{"CreatedByName":"pincushionman","CreatedById":98495,"CreatedDateTime":"2015-11-13T01:22:43Z","Content":"\n\u003Cp\u003EWhat exactly are you adding to the velocity vector? What equations are you integrating, and what kind of integrator did you write?\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2015-11-13T01:39:43Z","Content":"\n\u003Cp\u003EIt looks like it is \u003Ca href=\u0022https://en.wikipedia.org/wiki/Precession\u0022 rel=\u0022external nofollow\u0022\u003Eprecessing\u003C/a\u003E, which happens in real life too. Check out the precession of Mercury:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://physics.ucr.edu/~wudka/Physics7/Notes_www/img249.gif\u0022 alt=\u0022img249.gif\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Bill Phil","CreatedById":127797,"CreatedDateTime":"2015-11-13T02:14:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EIt looks like it is \u003Ca href=\u0022https://en.wikipedia.org/wiki/Precession\u0022 rel=\u0022external nofollow\u0022\u003Eprecessing\u003C/a\u003E, which happens in real life too. Check out the precession of Mercury:\u003Cp\u003E\u003Ca href=\u0022http://physics.ucr.edu/~wudka/Physics7/Notes_www/img249.gif\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://physics.ucr.edu/~wudka/Physics7/Notes_www/img249.gif\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s what I thought, too.\u003C/p\u003E\u003Cp\u003EI think that the reference frame isn\u0027t accounting for the precession.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-11-13T02:49:19Z","Content":"\n\u003Cp\u003EIt\u0027d be nice to see your code to actually compute the forces and update the position of the satellite. I have a few guesses on what might be causing this, but I can\u0027t be sure on which one it is without seeing the code.\u003C/p\u003E\n"},{"CreatedByName":"Findthepin1","CreatedById":139989,"CreatedDateTime":"2015-11-13T02:57:48Z","Content":"\n\u003Cp\u003EIs it simulating the satellite\u0027s effect on the planet?\u003C/p\u003E\n"},{"CreatedByName":"YNM","CreatedById":98447,"CreatedDateTime":"2015-11-13T03:00:04Z","Content":"\n\u003Cp\u003EProbably something wrong in the acceleration calculation ? I don\u0027t know for sure, but it could also be due to computing steps... KSP slightly suffers from that you know.\u003C/p\u003E\n"},{"CreatedByName":"Robotengineer","CreatedById":104525,"CreatedDateTime":"2015-11-13T03:33:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EIt looks like it is \u003Ca href=\u0022https://en.wikipedia.org/wiki/Precession\u0022 rel=\u0022external nofollow\u0022\u003Eprecessing\u003C/a\u003E, which happens in real life too. Check out the precession of Mercury:\u003Cp\u003E\u003Ca href=\u0022http://physics.ucr.edu/~wudka/Physics7/Notes_www/img249.gif\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://physics.ucr.edu/~wudka/Physics7/Notes_www/img249.gif\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIIRC, precession wasn\u0027t something that can be produced in newtonian physics, the precession of Mercury is one of the reasons Relativity was needed.\u003C/p\u003E\n"},{"CreatedByName":"Alias72","CreatedById":111778,"CreatedDateTime":"2015-11-13T03:43:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wheffle\u0022 data-cite=\u0022Wheffle\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESo what\u0027s causing the orbit to \u0022flower petal\u0022 like that? Does that happen in nature? Is it a result of modeling orbits on a two dimensions vs three? Are the shortcuts from my calculations causing problems? I suppose the body itself should technically be wobbling a bit. How does KSP get around this kind of issue?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E1. Can\u0027t tell without code\u003C/p\u003E\u003Cp\u003E2. Orbits process in nature but Newtonian physics wont simulate that\u003C/p\u003E\u003Cp\u003E3. 2 vs 3 dimension does not matter as all orbits occur on an orbital plane (2d surface)\u003C/p\u003E\u003Cp\u003E4. maybe. Must see code\u003C/p\u003E\u003Cp\u003E5. yes there should be planetary wobble but for immensely disproportionate masses it should be negligible.\u003C/p\u003E\u003Cp\u003E6. KSP uses conic sections during timewarp (the orbit is \u0022locked\u0022 in advance) also It probably is more careful with its numbers.\u003C/p\u003E\u003Cp\u003Ewithout seeing the code the only thing I can suggest is to look for errors in numerical simulation. orbital mechanics is prone to cascading error.\u003C/p\u003E\n"},{"CreatedByName":"problemecium","CreatedById":101649,"CreatedDateTime":"2015-11-13T04:09:26Z","Content":"\n\u003Cp\u003EMake sure you\u0027re dividing by r\u003Csup\u003E2\u003C/sup\u003E rather than r, and that your timestep isn\u0027t too big.. Otherwise, I\u0027m just going to go with the precession hypothesis.\u003C/p\u003E\n"},{"CreatedByName":"Jovus","CreatedById":117163,"CreatedDateTime":"2015-11-13T04:20:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Robotengineer\u0022 data-cite=\u0022Robotengineer\u0022\u003E\u003Cdiv\u003EIIRC, precession wasn\u0027t something that can be produced in newtonian physics, the precession of Mercury is one of the reasons Relativity was needed.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou do not recall correctly. Precession is a perfectly Newtonian phenomenon, and frankly usually to be expected in all but the simplest situations. (Two bodies attracted to one another by an inverse square law is one of those simplest situations.)\u003C/p\u003E\u003Cp\u003EAs to whether or not the OP\u0027s \u0027problem\u0027 is merely that the code correctly predicts a precession he didn\u0027t expect, or if the program\u0027s calculations are incorrect...well, I can\u0027t answer that without seeing the code.\u003C/p\u003E\n"},{"CreatedByName":"Wheffle","CreatedById":74893,"CreatedDateTime":"2015-11-13T04:31:07Z","Content":"\n\u003Cp\u003ESo it was quite silly not to put any kind of code up. I apologize for that. I\u0027m actually using Game Maker: Studio, but here\u0027s the pseudo-code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//script for getting force magnitude of gravity for a ship/planet pair\u003Cbr\u003Epublic double get_gravity_force(planet, ship)\u003Cbr\u003E{\u003Cbr\u003E    var G = 0.001; //constant I chose\u003Cbr\u003E\u003Cbr\u003E    var x1 = planet.x;\u003Cbr\u003E    var y1 = planet.y;\u003Cbr\u003E    var x2 = ship.x;\u003Cbr\u003E    var y2 = ship.y;\u003Cbr\u003E\u003Cbr\u003E    var r2 = (point_distance(x1, y1, x2, y2))^2;\u003Cbr\u003E\u003Cbr\u003E    if (r2 == 0) return 0;\u003Cbr\u003E\u003Cbr\u003E    //ignoring ship mass (G*m1*m2), this might be causing issues\u003Cbr\u003E    return (G*planet.mass/r2);\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//script that runs every step for the ship\u003Cbr\u003E//ship has local variables \u0022x\u0022, \u0022y\u0022, \u0022v\u0022 and \u0022direction\u0022\u003Cbr\u003E{\u003Cbr\u003E   //get gravity force magnitude and direction\u003Cbr\u003E   var fg = get_gravity_force(planet, this);\u003Cbr\u003E   var fg_dir = point_direction(x, y, planet.x, planet.y);\u003Cbr\u003E\u003Cbr\u003E   //find x offset caused by current velocity and gravity\u003Cbr\u003E   var xx = v*(cos(direction)) \u002B fg*cos(fg_dir));\u003Cbr\u003E   var yy = v*(sin(direction)) \u002B fg*sin(fg_dir));\u003Cbr\u003E\u003Cbr\u003E   //change direction and velocity for next step\u003Cbr\u003E   direction = point_direction(x, y, x\u002Bxx, y\u002Byy);\u003Cbr\u003E   v = point_distance(x, y, x\u002Bxx, y\u002Byy);\u003Cbr\u003E\u003Cbr\u003E   //update position\u003Cbr\u003E   x = x \u002B xx;\u003Cbr\u003E   y = y \u002B yy;\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u0022point_direction\u0022 and \u0022point_distance\u0022 are provided scripts from the IDE, and the IDE actually provides scripts not used in this pseudo-code for the trigonometry, which I\u0027m using.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-11-13T05:57:03Z","Content":"\n\u003Cp\u003EThis is terribly inefficient, because point_direction computes atan2, and then you run and compute sin and cos from that. You should work out how to avoid this. Hint: What are the definitions of sin and cos and can you compute them from your data?\u003C/p\u003E\u003Cp\u003EOtherwise, everything looks good. Precession you are seeing is almost certainly the result of time increment being too large and your use of \u003Ca href=\u0022https://en.wikipedia.org/wiki/Euler_method\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EEuler Method\u003C/span\u003E\u003C/a\u003E for integration. Try reducing time step by re-writing your position update as xx = vx*dt \u002B 0.5*ax*dt*dt. Then try different values for dt starting with 1 and going down. By the way, your missing factor of 0.5 is also wrong, but it just works as arbitrary increase of planet\u0027s gravity, which won\u0027t affect the types of orbit you get.\u003C/p\u003E\u003Cp\u003ETo get even better results, you can try using better integration method. Nothing works \u003Cem\u003Egreat\u003C/em\u003E for gravity, but almost anything will be better than Euler Method. Velocity Verlet is always my first recommendation, because it\u0027s really easy to implement and it gives great improvement.\u003C/p\u003E\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-13T06:31:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wheffle\u0022 data-cite=\u0022Wheffle\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E    var r2 = (point_distance(x1, y1, x2, y2))^2;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn GML, ^ is the bitwise xor operator, not exponentiation. This essentially results in your force being inversely proportional to the distance (for distances significantly larger than 2), which results in the characteristic petal pattern of your orbits. I used Game Maker in the early 2000s and people were making this mistake back then, too. You could use the \u003Ca href=\u0022http://docs.yoyogames.com/source/dadiospice/002_reference/maths/real%20valued%20functions/power.html\u0022 rel=\u0022external nofollow\u0022\u003Epower\u003C/a\u003E method instead or just compute the distance first and then multiply it by itself. You could also manually compute distance by just summing squares because it avoids an intermediate square root, but worrying about optimization before the code works is pretty useless.\u003C/p\u003E\u003Cp\u003EMake it work, make it right, make it fast, in that order.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-11-13T10:04:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Yourself\u0022 data-cite=\u0022Yourself\u0022\u003E\u003Cdiv\u003EIn GML, ^ is the bitwise xor operator, not exponentiation.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd it doesn\u0027t throw an exception on being used with a real variable, rather than integer? That\u0027s just silly. Good catch, though.\u003C/p\u003E\n"},{"CreatedByName":"Wheffle","CreatedById":74893,"CreatedDateTime":"2015-11-13T18:09:42Z","Content":"\n\u003Cp\u003EGood eye with the bitwise operator issue. I\u0027ve been using GML for a while, super brain fart there. Thanks for all the helpful replies!\u003C/p\u003E\u003Cp\u003EEdit:\u003C/p\u003E\u003Cp\u003ESo yeah, with that bitwise operator mishap, looks like gravity was linear based on radius. After fixing that and tweaking my gravity constant, everything seems to be modeling correctly! The problem at its heart seemed to be the lack of inverse square law being applied.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-13T18:32:27Z\u0022 title=\u002211/13/2015 06:32  PM\u0022 data-short=\u00228 yr\u0022\u003ENovember 13, 2015\u003C/time\u003E by Wheffle\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"problemecium","CreatedById":101649,"CreatedDateTime":"2015-11-13T18:47:56Z","Content":"\n\u003Cp\u003EHAH! CALLED IT!\u003C/p\u003E\u003Cp\u003EIn other news, I\u0027m glad you got this working ^^\u003C/p\u003E\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-14T05:24:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EAnd it doesn\u0027t throw an exception on being used with a real variable, rather than integer? That\u0027s just silly. Good catch, though.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh, that\u0027s not the end of the silliness with that language. In this case it does that because GML only has one numeric type and that\u0027s a real (specifically a double). As I recall there are only two types in the whole language: real and string. In fact, the data structures within the language aren\u0027t really data types, you\u0027re provided with a numeric ID (which is how all resources work in Game Maker) which is passed as an argument to various functions that manipulate the data structure. The IDs aren\u0027t unique and they\u0027re created sequentially, so the first instance of any resource you create has ID 1 (or 0, I can\u0027t remember). People can (and have) gotten into all sorts of trouble because of this.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wheffle\u0022 data-cite=\u0022Wheffle\u0022\u003E\u003Cdiv\u003EGood eye with the bitwise operator issue. I\u0027ve been using GML for a while, super brain fart there. Thanks for all the helpful replies!\u003Cp\u003EEdit:\u003C/p\u003E\u003Cp\u003ESo yeah, with that bitwise operator mishap, looks like gravity was linear based on radius. After fixing that and tweaking my gravity constant, everything seems to be modeling correctly! The problem at its heart seemed to be the lack of inverse square law being applied.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027re not the first person I\u0027ve helped with this problem. The first time I saw this exact issue was probably 14 years ago.\u003C/p\u003E\n"},{"CreatedByName":"cantab","CreatedById":104935,"CreatedDateTime":"2015-11-14T12:04:14Z","Content":"\n\u003Cp\u003EI did think it looked like a non-inverse-square pattern, having seen them in a flash gravity sim I played around it. But that oddity of syntax is devious.\u003C/p\u003E\n"},{"CreatedByName":"Yourself","CreatedById":4465,"CreatedDateTime":"2015-11-14T15:51:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cantab\u0022 data-cite=\u0022cantab\u0022\u003E\u003Cdiv\u003EI did think it looked like a non-inverse-square pattern, having seen them in a flash gravity sim I played around it. But that oddity of syntax is devious.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, it\u0027s not the most devious. Syntactically GML is based largely on the C family of languages* (since we\u0027re talking syntax this means C, C\u002B\u002B, Java, C#, etc.) and the ^ operator is bitwise XOR in all of those. In fact, very few (popular) languages use ^ as an exponentiation operator. More often than not it\u0027s bitwise XOR. I\u0027m not entirely sure where the popularity of using ^ for exponentiation derives from exactly. I\u0027d wager it comes from LaTeX since it uses the ^ operator is used to typeset superscripts. However, I don\u0027t know enough of its history to say whether that was inspired by something else.\u003C/p\u003E\u003Cp\u003E*GML also supports an alternative syntax based on Delphi. This leads to some serious craziness since it understands Delphi operators for assignment (:=) and equality (=) as well as the C-style operators for assignment (=) and equality (==). These two syntax styles can be mixed interchangeably and often leads people to suggest that using = in an if statement would result in a bug:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eif( a = b )\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESince in most C-like languages, = is assignment. The thing about GML is that the meaning of = is context dependent. In that case, since it\u0027s parsing an expression, it interprets = is the Delphi-like equality operator and ends up working like its supposed to. But this can lead to other craziness:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Ea = b = 1\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn C-like languages this would be multiple assignment; it would assign the value 1 to the variable b and then assign the new value of variable b (which is 1) to a. In GML that\u0027s not what this does. Unlike C an assignment in GML is a statement, not an expression (much like it is in Python), so assignments can only appear as a statement. The grammatical structure of an assignment is a variable name followed by an assignment operator (which can be either := or =) followed by any expression. Since the = operator acts as equality inside expressions, this code actually compares the value of b with 1 and stores the result into a.\u003C/p\u003E\n"},{"CreatedByName":"Wheffle","CreatedById":74893,"CreatedDateTime":"2015-11-14T21:02:30Z","Content":"\n\u003Cp\u003EIt\u0027s one of those quirks that I\u0027ve known about for years but continue to brain fart on. I might blame it on having to use scripting languages like Matlab for classes a lot right now, or it just might be my brain being stubborn.\u003C/p\u003E\u003Cp\u003EI have a love-hate relationship with GML. My first programming was done with GML when I was young, rather sneakily teaching me some basics without me really knowing it. There\u0027s value in that. It does drive me nuts very often though. They have improved over the years though, as they now treat arrays more intelligently, and they actually have an \u0027undefined\u0027 data type, pointers (used with a very small set of functions related to graphics) and enums. Up an onwards! lol.\u003C/p\u003E\u003Cp\u003EAnyway, I actually got a small 2D gravity simulation working that computes the orbit all at once KSP-style and allows you to perform prograde and retrograde velocity changes. I\u0027m using very hacky methods for producing the orbital path, so it breaks in extreme orbits (steep falls and such), but it\u0027s a start! I was surprised actually how involved the math is for orbital mechanics, which made me take some shortcuts (I guess, rocket science isn\u0027t easy?). I might go back and do it properly if I feel up to it.\u003C/p\u003E\u003Cp\u003EFor anyone interested:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://dl.dropboxusercontent.com/u/195903132/GM%20demos/Orbital-11-14-2015.zip\u0022 rel=\u0022external nofollow\u0022\u003EMy Janky 2D Orbital Simulator (windows)\u003C/a\u003E\u003C/p\u003E\n"}]}