{"TopicId":31732,"ForumId":29,"TopicTitle":"Accessing another plugin","CreatedByName":"tek_604","CreatedById":59699,"CreatedDateTime":"2013-06-06T18:52:56Z","PageNum":1,"Articles":[{"CreatedByName":"tek_604","CreatedById":59699,"CreatedDateTime":"2013-06-06T18:52:56Z","Content":"\n\u003Cp\u003EI want to add the functionality of another plugin, but only if the plugin is already being used. I\u0027ve seen this done, when two plugins are Parts, but, not if one of the plugins is a non-part.\u003C/p\u003E\u003Cp\u003EThe other plugin I wish to use inherits from MonoBehaviour, not PartModule.\u003C/p\u003E\u003Cp\u003EI\u0027ve tried:\u003C/p\u003E\u003Cp\u003E* GetComponent\u003C/p\u003E\u003Cp\u003E* FindObjectOfType (this actually worked, if the other plugin was in the same folder as my own)\u003C/p\u003E\u003Cp\u003EWhat I want to do is check if this other class has been loaded, and if so, add some extra functionality to my own Part, and then call a function in the other class eventually.\u003C/p\u003E\u003Cp\u003EHow is this possible? Is this possible?\u003C/p\u003E\u003Cp\u003E(God I hope this question makes sense!)\u003C/p\u003E\n"},{"CreatedByName":"EndlessWaves","CreatedById":41302,"CreatedDateTime":"2013-06-06T19:25:21Z","Content":"\n\u003Cp\u003EFindObjectOfType would have been my suggestion, what exactly was wrong with it? If it wasn\u0027t working when the plugin was in another folder then were you calling it in OnAwake()? If so then the game may not have loaded the other plugin yet and it may work if you call it later.\u003C/p\u003E\u003Cp\u003EYou should be able check whether a plugin has been loaded using something like Type.GetType(\u0022ClassName\u0022). If it\u0027s non-null the class has been loaded. That doesn\u0027t guarantee the plugin is currently running though, and won\u0027t provide it\u0027s current instantiation for you to call non-static methods on though.\u003C/p\u003E\n"},{"CreatedByName":"nobody44","CreatedById":66369,"CreatedDateTime":"2013-06-07T09:06:43Z","Content":"\n\u003Cp\u003EHe is talking about my plugin \u0022Mission Controller\u0022 and I tried what you said, but Type.GetType(\u0022MissionController.MissionController\u0022) returns null, when I call it outside the mission controller plugin.\u003C/p\u003E\u003Cp\u003EAnd if I add a C# reference to my MissionController.dll and call Type.GetType(MissionController.MissionController) it does work, *BUT* it will need the mission controller library to load the plugin. It\u0027s a hard dependency and I would like to avoid that.\u003C/p\u003E\u003Cp\u003E/EDIT:\u003C/p\u003E\u003Cp\u003ENever mind, figured it out:\u003C/p\u003E\u003Cp\u003EYou have to specify the dll name if the class is in another assembly:\u003C/p\u003E\u003Cp\u003EType t = Type.GetType (\u0022MissionController.Manager,MissionController\u0022); works.\u003C/p\u003E\u003Cp\u003ESo I guess I will code an interface.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-06-07T09:27:56Z\u0022 title=\u002206/07/2013 09:27  AM\u0022 data-short=\u002211 yr\u0022\u003EJune 7, 2013\u003C/time\u003E by nobody44\u003C/strong\u003E\n\u003C/span\u003E\n"}]}