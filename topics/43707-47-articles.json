{"TopicId":43707,"ForumId":34,"TopicTitle":"kOS Scriptable Autopilot System 0.9","CreatedByName":"KevinLaity","CreatedById":68050,"CreatedDateTime":"2013-08-24T14:28:17Z","PageNum":47,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-28T23:54:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MP X10L\u0022 data-cite=\u0022MP X10L\u0022\u003E\u003Cdiv\u003EOk, after some days of playing around, here are some things I would really love to see:\u003Cp\u003ELogarithm function as well as e-function. \u003C/p\u003E\u003Cp\u003EReadout of atmospheric density.\u003C/p\u003E\u003Cp\u003EAlso I have some trouble when doing calculations with angles.\u003C/p\u003E\u003Cp\u003Eeg.: arcsin(0.3) \u002B 1\u003C/p\u003E\u003Cp\u003Eis not possible. Seems that arcsin returns to many digits.\u003C/p\u003E\u003Cp\u003ESame for arccos and arctan. They all return 4 digits more.\u003C/p\u003E\u003Cp\u003ESin, cos and tan work.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis issue with inverse trig functions is probably not your fault.\u003C/p\u003E\u003Cp\u003EThere\u0027s a bug in the current version that makes it nearly impossible to use inverse trig functions like arcsin, arccos, and so on in mathematical expressions. The entire system uses single-precision floating point numbers, but a tiny error in how the values of the inverse trig functions were being calculated made them return double-precision numbers instead. Once you\u0027ve used an arcsin in an expression, from then on that expression gets promoted to double-precision and stays that way. If you assign it to a variable, the variable becomes a double. From then on anywhere you use that value it won\u0027t ever get demoted back down to single-precision. and the entire rest of the KSP system makes the assumption that all numbers are single-precision. When you stuff double-precision numbers into things it starts going all wrong.\u003C/p\u003E\u003Cp\u003EThe fix for it is already in the development code according to what I see on Github, but it\u0027s not in a released version yet.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T00:03:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EA program can be perfected to be reliable.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo it can\u0027t. In fact there are a number of mathematical PROOFS that it can\u0027t. You can only approach the asymptote of reliability without actually getting there. If you drop the word \u0022perfected\u0022 I\u0027d be more willing to agree with you. The program can be subjected to lots of test cases, bringing the reliability up. But it cannot actually achieve 100% reliability. That would require an omniscient programmer.\u003C/p\u003E\u003Cp\u003EThe difference in terms of reliability between a craft being piloted by a computer programmer ahead of time versus by a pilot who handles the controls \u0022live\u0022 is the property of consistency. The computer programmer pilot doesn\u0027t have the luxury of being able to change his mind on the fly about what algorithm to follow. This is both a benefit and a hindrance at the same time. The meat pilot is more likely to make an error through inconsistency, but also more capable of reacting to exception cases. I would never want to fly in a plane that didn\u0027t have a pilot in the chair with the capacity to do a manual override.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T00:11:29Z\u0022 title=\u002209/29/2013 12:11  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-09-29T00:57:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIf you drop the word \u0022perfected\u0022 I\u0027d be more willing to agree with you.\u003C/div\u003E\u003C/blockquote\u003E Well, this is getting all very semantic and off topic (and fun, I might add), but you can continuously perfect something without it ever being perfect. \u003Cem\u003EPerfecting\u003C/em\u003E is only possible with things that are not already perfect.\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ENo it can\u0027t. In fact there are a number of mathematical PROOFS that it can\u0027t. You can only approach the asymptote of reliability without actually getting there. [...] The program can be subjected to lots of test cases, bringing the reliability up. But it cannot actually achieve 100% reliability. That would require an omniscient programmer.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am not sure about your background as you do seem to know a bit about the subject. It is actually possible to mathmatically calculate every outcome for (simple) logic circuits or software. With more complex software this quickly becomes an impossible task, but this is actually used in systems that are highly mission critical. I believe a variety of this process used for software and hardware that gets sent to space, to ensure the weird flukes we all see on our home computers do not and will not happen.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Formal_verification\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Formal_verification\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://en.wikipedia.org/wiki/Independent_Verification_and_Validation_Facility\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/Independent_Verification_and_Validation_Facility\u003C/a\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe difference in terms of reliability between a craft being piloted by a computer programmer ahead of time versus by a pilot who handles the controls \u0022live\u0022 is the property of consistency. The computer programmer pilot doesn\u0027t have the luxury of being able to change his mind on the fly about what algorithm to follow. This is both a benefit and a hindrance at the same time. The meat pilot is more likely to make an error through inconsistency, but also more capable of reacting to exception cases. I would never want to fly in a plane that didn\u0027t have a pilot in the chair with the capacity to do a manual override.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI do believe we fully agree here.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T01:22:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EWell, this is getting all very semantic and off topic (and fun, I might add), but you can continuously perfect something without it ever being perfect. \u003Cem\u003EPerfecting\u003C/em\u003E is only possible with things that are not already perfect.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell I would argue that if you start from a thing that isn\u0027t perfect, and after working on it for a while you end with a thing that is better but still isn\u0027t perfect, that using the term \u0022perfecting\u0022 isn\u0027t really correct and when people use the word that way they\u0027re doing is engaging in hyperbole rather than telling the literal truth. Part of the problem in declaring an autopilot to be perfected is that the same human error that can appear in the \u003Cem\u003Emaking\u003C/em\u003E of it can also appear in the \u003Cem\u003Ejudging\u003C/em\u003E of it. If the software is judged to be perfect you first have to ask by what criteria it\u0027s being judged as perfect, then you have to check if the judgement process itself is perfect, and then whether or not the judgement of the judgement process is perfect, and so on in an infinite regress.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI am not sure about your background as you do seem to know a bit about the subject. It is actually possible to mathmatically calculate every outcome for (simple) logic circuits or software.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOnly when it contains no loops. Once there\u0027s a loop meant to execute a very large number of times this becomes a mathematical impossibility due to the fact that any program analyzing a loop is no more reliable at concluding and coming to a final answer than the loop itself is. (i.e. if you write a program to detect whether or not another program has an infinite loop, if it does have an infinite loop then the detector program gets stuck in an infinite loop as well when trying to analyze it - so the only answers you can get out are \u0022it does terminate\u0022 or \u0022I don\u0027t know if it does or not. Give me more time.\u0022 You can never get the answer out \u0022yes it does have an infinite loop.\u0022)\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-09-29T02:06:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MP X10L\u0022 data-cite=\u0022MP X10L\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EReadout of atmospheric density.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is pretty much what I am waiting for.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EWell I would argue that if you start from a thing that isn\u0027t perfect, and after working on it for a while you end with a thing that is better but still isn\u0027t perfect, that using the term \u0022perfecting\u0022 isn\u0027t really correct and when people use the word that way they\u0027re doing is engaging in hyperbole rather than telling the literal truth.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt is not a hyperbole as perfecting is - as mentioned before - up to the point of perfection, but never including it, as something perfect can not be perfected. Therefore, perfecting is always \u003Cem\u003Efrom\u003C/em\u003E a point less than perfect \u003Cem\u003Eto\u003C/em\u003E another point less than perfect.\u003C/p\u003E\u003Cp\u003EWhen we turn to a dictionary like the Oxford we see that the definition is as follows:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Emake (something) completely free from faults or defects; make as good as possible:\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYour absolute definition is included, but as \u003Cem\u003Eas good as possible\u003C/em\u003E is also included, perfection is not a requisite for perfecting.\u003C/p\u003E\n"},{"CreatedByName":"Payload","CreatedById":4540,"CreatedDateTime":"2013-09-29T04:05:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MP X10L\u0022 data-cite=\u0022MP X10L\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EReadout of atmospheric density.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset atmP to 2.718^((0-altitude)/5000).\u003Cbr\u003Eset atmD to atmP * 1.2230948554874.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAtmospheric pressure and density.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe formula below will give you the force of drag at velocity. You will have to do some additional computation if you want to include a deployed parachute. The cD will change then, it wont be just 0.2.\u003C/p\u003E\u003Cp\u003EFd= 0.5 * atmDensity * (velocity)^2 * 0.2 * (mass*.008).\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-09-29T04:31:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Payload\u0022 data-cite=\u0022Payload\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset atmP to 2.718^((0-altitude)/5000).\u003Cbr\u003Eset atmD to atmP * 1.2230948554874.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAtmospheric pressure and density.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe formula below will give you the force of drag at velocity. You will have to do some additional computation if you want to include a deployed parachute. The cD will change then, it wont be just 0.2.\u003C/p\u003E\u003Cp\u003EFd= 0.5 * atmDensity * (velocity)^2 * 0.2 * (mass*.008).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor me the benefit would be the ability to adjust thrust dynamically to any atmosphere for maximum efficiency. This solution is an excellent work around, but only works on Kerbin, which is exactly what I am trying to avoid by developing a universal solution. Then there is no need for knowing the exact properties of place X or Y, you can just measure them as you go.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T04:35:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIt is not a hyperbole as perfecting is - as mentioned before - up to the point of perfection, but \u003Cstrong\u003Enever including it\u003C/strong\u003E, as something perfect can not be perfected. Therefore, perfecting is \u003Cstrong\u003Ealways\u003C/strong\u003E \u003Cem\u003Efrom\u003C/em\u003E a point less than perfect \u003Cem\u003Eto\u003C/em\u003E another point less than perfect.\u003C/p\u003E\u003Cp\u003EYour absolute definition is included, but as \u003Cem\u003Eas good as possible\u003C/em\u003E is also included, perfection is \u003Cstrong\u003Enot a requisite for\u003C/strong\u003E perfecting.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027ve altered your definition in that last line. I added the boldfacing to show the contradiction. You changed your claim after looking it up. I\u0027ll admit I had it wrong if you ALSO admit you had it wrong. Saying \u003Cstrong\u003Enot a requisite for\u003C/strong\u003E allows for the first and second definitions in the Oxford dictionary to exist. What you said earlier does not allow the first definition to exist. What I said didn\u0027t allow the second definition to exist. We were both wrong.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T04:41:58Z\u0022 title=\u002209/29/2013 04:41  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T04:54:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EFor me the benefit would be the ability to adjust thrust dynamically to any atmosphere for maximum efficiency. This solution is an excellent work around, but only works on Kerbin, which is exactly what I am trying to avoid by developing a universal solution. Then there is no need for knowing the exact properties of place X or Y, you can just measure them as you go.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut you can query the variable \u0022body\u0022 to see the string name of your current body. So while this isn\u0027t ideal, and I\u0027d rather be able to read the science instruments as well, you *can* at least make a routine that contains all the wiki-able stats about the planets and moons, and looks them up based on the string you pass in. Here\u0027s what I\u0027ve done so far for just Kerbin, Mun, and Minmus. It\u0027s clear that the idea can be expanded to all the planets with a bit of time spent wiki-looking and typing. Seeing as how this isn\u0027t the interesting part of making an autopilot, but it is needed, I\u0027d like to have this be a thing that people communally edit wiki-style for everyone to use. Once it includes all the stats for all the bodies it will become too big and will eat up most of the disk on a remote probe, but I have an idea that what you\u0027d do with it is keep it at home on your archive and \u0022beam\u0022 the stats to the probe like so:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E//Running on Probe, if it has radio range:\u003Cbr\u003Eswitch to archive.\u003Cbr\u003Erun bodyStats(body).\u003Cbr\u003Eswitch to 1.\u003Cbr\u003E// go on with rest of code.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo simulate the idea of the home base sending the data to the probe when it asks for it, rather than the probe having to know the stats about everything in the system.\u003C/p\u003E\u003Cp\u003EThe bodystats looks like this so far. Some of these parameters would be pulled out of it if it was for public use because they\u0027re just for my lander script:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// bodystats: sets up variables for use in programs\u003Cbr\u003E// that need stats about the orbital body that is the\u003Cbr\u003E// current SOI.  Looks up the body name and fills\u003Cbr\u003E// the appropriate variables.\u003Cbr\u003Eclearscreen.\u003Cbr\u003Edeclare parameter forBody.\u003Cbr\u003E\u003Cbr\u003Eprint \u0022Settings for SOI body: \u0022 \u002B forBody.\u003Cbr\u003Eprint \u0022 \u0022.\u003Cbr\u003E\u003Cbr\u003E// Placeholder Defaults in case I didn\u0027t code stats for current body.\u003Cbr\u003E// ------------------------------------------------------------------\u003Cbr\u003E\u003Cbr\u003Eset bodySurfaceGrav to 10.   // The m/s^2 at the body\u0027s surface.\u003Cbr\u003E\u003Cbr\u003Eset bodyRadius to 500000 .   // The radius from center to equator.\u003Cbr\u003E\u003Cbr\u003Eset bodyMaxElev to 4000.     // The peak of the highest mountain.\u003Cbr\u003E\u003Cbr\u003Eset bodyTVelTenKm to 999999. // Terminal velocity at 10,000 m.\u003Cbr\u003E                             // The actual math for term vel is complex.\u003Cbr\u003E                             // This data point is for fuzzy heuristics.\u003Cbr\u003E                             // Set really high for planets with no atmo.\u003Cbr\u003E\u003Cbr\u003Eset descendTop to 50000 .    // The highest AGL at which descents might start.\u003Cbr\u003E\u003Cbr\u003Eset descendBot to 100 .      // the AGL where a descending craft should hover.\u003Cbr\u003E\u003Cbr\u003Eset descendTopSpeed to 2000.0 . // Desired speed at top of descent profile.\u003Cbr\u003E\u003Cbr\u003Eset descendBotSpeed to 4.0 .    // Desried speed at bottom of desecnt profile.\u003Cbr\u003E\u003Cbr\u003Eset bodyLandingSpeed to 4.0.    // Desried speed to come down from hover to\u003Cbr\u003E\u003Cbr\u003Eset craneDropAGL to 10.    // AGLto drop skycrane payloads from.\u003Cbr\u003E                           // Warning this is measured from craft control\u003Cbr\u003E\t\t\t   // unit, not from craft\u0027s bottom.\u003Cbr\u003E\u003Cbr\u003Eset throttleGentle to 100. // Throttle gentleness.\u003Cbr\u003E                           // too low and the throttle is twitchy.\u003Cbr\u003E                           // too high and its too slow to react.\u003Cbr\u003E\u003Cbr\u003Eset c to \u0022 ====== deviations for each body ===== \u0022.\u003Cbr\u003Eif forBody = \u0022Kerbin\u0022 {\u003Cbr\u003E  set bodySurfaceGrav to 9.802 .\u003Cbr\u003E  set bodyRadius to 600000 .\u003Cbr\u003E  set bodyMaxElev to 6761 .\u003Cbr\u003E  set bodyTVelTenKm to 267 .\u003Cbr\u003E  set descendTop to 70000 .\u003Cbr\u003E  set descendBot to 100.\u003Cbr\u003E  set descendTopSpeed to 1800.0 .\u003Cbr\u003E  set descendBotSpeed to 6.0 .\u003Cbr\u003E  set descendLandingSpeed to 4.0 .\u003Cbr\u003E}.\u003Cbr\u003Eif forBody = \u0022Mun\u0022 {\u003Cbr\u003E  set bodySurfaceGrav to 1.63 .\u003Cbr\u003E  set bodyRadius to 200000 .\u003Cbr\u003E  set bodyMaxElev to 7061 .\u003Cbr\u003E  set descendTop to 20000 .\u003Cbr\u003E  set descendBot to 50 .\u003Cbr\u003E  set descendTopSpeed to 542.0 .\u003Cbr\u003E  set descendBotSpeed to 6.0 .\u003Cbr\u003E  set bodyLandingSpeed to 2.0 .\u003Cbr\u003E}.\u003Cbr\u003Eif forBody = \u0022Minmus\u0022 {\u003Cbr\u003E  set bodySurfaceGrav to 0.491 .\u003Cbr\u003E  set bodyRadius to 60000 .\u003Cbr\u003E  set bodyMaxElev to 5725 .\u003Cbr\u003E  set descendTop to 10000 .\u003Cbr\u003E  set descendBot to 30 .\u003Cbr\u003E  set descendTopSpeed to 274.0 .\u003Cbr\u003E  set descendBotSpeed to 5.0 .\u003Cbr\u003E  set bodyLandingSpeed to 2.0 .\u003Cbr\u003E}.\u003Cbr\u003E\u003Cbr\u003Eprint \u0022 \u0022.\u003Cbr\u003Eprint \u0022bodySurfaceGrav  = \u0022 \u002B bodySurfaceGrav.\u003Cbr\u003Eprint \u0022bodyRadius       = \u0022 \u002B bodyRadius.\u003Cbr\u003Eprint \u0022descendTop       = \u0022 \u002B descendTop.\u003Cbr\u003Eprint \u0022descendBot       = \u0022 \u002B descendBot.\u003Cbr\u003Eprint \u0022descendTopSpeed  = \u0022 \u002B descendTopSpeed.\u003Cbr\u003Eprint \u0022descendBotSpeed  = \u0022 \u002B descendBotSpeed.\u003Cbr\u003Eprint \u0022bodyLandingSpeed = \u0022 \u002B bodyLandingSpeed.\u003Cbr\u003Eprint \u0022throttleGentle   = \u0022 \u002B throttleGentle.\u003Cbr\u003Eprint \u0022 \u0022.\u003Cbr\u003Eprint \u0022(\u0027AGL\u0027 means Above Ground Level to distinguish \u0022.\u003Cbr\u003Eprint \u0022from sea level altitude.)\u0022.\u003Cbr\u003Eprint \u0022 \u0022.\u003Cbr\u003Eprint \u0022You may change these variables with the \u0027set\u0027 \u0022.\u003Cbr\u003Eprint \u0022command before running other programs to try \u0022.\u003Cbr\u003Eprint \u0022other settings.\u0022.\u003Cbr\u003Eprint \u0022 \u0022.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI like this idea and would like to see it publicly developed. But first I\u0027d like to see some better conventions for variable names than I used. I think mine are too wordy given the small size of things in KOS.\u003C/p\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2013-09-29T06:01:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EBut you can query the variable \u0022body\u0022 to see the string name of your current body. So while this isn\u0027t ideal, and I\u0027d rather be able to read the science instruments as well, you *can* at least make a routine that contains all the wiki-able stats about the planets and moons, and looks them up based on the string you pass in.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI agree that this is currently the best and probably only way of doing things. I am a little obsessed with making things as universal as possible though, so any system that can dynamically measure parameters instead of using fixed ones is more ideal in my eyes. That way you can do missions to unknown bodies (so no surprises like the Soviets had on Venus) and even bodies (currently) not in the Kerbal solar system without knowing exactly what is going on there. \u003C/p\u003E\u003Cp\u003EI guess some values are hard to measure, like SOI and planet size, but I think we can expect a whole lot of sensors in the near future. Maybe something will come along that can dynamically measure stuff like that in a somewhat realistic fashion.\u003C/p\u003E\u003Cp\u003EI actually was thinking about conventions for things like this. It would be nice if code was easily shared between people using the same variables.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYou\u0027ve altered your definition in that last line. I added the boldfacing to show the contradiction. You changed your claim after looking it up.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI know that there is a discrepancy between my statement and the definition of the Oxford dictionary. I looked up the definition to illustrate that both exclude perfection as a necessity for perfecting. \u003C/p\u003E\u003Cp\u003EI did or do not change my claim as I can not fully agree with the definition given by the dictionary for reasons already explained; if you simply follow the logic, perfection should be excluded from the act of perfecting. However, my original statement was that a program can be perfected to be reliable and that seems to hold true either way. My logic is undeniable \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003EAnyway, I think it is time to shake hands and go back to discussing kOS - even though I do enjoy conversations like this.\u003C/span\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T06:20:28Z\u0022 title=\u002209/29/2013 06:20  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by Camacha\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T10:11:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EI looked up the definition to illustrate that both exclude perfection as a necessity for perfecting. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI do not agree that both do so. But I\u0027ve already shown exactly why I don\u0027t agree, so there\u0027s no point in me repeating the same thing I already said in response to you saying the same thing you already said.\u003C/p\u003E\u003Cp\u003EBack to kOS.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T10:59:03Z\u0022 title=\u002209/29/2013 10:59  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-09-29T10:28:43Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E\u003Cstrong\u003EI highly suggest a \u003C/strong\u003E\u003Cem\u003E\u003Cstrong\u003Eround(\u0026lt;float\u0026gt;,\u0026lt;digits\u0026gt;)\u003C/strong\u003E\u003C/em\u003E\u003Cstrong\u003E command.\u003C/strong\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E___________________________________\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Payload\u0022 data-cite=\u0022Payload\u0022\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eset atmP to 2.718^((0-altitude)/5000).\u003Cbr\u003Eset atmD to atmP * 1.2230948554874.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAtmospheric pressure and density.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe formula below will give you the force of drag at velocity. You will have to do some additional computation if you want to include a deployed parachute. The cD will change then, it wont be just 0.2.\u003C/p\u003E\u003Cp\u003EFd= 0.5 * atmDensity * (velocity)^2 * 0.2 * (mass*.008).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027d like to have this in a reasonable context in the \u003Ca href=\u0022http://kos.wikia.com/wiki/KOS_Wiki\u0022 rel=\u0022external nofollow\u0022\u003Ek-OS wiki\u003C/a\u003E. I would appreciate if you* do that, \u003Cem\u003Epretty PLEASE\u003C/em\u003E *making puppy eyes*.\u003C/p\u003E\u003Cp\u003E___________________________________\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI like this idea and would like to see it publicly developed. But first I\u0027d like to see some better conventions for variable names than I used. I think mine are too wordy given the small size of things in KOS.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E I also forget it often enough, but there is the possibility to add more than one computer and use more than one drive.\u003Cp\u003E___________________________________\u003C/p\u003E\u003Cp\u003E___________________________________\u003C/p\u003E\u003Cp\u003E*= Cause I have trouble with the \u0022reasonable context\u0022 part. In other words: That should be on the wiki, but I have no clue where to put it.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T10:36:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Camacha\u0022 data-cite=\u0022Camacha\u0022\u003E\u003Cdiv\u003EI actually was thinking about conventions for things like this. It would be nice if code was easily shared between people using the same variables.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt would be even nicer if we didn\u0027t HAVE to worry as much about the global namespace. I\u0027m thinking in terms of the stuff needed to write helper library routines and one of the hard problems is that all variables are global in scope and there\u0027s no way to declare a variable to be local. (Only the DECLARE PARAMETERS are local, nothing else is.) While this certainly fits with Kevin\u0027s goal of making it easy to understand for the layperson it does have the problem that there\u0027s a good *reason* languages have a distinction between global and local variables. Local variables let you make subroutines that don\u0027t have to \u0022know\u0022 the names of all the other variables in the rest of the code they are going to be mixed in with. They can use a variable with a short name like \u0022x\u0022 or \u0022i\u0022 or \u0022front\u0022 or \u0022count\u0022 without worrying that they may be clobbering a variable used by the calling program.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T10:41:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E*= Cause I have trouble with the \u0022reasonable context\u0022 part. In other words: That should be on the wiki, but I have no clue where to put it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI made the \u0022Sidebar Topics\u0022 page for things that are sort of not quite syntax and language features, and also sort of not really containing fully fleshed out examples and tutorials, but are instead for exactly things like this - helpful extra information on the side that a KOS script writer would need to know - like how the XYZ system is laid out, or how the Volumes and Archive work, or how long antenna range is.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T10:55:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E[*]\u003Cstrong\u003EI highly suggest a \u003C/strong\u003E\u003Cem\u003E\u003Cstrong\u003Eround(\u0026lt;float\u0026gt;,\u0026lt;digits\u0026gt;)\u003C/strong\u003E\u003C/em\u003E\u003Cstrong\u003E command.\u003C/strong\u003E[/list\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat should be on the GitHub Issues page. But I\u0027d recommend that if you\u0027re only going to be able to get one operator of the set:\u003C/p\u003E\u003Cp\u003EROUND,\u003C/p\u003E\u003Cp\u003ETRUNC OR FLOOR (same thing),\u003C/p\u003E\u003Cp\u003ECEIL\u003C/p\u003E\u003Cp\u003EMODULO (the \u0022%\u0022 operator).\u003C/p\u003E\u003Cp\u003Eimplemented (because let\u0027s face it, Kevin is busy), then of the set of all those, that TRUNC is in fact the most valuable one to implement first, because with it you can derive the others:\u003C/p\u003E\u003Cp\u003ECEIL(X) is almost always the same as TRUNC(X \u002B 0.999999999999 ). (As many \u00279\u0027s as you can fit before the float precision rounds it up - the problem being that how large that can be varies depending on how far away from zero X is. The precision is not constant - it gets worse the bigger the number is. That\u0027s why I had to say \u0022almost always\u0022 rather than \u0022always\u0022.)\u003C/p\u003E\u003Cp\u003EROUND(X) is almost always the same as TRUNC( X \u002B 0.5 ). (Depending on rounding algorithm).\u003C/p\u003E\u003Cp\u003E(To get a ROUND(X,digits) function you can multiply by powers of 10 to shift the decimal place, do the TRUNC, and then multiply by the opposite power of 10 to shift the number back.)\u003C/p\u003E\u003Cp\u003EAnd MODULO(X,Y) *is* always the same as X - TRUNC(X/Y). (What\u0027s leftover after the integer portion of X/Y).\u003C/p\u003E\u003Cp\u003EIf there\u0027s only going to be one thing implemented, I\u0027d rather it be TRUNC. It\u0027s a lot more universal.\u003C/p\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-09-29T10:56:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI made the \u0022Sidebar Topics\u0022 page for things that are sort of not quite syntax and language features, and also sort of not really containing fully fleshed out examples and tutorials, but are instead for exactly things like this - helpful extra information on the side that a KOS script writer would need to know - like how the XYZ system is laid out, or how the Volumes and Archive work, or how long antenna range is.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMeh, don\u0027t ruin my chance to recruit another editor*... But thanks.\u003C/p\u003E\u003Cp\u003E*=I was hoping to hit two birds with one stone.\u003C/p\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-09-29T11:04:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThat should be on the GitHub Issues page. But I\u0027d recommend that if you\u0027re only going to be able to get one operator of the set:\u003Cp\u003EROUND,\u003C/p\u003E\u003Cp\u003ETRUNC OR FLOOR (same thing),\u003C/p\u003E\u003Cp\u003ECEIL\u003C/p\u003E\u003Cp\u003EMODULO (the \u0022%\u0022 operator).\u003C/p\u003E\u003Cp\u003Eimplemented (because let\u0027s face it, Kevin is busy), then of the set of all those, that TRUNC is in fact the most valuable one to implement first, because with it you can derive the others:\u003C/p\u003E\u003Cp\u003ECEIL(X) is almost always the same as TRUNC(X \u002B 0.999999999999 ). (As many \u00279\u0027s as you can fit before the float precision rounds it up - the problem being that how large that can be varies depending on how far away from zero X is. The precision is not constant - it gets worse the bigger the number is. That\u0027s why I had to say \u0022almost always\u0022 rather than \u0022always\u0022.)\u003C/p\u003E\u003Cp\u003EROUND(X) is almost always the same as TRUNC( X \u002B 0.5 ). (Depending on rounding algorithm).\u003C/p\u003E\u003Cp\u003E(To get a ROUND(X,digits) function you can multiply by powers of 10 to shift the decimal place, do the TRUNC, and then multiply by the opposite power of 10 to shift the number back.)\u003C/p\u003E\u003Cp\u003EAnd MODULO(X,Y) *is* always the same as X - TRUNC(X/Y). (What\u0027s leftover after the integer portion of X/Y).\u003C/p\u003E\u003Cp\u003EIf there\u0027s only going to be one thing implemented, I\u0027d rather it be TRUNC. It\u0027s a lot more universal.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDunno, I know round as context sensitive means if the first invisible digit is bigger than 5 the last visible goes up by one. E.g: 1.33533333335 would come up with \u003Cem\u003Eround(1.33533333335 , 10)\u003C/em\u003E as 1.3353333334 // and \u003Cem\u003Eround(1.33533333335 , 5)\u003C/em\u003E as 1.33533 // and \u003Cem\u003Eround(1.33533333335 , 0)\u003C/em\u003E as 1 // and \u003Cem\u003Eround(1.33533333335 , 2)\u003C/em\u003E as 1.34\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T11:11:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Payload\u0022 data-cite=\u0022Payload\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThe formula below will give you the force of drag at velocity. You will have to do some additional computation if you want to include a deployed parachute. The cD will change then, it wont be just 0.2.\u003C/p\u003E\u003Cp\u003EFd= 0.5 * atmDensity * (velocity)^2 * 0.2 * (mass*.008).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI tried working out that same drag formula and balked at KOS\u0027s inability to query the coefficient of drag for the ship. It looks like you\u0027re plugging in 0.2 as the coefficient of drag. Where did you get that 0.2 figure from? You mention that it would be higher with a parachute. That\u0027s true but even before the parachute is thrown into the mix how did you know it was 0.2 in the first place?\u003C/p\u003E\u003Cp\u003EDid you obtain that number from outside of KOS? (i.e. writing down the parts\u0027 drags as you add them to the ship, or getting it from a mod, or something like that)? Because I can\u0027t figure out how to derive it from inside of KOS.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T11:13:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003EMeh, don\u0027t ruin my chance to recruit another editor*... But thanks.\u003Cp\u003E*=I was hoping to hit two birds with one stone.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHow does that ruin the chance to get another editor? I was answering the question of where to add the information about drag. I was saying that\u0027s a good place to go add it.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2013-09-29T11:22:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003EDunno, I know round as context sensitive means if the first invisible digit is bigger than 5 the last visible goes up by one. E.g: 1.33533333335 would come up with \u003Cem\u003Eround(1.33533333335 , 10)\u003C/em\u003E as 1.3353333334 // and \u003Cem\u003Eround(1.33533333335 , 5)\u003C/em\u003E as 1.33533 // and \u003Cem\u003Eround(1.33533333335 , 0)\u003C/em\u003E as 1 // and \u003Cem\u003Eround(1.33533333335 , 2)\u003C/em\u003E as 1.34\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah but so would what I hinted at. Here, I\u0027ll spell it out more explicitly without being so terse about it. I realize I wasn\u0027t clear because it was just one item in a list and I didn\u0027t mention all the steps correctly:\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003Eset x to 1.6666666.\u003C/p\u003E\u003Cp\u003Eset y to round(x, 3).\u003C/p\u003E\u003Cp\u003Ewould become this instead:\u003C/p\u003E\u003Cp\u003Eset x to 1.6666666.\u003C/p\u003E\u003Cp\u003Eset y to TRUNC(X*10^3 \u002B 0.5) / 10^3 .\u003C/p\u003E\u003Cp\u003EThat would give you 1.667 as expected.\u003C/p\u003E\u003Cp\u003EX*10^3 is 1666.6666\u003C/p\u003E\u003Cp\u003E1666.6666 \u002B 0.5 is 1667.1666\u003C/p\u003E\u003Cp\u003ETRUNC(1667.1666) is 1667.\u003C/p\u003E\u003Cp\u003E1667 / 10^3 is 1.667\u003C/p\u003E\u003Cp\u003EThe general form is this:\u003C/p\u003E\u003Cp\u003EROUND(X,d) is equal to TRUNC( X*10^d \u002B 0.5 ) / 10^d .\u003C/p\u003E\n"},{"CreatedByName":"HeadChef","CreatedById":76992,"CreatedDateTime":"2013-09-29T12:02:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI tried working out that same drag formula and balked at KOS\u0027s inability to query the coefficient of drag for the ship. It looks like you\u0027re plugging in 0.2 as the coefficient of drag. Where did you get that 0.2 figure from? You mention that it would be higher with a parachute. That\u0027s true but even before the parachute is thrown into the mix how did you know it was 0.2 in the first place?\u003Cp\u003EDid you obtain that number from outside of KOS? (i.e. writing down the parts\u0027 drags as you add them to the ship, or getting it from a mod, or something like that)? Because I can\u0027t figure out how to derive it from inside of KOS.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI hope you don\u0027t mind me answering this.\u003C/p\u003E\u003Cp\u003EMost parts in KSP have a drag value ofo 0.2. As long as noch chute with its insanely high drag value comes in, the average value will thus remain close to 0.2. It\u0027s an approximation.\u003C/p\u003E\u003Cp\u003EThe KSP Wiki has a topic on this: \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere#Drag\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere#Drag\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EThis is a great mod. Thank you Kevin and all the others who put effort into this.\u003C/p\u003E\u003Cp\u003EI was looking for something like this since I first started off with KSP.\u003C/p\u003E\u003Cp\u003EI too have some suggestions for improvements. These are the first that came to my mind:\u003C/p\u003E\u003Cp\u003EMore storage per CX-4184.\u003C/p\u003E\u003Cp\u003EDon\u0027t get me wrong. I really like the Idea of having to household with memory, to use multiple units for complex missions and to copy stuff around. I however had a really hard time to fit a single advanced launch program into one CX-4184 without stripping all comments. For a scripting launguage that is aimed on users who do not have any programming knowledge, I think comments are a must-have. Maybe you could exclude comments from the program size calculations. As a quick fix however, doubling the storage size to 20kb would be OK.\u003C/p\u003E\u003Cp\u003EArrays.\u003C/p\u003E\u003Cp\u003EIt would be really nice if one could iterate over information. In my case, I store information on each stage of my rocket in a program file. In other programs I then often have something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eif curr_stage = 1 { ... }.\u003Cbr\u003Eif curr_stage = 2 { ... }.\u003Cbr\u003Eif curr_stage = 3 { ... }.\u003Cbr\u003E...\u003C/pre\u003E\u003Cp\u003E In each block I have to repeat almost the same code, only with different variable names. Especially in an environment with strictly limited memory, this becomes a real burden.\u003C/p\u003E\u003Cp\u003ESmaller parts.\u003C/p\u003E\u003Cp\u003EThe CX-4184 is nice for most types of rockets. Small probes or rovers on the other hand become very bulky if built around this monster. An additional, OKTO-sized part would be really neat. That one may then have a reduced storage and/or a slower CPU.\u003C/p\u003E\u003Cp\u003EFinally, the \u00C3\u201A\u00C2\u00B4lock\u00C3\u201A\u00C2\u00B4 command seems not to update variables if they are queried from within a loop. What I tried was basically this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Elock lnc_atm_d to 1.2230948554874 * bi_atm_p0 * (e ^ ((0 - altitude) / bi_atm_sh)).\u003Cbr\u003Elock set lnc_vt to ((250 * bi_gm) / ((bi_r ^ 2) * vi_grav * lnc_atm_d)) ^ 0.5.\u003Cbr\u003E\u003Cbr\u003Euntil apoapsis \u0026gt; p_lnc_alt {\u003Cbr\u003E    print \u0022Terminal Velocity:   \u0022 \u002B lnc_vt      at (15,25).\u003Cbr\u003E    print \u0022Atmospheric Density: \u0022 \u002B lnc_atm_d   at (15,26).\u003Cbr\u003E}.\u003C/pre\u003E\u003Cp\u003EThe loop however keeps printing the values both variables had when the loop was entered.\u003C/p\u003E\u003Cp\u003EBut anyway: Keep up the great work.\u003C/p\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-09-29T12:06:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EYeah but so would what I hinted at. Here, I\u0027ll spell it out more explicitly without being so terse about it. I realize I wasn\u0027t clear because it was just one item in a list and I didn\u0027t mention all the steps correctly:\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003Eset x to 1.6666666.\u003C/p\u003E\u003Cp\u003Eset y to round(x, 3).\u003C/p\u003E\u003Cp\u003Ewould become this instead:\u003C/p\u003E\u003Cp\u003Eset x to 1.6666666.\u003C/p\u003E\u003Cp\u003Eset y to TRUNC(X*10^3 \u002B 0.5) / 10^3 .\u003C/p\u003E\u003Cp\u003EThat would give you 1.667 as expected.\u003C/p\u003E\u003Cp\u003EX*10^3 is 1666.6666\u003C/p\u003E\u003Cp\u003E1666.6666 \u002B 0.5 is 1667.1666\u003C/p\u003E\u003Cp\u003ETRUNC(1667.1666) is 1667.\u003C/p\u003E\u003Cp\u003E1667 / 10^3 is 1.667\u003C/p\u003E\u003Cp\u003EThe general form is this:\u003C/p\u003E\u003Cp\u003EROUND(X,d) is equal to TRUNC( X*10^d \u002B 0.5 ) / 10^d .\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEeeerr, can\u0027t he use a round that is build in the C he uses? I mean most languages have that build in. I am sure Python has.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI tried working out that same drag formula and balked at KOS\u0027s inability to query the coefficient of drag for the ship. It looks like you\u0027re plugging in 0.2 as the coefficient of drag. Where did you get that 0.2 figure from? You mention that it would be higher with a parachute. That\u0027s true but even before the parachute is thrown into the mix how did you know it was 0.2 in the first place?\u003Cp\u003EDid you obtain that number from outside of KOS? (i.e. writing down the parts\u0027 drags as you add them to the ship, or getting it from a mod, or something like that)? Because I can\u0027t figure out how to derive it from inside of KOS.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIsn\u0027t that the drag thing that are stored in the parts?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EHow does that ruin the chance to get another editor? I was answering the question of where to add the information about drag. I was saying that\u0027s a good place to go add it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf he had felt a gentle push to do it because I can\u0027t... (But the comment wasn\u0027t totally serious anyway)\u003C/p\u003E\u003Cp\u003ENow I have done it anyway...\u003C/p\u003E\n"},{"CreatedByName":"Bizz Keryear","CreatedById":68896,"CreatedDateTime":"2013-09-29T12:25:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HeadChef\u0022 data-cite=\u0022HeadChef\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EMore storage per CX-4184.\u003C/p\u003E\u003Cp\u003EDon\u0027t get me wrong. I really like the Idea of having to household with memory, to use multiple units for complex missions and to copy stuff around. I however had a really hard time to fit a single advanced launch program into one CX-4184 without stripping all comments. For a scripting launguage that is aimed on users who do not have any programming knowledge, I think comments are a must-have. Maybe you could exclude comments from the program size calculations. As a quick fix however, doubling the storage size to 20kb would be OK.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor various reasons I am attempted to create a compiler in Python that not only strips comments, but also verifies the code. (Its a hassle to test it with crafts.) and eventually also shortens the length of variable names.\u003C/p\u003E\u003Cp\u003EBut currently I am so busy with the wiki that I barely have time to play. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HeadChef\u0022 data-cite=\u0022HeadChef\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EArrays.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah that would be neat.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HeadChef\u0022 data-cite=\u0022HeadChef\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESmaller parts.\u003C/p\u003E\u003Cp\u003EThe CX-4184 is nice for most types of rockets. Small probes or rovers on the other hand become very bulky if built around this monster. An additional, OKTO-sized part would be really neat. That one may then have a reduced storage and/or a slower CPU.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell I don\u0027t think so. I would use \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/31342-0-20-ModuleManager-1-3-for-all-your-stock-modding-needs\u0022 rel=\u0022external nofollow\u0022\u003EModule Manager\u003C/a\u003E instead to make all probe cores also a k-OS computer. It would be a logic choice to do so. (since it would irrational for a probe core to not have a computer like this)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022HeadChef\u0022 data-cite=\u0022HeadChef\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFinally, the \u00C3\u201A\u00C2\u00B4lock\u00C3\u201A\u00C2\u00B4 command seems not to update variables if they are queried from within a loop.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat I thought it propose it was.\u003C/p\u003E\u003Cp\u003EYeah, run into that, too. Missed to report that bug at GitHub, though.\u003C/p\u003E\n"},{"CreatedByName":"aNewHope","CreatedById":76088,"CreatedDateTime":"2013-09-29T13:32:44Z","Content":"\n\u003Cp\u003EWill there be a feature to create lists, where values can be accessed using variables? I picture it like this.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E l2(x) -\u0026gt; list two; line x\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAlso it would be very useful to be able to print at positions given by variables (gives an error right now).\u003C/p\u003E\u003Cp\u003EThis would open up a new world of possibilities.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022testtest1212\u0022 at (x,y) \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd last but not least the feature to read out the thrust currently put out by your rocket, would solve almost all problems with asparagus staging.\u003C/p\u003E\u003Cp\u003E(When an outer stage burns out, you thrust suddenly decreases --\u0026gt; your program stages).\u003C/p\u003E\u003Cp\u003EGotta love your mod. Keep up the good work!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T14:30:41Z\u0022 title=\u002209/29/2013 02:30  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by aNewHope\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HeadChef","CreatedById":76992,"CreatedDateTime":"2013-09-29T14:52:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003EFor various reasons I am attempted to create a compiler in Python that not only strips comments, but also verifies the code. (Its a hassle to test it with crafts.) and eventually also shortens the length of variable names.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s the route I\u0027m currently taking too. On a long run however, I think there should be something built right into the Pluging itself. An unexperienced user may not be willing to use additional external tools just to get some common example code to work.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWell I don\u0027t think so. I would use \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/31342-0-20-ModuleManager-1-3-for-all-your-stock-modding-needs\u0022 rel=\u0022external nofollow\u0022\u003EModule Manager\u003C/a\u003E instead to make all probe cores also a k-OS computer. It would be a logic choice to do so. (since it would irrational for a probe core to not have a computer like this)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis would definitely be the more consequent solution. Then the existing part could also be removed.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Bizz Keryear\u0022 data-cite=\u0022Bizz Keryear\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EYeah, run into that, too. Missed to report that bug at GitHub, though.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI somehow hadn\u0027t realized yet at all that there is an issue tracker on GitHub. Maybe a more explicit anouncement in the OP would help others. Something like \u0022If you find any bugs, please post them on the GitHub page\u0022.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aNewHope\u0022 data-cite=\u0022aNewHope\u0022\u003E\u003Cdiv\u003EWill there be a feature to create lists, where values can be accessed using variables. I picture it like this.\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E l2(x) -\u0026gt; list two; line x\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is basically what I meant with \u0027arrays\u0027. To have the ability to store multiple sets of data in a single variable and to look up a specific data set by an index. If this index could itself be read from a variable, one could (besides many other cool things) iterate over all data sets in a loop. E.g.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// Pseudocode\u003Cbr\u003Eset 0 in a to \u0022value1\u0022.\u003Cbr\u003Eset 1 in a to \u0022value2\u0022.\u003Cbr\u003E...\u003Cbr\u003E\u003Cbr\u003Eset i to 0.\u003Cbr\u003Euntil i = 5 {\u003Cbr\u003E    print i in a.\u003Cbr\u003E    set i to i \u002B 1.\u003Cbr\u003E}.\u003C/pre\u003E\u003Cp\u003EThis would print\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Evalue1\u003Cbr\u003Evalue2\u003Cbr\u003E...\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aNewHope\u0022 data-cite=\u0022aNewHope\u0022\u003E\u003Cdiv\u003EAlso it would be very useful to be able to print at positions given by variables (gives an error right now).\u003Cp\u003EThis would open up a new world of possibilities.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eprint \u0022testtest1212\u0022 at (x,y) \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis was one of the first features I was missing in my very first program. It would indeed be useful.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022aNewHope\u0022 data-cite=\u0022aNewHope\u0022\u003E\u003Cdiv\u003EAnd last but not least the feature to read out the thrust currently put out by your rocket, would solve almost all problems with asparagus staging.\u003Cp\u003E(When an outer stage burns out, you thrust suddenly decreases --\u0026gt; your program stages).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis would indeed be nice. By now, you can implement staging for such rockets by coding the \u0027empty levels\u0027 of the stages into your program. Look up the fuel capacity of your rocket, then have a look at the capacity of the boosters in each stage and subtract it from the capacity of the whole rocket. The result is the amount of fuel your rocket will still have when the booster stage is spent. You can then trigger the staging command when the fuel of the current stage becomes lower than the \u0027empty level\u0027 of that stage. For the Kerbal-X stock rocket, the code looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eset stage1_empty to 6480.\u003Cbr\u003Eset stage2_empty to 5400.\u003Cbr\u003Eset stage3_empty to 4320.\u003Cbr\u003E\u003Cbr\u003Ewhen stage:liquidfuel \u0026lt; stage1_empty then stage.\u003Cbr\u003Ewhen stage:liquidfuel \u0026lt; stage2_empty then stage.\u003Cbr\u003Ewhen stage:liquidfuel \u0026lt; stage3_empty then stage.\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T14:58:35Z\u0022 title=\u002209/29/2013 02:58  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by HeadChef\u003C/strong\u003E\n\u003Cbr\u003EFixed my code sample.\n\u003C/span\u003E\n"}]}