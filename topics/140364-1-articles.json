{"TopicId":140364,"ForumId":29,"TopicTitle":"[SOLVED] transform.Find() with full path to named transform","CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-23T17:53:09Z","PageNum":1,"Articles":[{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-23T17:53:09Z","Content":"\n\u003Cp\u003E\nTo elaborate :\u003Cbr\u003E\nI\u0027m writing a plugin that will read part.cfg to get a transform for a part\u0027s sub-object.\n\u003C/p\u003E\n\u003Cp\u003E\nThere is part.FindModelTransform() but it relies on transform\u0027s name being unique.\n\u003C/p\u003E\n\u003Cp\u003E\nThe plugin i\u0027m writing will be released to be used by part creators and will read transform name from part.cfg, so i don\u0027t have control over what gets entered.\n\u003C/p\u003E\n\u003Cp\u003E\nWhat i want is to use part.transform.Find() that can use full path to named transform but so far i had no luck on my demo part. I tried to recursively build a path from transform to its parents by concatenating their names and it didn\u0027t work.\n\u003C/p\u003E\n\u003Cp\u003E\nI did find an \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/73961-accessing-the-wheelcollider-of-a-rover-wheel/\u0022 rel=\u0022\u0022\u003Eolder post\u003C/a\u003E about pretty much the same problem and it did show some clear examples but it didn\u0027t work for me.\n\u003C/p\u003E\n\u003Cp\u003E\nHere is example code i tried :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E partTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFindModelTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022gate_shield_root\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\nstring transformPath \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E partTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ename\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ewhile\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EpartTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eparent \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E!=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\npartTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E partTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eparent\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\ntransformPath \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E partTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Ename \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022/\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E transformPath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022path = \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E transformPath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022find() = \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFind\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EtransformPath\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E!=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E null\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003EToString\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E());\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThis printed out\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#008000;\u0022\u003EHX1AerodynamicGateShell/model/0000_MyParts/HX_1_Aerodynamic_Gate_Shell/model(Clone)/base/gate_shield_root\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nand Find() failed on that one.\n\u003C/p\u003E\n\u003Cp\u003E\nIn Unity, my model hierarchy looks like this (names are as seen in hierarchy view) :\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#A52A2A;\u0022\u003EGameObject \u0026gt; base \u0026gt;\u003C/span\u003E\u003Cspan style=\u0022color:#A52A2A;\u0022\u003E gate_shield_root\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe only clue how a path should look like in the above mentioned post was this (extra spaces for clarity)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#008000;\u0022\u003Emodel / Your_Game_Object_In_Unity / Root_Object_In_Model / Sub_Object / ... / Sub_Object_WIth_Needed_Transform\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-27T23:31:18Z\u0022 title=\u002205/27/2016 11:31  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 27, 2016\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-05-23T18:14:36Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222597513\u0022 data-ipsquote-contentid=\u0022140364\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221464025989\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n23 minutes ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThis printed out\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003EHX1AerodynamicGateShell/model/0000_MyParts/HX_1_Aerodynamic_Gate_Shell/model(Clone)/base/gate_shield_root\u003C/span\u003E\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nand Find() failed on that one.\n\u003C/p\u003E\n\u003Cp\u003E\nIn Unity, my model hierarchy looks like this (names are as seen in hierarchy view) :\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#A52A2A;\u0022\u003EGameObject \u0026gt; base \u0026gt;\u003C/span\u003E\u003Cspan style=\u0022color:#A52A2A;\u0022\u003E gate_shield_root\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThe only clue how a path should look like in the above mentioned post was this (extra spaces for clarity)\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#008000;\u0022\u003Emodel / Your_Game_Object_In_Unity / Root_Object_In_Model / Sub_Object / ... / Sub_Object_WIth_Needed_Transform\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAre you sure that\u0027s what it printed? Does your part config use MODEL nodes? What does the hierarchy actually look like in game? That would tell us a lot. Here\u0027s a snippet you can edit if you don\u0027t already have something similar:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n    public static class GameObjectExtensions\n    {\n        public delegate void VisitorDelegate(GameObject go, int depth);\n\n\n        public static void TraverseHierarchy(this GameObject go, VisitorDelegate visitor)\n        {\n            if (go == null) throw new ArgumentNullException(\u0022go\u0022);\n            if (visitor == null) throw new ArgumentNullException(\u0022visitor\u0022);\n            TraverseHierarchy(go, visitor, 0);\n        }\n\n        private static void TraverseHierarchy(GameObject go, VisitorDelegate visitor, int depth)\n        {\n            visitor(go, depth);\n\n            foreach (Transform t in go.transform)\n                TraverseHierarchy(t.gameObject, visitor, depth \u002B 1);\n        }\n\n\n        public static void PrintComponents(this GameObject go, ILog baseLog)\n        {\n            if (go == null) throw new ArgumentNullException(\u0022go\u0022);\n            if (baseLog == null) throw new ArgumentNullException(\u0022baseLog\u0022);\n\n            go.TraverseHierarchy((gameObject, depth) =\u0026gt;\n            {\n                baseLog.Debug(\u0022{0}{1} has components:\u0022, depth \u0026gt; 0 ? new string(\u0027-\u0027, depth) \u002B \u0022\u0026gt;\u0022 : \u0022\u0022, gameObject.name);\n\n                var components = gameObject.GetComponents\u0026lt;Component\u0026gt;();\n                foreach (var c in components)\n                {\n\n                    baseLog.Debug(\u0022{0}: {1}\u0022, new string(\u0027.\u0027, depth \u002B 3) \u002B \u0022c\u0022,\n                        c == null ? \u0022[missing script]\u0022 : c.GetType().FullName);\n                }\n            });\n        }\n    }\u003C/pre\u003E\n\u003Cp\u003E\nEdit: Also Find() would fail in your case because you\u0027ve appended the name of the parent itself. If \u003Cspan style=\u0022color:#008000;\u0022\u003EHX1AerodynamicGateShell/model/0000_MyParts/HX_1_Aerodynamic_Gate_Shell/model(Clone)/base/gate_shield_root\u003C/span\u003E\u00A0 is what your code printed, your PartModule (which is attached to that top transform) should transform.Find(\u0022model/0000_MyParts/HX_1_Aerodynamic_Gate_Shell/model(Clone)/base/gate_shield_root\u0022)\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-23T18:18:19Z\u0022 title=\u002205/23/2016 06:18  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 23, 2016\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-23T19:00:24Z","Content":"\n\u003Cp\u003E\nHere are some results :\n\u003C/p\u003E\n\u003Cp\u003E\nI was able to get a transform from a path, but in my haste i deleted that code thinking i was on track so i don\u0027t remember how i did it. A leading slash character maybe...\n\u003C/p\u003E\n\u003Cp\u003E\nAs for part.cfg, i did reference my model as per guidelines. I used same part.cfg while modeling my part and writing code for testing, it did not give me any trouble before. I also tried to copy/paste the above \u0022GameObjectExtensions\u0022 code into my namespace but SharpDevelop complained that ILog could not be found (CS0246).\n\u003C/p\u003E\n\u003Cp\u003E\nHere are important lines from part.cfg :\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EPART\n {\n name = HX1AerodynamicGateShell\n module = Part\n author = fatcargo\n MODEL\n  {\n  model = 0000_MyParts/HX_1_Aerodynamic_Gate_Shell/model\n  }\n//stuff like attachment nodes, weight, cost etc...\nMODULE\n  {\n  name = ChainedAnimationsModule\n  // more stuff to be used later in plugin development\n  }\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nMore info to come tomorrow. Thanks for taking time to reply.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-23T19:01:48Z\u0022 title=\u002205/23/2016 07:01  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 23, 2016\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-05-23T21:49:53Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222597610\u0022 data-ipsquote-contentid=\u0022140364\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221464030024\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 minutes ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI also tried to copy/paste the above \u0022GameObjectExtensions\u0022 code into my namespace but SharpDevelop complained that ILog could not be found (CS0246).\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s part of my own library; you\u0027d need to replace them with your own log statements or Debug.Log.\n\u003C/p\u003E\n\u003Cp\u003E\nWhen GameDatabase loads the part models, their top level transform names get replaced with the URL of the model. That\u0027s why Find() is choking for you... Unity is treating the forward slashes like transform separators. You\u0027ll have to avoid using Unity\u0027s transform.Find for parts with MODEL nodes defined. Also apparently the model transform is no longer its own GameObject in parts without MODEL nodes; the top-level model transform name just gets overwritten with \u0022model\u0022.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is a bit of code I tinkered with. Your input here would be as though you were referring to the hierarchy inside Unity, so the url argument for your case would be \u0022GameObject/base/gate_shield_root\u0022. It was not tested for parts with multiple MODELs at all. There\u0027s a wrinkle there: because the game overwrites the original top level node name, you won\u0027t be able to distinguish between multiple MODELs if only searching for the top node. That might or might not be a problem. If it was serious enough, you could parse the original Mu to read it back again if you had to\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n        private static Transform FindModelTransformEx(Part part, string url)\n        {\n            if (!part.partInfo.partConfig.HasNode(\u0022MODEL\u0022))\n            {\n                return part.transform.Find(string.Join(\u0022/\u0022, new[] {\u0022model\u0022}.Union(url.Split(\u0027/\u0027).Skip(1)).ToArray()));\n            }\n\n            foreach (var modelConfig in part.partInfo.partConfig.GetNodes(\u0022MODEL\u0022))\n            {\n                var transformNames = new Queue\u0026lt;string\u0026gt;();\n                var modelUrl = modelConfig.GetValue(\u0022model\u0022);\n                var pathPortions = url.Split(\u0027/\u0027);\n \n                if (string.IsNullOrEmpty(modelUrl)) continue;\n\n                transformNames.Enqueue(\u0022model\u0022);\n\n                pathPortions[0] = modelUrl \u002B \u0022(Clone)\u0022;\n\n                foreach (var portion in pathPortions)\n                    transformNames.Enqueue(portion);\n               \n                var result = FindTransform(part.transform, transformNames);\n\n                if (result != null) return result;\n            }\n\n            return null;\n        }\n\n\n        private static Transform FindTransform(Transform search, Queue\u0026lt;string\u0026gt; transformNames)\n        {\n            if (!transformNames.Any())\n                return null;\n\n            var target = transformNames.Dequeue();\n\n            foreach (Transform child in search)\n                if (child.name == target)\n                {\n                    if (transformNames.Any())\n                        return FindTransform(child, transformNames);\n                    return child;\n                }\n\n            return null;\n        }\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-25T21:38:12Z","Content":"\n\u003Cp\u003E\nSorry for late response, i\u0027m busy doing other things, so not much time left for modding KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nThanks for the source, it gave me few ideas about custom TransformFind(). Use of Queue class was an eye-opener (i\u0027m new to C# myself), and i\u0027ll try to clone/mimick the above code and form my own function. For now, idea is to use Stack class (its reverse of Queue and will do nicely) to try and create a kind of recursive function without calling it from inside and avoid using system/program stack. A kind of recursion without recursive function \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E This is turning out to be also a programming class as well, not just plain API calls bunched together. Anyway, once i build a recursive loop (finally an adequate expression !) it will build an array of strings, each constructed of branch elements that will represent a branching path. Now all i have to do is match one of those paths to one provided in part.cfg. Since all paths should be unique, there ever is only one match possible (unless Unity allows for sibling-components with same name in hierarchy, which is a bad practice anyway). Building such an array of paths and not trying to match inside loop itself may be bruteforce, but it is simple.\n\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-27T23:22:20Z","Content":"\n\u003Cp\u003E\nATTENTION : I tried several times to correct a mistake with GetChild() in example sources, it should read GetChild(0). I tried to reload same link in different browser (thus avoiding cached version) and problem persisted.\n\u003C/p\u003E\n\u003Cp\u003E\nI have found it. My assumption that Transform.Find() didn\u0027t work in KSP was only partially correct. It does not work if one tries to use it straight from part.transform.Find(), instead it needs to go two \u0022levels\u0022 down in hierarchy where GameObject resides, namely :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rootTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetChild\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan\u003EGetChild\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan\u003ETransform\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E targetTransform \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rootTransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFind\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022base/gate_1_root/gate_1/gate_1_collider_1\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nTo elaborate on the above : the hierarchy visible in Unity3D editor begins after a second-order child transform.\n\u003C/p\u003E\n\u003Cp\u003E\nIn my designed part, hierachy looks like\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cspan style=\u0022color:#008000;\u0022\u003EGameObject \u0026gt; base \u0026gt; gate_1_root \u0026gt; gate_1 \u0026gt; gate_1_collider_1\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nHere is a breakdown :\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint prettyprinted\u0022\u003E\n\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022part transform : \u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// prints \u0022HX1AerodynamicGateShell (UnityEngine.Transform)\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// this is same as name field in PART{} node in part.cfg\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022part transform child\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetChild\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//prints \u0022model (UnityEngine.Transform)\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//hmm looks like variable \u0022model\u0022 field in MODEL{} node in part.cfg\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan\u003EDebug\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELog\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022part transform child of child\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u002B\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E part\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etransform\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EGetChild\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E).\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003EGetChild\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E));\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//prints \u00220000_MyParts/HX_1_Aerodynamic_Gate_Shell/model(Clone) (UnityEngine.Transform)\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E//this one seems to reflect a folder path under GameData directory with a cloned model thrown at end\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nSo, all that is required to use Transform.Find() (note the upper case) is to go two levels down and then you can input the usual \u0022parent/child/grandchild\u0022 format string.\n\u003C/p\u003E\n\u003Cp\u003E\nNOTE : i did manage to make a rather complicated (and now obsolete) function to augment the \u0022lacking\u0022 Find(), and the above should work for anyone.\n\u003C/p\u003E\n\u003Cp\u003E\nAnd to \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/75857-xevilreeperx/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275857\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75857-xevilreeperx/\u0022 rel=\u0022\u0022\u003E@xEvilReeperx\u003C/a\u003E in the above i referenced branch with GetChild(0), maybe if using multiple MODEL {} nodes there will be another branch with GetChild(1) ? If anyone has a need for this, it can be easily tested. If i ever need this, i\u0027ll try to see if it works.\n\u003C/p\u003E\n\u003Ch3\u003E\n\u00A0\n\u003C/h3\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-27T23:54:55Z\u0022 title=\u002205/27/2016 11:54  PM\u0022 data-short=\u00228 yr\u0022\u003EMay 27, 2016\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-05-28T00:48:24Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00222604532\u0022 data-ipsquote-contentid=\u0022140364\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221464391340\u0022 data-ipsquote-userid=\u002293302\u0022 data-ipsquote-username=\u0022fatcargo\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, fatcargo said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI have found it. My assumption that Transform.Find() didn\u0027t work in KSP was only partially correct. It does not work if one tries to use it straight from part.transform.Find(), instead it needs to go two \u0022levels\u0022 down in hierarchy where GameObject resides, namely :\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022http://forum.kerbalspaceprogram.com/index.php?/profile/75857-xevilreeperx/\u0026amp;do=hovercard\u0022 data-mentionid=\u002275857\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/75857-xevilreeperx/\u0022 rel=\u0022\u0022\u003E@xEvilReeperx\u003C/a\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI guess I didn\u0027t do a good job explaining. The problem is that parts defined using MODEL{} nodes have the GameDatabase model cloned. This is an issue for Transform.Find because the GameDatabase model top-level transform gets renamed to its url inside GameData, so \u0022GameObject \u0026gt; base \u0026gt; gate_1_root \u0026gt; gate_1 \u0026gt; gate_1_collider_1\u0022 is renamed to \u0022YourPluginFolder/muname \u0026gt; base \u0026gt; gate_1_root \u0026gt; gate_1 \u0026gt; gate_1_collider_1\u0022. The overwritten name now contains slashes which Transform.Find will incorrectly interpret. The two problems I have with your solution is that it will fail for parts that aren\u0027t defined using MODEL{} and the only way to specify the uppermost node of the model would for your code to check for a blank path (because that\u0027s what part.transform.GetChild(0).GetChild(n) will return)\n\u003C/p\u003E\n\u003Cp\u003E\nEdit: It might make it clearer just to show you the hierarchy dumps. Here\u0027s what my test part looks like in Unity:\u003Cbr\u003E\u003Cimg alt=\u00226f7349fb28.png\u0022 class=\u0022ipsImage\u0022 src=\u0022http://puu.sh/p7B8m/6f7349fb28.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s what it looks like loaded from the regular mesh = model.mu style inside a part ConfigNode:\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\ncheckpart has components:\u003Cbr\u003E\n...c: UnityEngine.Transform\u003Cbr\u003E\n...c: Part\u003Cbr\u003E\n[snip]\u003Cbr\u003E\n-\u0026gt;model has components: // formerly known as \u0022base\u0022\u003Cbr\u003E\n....c: UnityEngine.Transform\u003Cbr\u003E\n....c: UnityEngine.BoxCollider\u003Cbr\u003E\n....c: UnityEngine.MeshFilter\u003Cbr\u003E\n....c: UnityEngine.MeshRenderer\u003Cbr\u003E\n....c: HighlightingSystem.Highlighter\u003Cbr\u003E\n--\u0026gt;Stalk has components:\u003Cbr\u003E\n.....c: UnityEngine.Transform\u003Cbr\u003E\n.....c: UnityEngine.BoxCollider\u003Cbr\u003E\n.....c: UnityEngine.MeshFilter\u003Cbr\u003E\n.....c: UnityEngine.MeshRenderer\u003Cbr\u003E\n---\u0026gt;Hinge has components:\u003Cbr\u003E\n......c: UnityEngine.Transform\u003Cbr\u003E\n----\u0026gt;Capsule has components:\u003Cbr\u003E\n.......c: UnityEngine.Transform\u003Cbr\u003E\n.......c: UnityEngine.MeshFilter\u003Cbr\u003E\n.......c: UnityEngine.MeshRenderer\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nHere\u0027s the same part, loaded via MODEL{}\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cp\u003E\ncheckpart has components:\u003Cbr\u003E\n...c: UnityEngine.Transform\u003Cbr\u003E\n...c: Part\u003Cbr\u003E\n...c: ModuleCommand\u003Cbr\u003E\n...c: PartResource\u003Cbr\u003E\n...c: ModuleReactionWheel\u003Cbr\u003E\n...c: ModuleScienceExperiment\u003Cbr\u003E\n...c: ModuleScienceContainer\u003Cbr\u003E\n...c: PartResource\u003Cbr\u003E\n...c: FlagDecal\u003Cbr\u003E\n...c: ModuleConductionMultiplier\u003Cbr\u003E\n...c: ModuleTripLogger\u003Cbr\u003E\n-\u0026gt;model has components:\u003Cbr\u003E\n....c: UnityEngine.Transform\u003Cbr\u003E\n....c: HighlightingSystem.Highlighter\u003Cbr\u003E\n--\u0026gt;/telescope(Clone) has components: // URL of model, in this case it\u0027s telescope.mu in the root of GameData. The slashes confuse Transform.Find. Formerly known as \u0022base\u0022\u003Cbr\u003E\n.....c: UnityEngine.Transform\u003Cbr\u003E\n.....c: UnityEngine.BoxCollider\u003Cbr\u003E\n.....c: UnityEngine.MeshFilter\u003Cbr\u003E\n.....c: UnityEngine.MeshRenderer\u003Cbr\u003E\n---\u0026gt;Stalk has components:\u003Cbr\u003E\n......c: UnityEngine.Transform\u003Cbr\u003E\n......c: UnityEngine.BoxCollider\u003Cbr\u003E\n......c: UnityEngine.MeshFilter\u003Cbr\u003E\n......c: UnityEngine.MeshRenderer\u003Cbr\u003E\n----\u0026gt;Hinge has components:\u003Cbr\u003E\n.......c: UnityEngine.Transform\u003Cbr\u003E\n-----\u0026gt;Capsule has components:\u003Cbr\u003E\n........c: UnityEngine.Transform\u003Cbr\u003E\n........c: UnityEngine.MeshFilter\u003Cbr\u003E\n........c: UnityEngine.MeshRenderer\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nI do like the idea of ignoring the URL transform like you have though, it lets you clean up the earlier method a bit to this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nprivate static Transform FindModelTransformEx(Part part, string transformPath)\n{\n    if (string.IsNullOrEmpty(transformPath))\n        throw new ArgumentException(\u0022must specify a url\u0022, \u0022transformPath\u0022);\n\n    var pathParts = transformPath.Trim(\u0027/\u0027).Split(\u0027/\u0027);\n    var modelTransform = part.transform.Find(\u0022model\u0022);\n\n    if (pathParts.Length == 1)\n    {\n        if (modelTransform.childCount == 1)\n            return modelTransform.GetChild(0); // no way to tell for certain this transform name matches without parsing the mu again\n\n        throw new ArgumentException(\n            \u0022The part has multiple models and there isn\u0027t enough information to figure out which one \u0022 \u002B\n            transformPath \u002B \u0022 specifies\u0022);\n    }\n\n    var targetPath = string.Join(\u0022/\u0022, pathParts.Skip(1).ToArray());\n\n    if (!part.partInfo.partConfig.HasNode(\u0022MODEL\u0022))\n        return pathParts.Length == 1\n            ? modelTransform\n            : modelTransform.Find(targetPath);\n\n    foreach (Transform model in modelTransform)\n    {\n        var found = model.transform.Find(targetPath);\n\n        if (found) return found;\n    }\n\n    return null;\n}\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-28T02:35:34Z\u0022 title=\u002205/28/2016 02:35  AM\u0022 data-short=\u00228 yr\u0022\u003EMay 28, 2016\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2016-05-28T09:49:13Z","Content":"\n\u003Cp\u003E\nNot wanting to criticize, but KSP wiki part cfg \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#Model_Parameters\u0022 rel=\u0022external nofollow\u0022\u003EModel Parameters\u003C/a\u003E section states that \u0022mesh\u0022 should be avoided in favor of MODEL{}. I guess \u0022mesh\u0022 field is still valid because its not too hard for devs to maintain in new versions of KSP. I hope that if i choose to use the simpler Find() method in my plugin and force part creators to use single MODEL{}, nobody will hold it against me \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nPS: I was surprised how many parts still have \u0022mesh\u0022 in their cfgs.\n\u003C/p\u003E\n\u003Cp\u003E\nPPS : If there is a thread that collects useful code snippets, examples etc, FindModelTransformEx() should be included.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-05-28T09:55:28Z\u0022 title=\u002205/28/2016 09:55  AM\u0022 data-short=\u00228 yr\u0022\u003EMay 28, 2016\u003C/time\u003E by fatcargo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2016-05-28T15:52:35Z","Content":"\n\u003Cp\u003E\nMODEL{} has or used to have some scaling bugs so a lot of people avoided it. If those were fixed at some point and you don\u0027t want to support mesh then your solution is fine\n\u003C/p\u003E\n"}]}