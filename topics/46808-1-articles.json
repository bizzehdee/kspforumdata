{"TopicId":46808,"ForumId":15,"TopicTitle":"How to Scale on one dimension","CreatedByName":"rasheed","CreatedById":29903,"CreatedDateTime":"2013-09-28T22:12:31Z","PageNum":1,"Articles":[{"CreatedByName":"rasheed","CreatedById":29903,"CreatedDateTime":"2013-09-28T22:12:31Z","Content":"\n\u003Cp\u003EUsing the .cfg file.\u003C/p\u003E\u003Cp\u003ETrying to test something\u003C/p\u003E\n"},{"CreatedByName":"Jahulath","CreatedById":78050,"CreatedDateTime":"2013-09-28T23:06:39Z","Content":"\n\u003Cp\u003EYou do it like this:\u003C/p\u003E\u003Cp\u003E// --- asset parameters ---\u003C/p\u003E\u003Cp\u003EMODEL\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E model = JonzCo/JonzCo_Fuel/jzfueltank\u003C/p\u003E\u003Cp\u003E position = 0.0, 0.0, 0.0\u003C/p\u003E\u003Cp\u003E scale = 0.6, 0.6, 0.6\u003C/p\u003E\u003Cp\u003E rotation = 0, 0, 0\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EI haven\u0027t played with position or rotation but I can tell you that while scale X, Y, Z will work and will work in 1 dimension, you will need to play them about a bit because it isn\u0027t 100% one dimensional, more like 80/20...\u003C/p\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2013-09-29T02:57:28Z","Content":"\n\u003Cp\u003EIt\u0027s not so simple as that unfortunately.\u003C/p\u003E\u003Cp\u003EThere is a glitch that exists between MODEL{scale}, PART{scale}, and PART{rescaleFactor}\u003C/p\u003E\u003Cp\u003Eassuming:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPART{\u003Cbr\u003E  MODEL{\u003Cbr\u003E    scale = X[sub]1[/sub], X[sub]2[/sub], X[sub]3[/sub]\u003Cbr\u003E  }\u003Cbr\u003E  scale = Y\u003Cbr\u003E  rescaleFactor = Z\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EY is always the same value.\u003C/p\u003E\u003Cp\u003Eand F is the actual scale that you end up with (F\u003Csub\u003En\u003C/sub\u003E where necessary)\u003C/p\u003E\u003Cp\u003EF=Z if X=1/Z\u003C/p\u003E\u003Cp\u003EThis is simple to follow but doesn\u0027t allow for X\u003Csub\u003E1\u003C/sub\u003E!=X\u003Csub\u003E2\u003C/sub\u003E!=X\u003Csub\u003E3\u003C/sub\u003E so it can only be used for uniform scaling\u003C/p\u003E\u003Cp\u003EAlternatively, if Z=1 then X\u003Csub\u003En\u003C/sub\u003E=\u00C3\u00A2\u00CB\u2020\u00C5\u00A1F\u003Csub\u003En\u003C/sub\u003E, or X=1 then Z=\u00C3\u00A2\u00CB\u2020\u00C5\u00A1F, but there\u0027s no advantage to the X=1 method\u003C/p\u003E\u003Cp\u003ESo say you want a part to be \u003Cstrong\u003EF\u003C/strong\u003E=2, then you\u0027d want \u003Cstrong\u003EX\u003C/strong\u003E=0.5 and \u003Cstrong\u003EZ\u003C/strong\u003E=2, keeping it nice and simple \u003C/p\u003E\u003Cp\u003EBut if you want to make a part that is twice as long but the normal width (\u003Cstrong\u003EF\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E1\u003C/strong\u003E\u003C/sub\u003E=1, \u003Cstrong\u003EF\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E2\u003C/strong\u003E\u003C/sub\u003E=2, \u003Cstrong\u003EF\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E3\u003C/strong\u003E\u003C/sub\u003E=1), then you want \u003Cstrong\u003EZ\u003C/strong\u003E=1, \u003Cstrong\u003EX\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E1\u003C/strong\u003E\u003C/sub\u003E=1, \u003Cstrong\u003EX\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E2\u003C/strong\u003E\u003C/sub\u003E=1.4142135623730950488016887242097, \u003Cstrong\u003EX\u003C/strong\u003E\u003Csub\u003E\u003Cstrong\u003E3\u003C/strong\u003E\u003C/sub\u003E=1\u003C/p\u003E\u003Cp\u003Eputting that back into the code\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPART{\u003Cbr\u003E  MODEL{\u003Cbr\u003E    scale = 1, 1.4142135623730950488016887242097, 1\u003Cbr\u003E  }\u003Cbr\u003E  scale = 1\u003Cbr\u003E  rescaleFactor = 1\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EObviously this is a bit problematic because as far as I can tell square root 2 goes on forever so exact sizing is effectively impossible, but you can get pretty close.\u003C/p\u003E\n"},{"CreatedByName":"WinkAllKerb\u0026#039;\u0026#039;","CreatedById":78047,"CreatedDateTime":"2013-09-29T03:05:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Greys\u0022 data-cite=\u0022Greys\u0022\u003E\u003Cdiv\u003EIt\u0027s not so simple as that unfortunately.\u003Cp\u003EThere is a glitch that exists between MODEL{scale}, PART{scale}, and PART{rescaleFactor}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt all depend both from \u00223dmodel tool\u0022 unit \u003Cspan style=\u0022text-decoration:line-through;\u0022\u003E\u0026amp; scaling\u003C/span\u003E \u002B unity scaling before the .mu you want to work with have been exported. Depending how the part has been initiailly made regarding this you can quickly get the multiplier/divider for {model ... scale = x,y,z ... } the way you want\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-29T03:17:24Z\u0022 title=\u002209/29/2013 03:17  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 29, 2013\u003C/time\u003E by WinkAllKerb\u0026#39;\u0026#39;\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Greys","CreatedById":57109,"CreatedDateTime":"2013-09-29T03:13:02Z","Content":"\n\u003Cp\u003EThe 3D model\u0027s scaling is entirely unimportant as it is handled by PART{scale} and will not vary, this is entirely an interaction between PART{MODEL{scale}} and PART{rescaleFactor}, where PART{scale} serves to convert the model\u0027s native unit into meters.\u003C/p\u003E\n"}]}