{"TopicId":108898,"ForumId":36,"TopicTitle":"Spawning a mesh (part?)","CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-05-12T13:21:41Z","PageNum":1,"Articles":[{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-05-12T13:21:41Z","Content":"\n\u003Cp\u003EGreetings, everyone.\u003C/p\u003E\u003Cp\u003ESince I am new to modmaking, I want to sort out 2 questions about whether or not is it possible.\u003C/p\u003E\u003Cp\u003EBasically, I want something \u0027to be found\u0027 on the surface of some (random) planet. That \u0027something\u0027 is a Unity mesh that has to be spawned at some given coordinates. Is it possible? Ideally, this has to be something sort of detectable anomaly on the surface.\u003C/p\u003E\u003Cp\u003EThe second question is that I want to generate a texture for that mesh \u0027on the fly\u0027, i.e. procedurally. Will that be possible?\u003C/p\u003E\n"},{"CreatedByName":"LORDPrometheus","CreatedById":61414,"CreatedDateTime":"2015-05-12T13:27:10Z","Content":"\n\u003Cp\u003EThe mod Kerbal kostructs is a good backbone for objects on planets and as far as I know the best way to implement them. As for procedural textures I\u0027m not sure if the game is set up to allow that but others who know more than me would be more helpful\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-05-12T14:11:01Z","Content":"\n\u003Cp\u003EProcedural textures are possible, of course. Just depends how much time and work you want to put into coding it. You\u0027d have to dive into the Unity API dealing with the Texture2D stuff - I\u0027m afraid I can\u0027t help you there.\u003C/p\u003E\u003Cp\u003ESpawning mesh is not hard. xEvilReeperx posted this little partmodule as a proof of concept a while back, and I\u0027m sure won\u0027t mind if I share it again:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eclass GoldenShower : MonoBehaviour\u003Cbr\u003E    {\u003Cbr\u003E        private Rect _windowRect = new Rect(400, 400, 128f, 1f);\u003Cbr\u003E        private GameObject _coinPrefab;\u003Cbr\u003E        private const int ShowerCoinCount = 800;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        void Start()\u003Cbr\u003E        {\u003Cbr\u003E            _coinPrefab = GameObject.CreatePrimitive(PrimitiveType.Sphere); // note: comes with sphere collider\u003Cbr\u003E            _coinPrefab.transform.localScale = new Vector3(0.04f, 0.01f, 0.04f);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            // KSP/Diffuse apparently needs a texture, can\u0027t just set a color like regular Diffuse shader\u003Cbr\u003E            var goldTexture = new Texture2D(1, 1);\u003Cbr\u003E            goldTexture.SetPixels32(new Color32[] { XKCDColors.GoldenYellow });\u003Cbr\u003E            goldTexture.Apply();\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            _coinPrefab.renderer.material = new Material(Shader.Find(\u0022KSP/Diffuse\u0022)) { mainTexture = goldTexture };\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            var rb = _coinPrefab.AddComponent\u0026lt;Rigidbody\u0026gt;();\u003Cbr\u003E            rb.mass = 0.01f;\u003Cbr\u003E            rb.angularDrag = 5f;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            _coinPrefab.collider.material = new PhysicMaterial\u003Cbr\u003E            {\u003Cbr\u003E                frictionCombine = PhysicMaterialCombine.Maximum,\u003Cbr\u003E                bounceCombine = PhysicMaterialCombine.Minimum,\u003Cbr\u003E                bounciness = 0.45f,\u003Cbr\u003E                dynamicFriction = 0.05f,\u003Cbr\u003E                staticFriction = 0.25f\u003Cbr\u003E            };\u003Cbr\u003E            _coinPrefab.SetActive(false);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        void OnGUI()\u003Cbr\u003E        {\u003Cbr\u003E            _windowRect = KSPUtil.ClampRectToScreen(GUILayout.Window(123, _windowRect, DrawWindow, \u0022Menu\u0022));\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        private void DrawWindow(int winid)\u003Cbr\u003E        {\u003Cbr\u003E            GUILayout.BeginVertical();\u003Cbr\u003E            //GUILayout.Label(string.Format(\u0022Gravity: {0}\u0022));\u003Cbr\u003E            GUILayout.Label(string.Format(\u0022Accel: {0}\u0022, Physics.gravity.magnitude));\u003Cbr\u003E            if (GUILayout.Button(\u0022Increase monetary wealth?\u0022))\u003Cbr\u003E                StartCoroutine(CoinShower());\u003Cbr\u003E            GUILayout.EndVertical();\u003Cbr\u003E            GUI.DragWindow();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        private float Random360()\u003Cbr\u003E        {\u003Cbr\u003E            return UnityEngine.Random.Range(0f, 360f);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        private System.Collections.IEnumerator CoinShower()\u003Cbr\u003E        {\u003Cbr\u003E            print(\u0022Let there be wealth!\u0022);\u003Cbr\u003E            var vessel = FlightGlobals.ActiveVessel;\u003Cbr\u003E            float start = Time.realtimeSinceStartup;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E            for (int i = 0; i \u0026lt; ShowerCoinCount; \u002B\u002Bi)\u003Cbr\u003E            {\u003Cbr\u003E                var spawn = vessel.GetWorldPos3D() \u002B FlightGlobals.upAxis * 20f;\u003Cbr\u003E                var coin = (GameObject)Instantiate(_coinPrefab, spawn \u002B UnityEngine.Random.insideUnitSphere * 2f,\u003Cbr\u003E                    Quaternion.Euler(new Vector3(Random360(),\u003Cbr\u003E                                                 Random360(),\u003Cbr\u003E                                                 Random360())));\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                coin.rigidbody.velocity = vessel.rigidbody.velocity; // else if in orbit, coins will miss\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                // impart a bit of force to get it spinning\u003Cbr\u003E                coin.rigidbody.AddTorque(new Vector3(Random360() * 0.1f, Random360() * 0.1f, Random360() * 0.1f), ForceMode.Impulse);\u003Cbr\u003E                coin.SetActive(true);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E                // we might need to spawn more than [fps] coins per second if we\u0027re to reach ShowerCoinCount in\u003Cbr\u003E                // two seconds\u003Cbr\u003E                // so delay here if we\u0027re ahead of schedule, otherwise continue dumping coins\u003Cbr\u003E                while ((Time.realtimeSinceStartup - start) / 2f \u0026lt;= (float)i / ShowerCoinCount)\u003Cbr\u003E                    yield return 0;\u003Cbr\u003E            }\u003Cbr\u003E            print(\u0022Wealth complete\u0022);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ETo spawn mesh from a .mu file, you can use:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EGameDatabase.Instance.GetModel(KerbalFoundries/Blade/Rock); //ommit the .mu extenstion from the end of the file name\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EYou\u0027ll have to add colliders, rigidbody etc when you spawn the GO too, and it will NOT be persistent as it is.\u003C/p\u003E\u003Cp\u003EIf you want to see how to spawn parts (which will be persistent without extra work), I\u0027d suggest looking up the source to Extra-Planetary Launchpads.\u003C/p\u003E\u003Cp\u003EHTH.\u003C/p\u003E\n"}]}