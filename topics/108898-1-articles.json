{"TopicId":108898,"ForumId":36,"TopicTitle":"Spawning a mesh (part?)","CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-05-12T13:21:41Z","PageNum":1,"Articles":[{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-05-12T13:21:41Z","Content":"Greetings, everyone.\n\nSince I am new to modmaking, I want to sort out 2 questions about whether or not is it possible.\n\nBasically, I want something \u0027to be found\u0027 on the surface of some (random) planet. That \u0027something\u0027 is a Unity mesh that has to be spawned at some given coordinates. Is it possible? Ideally, this has to be something sort of detectable anomaly on the surface.\n\nThe second question is that I want to generate a texture for that mesh \u0027on the fly\u0027, i.e. procedurally. Will that be possible?"},{"CreatedByName":"LORDPrometheus","CreatedById":61414,"CreatedDateTime":"2015-05-12T13:27:10Z","Content":"The mod Kerbal kostructs is a good backbone for objects on planets and as far as I know the best way to implement them. As for procedural textures I\u0027m not sure if the game is set up to allow that but others who know more than me would be more helpful"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2015-05-12T14:11:01Z","Content":"Procedural textures are possible, of course. Just depends how much time and work you want to put into coding it. You\u0027d have to dive into the Unity API dealing with the Texture2D stuff - I\u0027m afraid I can\u0027t help you there.\n\nSpawning mesh is not hard. xEvilReeperx posted this little partmodule as a proof of concept a while back, and I\u0027m sure won\u0027t mind if I share it again:\n\n    class GoldenShower : MonoBehaviour    {        private Rect _windowRect = new Rect(400, 400, 128f, 1f);        private GameObject _coinPrefab;        private const int ShowerCoinCount = 800;        void Start()        {            _coinPrefab = GameObject.CreatePrimitive(PrimitiveType.Sphere); // note: comes with sphere collider            _coinPrefab.transform.localScale = new Vector3(0.04f, 0.01f, 0.04f);            // KSP/Diffuse apparently needs a texture, can\u0027t just set a color like regular Diffuse shader            var goldTexture = new Texture2D(1, 1);            goldTexture.SetPixels32(new Color32[] { XKCDColors.GoldenYellow });            goldTexture.Apply();            _coinPrefab.renderer.material = new Material(Shader.Find(\u0022KSP/Diffuse\u0022)) { mainTexture = goldTexture };            var rb = _coinPrefab.AddComponent();            rb.mass = 0.01f;            rb.angularDrag = 5f;            _coinPrefab.collider.material = new PhysicMaterial            {                frictionCombine = PhysicMaterialCombine.Maximum,                bounceCombine = PhysicMaterialCombine.Minimum,                bounciness = 0.45f,                dynamicFriction = 0.05f,                staticFriction = 0.25f            };            _coinPrefab.SetActive(false);        }        void OnGUI()        {            _windowRect = KSPUtil.ClampRectToScreen(GUILayout.Window(123, _windowRect, DrawWindow, \u0022Menu\u0022));        }        private void DrawWindow(int winid)        {            GUILayout.BeginVertical();            //GUILayout.Label(string.Format(\u0022Gravity: {0}\u0022));            GUILayout.Label(string.Format(\u0022Accel: {0}\u0022, Physics.gravity.magnitude));            if (GUILayout.Button(\u0022Increase monetary wealth?\u0022))                StartCoroutine(CoinShower());            GUILayout.EndVertical();            GUI.DragWindow();        }        private float Random360()        {            return UnityEngine.Random.Range(0f, 360f);        }        private System.Collections.IEnumerator CoinShower()        {            print(\u0022Let there be wealth!\u0022);            var vessel = FlightGlobals.ActiveVessel;            float start = Time.realtimeSinceStartup;            for (int i = 0; i \u003C ShowerCoinCount; \u002B\u002Bi)            {                var spawn = vessel.GetWorldPos3D() \u002B FlightGlobals.upAxis * 20f;                var coin = (GameObject)Instantiate(_coinPrefab, spawn \u002B UnityEngine.Random.insideUnitSphere * 2f,                    Quaternion.Euler(new Vector3(Random360(),                                                 Random360(),                                                 Random360())));                coin.rigidbody.velocity = vessel.rigidbody.velocity; // else if in orbit, coins will miss                // impart a bit of force to get it spinning                coin.rigidbody.AddTorque(new Vector3(Random360() * 0.1f, Random360() * 0.1f, Random360() * 0.1f), ForceMode.Impulse);                coin.SetActive(true);                // we might need to spawn more than [fps] coins per second if we\u0027re to reach ShowerCoinCount in                // two seconds                // so delay here if we\u0027re ahead of schedule, otherwise continue dumping coins                while ((Time.realtimeSinceStartup - start) / 2f \u003C= (float)i / ShowerCoinCount)                    yield return 0;            }            print(\u0022Wealth complete\u0022);        }    }\n\nTo spawn mesh from a .mu file, you can use:\n\n    GameDatabase.Instance.GetModel(KerbalFoundries/Blade/Rock); //ommit the .mu extenstion from the end of the file name\n\nYou\u0027ll have to add colliders, rigidbody etc when you spawn the GO too, and it will NOT be persistent as it is.\n\nIf you want to see how to spawn parts (which will be persistent without extra work), I\u0027d suggest looking up the source to Extra-Planetary Launchpads.\n\nHTH."}]}