{"TopicId":123494,"ForumId":29,"TopicTitle":"Plugin for \u0026quot;all parts\u0026quot; on ship?","CreatedByName":"Aelixander","CreatedById":150679,"CreatedDateTime":"2015-10-21T15:43:41Z","PageNum":1,"Articles":[{"CreatedByName":"Aelixander","CreatedById":150679,"CreatedDateTime":"2015-10-21T15:43:41Z","Content":"\n\u003Cp\u003EHey there.\u003C/p\u003E\u003Cp\u003EI am looking to add a plug in that adds a resource tank to all parts on the ship.\u003C/p\u003E\u003Cp\u003EWith a capacity equal to their mass. \u003C/p\u003E\u003Cp\u003EIdeally, these would be invisible except on a few parts that I build.\u003C/p\u003E\u003Cp\u003EWhy?\u003C/p\u003E\u003Cp\u003EI am working on an anti-mass set of parts, and while they work well on their own - it only works for the parts that have access to the negative-mass resource. This is why I need the plug-in to add it to all the parts on my ship.\u003C/p\u003E\u003Cp\u003EIdeally, not every part would show this tank - and would simply work when used. \u003C/p\u003E\u003Cp\u003EThanks,\u003C/p\u003E\u003Cp\u003E- A\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2015-10-25T00:07:21Z","Content":"\n\u003Cp\u003EIf I understand you correctly you want a plugin not associated with any one part - if this is the case there\u0027s a (attribute? - sorry new to C#) like below\u003C/p\u003E\u003Cp\u003E [KSPAddon(KSPAddon.Startup.Instantly, true)]\u003C/p\u003E\u003Cp\u003E public class ModuleTestAddon : MonoBehaviour\u003C/p\u003E\u003Cp\u003E The \u0022Startup\u0022 controls where/when your plugin runs\u003C/p\u003E\u003Cp\u003EEdit: On re reading your post I think I may have been answering a different question - how to make a partless plugin. If you have a plugin module on a ship it can iterate over the parts. The question would be where to put it so that it would load everything up when the ship became active - OnStart is one place you might check. You\u0027d also need to cover cases where a part was added - the GameEvents callbacks would be my guess for that.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-25T00:27:37Z\u0022 title=\u002210/25/2015 12:27  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 25, 2015\u003C/time\u003E by wasml\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Aelixander","CreatedById":150679,"CreatedDateTime":"2015-10-25T05:53:32Z","Content":"\n\u003Cp\u003EI want to add a resourse tank to every piece of my active ship. \u003C/p\u003E\u003Cp\u003EIts capacity is equal to its mass.\u003C/p\u003E\n"},{"CreatedByName":"wasml","CreatedById":120438,"CreatedDateTime":"2015-10-27T02:05:46Z","Content":"\n\u003Cp\u003EIf this would only be for some ships and not others my though would be to have a part you add to the ships you want to change. The part could be very small if needed. This part could then hook OnStart and add the resource by iterating over the ship when it\u0027s loaded.\u003C/p\u003E\u003Cp\u003EBTW recently found an example to add a resource - if you haven\u0027t found it yet:\u003C/p\u003E\u003Cp\u003Epart.Resources.list.Clear(); // Only if you want to get rid of current resources\u003C/p\u003E\u003Cp\u003E ConfigNode newConfigNode = new ConfigNode(\u0022RESOURCE\u0022);\u003C/p\u003E\u003Cp\u003E newConfigNode.AddValue(\u0022name\u0022, \u0022ResourceName\u0022); // Needs to be a defined resource name\u003C/p\u003E\u003Cp\u003E newConfigNode.AddValue(\u0022maxAmount\u0022, \u00223200\u0022);\u003C/p\u003E\u003Cp\u003E newConfigNode.AddValue(\u0022amount\u0022, 0.0f);\u003C/p\u003E\u003Cp\u003E envelopeResource = part.AddResource(newConfigNode);\u003C/p\u003E\u003Cp\u003EIf your adding this to every ship then you might look into using a partless plugin and watching for ships loading - not sure what the options are as I haven\u0027t tried this before.\u003C/p\u003E\u003Cp\u003EPS: You might want to look into OnStart before using - I think this is the correct place to put this type of code but no guarantees.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-27T02:10:49Z\u0022 title=\u002210/27/2015 02:10  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 27, 2015\u003C/time\u003E by wasml\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-10-27T11:49:34Z","Content":"\n\u003Cp\u003EThe resource adding I don\u0027t know much about, but one option for adding this to the parts of a ship dynamically, and only when the ship is in flight (thus, not the parts in the editor, just the flight scene) would be to create a module that inherits \u0022VesselModule\u0022 instead of \u0022PartModule\u0022 and then iterate through all of the parts on the vessel through something through the interal part list \u0022Vessel.Parts\u0022 to add a resource to all those parts.\u003C/p\u003E\u003Cp\u003EAnother option might be to create two \u0022PartModule\u0022 modules, one which would contain the code necessary to add the other one to every part on the ship. You would use MM to add the first module to a part that you tend to use on every ship (I would have it add the module to all parts that have a command/probe ability). You then set up the first module to, upon flight scene initialization, add a component to every part on the ship (the component is the other module which would then add the resource and self-remove itself) which does not already contain the resource required.\u003C/p\u003E\u003Cp\u003EParameters such as ship mass, and the mass of currently-loaded resources and such \u003Cem\u003Eshould\u003C/em\u003E be easy enough to find. I believe the part\u0027s mass is actually something the \u0022Part\u0022 class keeps track of. Resource information would then need to be looked up via something like \u0022GetComponents\u0026lt;Resource\u0026gt;()\u0022 (no guarantees that this little bit of code is even valid, you\u0027ll have to do some research) and taking stock of the total capacity vs. the currently filled amount. This would allow you to find the mass of the part itself minus the added mass of the resources currently present.\u003C/p\u003E\u003Cp\u003EIf I was in my right mind (dealing with a head cold, and it\u0027s 4:00 or so in the morning) I would quickly paste in some working code to get you started, but I\u0027m not nearly awake enough to even start coding right now. Just thinking out loud.\u003C/p\u003E\u003Cp\u003EWhat\u0027s the end result here? Are you working on some new and amazing mod that no one knows they need yet, but will want it when they know about it?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-10-27T11:55:51Z\u0022 title=\u002210/27/2015 11:55  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 27, 2015\u003C/time\u003E by Gaalidas\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Aelixander","CreatedById":150679,"CreatedDateTime":"2015-10-27T13:14:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaalidas\u0022 data-cite=\u0022Gaalidas\u0022\u003E\u003Cdiv\u003EWhat\u0027s the end result here? Are you working on some new and amazing mod that no one knows they need yet, but will want it when they know about it?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am making a set of anti-mass parts. \u003C/p\u003E\u003Cp\u003EAnd so far they work great!.... except it only reduces the mass of parts I can get my anti-mass resource into.\u003C/p\u003E\u003Cp\u003EWhich is why I want to just put that resource (starting at 0, tweak = false) on every part. \u003C/p\u003E\u003Cp\u003EAnd why the capacity of the resource needs to be equal to the mass of the part.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/135861-Making-Anti-Mass-Parts-%28help%29?p=2262166\u0026amp;viewfull=1#post2262166\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/135861-Making-Anti-Mass-Parts-%28help%29?p=2262166\u0026amp;viewfull=1#post2262166\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-10-28T02:28:20Z","Content":"\n\u003Cp\u003EWell, it shouldn\u0027t be too difficult really. As long as it doesn\u0027t mess up the module index of any parts the user is using in a flight, it should be pretty smooth simply adding the resource to all the parts at startup using MM. However, if you want a more reliable way of detecting the mass of a part, as it is when the flight is happening and possibly including updates to said mass due to fuel usage and whatnot, then using a part module to track the part mass would be a better option, and if you want to avoid adding that module to all parts using MM then you\u0027ll want to start off with a vessel module that adds the part module as a component to all the parts on a vessel when in flight. The component part module would then handle the adding of the resource and maintaining the resource amount which is then evaluated by whatever module you have for making the anti-mass stuff work. Sounds funky enough to be awesome, so I can\u0027t wait to see the results. If i feel industrious tomorrow, perhaps I\u0027ll write out some preliminary code as an example of what I\u0027m talking about, but I can\u0027t make any promises yet.\u003C/p\u003E\n"},{"CreatedByName":"Gaalidas","CreatedById":111158,"CreatedDateTime":"2015-10-28T18:35:06Z","Content":"\n\u003Cp\u003EOkay, here is a very basic, and \u003Cstrong\u003E\u003Cem\u003Euntested\u003C/em\u003E\u003C/strong\u003E example for you.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E[COLOR=#008000][B]using[/B][/COLOR] System;\u003Cbr\u003E[COLOR=#008000][B]using[/B][/COLOR] System.Linq;\u003Cbr\u003E[COLOR=#008000][B]using[/B][/COLOR] UnityEngine;\u003Cbr\u003E\u003Cbr\u003E[COLOR=#008000][B]namespace[/B][/COLOR] your_name_space_here\u003Cbr\u003E{\u003Cbr\u003E    [COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]summary[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E    [COLOR=#008000][COLOR=#808080]///[/COLOR] Creates a new module that will attach itself to any vessels that are launched, or created via detatchment or undocking.[/COLOR]\u003Cbr\u003E    [COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]/[/B][B]summary[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E    [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#ff0000]class[/COLOR] [COLOR=#004085]TestModule[/COLOR] : [COLOR=#004085]VesselModule[/COLOR]\u003Cbr\u003E    {\u003Cbr\u003E        [COLOR=#008000][COLOR=#808080]///[/COLOR] [COLOR=#808080]\u0026lt;[B]summary[/B]\u0026gt;[/COLOR]The current vessel this module is attached to.[COLOR=#808080]\u0026lt;[B]/[/B][B]summary[/B]\u0026gt;[/COLOR][/COLOR]\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#004085]Vessel[/COLOR] [I]thisVessel[/I];\u003Cbr\u003E\u003Cbr\u003E        [COLOR=#0000ff][B]public[/B][/COLOR] [COLOR=#ff0000]void[/COLOR] [COLOR=#191970][B]OnStart[/B][/COLOR]()\u003Cbr\u003E        {\u003Cbr\u003E            [I]thisVessel[/I] = [COLOR=#191970][B]GetComponent[/B][/COLOR]\u0026lt;[COLOR=#004085]Vessel[/COLOR]\u0026gt;();\u003Cbr\u003E            [COLOR=#008000]// The parts of the vessel are contained in a list within KSP that you can reference via \u0022thisVessel.Parts\u0022[/COLOR]\u003Cbr\u003E            [COLOR=#008000]//  which takes the form of a \u0022List\u0026lt;Part\u0026gt;\u0022 data type.[/COLOR]\u003Cbr\u003E\u003Cbr\u003E            [COLOR=#0000ff][B]foreach[/B][/COLOR] ([COLOR=#004085]Part[/COLOR] part [COLOR=#0000ff][B]in[/B][/COLOR] [I]thisVessel[/I].Parts)\u003Cbr\u003E            {\u003Cbr\u003E                [COLOR=#008000]// I have put a few useful items into their proper data types below for use in a formatted string.[/COLOR]\u003Cbr\u003E\u003Cbr\u003E                [COLOR=#ff0000]string[/COLOR] partname = part.name;\u003Cbr\u003E                [COLOR=#ff0000][B]float[/B][/COLOR] partdrymass = part.[I]mass[/I];\u003Cbr\u003E                [COLOR=#ff0000][B]float[/B][/COLOR] partwetmass = part.[COLOR=#191970][B]GetResourceMass[/B][/COLOR]();\u003Cbr\u003E                [COLOR=#ff0000][B]float[/B][/COLOR] parttotalmass = partdrymass \u002B partwetmass;\u003Cbr\u003E\u003Cbr\u003E                [COLOR=#008000]// Here I am searching for every part in the list and spewing out the part mass to the log.[/COLOR]\u003Cbr\u003E                [COLOR=#008000]//  I do not recommend running this in the game itself, but it should work if you choose to do so.[/COLOR]\u003Cbr\u003E                [COLOR=#004085]Debug[/COLOR].[COLOR=#191970][B]Log[/B][/COLOR]([COLOR=#ff0000]string[/COLOR].[COLOR=#191970][B]Format[/B][/COLOR]([COLOR=#0000ff]\u0022{0} has a dry mass of {1} and a resource-mass of {2} for a total mass of {3}\u0022[/COLOR], partname, partdrymass, partwetmass, parttotalmass));\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHope it helps. I\u0027m pressed for time right now, but feel free to inquire further if you need help. I\u0027m not the greatest of the modders here, but I can, at least, point you in a good direction.\u003C/p\u003E\n"}]}