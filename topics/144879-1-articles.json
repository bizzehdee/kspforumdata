{"TopicId":144879,"ForumId":35,"TopicTitle":"AllPartControl for kOS","CreatedByName":"LtMtz","CreatedById":166455,"CreatedDateTime":"2016-07-30T09:55:21Z","PageNum":1,"Articles":[{"CreatedByName":"LtMtz","CreatedById":166455,"CreatedDateTime":"2016-07-30T09:55:21Z","Content":"\n\u003Cp\u003E\nHello Kerbals,\n\u003C/p\u003E\n\u003Cp\u003E\nas i tried to mod KSP to a kind of nomap/iva only/no gui mode for extremer experience i faced the problem that you cant control most of the parts because the context menues are also hidden. \u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022;)\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\nkOS is a realy nice tool for more flexibility and immersion and can help in this case. It can be alot stuff to write into the terminal to execute a function so i\u0027ve written a script that can control all parts events/actions and fields by selecting them in a menu. You can access a config option where you can set up to 8 Tags directly from the menu without restarting the tool. Additionally you can find a basic userinput function used for setting fields. The maximum line number for items to display is 8 because i\u0027ve written it for RPM dimensions. If there are more items then the list is simply truncated.\n\u003C/p\u003E\n\u003Cp\u003E\nDownload:\u003Cbr\u003E\u003Ca href=\u0022https://www78.zippyshare.com/v/Y8aKKGkh/file.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www78.zippyshare.com/v/Y8aKKGkh/file.html\u003C/a\u003E\u003Cbr\u003E\n(put the 3 files on your volume 0 and you are ready to go)\n\u003C/p\u003E\n\u003Cp\u003E\nCredits:\u003Cbr\u003E\nThe logic of the menu navigation has its origin in the ancient space comuter:\n\u003C/p\u003E\n\u003Ciframe data-embedcontent=\u0022\u0022 frameborder=\u00220\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?/topic/44621-space-computer-brought-to-you-by-kos-and-hopefully-many-nerds/\u0026amp;do=embed\u0022\u003E\u003C/iframe\u003E\n\u003Cp\u003E\nMaybe someone can use this or it will assist someone to finish his own ideas. As i got so much from the community already im glad i can give something back.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nBest regards,\n\u003C/p\u003E\n\u003Cp\u003E\nLtMtz\n\u003C/p\u003E\n"},{"CreatedByName":"TheCardinal","CreatedById":22874,"CreatedDateTime":"2016-08-24T06:06:07Z","Content":"\n\u003Cp\u003E\nCould you post a screenprint, please. It looks like something i might be able to use,\n\u003C/p\u003E\n"},{"CreatedByName":"Stone Blue","CreatedById":77721,"CreatedDateTime":"2016-08-24T11:37:19Z","Content":"\n\u003Cp\u003E\nThis sounds very kewl and useful... \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003Cbr\u003E\u003Cbr\u003E\nHowever, your download link is kind of sketchy... I\u0027m not familiar with zippyshare, but it says the filesize is 0MB ??... Also, you say to install the files to your volume 0? Does that mean your system drive?... Why would that be a requirement for a KSP addon?.. Is this an executable file?\u003Cbr\u003E\u003Cbr\u003E\nPerhaps hosting on SpaceDock or Curse might be an option?... Also, if this is not something that goes in the GameData folder, like standard KSP mods, then maybe more detail for installation instructions might be good..\u003Cbr\u003E\u003Cbr\u003E\nThanx for your time making this though... \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E It sounds like it must have been quite a bit or work...\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-08-24T11:39:06Z\u0022 title=\u002208/24/2016 11:39  AM\u0022 data-short=\u00227 yr\u0022\u003EAugust 24, 2016\u003C/time\u003E by Stone Blue\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LtMtz","CreatedById":166455,"CreatedDateTime":"2016-10-30T13:02:14Z","Content":"\n\u003Cp\u003E\nHi,\n\u003C/p\u003E\n\u003Cp\u003E\nthe script is not working 100% correctly but i\u0027ll post it again.\n\u003C/p\u003E\n\u003Cp\u003E\n1. Install KOS Mod (read about volumes)\u003Cbr\u003E\n2. Place the content (3 txt-files) under /Kerbal Space Progam/Ships/Script/ (this is volume 0 in KOS Mod)\u003Cbr\u003E\n3. run the partact_rpm file\n\u003C/p\u003E\n\u003Cp\u003E\nWell maybe you can tweak the script. There is alot of programming time while flying through the space. \u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nHere\u0027s the code. Create Textfile and remove extension. Unless u compile the scripts to .ks (read kos manual)\u003Cbr\u003E\nyou can simply edit via open with -\u0026gt; editor\u003Cbr\u003E\u003Cbr\u003E\npartact_rpm\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nclearscreen.\nset mainexit to 0.\n\nset mainindex to 0.\n\nset mainprintflag to 1.\n\nif ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\nif ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\nif ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n\n \n\n \n\nuntil mainexit = 1\n\n {\n\n if ag9 = \u0022True\u0022 { set mainindex to mainindex - 1. set mainprintflag to 1. toggle ag9. wait 0.1. }.\n\n if ag8 = \u0022True\u0022 { set mainindex to mainindex \u002B 1. set mainprintflag to 1. toggle ag8. wait 0.1. }.\n\n if mainindex \u0026lt; 0 { set mainindex to 4. }.\n\n if mainindex \u0026gt; 4 { set mainindex to 0. }.\n\n if ag7 = \u0022True\u0022\n\n  {\n\n  toggle ag7.\n  if mainindex \u0026lt; 3 \n{ \n\n//Init\nif mainindex = 0 { set partactmode to 1. }.\nif mainindex = 1 { set partactmode to 2. }.\nif mainindex = 2 { set partactmode to 3. }.\nset userinput to \u0022no-value\u0022.\nrun partcfg_rpm.\n\n//Program Parm\nset maxcnt to 7.\nset maxstrl to 35.\n\n//Tag Menu----------------------------------------------------------------------------- \nset tagexit to 0.\nset tagindex to 0.\nset tagprintflag to 1.\nif ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\nif ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\nif ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n \nuntil tagexit = 1\n {\n if ag9 = \u0022True\u0022 { set tagindex to tagindex - 1. set tagprintflag to 1. toggle ag9. wait 0.1. }.\n if ag8 = \u0022True\u0022 { set tagindex to tagindex \u002B 1. set tagprintflag to 1. toggle ag8. wait 0.1. }.\n if tagindex \u0026lt; 0 { set tagindex to 8. }.\n if tagindex \u0026gt; 8 { set tagindex to 0. }.\n if ag7 = \u0022True\u0022\n  {\n  toggle ag7.\n   if tagindex \u0026lt; 8 \n   { \n    if tagindex = 0 { set tagname to taglist[0]. }.\n    if tagindex = 1 { set tagname to taglist[1]. }.\n    if tagindex = 2 { set tagname to taglist[2]. }.\n    if tagindex = 3 { set tagname to taglist[3]. }.\n    if tagindex = 4 { set tagname to taglist[4]. }.\n    if tagindex = 5 { set tagname to taglist[5]. }.\n    if tagindex = 6 { set tagname to taglist[6]. }.\n    if tagindex = 7 { set tagname to taglist[7]. }.\n\n\t//Part Menu------------------------------------------------------------------- \n\tset partexit to 0.\n\tset partindex to 0.\n\tset partprintflag to 1.\n        set lastindex to 0.\n        set menum to 0. //Enum for Menuitems\n\tset lnum to 1. //Linenumber for printout\n\tif ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\tif ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\tif ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n         \n        set plist to ship:PARTSDUBBED(tagname). //Gen Partlist\n\n\t//Max Parts and Stepwidth\n        if plist:length \u0026gt; maxcnt { set maxnump to maxcnt.} else { set maxnump to plist:length.}.\n\n\t//If tagged parts exist list per menu\n        if plist:length \u0026gt; 0 \n        {\n\tuntil partexit = 1 \n\t {\n\t if ag9 = \u0022True\u0022 { set partindex to partindex - 1. set partprintflag to 1. toggle ag9. wait 0.1. }.\n\t if ag8 = \u0022True\u0022 { set partindex to partindex \u002B 1. set partprintflag to 1. toggle ag8. wait 0.1. }.\n\t if partindex \u0026lt; 0 { set partindex to 10. }.\n         if partindex \u0026lt; 10 and lastindex =10 { set partindex to maxnump-1. }.\n\t if partindex \u0026gt; 10 { set partindex to 0. }.\n\t if partindex \u0026gt; maxnump-1 and partindex \u0026lt; 10 and lastindex \u0026lt;\u0026gt; 10{ set partindex to 10. }.\n\t set lastindex to partindex.\n\n\t if ag7 = \u0022True\u0022\n\t  {\n\t   toggle ag7.\n           if partindex = 10\n           {\n\t    set partexit to 1.\n\t    set tagprintflag to 1.\n\t    if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n           }\n           else\n\t   {\n          \n           //Module Menu-------------------------------------------------------------------\n           set modexit to 0.\n\t   set modindex to 0.\n\t   set modprintflag to 1.\n           set lastindex to 0.\n           set menum to 0. //Enum for Menuitems\n\t   set lnum to 1. //Linenumber for printout\n\t   if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t   if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\t   if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n         \n           set mlist to plist[partindex]:modules. //Gen modlist\n\n\t   //Max mod and Stepwidth\n           if mlist:length \u0026gt; maxcnt { set maxnumm to maxcnt.} else { set maxnumm to mlist:length.}.\n\n\t   //If mods exist list per menu\n           if mlist:length \u0026gt; 0 \n           {\n\t   until modexit = 1 \n\t    {\n\t    if ag9 = \u0022True\u0022 { set modindex to modindex - 1. set modprintflag to 1. toggle ag9. wait 0.1. }.\n\t    if ag8 = \u0022True\u0022 { set modindex to modindex \u002B 1. set modprintflag to 1. toggle ag8. wait 0.1. }.\n\t    if modindex \u0026lt; 0 { set modindex to 10. }.\n            if modindex \u0026lt; 10 and lastindex =10 { set modindex to maxnumm-1. }.\n\t    if modindex \u0026gt; 10 { set modindex to 0. }.\n\t    if modindex \u0026gt; maxnumm-1 and modindex \u0026lt; 10 and lastindex \u0026lt;\u0026gt; 10{ set modindex to 10. }.\n\t    set lastindex to modindex.\n\n\t    if ag7 = \u0022True\u0022\n\t     {\n\t      toggle ag7.\n              if modindex = 10\n              {\n\t       set modexit to 1.\n\t       set partprintflag to 1.\n\t       if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n              }\n              else\n\t      {\n\n              if partactmode = 1 \n              {\n              //Action Menu------------------------------------------------------------------\n              set actexit to 0.\n\t      set actindex to 0.\n\t      set actprintflag to 1.\n              set lastindex to 0.\n              set menum to 0. //Enum for Menuitems\n\t      set lnum to 1. //Linenumber for printout\n\t      if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t      if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\t      if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n         \n              set alist to plist[partindex]:GETMODULE(mlist[modindex]):allactionnames. //Gen actlist\n\n              //Max actions and Stepwidth\n              if alist:length \u0026gt; maxcnt { set maxnuma to maxcnt.} else { set maxnuma to alist:length.}.\n\n              //If actions exist list per menu\n              if alist:length \u0026gt; 0 \n              {\n\t      until actexit = 1 \n\t       {\n\t       if ag9 = \u0022True\u0022 { set actindex to actindex - 1. set actprintflag to 1. toggle ag9. wait 0.1. }.\n\t       if ag8 = \u0022True\u0022 { set actindex to actindex \u002B 1. set actprintflag to 1. toggle ag8. wait 0.1. }.\n\t       if actindex \u0026lt; 0 { set actindex to 10. }.\n               if actindex \u0026lt; 10 and lastindex =10 { set actindex to maxnuma-1. }.\n\t       if actindex \u0026gt; 10 { set actindex to 0. }.\n\t       if actindex \u0026gt; maxnuma-1 and actindex \u0026lt; 10 and lastindex \u0026lt;\u0026gt; 10{ set actindex to 10. }.\n\t       set lastindex to actindex.\n\n               if ag7 = \u0022True\u0022\n\t       {\n\t        toggle ag7.\n                if actindex = 10\n                {\n\t         set actexit to 1.\n\t         set modprintflag to 1.\n\t         if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n                }\n                else\n\t        {        \n\n                //Actioncontrol Menu----------------------------------------------------------\n                set doaexit to 0.\n\t        set doaindex to 0.\n\t        set doaprintflag to 1.\n                set doastatus to 0.\n\t        if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t        if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n                if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n\n\n\n                until doaexit = 1\n\n                 {\n\n                  if ag9 = \u0022True\u0022 \n                   { \n                    plist[partindex]:GETMODULE(mlist[modindex]):\nDOACTION(alist[actindex], true).\n                    set doastatus to 0. \n                    set doaprintflag to 1.  \n                    toggle ag9. \n                    wait 0.1. \n                   }.\n\n                    if ag8 = \u0022True\u0022 \n                     { \n                      plist[partindex]:GETMODULE(mlist[modindex]):\nDOACTION(alist[actindex], false).\n                      set doastatus to 1. \n                      set doaprintflag to 1. \n                      toggle ag8. \n                      wait 0.1. \n                     }.\n\n                    if ag7 = \u0022True\u0022\n\n                     {\n\n                      clearscreen.\n\n                      toggle ag7.\n\n                      set doaexit to 1.\n                      set actprintflag to 1.\n                      wait 0.1.\n\n                     }.\n\n                    if doaprintflag = 1\n\n                     {\n\n                      clearscreen.\n\n                      print \u0022Enable/Disable selected action.\u0022 at (0,0).\n\n                      print \u0022 ---------------------------------\u0022 at (0,1).\n\n                      print \u0022 Use action group 9 to activate.\u0022 at (0,2).\n\n                      print \u0022 Use action group 8 to deactivate.\u0022 at (0,3).\n\n                      print \u0022 Use action group 7 to leave.\u0022 at (0,4).\n                      if doastatus = 0 { set doastatusm to \u0022enabled\u0022.}.\n                      if doastatus = 1 { set doastatusm to \u0022disabled\u0022.}.\n\n                      print \u0022 You have \u0022 \u002B doastatusm \u002B \u0022 the\u0022 at (0,10).\n                      print \u0022 selected part.\u0022 at (0,11).\n\n                      set doaprintflag to 0.\n\n                     }.\n\n                    }.\n                    //-------------------------------------------------------------------\n                }.\n\t       }.\n\t       if actprintflag = 1\n\t       {\n\t        clearscreen.\n\t        print \u0022Partact: Actions\u0022 at (1,0).\n\t        print \u0022------------------\u0022 at (2,1).\n                FROM {global z is 0.} UNTIL z = (maxnuma) STEP {set z to z\u002B1.} DO \n                {  \n\t         set menum to menum\u002B1.\n\t         set lnum to lnum\u002B1.\n                 if alist[z]:length \u0026gt; maxstrl { set strleng to maxstrl.} else { set strleng to alist[z]:length.}.\n                 print menum \u002B \u0022. \u0022 \u002B alist[z]:substring(0,strleng) at (2,lnum).\n                }.\n                if z = maxnuma \n \t        {\n  \t         set z to 0.\n\t         set menum to 0.\n\t         set lnum to 1.\n\t        }.\n\t        print (maxnuma\u002B1) \u002B \u0022. Exit\u0022 at (2,10).\n\t        print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\t        if actindex = 0 { print \u0022=\u0022 at (0,2). }.\n                if actindex = 1 { print \u0022=\u0022 at (0,3). }.\n\t        if actindex = 2 { print \u0022=\u0022 at (0,4). }.\n                if actindex = 3 { print \u0022=\u0022 at (0,5). }.\n\t        if actindex = 4 { print \u0022=\u0022 at (0,6). }.\n                if actindex = 5 { print \u0022=\u0022 at (0,7). }.\n\t        if actindex = 6 { print \u0022=\u0022 at (0,8). }.\n                if actindex = 7 { print \u0022=\u0022 at (0,9). }.\n\t        if actindex = 10 { print \u0022=\u0022 at (0,10). }.\n                set actprintflag to 0.\n\t        }.\n\t       }.\n              }\n\t      else\n\t      {\n\t       clearscreen.\n\t       print \u0022No action on module: \u0022 \u002B mlist[modindex]. wait 2.\n               set modprintflag to 1.\n\t      }.\n              //----------------------------------------------------------------------------\n              }.\n              \n              if partactmode = 2\n              {\n              //Event Menu------------------------------------------------------------------\n              set actexit to 0.\n\t      set actindex to 0.\n\t      set actprintflag to 1.\n              set lastindex to 0.\n              set menum to 0. //Enum for Menuitems\n\t      set lnum to 1. //Linenumber for printout\n\t      if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t      if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\t      if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n         \n              set alist to plist[partindex]:GETMODULE(mlist[modindex]):alleventnames. //Gen evtlist\n\n              //Max actions and Stepwidth\n              if alist:length \u0026gt; maxcnt { set maxnuma to maxcnt.} else { set maxnuma to alist:length.}.\n\n              //If actions exist list per menu\n              if alist:length \u0026gt; 0 \n              {\n\t      until actexit = 1 \n\t       {\n\t       if ag9 = \u0022True\u0022 { set actindex to actindex - 1. set actprintflag to 1. toggle ag9. wait 0.1. }.\n\t       if ag8 = \u0022True\u0022 { set actindex to actindex \u002B 1. set actprintflag to 1. toggle ag8. wait 0.1. }.\n\t       if actindex \u0026lt; 0 { set actindex to 10. }.\n               if actindex \u0026lt; 10 and lastindex =10 { set actindex to maxnuma-1. }.\n\t       if actindex \u0026gt; 10 { set actindex to 0. }.\n\t       if actindex \u0026gt; maxnuma-1 and actindex \u0026lt; 10 and lastindex \u0026lt;\u0026gt; 10{ set actindex to 10. }.\n\t       set lastindex to actindex.\n\n               if ag7 = \u0022True\u0022\n\t       {\n\t        toggle ag7.\n                if actindex = 10\n                {\n\t         set actexit to 1.\n\t         set modprintflag to 1.\n\t         if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n                }\n                else\n\t        {        \n\n                //Eventcontrol Menu----------------------------------------------------------\n                set doaexit to 0.\n\t        set doaindex to 0.\n\t        set doaprintflag to 1.\n\t        if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t        if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n                if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n\n\n\n                until doaexit = 1\n\n                 {\n\n                  if ag9 = \u0022True\u0022 \n                   { \n                    plist[partindex]:GETMODULE(mlist[modindex]):\nDOEVENT(alist[actindex]).\n                    clearscreen.\n\t\t    print \u0022Activated...\u0022.\n\t\t    wait 1.\n                    set actprintflag to 1.  \n                    set doaexit to 1.\n                    toggle ag9. \n                    wait 0.1. \n                   }.\n\n                   if ag7 = \u0022True\u0022\n\n                     {\n\n                      clearscreen.\n\n                      toggle ag7.\n\n                      set doaexit to 1.\n                      set actprintflag to 1.\n                      wait 0.1.\n\n                     }.\n\n                    if doaprintflag = 1\n\n                     {\n\n                      clearscreen.\n\n                      print \u0022Activate selected event.\u0022 at (0,0).\n\n                      print \u0022 ---------------------------------\u0022 at (0,1).\n\n                      print \u0022 Use action group 9 to activate.\u0022 at (0,2).                    \n\n                      print \u0022 Use action group 7 to leave.\u0022 at (0,3).\n\n                      set doaprintflag to 0.\n\n                     }.\n\n                    }.\n                    //-------------------------------------------------------------------\n                }.\n\t       }.\n\t       if actprintflag = 1\n\t       {\n\t        clearscreen.\n\t        print \u0022Partact: Actions\u0022 at (1,0).\n\t        print \u0022------------------\u0022 at (2,1).\n                FROM {global z is 0.} UNTIL z = (maxnuma) STEP {set z to z\u002B1.} DO \n                {  \n\t         set menum to menum\u002B1.\n\t         set lnum to lnum\u002B1.\n                 if alist[z]:length \u0026gt; maxstrl { set strleng to maxstrl.} else { set strleng to alist[z]:length.}.\n                 print menum \u002B \u0022. \u0022 \u002B alist[z]:substring(0,strleng) at (2,lnum).\n                }.\n                if z = maxnuma \n \t        {\n  \t         set z to 0.\n\t         set menum to 0.\n\t         set lnum to 1.\n\t        }.\n\t        print (maxnuma\u002B1) \u002B \u0022. Exit\u0022 at (2,10).\n\t        print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\t        if actindex = 0 { print \u0022=\u0022 at (0,2). }.\n                if actindex = 1 { print \u0022=\u0022 at (0,3). }.\n\t        if actindex = 2 { print \u0022=\u0022 at (0,4). }.\n                if actindex = 3 { print \u0022=\u0022 at (0,5). }.\n\t        if actindex = 4 { print \u0022=\u0022 at (0,6). }.\n                if actindex = 5 { print \u0022=\u0022 at (0,7). }.\n\t        if actindex = 6 { print \u0022=\u0022 at (0,8). }.\n                if actindex = 7 { print \u0022=\u0022 at (0,9). }.\n\t        if actindex = 10 { print \u0022=\u0022 at (0,10). }.\n                set actprintflag to 0.\n\t        }.\n\t       }.\n              }\n\t      else\n\t      {\n\t       clearscreen.\n\t       print \u0022No events on module: \u0022 \u002B mlist[modindex]. wait 2.\n               set modprintflag to 1.\n\t      }.\n              //----------------------------------------------------------------------------\n              }.\n\n              if partactmode = 3\n              {\n              //Fields Menu------------------------------------------------------------------\n              set actexit to 0.\n\t      set actindex to 0.\n\t      set actprintflag to 1.\n              set lastindex to 0.\n              set menum to 0. //Enum for Menuitems\n\t      set lnum to 1. //Linenumber for printout\n\t      if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t      if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n\t      if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n         \n              set alist to plist[partindex]:GETMODULE(mlist[modindex]):allfields. //Gen fieldlist\n\t      set anlist to plist[partindex]:GETMODULE(mlist[modindex]):allfieldnames. //Gen fieldlistnames\n\n              //Max actions and Stepwidth\n              if alist:length \u0026gt; maxcnt { set maxnuma to maxcnt.} else { set maxnuma to alist:length.}.\n\n              //If actions exist list per menu\n              if alist:length \u0026gt; 0 \n              {\n\t      until actexit = 1 \n\t       {\n\t       if ag9 = \u0022True\u0022 { set actindex to actindex - 1. set actprintflag to 1. toggle ag9. wait 0.1. }.\n\t       if ag8 = \u0022True\u0022 { set actindex to actindex \u002B 1. set actprintflag to 1. toggle ag8. wait 0.1. }.\n\t       if actindex \u0026lt; 0 { set actindex to 10. }.\n               if actindex \u0026lt; 10 and lastindex =10 { set actindex to maxnuma-1. }.\n\t       if actindex \u0026gt; 10 { set actindex to 0. }.\n\t       if actindex \u0026gt; maxnuma-1 and actindex \u0026lt; 10 and lastindex \u0026lt;\u0026gt; 10{ set actindex to 10. }.\n\t       set lastindex to actindex.\n\n               if ag7 = \u0022True\u0022\n\t       {\n\t        toggle ag7.\n                if actindex = 10\n                {\n\t         set actexit to 1.\n\t         set modprintflag to 1.\n\t         if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n                }\n                else\n\t        {        \n\n                //Fieldcontrol Menu----------------------------------------------------------\n                set doaexit to 0.\n\t        set doaindex to 0.\n\t        set doaprintflag to 1.\n\t        if ag9 = \u0022True\u0022 { toggle ag9. wait 0.01. }.\n\t        if ag8 = \u0022True\u0022 { toggle ag8. wait 0.01. }.\n                if ag7 = \u0022True\u0022 { toggle ag7. wait 0.01. }.\n\n\n\n                until doaexit = 1\n\n                 {\n\n                  if ag9 = \u0022True\u0022 \n                   { \n                    clearscreen.\n                    print \u0022Current Value:\u0022.\n                    print plist[partindex]:GETMODULE(mlist[modindex]):getfield(anlist[actindex]).\n\t\t    wait 1.\n                    set actprintflag to 1.  \n                    set doaexit to 1.\n                    toggle ag9. \n                    wait 0.1. \n                   }.\n\n                  if ag8 = \u0022True\u0022 \n                   { \n\t\t    clearscreen.\n    \t\t    edit partinp_rpm. \n    \t\t    if ag7 = \u0022True\u0022 { toggle ag7. wait 1.}.\n    \t\t    if ag8 = \u0022True\u0022 { toggle ag8. wait 1.}.\n    \t\t    print \u0022Please make a valid input\u0022 at (0,10).\n    \t\t    print \u0022Use Action Group 7 to continue\u0022 at (0,11).\n    \t\t    set inpexit to 0.\n    \t\t    until inpexit = 1\n     \t\t     {\n      \t\t      wait 1.\n      \t\t      if ag7 = \u0022True\u0022\n       \t\t       {\n\n        \t        toggle ag7.\n\n                        wait 1.\n\n                        set inpexit to 1.\n\n                       }.\n                     }.\n                     run partinp_rpm.\n                     wait 0.1.\n                     clearscreen.\n                     print \u0022New Value:\u0022.\n                     print userinput.\n                     wait 2.\n                     set actprintflag to 1.\n                     plist[partindex]:GETMODULE(mlist[modindex]):setfield(anlist[actindex],userinput).   \n                     toggle ag7.\n                   }.\n\n                   if ag7 = \u0022True\u0022\n\n                     {\n\n                      clearscreen.\n\n                      toggle ag7.              \n                      set doaexit to 1.\n                      set actprintflag to 1.\n                      wait 0.1.\n\n                     }.\n\n                    if doaprintflag = 1\n\n                     {\n\n                      clearscreen.\n\n                      print \u0022Activate selected event.\u0022 at (0,0).\n\n                      print \u0022 ---------------------------------\u0022 at (0,1).\n\n                      print \u0022 Use action group 9 to get field.\u0022 at (0,2). \n                      print \u0022 Use action group 8 to set field.\u0022 at (0,3).                       \n\n                      print \u0022 Use action group 7 to leave.\u0022 at (0,4).\n\n                      set doaprintflag to 0.\n\n                     }.\n\n                    }.\n                    //-------------------------------------------------------------------\n                }.\n\t       }.\n\t       if actprintflag = 1\n\t       {\n\t        clearscreen.\n\t        print \u0022Partact: Fields\u0022 at (1,0).\n\t        print \u0022------------------\u0022 at (2,1).\n                FROM {global z is 0.} UNTIL z = (maxnuma) STEP {set z to z\u002B1.} DO \n                {  \n\t         set menum to menum\u002B1.\n\t         set lnum to lnum\u002B1.\n                 if alist[z]:length \u0026gt; maxstrl { set strleng to maxstrl.} else { set strleng to alist[z]:length.}.\n                 print menum \u002B \u0022. \u0022 \u002B alist[z]:substring(0,strleng) at (2,lnum).\n                }.\n                if z = maxnuma \n \t        {\n  \t         set z to 0.\n\t         set menum to 0.\n\t         set lnum to 1.\n\t        }.\n\t        print (maxnuma\u002B1) \u002B \u0022. Exit\u0022 at (2,10).\n\t        print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\t        if actindex = 0 { print \u0022=\u0022 at (0,2). }.\n                if actindex = 1 { print \u0022=\u0022 at (0,3). }.\n\t        if actindex = 2 { print \u0022=\u0022 at (0,4). }.\n                if actindex = 3 { print \u0022=\u0022 at (0,5). }.\n\t        if actindex = 4 { print \u0022=\u0022 at (0,6). }.\n                if actindex = 5 { print \u0022=\u0022 at (0,7). }.\n\t        if actindex = 6 { print \u0022=\u0022 at (0,8). }.\n                if actindex = 7 { print \u0022=\u0022 at (0,9). }.\n\t        if actindex = 10 { print \u0022=\u0022 at (0,10). }.\n                set actprintflag to 0.\n\t        }.\n\t       }.\n              }\n\t      else\n\t      {\n\t       clearscreen.\n\t       print \u0022No events on module: \u0022 \u002B mlist[modindex]. wait 2.\n               set modprintflag to 1.\n\t      }.\n              //----------------------------------------------------------------------------\n              }.\n\n\t      }.\n\t     }.\n\t   if modprintflag = 1\n\t   {\n\t    clearscreen.\n\t    print \u0022Partact: Modules\u0022 at (1,0).\n\t    print \u0022------------------\u0022 at (2,1).\n            FROM {global x is 0.} UNTIL x = (maxnumm) STEP {set x to x\u002B1.} DO \n             {  \n\t      set menum to menum\u002B1.\n\t      set lnum to lnum\u002B1.\n              if mlist[x]:length \u0026gt; maxstrl { set strleng to maxstrl.} else { set strleng to mlist[x]:length.}.\n              print menum \u002B \u0022. \u0022 \u002B mlist[x]:substring(0,strleng) at (2,lnum).\n             }.\n           if x = maxnumm \n \t    {\n  \t     set x to 0.\n\t     set menum to 0.\n\t     set lnum to 1.\n\t    }.\n\t    print (maxnumm\u002B1) \u002B \u0022. Exit\u0022 at (2,10).\n\t    print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\t    if modindex = 0 { print \u0022=\u0022 at (0,2). }.\n            if modindex = 1 { print \u0022=\u0022 at (0,3). }.\n\t    if modindex = 2 { print \u0022=\u0022 at (0,4). }.\n            if modindex = 3 { print \u0022=\u0022 at (0,5). }.\n\t    if modindex = 4 { print \u0022=\u0022 at (0,6). }.\n            if modindex = 5 { print \u0022=\u0022 at (0,7). }.\n\t    if modindex = 6 { print \u0022=\u0022 at (0,8). }.\n            if modindex = 7 { print \u0022=\u0022 at (0,9). }.\n\t    if modindex = 10 { print \u0022=\u0022 at (0,10). }.\n            set modprintflag to 0.\n\t   }.\n\t  }.\n         }\n\t else\n\t {\n\t  clearscreen.\n\t  print \u0022No mod on part: \u0022 \u002B plist[partindex]. wait 2.\n          set partprintflag to 1.\n\t }.\n         //----------------------------------------------------------------------------\n\t   }.\n\t  }.\n\t if partprintflag = 1\n\t  {\n\t  clearscreen.\n\t  print \u0022Partact: Parts\u0022 at (1,0).\n\t  print \u0022------------------\u0022 at (2,1).\n           FROM {global y is 0.} UNTIL y = (maxnump) STEP {set y to y\u002B1.} DO \n           {  \n\t    set menum to menum\u002B1.\n\t    set lnum to lnum\u002B1.\n            if plist[y]:title:length \u0026gt; maxstrl { set strleng to maxstrl.} else { set strleng to plist[y]:title:length.}.\n            print menum \u002B \u0022. \u0022 \u002B (plist[y]:title):substring(0,strleng) at (2,lnum).\n           }.\n         if y = maxnump \n \t  {\n  \t   set y to 0.\n\t   set menum to 0.\n\t   set lnum to 1.\n\t  }.\n\t   print (maxnump\u002B1) \u002B \u0022. Exit\u0022 at (2,10).\n\t   print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\t   if partindex = 0 { print \u0022=\u0022 at (0,2). }.\n           if partindex = 1 { print \u0022=\u0022 at (0,3). }.\n\t   if partindex = 2 { print \u0022=\u0022 at (0,4). }.\n           if partindex = 3 { print \u0022=\u0022 at (0,5). }.\n\t   if partindex = 4 { print \u0022=\u0022 at (0,6). }.\n           if partindex = 5 { print \u0022=\u0022 at (0,7). }.\n\t   if partindex = 6 { print \u0022=\u0022 at (0,8). }.\n           if partindex = 7 { print \u0022=\u0022 at (0,9). }.\n\t   if partindex = 10 { print \u0022=\u0022 at (0,10). }.\n           set partprintflag to 0.\n\t  }.\n\t }.\n        }\n\telse\n\t{\n\t clearscreen.\n\t print \u0022No Part with tag: \u0022 \u002B tagname. wait 2.\n         set tagprintflag to 1.\n\t}.\n\t//----------------------------------------------------------------------------\n   }.\n   if tagindex = 8 \n   {  \n    set tagexit to 1. wait 1. \n   }.\n  }.\n  if tagprintflag = 1\n  {\n  wait 0.1.\n  clearscreen.\n  print \u0022Partact: Tag Menu\u0022 at (1,0).\n  print \u0022------------------\u0022 at (2,1).\n  print \u00221. Part (\u0022 \u002B taglist[0] \u002B \u0022)\u0022 at (2,2).\n  print \u00222. Part (\u0022 \u002B taglist[1] \u002B \u0022)\u0022 at (2,3).\n  print \u00223. Part (\u0022 \u002B taglist[2] \u002B \u0022)\u0022 at (2,4).\n  print \u00224. Part (\u0022 \u002B taglist[3] \u002B \u0022)\u0022 at (2,5).\n  print \u00225. Part (\u0022 \u002B taglist[4] \u002B \u0022)\u0022 at (2,6).\n  print \u00226. Part (\u0022 \u002B taglist[5] \u002B \u0022)\u0022 at (2,7).\n  print \u00227. Part (\u0022 \u002B taglist[6] \u002B \u0022)\u0022 at (2,8).\n  print \u00228. Part (\u0022 \u002B taglist[7] \u002B \u0022)\u0022 at (2,9).\n  print \u00229. Exit\u0022 at (2,10).\n  print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n  if tagindex = 0 { print \u0022=\u0022 at (0,2). }.\n  if tagindex = 1 { print \u0022=\u0022 at (0,3). }.\n  if tagindex = 2 { print \u0022=\u0022 at (0,4). }.\n  if tagindex = 3 { print \u0022=\u0022 at (0,5). }.\n  if tagindex = 4 { print \u0022=\u0022 at (0,6). }.\n  if tagindex = 5 { print \u0022=\u0022 at (0,7). }.\n  if tagindex = 6 { print \u0022=\u0022 at (0,8). }.\n  if tagindex = 7 { print \u0022=\u0022 at (0,9). }.\n  if tagindex = 8 { print \u0022=\u0022 at (0,10). }.\n  set mainprintflag to 1.\n  }.\n }.\n//------------------------------------------------------------------------------------\n  \n}.\n\n  if mainindex = 3  \n   { \n    edit partcfg_rpm. \n    clearscreen.\n    if ag7 = \u0022True\u0022 { toggle ag7. wait 1.}.\n    print \u0022Please save your settings first\u0022 at (0,10).\n    print \u0022Use Action Group 7 to continue\u0022 at (0,11).\n    set cfgexit to 0.\n    until cfgexit = 1\n     {\n      wait 1.\n      if ag7 = \u0022True\u0022\n       {\n\n        toggle ag7.\n\n        wait 1.\n\n        set cfgexit to 1.\n\n       }.\n     }.\n     set mainprintflag to 1.\n     if ag7 = \u0022True\u0022 { toggle ag7. wait 1.}.   \n   }.\n\n  if mainindex = 4 { set mainexit to 1. wait 1. }.\n\n  }.\n\n if mainprintflag = 1\n\n  {\n\n  clearscreen.\n  print \u0022Partact: Main Menu\u0022 at (1,0).\n  print \u0022------------------\u0022 at (2,1).\n\n  print \u00221. Actions\u0022 at (2,2).\n\n  print \u00222. Events\u0022 at (2,3).\n  print \u00223. Fields\u0022 at (2,4).\n\n  print \u00224. Config\u0022 at (2,5).\n  print \u00225. Exit\u0022 at (2,10).\n  print \u0022Info: AG7=Select, AG8=down, AG9=up\u0022  at (2,11).\n\n  if mainindex = 0 { print \u0022=\u0022 at (0,2).}.\n\n  if mainindex = 1 { print \u0022=\u0022 at (0,3).}.\n\n  if mainindex = 2 { print \u0022=\u0022 at (0,4).}.\n\n  if mainindex = 3 { print \u0022=\u0022 at (0,5).}.\n\n  if mainindex = 4 { print \u0022=\u0022 at (0,10).}.\n\n  set mainprintflag to 0.\n\n  }.\n\n }.\n\n clearscreen.\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\npartcfg_rpm\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E//User set Parameters (max. 8 for rpm)\n\n//Part Tags\nset tag1 to \u0022robo1\u0022.\nset tag2 to \u0022testtag\u0022.\nset tag3 to \u0022cam\u0022.\nset tag4 to \u0022sat\u0022.\nset tag5 to \u0022dock1\u0022.\nset tag6 to \u0022antenna\u0022.\nset tag7 to \u0022goo\u0022.\nset tag8 to \u0022Winch\u0022.\nset taglist to list(tag1,tag2,tag3,tag4,tag5,tag6,tag7,tag8).\n\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\npartinp_rpm\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E//User set Parameters (max. 8)\n//Please make your input.\n\n//For Integer put just the value. exmp: set userinput to 4.\n//Stringa need to be quoted. exmp:  set userinput to \u0022mission-control\u0022.\nset userinput to \u0022mission-control\u0022.\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-10-30T13:03:20Z\u0022 title=\u002210/30/2016 01:03  PM\u0022 data-short=\u00227 yr\u0022\u003EOctober 30, 2016\u003C/time\u003E by LtMtz\u003C/strong\u003E\n\u003C/span\u003E\n"}]}