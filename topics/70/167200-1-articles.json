{"TopicId":167200,"ForumId":70,"TopicTitle":"Identifying a plugin for Module Manager","CreatedByName":"Wolf Baginski","CreatedById":138549,"CreatedDateTime":"2017-11-04T16:56:58Z","PageNum":1,"Articles":[{"CreatedByName":"Wolf Baginski","CreatedById":138549,"CreatedDateTime":"2017-11-04T16:56:58Z","Content":"\n\u003Cp\u003E\nModule Manager can identify a plugin .dll from a name compiled in the code.\n\u003C/p\u003E\n\u003Cp\u003E\nAccording to the docs, the name can be read if you have Windows by checking the Properties using Explorer. I quote the documentation below. The second option will suffice for my needs, but using the \u0022assembly name\u0022 for the .dll seems a little less prone to getting messed up.\n\u003C/p\u003E\n\u003Cp\u003E\nI don\u0027t have Windows. Any suggestions for Linux (or, I suppose, Mac users)\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nThe stuff within the needs section is based on either:\n\nA plugin .dll with the same assembly name.\nA subdirectory name under GameData. (Names with spaces can be used, just remove the spaces: GameData/My Mod/ =\u0026gt; :NEEDS[MyMod]\nA FOR[Blah] defined would allow NEEDS[Blah]\nAs this uses the assembly name (which is compiled into the DLL) so you\u0027d always get ModuleManager even if you rename the dll. It\u0027s usually going to be the same as the DLL name but it\u0027s not always. If you find the DLL in exporer, go to the properties right-click menu, and look in the Details tab the name is there under File Description.\u003C/pre\u003E\n\u003Cp\u003E\nI doubt I am ever going to write a plugin myself, but it would make sense to have this assembly name in any documentation\n\u003C/p\u003E\n"}]}