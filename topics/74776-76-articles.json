{"TopicId":74776,"ForumId":34,"TopicTitle":"[1.1.2] Kerbin-Side (v1.1.0) \u0026amp; Supplements","CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2014-06-11T17:50:08Z","PageNum":76,"Articles":[{"CreatedByName":"CattyNebulart","CreatedById":79428,"CreatedDateTime":"2015-11-18T05:33:36Z","Content":"\nhmm I have also been trying to race but even with the race activated trying to fly through a start portal or under a bridge is flying into a wall... the colision meshes are definitely messed up.\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-18T15:00:40Z","Content":"\nKSP 1.0.5 has some changed and new functions that have impacted the collision meshes of third party statics. I\u0026#39;ve not been able to identify exactly how or what and cannot even begin to diagnose the problem, let alone fix it.\u003Cbr\u003E\n\u003Cbr\u003E\nKerbal Konstructs and KerbinSide is not compatible with KSP 1.0.5. That\u0026#39;s all she wrote for this mod.\n"},{"CreatedByName":"legendx","CreatedById":43607,"CreatedDateTime":"2015-11-18T15:13:52Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]That\u0026#39;s all she wrote for this mod.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nSo that\u0026#39;s it? No more updates?\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-18T15:14:51Z","Content":"\n[quote name=\u0027legendx\u0027]So that\u0026#39;s it? No more updates?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nUnless KSP 1.1 miraculously becomes compatible, yes that\u0026#39;s it, no more updates.\n"},{"CreatedByName":"legendx","CreatedById":43607,"CreatedDateTime":"2015-11-18T15:16:12Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Unless KSP 1.1 miraculously becomes compatible, yes that\u0026#39;s it, no more updates.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThat\u0026#39;s too bad. Thanks for all your hard work - I got many enjoyable hours from your addons.\n"},{"CreatedByName":"TaintedLion","CreatedById":137942,"CreatedDateTime":"2015-11-18T20:49:42Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Unless KSP 1.1 miraculously becomes compatible, yes that\u0026#39;s it, no more updates.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nI don\u0026#39;t know the first thing about modding, but if someone who wasn\u0026#39;t you managed to find the problem and create a fix, would you continue this?\n"},{"CreatedByName":"BudgetHedgehog\uFEFF","CreatedById":104112,"CreatedDateTime":"2015-11-18T21:01:55Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Unless KSP 1.1 miraculously becomes compatible, yes that\u0026#39;s it, no more updates.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nWell damn, that\u0026#39;s a disappointment.. I have my fingers crossed though.\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-18T23:55:23Z","Content":"\n[quote name=\u0027TaintedLion\u0027]I don\u0026#39;t know the first thing about modding, but if someone who wasn\u0026#39;t you managed to find the problem and create a fix, would you continue this?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nYes.\u003Cbr\u003E\n\u003Cbr\u003E\nHowever, I\u0026#39;m fairly certain the issues are a result of changes to collider handling in KSP. That\u0026#39;s some serious hard-code and considering the hacky nature of Kerbal Konstructs, I don\u0026#39;t see a work-around. All I\u0026#39;ve been doing since 1.0.5 is try to fix the problems. It\u0026#39;s not fun. I\u0026#39;m tired, fed up and Fallout 4 is calling me.\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\nI would like to add that I really do appreciate all the support I\u0026#39;ve had from the players of this mod. Even when I\u0026#39;m a grumpy old fart with a tendency to cuss out idiots.\u003Cbr\u003E\n\u003Cbr\u003E\nA particularly huge shout out to the mystery donater who just donated with a thank you. That is rare. I have something in my eye now.\n"},{"CreatedByName":"Superfluous J","CreatedById":73725,"CreatedDateTime":"2015-11-19T00:36:27Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Unless KSP 1.1 miraculously becomes compatible, yes that\u0026#39;s it, no more updates.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nIronically (and sadly) the last version where memory issues made this mod hard to fit, is the first where it won\u0026#39;t run.\u003Cbr\u003E\n\u003Cbr\u003E\nI understand fully the situation and know it\u0026#39;s worse for you than it is for me. I\u0026#39;m just saddened by it.\n"},{"CreatedByName":"CattyNebulart","CreatedById":79428,"CreatedDateTime":"2015-11-19T02:19:17Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Yes.\u003Cbr\u003E\n\u003Cbr\u003E\nHowever, I\u0026#39;m fairly certain the issues are a result of changes to collider handling in KSP. That\u0026#39;s some serious hard-code and considering the hacky nature of Kerbal Konstructs, I don\u0026#39;t see a work-around. All I\u0026#39;ve been doing since 1.0.5 is try to fix the problems. It\u0026#39;s not fun. I\u0026#39;m tired, fed up and Fallout 4 is calling me.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\n*Hugs* Aww. I\u0026#39;m sorry to hear that. I was going to take a look to see if I could find the problem but I can;t even find the source. In the meantime take this donation in the hopes you come back to it in a few months.\n"},{"CreatedByName":"colmo","CreatedById":25950,"CreatedDateTime":"2015-11-19T02:29:34Z","Content":"\nThat sucks a lot. This mod has become a bedrock for many, and I was looking forward to it on my new rig.\u003Cbr\u003E\n\u003Cbr\u003E\nThinking pragmatically, we know the colliders are busted. What still does work? Can we repurpose any of it, or break it up? Could we convert statics to parts?\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-11-19T08:55:15Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]However, I\u0026#39;m fairly certain the issues are a result of changes to collider handling in KSP. That\u0026#39;s some serious hard-code and considering the hacky nature of Kerbal Konstructs, I don\u0026#39;t see a work-around. All I\u0026#39;ve been doing since 1.0.5 is try to fix the problems. It\u0026#39;s not fun. I\u0026#39;m tired, fed up and Fallout 4 is calling me.[/quote]\u003Cbr\u003E\nYes, apparently the mu loader is now forcing all MeshColliders to convex which causes Unity to recompute them if they\u0026#39;re not already (hamfisted change for Unity 5.1 maybe? I read something about concave collider support being removed). This is causing the odd problems. Unfortunately, there isn\u0026#39;t any direct way to prevent the loader from ignoring the flag inside the mu format that I can find. \u003Cbr\u003E\n\u003Cbr\u003E\nOne solution is to hijack the load process, parse the mu for the correct value and set it back before the collider is recomputed... and yes it\u0026#39;s exactly as ugly as it sounds. Here\u0026#39;s my prototype which appears to work. Note that you must rename all affected mu\u0026#39;s to muks, so for example ksairstripv24.mu becomes ksairstripv24.muks. They\u0026#39;ll look the same as any regular loaded mu so you shouldn\u0026#39;t need to change any configs. \u003Cbr\u003E\n\u003Cbr\u003E\n[spoiler=MuksLoader][code][DatabaseLoaderAttrib(new [] { \u0022muks\u0022 })]\u003Cbr\u003E\npublic class MuksLoader : DatabaseLoaderModel_MU\u003Cbr\u003E\n{\u003Cbr\u003E\npublic override IEnumerator Load(UrlDir.UrlFile urlFile, FileInfo file)\u003Cbr\u003E\n{\u003Cbr\u003E\nDebug.Log(\u0022MuksLoader loading: \u0022 \u002B urlFile.url);\u003Cbr\u003E\n\u003Cbr\u003E\nyield return GameDatabase.Instance.StartCoroutine(base.Load(urlFile, file));\u003Cbr\u003E\n\u003Cbr\u003E\nif (obj == null)\u003Cbr\u003E\nyield break;\u003Cbr\u003E\n\u003Cbr\u003E\nusing (var fs = new FileStream(urlFile.fullPath, FileMode.Open))\u003Cbr\u003E\nusing (var mr = new MuksReader(fs))\u003Cbr\u003E\n{\u003Cbr\u003E\nvar topNode = mr.LoadNodeTree();\u003Cbr\u003E\nvar meshColliders = obj.GetComponentsInChildren\u0026lt;MeshCollider\u0026gt;(true);\u003Cbr\u003E\nvar convexEntries = CreateEntries(topNode);\u003Cbr\u003E\n\u003Cbr\u003E\nif (meshColliders.Length != convexEntries.Sum(kvp =\u0026gt; kvp.Value.Count))\u003Cbr\u003E\nDebug.LogWarning(\u0022Number of MeshCollider convex nodes does not match number of MeshColliders!\u0022); // whoops there\u0026#39;s a bug!\u003Cbr\u003E\n\u003Cbr\u003E\nforeach (var mc in meshColliders)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar url = HierarchyUtil.CompileID(mc.transform, mc.transform.root.name);\u003Cbr\u003E\n\u003Cbr\u003E\nQueue\u0026lt;bool\u0026gt; convexFlagQueue;\u003Cbr\u003E\n\u003Cbr\u003E\nif (convexEntries.TryGetValue(url, out convexFlagQueue))\u003Cbr\u003E\nmc.convex = convexFlagQueue.Dequeue();\u003Cbr\u003E\nelse Debug.LogWarning(\u0022Failed to get convex flag for \u0022 \u002B url);\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nif (convexEntries.Sum(kvp =\u0026gt; kvp.Value.Count) \u0026gt; 0)\u003Cbr\u003E\nDebug.LogWarning(\u0022Unused convex entries for \u0022 \u002B urlFile.url);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nyield return 0;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n/// This is probably a pretty crap way of doing this but because there can be multiple GameObjects with the\u003Cbr\u003E\n/// same url and a MeshCollider component, we won\u0026#39;t be able to tell their convex flags apart if they differ...\u003Cbr\u003E\n/// I\u0026#39;m assuming we\u0026#39;ll get the same MeshCollider order out as was created, so we\u0026#39;ll just keep a list of what\u003Cbr\u003E\n/// was used in the order it was used in and remove entries as they\u0026#39;re used\u003Cbr\u003E\nprivate static Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; CreateEntries(\u003Cbr\u003E\nMuksReader.Node tree, \u003Cbr\u003E\nDictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; dictionary = null)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (dictionary == null)\u003Cbr\u003E\ndictionary = new Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt;();\u003Cbr\u003E\n\u003Cbr\u003E\nif (tree.HasMeshCollider)\u003Cbr\u003E\nAddToDictionary(dictionary, CreateNodeUrl(tree), tree.IsConvex);\u003Cbr\u003E\n\u003Cbr\u003E\nforeach (var ch in tree.Children)\u003Cbr\u003E\nCreateEntries(ch, dictionary);\u003Cbr\u003E\n\u003Cbr\u003E\nreturn dictionary;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate static void AddToDictionary(Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; dictionary, string url, bool value)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (dictionary == null) throw new ArgumentNullException(\u0022dictionary\u0022);\u003Cbr\u003E\nif (url == null) throw new ArgumentNullException(\u0022url\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nQueue\u0026lt;bool\u0026gt; entries;\u003Cbr\u003E\nurl = url.Replace(\u0022 \u0022, string.Empty);\u003Cbr\u003E\n\u003Cbr\u003E\nif (!dictionary.TryGetValue(url, out entries))\u003Cbr\u003E\n{\u003Cbr\u003E\nentries = new Queue\u0026lt;bool\u0026gt;();\u003Cbr\u003E\ndictionary.Add(url, entries);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nentries.Enqueue(value);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate static string CreateNodeUrl(MuksReader.Node from)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (@from == null) throw new ArgumentNullException(\u0022from\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\nif (@from.Parent == null)\u003Cbr\u003E\nreturn @from.Name;\u003Cbr\u003E\n\u003Cbr\u003E\nreturn CreateNodeUrl(@from.Parent) \u002B \u0022/\u0022 \u002B @from.Name;\u003Cbr\u003E\n}\u003Cbr\u003E\n}[/code][/spoiler]\u003Cbr\u003E\n[spoiler=MuksReader][code]public class MuksReader : BinaryReader\u003Cbr\u003E\n{\u003Cbr\u003E\nprivate enum DataBlockType\u003Cbr\u003E\n{\u003Cbr\u003E\nNode = 0,\u003Cbr\u003E\nFinished = 1,\u003Cbr\u003E\nAnimation = 2,\u003Cbr\u003E\nMeshCollider = 3,\u003Cbr\u003E\nSphereCollider = 4, \u003Cbr\u003E\nCapsuleCollider = 5, \u003Cbr\u003E\nBoxCollider = 6,\u003Cbr\u003E\nMeshFilter = 7, \u003Cbr\u003E\nMeshRenderer = 8, \u003Cbr\u003E\nSkinnedMeshRenderer = 9, \u003Cbr\u003E\nMaterialSet = 10, \u003Cbr\u003E\nTextureSet = 12, \u003Cbr\u003E\nLight = 23,\u003Cbr\u003E\nTagAndLayer = 24, \u003Cbr\u003E\nMeshColliderTrigger = 25, \u003Cbr\u003E\nSphereColliderTrigger = 26, \u003Cbr\u003E\nCapsuleColliderTrigger = 27, \u003Cbr\u003E\nBoxColliderTrigger = 28, \u003Cbr\u003E\nWheelColliderTrigger = 29,\u003Cbr\u003E\nCamera = 30,\u003Cbr\u003E\nParticles = 31,\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic class Node\u003Cbr\u003E\n{\u003Cbr\u003E\npublic string Name = string.Empty;\u003Cbr\u003E\npublic List\u0026lt;Node\u0026gt; Children = new List\u0026lt;Node\u0026gt;();\u003Cbr\u003E\npublic bool HasMeshCollider = false;\u003Cbr\u003E\npublic bool IsConvex = true;\u003Cbr\u003E\npublic Node Parent;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nstruct MuFlags\u003Cbr\u003E\n{\u003Cbr\u003E\npublic int FlagRelatedToMeshRendererAndTextures;\u003Cbr\u003E\npublic string UnknownString;\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic class MaterialTextureCache\u003Cbr\u003E\n{\u003Cbr\u003E\nprivate readonly Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt; _textures = new Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt;();\u003Cbr\u003E\n\u003Cbr\u003E\npublic void Add(int textureIndex, string textureName)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (textureIndex \u0026lt; 0) return;\u003Cbr\u003E\n\u003Cbr\u003E\nInsert(textureIndex, textureName);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void Insert(int idx, string textureName)\u003Cbr\u003E\n{\u003Cbr\u003E\nList\u0026lt;string\u0026gt; list;\u003Cbr\u003E\n\u003Cbr\u003E\nif (!_textures.TryGetValue(idx, out list))\u003Cbr\u003E\n{\u003Cbr\u003E\nlist = new List\u0026lt;string\u0026gt;();\u003Cbr\u003E\n_textures.Add(idx, list);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nif (!list.Contains(textureName))\u003Cbr\u003E\nlist.Add(textureName);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic int GetMaterialCount()\u003Cbr\u003E\n{\u003Cbr\u003E\nreturn _textures.Keys.Count();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate const string MainTex = \u0022_MainTex\u0022;\u003Cbr\u003E\nprivate const string BumpMapTex = \u0022_BumpMap\u0022;\u003Cbr\u003E\nprivate const string EmissiveTex = \u0022_Emissive\u0022;\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic MuksReader(Stream input) : base(input)\u003Cbr\u003E\n{\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\npublic MuksReader(Stream input, Encoding encoding) : base(input, encoding)\u003Cbr\u003E\n{\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic Node LoadNodeTree()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar fileType = ReadInt32();\u003Cbr\u003E\nvar somehowMeshRendererRelated = ReadInt32();\u003Cbr\u003E\nvar unknown2 = ReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nreturn ReadNode(null, new MaterialTextureCache(), new MuFlags { FlagRelatedToMeshRendererAndTextures = somehowMeshRendererRelated, UnknownString = unknown2 });\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate Node ReadNode(Node parent, MaterialTextureCache cache, MuFlags flags)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar nodeName = ReadString();\u003Cbr\u003E\nvar node = new Node { Name = nodeName };\u003Cbr\u003E\n\u003Cbr\u003E\nif (parent != null)\u003Cbr\u003E\nparent.Children.Add(node);\u003Cbr\u003E\n\u003Cbr\u003E\nnode.Parent = parent;\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardQuaternion();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nwhile (PeekChar() != -1)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar nextBlockType = (DataBlockType)ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (nextBlockType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase DataBlockType.Node:\u003Cbr\u003E\nReadNode(node, cache, flags);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Finished:\u003Cbr\u003E\nreturn node;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshCollider:\u003Cbr\u003E\nReadMeshCollider(node);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshColliderTrigger:\u003Cbr\u003E\nReadMeshColliderTrigger(node);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nIgnoreBlock(nextBlockType, cache, flags);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nreturn node;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void ReadMeshCollider(Node current)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (current.HasMeshCollider)\u003Cbr\u003E\nthrow new Exception(\u0022This node already has a MeshCollider assigned so something has broken!\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\ncurrent.HasMeshCollider = true;\u003Cbr\u003E\ncurrent.IsConvex = ReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void ReadMeshColliderTrigger(Node current)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (current.HasMeshCollider)\u003Cbr\u003E\nthrow new Exception(\u0022This node already has a MeshCollider assigned so something has broken!\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\ncurrent.HasMeshCollider = true;\u003Cbr\u003E\nvar trigger = ReadBoolean();\u003Cbr\u003E\ncurrent.IsConvex = ReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void IgnoreBlock(DataBlockType type, MaterialTextureCache cache, MuFlags flags)\u003Cbr\u003E\n{\u003Cbr\u003E\nswitch (type)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase DataBlockType.Animation:\u003Cbr\u003E\nDiscardAnimation();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SphereCollider:\u003Cbr\u003E\nDiscardSphereCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.CapsuleCollider:\u003Cbr\u003E\nDiscardCapsuleCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.BoxCollider:\u003Cbr\u003E\nDiscardBoxCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshFilter:\u003Cbr\u003E\nDiscardMeshFilter();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshRenderer:\u003Cbr\u003E\nDiscardMeshRenderer(flags.FlagRelatedToMeshRendererAndTextures);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SkinnedMeshRenderer:\u003Cbr\u003E\nDiscardSkinnedMeshRenderer();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MaterialSet:\u003Cbr\u003E\nDiscardMaterialSet(flags.FlagRelatedToMeshRendererAndTextures, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.TextureSet:\u003Cbr\u003E\nDiscardTextureSet(cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Light:\u003Cbr\u003E\nDiscardLight(flags.FlagRelatedToMeshRendererAndTextures);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.TagAndLayer:\u003Cbr\u003E\nvar tag = ReadString();\u003Cbr\u003E\nvar layer = ReadInt32();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SphereColliderTrigger:\u003Cbr\u003E\nDiscardSphereColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.CapsuleColliderTrigger:\u003Cbr\u003E\nDiscardCapsuleColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.BoxColliderTrigger:\u003Cbr\u003E\nDiscardBoxColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.WheelColliderTrigger:\u003Cbr\u003E\nDiscardWheelColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Camera:\u003Cbr\u003E\nDiscardCamera();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Particles:\u003Cbr\u003E\nDiscardParticles();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized data block type: \u0022 \u002B type);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector2()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector3()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector4()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardQuaternion();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBounds()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardQuaternion()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMatrix()\u003Cbr\u003E\n{\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; 16; \u002B\u002Bi)\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardColor()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardAnimation()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numClips = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var clipIndex = 0; clipIndex \u0026lt; numClips; \u002B\u002BclipIndex)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nDiscardBounds();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nvar unknownNum = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var j = 0; j \u0026lt; unknownNum; \u002B\u002Bj)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nvar keyframeCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; keyframeCount; i\u002B\u002B)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMesh()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar entryType = (EntryType)ReadInt32();\u003Cbr\u003E\nif (entryType != EntryType.MeshStart)\u003Cbr\u003E\nthrow new Exception(\u0022Malformed mesh?\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\nvar numVertices = ReadInt32();\u003Cbr\u003E\nvar unknown = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nwhile ((entryType = (EntryType)ReadInt32()) != EntryType.MeshEnd)\u003Cbr\u003E\n{\u003Cbr\u003E\nswitch (entryType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase EntryType.MeshVerts:\u003Cbr\u003E\ncase EntryType.MeshNormals:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshUV:\u003Cbr\u003E\ncase EntryType.MeshUV2:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshTangents:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshTriangles:\u003Cbr\u003E\nvar numTriangles = ReadInt32();\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTriangles; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshBoneWeights:\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshBindPoses:\u003Cbr\u003E\nvar poseCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; poseCount; \u002B\u002Bi)\u003Cbr\u003E\nDiscardMatrix();\u003Cbr\u003E\n\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSphereCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCapsuleCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBoxCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMeshFilter()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMeshRenderer(int muFlag)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (muFlag \u0026gt;= 1)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nvar num = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; num; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSkinnedMeshRenderer()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar num = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; num; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nvar numStrings = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numStrings; \u002B\u002Bi)\u003Cbr\u003E\nReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterial(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nvar shader = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (shader)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase 1: // KSP/Diffuse\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 2: // \u0022KSP/Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 3: // \u0022KSP/Bumped\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 4: // \u0022KSP/Bumped Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 5: // \u0022KSP/Emissive/Diffuse\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 6: // \u0022KSP/Emissive/Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 7: // \u0022KSP/Emissive/Bumped Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 8: // \u0022KSP/Alpha/Cutoff\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 9: // \u0022KSP/Alpha/Cutoff Bumped\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 10: // \u0022KSP/Alpha/Translucent\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 11: // \u0022KSP/Alpha/Translucent Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 12: // \u0022KSP/Alpha/Unlit Transparent\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 13: // \u0022KSP/Unlit\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 14: // \u0022KSP/Particles/Alpha Blended\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 15: // \u0022KSP/Particles/Additive\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized value: \u0022 \u002B shader);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterialTexture(string textureName, MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar texIndex = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\ncache.Add(texIndex, textureName);\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterial4(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nvar propertyCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (int i = 0; i \u0026lt; propertyCount; \u002B\u002Bi)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar textureName = ReadString();\u003Cbr\u003E\nvar propertyType = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (propertyType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase 0:\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 1:\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 2:\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 3:\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 4:\u003Cbr\u003E\nDiscardMaterialTexture(textureName, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized value for property type: \u0022 \u002B propertyType);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterialSet(int muFlag, MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numTextures = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTextures; \u002B\u002Bi)\u003Cbr\u003E\nif (muFlag \u0026gt;= 4)\u003Cbr\u003E\nDiscardMaterial4(cache);\u003Cbr\u003E\nelse\u003Cbr\u003E\nDiscardMaterial(cache);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardTextureSet(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numTextures = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nif (numTextures != cache.GetMaterialCount())\u003Cbr\u003E\n{\u003Cbr\u003E\n// stock mu loader errors out here if these don\u0026#39;t match\u003Cbr\u003E\nreturn;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTextures; i\u002B\u002B)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardLight(int muFlag)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nif (muFlag \u0026gt; 1)\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSphereColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCapsuleColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBoxColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardWheelColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCamera()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardParticles()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (int i = 0; i \u0026lt; 5; i\u002B\u002B)\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}[/code][/spoiler]\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-11-19T09:04:08Z\u0022 title=\u002211/19/2015 09:04  AM\u0022 data-short=\u00228 yr\u0022\u003ENovember 19, 2015\u003C/time\u003E by xEvilReeperx\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"ModZero","CreatedById":89470,"CreatedDateTime":"2015-11-19T09:43:17Z","Content":"\nOn the other hand, I\u0026#39;d kinda expect Squad to [I]eventually[/I] support what this mod does. Probably not anytime soon, but it\u0026#39;s a Historical Necessity\u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00A2.\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-19T11:48:01Z","Content":"\n[quote name=\u0027xEvilReeperx\u0027]Yes, apparently the mu loader is now forcing all MeshColliders to convex which causes Unity to recompute them if they\u0026#39;re not already (hamfisted change for Unity 5.1 maybe? I read something about concave collider support being removed). This is causing the odd problems. Unfortunately, there isn\u0026#39;t any direct way to prevent the loader from ignoring the flag inside the mu format that I can find. \u003Cbr\u003E\n\u003Cbr\u003E\nOne solution is to hijack the load process, parse the mu for the correct value and set it back before the collider is recomputed... and yes it\u0026#39;s exactly as ugly as it sounds. Here\u0026#39;s my prototype which appears to work. Note that you must rename all affected mu\u0026#39;s to muks, so for example ksairstripv24.mu becomes ksairstripv24.muks. They\u0026#39;ll look the same as any regular loaded mu so you shouldn\u0026#39;t need to change any configs. \u003Cbr\u003E\n\u003Cbr\u003E\n[spoiler=MuksLoader][code][DatabaseLoaderAttrib(new [] { \u0022muks\u0022 })]\u003Cbr\u003E\npublic class MuksLoader : DatabaseLoaderModel_MU\u003Cbr\u003E\n{\u003Cbr\u003E\npublic override IEnumerator Load(UrlDir.UrlFile urlFile, FileInfo file)\u003Cbr\u003E\n{\u003Cbr\u003E\nDebug.Log(\u0022MuksLoader loading: \u0022 \u002B urlFile.url);\u003Cbr\u003E\n\u003Cbr\u003E\nyield return GameDatabase.Instance.StartCoroutine(base.Load(urlFile, file));\u003Cbr\u003E\n\u003Cbr\u003E\nif (obj == null)\u003Cbr\u003E\nyield break;\u003Cbr\u003E\n\u003Cbr\u003E\nusing (var fs = new FileStream(urlFile.fullPath, FileMode.Open))\u003Cbr\u003E\nusing (var mr = new MuksReader(fs))\u003Cbr\u003E\n{\u003Cbr\u003E\nvar topNode = mr.LoadNodeTree();\u003Cbr\u003E\nvar meshColliders = obj.GetComponentsInChildren\u0026lt;MeshCollider\u0026gt;(true);\u003Cbr\u003E\nvar convexEntries = CreateEntries(topNode);\u003Cbr\u003E\n\u003Cbr\u003E\nif (meshColliders.Length != convexEntries.Sum(kvp =\u0026gt; kvp.Value.Count))\u003Cbr\u003E\nDebug.LogWarning(\u0022Number of MeshCollider convex nodes does not match number of MeshColliders!\u0022); // whoops there\u0026#39;s a bug!\u003Cbr\u003E\n\u003Cbr\u003E\nforeach (var mc in meshColliders)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar url = HierarchyUtil.CompileID(mc.transform, mc.transform.root.name);\u003Cbr\u003E\n\u003Cbr\u003E\nQueue\u0026lt;bool\u0026gt; convexFlagQueue;\u003Cbr\u003E\n\u003Cbr\u003E\nif (convexEntries.TryGetValue(url, out convexFlagQueue))\u003Cbr\u003E\nmc.convex = convexFlagQueue.Dequeue();\u003Cbr\u003E\nelse Debug.LogWarning(\u0022Failed to get convex flag for \u0022 \u002B url);\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nif (convexEntries.Sum(kvp =\u0026gt; kvp.Value.Count) \u0026gt; 0)\u003Cbr\u003E\nDebug.LogWarning(\u0022Unused convex entries for \u0022 \u002B urlFile.url);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nyield return 0;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n/// This is probably a pretty crap way of doing this but because there can be multiple GameObjects with the\u003Cbr\u003E\n/// same url and a MeshCollider component, we won\u0026#39;t be able to tell their convex flags apart if they differ...\u003Cbr\u003E\n/// I\u0026#39;m assuming we\u0026#39;ll get the same MeshCollider order out as was created, so we\u0026#39;ll just keep a list of what\u003Cbr\u003E\n/// was used in the order it was used in and remove entries as they\u0026#39;re used\u003Cbr\u003E\nprivate static Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; CreateEntries(\u003Cbr\u003E\nMuksReader.Node tree, \u003Cbr\u003E\nDictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; dictionary = null)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (dictionary == null)\u003Cbr\u003E\ndictionary = new Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt;();\u003Cbr\u003E\n\u003Cbr\u003E\nif (tree.HasMeshCollider)\u003Cbr\u003E\nAddToDictionary(dictionary, CreateNodeUrl(tree), tree.IsConvex);\u003Cbr\u003E\n\u003Cbr\u003E\nforeach (var ch in tree.Children)\u003Cbr\u003E\nCreateEntries(ch, dictionary);\u003Cbr\u003E\n\u003Cbr\u003E\nreturn dictionary;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate static void AddToDictionary(Dictionary\u0026lt;string, Queue\u0026lt;bool\u0026gt;\u0026gt; dictionary, string url, bool value)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (dictionary == null) throw new ArgumentNullException(\u0022dictionary\u0022);\u003Cbr\u003E\nif (url == null) throw new ArgumentNullException(\u0022url\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nQueue\u0026lt;bool\u0026gt; entries;\u003Cbr\u003E\nurl = url.Replace(\u0022 \u0022, string.Empty);\u003Cbr\u003E\n\u003Cbr\u003E\nif (!dictionary.TryGetValue(url, out entries))\u003Cbr\u003E\n{\u003Cbr\u003E\nentries = new Queue\u0026lt;bool\u0026gt;();\u003Cbr\u003E\ndictionary.Add(url, entries);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nentries.Enqueue(value);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate static string CreateNodeUrl(MuksReader.Node from)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (@from == null) throw new ArgumentNullException(\u0022from\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\nif (@from.Parent == null)\u003Cbr\u003E\nreturn @from.Name;\u003Cbr\u003E\n\u003Cbr\u003E\nreturn CreateNodeUrl(@from.Parent) \u002B \u0022/\u0022 \u002B @from.Name;\u003Cbr\u003E\n}\u003Cbr\u003E\n}[/code][/spoiler]\u003Cbr\u003E\n[spoiler=MuksReader][code]public class MuksReader : BinaryReader\u003Cbr\u003E\n{\u003Cbr\u003E\nprivate enum DataBlockType\u003Cbr\u003E\n{\u003Cbr\u003E\nNode = 0,\u003Cbr\u003E\nFinished = 1,\u003Cbr\u003E\nAnimation = 2,\u003Cbr\u003E\nMeshCollider = 3,\u003Cbr\u003E\nSphereCollider = 4, \u003Cbr\u003E\nCapsuleCollider = 5, \u003Cbr\u003E\nBoxCollider = 6,\u003Cbr\u003E\nMeshFilter = 7, \u003Cbr\u003E\nMeshRenderer = 8, \u003Cbr\u003E\nSkinnedMeshRenderer = 9, \u003Cbr\u003E\nMaterialSet = 10, \u003Cbr\u003E\nTextureSet = 12, \u003Cbr\u003E\nLight = 23,\u003Cbr\u003E\nTagAndLayer = 24, \u003Cbr\u003E\nMeshColliderTrigger = 25, \u003Cbr\u003E\nSphereColliderTrigger = 26, \u003Cbr\u003E\nCapsuleColliderTrigger = 27, \u003Cbr\u003E\nBoxColliderTrigger = 28, \u003Cbr\u003E\nWheelColliderTrigger = 29,\u003Cbr\u003E\nCamera = 30,\u003Cbr\u003E\nParticles = 31,\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic class Node\u003Cbr\u003E\n{\u003Cbr\u003E\npublic string Name = string.Empty;\u003Cbr\u003E\npublic List\u0026lt;Node\u0026gt; Children = new List\u0026lt;Node\u0026gt;();\u003Cbr\u003E\npublic bool HasMeshCollider = false;\u003Cbr\u003E\npublic bool IsConvex = true;\u003Cbr\u003E\npublic Node Parent;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nstruct MuFlags\u003Cbr\u003E\n{\u003Cbr\u003E\npublic int FlagRelatedToMeshRendererAndTextures;\u003Cbr\u003E\npublic string UnknownString;\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic class MaterialTextureCache\u003Cbr\u003E\n{\u003Cbr\u003E\nprivate readonly Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt; _textures = new Dictionary\u0026lt;int, List\u0026lt;string\u0026gt;\u0026gt;();\u003Cbr\u003E\n\u003Cbr\u003E\npublic void Add(int textureIndex, string textureName)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (textureIndex \u0026lt; 0) return;\u003Cbr\u003E\n\u003Cbr\u003E\nInsert(textureIndex, textureName);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void Insert(int idx, string textureName)\u003Cbr\u003E\n{\u003Cbr\u003E\nList\u0026lt;string\u0026gt; list;\u003Cbr\u003E\n\u003Cbr\u003E\nif (!_textures.TryGetValue(idx, out list))\u003Cbr\u003E\n{\u003Cbr\u003E\nlist = new List\u0026lt;string\u0026gt;();\u003Cbr\u003E\n_textures.Add(idx, list);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nif (!list.Contains(textureName))\u003Cbr\u003E\nlist.Add(textureName);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic int GetMaterialCount()\u003Cbr\u003E\n{\u003Cbr\u003E\nreturn _textures.Keys.Count();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate const string MainTex = \u0022_MainTex\u0022;\u003Cbr\u003E\nprivate const string BumpMapTex = \u0022_BumpMap\u0022;\u003Cbr\u003E\nprivate const string EmissiveTex = \u0022_Emissive\u0022;\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic MuksReader(Stream input) : base(input)\u003Cbr\u003E\n{\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\npublic MuksReader(Stream input, Encoding encoding) : base(input, encoding)\u003Cbr\u003E\n{\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\npublic Node LoadNodeTree()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar fileType = ReadInt32();\u003Cbr\u003E\nvar somehowMeshRendererRelated = ReadInt32();\u003Cbr\u003E\nvar unknown2 = ReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nreturn ReadNode(null, new MaterialTextureCache(), new MuFlags { FlagRelatedToMeshRendererAndTextures = somehowMeshRendererRelated, UnknownString = unknown2 });\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate Node ReadNode(Node parent, MaterialTextureCache cache, MuFlags flags)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar nodeName = ReadString();\u003Cbr\u003E\nvar node = new Node { Name = nodeName };\u003Cbr\u003E\n\u003Cbr\u003E\nif (parent != null)\u003Cbr\u003E\nparent.Children.Add(node);\u003Cbr\u003E\n\u003Cbr\u003E\nnode.Parent = parent;\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardQuaternion();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nwhile (PeekChar() != -1)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar nextBlockType = (DataBlockType)ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (nextBlockType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase DataBlockType.Node:\u003Cbr\u003E\nReadNode(node, cache, flags);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Finished:\u003Cbr\u003E\nreturn node;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshCollider:\u003Cbr\u003E\nReadMeshCollider(node);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshColliderTrigger:\u003Cbr\u003E\nReadMeshColliderTrigger(node);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nIgnoreBlock(nextBlockType, cache, flags);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nreturn node;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void ReadMeshCollider(Node current)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (current.HasMeshCollider)\u003Cbr\u003E\nthrow new Exception(\u0022This node already has a MeshCollider assigned so something has broken!\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\ncurrent.HasMeshCollider = true;\u003Cbr\u003E\ncurrent.IsConvex = ReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void ReadMeshColliderTrigger(Node current)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (current.HasMeshCollider)\u003Cbr\u003E\nthrow new Exception(\u0022This node already has a MeshCollider assigned so something has broken!\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\ncurrent.HasMeshCollider = true;\u003Cbr\u003E\nvar trigger = ReadBoolean();\u003Cbr\u003E\ncurrent.IsConvex = ReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void IgnoreBlock(DataBlockType type, MaterialTextureCache cache, MuFlags flags)\u003Cbr\u003E\n{\u003Cbr\u003E\nswitch (type)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase DataBlockType.Animation:\u003Cbr\u003E\nDiscardAnimation();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SphereCollider:\u003Cbr\u003E\nDiscardSphereCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.CapsuleCollider:\u003Cbr\u003E\nDiscardCapsuleCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.BoxCollider:\u003Cbr\u003E\nDiscardBoxCollider();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshFilter:\u003Cbr\u003E\nDiscardMeshFilter();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MeshRenderer:\u003Cbr\u003E\nDiscardMeshRenderer(flags.FlagRelatedToMeshRendererAndTextures);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SkinnedMeshRenderer:\u003Cbr\u003E\nDiscardSkinnedMeshRenderer();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.MaterialSet:\u003Cbr\u003E\nDiscardMaterialSet(flags.FlagRelatedToMeshRendererAndTextures, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.TextureSet:\u003Cbr\u003E\nDiscardTextureSet(cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Light:\u003Cbr\u003E\nDiscardLight(flags.FlagRelatedToMeshRendererAndTextures);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.TagAndLayer:\u003Cbr\u003E\nvar tag = ReadString();\u003Cbr\u003E\nvar layer = ReadInt32();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.SphereColliderTrigger:\u003Cbr\u003E\nDiscardSphereColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.CapsuleColliderTrigger:\u003Cbr\u003E\nDiscardCapsuleColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.BoxColliderTrigger:\u003Cbr\u003E\nDiscardBoxColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.WheelColliderTrigger:\u003Cbr\u003E\nDiscardWheelColliderTrigger();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Camera:\u003Cbr\u003E\nDiscardCamera();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase DataBlockType.Particles:\u003Cbr\u003E\nDiscardParticles();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized data block type: \u0022 \u002B type);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector2()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector3()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardVector4()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardQuaternion();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBounds()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardQuaternion()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMatrix()\u003Cbr\u003E\n{\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; 16; \u002B\u002Bi)\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardColor()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardAnimation()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numClips = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var clipIndex = 0; clipIndex \u0026lt; numClips; \u002B\u002BclipIndex)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nDiscardBounds();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nvar unknownNum = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var j = 0; j \u0026lt; unknownNum; \u002B\u002Bj)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nvar keyframeCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; keyframeCount; i\u002B\u002B)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMesh()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar entryType = (EntryType)ReadInt32();\u003Cbr\u003E\nif (entryType != EntryType.MeshStart)\u003Cbr\u003E\nthrow new Exception(\u0022Malformed mesh?\u0022);\u003Cbr\u003E\n\u003Cbr\u003E\nvar numVertices = ReadInt32();\u003Cbr\u003E\nvar unknown = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nwhile ((entryType = (EntryType)ReadInt32()) != EntryType.MeshEnd)\u003Cbr\u003E\n{\u003Cbr\u003E\nswitch (entryType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase EntryType.MeshVerts:\u003Cbr\u003E\ncase EntryType.MeshNormals:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshUV:\u003Cbr\u003E\ncase EntryType.MeshUV2:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshTangents:\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numVertices; \u002B\u002Bi)\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshTriangles:\u003Cbr\u003E\nvar numTriangles = ReadInt32();\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTriangles; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshBoneWeights:\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\ncase EntryType.MeshBindPoses:\u003Cbr\u003E\nvar poseCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; poseCount; \u002B\u002Bi)\u003Cbr\u003E\nDiscardMatrix();\u003Cbr\u003E\n\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSphereCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCapsuleCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBoxCollider()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMeshFilter()\u003Cbr\u003E\n{\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMeshRenderer(int muFlag)\u003Cbr\u003E\n{\u003Cbr\u003E\nif (muFlag \u0026gt;= 1)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\nvar num = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; num; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSkinnedMeshRenderer()\u003Cbr\u003E\n{\u003Cbr\u003E\nvar num = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; num; \u002B\u002Bi)\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nvar numStrings = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numStrings; \u002B\u002Bi)\u003Cbr\u003E\nReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardMesh();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterial(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\n\u003Cbr\u003E\nvar shader = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (shader)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase 1: // KSP/Diffuse\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 2: // \u0022KSP/Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 3: // \u0022KSP/Bumped\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 4: // \u0022KSP/Bumped Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 5: // \u0022KSP/Emissive/Diffuse\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 6: // \u0022KSP/Emissive/Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 7: // \u0022KSP/Emissive/Bumped Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardMaterialTexture(EmissiveTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 8: // \u0022KSP/Alpha/Cutoff\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 9: // \u0022KSP/Alpha/Cutoff Bumped\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardMaterialTexture(BumpMapTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 10: // \u0022KSP/Alpha/Translucent\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 11: // \u0022KSP/Alpha/Translucent Specular\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 12: // \u0022KSP/Alpha/Unlit Transparent\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 13: // \u0022KSP/Unlit\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 14: // \u0022KSP/Particles/Alpha Blended\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 15: // \u0022KSP/Particles/Additive\u0022\u003Cbr\u003E\nDiscardMaterialTexture(MainTex, cache);\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized value: \u0022 \u002B shader);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterialTexture(string textureName, MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar texIndex = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\ncache.Add(texIndex, textureName);\u003Cbr\u003E\n\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\nDiscardVector2();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterial4(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nvar propertyCount = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (int i = 0; i \u0026lt; propertyCount; \u002B\u002Bi)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar textureName = ReadString();\u003Cbr\u003E\nvar propertyType = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nswitch (propertyType)\u003Cbr\u003E\n{\u003Cbr\u003E\ncase 0:\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 1:\u003Cbr\u003E\nDiscardVector4();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 2:\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 3:\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ncase 4:\u003Cbr\u003E\nDiscardMaterialTexture(textureName, cache);\u003Cbr\u003E\nbreak;\u003Cbr\u003E\n\u003Cbr\u003E\ndefault:\u003Cbr\u003E\nthrow new NotImplementedException(\u0022Unrecognized value for property type: \u0022 \u002B propertyType);\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardMaterialSet(int muFlag, MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numTextures = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTextures; \u002B\u002Bi)\u003Cbr\u003E\nif (muFlag \u0026gt;= 4)\u003Cbr\u003E\nDiscardMaterial4(cache);\u003Cbr\u003E\nelse\u003Cbr\u003E\nDiscardMaterial(cache);\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardTextureSet(MaterialTextureCache cache)\u003Cbr\u003E\n{\u003Cbr\u003E\nvar numTextures = ReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nif (numTextures != cache.GetMaterialCount())\u003Cbr\u003E\n{\u003Cbr\u003E\n// stock mu loader errors out here if these don\u0026#39;t match\u003Cbr\u003E\nreturn;\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nfor (var i = 0; i \u0026lt; numTextures; i\u002B\u002B)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadString();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardLight(int muFlag)\u003Cbr\u003E\n{\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n\u003Cbr\u003E\nif (muFlag \u0026gt; 1)\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardSphereColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCapsuleColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardBoxColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardWheelColliderTrigger()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardVector3();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardCamera()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\n}\u003Cbr\u003E\n\u003Cbr\u003E\n\u003Cbr\u003E\nprivate void DiscardParticles()\u003Cbr\u003E\n{\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\n\u003Cbr\u003E\nfor (int i = 0; i \u0026lt; 5; i\u002B\u002B)\u003Cbr\u003E\nDiscardColor();\u003Cbr\u003E\n\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadBoolean();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadSingle();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\nReadInt32();\u003Cbr\u003E\n}\u003Cbr\u003E\n}[/code][/spoiler][/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nOh ugh. That\u0026#39;s kludgy. \u003Cbr\u003E\nThe easier fix would be for the devs to have their new code ignore anything flagged as Static = True in a config. If that shows up in 1.1 then I\u0026#39;ll be very happy.\u003Cbr\u003E\nWhilst your solution is appreciated, I agree, it\u0026#39;s ugly. Too ugly though.\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027ModZero\u0027]On the other hand, I\u0026#39;d kinda expect Squad to [I]eventually[/I] support what this mod does. Probably not anytime soon, but it\u0026#39;s a Historical Necessity\u00C3\u00A2\u00E2\u20AC\u017E\u00C2\u00A2.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nI hope so too. However, considering the unmodability of the KSC, I doubt it\u0026#39;ll be functionality that is exposed any more than it already is.\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027colmo\u0027]That sucks a lot. This mod has become a bedrock for many, and I was looking forward to it on my new rig.\u003Cbr\u003E\n\u003Cbr\u003E\nThinking pragmatically, we know the colliders are busted. What still does work? Can we repurpose any of it, or break it up? Could we convert statics to parts?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nTheoretically I could go over every asset and make sure all colliders are convex. However, large static models tend to need far more complex colliders than parts, making concave colliders something of a necessity. They\u0026#39;ve never caused problems on statics before, which is one of the reasons this change is so frustrating. It just did not consider the impact on statics. IE My modding efforts have been ignored. Again.\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027CattyNebulart\u0027]*Hugs* Aww. I\u0026#39;m sorry to hear that. I was going to take a look to see if I could find the problem but I can;t even find the source. In the meantime take this donation in the hopes you come back to it in a few months.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThank you. I will get the latest KK source up on GitHub this week, so you\u0026#39;re welcome to have a poke at the code.\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2015-11-19T16:17:49Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]Oh ugh. That\u0026#39;s kludgy. \u003Cbr\u003E\nThe easier fix would be for the devs to have their new code ignore anything flagged as Static = True in a config. If that shows up in 1.1 then I\u0026#39;ll be very happy.[/quote]\u003Cbr\u003E\nHonestly, that is just as kludgy. The complete model information would then be in potentially two different files. Might be time to write your own loader. 99.9% of the stuff loaded by the Mu loader will be attached to rigidbodies, and concave colliders on dynamic bodies aren\u0026#39;t allowed in 5.1. That\u0026#39;s probably the root cause of this change\n"},{"CreatedByName":"blowfish","CreatedById":119688,"CreatedDateTime":"2015-11-19T17:31:16Z","Content":"\nI\u0026#39;m not trying to excuse Squad\u0026#39;s doing this without telling anyone, but aren\u0026#39;t there justifiable performance concerns for why all colliders in KSP should be convex, even if it requires more colliders?\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-19T18:35:39Z","Content":"\n[quote name=\u0027blowfish\u0027]I\u0026#39;m not trying to excuse Squad\u0026#39;s doing this without telling anyone, but aren\u0026#39;t there justifiable performance concerns for why all colliders in KSP should be convex, even if it requires more colliders?[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nNope. It\u0026#39;s an archaic tech solution for a second-rate game engine. It\u0026#39;s not Squad, it\u0026#39;s Unity.\n"},{"CreatedByName":"JZG","CreatedById":153626,"CreatedDateTime":"2015-11-20T03:54:28Z","Content":"\nI am going to miss this mod so much. Thanks for all the great work AlphaAsh, still keeping my fingers crossed for a 1.1 miracle.\n"},{"CreatedByName":"theonegalen","CreatedById":71012,"CreatedDateTime":"2015-11-20T22:43:20Z","Content":"\nMan, this is quite the disappointment. I\u0026#39;ve loved KK/Kerbin-side ever since it came out. It\u0026#39;s now the major reason I\u0026#39;m not going to ever delete my 1.0.4 install. While I hope for (but don\u0026#39;t expect) a fix in 1.1, I also want to wish you all the best in your future gaming and modding endeavors! Thank you so much for all your work over the years, AlphaAsh!\n"},{"CreatedByName":"Popeholden","CreatedById":93102,"CreatedDateTime":"2015-11-21T01:47:23Z","Content":"\nThis is an amazing mod, thanks for all your work\n"},{"CreatedByName":"Tricky14","CreatedById":145768,"CreatedDateTime":"2015-11-21T10:32:41Z","Content":"\n[quote name=\u0027AlphaAsh\u0027]I\u0026#39;m tired, fed up and Fallout 4 is calling me.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nI\u0026#39;m sorry to hear that, it does sound like you need a break. A fair warning though. Fallout 4 is ridden with bugs, even by Bethsoft\u0026#39;s release standards (their recent status update doesn\u0026#39;t really do it justice). I help maintain a bug tracker and I don\u0026#39;t really see them fix even a quarter of this stuff with the amount of patchwork they usually do. Not even before the year is out, just ever. Unless you don\u0026#39;t mind jumping from the frying pan into the fire, I\u0026#39;d wait a couple months for the mod community to sort half of it out.\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-21T10:55:49Z","Content":"\n[quote name=\u0027Tricky14\u0027]I\u0026#39;m sorry to hear that, it does sound like you need a break. A fair warning though. Fallout 4 is ridden with bugs, even by Bethsoft\u0026#39;s release standards (their recent status update doesn\u0026#39;t really do it justice). I help maintain a bug tracker and I don\u0026#39;t really see them fix even a quarter of this stuff with the amount of patchwork they usually do. Not even before the year is out, just ever. Unless you don\u0026#39;t mind jumping from the frying pan into the fire, I\u0026#39;d wait a couple months for the mod community to sort half of it out.[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThe bugs don\u0026#39;t really bother me in FO4 so far but then I\u0026#39;ve only played it for a couple of dozen hours. I\u0026#39;ll probably worry more about Bethesda\u0026#39;s shoddy support ethic when I start modding it.\n"},{"CreatedByName":"comham","CreatedById":43245,"CreatedDateTime":"2015-11-21T10:58:42Z","Content":"\nwow, thanks squad, you spipped up again and ruined the only mod that made kerbin feel like more than a spherical heightmap\n"},{"CreatedByName":"AlphaAsh","CreatedById":105348,"CreatedDateTime":"2015-11-21T11:03:03Z","Content":"\n[quote name=\u0027theonegalen\u0027]I also want to wish you all the best in your future gaming and modding endeavors! Thank you so much for all your work over the years, AlphaAsh![/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nThanks. Don\u0026#39;t worry though, I\u0026#39;m not done with KSP. I\u0026#39;m just done with trying to fix KK for now. It stopped being fun.\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=silver][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027comham\u0027]wow, thanks squad, you spipped up again and ruined the only mod that made kerbin feel like more than a spherical heightmap[/QUOTE]\u003Cbr\u003E\n\u003Cbr\u003E\nIf you\u0026#39;re happy to work within the new constraints on colliders, theoretically KK should still work fine with static content produced. Going over every asset in KerbinSide is just not something I\u0026#39;m willing to do and the reality is a lot of the assets need complex, concave colliders due to their complexity and size. Runways are a good example - you can\u0026#39;t get away with a single convex collider because the length and width of such a collider ends up with mystery tears as far as KSP\u0026#39;s physics is concerned.\n"},{"CreatedByName":"amankd","CreatedById":135588,"CreatedDateTime":"2015-11-21T13:32:28Z","Content":"\nso lemme get this straight, as im activly making a kk mod, they should work fine aslong as all the coliders are convex? so splitting the model into lots f small sections and making each a convex collider should work?\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\nim not kidding but should we all see if we can contnct squad about this and see if theyere is anythig they could do officially...\u003Cbr\u003E\n\u003Cbr\u003E\n[COLOR=\u0022silver\u0022][SIZE=1]- - - Updated - - -[/SIZE][/COLOR]\u003Cbr\u003E\n\u003Cbr\u003E\n[quote name=\u0027CattyNebulart\u0027]There is also a bug that slows everything to a crawl with the error message \u0022The hull has more than 255 polygons. This is invalid.\u0022\u003Cbr\u003E\n\u003Cbr\u003E\n[URL]http://i.imgur.com/TsaWfbu.jpg[/URL]\u003Cbr\u003E\n\u003Cbr\u003E\nI think it is the desert base as I took off from the old ksc.[/QUOTE]\u003Cbr\u003E\nthis is because it is trying to apply a mesh collider to parts with more than the 255 poly limit it apperes\n"}]}