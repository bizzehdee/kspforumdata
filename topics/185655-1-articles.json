{"TopicId":185655,"ForumId":15,"TopicTitle":"FXModuleLookAtConstraint model issues","CreatedByName":"Box of Stardust","CreatedById":112527,"CreatedDateTime":"2019-06-20T06:26:21Z","PageNum":1,"Articles":[{"CreatedByName":"Box of Stardust","CreatedById":112527,"CreatedDateTime":"2019-06-20T06:26:21Z","Content":"\n\u003Cp\u003E\nI\u0027m having an issue where the constraint doesn\u0027t seem to choose an \u0022up\u0022 axis until the part is moved around in some way, which is a problem, since the mesh this is relying on has a specific orientation. What ends up happening is that the mesh ends up starting sideways, until the part it\u0027s looking at is moved, then it seems that the node I have it parented to chooses the direction the Y-axis is pointed once rotated out of its starting position.\n\u003C/p\u003E\n\u003Cp\u003E\nI need a workaround for this. This whole complicated setup is pretty much a proportional reduction system\u00A0for linking pieces to a gimbaling piece, but needs a proportionally less range of rotation.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n... I would also not like my hours of trigonometry to go to waste, figuring out the proper lengths for this lever system I created...\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nPrior to deciding to do this lever-link system, I had a hacky solution using separate gimbals, which worked, but adds more gimbal toggles and sliders, which isn\u0027t really a good thing.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nWhy couldn\u0027t it just be simple after all this work...\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cs\u003EIssue \u003Cem\u003Eseems to be\u003C/em\u003E solved. Issue seemingly related due to mesh geometry axis orientation itself, not rotation of any of the \u0022nodes\u0022 in the linkage.\u003C/s\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nProblem not solved.\n\u003C/p\u003E\n\u003Cp\u003E\nEDIT\n\u003C/p\u003E\n\u003Cp\u003E\nOkay, the workaround I did was to offset the \u0022initial\u0022 starting position by offsetting the \u0022look\u0022 node so that the \u0022follow\u0022 node will be rotated at a non-zero value at the engine gimbal\u0027s neutral zero position, which \u0022assigns\u0022 the \u0022follow\u0022 node its up vector. The \u0022look\u0022 node is positioned such that the \u0022follow\u0022 node will never reach and cross a zero rotation value, ensuring that the \u0022follow\u0022 node\u0027s up axis does not flip.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-06-25T02:09:16Z\u0022 title=\u002206/25/2019 02:09  AM\u0022 data-short=\u00225 yr\u0022\u003EJune 25, 2019\u003C/time\u003E by Box of Stardust\u003C/strong\u003E\n\u003C/span\u003E\n"}]}