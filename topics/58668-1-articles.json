{"TopicId":58668,"ForumId":29,"TopicTitle":"Adding an resource cost to modules that don\u0026#039;t have them","CreatedByName":"Hyomoto","CreatedById":64780,"CreatedDateTime":"2014-01-02T22:30:49Z","PageNum":1,"Articles":[{"CreatedByName":"Hyomoto","CreatedById":64780,"CreatedDateTime":"2014-01-02T22:30:49Z","Content":"\n\u003Cp\u003EI understand the basic premise, (this is using module manager, but that should be irrelevant as far as scope is concerned)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E@PART[mk1pod]\u003Cbr\u003E{\u003Cbr\u003E\t@MODULE[ModuleCommand]\u003Cbr\u003E\t{\u003Cbr\u003E\t\tRESOURCE\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tname = ElectricCharge\u003Cbr\u003E\t\t\trate = 0.007\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWorks as expected, but that\u0027s apparently only because it is defined within that module, a la for probes? I tried adding a passive electricity cost to SAS,\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003E\t@MODULE[ModuleSAS]\u003Cbr\u003E\t{\u003Cbr\u003E\t\tRESOURCE\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tname = ElectricCharge\u003Cbr\u003E\t\t\trate = 0.005\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBut as someone may already know, it had no effect. SAS doesn\u0027t have/use a charge. Is this the sort of change that requires a plug-in (or have I made a gaff)? And a follow-up question, is there a plug-in that has this functionality? The basic premise is simply I\u0027d like SAS to consume a charge when on, and none when off. The scope of this question doesn\u0027t include a how to write plug-ins, but if you have some basic suggestions as to where to start, I won\u0027t turn it down.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-02T22:42:34Z\u0022 title=\u002201/02/2014 10:42  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 2, 2014\u003C/time\u003E by Hyomoto\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2014-01-03T01:04:13Z","Content":"\n\u003Cp\u003ECfg files are settings files. They only tap into what the code already supports. If the module doesn\u0027t support \u0022adding a resource cost by adding a confignode\u0022 then adding a confignode won\u0027t even be noticed by the module.\u003C/p\u003E\u003Cp\u003EAlso, plugins don\u0027t really work like that. You could make your own SAS module that has that feature, or you could make a separate module that detects when SAS is on and draws electricity itself, but you can\u0027t really make plugins to modify other classes on the fly.\u003C/p\u003E\u003Cp\u003EThere are some *great* tutorials stickied in this very forum btw; to get started you need a development environment (say, Visual C# Express if you\u0027re using Windows) and you need to set it up for KSP (guide in this forum and/or on the KSP wiki). Then you need to, well, learn enough C# to get by--there are tons of \u0022getting started in C#\u0022 tutorials on the internet. Finally, to get started in KSP C# writing, you can look over TaranisElsu\u0027s wonderful examples in this forum.\u003C/p\u003E\n"},{"CreatedByName":"DiEvAl","CreatedById":66247,"CreatedDateTime":"2014-01-03T08:43:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003E...but you can\u0027t really make plugins to modify other classes on the fly.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, this is not quite true. I think you could unload a stock class, inject some IL code into it and then reload it. But don\u0027t do it. It\u0027s a Bad Thing.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-01-03T09:09:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022DiEvAl\u0022 data-cite=\u0022DiEvAl\u0022\u003E\u003Cdiv\u003EWell, this is not quite true. I think you could unload a stock class, inject some IL code into it and then reload it. But don\u0027t do it. It\u0027s a Bad Thing.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIL injection works statically (i.e. injection happens before KSP is launched) but as far as I know, you can\u0027t inject IL into an existing class definition for a PartModule. However, you could probably make a new class definition with injected code and swap out existing type references for the new one.\u003C/p\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2014-01-03T09:21:37Z","Content":"\n\u003Cp\u003EModuleSAS doesn\u0027t do anything interesting since 0.20, I believe. You want ModuleReactionWheel. \u003C/p\u003E\u003Cp\u003EIt should be possible to derive a class from ModuleReactionWheel and just tack the resource consumption functionality on, though, then do a global ModuleManager replacement. It doesn\u0027t have an OnUpdate, so you could in theory do your stuff in there, though you would need to do your own time tracking -- that would allow you to get away relatively lightly.\u003C/p\u003E\u003Cp\u003EIt\u0027s probably more future-proof and compatibility-proof to create a module that seeks out the ModuleReactionWheel on the same pod it\u0027s attached to, checks if it\u0027s active (thatReactionWheelModule.State == ModuleReactionWheel.WheelState.Active) and if it is, consume a resource (part.RequestResource(whatever,amount)), then attach it with ModuleManager to everything that has ModuleReactionWheel.\u003C/p\u003E\n"},{"CreatedByName":"Hyomoto","CreatedById":64780,"CreatedDateTime":"2014-01-06T02:49:46Z","Content":"\n\u003Cp\u003EThanks Mihara, but unfortunately SAS is exactly what I\u0027m interested in. But I think I understand what you are saying, in Ruby you could simply alias your method and then call the alias to essentially \u0027stack\u0027 modifications to a basic method. That\u0027s one of the most interesting languages I\u0027ve tinkered around with, but I am just a hobbyist programmer and C# makes sense, but its a bit complex. I liked QBasic where it was either a string or a number \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E Trying to decide if a number is supposed to be a float or a double or a decimal makes me realize I need to take a class.\u003C/p\u003E\u003Cp\u003EOn the topic material though, the reaction wheels don\u0027t power the RCS or the ailerons. I just looking to tinker, so as I see it, Squad made a gaff when they basically combined SAS and the reaction wheels. In doing so, they basically ensured the player will always enjoy a handicap. I understand that KSP, at its core, has a steep learning curve and they have no desire to pile additional difficulty onto the player. However, in doing so they have created a reliance on a system. I would like to separate them for personal use, and luckily the two are still separate internally, and so it\u0027s exceedingly easy to do. All I have to do is strip the reaction wheels out of the command pods. The end. The reaction wheels already show up later in the science tree, so it\u0027s not really all that big of a change to make. However, I would also like to take SAS out of the command pod. And for that reason, I was wondering if there was a way to make it require a resource. It may not do anything specifically on its own, but it does govern areas of the craft and can be turned on and off.\u003C/p\u003E\u003Cp\u003EWithout getting too much into design theories, RCS is a finite resource, but electricity is infinite (near). Therefore based on cost and weight, it is inherently more productive to include reaction wheels over RCS. The reaction wheels have the added benefit of not causing and unintended changes in velocity. They are really the most \u0027arcade\u0027 part of the game. I\u0027m not against them, I just think they should be unlocked like RCS and not simply given to the player to create a reliance on first thing. In this case, not given to me. So suffice it to say that I feel a good way to handle some of the problem of infinite electricity is simply to allow the player to spend it on more things and therefore create a situation where the player is interested in RCS because \u003Cem\u003Eit doesn\u0027t cost electricity\u003C/em\u003E.\u003C/p\u003E\u003Cp\u003EAnyways, thanks for the replies. Mihara, I think you are right. It would be easiest is to make a module that checks if SAS is on and applies a resource drain. I would be surprised if KSP\u0027s stock modules use separate code, it should be possible to hook into something like that, right?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-06T03:10:49Z\u0022 title=\u002201/06/2014 03:10  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 6, 2014\u003C/time\u003E by Hyomoto\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Mihara","CreatedById":59752,"CreatedDateTime":"2014-01-06T03:40:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hyomoto\u0022 data-cite=\u0022Hyomoto\u0022\u003E\u003Cdiv\u003EThanks Mihara, but unfortunately SAS is exactly what I\u0027m interested in.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt literally doesn\u0027t do anything and has no on/off setting. If you want to consume power while the \u0022SAS\u0022 lamp is lit up, your job is actually simpler, because you don\u0027t need to locate the SAS module, but instead want to ask the game about the state of the global SAS toggle: \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eclass MySASPowerConsumer: PartModule\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E\tprivate int sasGroupNumber;\u003Cbr\u003E\t[KSPField]\u003Cbr\u003E\tpublic string resourceName;\u003Cbr\u003E\t[KSPField]\u003Cbr\u003E\tpublic float resourceAmount;\u003Cbr\u003E\u003Cbr\u003E\tpublic void Start() \u003Cbr\u003E\t{\u003Cbr\u003E\t\tsasGroupNumber = BaseAction.GetGroupIndex(KSPActionGroup.SAS);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic override void OnFixedUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (FlightGlobals.ActiveVessel.ActionGroups.groups[sasGroupNumber]) {\u003Cbr\u003E\t\t\tpart.RequestResource(resourceName,resourceAmount);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI didn\u0027t compile it, but I think that\u0027s all it would take really. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hyomoto\u0022 data-cite=\u0022Hyomoto\u0022\u003E\u003Cdiv\u003EHowever, I would also like to take SAS out of the command pod. And for that reason, I was wondering if there was a way to make it require a resource. It may not do anything specifically on its own, but it does govern areas of the craft and can be turned on and off.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI.e. you want to take the PID controller out? Well, you could also have your module just FlightGlobals.ActiveVessel.ActionGroups.groups[sasGroupNumber] = false; instead and SAS would just immediately turn off when anything enabled it. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E But I don\u0027t recommend it, because:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hyomoto\u0022 data-cite=\u0022Hyomoto\u0022\u003E\u003Cdiv\u003EWithout getting too much into design theories, RCS is a finite resource, but electricity is infinite (near).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EModuleReactionWheels can consume any resource, including monopropellant. Why don\u0027t you make it do that instead?\u003C/p\u003E\n"},{"CreatedByName":"Hyomoto","CreatedById":64780,"CreatedDateTime":"2014-01-07T02:14:47Z","Content":"\n\u003Cp\u003ESo then I have to ask this, if it does nothing, when did that start? I\u0027ve been under the impression of two things, one that it controls the amount of force being used by all controls to maintain a heading, and two, that it can be turned off and on. If you are saying that is untrue, I have to point out that you can turn off the reaction wheels in your pod and still use SAS to control, for instance, ailerons. Now, I\u0027ll admit there is no command pod that has SAS and no reaction wheels, it is possible they do the controlling but I\u0027d have to test it out myself before I could really believe it. I\u0027ll try ripping SAS out of a pod and leaving the wheels to see for myself.\u003C/p\u003E\u003Cp\u003EAlso, thanks for the example code. I\u0027ll give your plugin a try, and yes, I don\u0027t see why it wouldn\u0027t work. It should be a very simple operation. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Right now I\u0027m also working on that all-IVA mission to the Mun featuring your monitors, so I\u0027ll let you know how it turns out as it comes up!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-07T02:19:01Z\u0022 title=\u002201/07/2014 02:19  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 7, 2014\u003C/time\u003E by Hyomoto\u003C/strong\u003E\n\u003C/span\u003E\n"}]}