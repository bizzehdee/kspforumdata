{"TopicId":109462,"ForumId":55,"TopicTitle":"wheel drag/friction on different terrain?","CreatedByName":"Beetlecat","CreatedById":92207,"CreatedDateTime":"2015-05-16T04:40:00Z","PageNum":1,"Articles":[{"CreatedByName":"Beetlecat","CreatedById":92207,"CreatedDateTime":"2015-05-16T04:40:00Z","Content":"After coasting back to the KSP runway at \u002B50m/s along the rolling grasslands hills to the west, I\u0027m wondering if anything can be done to allow different wheel types to perform differently depending on the terrain.\n\nAircraft wheels? \\*great\\* on runway and roads but should crappy on unimproved grass, sand, etc.\n\nLikely something mods could handle?"},{"CreatedByName":"adinfinitum","CreatedById":49226,"CreatedDateTime":"2015-05-16T18:03:05Z","Content":"As far as I know, the actual look of the terrain doesn\u0027t have any correlation to a value in game, its just the texture that is overlaid on the planet mesh, so it wouldn\u0027t be able to be done like\u0022wheel is on grass, increased traction\u0022. \n\nI like the idea very much, and I think the way to do it would be different values for each biome. For example, shores are sandy, so the shore biome would have high friction and low traction, grasslands would be a good middle ground, and the runway would be good traction and an average amount of friction."},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-16T18:37:12Z","Content":"Unity wheels don\u0027t support this, at least for Unity 4.x (not sure about Unity 5, although I have seen developers complaining about wheels again in 5.x, so quite probably the same again). They explicitly ignore PhysX material types, using a different friction simulation to everything else in Unity / PhysX. That means that any variation in friction has to be completely new functionality created and maintained by the developer. It is not a quick or simple fix, as you have to create completely new ultra-fast, highly complex code which runs every physics frame (many times per second), to evaluate the current required behaviour due to surface type, relative slope, dynamic loading, etc.\n\nNot worth the development resource to implement it, and maintain new complex physics code from now to the end of time, since this is not Kerbal Driving Program, GTA Kerbin, or GTA Mun. The wheels we have, using the Unity supplied, maintained, and optimised wheel physics are not brilliant, but more than adequate for KSP.\n\nReal world wheels are simple to the layman (but have their own real world complexity in demanding applications). Simulated virtual wheels are incredibly complex and difficult to get right, and much more so if you are trying to simulate them in something other than the most mundane and simple circumstances."},{"CreatedByName":"adinfinitum","CreatedById":49226,"CreatedDateTime":"2015-05-16T18:49:18Z","Content":"So I take it that in Unity, based on how I\u0027ve seen wheels behave in KSP, traction is only determined by the normal force on each wheel?"},{"CreatedByName":"Murph","CreatedById":90837,"CreatedDateTime":"2015-05-16T18:57:47Z","Content":"\u003E \n\u003E So I take it that in Unity, based on how I\u0027ve seen wheels behave in KSP, traction is only determined by the normal force on each wheel?\n\nUnity wheels have 2 static friction curves, one for forwards \u0026 backwards, the other for sideways. The curves themselves have very little parameterisation, basically only max friction before slip, then the reduced friction after slip. Torque from power or braking is applied to the forwards/backwards model, any non-aligned velocity component is applied to the sideways model combined with any sideways component of gravity (e.g. going across a slope).\n\nSo yeah, there\u0027s a static max friction value, torque gets delivered up to that point (translated into linear force), and it slips beyond that."},{"CreatedByName":"adinfinitum","CreatedById":49226,"CreatedDateTime":"2015-05-16T19:28:22Z","Content":"Huh, well that\u0027s interesting to know, thanks for the info. I would\u0027ve thought that Unity would\u0027ve had at least a little more complex wheel simulation since its a general purpose game engine, but I guess not."},{"CreatedByName":"Beetlecat","CreatedById":92207,"CreatedDateTime":"2015-05-18T05:49:36Z","Content":"Thanks for the responses.\n\nIt unfortunately sounds like for this particular aspect, KSP will remain wildly un-simulatory. Although I do balk at the notion that this isn\u0027t Kerbal Driving Program; We build rovers to explore these other worlds, yes? Varied surfaces and wheel-needs would be fascinating to figure out.\n\n**Edited \u003Ctime datetime=\u00222015-05-18T05:52:10Z\u0022 title=\u002205/18/2015 05:52  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 18, 2015\u003C/time\u003E by Beetlecat**"},{"CreatedByName":"mattinoz","CreatedById":118580,"CreatedDateTime":"2015-05-18T08:05:37Z","Content":"\u003E \n\u003E Unity wheels don\u0027t support this, at least for Unity 4.x (not sure about Unity 5, although I have seen developers complaining about wheels again in 5.x, so quite probably the same again). They explicitly ignore PhysX material types, using a different friction simulation to everything else in Unity / PhysX. That means that any variation in friction has to be completely new functionality created and maintained by the developer. It is not a quick or simple fix, as you have to create completely new ultra-fast, highly complex code which runs every physics frame (many times per second), to evaluate the current required behaviour due to surface type, relative slope, dynamic loading, etc.\n\u003E Not worth the development resource to implement it, and maintain new complex physics code from now to the end of time, since this is not Kerbal Driving Program, GTA Kerbin, or GTA Mun. The wheels we have, using the Unity supplied, maintained, and optimised wheel physics are not brilliant, but more than adequate for KSP.\n\u003E \n\u003E Real world wheels are simple to the layman (but have their own real world complexity in demanding applications). Simulated virtual wheels are incredibly complex and difficult to get right, and much more so if you are trying to simulate them in something other than the most mundane and simple circumstances.\n\nIn Kerbal style could they fake it till they (or unity) makes it?\n\nInstead of true fraction use say the drag model physics with a boundary layer of super thick dense air at the ground. \n\nThe stickyness/density of the air and the height could change with different zones to make for different landing styles. \n\nSo say sand has a very sticky air film but only .2m above the surface.\n\nTall grass Grasslands 1m high film medium stickiness. \n\nCompacted dirt runway low stickiness compared to the proper runway.\n\nIce might have no effect but snow would be like sand. \n\nIn my mixed up mind that could then work for wheeled plus belly and skid landings.\n\nI mean if it works at all."},{"CreatedByName":"waterlubber","CreatedById":119333,"CreatedDateTime":"2015-05-18T11:34:18Z","Content":"Just increase the wheel torque on traction-y surfaces. Simple."},{"CreatedByName":"michaelsteele3","CreatedById":127113,"CreatedDateTime":"2015-05-19T13:33:25Z","Content":"\u003E \n\u003E Thanks for the responses.\n\u003E It unfortunately sounds like for this particular aspect, KSP will remain wildly un-simulatory. Although I do balk at the notion that this isn\u0027t Kerbal Driving Program; We build rovers to explore these other worlds, yes? Varied surfaces and wheel-needs would be fascinating to figure out.\n\nAs stated (paraphrasing) by SQUAD:\n\nKerbal Space Program is a game first, simulation second.\n\nKeep that in mind ![;)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)"},{"CreatedByName":"Sky_walker","CreatedById":113214,"CreatedDateTime":"2015-05-19T13:38:06Z","Content":"Yea, it\u0027d be great.\n\nMostly for adding a difference between ice, snow, rock and sand surface of the planets. Landing on a different grounds could start to matter in other way than just slope.\n\nSadly I think that it\u0027s yet another of these things where shortcomings of Unity Engine will make it very difficult to implement."}]}