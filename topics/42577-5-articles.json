{"TopicId":42577,"ForumId":44,"TopicTitle":"I need someone help me do some math for launch optimization","CreatedByName":"SaturnV","CreatedById":79006,"CreatedDateTime":"2013-08-15T10:56:30Z","PageNum":5,"Articles":[{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-02-03T22:44:25Z","Content":"\n\u003Cp\u003EThey\u0027re in MechJeb, I don\u0027t really know what the default window settings are but it might be there in a window called \u0022Ascent stats\u0022 or something to that effect. If there\u0027s not a preset for them, you can add them to a window with the custom editor. I don\u0027t remember which category they\u0027re under, but they\u0027re in there somewhere.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-04T01:24:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003Eim struggling with understanding the following\u003Cp\u003EWhen i start straight up, shortest possible path through the thick atmosphere, then i coast for over a minute to 80 km. 20 sec before i reach AP i turn east, full thrust.\u003C/p\u003E\u003Cp\u003ESo i accelerated in the most efficient way to reach the altitude and didnt waste any force to gravity but accelerated horizontally where i had zero drag resistance.\u003C/p\u003E\u003Cp\u003EI built a test rocket with 4100dv, with this attempt i reached 1600 orbital speed when the fuel ran out.\u003C/p\u003E\u003Cp\u003EIf i launch with mechjebs auto with turn at 8 and 40%, i reach 1900 orbital speed...\u003C/p\u003E\u003Cp\u003ESo im wondering where am i losing in the first attempt or what effect gives the second one this gain. Thats why i brought oberth into this.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESimplest way to understand this is to consider the centrifugal effect of your orbital velocity as reduction of gravity. As you start to accelerate horizontally, it\u0027s as if you perform ascent in lower gravity, letting you reach higher altitude with lower vertical velocity. So going straight up, then accelerating horizontally is way less efficient than starting to build your horizontal speed early. Of course, you don\u0027t want to start too early either, because that would result in too much drag. Hence the whole procedure of gravity turn, and figuring out the best way to do that.\u003C/p\u003E\u003Cp\u003ESpeaking of which, I have an idea on how to do full 2D optimization in a much more elegant way. But I\u0027m finding that just running simulations is a bit boring. Is there a way to feed a curve with throttle and attitude to MechJeb, or some other plugin, perhaps? Or am I better off writing one from scratch?\u003C/p\u003E\n"},{"CreatedByName":"numerobis","CreatedById":62016,"CreatedDateTime":"2014-02-04T01:26:35Z","Content":"\n\u003Cp\u003EThe ascent computer in MechJeb is almost written in a general way (there\u0027s an IAscentPath), so it\u0027s a good start.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-04T01:43:10Z","Content":"\n\u003Cp\u003EAh, I see. I didn\u0027t realize source for MechJeb was available. Yeah, that gives me an ideal starting point. Thank you.\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2014-02-04T02:07:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003Eim struggling with understanding the following\u003Cp\u003EI built a test rocket with 4100dv, with this attempt i reached 1600 orbital speed when the fuel ran out.\u003C/p\u003E\u003Cp\u003EIf i launch with mechjebs auto with turn at 8 and 40%, i reach 1900 orbital speed\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou need to count on at least 4500dv for low Kerbin orbit (the record is at little over 4300dv iirc), final orbital speed is a little over 2200.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-04T09:18:45Z","Content":"\n\u003Cp\u003EI think I just wrote the worst optimizer ever. Pro-tip. Discrete space techniques \u003Cem\u003Edo not\u003C/em\u003E work for trajectory optimization. This would make an awesome path-finder, though. Back to the drawing board.\u003C/p\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2014-02-04T11:32:25Z","Content":"\n\u003Cp\u003EIf mechjeb can be fed some path, what would/should be the criteria for control ? I mean like \u0022at x altitude do this\u0022 ?!\u003C/p\u003E\u003Cp\u003EWhat points define when to turn and how much, i think its altitude or not ?\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-02-04T12:28:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI think I just wrote the worst optimizer ever. Pro-tip. Discrete space techniques \u003Cem\u003Edo not\u003C/em\u003E work for trajectory optimization. This would make an awesome path-finder, though. Back to the drawing board.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s about what I expected for genetic algorithms, but I was kinda hoping you would come up with something that surprised us all \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EIf you want to try a different approach (besides PSOPT which has successfully worked for alterbaron and mhoram), I recommend using the Ipopt solver (I\u0027ve tried many, and Ipopt is the only general-purpose open-source nonlinear optimization solver that\u0027s worth using) via either the Coopr/Pyomo modeling language, or through \u003Ca href=\u0022https://github.com/casadi/casadi/wiki\u0022 rel=\u0022external nofollow\u0022\u003ECasadi\u003C/a\u003E.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003EIf mechjeb can be fed some path, what would/should be the criteria for control ? I mean like \u0022at x altitude do this\u0022 ?!\u003Cp\u003EWhat points define when to turn and how much, i think its altitude or not ?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe MechJeb ascent autopilot parameterizes its trajectory with a handful of numbers: target orbit altitude, gravity turn start altitude, turn end altitude, final flight path angle, and turn shape. Then there are optional thrust control settings like limit to terminal velocity, limit to a specified throttle percentage, or limit to a maximum acceleration in m/s^2. There\u0027s also a \u0022corrective steering\u0022 option which adjusts pitch up or down to try to make the rocket\u0027s velocity direction match the provided pitch-versus-altitude path, rather than the default behavior of just setting pitch equal to the provided path and not trying to control the velocity direction.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-02-04T17:53:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022numerobis\u0022 data-cite=\u0022numerobis\u0022\u003E\u003Cdiv\u003EThe ascent computer in MechJeb is almost written in a general way (there\u0027s an IAscentPath), so it\u0027s a good start.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIAscentPath is there to calculate pitch based on altitude.\u003C/p\u003E\u003Cp\u003EAs a starting point it is good, but it will run into problems when the same altitude is crossed twice or more often.\u003C/p\u003E\u003Cp\u003EGenerating ascent profiles based on my PSOPT simulation I ran into such an example while testing one of \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets?p=896658\u0026amp;viewfull=1#post896658\u0022 rel=\u0022external nofollow\u0022\u003EKasuhas\u0027 lifters\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/iXL6wVV.png\u0022 alt=\u0022iXL6wVV.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EFor testing my implementation I created several rockets with different TWR distributions.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://www.dropbox.com/sh/3pi0zifgfsn0ehp/cm2atqMjya\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://www.dropbox.com/sh/3pi0zifgfsn0ehp/cm2atqMjya\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFeel free to use them for your tests under the CC BY-NC-SA 4.0 license. So far I did not manage to bring \u0022Slowgoing.craft\u0022 into orbit.\u003C/p\u003E\u003Cp\u003ECurrently I am writing a reimplementation of my PSOPT-based simulation for an arbitrary number of states, but it still has some issues.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EIf you want to try a different approach (besides PSOPT which has successfully worked for alterbaron and mhoram), I recommend using the Ipopt solver (I\u0027ve tried many, and Ipopt is the only general-purpose open-source nonlinear optimization solver that\u0027s worth using) via either the Coopr/Pyomo modeling language, or through \u003Ca href=\u0022https://github.com/casadi/casadi/wiki\u0022 rel=\u0022external nofollow\u0022\u003ECasadi\u003C/a\u003E.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPSOPT also uses Ipopt as standard solver besides the commercial SNOPT.\u003C/p\u003E\u003Cp\u003EI found \u003Ca href=\u0022http://bocop.org/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://bocop.org/\u003C/a\u003E to be interesting as a control solver, but did not get too much into the details.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EIs there a way to feed a curve with throttle and attitude to MechJeb, or some other plugin, perhaps? Or am I better off writing one from scratch?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/68089-0-23-kOS-Scriptable-Autopilot-System-v0-10\u0022 rel=\u0022external nofollow\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EkOS Scriptable Autopilot System seems to have a reasonable manageable interface via file loading. Last time I looked, it seemed abandoned by it\u0027s creator, but a few days ago, a new maintainer and 0.23 compatible version emerged.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-04T21:11:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022tavert\u0022 data-cite=\u0022tavert\u0022\u003E\u003Cdiv\u003EThat\u0027s about what I expected for genetic algorithms\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENah. That was a different approach. Genetic algorithms have demonstrated an ability to take an almost optimal path, and tune it up. They just aren\u0027t very good at converging when you start very far from an optimum. So I might still make use of them if I find a good approximate solution analytically.\u003C/p\u003E\u003Cp\u003EI do have a couple of other ideas I\u0027m trying out. I\u0027ll figure something out eventually.\u003C/p\u003E\n"},{"CreatedByName":"Suzie\u0026#039;s Brother Max","CreatedById":88710,"CreatedDateTime":"2014-02-06T21:53:09Z","Content":"\n\u003Cp\u003EI\u0027m not sure if this is the best way to bring this up, but here goes. \u003C/p\u003E\u003Cp\u003Ealterbaron\u0027s optimized ascent profile from an airless body from page 6 seems to imply a standard gravity turn from launch. Tavert, I\u0027ve been stalking your math around the forums for a few days. Topic of interest here is that his profile doesn\u0027t include constant altitude burning, which you have proven fairly rigorously elsewhere. Does the physics not reverse such that a constant altitude descent onto an airless body isn\u0027t equivalent to a constant altitude ascent? Is one of these models flawed in some way? I\u0027d appreciate some clarification here.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-02-07T01:51:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Suzie\u0022 data-cite=\u0022Suzie\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Ealterbaron\u0027s optimized ascent profile from an airless body from page 6 seems to imply a standard gravity turn from launch. Tavert\u0027 date=\u0027 I\u0027ve been stalking your math around the forums for a few days. Topic of interest here is that his profile doesn\u0027t include constant altitude burning, which you have proven fairly rigorously elsewhere. Does the physics not reverse such that a constant altitude descent onto an airless body isn\u0027t equivalent to a constant altitude ascent? Is one of these models flawed in some way? I\u0027d appreciate some clarification here.[/quote\u0027]\u003C/p\u003E\u003Cp\u003EHm, good question. I never rigorously proved that constant-altitude is actually optimal, just demonstrated with some numerical simulations that it takes less delta-V than a retrograde landing. And suspected that it is likely optimal in the case of target altitude at 0, since it\u0027s on the boundary of the feasible space - it\u0027s a non-convex problem though, so that suspicion could be wrong.\u003C/p\u003E\u003Cp\u003EAscent and descent are (almost) time-reversals of one another, they\u0027re equivalent up to swapping the initial and final conditions, or changing the sign of the specific impulse - in takeoff you get lighter as you speed up, landing you get lighter as you slow down. It might be that with a high target orbit (400 km in alterbaron\u0027s example) it\u0027s actually advantageous to do some of the burn at higher altitude than just above terrain, since the higher your altitude, the higher you can raise periapsis to. That will make the circularization burn at your target altitude smaller than the case of constant-altitude takeoff to low circular orbit then Hohmann transfer to high orbit.\u003C/p\u003E\u003Cp\u003EIf you\u0027re up for some math, the airless landing/takeoff case may be tractable as a Pontryagin principle boundary value problem to get a provable optimum. I hope it would output the constant-altitude trajectory if target altitude is set to 0, but the higher your target altitude the more divergence you might see.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-07T19:17:32Z\u0022 title=\u002202/07/2014 07:17  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 7, 2014\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-07T02:33:51Z","Content":"\n\u003Cp\u003EAscent and descent aren\u0027t quite time-reversals due to mass of the ship changing the wrong way. Since thrust is constant, you can actually end up with different optimal profiles for airless landing and ascent.\u003C/p\u003E\u003Cp\u003EEdit: I\u0027ve been able to do a bit more with analytical side of things. First, for vertical ascent, given variations in gravity and drag coefficient with altitude g(y) and k(y) respectively, yielding thrust\u003C/p\u003E\u003Cp\u003ET[y,t] = g(y(t)) \u002B k(y(t)) y\u0027(t)\u00C3\u201A\u00C2\u00B2 \u002B y\u0027\u0027(t)\u003C/p\u003E\u003Cp\u003EThe solution y\u0027(t) = Sqrt(c(y(t))/k(y(t))) is locally optimal whenever c\u0027(y) = g\u0027(y). In other words, vertical ascent is optimal at terminal velocity even with arbitrary variation in gravity and air density with altitude.\u003C/p\u003E\u003Cp\u003EI know everyone suspected as much, but it\u0027s nice to have a rigorous proof of it.\u003C/p\u003E\u003Cp\u003EThe other thing is that in constant density and gravity ascent, if you have to apply some horizontal thrust to maintain course, say T\u003Csub\u003Ex\u003C/sub\u003E, the optimal ascent velocity goes from Sqrt(g/k) to Sqrt(Sqrt(g\u00C3\u201A\u00C2\u00B2\u002BT\u003Csub\u003Ex\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2)/k). In other words, it behaves as if instead of gravity g, the craft experiences gravity Sqrt(g\u00C3\u201A\u00C2\u00B2 \u002B T\u003Csub\u003Ex\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2), which does make a lot of sense. Unfortunately, I have not been able to prove this for general g(y) and k(y), because algebra is a total mess, but it should at very least be close for small g\u0027(y) and k\u0027(y).\u003C/p\u003E\u003Cp\u003EFinally, if we now take 2D motion, and consider drag along y, we have k v\u003Csub\u003Ey\u003C/sub\u003E Sqrt(v\u003Csub\u003Ex\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2 \u002B v\u003Csub\u003Ey\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2). This can be expanded nicely under two possible conditions. Whenever v\u003Csub\u003Ey\u003C/sub\u003E \u0026gt; v\u003Csub\u003Ex\u003C/sub\u003E, this becomes k v\u003Csub\u003Ey\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2 \u002B k v\u003Csub\u003Ex\u003C/sub\u003E\u00C3\u201A\u00C2\u00B2/2. While expansion for v\u003Csub\u003Ey\u003C/sub\u003E \u0026lt; v\u003Csub\u003Ex\u003C/sub\u003E yields, k v\u003Csub\u003Ex\u003C/sub\u003E v\u003Csub\u003Ey\u003C/sub\u003E \u002B k v\u003Csub\u003Ey\u003C/sub\u003E\u00C3\u201A\u00C2\u00B3/(2 v\u003Csub\u003Ex\u003C/sub\u003E).\u003C/p\u003E\u003Cp\u003EWhat this lets me do is split the horizontal and vertical motion and then use some iterative methods to find mutually-optimal v\u003Csub\u003Ex\u003C/sub\u003E and v\u003Csub\u003Ey\u003C/sub\u003E throughout the ascent. There is still a whole list of nuances with that, but it should at least put me on the right track.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-07T04:10:09Z\u0022 title=\u002202/07/2014 04:10  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 7, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"hydropos","CreatedById":76550,"CreatedDateTime":"2014-02-11T07:07:07Z","Content":"\n\u003Cp\u003EI will start by admitting that I skimmed most of this thread after about page 4, so please let me know if I missed something. This and \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets\u0022 rel=\u0022external nofollow\u0022\u003Eother threads on the topic\u003C/a\u003E seem to focus on simulating different paths and rocket constructions. What I sought out to do was find the minimum \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V ascent trajectory to Low Kerbin Orbit (LKO) purely mathematically. This ignores anything about mass, thrust, or ISP. I caught some inspiration yesterday and appear to have something. The two most notable findings were this:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E1)\u003C/strong\u003E You should only ascend at terminal velocity until you hit 440 m/s, then stay at that speed until your gravity turn\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E2)\u003C/strong\u003E Any gravity turn under 30km will cost you \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V\u003C/p\u003E\u003Cp\u003ENote, this also produces the result that the \u0022ideal\u0022 gravity turn should be instantly 90\u00C3\u201A\u00C2\u00B0, and assumes your TWR is absurdly large (~10), which may explain why most launches do not work this way.\u003C/p\u003E\u003Cp\u003EHere is my reasoning. Let me know if I\u0027m missing something:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E1) \u003C/strong\u003EIt\u0027s already been established that the most efficient ascent at low altitudes is totally vertical at terminal velocity. However, since all that vertical velocity will eventually be gone (assuming a roughly circular orbit) continuing to accelerate to the exponentially-increasing terminal velocity must become wasteful at some point. Here is my math:\u003C/p\u003E\u003Cp\u003Elost \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161V/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161t = gravity \u002B drag \u002B net acceleration\u003C/p\u003E\u003Cp\u003Ewhere gravity and drag are their corresponding accelerations, rather than raw forces. At terminal velocity (VT), gravity and drag will be equal. If you\u0027re trying to maintain terminal velocity, then net acceleration will be the derivative of terminal velocity (\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161VT/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161t). I also rearranged things in terms of lost \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161V per altitude gained (\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y) so that the solutions at V = 0 didn\u0027t muck up my calculations. This means dividing the right side by the velocity (assumed to be VT):\u003C/p\u003E\u003Cp\u003Elost \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161V/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y = (2*g \u002B \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161VT/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161t)/VT\u003C/p\u003E\u003Cp\u003Ewhere VT = 6.01*10\u00C3\u00A2\u00C2\u00C2\u00B7*exp(y/10000)/(600000\u002By) {assumes ship drag = 0.2}\u003C/p\u003E\u003Cp\u003EThis function has a minimum value at a height that depends on drag coefficient, which is about 15.1km for liquid fuel rockets (drag 0.2) and 17.1km for solid fuel rockets (drag 0.3). However, they both happen at a velocity around 440 m/s. After that minimum, any additional acceleration is going to be wasted \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V, since all that vertical velocity must eventually go to zero. Thus you should stay at 440 m/s until the gravity turn.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E2) \u003C/strong\u003E The cheapest \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V way to gain altitude in the absence of atmosphere is to burn horizontally. With atmosphere, the centrifugal acceleration benefit of turning sideways must outweigh the added drag. Their accelerations are as follows:\u003C/p\u003E\u003Cp\u003Ecentripetal acceleration = -V\u00C3\u201A\u00C2\u00B2/(Kerbin\u0027s Radius \u002B Current Altitude)\u003C/p\u003E\u003Cp\u003Edrag \u00C3\u00A2\u00E2\u20AC\u00B0\u00CB\u2020 V\u00C3\u201A\u00C2\u00B2*0.0011/exp(altitude/5000)\u003C/p\u003E\u003Cp\u003EI use a negative sign in front of the centripetal force, since that quantity is ultimately being subtracted from gravitational acceleration. Also note that V is only the horizontal component of velocity. You can factor the V\u00C3\u201A\u00C2\u00B2 out to get the net effect:\u003C/p\u003E\u003Cp\u003Eacceleration = V\u00C3\u201A\u00C2\u00B2[0.0011/exp(y/5000) - 1/(6*10\u00C3\u00A2\u00C2\u00C2\u00B5\u002By)]\u003C/p\u003E\u003Cp\u003EOnly when this term becomes negative is it beneficial to have any non-vertical velocity (32km). Note this drag equation is based on a mass-average drag value of 0.2, which is the case for liquid fuel rockets. For higher drag vessels (say solid rockets with drag 0.3) this altitude is just over 34km. \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFinal Notes\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EI did some numerical integration for both the low and high drag cases to toss out some values for the minimum \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V. From launch to the critical terminal velocity of 440m/s should require 1935 or 2361 m/s for liquid and solid rockets respectively. From launch up to the \u0022gravity turn\u0022 should require 2392 or 2816 m/s for liquid and solid rockets respectively. After this point you no longer have to spend \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V to fight gravity and drag is next to nothing, so I would add to these the \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V of LKO, 2293 m/s. If you\u0027ve launched eastward, then you can subtract around 180 m/s from Kerbin\u0027s rotation. This gives:\u003C/p\u003E\u003Cp\u003Eminimum LKO \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V: 4505 m/s for liquid fuel rockets and 4929 m/s for solid fuel rockets.\u003C/p\u003E\u003Cp\u003EYou can get pretty close you this in practice because most of these functions are aren\u0027t steep near the minima. In other words, you don\u0027t need a TWR of 10 to do well. If you\u0027ve ever wondered if it\u0027s possible to build an all-solid fuel SSTO, you now know the answer is no, but only by about 150 m/s \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-11T07:12:14Z\u0022 title=\u002202/11/2014 07:12  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 11, 2014\u003C/time\u003E by hydropos\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-23T08:56:46Z","Content":"\n\u003Cp\u003EI\u0027ve managed to advance on the analytical approach. This will probably require a numerical solver in the end, but it could still be the closest to a true answer.\u003C/p\u003E\u003Cp\u003ELets start by looking at a simple problem of purely vertical ascent. I\u0027m going to ignore gravity variations with altitude, as well as variations in I\u003Csub\u003ESP\u003C/sub\u003E, and even the change in mass of the ship during ascent. These can be added, but I want to keep the math clean for the purpose of explanation.\u003C/p\u003E\u003Cp\u003EWhat we are after is minimizing the use of fuel. It is equivalent to optimizing the integral of thrust.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00CB\u2020\u00C2\u00AB g \u002B k(y)y\u0027(t)\u00C3\u201A\u00C2\u00B2 \u002B y\u0027\u0027(t) dt\u003C/p\u003E\u003Cp\u003EHere, k(y) is drag coefficient at altitude y, such that, sqrt(g/k(y)) gives terminal velocity at altitude y. And since this is KSP, I\u0027ve set m = 1.\u003C/p\u003E\u003Cp\u003EPlainly, this is Euler-Lagrange problem with L = g \u002B k(y)y\u0027(t)\u00C3\u201A\u00C2\u00B2 \u002B y\u0027\u0027(t). Solution, if it exists, must satisfy Euler-Lagrange Equation.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y - (d/dt)(\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y\u0027) \u002B (d\u00C3\u201A\u00C2\u00B2/dt\u00C3\u201A\u00C2\u00B2)(\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y\u0027\u0027) = 0\u003C/p\u003E\u003Cp\u003EFortunately, in this problem \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y\u0027\u0027 = 1, which goes away after differentiation with respect to time. This leaves us with fairly simple terms.\u003C/p\u003E\u003Cp\u003Ek\u0027(y)y\u0027(t)\u00C3\u201A\u00C2\u00B2 - 2k\u0027(y)y\u0027(t)\u00C3\u201A\u00C2\u00B2 - 2k(y)y\u0027\u0027(t) = 0\u003C/p\u003E\u003Cp\u003Eor\u003C/p\u003E\u003Cp\u003Ek\u0027(y)y\u0027(t)\u00C3\u201A\u00C2\u00B2 \u002B 2k(y)y\u0027\u0027(t) = 0\u003C/p\u003E\u003Cp\u003EIt is fairly straight forward to verify that y\u0027(t) = (c/k(y))\u003Csup\u003E1/2\u003C/sup\u003E satisfies this equation. This presents us with family of potential solution, one of which, c = g, is the ascent at terminal velocity that we all know to be optimal for strictly 1D problem.\u003C/p\u003E\u003Cp\u003ESo the Euler-Lagrange method works extremely well. Even if we did not have means of finding this solution analytically, we could have integrated over it numerically with a good guess for initial conditions. But as soon as we go into 2D, we end up with a serious problem. The algebra there is significantly worse, but lets just look at the acceleration term in the Lagrangian.\u003C/p\u003E\u003Cp\u003EL = ... \u002B (x\u0027\u0027(t)\u00C3\u201A\u00C2\u00B2 \u002B y\u0027\u0027(t)\u00C3\u201A\u00C2\u00B2)\u003Csup\u003E1/2\u003C/sup\u003E\u003C/p\u003E\u003Cp\u003EUnlike the 1D case, the (d\u00C3\u201A\u00C2\u00B2/dt\u00C3\u201A\u00C2\u00B2)(\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161y\u0027\u0027) term of the Euler-Lagrange equation for this Lagrangian is not zero. Worse, it contains y\u003Csup\u003E(4)\u003C/sup\u003E(t) terms! That means that even after doing the monumental work of writing out the full differential equation, it will be fourth order in time. Not to mention extremely unstable to initial conditions. Solving such an equation numerically does not seem feasible. (I have made many different attempts.)\u003C/p\u003E\u003Cp\u003EBut there is light at the end of this tunnel. Instead of analyzing Euler-Lagrange problem, we can construct an equivalent Hamiltonian problem. First, let us re-write the initial Lagrangian in terms of individual variables T(t), y(t), and v(t), where T(t) is thrust and v(t) is vertical velocity. I\u0027m going to define \u00C3\u017D\u00C2\u00BB and \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E as my undetermined multipliers. Also, for convenience of signs, I\u0027m going to maximize integral over -T(t), rather than minimize one over \u002BT(t).\u003C/p\u003E\u003Cp\u003EL = -T(t) \u002B \u00C3\u017D\u00C2\u00BB(y\u0027(t) - v(t)) \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E(v\u0027(t) - T(t) \u002B g \u002B k(y)v(t)\u00C3\u201A\u00C2\u00B2)\u003C/p\u003E\u003Cp\u003EWith constraints y\u0027(t) = v(t) and v\u0027(t) = T(t) - g - k(y)v(t)\u00C3\u201A\u00C2\u00B2. Substituting constraints directly into the above equation and getting rid of undetermined multipliers brings us back to initial problem, so it looks like needless complication, but it allows us to change the formulation of the problem. Stated thusly, we have are looking at a control problem, where T(t) is control, and y(t) and v(t) are variables. As such, we can find conjugate variables, \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161x\u0027 and \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v\u0027, and write the Hamiltonian for this problem.\u003C/p\u003E\u003Cp\u003EH = (\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161x\u0027)x\u0027(t) \u002B (\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161L/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v\u0027)v\u0027(t) - L\u003C/p\u003E\u003Cp\u003ELooking after all the math and making a substitution x\u0027(t) = v(t), we arrive at a very nice and clean expression.\u003C/p\u003E\u003Cp\u003EH = T(t) \u002B \u00C3\u017D\u00C2\u00BBv(t) \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E(T - g - k(y)v(t)\u00C3\u201A\u00C2\u00B2)\u003C/p\u003E\u003Cp\u003EWhat\u0027s more amazing, the undetermined multipliers have become the conjugate variables to the variables of our problem, as they satisfy the following properties.\u003C/p\u003E\u003Cp\u003Ex\u0027(t) = \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161\u00C3\u017D\u00C2\u00BB = v(t)\u003C/p\u003E\u003Cp\u003Ev\u0027(t) = \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161\u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E = T(t) - g - k(y)v(t)\u00C3\u201A\u00C2\u00B2\u003C/p\u003E\u003Cp\u003EWhich agree with our constraints. And that means we can apply the Hamilton Equations for the conjugate variables.\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00C2\u00BB\u0027(t) = -\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161x = \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003Ek\u0027(y)v(t)\u00C3\u201A\u00C2\u00B2\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E\u0027(t) = -\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v = 2\u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003Ek(y)v(t) - \u00C3\u017D\u00C2\u00BB\u003C/p\u003E\u003Cp\u003EAnd, of course, the actual optimization problem is stated very simply.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161T = 1 \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E = 0\u003C/p\u003E\u003Cp\u003EThis works because there is no T\u0027 or higher order dependence. Other than that, the conditions are the same as in Euler-Lagrange equations. At any rate, we can solve the above by taking a time derivative and using one of the Hamilton equations.\u003C/p\u003E\u003Cp\u003E(d/dt)(1 \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E(t)) = \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E\u0027(t) = -\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161H/\u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u0161v = 2\u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003Ek(y)v(t) - \u00C3\u017D\u00C2\u00BB = 0\u003C/p\u003E\u003Cp\u003EHere, we can make use of the fact that 1 \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E = 0 to simplify it a bit. (I\u0027m also going to flip the sign for convenience.)\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00C2\u00BB \u002B 2k(y)v(t) = 0\u003C/p\u003E\u003Cp\u003EWhich I can differentiate with respect to time once more and use the other Hamilton equation.\u003C/p\u003E\u003Cp\u003E\u00C3\u017D\u00C2\u00BB\u0027 \u002B 2k\u0027(y)v(t)\u00C3\u201A\u00C2\u00B2 \u002B 2k(y)v\u0027(t) = \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003Ek\u0027(y)v(t)\u00C3\u201A\u00C2\u00B2 \u002B 2k\u0027(y)v(t)\u00C3\u201A\u00C2\u00B2 \u002B 2k(y)v\u0027(t) = 0\u003C/p\u003E\u003Cp\u003EUsing 1 \u002B \u00C3\u017D\u00C2\u00BB\u003Csub\u003Ev\u003C/sub\u003E = 0 one last time, we arrive at the final differential equation.\u003C/p\u003E\u003Cp\u003Ek\u0027(y)v(t)\u00C3\u201A\u00C2\u00B2 \u002B 2k(y)v\u0027(t) = 0\u003C/p\u003E\u003Cp\u003EThis is clearly the same differential equation as earlier, with solution v(t) = (g/k(y))\u003Csup\u003E1/2\u003C/sup\u003E.\u003C/p\u003E\u003Cp\u003ESo the Hamiltonian method works. But that\u0027s not the best part. The best part is that we\u0027ve completely gotten rid of the y\u0027\u0027 terms from the start. Of course, what we are really interested is the 2D case with all the bells and whistles. And while the equations that the above procedure produces for the 2D Hamiltonian are absolutely monstrous, the terms with highest order are the T\u003Csub\u003Ex\u003C/sub\u003E\u0027\u0027(t) and T\u003Csub\u003Ey\u003C/sub\u003E\u0027\u0027(t).\u003C/p\u003E\u003Cp\u003EIn other words, the above procedure lets us cast the entire problem in terms of a system of non-linear second order differential equations. The sheer count of terms involved means that there is little to no chance of ever finding an analytical solution, but this is entirely within the reach of numerical methods.\u003C/p\u003E\u003Cp\u003EUnfortunately, the solution is extremely unstable to initial conditions. This has not improved. Where this is miles better is that the time-reversed solution is stable. What does that mean? In simple terms, we start with the ship in orbit at the very edge of the atmosphere, we run the time backwards on the numerical integration. Thrust and variables of motion are going to be adjusted continuously until the ship hits the ground, and that\u0027s going to give us the initial conditions for the launch. To reproduce in the actual launch, we just run a PID trying to maintain program location and velocity from above, and it should perform an optimal ascent to a stable orbit.\u003C/p\u003E\u003Cp\u003EThere is still a lot of work here. Numerical solvers in Mathematica have not been of much help, because they miss a few optimizations I can do, and I have no idea how to point the built-in solver in the right direction. So I\u0027ll have to write my own solver, export the monstrous equations into C\u002B\u002B, clean these up, run it, and then find a way to test it on real ships in KSP. But what I have so far looks promising.\u003C/p\u003E\u003Cp\u003EAnyways, comments and questions are welcome.\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2014-02-23T14:29:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022hydropos\u0022 data-cite=\u0022hydropos\u0022\u003E\u003Cdiv\u003Eminimum LKO \u00C3\u00A2\u00CB\u2020\u00E2\u20AC\u00A0V: 4505 m/s for liquid fuel rockets\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExperiments show 4500m/s is the rule-of-thumb required dv for LKO, minimum is a little over 4300m/s. \u003C/p\u003E\u003Cp\u003EI more or less routinely get there with something between 4400 and 4500m/s. The critical part seems to be when to cut back thrust for the upper part of the ascent.\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-02-23T17:48:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EUnfortunately, the solution is extremely unstable to initial conditions. This has not improved. Where this is miles better is that the time-reversed solution is stable. What does that mean? In simple terms, we start with the ship in orbit at the very edge of the atmosphere, we run the time backwards on the numerical integration. Thrust and variables of motion are going to be adjusted continuously until the ship hits the ground, and that\u0027s going to give us the initial conditions for the launch. To reproduce in the actual launch, we just run a PID trying to maintain program location and velocity from above, and it should perform an optimal ascent to a stable orbit.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor the Psopt-approach, an initial guess is also necessary. I made this by approximating the 3d-altitude and velocity vectors. Are you interested in the actual code I used?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThere is still a lot of work here. Numerical solvers in Mathematica have not been of much help, because they miss a few optimizations I can do, and I have no idea how to point the built-in solver in the right direction. So I\u0027ll have to write my own solver, export the monstrous equations into C\u002B\u002B, clean these up, run it, and then find a way to test it on real ships in KSP. But what I have so far looks promising.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am also looking for a way to get my launch results to steer the rocket ingame. I came so far as to get my values (time, pitch, thrust) into the game via a socket connection, but had no time to improve it the last couple of weeks.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022rkman\u0022 data-cite=\u0022rkman\u0022\u003E\u003Cdiv\u003Eminimum is a little over 4300m/s.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have read this minumum now several times here on the forum, but was unable to find an actual craft that could do it with this meager amount of dV. Do you have by any chance a link to the original thread where this was stated?\u003C/p\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2014-02-23T18:53:13Z","Content":"\n\u003Cp\u003ELaunch Efficiency Exercise [updated for 0.21.1]\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/39196-Launch-Efficiency-Exercise-Updated-for-0-21-1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/39196-Launch-Efficiency-Exercise-Updated-for-0-21-1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EA couple are in the range of 4.3..km/s\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-24T00:45:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mhoram\u0022 data-cite=\u0022mhoram\u0022\u003E\u003Cdiv\u003EFor the Psopt-approach, an initial guess is also necessary. I made this by approximating the 3d-altitude and velocity vectors. Are you interested in the actual code I used?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESure, if you can paste-bin it, I\u0027d appreciate a look.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mhoram\u0022 data-cite=\u0022mhoram\u0022\u003E\u003Cdiv\u003EI have read this minumum now several times here on the forum, but was unable to find an actual craft that could do it with this meager amount of dV. Do you have by any chance a link to the original thread where this was stated?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis figure also has some good pedigree in the optimization theory. A rule of thumb for minimal delta-V is orbital velocity \u002B drag/gravity losses on vertical assent (4gH/v\u003Csub\u003Et\u003C/sub\u003E), and the later works out to be just shy of 2km/s for Kerbin. So any optimal ascent method should show something in the neighborhood of 4.3km/s for orbit. If you are getting much more than that from the method, then it\u0027s not converging properly. There could be local minima in this problem that can throw even a good optimization scheme.\u003C/p\u003E\n"},{"CreatedByName":"Nao","CreatedById":23462,"CreatedDateTime":"2014-02-24T04:35:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI\u0027ve managed to advance on the analytical approach. This will probably require a numerical solver in the end, but it could still be the closest to a true answer.\u003Cp\u003E[math!]\u003C/p\u003E\u003Cp\u003EAnyways, comments and questions are welcome.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is really awesome! Although i\u0027m unable to help with math i really appreciate the work going into it. Thinking ahead i\u0027m really curious about how big the maximum optimal TWR of a rocket will be (excluding v=0 of course, it will most likely be achieved during gravity turn around 30-45deg, probably 3-4 TWR). And then optimize it for minimal launch mass \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cheesy.gif\u0022 alt=\u0022:D\u0022\u003E.\u003C/p\u003E\u003Cp\u003EGood luck guys! (PTW)\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-02-24T21:20:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThere is still a lot of work here. Numerical solvers in Mathematica have not been of much help, because they miss a few optimizations I can do, and I have no idea how to point the built-in solver in the right direction. So I\u0027ll have to write my own solver, export the monstrous equations into C\u002B\u002B, clean these up, run it, and then find a way to test it on real ships in KSP. But what I have so far looks promising.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIsn\u0027t this just applying the Pontryagin principle to express the solution in terms of a boundary value problem? I don\u0027t see how this is any different than what I was trying on page 4. If you come up with a shooting solver, either forward or backward or multiple-shooting, that can converge to good values of the initial or final costates, let us know.\u003C/p\u003E\u003Cp\u003EIf C\u002B\u002B is too much of a PITA, you may want to have a look at writing in Julia. It\u0027s a new language, still a bit rough around the edges, but it\u0027s aiming at a nice best-of-both-worlds combination of Python\u0027s high-level productivity and close-to-C\u002B\u002B speed.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-02-25T06:29:00Z","Content":"\n\u003Cp\u003EYes, it\u0027s basically Pontryagin without discount. What I didn\u0027t realize is that a) this is equivalent to Lagrangian approach, and \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E that it resolves a lot of the issues with the later. Sorry, I missed the part of the discussion where you talked about that. This was new to me, so I thought I\u0027d share.\u003C/p\u003E\u003Cp\u003EThere are still a lot of problems with it, and I\u0027m starting to get the feel for why. Usually, if you do reverse shooting with Pontryagin, you start near steady state solution, and evolve back. This problem doesn\u0027t have a (useful) steady state. And it also has a lot of regions where it\u0027s really, really unstable. So I can\u0027t find good boundary conditions for forward or reverse shooting.\u003C/p\u003E\u003Cp\u003EI do have a completely different sort of a result, however. An analytic approximate solution for optimal 2D ascent with KSP drag model. There are a few main assumptions. Acceleration of the craft should be small, centrifugal effect negligible, and changes in gravity, mass of the ship, and efficiency of the engines is neglected. This is going to hold moderately well up to about 20km, but will get rather bad from there on. The solution requires the craft to move at terminal velocity regardless of angle, with the angle itself satisfying the following equation.\u003C/p\u003E\u003Cp\u003Ecos(\u00C3\u017D\u00C2\u00B8) = c exp(y/2h)/sqrt(1 \u002B sin(\u00C3\u017D\u00C2\u00B8))\u003C/p\u003E\u003Cp\u003EHere, y is the altitude, h is scale height, and c is some constant that determines boundary conditions. So for example, if you intend to have \u00C3\u017D\u00C2\u00B8 = 45 degrees at 20km, then c = 0.125. Angles at other altitudes can be easily solved for with the power method. (It converges rather well for this formula.) So for the same 45 degrees at 20km example, the following is the chart of ascent angles with altitude. (Apologies for Excel)\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://imagizer.imageshack.us/v2/600x371q90/827/m7nv.png\u0022 alt=\u0022m7nv.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is pretty consistent with typical ascent profiles. The question is, of course, what sort of angle the rocket should be holding to at the upper bounds of this approximation to do an optimal accent. I picked 45 degrees pretty much at random for this graph. Though, it should be in the ballpark, at least. With the correct figure, this profile can be patched together with other approximations for higher velocities.\u003C/p\u003E\u003Cp\u003EEdit: Looking at some of the alterbaron\u0027s results, 20km was probably too generous. Centrifugal effects start to alter effective terminal velocity by then. But up to about 10-15km, all of the assumptions seem reasonable.\u003C/p\u003E\u003Cp\u003EEdit2: I finally got around to checking the above solution against Euler-Lagrange equation. As suspected, it\u0027s extremely close to optimal ascent up to about 10km, and the rapidly gets worse thereafter.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-27T18:10:57Z\u0022 title=\u002202/27/2014 06:10  PM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 27, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-02-28T10:53:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003ESure, if you can paste-bin it, I\u0027d appreciate a look.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI just looked over the code and realized that it is so fuzzy that I had myself problems understanding it. So I will do the hopefully better thing: describe the algorithm.\u003C/p\u003E\u003Cp\u003EThe following parameters are used for the estimation:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003ETime of pitchover t\u003Csub\u003Ep\u003C/sub\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETime when orbit is reached t\u003Csub\u003Eo\u003C/sub\u003E \u0026gt; t\u003Csub\u003Ep\u003C/sub\u003E\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETarget Orbit altitude a\u003Csub\u003Eo\u003C/sub\u003E \u0026gt; 0\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETarget horizontal speed v\u003Csub\u003Et\u003C/sub\u003E = sqrt(PlanetMu / (PlanetRadius \u002B a\u003Csub\u003Eo\u003C/sub\u003E))\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe altitude at time t is approximated by\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ealt = tanh((t - (t[SUB]o[/SUB] / 2)) / t[SUB]o[/SUB] * 4) * a[SUB]o[/SUB] / 2 \u002B a[SUB]o[/SUB] / 2\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe vertical velocity v\u003Csub\u003Ev\u003C/sub\u003E at time t is approximated by\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ev[SUB]v[/SUB] = 2 * a[SUB]o[/SUB] / t[SUB]o[/SUB] * (1 - tanh((4 * t - 2 * t[SUB]o[/SUB])/t[SUB]o[/SUB])[SUP]2[/SUP])\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAs you can see, I don\u0027t use the time of pitchover for estimating the vertical components.\u003C/p\u003E\u003Cp\u003EI came to this tanh-altitude approxmation by looking at the ascent paths that the algorithm found during my initial examples (see the pictures in \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets/page3\u0022 rel=\u0022external nofollow\u0022\u003Ethis thread\u003C/a\u003E).\u003C/p\u003E\u003Cp\u003EThe velocity was chosen to reflect this altitude path.\u003C/p\u003E\u003Cp\u003EThe horizontal velocity v\u003Csub\u003Eh\u003C/sub\u003E relative to planet rotation is 0 if current-time t \u0026lt; t\u003Csub\u003Ep\u003C/sub\u003E, v\u003Csub\u003Et\u003C/sub\u003E if current-time \u0026gt; t\u003Csub\u003Eo\u003C/sub\u003E and otherwise:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Ev[SUB]h[/SUB] = ((t - t[SUB]p[/SUB]) / (t[SUB]o[/SUB] - t[SUB]p[/SUB]))[SUP]2[/SUP] * v[SUB]t[/SUB]\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI came up with this t\u003Csup\u003E2\u003C/sup\u003E approximation by guesswork and since it worked reasonably well, I did not improve it further.\u003C/p\u003E\u003Cp\u003EThe angular distance from the launchsite I estimated by a simple euler integration via the horizontal velocity estimations. Again it worked reasonably well and did not need further improvement.\u003C/p\u003E\u003Cp\u003EThe mass of the ship in each stage is approximated linear in time.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EThis figure also has some good pedigree in the optimization theory. A rule of thumb for minimal delta-V is orbital velocity \u002B drag/gravity losses on vertical assent (4gH/v\u003Csub\u003Et\u003C/sub\u003E), and the later works out to be just shy of 2km/s for Kerbin.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat sounds reasonable. Thanks for the explanation\u003C/p\u003E\u003Cp\u003E@rkman thanks for the link\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-02-28T10:56:45Z\u0022 title=\u002202/28/2014 10:56  AM\u0022 data-short=\u002210 yr\u0022\u003EFebruary 28, 2014\u003C/time\u003E by mhoram\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Nao","CreatedById":23462,"CreatedDateTime":"2014-02-28T14:31:14Z","Content":"\n\u003Cp\u003EThere is a concept on the subject I had on my mind for some time. It\u0027s nothing special but ill post it in hope of inspiring others with some ideas and maybe fresh point of view.\u003C/p\u003E\u003Cp\u003EAfter many launches I came to conclusion that maybe it could be possible to present optimal late ascent (after ~45deg) as a minimum losses between drag and dv lost to Oberth effect (with an attitude fixed to prograde simplification, just using throttle to control the ship).\u003C/p\u003E\u003Cp\u003EI have no math ability to present this idea in equations. But just looking at the problem: during ascent, after the craft manages to accelerate to have an Apopsis of 40-50km (an altitude where it can achieve orbital velocity), the optimalization of ascent is simplified to balancing the acceleration while on the path to orbit. The idea is to use thrust to control pitch with shape of current orbit. High acceleration rate will shoot Ap up quickly, minimizing thrust in the atmosphere, increasing Oberth losses. Slow acceleration increases time spent in atmosphere and drag. Different non linear acceleration profiles will give better efficiency.\u003C/p\u003E\u003Cp\u003EI think the idea of using attitude fixed to prograde late in ascent could really help simplify some equations. It shouldn\u0027t give much error too as steering angle looses can be quite big when burning more than 3-5 deg off prograde. At the same time calculating gains from Oberth also covers centrifugal acceleration as well as orbital vector elements etc.\u003C/p\u003E\u003Cp\u003EIt\u0027s of course hard to quantify the gains/looses from Oberth effect, but when doing real (by hand or MJ assisted) launches this is what i try to optimize for. After many tests I can get to very similar deltaV results with different starting conditions of late ascent (angle, speed, available thrust etc), just by using the correct amount of throttle at the right time, and following velocity vector.\u003C/p\u003E\u003Cp\u003EAlso assuming different target orbits another, even simpler, connection between target orbit height and \u0022turn end\u0022 height could be made. Since for higher orbits its much easier to get out of the atmosphere. For example completing lunar insertion burn at Pe (0deg attitude) at 50km will be quite efficient and still will get out of the atmosphere quickly. Just comparing target orbit height with \u0022turn end\u0022 on the basis of drag losses and Oberth gains, could give a simple but useful relation.\u003C/p\u003E\u003Cp\u003ESorry if this sounds like gibberish. I just feel like trying to rely mostly on terminal velocities and turn angles will not give good enough results (especially for late parts of ascent).\u003C/p\u003E\u003Cp\u003E\u003Cspan\u003E(Also damn, not filling up math equation quota makes this feel like an off topic post. Haha)\u003C/span\u003E\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-02-28T16:42:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nao\u0022 data-cite=\u0022Nao\u0022\u003E\u003Cdiv\u003EI think the idea of using attitude fixed to prograde late in ascent could really help simplify some equations. It shouldn\u0027t give much error too as steering angle looses can be quite big when burning more than 3-5 deg off prograde. At the same time calculating gains from Oberth also covers centrifugal acceleration as well as orbital vector elements etc.\u003Cp\u003EIt\u0027s of course hard to quantify the gains/looses from Oberth effect, but when doing real (by hand or MJ assisted) launches this is what i try to optimize for. After many tests I can get to very similar deltaV results with different starting conditions of late ascent (angle, speed, available thrust etc), just by using the correct amount of throttle at the right time, and following velocity vector.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKeeping attiute at prograde seemed to me the way to go at first. It works quite well for most rockets with a \u0022reasonable\u0022 TWR in all stages. However this method does not work for rockets with a low TWR in late stages. See \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets?p=914585\u0026amp;viewfull=1#post914585\u0022 rel=\u0022external nofollow\u0022\u003Ethis post\u003C/a\u003E for an example \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets?p=896658\u0026amp;viewfull=1#post896658\u0022 rel=\u0022external nofollow\u0022\u003Ecraft\u003C/a\u003E where the attitude=prograde method does not work.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nao\u0022 data-cite=\u0022Nao\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESorry if this sounds like gibberish. I just feel like trying to rely mostly on terminal velocities and turn angles will not give good enough results (especially for late parts of ascent).\u003C/p\u003E\u003Cp\u003E\u003Cspan\u003E(Also damn, not filling up math equation quota makes this feel like an off topic post. Haha)\u003C/span\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt is an interesting idea, but I think that the calculation of \u0022oberth losses\u0022 based on the thrust-altitude-distribution is quite a difficult task by itself.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-26T17:31:33Z\u0022 title=\u002209/26/2015 05:31  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 26, 2015\u003C/time\u003E by mhoram\u003C/strong\u003E\n\u003Cbr\u003Etypo\n\u003C/span\u003E\n"}]}