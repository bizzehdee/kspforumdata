{"TopicId":42577,"ForumId":44,"TopicTitle":"I need someone help me do some math for launch optimization","CreatedByName":"SaturnV","CreatedById":79006,"CreatedDateTime":"2013-08-15T10:56:30Z","PageNum":3,"Articles":[{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-31T08:42:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI did some numeric simulation, the result shows that stick to terminal velocity is practically optimal.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENice simulation. I\u0027m actually quite surprised at how little that thrust oscillation affected the final result.\u003C/p\u003E\u003Cp\u003EAnother update:\u003C/p\u003E\u003Cp\u003EI\u0027ve been able to solve for an optimal ascent trajectory for a body \u003Cstrong\u003Ewithout\u003C/strong\u003E an atmosphere, which is kind of cool in its own right.\u003C/p\u003E\u003Cp\u003EHere\u0027s the results from a test ascent from the surface of Kerbin (with the atmosphere removed):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/XI6xbda\u0022 rel=\u0022external nofollow\u0022\u003EAltitude wrt. Time\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/BZ4bas0\u0022 rel=\u0022external nofollow\u0022\u003EThrust wrt. Time\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/opwClaq\u0022 rel=\u0022external nofollow\u0022\u003EThrust Angle wrt. Altitude\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe target orbit was set to 400,000m altitude. The ship model used was the same as in the first test, but the engine Isp was set to 800s so it would have enough fuel to orbit.\u003C/p\u003E\u003Cp\u003EThere\u0027s a lot of noise in the \u0022thrust profile\u0022 function whenever the thrust is zero. This is because there\u0027s no preferred direction to point your ship when the thrust is zero. (Is there a way to eliminate this noise?)\u003C/p\u003E\u003Cp\u003EI\u0027ve had partial success with ascent in the atmosphere. The program definitely figures out to do a gravity turn (beginning around 10km) and to do a burn at periapsis, but the output is still quite messy:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/AGzWine\u0022 rel=\u0022external nofollow\u0022\u003EAtmospheric Ascent Thrust\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://imgur.com/hrvnIRz\u0022 rel=\u0022external nofollow\u0022\u003EAtmospheric Ascent Profile\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ll play with the program and model some more to see if I can get a better result.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-01T08:48:56Z\u0022 title=\u002209/01/2013 08:48  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 1, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2013-08-31T16:17:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022alterbaron\u0022 data-cite=\u0022alterbaron\u0022\u003E\u003Cdiv\u003EThere\u0027s a lot of noise in the \u0022thrust profile\u0022 function whenever the thrust is zero. This is because there\u0027s no preferred direction to point your ship when the thrust is zero. (Is there a way to eliminate this noise?)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou have to make turns cost something. Like a very small amount of fuel, in this case, or gong for a complete solution with RCS fuel consumed and also optimzied for. That\u0027s the only way I know.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-31T19:41:01Z","Content":"\n\u003Cp\u003EOr change your coordinates to horizontal thrust and vertical thrust. Then the origin is unique.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-08-31T21:02:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EOr change your coordinates to horizontal thrust and vertical thrust. Then the origin is unique.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s a great idea (and a simple change to make).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EYou have to make turns cost something. Like a very small amount of fuel, in this case, or gong for a complete solution with RCS fuel consumed and also optimzied for.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMight be worth looking into, but might make the already hard to solve problem harder to solve.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-09-01T07:29:34Z","Content":"\n\u003Cp\u003ETaking tavert\u0027s advice, I converted over to using horizontal and vertical thrust (rather than thrust and thrust angle).\u003C/p\u003E\u003Cp\u003EWith a little tweaking, I\u0027ve been able to coax some nice results out of PSOPT.\u003C/p\u003E\u003Cp\u003EI input a model of the SSTO from the launch efficiency challenge to put the program through it\u0027s paces.\u003C/p\u003E\u003Cp\u003EIt was able to solve for a launch profile to orbit that challenging craft. However, it used 0.1 tons more fuel than the craft has available.\u003C/p\u003E\u003Cp\u003EPerhaps with more computation time this will improve? It\u0027s still a good result regardless.\u003C/p\u003E\u003Cp\u003EHere are the results:\u003C/p\u003E\u003Cp\u003EPitch as a function of altitude: \u003Ca href=\u0022http://i.imgur.com/TVTblEt.png\u0022 rel=\u0022external nofollow\u0022\u003EThrust Angle Chart\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThrust as a function of altitude (there\u0027s a bit of noise visible, might account for extra fuel consumption.): \u003Ca href=\u0022http://i.imgur.com/KJWTlFx.png\u0022 rel=\u0022external nofollow\u0022\u003EThrust Magnitude Chart\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EVelocity compared to terminal velocity: \u003Ca href=\u0022http://imgur.com/rSPIT8j.png\u0022 rel=\u0022external nofollow\u0022\u003ELow-Altitude Velocity (with Terminal Velocity for Comparison) Chart\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EFinal craft mass: 3.2066 tons (craft dry mass = 3.3 tons).\u003C/p\u003E\u003Cp\u003EThere\u0027s still some improvement possible, and progress is being made!\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EEDIT:\u003C/strong\u003E I managed to get a much better result that eliminated the noise in the thrust function above.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/uo0KebN.png\u0022 alt=\u0022uo0KebN.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/wepxc6U.png\u0022 alt=\u0022wepxc6U.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/I1uEh3w.png\u0022 alt=\u0022I1uEh3w.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EInteresting things to note (do these make sense?):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E Ship stays throttled down to maintain a velocity lower than terminal between 10-15km when it could have throttled up again.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Ship throttles up past 15km, then throttles down significantly as it pitches towards the horizon.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E Continuous application of (light) thrust in the upper atmosphere.\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFinal craft mass was 3.2148 tons, so still a little short on fuel. Still, a margin of \u0026lt;0.1 ton of fuel is pretty OK.\u003C/p\u003E\u003Cp\u003EOptimization took 12 minutes (18k solver iterations) using Legendre collocation method with 40 nodes. NLP tolerance 1e-6.\u003C/p\u003E\u003Cp\u003EI\u0027ve tried local discretizations as well (through PSOPT). They run much more quickly and consistently return reasonable results. There\u0027s still some noise in the control output though, but they\u0027re worth investigating a bit more.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-01T10:07:37Z\u0022 title=\u002209/01/2013 10:07  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 1, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-09-01T15:27:03Z","Content":"\n\u003Cp\u003EThat looks great! Can you share the source for your model?\u003C/p\u003E\u003Cp\u003EIt would be interesting to plot thrust divided by mass. In the challenge, we were seeing that applying an acceleration limit of 22 m/s^2 for the entire flight, even after starting the gravity turn, did give better efficiency - so your results do make sense. The challenge craft was using a LV-T30, so the max thrust should be 215 kN, not 200. Maybe with more thrust you\u0027ll make orbit with some mass left over.\u003C/p\u003E\n"},{"CreatedByName":"Stochasty","CreatedById":57264,"CreatedDateTime":"2013-09-01T17:02:27Z","Content":"\n\u003Cp\u003ESomething I would like to see plotted during the gravity turn is an \u0022effective terminal velocity\u0022 computed using gravity times the cosine of the thrust angle - the idea being that, as you begin the gravity turn, a smaller portion of your thrust is fighting gravity losses, and therefore the balance between gravity losses and drag losses should occur at a lower total velocity.\u003C/p\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-09-01T20:53:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EThe challenge craft was using a LV-T30\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHm, looks like I used the wrong engine. The correct engine has more thrust and less mass.\u003C/p\u003E\u003Cp\u003EI took another look at the challenge thread, and re-adjusted my parameters to properly match the challenge craft.\u003C/p\u003E\u003Cp\u003EThis time, it was able to orbit successfully, with fuel to spare!\u003C/p\u003E\u003Cp\u003ECraft parameters:\u003C/p\u003E\u003Cp\u003EIsp(1atm) = 320s\u003C/p\u003E\u003Cp\u003EIsp(vac) = 370s\u003C/p\u003E\u003Cp\u003ETmax = 215kN\u003C/p\u003E\u003Cp\u003EFully-fueled mass: 11.15 t\u003C/p\u003E\u003Cp\u003EDry mass: 3.15 t\u003C/p\u003E\u003Cp\u003EMass after circularization at 74km: 3.1659 t\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/L7AOppL.png\u0022 alt=\u0022L7AOppL.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/5GErsVl.png\u0022 alt=\u00225GErsVl.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/qnLn30z.png\u0022 alt=\u0022qnLn30z.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/6162IiZ.png\u0022 alt=\u00226162IiZ.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT: Version with more collocation points added: \u003Ca href=\u0022http://imgur.com/a/NuHhi\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://imgur.com/a/NuHhi\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EModel source code: \u003Ca href=\u0022https://gist.github.com/alterbaron/6407325\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://gist.github.com/alterbaron/6407325\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ENeeds to be tidied up a little, but I hope it\u0027s clear enough to follow.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-01T21:22:42Z\u0022 title=\u002209/01/2013 09:22  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 1, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Stochasty","CreatedById":57264,"CreatedDateTime":"2013-09-02T02:36:07Z","Content":"\n\u003Cp\u003EHmmm... it\u0027s a much closer fit, but velocity is still well below even my \u0022effective\u0022 terminal velocity through the gravity turn, despite having thrust to spare. That\u0027s very interesting.\u003C/p\u003E\u003Cp\u003EEdit: Are you accounting for centripetal acceleration in your terminal velocity computation?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-02T03:21:59Z\u0022 title=\u002209/02/2013 03:21  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 2, 2013\u003C/time\u003E by Stochasty\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"alterbaron","CreatedById":57492,"CreatedDateTime":"2013-09-03T23:10:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EEdit: Are you accounting for centripetal acceleration in your terminal velocity computation?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe above plot doesn\u0027t include any centrifugal force due to the rotating frame of reference.\u003C/p\u003E\u003Cp\u003EI played around a bit with including fictitious forces in the computation, and arrived at a model that fits the data pretty well up to the 30km mark.\u003C/p\u003E\u003Cp\u003EIn the force balance used to determine the terminal velocity, I included both the centrifugal force as well as the component of the coriolis force opposite to the direction of gravity.\u003C/p\u003E\u003Cp\u003EThen, I applied your thrust angle idea to the new terminal velocity equation:\u003C/p\u003E\u003Cp\u003EF_drag = sin(Thrust_angle) * (gravity \u002B centrifugal_force \u002B coriolis_force*cos(Velocity_angle))\u003C/p\u003E\u003Cp\u003EThis gave quite a nice fit:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/cI3gvn2.png\u0022 alt=\u0022cI3gvn2.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EAlso, I took a look at the thrust angle relative to the orbital velocity direction (prograde indicator on navball):\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/3NxZ6yJ.png\u0022 alt=\u00223NxZ6yJ.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ESeems to suggest that above 20km (and with a craft with a high TWR), one should essentially start following the prograde indicator on the navball. This could be explained as maximizing the useful work done by the engine.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-03T23:12:57Z\u0022 title=\u002209/03/2013 11:12  PM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 3, 2013\u003C/time\u003E by alterbaron\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2014-01-26T17:54:15Z","Content":"\n\u003Cp\u003ESorry to pull up this old thread but the topic is rather timeless.\u003C/p\u003E\u003Cp\u003EI read about half the thread and understood about half of that... my understanding of engl. math terms sucks\u003C/p\u003E\u003Cp\u003ESo could you help me / tell me if the following description of the problem is somehow accurate ?!\u003C/p\u003E\u003Cp\u003EIf i have a rocket with max thrust = gravity (TWR 1) it would not be able to lift off. For every bit of thrust above that i could make it to orbit, given infinite fuel (for simplicity lets assume the rocket has constant mass and infinite fuel). \u003C/p\u003E\u003Cp\u003EIf i go really slow, i dont waste fuel on fighting drag but i fight gravity a lot. \u003C/p\u003E\u003Cp\u003EIf i go really fast i fight a lot of drag but fight gravity only a little, cause it wont take long.\u003C/p\u003E\u003Cp\u003ESo if i keep a balance of 1 to 1 of the drag/gravity forces i fight them both equally so it should be best...\u003C/p\u003E\u003Cp\u003EBUT because the drag has velocity squared in it, a little less velocity would greatly reduce the drag and only add a little more time = gravity.\u003C/p\u003E\u003Cp\u003EI wrote myself a little program that simulates kerbal physics and i had it run vertical ascends to 80 km with throttle limited to x*terminal velocity. For one TWR combination 90% was the best solution (least fuel).\u003C/p\u003E\u003Cp\u003EI googled a lot and found some explanation that in reality the best speed is a bit above TV and is limited by max_q...\u003C/p\u003E\u003Cp\u003EIm kinda confused. Everyone says its the best and the formulas seems to make sense... but everyone is leaving something out to simplify. Does no one believe that the real solution might be somewhere above/below TV ?! Or is everyone convinced that TV is an ironclad solution ?!\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-01-26T18:01:18Z","Content":"\n\u003Cp\u003EPost the source of your simulation and we can look over it. Were you accounting for the reduction in effective weight due to the rotation of the surface of Kerbin?\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-26T18:23:46Z","Content":"\n\u003Cp\u003EThe vertical ascent problem has a number of assumptions in it that might not be fulfilled.\u003C/p\u003E\u003Cp\u003E1) Atmospheric density is either constant or drops exponentially. (Exponential in KSP, a little different in real world.)\u003C/p\u003E\u003Cp\u003E2) Drag is proportional to mass. (True in KSP, but not in real world.)\u003C/p\u003E\u003Cp\u003E3) Gravity is constant. (Not exactly true in either KSP or real world, but very close.)\u003C/p\u003E\u003Cp\u003E4) There is no rotation. (Not true, but doesn\u0027t make much difference either.)\u003C/p\u003E\u003Cp\u003E5) The target is \u0022infinitely\u0022 removed. So there is no coasting to reach the necessary altitude. (Depends very much on how you run your tests.)\u003C/p\u003E\u003Cp\u003EAll of these affect a real launch, which is why real TWR for optimal ascent might not be exactly 2. This also doesn\u0027t take into account the gravity turn which makes things very different.\u003C/p\u003E\u003Cp\u003EThese are just some general points which may result in you getting something a bit different. As tavert suggested, if you post your code, we can probably say something more specific. But under above assumptions, optimization TWR=2 is exact. It\u0027s very simple to derive for constant atmospheric pressure, but takes a bit of work for exponential atmosphere of KSP. Result is exactly the same, though.\u003C/p\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2014-01-26T19:16:50Z","Content":"\n\u003Cp\u003EWell, basically what i do is\u003C/p\u003E\u003Cp\u003Ecalculate drag and grav with altitude[now] and velocity[now].\u003C/p\u003E\u003Cp\u003EThen i run some back\u0027n\u0027forth estimation to find the best thrust factor to achieve a certain drag ratio in the next calcuation.\u003C/p\u003E\u003Cp\u003Ewith this factor i calc the acceleration as accel = thrust*factor -drag -grav\u003C/p\u003E\u003Cp\u003Evelocity[next] would then be velocity[now] \u002B accel / timedelta\u003C/p\u003E\u003Cp\u003Eand altitude[next] is velocity[next] / timedelta\u003C/p\u003E\u003Cp\u003E1) atmo is exponential KSP\u003C/p\u003E\u003Cp\u003E3) grav is KSP\u003C/p\u003E\u003Cp\u003E4) no rotation is considered\u003C/p\u003E\u003Cp\u003E5) this is more tricky. I do at every step calculate the AP that could/would be reached and stop accelerating. This does not achieve the AP that is calculated at this point, because future drag/grav may lower it, but its a really small deviation. Coasting is then calculated like above until speed \u0026lt;= 1 and the result is \u0022printed\u0022 out\u003C/p\u003E\u003Cp\u003EI wrote the stuff in android/java because i work with that stuff so its easy for me and ill add visualisation stuff once it works better. Right now the calcuation time for each ascend is about a second (on my Galaxy S2 with 1,4 Ghz).\u003C/p\u003E\u003Cp\u003EEdit:\u003C/p\u003E\u003Cp\u003Efunfact...\u003C/p\u003E\u003Cp\u003EWith my sim, if i run the test with a rocket with TWR below 2,1 it can never reach terminal velocity, its close but cant reach, because its always gaining just enough altitude to reduce the drag so that it matches its gain in velocity.\u003C/p\u003E\u003Cp\u003E(constant mass of 10 tons, 210 kN thrust, starts coasting at 42148 m with speed 784,3 m/s to reach 80 km altitude)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-27T18:19:58Z\u0022 title=\u002201/27/2014 06:19  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 27, 2014\u003C/time\u003E by NikkyD\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-01-28T23:09:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003EWell, basically what i do is\u003Cp\u003Ecalculate drag and grav with altitude[now] and velocity[now].\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EVelocity should be the the velocity relative to the atmosphere - that was one mistake \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/58531-Finding-the-best-ascent-path-for-rockets?p=880685\u0026amp;viewfull=1#post880685\u0022 rel=\u0022external nofollow\u0022\u003Etavert made me aware of\u003C/a\u003E during my implementation.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThen i run some back\u0027n\u0027forth estimation to find the best thrust factor to achieve a certain drag ratio in the next calcuation.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere should be a way to replace the \u0022back\u0027n\u0027forth estimation\u0022 by a one-way-back calculation beginning with target altitude and target drag ratio. This will increase the performance.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NikkyD\u0022 data-cite=\u0022NikkyD\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Ewith this factor i calc the acceleration as accel = thrust*factor -drag -grav\u003C/p\u003E\u003Cp\u003Evelocity[next] would then be velocity[now] \u002B accel / timedelta\u003C/p\u003E\u003Cp\u003Eand altitude[next] is velocity[next] / timedelta\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou probably mean?!\u003C/p\u003E\u003Cp\u003Eaccel = (thrust\u003Cstrong\u003Eforce\u003C/strong\u003E*factor -drag\u003Cstrong\u003Eforce\u003C/strong\u003E -grav\u003Cstrong\u003Eforce\u003C/strong\u003E) \u003Cstrong\u003E/ mass\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Evelocity[next] = velocity[now] \u002B accel \u003Cstrong\u003E*\u003C/strong\u003E timedelta\u003C/p\u003E\u003Cp\u003Ealtitude[next] = \u003Cstrong\u003Ealtitude[now]\u003C/strong\u003E \u002B velocity[next] \u003Cstrong\u003E*\u003C/strong\u003E timedelta\u003C/p\u003E\u003Cp\u003EEdit: And these values are handled as vectors and not scalars.\u003C/p\u003E\u003Cp\u003EDepending on the magnigude of timedelta the last two formulas can lead to significant rounding errors.\u003C/p\u003E\u003Cp\u003EThe larger the timedelta the larger the rounding errors.\u003C/p\u003E\u003Cp\u003EThe reasong for the issure of 90% terminal velocity is hard to guess without seeing the code.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-29T20:07:38Z\u0022 title=\u002201/29/2014 08:07  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 29, 2014\u003C/time\u003E by mhoram\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fibonatic","CreatedById":73180,"CreatedDateTime":"2014-01-29T22:49:28Z","Content":"\n\u003Cp\u003EI agree with mhoram about your formulation of acceleration. And your integration method is called \u003Ca href=\u0022https://en.wikipedia.org/wiki/Euler_method\u0022 rel=\u0022external nofollow\u0022\u003Eexplicit Euler method\u003C/a\u003E, which is probably the most intuitive and easy numerical integration method, but also one of the least accurate with a global error proportional to your time step-size. There are a lot of different numerical integration methods for ordinary differential equations out there, a well known family are the Runge\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Kutta methods, which can easily get a global error proportional to your time step-size to the power of 5. So by decreasing your time step by a factor 1/2 will increase your accuracy by a factor 2^5=32. And there are even methods which have dynamic step-sizes, which will reduce your number of calculations while in a relative \u0022smooth\u0022 part of your simulation.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EWith my sim, if i run the test with a rocket with TWR below 2,1 it can never reach terminal velocity, its close but cant reach, because its always gaining just enough altitude to reduce the drag so that it matches its gain in velocity.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt is correct that you need a TWR higher than 2 to maintain TV, since the TV will increase with altitude, which means you need extra acceleration to achieve the new TV. (gravity will also decrease but a lot slower than the increase of TV).\u003C/p\u003E\u003Cp\u003EPS: I have tried to tackle the 2D optimal ascent trajectory my self using the toolkit \u003Ca href=\u0022https://sourceforge.net/p/acado/wiki/Home/\u0022\u003EACADO[\\url] within MATLAB, since I also would like to know what good ascent profiles are on other atmosphere bearing celestial bodies. These are the differential equations:\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/G2P1pcq.png\u0022 alt=\u0022G2P1pcq.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://sourceforge.net/p/acado/wiki/Home/\u0022\u003Ewhere v_r is the radial velocity, r the radius, v_theta the tangential velocity, omega_s the angular velocity of the surface/atmosphere, mu the gravitational parameter, alpha_r the applied acceleration (force per mass) in the radial direction, alpha_theta the applied acceleration the tangential direction, H the scale height of the atmosphere and C a composed drag parameter (which removed the need of exp(r0/H)).\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://sourceforge.net/p/acado/wiki/Home/\u0022\u003EHowever every attempt of a script seems the have the problem that it ignores all/most constrains, such as final radius and velocity or just jumps to it on the final step.\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-01-29T23:05:19Z","Content":"\n\u003Cp\u003EI tried ACADO (via C\u002B\u002B \u003Ca href=\u0022https://gist.github.com/tavert/7783938\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://gist.github.com/tavert/7783938\u003C/a\u003E) with KSP physics a few months ago, it couldn\u0027t even solve a strictly vertical ascent problem. The authors are also absolutely unresponsive to most issues that get reported on their discussion board.\u003C/p\u003E\u003Cp\u003ENot sure trying to eliminate time and solve with radius as the differential variable is a great idea. You\u0027ll need to take into account the variation of Isp vs altitude if you want to minimize actual fuel use, and there can be trajectories for which altitude versus time is not an invertible function.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-30T00:03:12Z","Content":"\n\u003Cp\u003EI\u0027m really starting to think that the \u0022simplest\u0022 way to solve this problem is a genetic algorithm with simulated annealing. I guess, I\u0027ll play around with that.\u003C/p\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2014-01-30T11:45:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022mhoram\u0022 data-cite=\u0022mhoram\u0022\u003E\u003Cdiv\u003EVelocity should be the the velocity relative to the atmosphere\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI dont understand.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eaccel = (thrust\u003Cstrong\u003Eforce\u003C/strong\u003E*factor -drag\u003Cstrong\u003Eforce\u003C/strong\u003E -grav\u003Cstrong\u003Eforce\u003C/strong\u003E) \u003Cstrong\u003E/ mass\u003C/strong\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMakes no difference ?!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAnd these values are handled as vectors and not scalars.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPlease elaborate as well\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-01-30T14:02:59Z","Content":"\n\u003Cp\u003EAbout the issue of vectors, I meant, that you have to represent the velocity of the ship as the horizontal and a vertical component.\u003C/p\u003E\u003Cp\u003EThe forces also have horizontal and vertical components, so\u003C/p\u003E\u003Cp\u003EaccelX = (thrustforceX*factor -dragforceX -gravforceX) / mass\u003C/p\u003E\u003Cp\u003EaccelY = (thrustforceY*factor -dragforceY -gravforceY) / mass\u003C/p\u003E\u003Cp\u003Eand the directions of the three forces are different:\u003C/p\u003E\u003Cp\u003E- Gravity points towarts the planets core\u003C/p\u003E\u003Cp\u003E- Thrust points towarts the current orientation of the ship\u003C/p\u003E\u003Cp\u003E- Drag points in the opposite direction of the current momement of the ship\u003C/p\u003E\u003Cp\u003EA simple subtraction of the absolute force values will lead to errors.\u003C/p\u003E\u003Cp\u003EIf you implemented the status of a rocket with the compoments altitude, horizontal velocity and vertical velocity then the issue of the atmosphere is irrelevant, because you most likely assume already that the ship moves relative to the atmosphere.\u003C/p\u003E\n"},{"CreatedByName":"NikkyD","CreatedById":97466,"CreatedDateTime":"2014-01-30T14:36:50Z","Content":"\n\u003Cp\u003EIts a pure vertical ascent, there is no horizontal component at this time (simplified).\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-31T05:20:43Z","Content":"\n\u003Cp\u003EI\u0027ve been playing around with all of this, and I\u0027m having trouble getting simulation to match the game to a satisfactory precision.\u003C/p\u003E\u003Cp\u003EFor a ship, I have an FL-T100 with LV-909 underneath and Mk-1 on top. Oh, and Mk-16 parachute for not killing the test pilot. That gives me dry mass of 1.463T and 0.4995T of fuel on the pad.\u003C/p\u003E\u003Cp\u003EThe engine produces constant 50kN of thrust. I\u003Csub\u003ESP\u003C/sub\u003E is computed according to atmospheric pressure, and I\u0027m using g0 value of 9.82m/s\u00C3\u201A\u00C2\u00B2, same as the game\u0027s code, to get the fuel flow.\u003C/p\u003E\u003Cp\u003ESpeaking of the atmosphere, Kerbin has legacy atmo, meaning pressure as function of altitude is P = exp(-h/5000m) atmospheres. I multiply that by 101325.0/82843.125 kg/m\u00C3\u201A\u00C2\u00B3/atm to get density at altitude h.\u003C/p\u003E\u003Cp\u003EThis leads me on to drag, which is computed as 0.5*0.008*\u00C3\u00C2*d*v\u00C3\u201A\u00C2\u00B2. The value for d is computed dynamically as fuel is used up, but it\u0027s so close to 0.2 that it might as well be that.\u003C/p\u003E\u003Cp\u003EFinally, I add in acceleration due to gravity g = \u00C3\u017D\u00C2\u00BC/(h\u002BR)\u00C3\u201A\u00C2\u00B2 with \u00C3\u017D\u00C2\u00BC = 3.5316000x10\u003Csup\u003E12\u003C/sup\u003E and R = 600km. As well as centrifugal force, \u00C3\u00E2\u20AC\u00B0\u00C3\u201A\u00C2\u00B2(R\u002Bh). Both of these are consistent with how the game computes them. I do ignore Coriolis force, but since the craft lands almost next to where it took off from, it cannot be significant.\u003C/p\u003E\u003Cp\u003EI\u0027ve tried integrating with Euler and Verlet using a 20ms time step, which seems to be default physics time step for Unity, and I think that\u0027s what the game uses at Warp x1. The problem is that in my simulation, the craft overshoots by almost 10%. In KSP, I get maximum altitude with throttle to the wall at 5488m, while simulation yields 5840m.\u003C/p\u003E\u003Cp\u003EIn addition, I\u0027ve tried comparing other parameters. Fuel cutoff seems to happen at the correct time, so I\u0027m pretty sure fuel usage is fine. However, right before cutoff, my simulated craft is going at 216m/s, and the game tops out at about 206-207m/s. Similarly, if I just drop the ship in my simulation from 5488m/s, the impact happens at about 106m/s, while in KSP I get something clsoer to 104m/s.\u003C/p\u003E\u003Cp\u003ESo error in drag computation would be my first guess. But I just can\u0027t find any problem with it. The equation I\u0027m using for drag computation is consistent with both the wiki and what I\u0027ve been able to dig up in the game\u0027s code. Of course, I don\u0027t expect perfect agreement, nor do I need it, but 10% is much too much for something that seems to be using all the same computations. Any suggestions?\u003C/p\u003E\n"},{"CreatedByName":"mhoram","CreatedById":78756,"CreatedDateTime":"2014-01-31T08:37:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EFor a ship, I have an FL-T100 with LV-909 underneath and Mk-1 on top. Oh, and Mk-16 parachute for not killing the test pilot. That gives me dry mass of 1.463T and 0.4995T of fuel on the pad.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI come up with 1.4625T dry mass and 0.5T of fuel for these parts. (I assumed Command Pod Mk1)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThis leads me on to drag, which is computed as 0.5*0.008*\u00C3\u00C2*d*v\u00C3\u201A\u00C2\u00B2. The value for d is computed dynamically as fuel is used up, but it\u0027s so close to 0.2 that it might as well be that.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESomehow I am missing the ships mass in this formula. (Area = 0.008 * currentMass)\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFinally, I add in acceleration due to gravity g = \u00C3\u017D\u00C2\u00BC/(h\u002BR)\u00C3\u201A\u00C2\u00B2 with \u00C3\u017D\u00C2\u00BC = 3.5316000x10\u003Csup\u003E12\u003C/sup\u003E and R = 600km. As well as centrifugal force, \u00C3\u00E2\u20AC\u00B0\u00C3\u201A\u00C2\u00B2(R\u002Bh). Both of these are consistent with how the game computes them. I do ignore Coriolis force, but since the craft lands almost next to where it took off from, it cannot be significant.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat starting altitude do you use? I usually start the ascent around 70-80m\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2014-01-31T09:05:19Z","Content":"\n\u003Cp\u003EDid you remove the monopropellant from the pod? And what do you mean by \u0022legacy atmo\u0022?\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-01-31T10:50:30Z","Content":"\n\u003Cp\u003E500g definitely won\u0027t make a difference, but I\u0027ll recheck my numbers. For drag, yeah, all of that times mass. Since everything but thrust is proportional to mass, I\u0027ve been working with acceleration, but I should have clarified. And I\u0027m starting at 75m.\u003C/p\u003E\u003Cp\u003Etavert, game supports two atmospheric models. One is exponentially decaying, referred to as legacy atmosphere, and the other is based on curves. Later can be used to model a more realistic atmosphere. There are some mods out there that already support it, but vanilla planets use the exponential atmosphere.\u003C/p\u003E\u003Cp\u003ESo I started putting together a genetic optimizer. It\u0027s still a bit rough, and might need better annealing, but it looks like a good start. This is 1D, using same simulation as above. (So this isn\u0027t a perfect replica of KSP, but qualitatively it should match, at least.) The only optimization parameter is maximum altitude achieved.\u003C/p\u003E\u003Cp\u003EAltitude (left) and velocity (right) as function of time. Full throttle ascent in red, optimized in blue.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://imagizer.imageshack.us/v2/360x225q90/838/u4gf.png\u0022 alt=\u0022u4gf.png\u0022\u003E\u003Cimg src=\u0022https://imagizer.imageshack.us/v2/360x212q90/835/3jp8.png\u0022 alt=\u00223jp8.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe thin blue line on the velocity graph indicates terminal velocity at altitude achieved by optimized flight.\u003C/p\u003E\u003Cp\u003EAnd this is the throttle position (left) and resulting TWR (right). Only first 45 seconds shown, because engine cuts out after that.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://imagizer.imageshack.us/v2/360x234q90/691/b3as.png\u0022 alt=\u0022b3as.png\u0022\u003E\u003Cimg src=\u0022https://imagizer.imageshack.us/v2/360x234q90/199/gcdu.png\u0022 alt=\u0022gcdu.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EYes, it\u0027s noisy. Yes, I can do something about the noise, but it\u0027s not a priority right now. It\u0027s good enough for a test. It does show an interesting feature, though. As expected, the ship takes off with full throttle, and then dials it down as ascent settles on terminal velocity. TWR holds around 2 at that point. However, right before the engine cutoff, throttle goes up again. Apparently, to give the ship that one last push before it begins coasting. That bit was somewhat unexpected.\u003C/p\u003E\u003Cp\u003ESo, I guess, now I just have to figure out a good way to do this in 2D and give it enough fuel to make orbit.\u003C/p\u003E\n"}]}