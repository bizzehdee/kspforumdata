{"TopicId":181250,"ForumId":104,"TopicTitle":"Preferred way to put C# format strings in localization config?","CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T19:17:04Z","PageNum":1,"Articles":[{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T19:17:04Z","Content":"\n\u003Cp\u003E\nSo I\u0027m authoring a mod, and since I\u0027d like to be a well-behaved global citizen, I\u0027m setting it up so that all of the user-facing strings are in a localization file (even though I\u0027m only releasing it in English).\u00A0 The config file for localization looks like this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nLocalization\n{\n    en-us\n    {\n        #MyModName_someTag = This is a user-facing string.\n        #MyModName_someOtherTag = This is another user-facing string.\n        // etc.\n    }\n}\u003C/pre\u003E\n\u003Cp\u003E\nSo far, so good.\n\u003C/p\u003E\n\u003Cp\u003E\nBut let\u0027s say that the user-facing string I want to store is a \u003Cem\u003E\u003Cu\u003Eformat specifier\u003C/u\u003E\u003C/em\u003E, i.e. it\u0027s something like this:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EYou have {0} seconds until the universe explodes!\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n...where the \u0022{0}\u0022 is an insertion point for some parameter.\n\u003C/p\u003E\n\u003Cp\u003E\nI say \u0022{0}\u0022 because that syntax (\u0022{0}\u0022, \u0022{1}\u0022, etc.) is the standard syntax for C# format strings; it \u003Ca href=\u0022https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=netframework-3.5#the-format-item\u0022 rel=\u0022external nofollow\u0022\u003Eplays nice with the string.Format() function\u003C/a\u003E.\n\u003C/p\u003E\n\u003Cp\u003E\nWell, what I\u0027d \u003Cem\u003E\u003Cu\u003Elike\u003C/u\u003E\u003C/em\u003E to do is just put it into config, like this:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\nLocalization\n{\n    en-us\n    {\n        // Message displayed to user when the universe is about to explode.\n        // The {0} is the number of seconds remaining.\n        #MyModName_universeExplodeFormat = You have {0} seconds until the universe explodes!\n    }\n}\u003C/pre\u003E\n\u003Cp\u003E\n...The problem, though, is that curly braces are \u003Cem\u003E\u003Cu\u003Epart of config syntax\u003C/u\u003E\u003C/em\u003E, so if I literally just use the string \u0022{0}\u0022, the KSP config parser interprets it as a child node and hilarity ensues.\n\u003C/p\u003E\n\u003Cp\u003E\nI can certainly \u003Cem\u003E\u003Cu\u003Ehack\u003C/u\u003E\u003C/em\u003E my way around it-- for example, I could pick some other bracket type that the config parser doesn\u0027t care about, e.g. use [0] instead of {0}, and in my code that reads this, I just do a search-and-replace to swap out the brackets before passing it to \u003Cspan style=\u0022font-family:\u0027Courier New\u0027, Courier, monospace;\u0022\u003Estring.Format()\u003C/span\u003E.\u00A0 So it\u0027s not... \u003Cem\u003E\u003Cu\u003Eblocking\u003C/u\u003E\u003C/em\u003E me, exactly, but it\u0027s kludgy and idiosyncratic, both of which I dislike when I\u0027m coding.\n\u003C/p\u003E\n\u003Cp\u003E\nSo, my question is:\u00A0 \u003Cspan style=\u0022background-color:#ffff00;\u0022\u003EHow do people usually deal with this?\u003C/span\u003E\u00A0 Is there a common practice that people tend to follow?\u00A0 Surely this must be a thing that comes up?\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2019-01-08T19:43:26Z","Content":"\n\u003Cp\u003E\nThe Lingoona format for that is \u0026lt;\u0026lt;1\u0026gt;\u0026gt;, and then pass the argument as an extra parameter to KSP.Localization.Localizer.Format:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/HebaruSan/Astrogator/blob/674952ab884a6b8c087d81957a36ce02c8cb0205/assets/lang/en-us.cfg#L10\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/HebaruSan/Astrogator/blob/674952ab884a6b8c087d81957a36ce02c8cb0205/assets/lang/en-us.cfg#L10\u003C/a\u003E\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\n\t\tastrogator_outboundHyperbolicError = \u0026lt;\u0026lt;1\u0026gt;\u0026gt; is on an escape trajectory.\\nCapture to see transfers.\u003C/pre\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/HebaruSan/Astrogator/blob/674952ab884a6b8c087d81957a36ce02c8cb0205/src/ViewTools.cs#L1112-L1115\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/HebaruSan/Astrogator/blob/674952ab884a6b8c087d81957a36ce02c8cb0205/src/ViewTools.cs#L1112-L1115\u003C/a\u003E\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022kwd\u0022\u003Eusing\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E KSP\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003ELocalization\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\t\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Ereturn\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan\u003ELocalizer\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan\u003EFormat\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan class=\u0022str\u0022\u003E\u0022astrogator_outboundHyperbolicError\u0022\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\t\u003C/span\u003E\u003Cspan\u003ETheName\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Emodel\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eorigin\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\t\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThe documentation for this stuff, such as it is:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022http://lingoona.com/cgi-bin/grammar#l=en\u0026amp;oh=1\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://lingoona.com/cgi-bin/grammar#l=en\u0026amp;amp;oh=1\u003C/a\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-01-08T20:05:19Z\u0022 title=\u002201/08/2019 08:05  PM\u0022 data-short=\u00225 yr\u0022\u003EJanuary 8, 2019\u003C/time\u003E by HebaruSan\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Snark","CreatedById":125662,"CreatedDateTime":"2019-01-08T20:46:33Z","Content":"\n\u003Cp\u003E\nThanks, makes sense. The downside of having Lingoona do it for me is that I don\u0027t get the benefit of the rich format specifiers (e.g. numeric formats, etc.) that C# formatting provides. Anyway, though, good to know about. Thanks!\n\u003C/p\u003E\n"},{"CreatedByName":"DMagic","CreatedById":57416,"CreatedDateTime":"2019-01-09T18:12:24Z","Content":"\n\u003Cp\u003E\nAlso note that the Lingoona format start with 1 for argument numbers, rather than 0 like everything else.\n\u003C/p\u003E\n\u003Cp\u003E\nAs for not being able to specify the numerical format in the config, you can take a little bit of solace in the fact that you can avoid a few bytes of garbage allocation for each string by avoiding the boxing inherent in using something like:\u00A0\u003Cimg alt=\u0022:wink:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 title=\u0022:wink:\u0022\u003E\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html\u0022\u003E\nstring text = String.Format(\u0022{0:N2}\u0022, 45.234}; //The float is boxed and generates garbage\n\nstring text = String.Format(\u0022{0}\u0022, 45.235.ToString(\u0022N2\u0022); //The argument is no longer boxed and doesn\u0027t generate garbage (though ToString will always generate a little bit of garbage)\n\u003C/pre\u003E\n"}]}