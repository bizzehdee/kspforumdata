{"TopicId":43397,"ForumId":36,"TopicTitle":"Goddard Problem Solver","CreatedByName":"Racer319","CreatedById":36876,"CreatedDateTime":"2013-08-21T19:26:58Z","PageNum":1,"Articles":[{"CreatedByName":"Racer319","CreatedById":36876,"CreatedDateTime":"2013-08-21T19:26:58Z","Content":"\n\u003Cp\u003EHey everyone! I have some free time, so I\u0027m writing a program that will take parameters for a ship, planet, and atmosphere and return the ideal launch path. Now that I\u0027m starting to code the physics for it, I have a few questions about the drag force. As far as I know, in the real world drag varies with velocity squared at high speeds and just with velocity at low speeds. I\u0027m guessing in KSP it\u0027s just v^2 the whole time, but does anyone know for sure? Also if you have any advice or suggestions I\u0027d be happy to hear it.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-22T00:14:55Z","Content":"\n\u003Cp\u003EWill this be a purely vertical ascent, or a more complicated version including a gravity turn to orbit, specific impulse varying with atmospheric pressure, hard atmosphere cutoff, variable throttle with an upper limit, etc? How do you plan to do the optimization?\u003C/p\u003E\u003Cp\u003EThere have been a number of discussions on this topic, you\u0027ll have to be very careful how you go about trying this and it will require some sophisticated numerical algorithms if you\u0027re trying to tackle the full version of the problem. Read through this recent thread for some guidance: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/46194-I-need-someone-help-me-do-some-math-for-launch-optimization\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/showthread.php/46194-I-need-someone-help-me-do-some-math-for-launch-optimization\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThe real-world drag equation says drag is proportional to 0.5 times ambient density times speed squared times cross-sectional area, but the proportionality coefficient (called the coefficient of drag) is not actually constant, it varies quite a bit as a function of mach number, angle of attack, and potentially several other factors. Anything you\u0027ve seen that says drag is linear with speed at low speeds is not referring to fluid drag, it\u0027s referring to mechanical losses or viscous damping or rolling resistance for a car, which are approximately linear trends that dominate at low speeds for something like a car. For a flying vehicle at low speeds (like a hovering quadcopter or Grasshopper), disturbances like wind gusts dominate and drag is not terribly significant.\u003C/p\u003E\u003Cp\u003EIn KSP, the drag equation is a little different. It\u0027s still proportional to 0.5 times ambient density times speed squared, but cross-sectional area is replaced by mass so the drag coefficient has a different meaning. The drag coefficient is the mass-weighted average of the drag coefficients of the parts that make up a craft - these coefficients are 0.2 for most parts, but slightly higher for solid rocket boosters, rover wheels, docking ports, and a few other things, and much higher for deployed parachutes. There\u0027s also an extra factor of 0.008 in the drag equation for some strange reason. See \u003Ca href=\u0022http://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://wiki.kerbalspaceprogram.com/wiki/Atmosphere\u003C/a\u003E for more information, although don\u0027t trust the 1.2002 number for density at sea level. As far as I can tell that appears to be the density at 76ish meters above sea level on the pad at KSC, but if you go all the way down to actual sea level then density\u0027s a little higher, around 1.223 kg/m^3.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-22T00:44:31Z\u0022 title=\u002208/22/2013 12:44  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 22, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Racer319","CreatedById":36876,"CreatedDateTime":"2013-08-22T01:53:59Z","Content":"\n\u003Cp\u003EI\u0027m planning on finding a 2D solution that accounts for the gravity turn, but right now it\u0027s 1D. I\u0027m using 4th Order Runge-Kutta for integration, specific impulse, gravity as a function of altitude, atmospheric density, etc... basically I want to fully solve the problem.\u003C/p\u003E\u003Cp\u003EI haven\u0027t completely thought it out yet, but I think I\u0027ll use some form of a gradient descent algorithm for optimization as it scales nicely with lots of variables.\u003C/p\u003E\u003Cp\u003EAbout the drag, I was referring to \u003Ca href=\u0022https://en.wikipedia.org/wiki/Stokes_law\u0022 rel=\u0022external nofollow\u0022\u003EStokes Drag\u003C/a\u003E at low velocity. From past research, I believe drag transitions to velocity squared somewhere around 10-20 m/s, for example: a basketball\u0027s drag will probably vary with velocity, while a baseball is velocity squared. I know how to handle these equations pretty well, but supersonic and hypersonic effects are beyond me. It sounds like the game currently ignores effects at transonic speeds, thank god for me. That will make things much simpler.\u003C/p\u003E\u003Cp\u003EIt sounds like the KSP drag equation is F\u003Csub\u003Ed\u003C/sub\u003E = (C\u003Csub\u003Ed\u003C/sub\u003E)(v\u003Csup\u003E2\u003C/sup\u003E)(p)(some constant)\u003C/p\u003E\u003Cp\u003Ewhere:\u003C/p\u003E\u003Cp\u003E C\u003Csub\u003Ed\u003C/sub\u003E = drag coefficient\u003C/p\u003E\u003Cp\u003E v = velocity\u003C/p\u003E\u003Cp\u003E p = atmospheric density\u003C/p\u003E\u003Cp\u003Eand it just ignores mach effects, cross section, and angle of attack? If so, I will need a value for C\u003Csub\u003Ed\u003C/sub\u003E for each test ship, or at least a decent estimate. It sounds like a list of parts might be enough to calculate this? Let me know if you think that could work.\u003C/p\u003E\u003Cp\u003EEventually I think I can make this work with multi-stage rockets, but that\u0027s probably quite a long way off.\u003C/p\u003E\n"},{"CreatedByName":"Duxwing","CreatedById":42282,"CreatedDateTime":"2013-08-22T01:59:24Z","Content":"\n\u003Cp\u003EYou may want to look into MechJeb, which can take a rocket up to an arbitrary orbit or down to an arbitrary landing site provided sufficient delta-V.\u003C/p\u003E\u003Cp\u003E-Duxwing\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-22T02:53:15Z","Content":"\n\u003Cp\u003EAh yeah, when things are dominated by viscosity and laminar skin friction rather than dynamic pressure I suppose it does end up linear. That\u0027s at pretty low Reynolds numbers, below the velocities we tend to care about. And in KSP you only have drag from dynamic pressure, no compressibility effects or angle of attack dependence (as long as the craft doesn\u0027t have any wings or control surfaces, and you aren\u0027t using the FAR mod).\u003C/p\u003E\u003Cp\u003EIt\u0027s not really Cd, it\u0027s more like Cd*m. Mass is used in place of cross-sectional area. Most ships have drag coefficient of 0.2, unless you have a lot of solid boosters or aerospikes or aircraft cockpits (the latter two are lower-drag than average).\u003C/p\u003E\u003Cp\u003EGradient descent doesn\u0027t handle poorly-scaled problems. It also isn\u0027t the cleanest way to approach problems with inequality constraints - you can use projection which is simple enough when your inequalities are just upper and lower bounds, but otherwise projection can be nontrivial. Applying constraints on the final conditions will also be problematic for a simple gradient method. Convergence of gradient methods isn\u0027t great, I recommend a Newton-based interior-point method instead. These are complicated enough to get right that it\u0027s best to use existing libraries that are out there.\u003C/p\u003E\u003Cp\u003EAnd with all gradient methods you need derivatives of your dynamics (plus second derivatives for Newton methods). It\u0027s simple enough to write a simulation program given a pitch and throttle profile, but much more time-consuming to also return the gradient, Jacobian, and Hessian matrices that an efficient optimization algorithm requires. Finite differencing is terrible for any problem with more than a handful of variables, so don\u0027t do that. There are optimization modeling languages out there that are much more suited to this task than just writing up a forward simulation in C or Python. You ideally want the modeling language to have automatic differentiation capability so it can generate all the information required by the optimization algorithm without you having to code the derivatives up by hand. AMPL or OpenOpt are probably the best options, though AMPL isn\u0027t free and I\u0027m not sure how well OpenOpt scales to large problems.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-22T02:55:35Z\u0022 title=\u002208/22/2013 02:55  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 22, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"magnemoe","CreatedById":57801,"CreatedDateTime":"2013-08-22T06:46:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Duxwing\u0022 data-cite=\u0022Duxwing\u0022\u003E\u003Cdiv\u003EYou may want to look into MechJeb, which can take a rocket up to an arbitrary orbit or down to an arbitrary landing site provided sufficient delta-V.\u003Cp\u003E-Duxwing\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMechjeb just launch along an set path, 5 km start turn 70 km end turn and reduce trust so speed stays terminal. If you launch from other places you need to change the launch profile for better performance.\u003C/p\u003E\n"},{"CreatedByName":"Racer319","CreatedById":36876,"CreatedDateTime":"2013-08-24T03:59:53Z","Content":"\n\u003Cp\u003Etavert thanks for all the helpful suggestions! and Duxwing i obviously know what mechjeb is, but it\u0027s ascent profiles are not perfectly optimized, and depending on your ship design they could be quite bad, so I want to try to improve on this.\u003C/p\u003E\u003Cp\u003Etavert: I have been writing the program in Java, and I\u0027m not sure why you recommend other languages. It seems like the most complicated math I will have to do is to solve differential equations and find derivatives, which I can estimate very closely with simple algorithms, so I don\u0027t really see the need the need for a higher level language. Although this might just be because I don\u0027t have any experience with them.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-24T05:51:54Z","Content":"\n\u003Cp\u003EJava\u0027s not that commonly used for low-level numerically intensive work. If it\u0027s what you\u0027re most comfortable working in go for it, there are Java interfaces to efficient optimization solvers, but none of the serious ones are written in Java themselves. Just like with Python or Matlab, the most important numerical kernels should be written in a compiled language and interfaced with a Python/Matlab/Java wrapper. The languages that I recommended are specifically designed for optimization as opposed to general-purpose programming or technical computing, so they handle all of the derivatives and the optimization problem formulation and interface with solvers automatically.\u003C/p\u003E\u003Cp\u003EIf you try a naive simple algorithm like gradient descent on a difficult large-scale sparse nonlinear optimization problem, you\u0027ll have to be extremely lucky for it to work well. The optimization algorithms that I recommend which work well for these problems are nonlinear interior-point methods. I can give you a few references to read about the basics of the algorithm, from the simple statement of the method you\u0027ll quickly realize you need a numerical linear algebra library that can solve large sparse symmetric indefinite linear systems at each iteration of the optimization algorithm. You\u0027ll find a few of these, most of which are actually still written in Fortran. But if you\u0027re not careful about the details of the algorithm in terms of inertia perturbation, primal-dual line search, and barrier parameter update, it won\u0027t work well. Use a proven library like Ipopt (\u003Ca href=\u0022https://projects.coin-or.org/Ipopt\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://projects.coin-or.org/Ipopt\u003C/a\u003E, it even has a Java interface if you must) that has already done the hard work, been extremely careful about the details, and been demonstrated to work reliably on a wide variety of problems.\u003C/p\u003E\u003Cp\u003EGetting the derivatives right is the time-consuming part. Not necessarily difficult, but annoying to code properly. You can easily write up a finite differences approximation, but you\u0027ll have numerical accuracy problems and finite differencing is not viable past a handful of variables (pitch and thrust multiplied by number of time steps, plus intermediate states like mass, altitude, horizontal and vertical velocities), as I mentioned. You need the derivative of your objective function and each of your constraints with respect to each individual variable, and the second derivatives with respect to every pair of variables. Looks like there are a couple of Java automatic differentiation libraries you could use that might work here, JAutoDiff or ADiJaC or Leibniz or JAP etc, never used any of them though so can\u0027t say which or any to recommend.\u003C/p\u003E\u003Cp\u003EOr have a look into this tool I just ran across, it\u0027s an optimization modeling language for Java, might be your best bet: \u003Ca href=\u0022http://ait.upct.es/~ppavon/jom/index.php\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ait.upct.es/~ppavon/jom/index.php\u003C/a\u003E. It doesn\u0027t appear to have an exponential function yet, but oddly it has ln so you could accomplish the same thing with an equality constraint. I bet one message to the author could see exp added pretty easily.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-24T07:04:40Z\u0022 title=\u002208/24/2013 07:04  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 24, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-25T06:18:39Z","Content":"\n\u003Cp\u003EDid this really need to be moved to Add-on Development? There\u0027s no add-on here, just mathematical discussion quite similar to about 3 or 4 other recent threads in Science Labs. This isn\u0027t the kind of thing you would need to run real-time in an add-on anyway...\u003C/p\u003E\n"},{"CreatedByName":"Mekan1k","CreatedById":48750,"CreatedDateTime":"2013-08-25T07:09:19Z","Content":"\n\u003Cp\u003EActually, this would be an incredibly useful addon. If this program can be written, (since we can ignore the 3-body gravity problem and since the in-game physics are perfectly understood) incredibly efficent flight-paths can then be produced. \u003C/p\u003E\u003Cp\u003EThink of all the fuel you will save!\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-25T07:15:15Z","Content":"\n\u003Cp\u003EWell once anyone comes up with a piece of code that can actually solve the difficult mathematical problem, then we can talk about using it in the game. It\u0027s entirely possible we could look at an optimization-based ascent planner and integrate it into MechJeb for example, but we\u0027re not at that stage yet.\u003C/p\u003E\n"},{"CreatedByName":"Vector","CreatedById":80152,"CreatedDateTime":"2013-08-28T01:36:50Z","Content":"\n\u003Cp\u003EI\u0027m taking a crack at this problem.\u003C/p\u003E\u003Cp\u003ESo far I\u0027ve got the forward modeling working, meaning simulation is pretty close to experimental results. For now I\u0027ve left out Coriolis force and the rotation of Kerbin but everything else is in place.\u003C/p\u003E\u003Cp\u003EThe representation of the problem is a huge factor in the optimization, more important than (or really an integral part of) the optimization algorithm. I\u0027ve got two or three failures so far where my representation/optimization failed to converge or where the discrete approximation made too much of a difference.\u003C/p\u003E\u003Cp\u003EAll this is in a brand new C# program so hopefully there will be avenues to construct a new plugin or integrate with MechJeb.\u003C/p\u003E\n"},{"CreatedByName":"tavert","CreatedById":57383,"CreatedDateTime":"2013-08-28T23:57:51Z","Content":"\n\u003Cp\u003EProblem formulation is important, but don\u0027t underestimate the importance of the optimization algorithm (or try to throw something together haphazardly instead of using proven existing tools). You can formulate a problem perfectly but if you try to solve it with a terrible optimization algorithm it won\u0027t work properly.\u003C/p\u003E\u003Cp\u003EAnyway, until anyone comes up with working code that can solve the problem reliably, this is more of a mathematical discussion than a plugin discussion. I\u0027m still waiting for an explanation why this thread was moved out of Science Labs, but there\u0027s a great deal of similar discussion happening in this thread: \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/46194-I-need-someone-help-me-do-some-math-for-launch-optimization\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/showthread.php/46194-I-need-someone-help-me-do-some-math-for-launch-optimization\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI think we should keep all the discussion in one place. There are 3 big families of approaches to this problem, and people have been trying each of them: pseudospectral methods, local discretization (as in forward simulation, but with additional gradient information required by an optimization algorithm), and optimal control Pontryagin methods that express the solution as a boundary value problem.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-08-29T00:03:30Z\u0022 title=\u002208/29/2013 12:03  AM\u0022 data-short=\u002210 yr\u0022\u003EAugust 29, 2013\u003C/time\u003E by tavert\u003C/strong\u003E\n\u003C/span\u003E\n"}]}