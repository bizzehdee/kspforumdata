{"TopicId":66584,"ForumId":29,"TopicTitle":"LINQ woes...","CreatedByName":"notfirestorm","CreatedById":66483,"CreatedDateTime":"2014-03-23T18:52:55Z","PageNum":1,"Articles":[{"CreatedByName":"notfirestorm","CreatedById":66483,"CreatedDateTime":"2014-03-23T18:52:55Z","Content":"\n\u003Cp\u003ESo I\u0027ve been looking through alot of examples and answers posted here on the forums (by the way, thanks for all the help everyone, whether you know it or not! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E ) and much of the code I\u0027ve seen has been using LINQ, where you can do stuff like Collection.Where(i =\u0026gt; i.equals(something)); or SelectAll(i =\u0026gt; {someList.Add(new Object(i));} instead of classic for and while loops.\u003C/p\u003E\u003Cp\u003EHowever, when I attempt to use this style syntax, explosions of Kerbal proportions happen in my code (MissingMethodException, TypeLoadException, etc.), whereas classic foreach loops work like a charm. The latest example of this was me attempting to use Reflection to create some objects.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EmoduleList = AppDomain.CurrentDomain.GetAssemblies()\u003Cbr\u003E    .SelectMany(assembly =\u0026gt; assembly.GetTypes().Where(type =\u0026gt; type.IsSubclassOf(typeof(SubterraneanBaseModule))))\u003Cbr\u003E    .Select(type =\u0026gt; { return (SubterraneanBaseModule)Activator.CreateInstance(type); }).ToList\u0026lt;SubterraneanBaseModule\u0026gt;();\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBlows up horrifically, failing to load the types from my .dll\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eforeach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())\u003Cbr\u003E{\u003Cbr\u003E    foreach (Type t in assembly.GetTypes())\u003Cbr\u003E    {\u003Cbr\u003E        if (t.IsSubclassOf(typeof(SubterraneanBaseModule)))\u003Cbr\u003E        {\u003Cbr\u003E            moduleList.Add(Activator.CreateInstance(t) as SubterraneanBaseModule);\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis however, works perfectly.\u003C/p\u003E\u003Cp\u003EWhile I can deal with doing stuff the classic way, it makes me wonder if I\u0027ve not set up my IDE correctly to build things properly for Unity to handle LINQ properly. What is everyone else doing to set up their environments that I omitted?\u003C/p\u003E\n"},{"CreatedByName":"stupid_chris","CreatedById":62017,"CreatedDateTime":"2014-03-23T20:03:05Z","Content":"\n\u003Cp\u003EYou need to make sure that you building for .NET 3.5. Above might break things.\u003C/p\u003E\n"},{"CreatedByName":"rbray89","CreatedById":48847,"CreatedDateTime":"2014-04-24T06:06:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022stupid_chris\u0022 data-cite=\u0022stupid_chris\u0022\u003E\u003Cdiv\u003EYou need to make sure that you building for .NET 3.5. Above might break things.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWas banging my head about this for a while. Thanks!\u003C/p\u003E\n"}]}