{"TopicId":216948,"ForumId":119,"TopicTitle":"Possible improvements to the physics system?","CreatedByName":"FiendChain","CreatedById":228883,"CreatedDateTime":"2023-04-30T04:19:02Z","PageNum":1,"Articles":[{"CreatedByName":"FiendChain","CreatedById":228883,"CreatedDateTime":"2023-04-30T04:19:02Z","Content":"\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedOther\u0022\u003E\n\u003Ciframe allowfullscreen=\u0022\u0022 data-controller=\u0022core.front.core.autosizeiframe\u0022 data-embedid=\u0022embed8409325442\u0022 scrolling=\u0022no\u0022 src=\u0022https://forum.kerbalspaceprogram.com/index.php?app=core\u0026amp;module=system\u0026amp;controller=embed\u0026amp;url=https://twitter.com/janhlousek/status/1588563018417598464\u0022 style=\u0022height:467px;\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003Cp\u003E\nJan Hlou\u0161ek on Space Engineer\u0027s developer team has a rather interesting thread on various third-party physics engines. In particular if you scroll down, Havok physics\u003Cspan style=\u0022background-color:#ffffff;border:0px solid #000000;color:#0f1419;font-size:15px;padding:0px;\u0022\u003E\u00A02022 seems much better than the rest of the alternatives. If KSP 2 is still using Unity\u0027s PhysX underneath, would it be beneficial to swap it out during early access to see if there are performance and stability improvements?\u00A0\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nWhat are people\u0027s thoughts on his thread?\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-30T06:11:23Z","Content":"\n\u003Cp\u003E\nThis is all fairly well known. Well, at least if you work with physics engines. I won\u0027t go as far as saying that KSH wasted their time testing it, because it\u0027s always good to fact-check yourself, but the results are nothing new. Unreal\u0027s Chaos might be a new entry for some people, but I was actually doing similar testing for a different studio a couple of years ago, and we had reached similar conclusions. So on paper, yes, the new Havok, which is available in Unity, is a far better choice than basically any other off-the-shelf solution on the market, and all else being the same it would be a fantastic replacement for KSP2.\n\u003C/p\u003E\n\u003Cp\u003E\nUnfortunately, switching KSP2 to Havok would likely require a significant overhaul of the game at this point. In particular, enabling Havok requires switching from GameObject model of Unity over to the ECS model. At the time that KSP2 would have been kicked off at Intercept, this was only supported as a preview, IIRC. ECS became a production-supported feature some time last year. If the game was only starting production now, I think it\u0027d be an easy choice. Retrofitting KSP2 with Havok now, however, is a much trickier proposition.\n\u003C/p\u003E\n\u003Cp\u003E\nIn principle, converting the components themselves shouldn\u0027t be too much work. Looking at the saves and modules setup, there might actually be one main component script that makes calls to relevant modules based on what\u0027s hooked up for any given part. (So, like, an engine part will have an engine module hooked up in the script. And it\u0027s the engine module that will do all of the actual updates to make the engine work.) Alternatively, there could be a unique script for each type of module, in which case, there would be more scripts to convert, but even then, it should be fairly boilerplate on the surface. Lots of copy-and-pasting. The problem is that this will upset all the thread timings, as the GameObject scripts and ECS scripts are executed fundamentally differently by Unity. For GameObject components, the game objects are updated one at a time, each of its component scripts running in sequence. For ECS components, every type of component is updated together independently of the entity (part) that these components belong to.\u00A0If built properly, that should actually improve the game\u0027s performance, as the workload is easier to split between threads under ECS, but if these threads start modifying shared data, the quick fix is mutexes... Long story short, you might end up with a significant performance degradation that you would then have to fix. Likewise, a lot of new crashes and memory leaks are likely to result from it, and these would also have to be fixed. The game\u0027s quality is likely to get worse, and might potentially require a huge amount of work to bring it back to even the state that the early access is in right now.\n\u003C/p\u003E\n\u003Cp\u003E\ntl; dr: It\u0027s a huge risk. Even in the optimistic outcome, I\u0027m not sure there is time for this work right now. In the worst case, if Intercept starts this, we\u0027ll get our next update some time next year. I don\u0027t have all the info to say for sure that this is impossible, but based on what I\u0027ve read about this tech over the past year or so, it doesn\u0027t seem to be viable at the moment.\n\u003C/p\u003E\n\u003Cp\u003E\nOnce the game is shipped, and we get a few patches, assuming that the game does well enough for the work on it to continue, and if there is a quieter moment before Intercept has to ship the DLCs, there might be time to attempt switching from GameObject to ECS. If that\u0027s done, actually toggling on Havok is trivial. But that\u0027s a lot of conditionals, and best possible ETA of late 2024.\n\u003C/p\u003E\n\u003Cp\u003E\nWith all of that in mind, Intercept has to figure out how to make the game play sufficiently well with PhysX. I don\u0027t think there\u0027s a magic bullet approach that lets them bypass that.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-30T08:47:25Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278255\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682835083\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nswitching from GameObject to ECS.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat\u0027s not gonna happen. The GameObject entity/component is a fully OOP driven framework, whereas DOTS/Entities is a fully data-oriented paradigm with no support whatsoever for classes or reference types, and completely different workflows.\u003Cbr\u003E\nThere is absolutely no conversion path possible without scrapping 100% of the existing game logic codebase, and doing an insane amount of rewiring for the rest.\n\u003C/p\u003E\n\u003Cp\u003E\nBeside, they don\u0027t have to use the built-in PhysX or Havoc integration, it\u0027s perfectly possible to use any physics engine from Unity, they \u0022just\u0022 have to build the interop layer for it.\u003Cbr\u003E\nIt\u0027s relatively common to have Unity games plugging into C\u002B\u002B libraries for specific stuff (there is even an example in the KSP modding scene, the n-body integrator of Principia is written as a C\u002B\u002B library).\u003Cbr\u003E\nThis would be vastly more doable than rewritting the whole game with the DOTS stack (and I would argue that DOTS Physics might actually be a better fit than Havoc in that case), especially since KSP 2 (at least currently without robotics) is using a relatively narrow subset of features (edit : actually, a major pain point would wheels and landing legs, those would require a lot of work instead of just being a thin wrapper over VPP).\n\u003C/p\u003E\n\u003Cp\u003E\nStill, that would be a major undertaking, and the potential benefits are low, so I don\u0027t see how they can justify diverting dev resources to such an endeavor while they are still struggling to deliver a playable and commercially viable game.\u003Cbr\u003E\nAnd on a side note, while *some* issues of KSP 1/2 physics can be traced down to limitations of PhysX that would be alleviated in Havoc, a lot of them are purely on the KSP side, and some of them are *conceptual* issues rather than technical issues.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222023-04-30T10:34:28Z\u0022 title=\u002204/30/2023 10:34  AM\u0022 data-short=\u00221 yr\u0022\u003EApril 30, 2023\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-04-30T20:24:27Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278272\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682844445\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe GameObject entity/component is a fully OOP driven framework, whereas DOTS/Entities is a fully data-oriented paradigm with no support whatsoever for classes or reference types, and completely different workflows.\u003Cbr\u003E\nThere is absolutely no conversion path possible without scrapping 100% of the existing game logic codebase, and doing an insane amount of rewiring for the rest.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI haven\u0027t experimented with it myself yet, but the documentation and tutorials suggest that you can go mixed bag. You only need simulated parts to be in ECS. So all of the game logic, FX systems, UI, etc can be kept in GameObject format. And the way the game relies on modules, apparently for moddability, the GameObject scripts for the parts are merely invoking these, it would seem. The cross section of code that has to be replaced might actually not be that great.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278272\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682844445\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nBeside, they don\u0027t have to use the built-in PhysX or Havoc integration, it\u0027s perfectly possible to use any physics engine from Unity, they \u0022just\u0022 have to build the interop layer for it.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThat might actually be more work. If you go this way, you have to manage the collision scene pretty much manually. Anything with collisions will have to introduce or remove itself from the scene. Dynamic objects will have to update their possitions on every game tick. Terrain\u0027s LOD and streaming will have to be tightly integrated into this setup. Any FX that might need collision data will have to be completely redone, and any game logic that uses collisions re-written, which includes wheels, lander legs, kerbals, and colony placement and editor. Some of it is still going to have to be touched even with ECS Havok, but with custom Havok it\u0027s basically everything.\n\u003C/p\u003E\n\u003Cp\u003E\nIt\u0027s an option, but I\u0027m not convinced it\u0027s an easier option. And same constraints on time would certainly apply.\n\u003C/p\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2023-04-30T21:50:57Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n12 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nthe documentation and tutorials suggest that you can go mixed bag\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou can go mixed bag, but it\u0027s a quite delicate setup even if you plan your design around it.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n14 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nall of the game logic [...] can be kept in GameObject format\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nNo. KSP game logic is heavily tied to parts, and involves physics engine queries all the time. That would be a nightmare to put put together and maintain.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n16 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAnd the way the game relies on modules, apparently for moddability, the GameObject scripts for the parts are merely invoking these, it would seem.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nModules are actually part components, nothing more. They \u003Cem\u003Etried\u003C/em\u003E to decouple their core logic from the Unity GameObjects / Monobehaviors with some sort of MVC pattern, but in practice there is very high level of coupling between everything.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe cross section of code that has to be replaced might actually not be that great.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWell, all I can say is that I peeped long enough into said code to be quite doubtful of that.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n52 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\ncolony placement and editor.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nhahahahahahahahahahahaha \u003Cem\u003Edeep breath\u003C/em\u003E hahahahahahahahaha\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278463\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682886267\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n23 minutes ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nyou have to manage the collision scene pretty much manually [...]\u003Cbr\u003E\nDynamic objects will have to update their positions on every game tick\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThey more or less already do that anyway, for various reasons, but mostly because of the floating origin. While PhysX actually has support for a floating origin, the Unity wrapper doesn\u0027t expose it, so they already are repositioning everything manually at regular intervals (and tracking the position of everything independently as well).\n\u003C/p\u003E\n\u003Cp\u003E\nAs I said, there is actually not that much relying on the physics engine in KSP (be it 1 or 2). It\u0027s used for a bunch of spatial queries, applying their independently computed thrust/atmospheric forces to the jointed rigidbodies and getting the frame velocity out of it, terrain and inter-vessel collisions, and that\u0027s it for the most part. The only thing that I can think of that would require them to roll out a significant new subsystem is the wheels/suspensions because currently they are relying on a third party asset dependent on the Unity PhysX wrapper.\n\u003C/p\u003E\n\u003Cp\u003E\nThis is still is a major undertaking, but I would estimate on the same order of magnitude as swapping everything from using the built-in render pipeline to the HDRP pipeline, which they have apparently decided to do.\u003Cbr\u003E\nThe difference is that swapping the rendering pipeline is part of a necessary refactor to address the huge issues they have with rendering performance, while swapping the physics engine wouldn\u0027t bring much benefit as long as they stick with the idea that the un-physical KSP 1 behavior of part connections is a \u003Cem\u003Edesign requirement.\u003C/em\u003E\u003Cbr\u003E\nAnd arguably, if they somehow have the good idea to throw it away and actually think about something that make sense from a game design perspective, there are other approaches in terms of physics that are better fitted to create elements of structural integrity gameplay, in the realm of beam / soft-body solvers.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2023-05-01T01:12:46Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224278487\u0022 data-ipsquote-contentid=\u0022216948\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221682891457\u0022 data-ipsquote-userid=\u0022163039\u0022 data-ipsquote-username=\u0022Gotmachine\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n3 hours ago, Gotmachine said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell, all I can say is that I peeped long enough into said code to be quite doubtful of that.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf you\u0027ve taken a deep dive into how it\u0027s currently set up, I\u0027m prepared to take your word for it.\n\u003C/p\u003E\n"}]}