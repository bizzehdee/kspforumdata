{"TopicId":195556,"ForumId":109,"TopicTitle":"Graphics thread?","CreatedByName":"TLTay","CreatedById":184633,"CreatedDateTime":"2020-07-12T01:27:09Z","PageNum":1,"Articles":[{"CreatedByName":"TLTay","CreatedById":184633,"CreatedDateTime":"2020-07-12T01:27:09Z","Content":"\n\u003Cp\u003E\nThere has been lots of awesome discussion on game play mechanics with many valid points raised, but I didn\u0027t see too much in the way of discussing visuals for KSP2. From what I\u0027ve seen so far for early development, it looks really promising. A more realistic vibe than the original, which I personally like. It looks like some of the planets are really coming together nicely.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI know KSP has people running everything from a 2080ti to integrated \u0027tato graphics and that supporting as many players as possible is very important, but we are on the verge of a new console generation which will include ray tracing and major improvements in graphical capabilities. It would be easy to have KSP2 get a yawn reception from gamers in \u002721 or \u002722 if they are used to a higher level of visual fidelity from AAA games for\u00A0their new console. Given the space environment and high CPU usage often being the limiting factor, I think ray tracing could be super applicable to KSP2 and the visuals could really help sell the game. I think they said we would not get RT at launch, but I\u0027m not sure if they meant never or just not yet? Please correct me if wrong.\u00A0I\u0027m not trying to be negative, I\u0027m just very excited about the graphical improvements I\u0027ve seen and have lofty hopes for the final product.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOn the more realistic hopes... Dust storms and weather with dynamic conditions would really add to immersion and challenge. Probably best to make \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E a fair weather zone for new players tho. With KSP, I think most players never made it very far from home, and I wonder how much of that had to do with lack of visual incentive to explore. Physics isn\u0027t changing between 2021 and 2031, so graphics may be one of the deciding factors with KSP2\u0027s lifespan reaching that of the original.\n\u003C/p\u003E\n"},{"CreatedByName":"Draco T stand-up guy","CreatedById":159383,"CreatedDateTime":"2020-07-12T01:41:53Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223819218\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221594517229\u0022 data-ipsquote-userid=\u0022184633\u0022 data-ipsquote-username=\u0022TLTay\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n4 minutes ago, TLTay said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWith KSP, I think most players never made it very far from home, and I wonder how much of that had to do with lack of visual incentive to explore.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nFor me it wasn\u0027t the visuals. There were multiple issues about getting beyond Minmus:\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nMy science tree was full and there was nothing more to research\n\u003C/li\u003E\n\u003Cli\u003E\nGoing to Gilly was no different than going to Minmus\n\u003C/li\u003E\n\u003Cli\u003E\nThere simply wasn\u0027t the proper tools in-game:\n\u003Cul\u003E\u003Cli\u003E\nTransfer window planner\n\u003C/li\u003E\n\u003Cli\u003E\nSome sort of mission planner that kept track of when to do things (Alarm clock) for different missions (always irritated me that the \u0027mission control building\u0027 was just another admin building)\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/li\u003E\n\u003Cli\u003E\nToo much boring time-skip\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\nThe visuals were fine although I\u0027m certainly appreciative of better.\n\u003C/p\u003E\n"},{"CreatedByName":"PlutoISaPlanet","CreatedById":206057,"CreatedDateTime":"2020-07-12T02:19:50Z","Content":"\n\u003Cp\u003E\nThe visuals of the game always felt depressing to me. I got to the mun, then minmus and I honestly felt a small feeling of accomplishment.\n\u003C/p\u003E\n"},{"CreatedByName":"OHara","CreatedById":162784,"CreatedDateTime":"2020-07-12T02:43:27Z","Content":"\n\u003Cp\u003E\nKSP2 is likely to appeal to people who don\u0027t play video games, and thus do not have a gaming console, because the interesting part of the game is different to other games.\n\u003C/p\u003E\n\u003Cp\u003E\nI had to turn graphics up from the minimum to see shadows on the ground when landing, but otherwise have found the game playable and enjoyable for 5 years with\u00A0near-minimum graphics.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nGenerally I buy a computer every five years, use the newest one for work, and retire the old work computers for home.\u00A0 KSP needed a graphics card so I play it on what is otherwise my \u0027work\u0027 computer.\u00A0 A 4-core Intel i7-6500 at 2.5GHz and a Radeon R6 M360 is enough for ray-tracing as used in lens-design, CAD modeling, and the image processing that I do, ... but in KSP I have to\u00A0swing the camera toward the sky to get full frame-rate (25fps for a green clock).\n\u003C/p\u003E\n\u003Cp\u003E\nGaming machines cost a lot more than KSP2\u0027s planned price.\n\u003C/p\u003E\n"},{"CreatedByName":"OOM","CreatedById":199309,"CreatedDateTime":"2020-07-13T09:45:03Z","Content":"\n\u003Cp\u003E\nI have zero expectations both in the visual part and in the realism of the new mechanics. But I really hope for modifications. They will make garbage worth a masterpiece as it was with the original KSP.\n\u003C/p\u003E\n\u003Cp\u003E\nTake a screenshot of my post. But the graphics in KSP 2 will be at the \u0022\u003Cstrong\u003Espectra\u003C/strong\u003E\u0022 level for the original KSP. This is of course far from a beautiful AVP.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-13T09:53:05Z\u0022 title=\u002207/13/2020 09:53  AM\u0022 data-short=\u00223 yr\u0022\u003EJuly 13, 2020\u003C/time\u003E by OOM\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2020-07-13T20:44:44Z","Content":"\n\u003Cp\u003E\nYes, graphics in a game engine usually runs on its own thread. What do you mean, that\u0027s not what you\u0027ve meant? \u003Cspan\u003E\u003Cspan\u003E\u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u00A0\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI agree that KSP2 will have to push graphics a lot further than KSP, but I\u0027m not sure ray tracing will help a whole lot, and I\u0027m usually the guy who pushes for broader RT use. It just... Doesn\u0027t help you render a planet, unless you throw a LOT of RT power at it. Talking about all the things Ray Tracing can do and how much of it you can support on next-gen is a complicated topic. Especially, because specs aren\u0027t public yet, so even things I know I can\u0027t discuss.\n\u003C/p\u003E\n\u003Cp\u003E\nBut in broad terms, the hardware isn\u0027t quite there yet to just straight up ray-trace the entire scene and completely abandon conventional rendering. You need very complex BVH and a lot of rays to achieve that, and even 2080Ti just can\u0027t in realistic scenarios. Instead, what you normally do is render scene as normal, and then use RT to improve lighting or reflections. Again, speaking very broadly, you can improve reflections, global illumination, and shadows. This can be absolutely phenomenal for creating atmosphere in some games, but KSP2 doesn\u0027t have scenes where it pays off.\n\u003C/p\u003E\n\u003Cp\u003E\nLets break it down a bit. I would broadly break down the components of the scenes into 3 categories. Planets that you\u0027re on the surface of or in low flight over, including terrain, sky, and weather rendering as applicable; planets that you\u0027re in proximity of, such as when you\u0027re in orbit; and your actual craft. You can have all 3. If you\u0027re flying over Lathe, you obviously have your craft, the terrain of Lathe bellow you, the sky above, and possibly, Jool occupying a solid chunk of it. All of these have to be handled differently.\n\u003C/p\u003E\n\u003Cp\u003E\nLets start with planets you are orbiting. Can you improve these with RT? Maybe, but it doesn\u0027t seem cost-effective. The only fancy things that can be going on are things like crater shadows and atmospheric scattering. You can try to get that with RT, but you\u0027ll need a ton of rays to get good resolution out of it without noise. It\u0027s way, way easier to just write custom shaders for these things. You can get absolutely amazing looking planets with conventional shaders if people writing them understand light theory and scattering processes. If you don\u0027t, they won\u0027t write a good ray tracer, either, so all around, you\u0027re better off with conventional shaders.\n\u003C/p\u003E\n\u003Cp\u003E\nThe planets you\u0027re in flight over are more interesting. Here, shadows really can be improved, especially, once you take global illumination into account. You can get better time of day and weather visuals for sure. But RT is still an expensive way to get these. And while it can pay off in very complex scenes, like if you\u0027re in a town or a canyon, where there are a lot of shadows from all kinds of vertical objects, you don\u0027t get much of that in KSP. The scenes we do get are pretty natural, and you can get very good look out of them by using prebaked lights. Can you get better quality with RT? On a powerful PC, yeah. On console hardware? I\u0027m honestly not sure. But what you\u0027ll get won\u0027t be worth the effort. So conventional lighting still wins.\n\u003C/p\u003E\n\u003Cp\u003E\nThat leaves the craft. This is the only part of the scene that might actually benefit from RT if it\u0027s done right. Baking light probes for your craft doesn\u0027t really work because there is staging, moving parts, and occasionally things explode. So getting good global illumination with rays is a lot easier. The craft can also have reflective bits, and SpaceX has demonstrated with a Tesla Roadster in orbit, planets reflecting off shiny bits make for great visuals. This would be a lot of work to get it right, though. Unity\u0027s support for ray tracing is still in preview, and you need people who really know what they\u0027re doing on this. Realistically, you\u0027ll need to hire a dedicated graphics engineer with RT experience just to work on this to get it in time for release. All the racing games devs obviously think it\u0027s worth it. But is it for KSP2? I don\u0027t know. And it doesn\u0027t look like Intercept currently has developer resources to throw around.\n\u003C/p\u003E\n"},{"CreatedByName":"TLTay","CreatedById":184633,"CreatedDateTime":"2020-07-14T05:22:00Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223820145\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221594673084\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n8 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYes, graphics in a game engine usually runs on its own thread. What do you mean, that\u0027s not what you\u0027ve meant? \u003Cspan\u003E\u003Cspan\u003E\u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u00A0\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI agree that KSP2 will have to push graphics a lot further than KSP, but I\u0027m not sure ray tracing will help a whole lot, and I\u0027m usually the guy who pushes for broader RT use. It just... Doesn\u0027t help you render a planet, unless you throw a LOT of RT power at it. Talking about all the things Ray Tracing can do and how much of it you can support on next-gen is a complicated topic. Especially, because specs aren\u0027t public yet, so even things I know I can\u0027t discuss.\n\u003C/p\u003E\n\u003Cp\u003E\nBut in broad terms, the hardware isn\u0027t quite there yet to just straight up ray-trace the entire scene and completely abandon conventional rendering. You need very complex BVH and a lot of rays to achieve that, and even 2080Ti just can\u0027t in realistic scenarios. Instead, what you normally do is render scene as normal, and then use RT to improve lighting or reflections. Again, speaking very broadly, you can improve reflections, global illumination, and shadows. This can be absolutely phenomenal for creating atmosphere in some games, but KSP2 doesn\u0027t have scenes where it pays off.\n\u003C/p\u003E\n\u003Cp\u003E\nLets break it down a bit. I would broadly break down the components of the scenes into 3 categories. Planets that you\u0027re on the surface of or in low flight over, including terrain, sky, and weather rendering as applicable; planets that you\u0027re in proximity of, such as when you\u0027re in orbit; and your actual craft. You can have all 3. If you\u0027re flying over Lathe, you obviously have your craft, the terrain of Lathe bellow you, the sky above, and possibly, Jool occupying a solid chunk of it. All of these have to be handled differently.\n\u003C/p\u003E\n\u003Cp\u003E\nLets start with planets you are orbiting. Can you improve these with RT? Maybe, but it doesn\u0027t seem cost-effective. The only fancy things that can be going on are things like crater shadows and atmospheric scattering. You can try to get that with RT, but you\u0027ll need a ton of rays to get good resolution out of it without noise. It\u0027s way, way easier to just write custom shaders for these things. You can get absolutely amazing looking planets with conventional shaders if people writing them understand light theory and scattering processes. If you don\u0027t, they won\u0027t write a good ray tracer, either, so all around, you\u0027re better off with conventional shaders.\n\u003C/p\u003E\n\u003Cp\u003E\nThe planets you\u0027re in flight over are more interesting. Here, shadows really can be improved, especially, once you take global illumination into account. You can get better time of day and weather visuals for sure. But RT is still an expensive way to get these. And while it can pay off in very complex scenes, like if you\u0027re in a town or a canyon, where there are a lot of shadows from all kinds of vertical objects, you don\u0027t get much of that in KSP. The scenes we do get are pretty natural, and you can get very good look out of them by using prebaked lights. Can you get better quality with RT? On a powerful PC, yeah. On console hardware? I\u0027m honestly not sure. But what you\u0027ll get won\u0027t be worth the effort. So conventional lighting still wins.\n\u003C/p\u003E\n\u003Cp\u003E\nThat leaves the craft. This is the only part of the scene that might actually benefit from RT if it\u0027s done right. Baking light probes for your craft doesn\u0027t really work because there is staging, moving parts, and occasionally things explode. So getting good global illumination with rays is a lot easier. The craft can also have reflective bits, and SpaceX has demonstrated with a Tesla Roadster in orbit, planets reflecting off shiny bits make for great visuals. This would be a lot of work to get it right, though. Unity\u0027s support for ray tracing is still in preview, and you need people who really know what they\u0027re doing on this. Realistically, you\u0027ll need to hire a dedicated graphics engineer with RT experience just to work on this to get it in time for release. All the racing games devs obviously think it\u0027s worth it. But is it for KSP2? I don\u0027t know. And it doesn\u0027t look like Intercept currently has developer resources to throw around.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI think you know way more about this than I, and are probably right about it being far more work than it is worth for a big performance hit.\u00A0I wouldn\u0027t risk delaying the release over RT, it\u0027s not worth that. Hopefully hardware and budgets will allow for some RT options as the game matures over the years, even if it\u0027s just window reflections or something small.\n\u003C/p\u003E\n\u003Cp\u003E\nFrankly, the duna base area shown in the most recently released dev video was pretty promising. I would not be unhappy if the release looked about like that.\u00A0I just really want KSP2 to look better than a heavily modded KSP1.\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2020-07-20T05:17:22Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223820145\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221594673084\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/13/2020 at 3:44 PM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYes, graphics in a game engine usually runs on its own thread. What do you mean, that\u0027s not what you\u0027ve meant? \u003Cspan\u003E\u003Cspan\u003E\u003Cimg alt=\u0022:P\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 title=\u0022:P\u0022\u003E\u00A0\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nI agree that KSP2 will have to push graphics a lot further than KSP, but I\u0027m not sure ray tracing will help a whole lot, and I\u0027m usually the guy who pushes for broader RT use. It just... Doesn\u0027t help you render a planet, unless you throw a LOT of RT power at it. Talking about all the things Ray Tracing can do and how much of it you can support on next-gen is a complicated topic. Especially, because specs aren\u0027t public yet, so even things I know I can\u0027t discuss.\n\u003C/p\u003E\n\u003Cp\u003E\nBut in broad terms, the hardware isn\u0027t quite there yet to just straight up ray-trace the entire scene and completely abandon conventional rendering. You need very complex BVH and a lot of rays to achieve that, and even 2080Ti just can\u0027t in realistic scenarios. Instead, what you normally do is render scene as normal, and then use RT to improve lighting or reflections. Again, speaking very broadly, you can improve reflections, global illumination, and shadows. This can be absolutely phenomenal for creating atmosphere in some games, but KSP2 doesn\u0027t have scenes where it pays off.\n\u003C/p\u003E\n\u003Cp\u003E\nLets break it down a bit. I would broadly break down the components of the scenes into 3 categories. Planets that you\u0027re on the surface of or in low flight over, including terrain, sky, and weather rendering as applicable; planets that you\u0027re in proximity of, such as when you\u0027re in orbit; and your actual craft. You can have all 3. If you\u0027re flying over Lathe, you obviously have your craft, the terrain of Lathe bellow you, the sky above, and possibly, Jool occupying a solid chunk of it. All of these have to be handled differently.\n\u003C/p\u003E\n\u003Cp\u003E\nLets start with planets you are orbiting. Can you improve these with RT? Maybe, but it doesn\u0027t seem cost-effective. The only fancy things that can be going on are things like crater shadows and atmospheric scattering. You can try to get that with RT, but you\u0027ll need a ton of rays to get good resolution out of it without noise. It\u0027s way, way easier to just write custom shaders for these things. You can get absolutely amazing looking planets with conventional shaders if people writing them understand light theory and scattering processes. If you don\u0027t, they won\u0027t write a good ray tracer, either, so all around, you\u0027re better off with conventional shaders.\n\u003C/p\u003E\n\u003Cp\u003E\nThe planets you\u0027re in flight over are more interesting. Here, shadows really can be improved, especially, once you take global illumination into account. You can get better time of day and weather visuals for sure. But RT is still an expensive way to get these. And while it can pay off in very complex scenes, like if you\u0027re in a town or a canyon, where there are a lot of shadows from all kinds of vertical objects, you don\u0027t get much of that in KSP. The scenes we do get are pretty natural, and you can get very good look out of them by using prebaked lights. Can you get better quality with RT? On a powerful PC, yeah. On console hardware? I\u0027m honestly not sure. But what you\u0027ll get won\u0027t be worth the effort. So conventional lighting still wins.\n\u003C/p\u003E\n\u003Cp\u003E\nThat leaves the craft. This is the only part of the scene that might actually benefit from RT if it\u0027s done right. Baking light probes for your craft doesn\u0027t really work because there is staging, moving parts, and occasionally things explode. So getting good global illumination with rays is a lot easier. The craft can also have reflective bits, and SpaceX has demonstrated with a Tesla Roadster in orbit, planets reflecting off shiny bits make for great visuals. This would be a lot of work to get it right, though. Unity\u0027s support for ray tracing is still in preview, and you need people who really know what they\u0027re doing on this. Realistically, you\u0027ll need to hire a dedicated graphics engineer with RT experience just to work on this to get it in time for release. All the racing games devs obviously think it\u0027s worth it. But is it for KSP2? I don\u0027t know. And it doesn\u0027t look like Intercept currently has developer resources to throw around.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI actually have somewhat of an related-unrelated question here. One of the persistent issues in KSP is that there doesn\u0027t seem to be a good way to determine where a light source (I.E a star) is coming from, and i know that while workarounds exist for this i was actually wondering if RT related technology could help here. Now I\u0027m pretty sure making every star cast enough rays to properly illuminate everything would set anything barring a large supercomputer on fire, but would there be a way to have a more bespoke solution? Like being able to \u0022Request\u0022 a Ray to strike an object on demand with a function; just to get the proper magnitude and direction so doing things like solar panels and the like is easier? Though...now that i think about it, a Vector could do that. But i was thinking the benefit of using a Ray would be that if you split a panel into individual elements, and each one made a call that the Ray would occlude when necessary and make situations where only a sliver of the panel is shaded but the entire panel generates no power much less common.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nOnly reason i\u0027m curious is that KSP2 will have multiple systems from the start, so they\u0027d have to have a solution for solar panels from the beginning.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2020-07-20T06:59:38Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823321\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595222242\u0022 data-ipsquote-userid=\u0022197414\u0022 data-ipsquote-username=\u0022Incarnation of Chaos\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n1 hour ago, Incarnation of Chaos said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI actually have somewhat of an related-unrelated question here. One of the persistent issues in KSP is that there doesn\u0027t seem to be a good way to determine where a light source (I.E a star) is coming from, and i know that while workarounds exist for this i was actually wondering if RT related technology could help here. Now I\u0027m pretty sure making every star cast enough rays to properly illuminate everything would set anything barring a large supercomputer on fire, but would there be a way to have a more bespoke solution? Like being able to \u0022Request\u0022 a Ray to strike an object on demand with a function; just to get the proper magnitude and direction so doing things like solar panels and the like is easier? Though...now that i think about it, a Vector could do that. But i was thinking the benefit of using a Ray would be that if you split a panel into individual elements, and each one made a call that the Ray would occlude when necessary and make situations where only a sliver of the panel is shaded but the entire panel generates no power much less common.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nRT hardware doesn\u0027t do anything you wouldn\u0027t already be doing as part of your physics engine. The RT ray casts work exactly the same as ray probes in PhysX/Unity. The only difference is how many rays you can cast on CPU vs GPU. Even without RT-specialized hardware, GPU can handle more ray casts than a CPU, but you have to do your own work setting up accelerator structures, such as \u003Ca href=\u0022https://en.wikipedia.org/wiki/Bounding_volume_hierarchy\u0022 rel=\u0022external nofollow\u0022\u003EBVH\u003C/a\u003E. Hardware ray tracers plus associated graphics libraries make that even faster and easier to set up. Bit I don\u0027t think KSP had a problem with how many rays you could cast - a sample of a dozen random rays between random point on the solar panel and random point on the near side of the star is adequate to get a fair estimate for efficiency, especially if you do some time-averaging between frames. Again, it\u0027s very similar to how you would do soft shadows on GPU with ray tracing, but since you don\u0027t need accurate measure of solar flux at every point you can see in the scene, you just don\u0027t have to throw GPU power at it. The number of\u00A0rays you can cast on CPU are enough.\n\u003C/p\u003E\n\u003Cp\u003E\nI haven\u0027t looked into it specifically, but my first guess for why it\u0027s hard in KSP would be how much of collision scene needs to be loaded. It should be very easy and cheap to check for craft occlusions, for example. You already have all of that as part of your collision scene, so Unity is all set up to do ray checks against the craft.\u00A0Nearby terrain, like a rock you\u0027re right next to, should also be easy for the same reason. If either of these are already causing problems\u00A0in KSP, there\u0027s something fishy going on. The next step up is entire planets/moons getting in the way. Trivial case is being on the night side of a planet, but you could also be having an eclipse\u00A0or even just a significant transit that causes some dimming. This would require a separate ray cast on star system scale, but that should be very simple. Ray vs sphere collision check is the cheapest one you can do, and even if you just brute-force all planets and moons, it\u0027s really easy to check for this sort of thing. You first check if the ray hits a spherical representation of any planet or moon, and if not, then you check against collision scene. That gets you most of the way there.\n\u003C/p\u003E\n\u003Cp\u003E\nWhere this breaks down with the way KSP is set up is occlusions by mountains on the horizon, for example. Something that\u0027s far enough away that it\u0027s unloaded from collision scene, but large enough that it can cast shadows when sun is low. You obviously can\u0027t keep detailed terrain collision for distant objects, because that\u0027s just too much memory and computation required to handle. The real solution is to be handling it the same way you handle rendering. You don\u0027t draw every triangle of terrain for distant objects. You have simpler, low poly representations you render instead. So a mountain up close might have tens of thousands of polygons, while one on horizon would be rendered with a few dozen. Likewise, for purposes of solar panel occlusion, you don\u0027t need to load mountain in all its glory. You could substitute in a much simpler collider. I haven\u0027t seen a good way to do this in PhysX, so this would require custom code, but it\u0027s exactly the same situation with GPU RT. Either way, you have to write an LoD system for your collision scene, and if you\u0027re doing that for either system, you might as well just do it all on CPU for better support on mid-range PCs.\n\u003C/p\u003E\n\u003Cp\u003E\nIt is rather edge-case, though. So if solar panels are wonky in more cases than that, I\u0027m not really sure what\u0027s going on there. It\u0027s not\u00A0\u003Cem\u003Ethat\u003C/em\u003E hard of a problem...\n\u003C/p\u003E\n"},{"CreatedByName":"mcwaffles2003","CreatedById":180102,"CreatedDateTime":"2020-07-20T07:01:12Z","Content":"\n\u003Cp\u003E\nI just hope we get another push past the new surface textures for planets brought in the past few updates. Getting to the new Duna, to me was a bit jaw dropping. Hopefully we can get some procedurally generated collidable ground scatter (no more driving through giant boulders)\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"\u03AD\u0137 \u03BD\u03AF\u013B\u013B\u03AC\u03AF\u03AE","CreatedById":197328,"CreatedDateTime":"2020-07-21T02:54:52Z","Content":"\n\u003Cp\u003E\nClouds are already basically confirmed, and that\u0027s all I need\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-21T02:55:05Z\u0022 title=\u002207/21/2020 02:55  AM\u0022 data-short=\u00223 yr\u0022\u003EJuly 21, 2020\u003C/time\u003E by \u03AD\u0137 \u03BD\u03AF\u013B\u013B\u03AC\u03AF\u03AE\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Danielle","CreatedById":206177,"CreatedDateTime":"2020-07-22T08:28:47Z","Content":"\n\u003Cp\u003E\nSeeing that PBR Textures are at full throttle for planetary bodies, do you think they\u0027ll go volumetric fogs for the atmospheres and gas planets? Or gas planets will be shader-based and with most effects being screen spaced. I\u0027m hoping for a more visually livid representation of particles at the asteroid belt and planetary ring. A huge plus for enhanced atmospheric\u00A0transition between the transition of\u00A0atmosphere and space.\u003Cbr\u003E\u003Cbr\u003E\nWe\u0027ll probably see last/current gen implementation of lighting systems. Ray-tracing is very expensive and mainstream adoption of dedicated hardware is still quite low due to the prices for the cards.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2020-07-22T19:51:44Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223824364\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595406527\u0022 data-ipsquote-userid=\u0022206177\u0022 data-ipsquote-username=\u0022Danielle\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n11 hours ago, Danielle said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSeeing that PBR Textures are at full throttle for planetary bodies, do you think they\u0027ll go volumetric fogs for the atmospheres and gas planets? Or gas planets will be shader-based and with most effects being screen spaced. I\u0027m hoping for a more visually livid representation of particles at the asteroid belt and planetary ring. A huge plus for enhanced atmospheric\u00A0transition between the transition of\u00A0atmosphere and space.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIf you\u0027re well above atmo, doing any kind of volumetrics is way overkill. Rendering atmo as a shell is quite sufficient, and you can write a shader that estimates scattering for every point. So I\u0027d probably just use a normal forward pass on this. For rendering clouds from within atmosphere, there are plenty of standard methods. A simple ray caster can give you amazing fractal clouds at barely a hit to performance. All of this is pretty simple to set up in Unity.\n\u003C/p\u003E\n"},{"CreatedByName":"Danielle","CreatedById":206177,"CreatedDateTime":"2020-07-23T11:00:46Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223824566\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595447504\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n15 hours ago, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nIf you\u0027re well above atmo, doing any kind of volumetrics is way overkill. Rendering atmo as a shell is quite sufficient, and you can write a shader that estimates scattering for every point. So I\u0027d probably just use a normal forward pass on this. For rendering clouds from within atmosphere, there are plenty of standard methods. A simple ray caster can give you amazing fractal clouds at barely a hit to performance. All of this is pretty simple to set up in Unity.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhat do you think will the implementation of planetary weather would be like? Akin to Martian Dust Storms or water planet waves.\n\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2020-07-23T18:06:16Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223824868\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595502046\u0022 data-ipsquote-userid=\u0022206177\u0022 data-ipsquote-username=\u0022Danielle\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n5 hours ago, Danielle said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWhat do you think will the implementation of planetary weather would be like? Akin to Martian Dust Storms or water planet waves.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI don\u0027t know what Intercept actually has time for. Weather can be super complex, and since I\u0027m not a rendering engineer, I\u0027m not necessarily the best person to ask about it. But traditionally, the way you\u0027d do sand storms is just volumetric fog and particles. Looking at Red Dead Redemption 2, which has a better looking weather among recent games, \u003Ca href=\u0022https://www.youtube.com/watch?v=NTNQmzmwP6c\u0022 rel=\u0022external nofollow\u0022\u003Eit looks like that\u0027s all they did\u003C/a\u003E. This is computationally cheap, easy to set up in Unity, and looks reasonably convincing. If this is what Duna sandstorms look like, I won\u0027t complain.\n\u003C/p\u003E\n\u003Cp\u003E\nI am a bit more familiar with water. State of the art there is running a very simple linearized surface wave simulation. This can be done in real time in frequency domain at a cost of a few FFT operations, or can actually be precomputed and stored as tillable texture. The later can be done with custom simulation, but Blender and Houdini have built in ways to handle it as well. You avoid tiling by doing this at several different scales, similar to how you\u0027d handle noise maps. This approach is based on work of Jerry Tessendorf and has almost completely replaced the older method that was based on Gerstner Waves. A good example of a game that does this is \u003Ca href=\u0022https://www.youtube.com/watch?v=aGogFt4bhTM\u0022 rel=\u0022external nofollow\u0022\u003ESea of Thieves\u003C/a\u003E. Of course, a big part of it is actually rendering water, which is not trivial at all, and there are plenty of talks on that out there. The key is you at least have to fake scattering or it will look completely fake. Getting water to look as good as in Sea of Thieves is a lot of work, and I wouldn\u0027t expect that quality, but there are definitely options for something that\u0027s very reasonable.\n\u003C/p\u003E\n\u003Cp\u003E\nThe hardest thing about weather is how much of it there is. Fortunately, we get a pretty good selection of it on Earth, so the tech for it is well developed. Given the scope of KSP2, I don\u0027t expect them to get all of it perfectly. Corners will have to be cut, I\u0027m sure. If they have same tech for sand and snow storms, for example, with just a texture swap, that\u0027s good enough. Rain can use parts of that as well. In general, I just kind of want weather to be there, but I don\u0027t expect dozens of worlds with unique weather patterns all done at AAA quality. There just aren\u0027t resources for that at Intercept.\n\u003C/p\u003E\n"},{"CreatedByName":"Incarnation of Chaos","CreatedById":197414,"CreatedDateTime":"2020-07-24T04:32:12Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823345\u0022 data-ipsquote-contentid=\u0022195556\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595228378\u0022 data-ipsquote-userid=\u002257710\u0022 data-ipsquote-username=\u0022K^2\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/20/2020 at 1:59 AM, K^2 said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nRT hardware doesn\u0027t do anything you wouldn\u0027t already be doing as part of your physics engine. The RT ray casts work exactly the same as ray probes in PhysX/Unity. The only difference is how many rays you can cast on CPU vs GPU. Even without RT-specialized hardware, GPU can handle more ray casts than a CPU, but you have to do your own work setting up accelerator structures, such as \u003Ca href=\u0022https://en.wikipedia.org/wiki/Bounding_volume_hierarchy\u0022 rel=\u0022external nofollow\u0022\u003EBVH\u003C/a\u003E. Hardware ray tracers plus associated graphics libraries make that even faster and easier to set up. Bit I don\u0027t think KSP had a problem with how many rays you could cast - a sample of a dozen random rays between random point on the solar panel and random point on the near side of the star is adequate to get a fair estimate for efficiency, especially if you do some time-averaging between frames. Again, it\u0027s very similar to how you would do soft shadows on GPU with ray tracing, but since you don\u0027t need accurate measure of solar flux at every point you can see in the scene, you just don\u0027t have to throw GPU power at it. The number of\u00A0rays you can cast on CPU are enough.\n\u003C/p\u003E\n\u003Cp\u003E\nI haven\u0027t looked into it specifically, but my first guess for why it\u0027s hard in KSP would be how much of collision scene needs to be loaded. It should be very easy and cheap to check for craft occlusions, for example. You already have all of that as part of your collision scene, so Unity is all set up to do ray checks against the craft.\u00A0Nearby terrain, like a rock you\u0027re right next to, should also be easy for the same reason. If either of these are already causing problems\u00A0in KSP, there\u0027s something fishy going on. The next step up is entire planets/moons getting in the way. Trivial case is being on the night side of a planet, but you could also be having an eclipse\u00A0or even just a significant transit that causes some dimming. This would require a separate ray cast on star system scale, but that should be very simple. Ray vs sphere collision check is the cheapest one you can do, and even if you just brute-force all planets and moons, it\u0027s really easy to check for this sort of thing. You first check if the ray hits a spherical representation of any planet or moon, and if not, then you check against collision scene. That gets you most of the way there.\n\u003C/p\u003E\n\u003Cp\u003E\nWhere this breaks down with the way KSP is set up is occlusions by mountains on the horizon, for example. Something that\u0027s far enough away that it\u0027s unloaded from collision scene, but large enough that it can cast shadows when sun is low. You obviously can\u0027t keep detailed terrain collision for distant objects, because that\u0027s just too much memory and computation required to handle. The real solution is to be handling it the same way you handle rendering. You don\u0027t draw every triangle of terrain for distant objects. You have simpler, low poly representations you render instead. So a mountain up close might have tens of thousands of polygons, while one on horizon would be rendered with a few dozen. Likewise, for purposes of solar panel occlusion, you don\u0027t need to load mountain in all its glory. You could substitute in a much simpler collider. I haven\u0027t seen a good way to do this in PhysX, so this would require custom code, but it\u0027s exactly the same situation with GPU RT. Either way, you have to write an LoD system for your collision scene, and if you\u0027re doing that for either system, you might as well just do it all on CPU for better support on mid-range PCs.\n\u003C/p\u003E\n\u003Cp\u003E\nIt is rather edge-case, though. So if solar panels are wonky in more cases than that, I\u0027m not really sure what\u0027s going on there. It\u0027s not\u00A0\u003Cem\u003Ethat\u003C/em\u003E hard of a problem...\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYeah all RT hardware is are Matrix Units from what iv\u0027e seen (Specifically I\u0027m pretty sure they\u0027re 4X4) ; they\u0027re just accelerating existing calculations that would take too long on the GPU/CPU (Nividia uses them for Denoising of the rough RT scenes last i checked). So i wasn\u0027t thinking they\u0027re magic; just trying to think of something that they could be leveraged for that most everyone could benefit from.\n\u003C/p\u003E\n\u003Cp\u003E\nBut from your description it sounds more like an issue created by how KSP handles the pipeline in the first place, rather than a lack of a workable solution. Thanks for the answer anyway.\n\u003C/p\u003E\n"}]}