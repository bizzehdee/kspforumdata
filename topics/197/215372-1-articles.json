{"TopicId":215372,"ForumId":197,"TopicTitle":"[v0.1.1.0] Attitude Auto-Pointing Unstable During Time Warp","CreatedByName":"bdkaplin","CreatedById":227963,"CreatedDateTime":"2023-03-17T20:34:14Z","PageNum":1,"Articles":[{"CreatedByName":"bdkaplin","CreatedById":227963,"CreatedDateTime":"2023-03-17T20:34:14Z","Content":"\n\u003Cp\u003E\nI noticed a bug where the auto-pointing/vehicle attitude control gets disturbed and sometimes decides to take the \u0022long way\u0022 around to the desired pointing direction (for example, is 30 deg off of prograde and decides to continue rotation 330 deg rather than unwinding the 30 deg offset). This happens significantly more often when the offset is caused during time warp (either physics or just the desired pointing direction rotating) and results in significant control activity following reversion to 1x speed. On occasion, the behavior is unstable - the vehicle overshoots the correction, then decides to continue rotating rather than unwinding, etc. A few times, this has resulted in Kraken-like behavior.\n\u003C/p\u003E\n\u003Cp\u003E\nProposed Fix:\n\u003C/p\u003E\n\u003Cp\u003E\nIt depends on the exact root cause, for example if it\u0027s just a performance issue in the physics calcs. However, one possible cause could be attributed to how the game handles the \u003Cabbr title=\u0022Advanced Stability Augmentation System\u0022\u003EASAS\u003C/abbr\u003E simulation. If a torque command is generated in response to the attitude being stored as quaternions (my recommendation), then a possible error source could be in a handful of places: a) generating the target quaternion among the set of possible values, b) representation of the vehicle current attitude relative to inertial frame, c) chattering at the hypersphere equator (depending on convention this is the real part equal to zero, q0 or q4 = 0), or d) the control law itself.\u003Cbr\u003E\n\u003Cbr\u003E\nFor a) a fix could be as simple as normalizing the real part to the same sign as the vehicle (since the shadow set -q is the same physical orientation as q). For b) it depends if the chosen \u0022inertial\u0022 frame is super important, but one fix could be to incline the relative frame a few degree to lessen the chance you are exactly 180 deg off of it. Alternatively, utilizing the shadow set again could work (always real part positive vehicle representation) but this increases chattering stability issues if you don\u0027t handle that separately. For c) again inclining the reference could work but otherwise you would want to introduce some hysteresis into the calculations. For d) there are several alternative control laws available designed to solve this issue, see for example Wie\u0027s Space Vehicle Dynamics and Control. A simple modification if using linear feedback is to multiply the quaternion term by the sign of its real part (so that it drives to the closest version of the target).\n\u003C/p\u003E\n\u003Cp\u003E\nIf you can replicate this and track it down, I\u0027m happy to help. I teach attitude control and build and fly ADCS on rockets, missiles, and spacecraft.\n\u003C/p\u003E\n"},{"CreatedByName":"MehJeb","CreatedById":227441,"CreatedDateTime":"2023-03-17T21:14:32Z","Content":"\n\u003Cp\u003E\nall rotations in Unity are quaternions; if your rotation is exactly -180 deg (Euler?) than there is no difference which \u0022way\u0022 the rotation happens... but this cannot happen as your other two axis are not null at any point in time...\n\u003C/p\u003E\n\u003Cp\u003E\nAlso, you may have a look at\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://docs.unity3d.com/ScriptReference/Quaternion.FromToRotation.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://docs.unity3d.com/ScriptReference/Quaternion.FromToRotation.html\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nsince it is the most common way to implement target rotations towards vector (and around another vector, usualy one of axis) in Unity\n\u003C/p\u003E\n\u003Cp\u003E\nit is also an equivalent of\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nQuaternion newRotation = oldRotation * givenRotation;\n\u003C/p\u003E\n\u003Cp\u003E\nof course, noone stops you from either \u002B= * or *-1 ;-)\n\u003C/p\u003E\n\u003Cp\u003E\nThe question is: \u0022what is the \u0022correct\u0022 side to rotate via?\u0022 for airplane - no problem, its belly is \u002B- limited to the ground plane (in Unity physics it is implemented via developer-configurable Gravity value); but for space-craft in true 3D space - what would be your constraint? Planet? Star? Axe of ecliptics? Relative to what should it turn left or right or any other Vector3?\n\u003C/p\u003E\n"},{"CreatedByName":"darthgently","CreatedById":204885,"CreatedDateTime":"2023-03-17T21:39:36Z","Content":"\n\u003Cp\u003E\nWell there is the \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E case of shortest rotation path.\u00A0 Additionally, in the orbital case,\u00A0 any existing angular velocity could be taken into account along with available torque as there may be some cases (probably not overshoot cases) where it makes more sense to take the long angle way around because it is shorter from a torque and duration pov (would take more time to reverse rotation and backtrack than simply catch the target direction next time around)\n\u003C/p\u003E\n"},{"CreatedByName":"bdkaplin","CreatedById":227963,"CreatedDateTime":"2023-03-17T22:24:42Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224261297\u0022 data-ipsquote-contentid=\u0022215372\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221679087672\u0022 data-ipsquote-userid=\u0022227441\u0022 data-ipsquote-username=\u0022MehJeb\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n50 minutes ago, MehJeb said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe question is: \u0022what is the \u0022correct\u0022 side to rotate via?\u0022 for airplane - no problem, its belly is \u002B- limited to the ground plane (in Unity physics it is implemented via developer-configurable Gravity value); but for space-craft in true 3D space - what would be your constraint? Planet? Star? Axe of ecliptics? Relative to what should it turn left or right or any other Vector3?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nGiven two quaternions representing two orientations, there is a representation of the difference as a single rotation angle about a single axis. So, the most common implementation is to attempt such an \u0022eigenaxis\u0022 rotation. From rest to rest, this is always possible, but if you are already rotating it\u0027s not always easy.\u00A0 Adding a constraint (such as I want to rotate but keep one side facing the nadir/\u0022down\u0022 direction) is beyond the scope of what KSP is going for, I think. It can be done, but is more difficult to do smoothly in a closed-loop simulation that only depends on the current vehicle state.\n\u003C/p\u003E\n\u003Cp\u003E\nThe tricker part here is how you represent either the current vehicle quaternion or the target direction. Saying \u0022I want to point in the prograde direction\u0022 is not proscribing an orientation, because it leaves the roll angle about the pointing axis undetermined. So, there are an infinite number of quaternions representing this direction. Picking which one to plug into the Unity helper function is a non-trivial task and may or may not matter. Sometimes, you go \u0022whatever, I don\u0027t care\u0022 and make a random selection, or hold some other value constant. And sometimes, that breaks the behavior in odd ways. I was suggesting that was one possible cause.\n\u003C/p\u003E\n\u003Cp\u003E\nFor an aircraft, Euler angles provide a natural way of representing pitch/roll/yaw from a reference case. Some quaternion implementations start with this and then convert to quaternions for the \u0022under the hood\u0022 calcs (example in Unity). But, this destroys one of the benefits of a native quaternion representation, which is avoiding singularities that are present in Euler angle descriptions.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224261325\u0022 data-ipsquote-contentid=\u0022215372\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221679089176\u0022 data-ipsquote-userid=\u0022204885\u0022 data-ipsquote-username=\u0022darthgently\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n26 minutes ago, darthgently said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nWell there is the \u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003E\u003Cabbr title=\u00221. Original Post(er). The first post in a thread, or the person who posted it. 2. Overpowered. A part or mechanic that upsets game balance by being too powerful.\u0022\u003EOP\u003C/abbr\u003E\u003C/abbr\u003E case of shortest rotation path.\u00A0 Additionally, in the orbital case,\u00A0 any existing angular velocity could be taken into account along with available torque as there may be some cases (probably not overshoot cases) where it makes more sense to take the long angle way around because it is shorter from a torque and duration pov (would take more time to reverse rotation and backtrack than simply catch the target direction next time around)\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis statement is entirely true, but I doubt that is what the KSP2 simulation is doing, or at least not in detail. More likely, it is a simple feedback law saturated by available torque. I don\u0027t even know for sure if there is an allocation strategy (for example if I have multiple \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E modules) or if the parts are just additive to some vehicle maximum torque. The latter is simpler and faster, but less real world. The former introduces a new spot for error, because most allocation methods have singularities. I\u0027m guessing it is somewhat of the former, with the torques added as part properties, because of the attitude instability of long, slender vehicles.\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nIn terms of \u0022maybe it makes more sense\u0022, one possibility is to estimate this by computing maximum torques and time in both directions, but doing so and including saturation of the torque elements is computationally expensive. So, you would have to have decent estimating procedures. Otherwise, it is generally an optimal control problem (which I love, but is probably beyond the scope of real-time simulation).\n\u003C/p\u003E\n"},{"CreatedByName":"darthgently","CreatedById":204885,"CreatedDateTime":"2023-03-17T23:09:12Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00224261368\u0022 data-ipsquote-contentid=\u0022215372\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221679091882\u0022 data-ipsquote-userid=\u0022227963\u0022 data-ipsquote-username=\u0022bdkaplin\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n42 minutes ago, bdkaplin said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nbut I doubt that is what the KSP2 simulation is doing\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m about certain this is not what KSP 1 or 2 is doing.\u00A0 I was going more for the ideal and what I\u0027ve attempted to do in kOS but still working on that...\n\u003C/p\u003E\n"}]}