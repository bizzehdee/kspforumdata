{"TopicId":32396,"ForumId":34,"TopicTitle":"[0.22] Extraplanetary Launchpads Legacy Thread","CreatedByName":"skykooler","CreatedById":60459,"CreatedDateTime":"2013-06-11T04:17:27Z","PageNum":57,"Articles":[{"CreatedByName":"Spazmatism","CreatedById":88997,"CreatedDateTime":"2013-10-18T17:20:54Z","Content":"\n\u003Cp\u003EIs there a reason I can\u0027t find the debug setting in the launchpad part.cfg?\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-19T00:12:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Spazmatism\u0022 data-cite=\u0022Spazmatism\u0022\u003E\u003Cdiv\u003EIs there a reason I can\u0027t find the debug setting in the launchpad part.cfg?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes. You don\u0027t need it. If you don\u0027t have Kethane installed, it will (or should) auto-enable. If you do have Kethane installed, then why would you want it unless actually debugging?\u003C/p\u003E\n"},{"CreatedByName":"greg12","CreatedById":56261,"CreatedDateTime":"2013-10-19T14:48:33Z","Content":"\n\u003Cp\u003ESo, I found a problem. I built a base on Minmus with Kethane and EL. I get all the resources to able to spawn my rocket on the launchpad. After I built the rocket all the resources stayed in the tanks. nothing get removed to fill up the spawned rocket. So now, I can spawn anything and I don\u0060t need to go mining because the resources not going to be taken from the tanks. What should I do to fix this?\u003C/p\u003E\n"},{"CreatedByName":"impwarhamer","CreatedById":80499,"CreatedDateTime":"2013-10-19T18:07:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022greg12\u0022 data-cite=\u0022greg12\u0022\u003E\u003Cdiv\u003ESo, I found a problem. I built a base on Minmus with Kethane and EL. I get all the resources to able to spawn my rocket on the launchpad. After I built the rocket all the resources stayed in the tanks. nothing get removed to fill up the spawned rocket. So now, I can spawn anything and I don\u0060t need to go mining because the resources not going to be taken from the tanks. What should I do to fix this?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Epurge the obviously possessed launch pad\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-20T00:42:56Z","Content":"\n\u003Cp\u003EYeah, it sounds like you\u0027ve got a pad with debug enabled. just delete the line from the part.cfg. EL now checks for Kethane and sets the mode automatically if Kethane is not present, so third-party pads no longer need to include the debug setting.\u003C/p\u003E\n"},{"CreatedByName":"spiritplumber","CreatedById":84232,"CreatedDateTime":"2013-10-20T00:47:09Z","Content":"\n\u003Cp\u003EI have taken the liberty of adding orbital drydocks to this. Edited ExLaunchPad.cs follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003E//using System.IO;\t  // needed for Path manipulation\u003Cbr\u003E//using Uri;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace ExLP {\u003Cbr\u003E\u003Cbr\u003E// edited by spiritplumber to add orbital launchpads\u003Cbr\u003E\u003Cbr\u003E    public class ExLaunchPad : PartModule\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E\t[KSPField]\u003Cbr\u003E\tpublic bool debug = false;\u003Cbr\u003E\u003Cbr\u003E\t//public static bool kethane_present = CheckForKethane();\u003Cbr\u003E\tpublic static bool kethane_present;\u003Cbr\u003E\u003Cbr\u003E\tpublic enum crafttype { SPH, VAB };\u003Cbr\u003E\u003Cbr\u003E\tpublic class Styles {\u003Cbr\u003E\t\tpublic static GUIStyle normal;\u003Cbr\u003E\t\tpublic static GUIStyle red;\u003Cbr\u003E\t\tpublic static GUIStyle yellow;\u003Cbr\u003E\t\tpublic static GUIStyle green;\u003Cbr\u003E\t\tpublic static GUIStyle white;\u003Cbr\u003E\t\tpublic static GUIStyle label;\u003Cbr\u003E\t\tpublic static GUIStyle slider;\u003Cbr\u003E\t\tpublic static GUIStyle sliderText;\u003Cbr\u003E\u003Cbr\u003E\t\tprivate static bool initialized;\u003Cbr\u003E\u003Cbr\u003E\t\tpublic static void Init()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif (initialized)\u003Cbr\u003E\t\t\t\treturn;\u003Cbr\u003E\t\t\tinitialized = true;\u003Cbr\u003E\u003Cbr\u003E\t\t\tnormal = new GUIStyle(GUI.skin.button);\u003Cbr\u003E\t\t\tnormal.normal.textColor = normal.focused.textColor = Color.white;\u003Cbr\u003E\t\t\tnormal.hover.textColor = normal.active.textColor = Color.yellow;\u003Cbr\u003E\t\t\tnormal.onNormal.textColor = normal.onFocused.textColor = normal.onHover.textColor = normal.onActive.textColor = Color.green;\u003Cbr\u003E\t\t\tnormal.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\u003Cbr\u003E\t\t\tred = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tred.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tred.normal.textColor = red.focused.textColor = Color.red;\u003Cbr\u003E\u003Cbr\u003E\t\t\tyellow = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tyellow.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tyellow.normal.textColor = yellow.focused.textColor = Color.yellow;\u003Cbr\u003E\u003Cbr\u003E\t\t\tgreen = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tgreen.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tgreen.normal.textColor = green.focused.textColor = Color.green;\u003Cbr\u003E\u003Cbr\u003E\t\t\twhite = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\twhite.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\twhite.normal.textColor = white.focused.textColor = Color.white;\u003Cbr\u003E\u003Cbr\u003E\t\t\tlabel = new GUIStyle(GUI.skin.label);\u003Cbr\u003E\t\t\tlabel.normal.textColor = label.focused.textColor = Color.white;\u003Cbr\u003E\t\t\tlabel.alignment = TextAnchor.MiddleCenter;\u003Cbr\u003E\u003Cbr\u003E\t\t\tslider = new GUIStyle(GUI.skin.horizontalSlider);\u003Cbr\u003E\t\t\tslider.margin = new RectOffset(0, 0, 0, 0);\u003Cbr\u003E\u003Cbr\u003E\t\t\tsliderText = new GUIStyle(GUI.skin.label);\u003Cbr\u003E\t\t\tsliderText.alignment = TextAnchor.MiddleCenter;\u003Cbr\u003E\t\t\tsliderText.margin = new RectOffset(0, 0, 0, 0);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic class UIStatus\u003Cbr\u003E\t{\u003Cbr\u003E\t\tpublic Rect windowpos;\u003Cbr\u003E\t\tpublic bool builduiactive = false;\t// Whether the build menu is open or closed\u003Cbr\u003E\t\tpublic bool builduivisible = true;\t// Whether the build menu is allowed to be shown\u003Cbr\u003E\t\tpublic bool showbuilduionload = false;\u003Cbr\u003E\t\tpublic bool init = true;\u003Cbr\u003E\t\tpublic bool linklfosliders = true;\u003Cbr\u003E\t\tpublic bool showvab = true;\u003Cbr\u003E\t\tpublic bool showsph = false;\u003Cbr\u003E\t\tpublic bool canbuildcraft = false;\u003Cbr\u003E\t\tpublic crafttype ct = crafttype.VAB;\u003Cbr\u003E\t\tpublic string craftfile = null;\u003Cbr\u003E\t\tpublic string flagname = null;\u003Cbr\u003E\t\tpublic CraftBrowser craftlist = null;\u003Cbr\u003E\t\tpublic bool showcraftbrowser = false;\u003Cbr\u003E\t\tpublic ConfigNode craftnode = null;\u003Cbr\u003E\t\tpublic bool craftselected = false;\u003Cbr\u003E\t\tpublic Vector2 resscroll;\u003Cbr\u003E\t\tpublic Dictionary\u0026lt;string, double\u0026gt; requiredresources = null;\u003Cbr\u003E\t\tpublic double hullRocketParts = 0.0;\u003Cbr\u003E\t\tpublic Dictionary\u0026lt;string, float\u0026gt; resourcesliders = new Dictionary\u0026lt;string, float\u0026gt;();\u003Cbr\u003E\t\tpublic float timer;\u003Cbr\u003E        public Vessel launchee, launcher;\u003Cbr\u003E        public Orbit currentorbit;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\tint padPartsCount;\t\t\t\t\t// the number of parts in the pad vessel (for docking detection)\u003Cbr\u003E\tVesselResources padResources;\t\t// resources available to the pad\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = false)]\u003Cbr\u003E\tpublic float SpawnHeightOffset = 1.0f;\t// amount of pad between origin and open space\u003Cbr\u003E\u003Cbr\u003E\tprivate UIStatus uis = new UIStatus();\u003Cbr\u003E\u003Cbr\u003E\t//private List\u0026lt;Vessel\u0026gt; bases;\u003Cbr\u003E\u003Cbr\u003E\tprivate static bool CheckForKethane()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (AssemblyLoader.loadedAssemblies.Any(a =\u0026gt; a.assembly.GetName().Name == \u0022MMI_Kethane\u0022)) {\u003Cbr\u003E\t\t\tDebug.Log(\u0022[EL] Kethane found\u0022);\u003Cbr\u003E\t\t\treturn true;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tDebug.Log(\u0022[EL] Kethane not found\u0022);\u003Cbr\u003E\t\treturn false;\u003Cbr\u003E\t}\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// UI Functions\u003Cbr\u003E\u003Cbr\u003E\tprivate void UseResources(Vessel craft)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tVesselResources craftResources = new VesselResources(craft);\u003Cbr\u003E\u003Cbr\u003E\t\t// Remove all resources that we might later fill (hull resources will not be touched)\u003Cbr\u003E\t\tHashSet\u0026lt;string\u0026gt; resources_to_remove = new HashSet\u0026lt;string\u0026gt;(uis.requiredresources.Keys);\u003Cbr\u003E\t\tcraftResources.RemoveAllResources(resources_to_remove);\u003Cbr\u003E\u003Cbr\u003E\t\t// remove rocket parts required for the hull and solid fuel\u003Cbr\u003E\t\tpadResources.TransferResource(\u0022RocketParts\u0022, -uis.hullRocketParts);\u003Cbr\u003E\u003Cbr\u003E\t\t// use resources\u003Cbr\u003E\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in uis.requiredresources) {\u003Cbr\u003E\t\t\t// If resource is \u0022JetFuel\u0022, rename to \u0022LiquidFuel\u0022\u003Cbr\u003E\t\t\tstring res = pair.Key;\u003Cbr\u003E\t\t\tif (pair.Key == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\tres = \u0022LiquidFuel\u0022;\u003Cbr\u003E\t\t\t\tif (pair.Value == 0)\u003Cbr\u003E\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tif (!uis.resourcesliders.ContainsKey(pair.Key)) {\u003Cbr\u003E\t\t\t\tDebug.Log(String.Format(\u0022[EL] missing slider {0}\u0022, pair.Key));\u003Cbr\u003E\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\t// Calculate resource cost based on slider position - note use pair.Key NOT res! we need to use the position of the dedicated LF slider not the LF component of LFO slider\u003Cbr\u003E\t\t\tdouble tot = pair.Value * uis.resourcesliders[pair.Key];\u003Cbr\u003E\t\t\t// Transfer the resource from the vessel doing the building to the vessel being built\u003Cbr\u003E\t\t\tpadResources.TransferResource(res, -tot);\u003Cbr\u003E\t\t\tcraftResources.TransferResource(res, tot);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void FixCraftLock()\u003Cbr\u003E\t{\u003Cbr\u003E\u003Cbr\u003E        if (uis.launcher.situation == Vessel.Situations.ORBITING)\u003Cbr\u003E        {\u003Cbr\u003E            WarpShip(uis.launcher, uis.currentorbit);\u003Cbr\u003E            uis.currentorbit.epoch -= 0.1;\u003Cbr\u003E            WarpShip(uis.launchee, uis.currentorbit);\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Build completed!\u0022, \u0022The new vessel has been assembled near the drydock.\u0022 \u002B situationdesc(uis.launcher.situation), \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Build completed!\u0022, \u0022The new vessel has been assembled on the pad.\u0022\u002Bsituationdesc(uis.launcher.situation), \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\u003Cbr\u003E        // Many thanks to Snjo (firespitter)\u003Cbr\u003E\t\tuis.launchee.situation = Vessel.Situations.LANDED;\u003Cbr\u003E\t\tuis.launchee.state = Vessel.State.ACTIVE;\u003Cbr\u003E\t\tuis.launchee.Landed = false;\u003Cbr\u003E\t\tuis.launchee.Splashed = false;\u003Cbr\u003E\u003Cbr\u003E        uis.launchee.GoOnRails();\u003Cbr\u003E\t\tuis.launchee.rigidbody.WakeUp();\u003Cbr\u003E\t\tuis.launchee.ResumeStaging();\u003Cbr\u003E\t\tuis.launchee.landedAt = \u0022External Launchpad\u0022;\u003Cbr\u003E        uis.launchee.state = Vessel.State.ACTIVE;\u003Cbr\u003E\t\tInputLockManager.ClearControlLocks();\u003Cbr\u003E\u003Cbr\u003E        uis.launcher.MakeActive();\u003Cbr\u003E        uis.launchee.MakeActive();\u003Cbr\u003E\u003Cbr\u003E        //PopupDialog.SpawnPopupDialog(\u0022launcheE\u0022, \u0022 \u0022 \u002B uis.launchee.orbit.inclination \u002B \u0022 \u0022 \u002B uis.launchee.orbit.altitude \u002B \u0022 \u0022 \u002B uis.launchee.orbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.launchee.orbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E        //PopupDialog.SpawnPopupDialog(\u0022launcheR\u0022, \u0022 \u0022 \u002B uis.launcher.orbit.inclination \u002B \u0022 \u0022 \u002B uis.launcher.orbit.altitude \u002B \u0022 \u0022 \u002B uis.launcher.orbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.launcher.orbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public static void ErrorPopup(string message)\u003Cbr\u003E        {\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Error\u0022, message, \u0022Close\u0022, true, HighLogic.Skin);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    private static void WarpShip(Vessel vessel, Orbit newOrbit) // from hyperedit\u003Cbr\u003E    {\u003Cbr\u003E        if (newOrbit.getRelativePositionAtUT(Planetarium.GetUniversalTime()).magnitude \u0026gt; newOrbit.referenceBody.sphereOfInfluence)\u003Cbr\u003E        {\u003Cbr\u003E            ErrorPopup(\u0022Destination position was above the sphere of influence\u0022);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        vessel.Landed = false;\u003Cbr\u003E        vessel.Splashed = false;\u003Cbr\u003E        vessel.landedAt = string.Empty;\u003Cbr\u003E        var parts = vessel.parts;\u003Cbr\u003E        if (parts != null)\u003Cbr\u003E        {\u003Cbr\u003E            var clamps = parts.Where(p =\u0026gt; p.Modules != null \u0026amp;\u0026amp; p.Modules.OfType\u0026lt;LaunchClamp\u0026gt;().Any()).ToList();\u003Cbr\u003E            foreach (var clamp in clamps)\u003Cbr\u003E                clamp.Die();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        try\u003Cbr\u003E        {\u003Cbr\u003E            OrbitPhysicsManager.HoldVesselUnpack(60);\u003Cbr\u003E        }\u003Cbr\u003E        catch (NullReferenceException)\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        foreach (var v in (FlightGlobals.fetch == null ? (IEnumerable\u0026lt;Vessel\u0026gt;)new[] { vessel } : FlightGlobals.Vessels).Where(v =\u0026gt; v.packed == false))\u003Cbr\u003E            v.GoOnRails();\u003Cbr\u003E\u003Cbr\u003E        HardsetOrbit(vessel.orbit, newOrbit);\u003Cbr\u003E\u003Cbr\u003E        vessel.orbitDriver.pos = vessel.orbit.pos.xzy;\u003Cbr\u003E        vessel.orbitDriver.vel = vessel.orbit.vel;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private static void HardsetOrbit(Orbit orbit, Orbit newOrbit) // from hyperedit\u003Cbr\u003E    {\u003Cbr\u003E        orbit.inclination = newOrbit.inclination;\u003Cbr\u003E        orbit.eccentricity = newOrbit.eccentricity;\u003Cbr\u003E        orbit.semiMajorAxis = newOrbit.semiMajorAxis;\u003Cbr\u003E        orbit.LAN = newOrbit.LAN;\u003Cbr\u003E        orbit.argumentOfPeriapsis = newOrbit.argumentOfPeriapsis;\u003Cbr\u003E        orbit.meanAnomalyAtEpoch = newOrbit.meanAnomalyAtEpoch;\u003Cbr\u003E        orbit.epoch = newOrbit.epoch;\u003Cbr\u003E        orbit.referenceBody = newOrbit.referenceBody;\u003Cbr\u003E        orbit.Init();\u003Cbr\u003E        orbit.UpdateFromUT(Planetarium.GetUniversalTime());\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\tprivate void BuildAndLaunchCraft()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// build craft\u003Cbr\u003E\t\tShipConstruct nship = ShipConstruction.LoadShip(uis.craftfile);\u003Cbr\u003E\u003Cbr\u003E\t\tVector3 offset = Vector3.up * SpawnHeightOffset;\u003Cbr\u003E\t\tTransform t = this.part.transform;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\tstring landedAt = \u0022External Launchpad\u0022;\u003Cbr\u003E\t\tstring flag = uis.flagname;\u003Cbr\u003E\t\tGame state = FlightDriver.FlightStateCache;\u003Cbr\u003E\t\tVesselCrewManifest crew = new VesselCrewManifest ();\u003Cbr\u003E\u003Cbr\u003E\t\tGameObject launchPos = new GameObject ();\u003Cbr\u003E\t\tlaunchPos.transform.position = t.position;\u003Cbr\u003E\t\tlaunchPos.transform.position \u002B= t.TransformDirection(offset);\u003Cbr\u003E\t\tlaunchPos.transform.rotation = t.rotation;\u003Cbr\u003E\t\tShipConstruction.CreateBackup(nship);\u003Cbr\u003E\t\tShipConstruction.PutShipToGround(nship, launchPos.transform);\u003Cbr\u003E\t\tDestroy(launchPos);\u003Cbr\u003E\u003Cbr\u003E\t\tShipConstruction.AssembleForLaunch(nship, landedAt, flag, state, crew);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\tVessel vsl = FlightGlobals.Vessels[FlightGlobals.Vessels.Count - 1];\u003Cbr\u003E        vsl.Landed = false;\u003Cbr\u003E\u003Cbr\u003E\t\tif (kethane_present \u0026amp;\u0026amp; !debug)\u003Cbr\u003E\t\t\tUseResources(vsl);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        Staging.beginFlight();\u003Cbr\u003E\t\tuis.timer = 3.0f;\u003Cbr\u003E        uis.launchee = vsl;\u003Cbr\u003E        uis.launcher = this.vessel;\u003Cbr\u003E        uis.currentorbit = new Orbit();\u003Cbr\u003E        HardsetOrbit(uis.currentorbit,this.vessel.GetOrbit());\u003Cbr\u003E//        PopupDialog.SpawnPopupDialog(\u0022DERP currentorbit\u0022, \u0022 \u0022 \u002B uis.currentorbit.inclination \u002B \u0022 \u0022 \u002B uis.currentorbit.altitude \u002B \u0022 \u0022 \u002B uis.currentorbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.currentorbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\tprivate float ResourceLine(string label, string resourceName, float fraction, double minAmount, double maxAmount, double available)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t// Resource name\u003Cbr\u003E\t\tGUILayout.Box(label, Styles.white, GUILayout.Width(120), GUILayout.Height(40));\u003Cbr\u003E\u003Cbr\u003E\t\t// Fill amount\u003Cbr\u003E\t\tGUILayout.BeginVertical();\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\t// limit slider to 0.5% increments\u003Cbr\u003E\t\tif (minAmount == maxAmount) {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022Must be 100%\u0022, GUILayout.Width(300), GUILayout.Height(20));\u003Cbr\u003E\t\t\tfraction = 1.0F;\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tfraction = (float)Math.Round(GUILayout.HorizontalSlider(fraction, 0.0F, 1.0F, Styles.slider, GUI.skin.horizontalSliderThumb, GUILayout.Width(300), GUILayout.Height(20)), 3);\u003Cbr\u003E\t\t\tfraction = (Mathf.Floor(fraction * 200)) / 200;\u003Cbr\u003E\t\t\tGUILayout.Box((fraction * 100).ToString() \u002B \u0022%\u0022, Styles.sliderText, GUILayout.Width(300), GUILayout.Height(20));\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tdouble required = minAmount * (1 - fraction)  \u002B maxAmount * fraction;\u003Cbr\u003E\u003Cbr\u003E\t\t// Calculate if we have enough resources to build\u003Cbr\u003E\t\tGUIStyle requiredStyle = Styles.green;\u003Cbr\u003E\t\tif (available \u0026lt; required) {\u003Cbr\u003E\t\t\trequiredStyle = Styles.red;\u003Cbr\u003E\t\t\t// prevent building unless debug mode is on, or kethane is not\u003Cbr\u003E\t\t\t// installed (kethane is required for resource production)\u003Cbr\u003E\t\t\tuis.canbuildcraft = (!kethane_present || debug);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\t// Required and Available\u003Cbr\u003E\t\tGUILayout.Box((Math.Round(required, 2)).ToString(), requiredStyle, GUILayout.Width(75), GUILayout.Height(40));\u003Cbr\u003E\t\tGUILayout.Box((Math.Round(available, 2)).ToString(), Styles.white, GUILayout.Width(75), GUILayout.Height(40));\u003Cbr\u003E\u003Cbr\u003E\t\t// Flexi space to make sure any unused space is at the right-hand edge\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\treturn fraction;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate void WindowGUI(int windowID)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tStyles.Init();\u003Cbr\u003E\t\t/*\u003Cbr\u003E\t\t * ToDo:\u003Cbr\u003E\t\t * can extend FileBrowser class to see currently highlighted file?\u003Cbr\u003E\t\t * rslashphish says: public myclass(arg1, arg2) : base(arg1, arg2);\u003Cbr\u003E\t\t * KSPUtil.ApplicationRootPath - gets KSPO root\u003Cbr\u003E\t\t * expose m_files and m_selectedFile?\u003Cbr\u003E\t\t * fileBrowser = new FileBrowser(new Rect(Screen.width / 2, 100, 350, 500), title, callback, true);\u003Cbr\u003E\t\t *\u003Cbr\u003E\t\t * Style declarations messy - how do I dupe them easily?\u003Cbr\u003E\t\t */\u003Cbr\u003E\t\tif (uis.init)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tuis.init = false;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tEditorLogic editor = EditorLogic.fetch;\u003Cbr\u003E\t\tif (editor) return;\u003Cbr\u003E\u003Cbr\u003E\t\tif (!uis.builduiactive) return;\u003Cbr\u003E\u003Cbr\u003E\t\tif (padResources != null \u0026amp;\u0026amp; padPartsCount != vessel.Parts.Count) {\u003Cbr\u003E\t\t\t// something docked or undocked, so rebuild the pad\u0027s resouces info\u003Cbr\u003E\t\t\tpadResources = null;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (padResources == null) {\u003Cbr\u003E\t\t\tpadPartsCount = vessel.Parts.Count;\u003Cbr\u003E\t\t\tpadResources = new VesselResources(vessel);\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginHorizontal(\u0022box\u0022);\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\t// VAB / SPH selection\u003Cbr\u003E\t\tif (GUILayout.Toggle(uis.showvab, \u0022VAB\u0022, GUILayout.Width(80))) {\u003Cbr\u003E\t\t\tuis.showvab = true;\u003Cbr\u003E\t\t\tuis.showsph = false;\u003Cbr\u003E\t\t\tuis.ct = crafttype.VAB;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (GUILayout.Toggle(uis.showsph, \u0022SPH\u0022)) {\u003Cbr\u003E\t\t\tuis.showvab = false;\u003Cbr\u003E\t\t\tuis.showsph = true;\u003Cbr\u003E\t\t\tuis.ct = crafttype.SPH;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\tstring strpath = HighLogic.SaveFolder;\u003Cbr\u003E\u003Cbr\u003E\t\tif (GUILayout.Button(\u0022Select Craft\u0022, Styles.normal, GUILayout.ExpandWidth(true))) {\u003Cbr\u003E\t\t\t//GUILayout.Button is \u0022true\u0022 when clicked\u003Cbr\u003E\t\t\tuis.craftlist = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), uis.ct.ToString(), strpath, \u0022Select a ship to load\u0022, craftSelectComplete, craftSelectCancel, HighLogic.Skin, EditorLogic.ShipFileImage, true);\u003Cbr\u003E\t\t\tuis.showcraftbrowser = true;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tif (uis.craftselected) {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022Selected Craft:\t\u0022 \u002B uis.craftnode.GetValue(\u0022ship\u0022), Styles.white);\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Resource requirements\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Resources required to build:\u0022, Styles.label, GUILayout.Width(600));\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Link LFO toggle\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.linklfosliders = GUILayout.Toggle(uis.linklfosliders, \u0022Link RocketFuel sliders for LiquidFuel and Oxidizer\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.resscroll = GUILayout.BeginScrollView(uis.resscroll, GUILayout.Width(600), GUILayout.Height(300));\u003Cbr\u003E\u003Cbr\u003E\t\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Headings\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Resource\u0022, Styles.label, GUILayout.Width(120));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Fill Percentage\u0022, Styles.label, GUILayout.Width(300));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Required\u0022, Styles.label, GUILayout.Width(75));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Available\u0022, Styles.label, GUILayout.Width(75));\u003Cbr\u003E\t\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.canbuildcraft = true;\t   // default to can build - if something is stopping us from building, we will set to false later\u003Cbr\u003E\u003Cbr\u003E\t\t\tif (!uis.requiredresources.ContainsKey(\u0022RocketParts\u0022)) {\u003Cbr\u003E\t\t\t\t// if the craft to be built has no rocket parts storage, then the amount to use is not adjustable\u003Cbr\u003E\t\t\t\tstring resname = \u0022RocketParts\u0022;\u003Cbr\u003E\t\t\t\tdouble available = padResources.ResourceAmount(resname);\u003Cbr\u003E\t\t\t\tResourceLine(resname, resname, 1.0F, uis.hullRocketParts, uis.hullRocketParts, available);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Cycle through required resources\u003Cbr\u003E\t\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in uis.requiredresources) {\u003Cbr\u003E\t\t\t\tstring resname = pair.Key;\t// Holds REAL resource name. May need to translate from \u0022JetFuel\u0022 back to \u0022LiquidFuel\u0022\u003Cbr\u003E\t\t\t\tstring reslabel = resname;\t // Resource name for DISPLAY purposes only. Internally the app uses pair.Key\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\t\tif (pair.Value == 0f) {\u003Cbr\u003E\t\t\t\t\t\t// Do not show JetFuel line if not being used\u003Cbr\u003E\t\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\t//resname = \u0022JetFuel\u0022;\u003Cbr\u003E\t\t\t\t\tresname = \u0022LiquidFuel\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tif (!uis.resourcesliders.ContainsKey(pair.Key)) {\u003Cbr\u003E\t\t\t\t\tuis.resourcesliders.Add(pair.Key, 1);\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\t// If in link LFO sliders mode, rename Oxidizer to LFO (Oxidizer) and LiquidFuel to LFO (LiquidFuel)\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022Oxidizer\u0022) {\u003Cbr\u003E\t\t\t\t\treslabel = \u0022RocketFuel (Ox)\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022LiquidFuel\u0022) {\u003Cbr\u003E\t\t\t\t\treslabel = \u0022RocketFuel (LF)\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tdouble minAmount = 0.0;\u003Cbr\u003E\t\t\t\tdouble maxAmount = uis.requiredresources[resname];\u003Cbr\u003E\t\t\t\tif (resname == \u0022RocketParts\u0022) {\u003Cbr\u003E\t\t\t\t\tminAmount \u002B= uis.hullRocketParts;\u003Cbr\u003E\t\t\t\t\tmaxAmount \u002B= uis.hullRocketParts;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tdouble available = padResources.ResourceAmount(resname);\u003Cbr\u003E\t\t\t\t// If LFO LiquidFuel exists and we are on LiquidFuel (Non-LFO), then subtract the amount used by LFO(LiquidFuel) from the available amount\u003Cbr\u003E\t\t\t\tif (pair.Key == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\t\tavailable -= uis.requiredresources[\u0022LiquidFuel\u0022] * uis.resourcesliders[\u0022LiquidFuel\u0022];\u003Cbr\u003E\t\t\t\t\tif (available \u0026lt; 0.0)\u003Cbr\u003E\t\t\t\t\t\tavailable = 0.0;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tuis.resourcesliders[pair.Key] = ResourceLine(reslabel, pair.Key, uis.resourcesliders[pair.Key], minAmount, maxAmount, available);\u003Cbr\u003E\t\t\t\tif (uis.linklfosliders) {\u003Cbr\u003E\t\t\t\t\tfloat tmp = uis.resourcesliders[pair.Key];\u003Cbr\u003E\t\t\t\t\tif (pair.Key == \u0022Oxidizer\u0022) {\u003Cbr\u003E\t\t\t\t\t\tuis.resourcesliders[\u0022LiquidFuel\u0022] = tmp;\u003Cbr\u003E\t\t\t\t\t} else if (pair.Key == \u0022LiquidFuel\u0022) {\u003Cbr\u003E\t\t\t\t\t\tuis.resourcesliders[\u0022Oxidizer\u0022] = tmp;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\tGUILayout.EndScrollView();\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Build button\u003Cbr\u003E\t\t\tif (uis.canbuildcraft) {\u003Cbr\u003E\t\t\t\tif (GUILayout.Button(\u0022Build\u0022, Styles.normal, GUILayout.ExpandWidth(true))) {\u003Cbr\u003E\t\t\t\t\tBuildAndLaunchCraft();\u003Cbr\u003E\t\t\t\t\t// Reset the UI\u003Cbr\u003E\t\t\t\t\tuis.craftselected = false;\u003Cbr\u003E\t\t\t\t\tuis.requiredresources = null;\u003Cbr\u003E\t\t\t\t\tuis.resourcesliders = new Dictionary\u0026lt;string, float\u0026gt;();;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\t\t// Close the UI\u003Cbr\u003E\t\t\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\tGUILayout.Box(\u0022You do not have the resources to build this craft\u0022, Styles.red);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022You must select a craft before you can build\u0022, Styles.red);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.EndVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tif (GUILayout.Button(\u0022Close\u0022)) {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tuis.showbuilduionload = GUILayout.Toggle(uis.showbuilduionload, \u0022Show on StartUp\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\t\t//DragWindow makes the window draggable. The Rect specifies which part of the window it can by dragged by, and is\u003Cbr\u003E\t\t//clipped to the actual boundary of the window. You can also pass no argument at all and then the window can by\u003Cbr\u003E\t\t//dragged by any part of it. Make sure the DragWindow command is AFTER all your other GUI input stuff, or else\u003Cbr\u003E\t\t//it may \u0022cover up\u0022 your controls and make them stop responding to the mouse.\u003Cbr\u003E\t\tGUI.DragWindow(new Rect(0, 0, 10000, 20));\u003Cbr\u003E\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// called when the user selects a craft the craft browser\u003Cbr\u003E\tprivate void craftSelectComplete(string filename, string flagname)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tuis.showcraftbrowser = false;\u003Cbr\u003E\t\tuis.craftfile = filename;\u003Cbr\u003E\t\tuis.flagname = flagname;\u003Cbr\u003E\t\tuis.craftnode = ConfigNode.Load(filename);\u003Cbr\u003E\t\tConfigNode[] nodes = uis.craftnode.GetNodes(\u0022PART\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\t// Get list of resources required to build vessel\u003Cbr\u003E\t\tif ((uis.requiredresources = getBuildCost(nodes)) != null)\u003Cbr\u003E\t\t\tuis.craftselected = true;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// called when the user clicks cancel in the craft browser\u003Cbr\u003E\tprivate void craftSelectCancel()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tuis.showcraftbrowser = false;\u003Cbr\u003E\u003Cbr\u003E\t\tuis.requiredresources = null;\u003Cbr\u003E\t\tuis.craftselected = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Event Hooks\u003Cbr\u003E\t// See http://docs.unity3d.com/Documentation/Manual/ExecutionOrder.html for some help on what fires when\u003Cbr\u003E\u003Cbr\u003E\t// Called each time the GUI is painted\u003Cbr\u003E\tprivate void drawGUI()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tGUI.skin = HighLogic.Skin;\u003Cbr\u003E\t\tuis.windowpos = GUILayout.Window(1, uis.windowpos, WindowGUI, \u0022Extraplanetary Launchpad: \u0022\u002Bsituationdesc(uis.launcher.situation), GUILayout.Width(600));\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// Called ONCE at start\u003Cbr\u003E\tprivate void Start()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// If \u0022Show GUI on StartUp\u0022 ticked, show the GUI\u003Cbr\u003E\t\tif (uis.showbuilduionload) {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t// Fired maybe multiple times a frame, maybe once every n frames\u003Cbr\u003E\tpublic override void OnFixedUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// ToDo: Should not be checking this every frame - once per craft switch\u003Cbr\u003E\t\t// OnVesselChange may be ideal but I cannot seem to get it to fire\u003Cbr\u003E\t\t// Landed / Flying check should probably be with this code, but moved it elsewhere while this is firing so often\u003Cbr\u003E\u003Cbr\u003E        this.Update();\u003Cbr\u003E\u003Cbr\u003E\t\t// Does the UI want to be visible?\u003Cbr\u003E\t\tif (uis.builduiactive) {\u003Cbr\u003E\t\t\t// Decide if the build menu is allowed to be visible\u003Cbr\u003E\t\t\tif (this.vessel == FlightGlobals.ActiveVessel) {\u003Cbr\u003E\t\t\t\t// Yes - check if it is currently not visible\u003Cbr\u003E\t\t\t\tif (!uis.builduivisible) {\u003Cbr\u003E\t\t\t\t\t// Going from invisible to visible\u003Cbr\u003E\t\t\t\t\tuis.builduivisible = true;\u003Cbr\u003E\t\t\t\t\tRenderingManager.AddToPostDrawQueue(3, new Callback(drawGUI)); //start the GUI\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\t// No - check if it is currently visible\u003Cbr\u003E\t\t\t\tif (uis.builduivisible) {\u003Cbr\u003E\t\t\t\t\t// Going from visible to invisible\u003Cbr\u003E\t\t\t\t\tuis.builduivisible = false;\u003Cbr\u003E\t\t\t\t\tRenderingManager.RemoveFromPostDrawQueue(3, new Callback(drawGUI)); //stop the GUI\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t/*\u003Cbr\u003E\t// Called when you change vessel\u003Cbr\u003E\t// ToDo: Cannot seem to get this code to fire...\u003Cbr\u003E\tprivate void OnVesselChange()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (this.vessel == FlightGlobals.ActiveVessel) {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\t*/\u003Cbr\u003E\u003Cbr\u003E\tpublic void Update()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif ((uis.launchee != null) \u0026amp;\u0026amp; (uis.timer \u0026gt;= 0)) {\u003Cbr\u003E\t\t\tuis.timer -= Time.deltaTime;\u003Cbr\u003E\t\t\tif (uis.timer \u0026lt;= 0) {\u003Cbr\u003E\t\t\t\tFixCraftLock();\u003Cbr\u003E\t\t\t\tuis.launchee = null;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// Fired ONCE per frame\u003Cbr\u003E\tpublic override void OnUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// Update state of context buttons depending on state of UI\u003Cbr\u003E\t\t// ToDo: Move to something fired when the GUI is updated?\u003Cbr\u003E\t\tEvents[\u0022ShowBuildMenu\u0022].active = !uis.builduiactive;\u003Cbr\u003E\t\tEvents[\u0022HideBuildMenu\u0022].active = uis.builduiactive;\u003Cbr\u003E        this.Update();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// Fired multiple times per frame in response to GUI events\u003Cbr\u003E\tprivate void OnGUI()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (uis.showcraftbrowser) {\u003Cbr\u003E\t\t\tuis.craftlist.OnGUI();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t/*\u003Cbr\u003E\t// ToDo: What Does this Do?\u003Cbr\u003E\tprivate void OnLoad()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tbases = FlightGlobals.fetch.vessels;\u003Cbr\u003E\t\tforeach (Vessel v in bases) {\u003Cbr\u003E\t\t\tprint(v.name);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\t*/\u003Cbr\u003E\u003Cbr\u003E\t// Fired when KSP saves\u003Cbr\u003E\tpublic override void OnSave(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;ExLaunchPad\u0026gt;();\u003Cbr\u003E\t\tconfig.SetValue(\u0022Window Position\u0022, uis.windowpos);\u003Cbr\u003E\t\tconfig.SetValue(\u0022Show Build Menu on StartUp\u0022, uis.showbuilduionload);\u003Cbr\u003E\t\tconfig.save();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t// Fired when KSP loads\u003Cbr\u003E\tpublic override void OnLoad(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tkethane_present = CheckForKethane();\u003Cbr\u003E\t\tLoadConfigFile();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate void LoadConfigFile()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;ExLaunchPad\u0026gt;();\u003Cbr\u003E\t\tconfig.load();\u003Cbr\u003E\t\tuis.windowpos = config.GetValue\u0026lt;Rect\u0026gt;(\u0022Window Position\u0022);\u003Cbr\u003E\t\tuis.showbuilduionload = config.GetValue\u0026lt;bool\u0026gt;(\u0022Show Build Menu on StartUp\u0022);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Flight UI and Action Group Hooks\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Show Build Menu\u0022, active = true)]\u003Cbr\u003E\tpublic void ShowBuildMenu()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// Only allow enabling the menu if we are in a suitable place\u003Cbr\u003E        if (((this.vessel.situation == Vessel.Situations.LANDED) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.ORBITING) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.PRELAUNCH) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.SPLASHED)))\u003Cbr\u003E        {\u003Cbr\u003E            uis.launcher = this.vessel;\u003Cbr\u003E            RenderingManager.AddToPostDrawQueue(3, new Callback(drawGUI)); //start the GUI\u003Cbr\u003E            uis.builduiactive = true;\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Sorry\u0022, \u0022Can\u0027t build due to not being landed, splashed, or in a stable orbit\\n\\nCurrent state: \u0022 \u002B situationdesc(this.vessel.situation), \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E        }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public String situationdesc(Vessel.Situations i)\u003Cbr\u003E    {\u003Cbr\u003Eswitch (i)\u003Cbr\u003E{\u003Cbr\u003E    case Vessel.Situations.DOCKED: return \u0022Docked\u0022;\u003Cbr\u003E    case Vessel.Situations.ESCAPING: return \u0022Escaping\u0022;\u003Cbr\u003E    case Vessel.Situations.FLYING: return \u0022Flying\u0022;\u003Cbr\u003E    case Vessel.Situations.LANDED: return \u0022Landed\u0022;\u003Cbr\u003E    case Vessel.Situations.ORBITING: return \u0022Orbiting\u0022;\u003Cbr\u003E    case Vessel.Situations.PRELAUNCH: return \u0022Prelaunch\u0022;\u003Cbr\u003E    case Vessel.Situations.SPLASHED: return \u0022Splashed\u0022;\u003Cbr\u003E    case Vessel.Situations.SUB_ORBITAL: return \u0022Suborbital\u0022;\u003Cbr\u003E}\u003Cbr\u003Ereturn \u0022Not sure\u0022;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Hide Build Menu\u0022, active = false)]\u003Cbr\u003E\tpublic void HideBuildMenu()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tRenderingManager.RemoveFromPostDrawQueue(3, new Callback(drawGUI)); //stop the GUI\u003Cbr\u003E\t\tuis.builduiactive = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Show Build Menu\u0022)]\u003Cbr\u003E\tpublic void EnableBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tShowBuildMenu();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Hide Build Menu\u0022)]\u003Cbr\u003E\tpublic void DisableBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tHideBuildMenu();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Toggle Build Menu\u0022)]\u003Cbr\u003E\tpublic void ToggleBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (uis.builduiactive) {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Build Helper Functions\u003Cbr\u003E\u003Cbr\u003E\tprivate void MissingPopup(Dictionary\u0026lt;string, bool\u0026gt; missing_parts)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tstring text = \u0022\u0022;\u003Cbr\u003E\t\tforeach (string mp in missing_parts.Keys)\u003Cbr\u003E\t\t\ttext \u002B= mp \u002B \u0022\\n\u0022;\u003Cbr\u003E\t\tint ind = uis.craftfile.LastIndexOf(\u0022/\u0022) \u002B 1;\u003Cbr\u003E\t\tstring craft = uis.craftfile.Substring (ind);\u003Cbr\u003E\t\tcraft = craft.Remove (craft.LastIndexOf(\u0022.\u0022));\u003Cbr\u003E\t\tPopupDialog.SpawnPopupDialog(\u0022Sorry\u0022, \u0022Can\u0027t build \u0022 \u002B craft \u002B \u0022 due to the following missing parts\\n\\n\u0022 \u002B text, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic Dictionary\u0026lt;string, double\u0026gt; getBuildCost(ConfigNode[] nodes)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfloat mass = 0.0f;\u003Cbr\u003E\t\tDictionary\u0026lt;string, double\u0026gt; resources = new Dictionary\u0026lt;string, double\u0026gt;();\u003Cbr\u003E\t\tDictionary\u0026lt;string, double\u0026gt; hull_resources = new Dictionary\u0026lt;string, double\u0026gt;();\u003Cbr\u003E\t\tDictionary\u0026lt;string, bool\u0026gt; missing_parts = new Dictionary\u0026lt;string, bool\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E\t\tforeach (ConfigNode node in nodes) {\u003Cbr\u003E\t\t\tstring part_name = node.GetValue(\u0022part\u0022);\u003Cbr\u003E\t\t\tpart_name = part_name.Remove(part_name.LastIndexOf(\u0022_\u0022));\u003Cbr\u003E\t\t\tAvailablePart ap = PartLoader.getPartInfoByName(part_name);\u003Cbr\u003E\t\t\tif (ap == null) {\u003Cbr\u003E\t\t\t\tmissing_parts[part_name] = true;\u003Cbr\u003E\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tPart p = ap.partPrefab;\u003Cbr\u003E\t\t\tmass \u002B= p.mass;\u003Cbr\u003E\t\t\tforeach (PartResource r in p.Resources) {\u003Cbr\u003E\t\t\t\tif (r.resourceName == \u0022IntakeAir\u0022 || r.resourceName == \u0022KIntakeAir\u0022) {\u003Cbr\u003E\t\t\t\t\t// Ignore intake Air\u003Cbr\u003E\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tDictionary\u0026lt;string, double\u0026gt; res_dict = resources;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\t\t\tres_def = PartResourceLibrary.Instance.GetDefinition(r.resourceName);\u003Cbr\u003E\t\t\t\tif (res_def.resourceTransferMode == ResourceTransferMode.NONE\u003Cbr\u003E\t\t\t\t\t|| res_def.resourceFlowMode == ResourceFlowMode.NO_FLOW) {\u003Cbr\u003E\t\t\t\t\tres_dict = hull_resources;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tif (!res_dict.ContainsKey(r.resourceName)) {\u003Cbr\u003E\t\t\t\t\tres_dict[r.resourceName] = 0.0;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tres_dict[r.resourceName] \u002B= r.maxAmount;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (missing_parts.Count \u0026gt; 0) {\u003Cbr\u003E\t\t\tMissingPopup(missing_parts);\u003Cbr\u003E\t\t\treturn null;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t// RocketParts for the hull is a separate entity to RocketParts in\u003Cbr\u003E\t\t// storage containers\u003Cbr\u003E\t\tPartResourceDefinition rp_def;\u003Cbr\u003E\t\trp_def = PartResourceLibrary.Instance.GetDefinition(\u0022RocketParts\u0022);\u003Cbr\u003E\t\tuis.hullRocketParts = mass / rp_def.density;\u003Cbr\u003E\u003Cbr\u003E\t\t// If non pumpable resources are used, convert to RocketParts\u003Cbr\u003E\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in hull_resources) {\u003Cbr\u003E\t\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\t\tres_def = PartResourceLibrary.Instance.GetDefinition(pair.Key);\u003Cbr\u003E\t\t\tdouble hull_mass = pair.Value * res_def.density;\u003Cbr\u003E\t\t\tdouble hull_parts = hull_mass / rp_def.density;\u003Cbr\u003E\t\t\tuis.hullRocketParts \u002B= hull_parts;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t// If there is JetFuel (ie LF only tanks as well as LFO tanks - eg a SpacePlane) then split the Surplus LF off as \u0022JetFuel\u0022\u003Cbr\u003E\t\tif (resources.ContainsKey(\u0022Oxidizer\u0022) \u0026amp;\u0026amp; resources.ContainsKey(\u0022LiquidFuel\u0022)) {\u003Cbr\u003E\t\t\tdouble jetFuel = 0.0;\u003Cbr\u003E\t\t\t// The LiquidFuel:Oxidizer ratio is 9:11. Try to minimize rounding effects.\u003Cbr\u003E\t\t\tjetFuel = (11 * resources[\u0022LiquidFuel\u0022] - 9 * resources[\u0022Oxidizer\u0022]) / 11;\u003Cbr\u003E\t\t\tif (jetFuel \u0026lt; 0.01)\t{\u003Cbr\u003E\t\t\t\t// Forget it. not getting far on that. Any discrepency this\u003Cbr\u003E\t\t\t\t// small will be due to precision losses.\u003Cbr\u003E\t\t\t\tjetFuel = 0.0;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tresources[\u0022LiquidFuel\u0022] -= jetFuel;\u003Cbr\u003E\t\t\tresources[\u0022JetFuel\u0022] = jetFuel;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\treturn resources;\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Epublic class Recycler : PartModule\u003Cbr\u003E{\u003Cbr\u003E\tdouble busyTime;\u003Cbr\u003E\tbool recyclerActive;\u003Cbr\u003E\t[KSPField] public float RecycleRate = 1.0f;\u003Cbr\u003E\t[KSPField (guiName = \u0022State\u0022, guiActive = true)] public string status;\u003Cbr\u003E\u003Cbr\u003E\tpublic void OnTriggerStay(Collider col)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!recyclerActive\u003Cbr\u003E\t\t\t|| Planetarium.GetUniversalTime() \u0026lt;= busyTime\u003Cbr\u003E\t\t\t|| !col.CompareTag(\u0022Untagged\u0022)\u003Cbr\u003E\t\t\t|| col.gameObject.name == \u0022MapOverlay collider\u0022)\t// kethane\u003Cbr\u003E\t\t\treturn;\u003Cbr\u003E\t\tPart p = col.attachedRigidbody.GetComponent\u0026lt;Part\u0026gt;();\u003Cbr\u003E\t\tDebug.Log(String.Format(\u0022[EL] {0}\u0022, p));\u003Cbr\u003E\t\tif (p != null \u0026amp;\u0026amp; p.vessel != null \u0026amp;\u0026amp; p.vessel != vessel) {\u003Cbr\u003E\t\t\tfloat mass;\u003Cbr\u003E\t\t\tif (p.vessel.isEVA) {\u003Cbr\u003E\t\t\t\tmass = RecycleKerbal(p.vessel);\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\tmass = RecycleVessel(p.vessel);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tbusyTime = Planetarium.GetUniversalTime() \u002B mass / RecycleRate;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate float ReclaimResource(string resource, double amount,\u003Cbr\u003E\t\t\t\t\t\t\t\t  string vessel_name, string name=null)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\tres_def = PartResourceLibrary.Instance.GetDefinition(resource);\u003Cbr\u003E\t\tVesselResources recycler = new VesselResources(vessel);\u003Cbr\u003E\u003Cbr\u003E\t\tif (res_def == null) {\u003Cbr\u003E\t\t\treturn 0;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tif (name == null) {\u003Cbr\u003E\t\t\tname = resource;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tdouble remain = amount;\u003Cbr\u003E\t\t// any resources that can\u0027t be pumped or don\u0027t flow just \u0022evaporate\u0022\u003Cbr\u003E\t\t// FIXME: should this be a little smarter and convert certain such\u003Cbr\u003E\t\t// resources into rocket parts?\u003Cbr\u003E\t\tif (res_def.resourceTransferMode != ResourceTransferMode.NONE\u003Cbr\u003E\t\t\t\u0026amp;\u0026amp; res_def.resourceFlowMode != ResourceFlowMode.NO_FLOW) {\u003Cbr\u003E\t\t\tremain = recycler.TransferResource(resource, amount);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tDebug.Log(String.Format(\u0022[EL] {0}-{1}: {2} taken {3} reclaimed, {4} lost\u0022, vessel_name, name, amount, amount - remain, remain));\u003Cbr\u003E\t\treturn (float) (amount * res_def.density);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic float RecycleKerbal(Vessel v)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!v.isEVA)\u003Cbr\u003E\t\t\treturn 0;\u003Cbr\u003E\u003Cbr\u003E\t\t// idea and numbers taken from Kethane\u003Cbr\u003E\t\tif (v.GetVesselCrew()[0].isBadass) {\u003Cbr\u003E\t\t\tv.rootPart.explosionPotential = 10000;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tFlightGlobals.ForceSetActiveVessel(this.vessel);\u003Cbr\u003E\t\tv.rootPart.explode();\u003Cbr\u003E\u003Cbr\u003E\t\tfloat mass = 0;\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022Kethane\u0022, 150, v.name);\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022Metal\u0022, 1, v.name);\u003Cbr\u003E\t\treturn mass;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic float RecycleVessel(Vessel v)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfloat ConversionEfficiency = 0.8f;\u003Cbr\u003E\t\tdouble amount;\u003Cbr\u003E\t\tVesselResources scrap = new VesselResources(v);\u003Cbr\u003E\u003Cbr\u003E\t\tPartResourceDefinition rp_def;\u003Cbr\u003E\t\trp_def = PartResourceLibrary.Instance.GetDefinition(\u0022RocketParts\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\tfloat mass = 0;\u003Cbr\u003E\t\tforeach (string resource in scrap.resources.Keys) {\u003Cbr\u003E\t\t\tamount = scrap.ResourceAmount (resource);\u003Cbr\u003E\t\t\tmass \u002B= ReclaimResource(resource, amount, v.name);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tfloat hull_mass = v.GetTotalMass();\u003Cbr\u003E\t\tamount = hull_mass * ConversionEfficiency / rp_def.density;\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022RocketParts\u0022, amount, v.name, \u0022hull\u0022);\u003Cbr\u003E\t\tv.Die();\u003Cbr\u003E\t\treturn mass;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Activate Recycler\u0022, active = true)]\u003Cbr\u003E\tpublic void Activate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\trecyclerActive = true;\u003Cbr\u003E\t\tEvents[\u0022Activate\u0022].active = false;\u003Cbr\u003E\t\tEvents[\u0022Deactivate\u0022].active = true;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Deactivate Recycler\u0022,\u003Cbr\u003E\t active = false)]\u003Cbr\u003E\tpublic void Deactivate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\trecyclerActive = false;\u003Cbr\u003E\t\tEvents[\u0022Activate\u0022].active = true;\u003Cbr\u003E\t\tEvents[\u0022Deactivate\u0022].active = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic override void OnLoad(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tDeactivate();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic override void OnUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (Planetarium.GetUniversalTime() \u0026lt;= busyTime) {\u003Cbr\u003E\t\t\tstatus = \u0022Busy\u0022;\u003Cbr\u003E\t\t} else if (recyclerActive) {\u003Cbr\u003E\t\t\tstatus = \u0022Active\u0022;\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tstatus = \u0022Inactive\u0022;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-10-20T01:05:12Z\u0022 title=\u002210/20/2013 01:05  AM\u0022 data-short=\u002210 yr\u0022\u003EOctober 20, 2013\u003C/time\u003E by spiritplumber\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-20T01:06:59Z","Content":"\n\u003Cp\u003Espiritplumber: Hmm, I\u0027ll have to take a look. Just the other day I\u0027d worked out a possible method of doing orbital construction.\u003C/p\u003E\n"},{"CreatedByName":"spiritplumber","CreatedById":84232,"CreatedDateTime":"2013-10-20T21:47:42Z","Content":"\n\u003Cp\u003EThis works more reliably.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003E//using System.IO;\t  // needed for Path manipulation\u003Cbr\u003E//using Uri;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Eusing KSP.IO;\u003Cbr\u003E\u003Cbr\u003Enamespace ExLP {\u003Cbr\u003E\u003Cbr\u003E// edited by spiritplumber to add orbital launchpads\u003Cbr\u003E\u003Cbr\u003E    public class ExLaunchPad : PartModule\u003Cbr\u003E{\u003Cbr\u003E\u003Cbr\u003E\t[KSPField]\u003Cbr\u003E\tpublic bool debug = false;\u003Cbr\u003E\u003Cbr\u003E\t//public static bool kethane_present = CheckForKethane();\u003Cbr\u003E\tpublic static bool kethane_present;\u003Cbr\u003E\u003Cbr\u003E\tpublic enum crafttype { SPH, VAB };\u003Cbr\u003E\u003Cbr\u003E\tpublic class Styles {\u003Cbr\u003E\t\tpublic static GUIStyle normal;\u003Cbr\u003E\t\tpublic static GUIStyle red;\u003Cbr\u003E\t\tpublic static GUIStyle yellow;\u003Cbr\u003E\t\tpublic static GUIStyle green;\u003Cbr\u003E\t\tpublic static GUIStyle white;\u003Cbr\u003E\t\tpublic static GUIStyle label;\u003Cbr\u003E\t\tpublic static GUIStyle slider;\u003Cbr\u003E\t\tpublic static GUIStyle sliderText;\u003Cbr\u003E\u003Cbr\u003E\t\tprivate static bool initialized;\u003Cbr\u003E\u003Cbr\u003E\t\tpublic static void Init()\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif (initialized)\u003Cbr\u003E\t\t\t\treturn;\u003Cbr\u003E\t\t\tinitialized = true;\u003Cbr\u003E\u003Cbr\u003E\t\t\tnormal = new GUIStyle(GUI.skin.button);\u003Cbr\u003E\t\t\tnormal.normal.textColor = normal.focused.textColor = Color.white;\u003Cbr\u003E\t\t\tnormal.hover.textColor = normal.active.textColor = Color.yellow;\u003Cbr\u003E\t\t\tnormal.onNormal.textColor = normal.onFocused.textColor = normal.onHover.textColor = normal.onActive.textColor = Color.green;\u003Cbr\u003E\t\t\tnormal.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\u003Cbr\u003E\t\t\tred = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tred.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tred.normal.textColor = red.focused.textColor = Color.red;\u003Cbr\u003E\u003Cbr\u003E\t\t\tyellow = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tyellow.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tyellow.normal.textColor = yellow.focused.textColor = Color.yellow;\u003Cbr\u003E\u003Cbr\u003E\t\t\tgreen = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\tgreen.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\tgreen.normal.textColor = green.focused.textColor = Color.green;\u003Cbr\u003E\u003Cbr\u003E\t\t\twhite = new GUIStyle(GUI.skin.box);\u003Cbr\u003E\t\t\twhite.padding = new RectOffset(8, 8, 8, 8);\u003Cbr\u003E\t\t\twhite.normal.textColor = white.focused.textColor = Color.white;\u003Cbr\u003E\u003Cbr\u003E\t\t\tlabel = new GUIStyle(GUI.skin.label);\u003Cbr\u003E\t\t\tlabel.normal.textColor = label.focused.textColor = Color.white;\u003Cbr\u003E\t\t\tlabel.alignment = TextAnchor.MiddleCenter;\u003Cbr\u003E\u003Cbr\u003E\t\t\tslider = new GUIStyle(GUI.skin.horizontalSlider);\u003Cbr\u003E\t\t\tslider.margin = new RectOffset(0, 0, 0, 0);\u003Cbr\u003E\u003Cbr\u003E\t\t\tsliderText = new GUIStyle(GUI.skin.label);\u003Cbr\u003E\t\t\tsliderText.alignment = TextAnchor.MiddleCenter;\u003Cbr\u003E\t\t\tsliderText.margin = new RectOffset(0, 0, 0, 0);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic class UIStatus\u003Cbr\u003E\t{\u003Cbr\u003E\t\tpublic Rect windowpos;\u003Cbr\u003E\t\tpublic bool builduiactive = false;\t// Whether the build menu is open or closed\u003Cbr\u003E\t\tpublic bool builduivisible = true;\t// Whether the build menu is allowed to be shown\u003Cbr\u003E\t\tpublic bool showbuilduionload = false;\u003Cbr\u003E\t\tpublic bool init = true;\u003Cbr\u003E\t\tpublic bool linklfosliders = true;\u003Cbr\u003E\t\tpublic bool showvab = true;\u003Cbr\u003E\t\tpublic bool showsph = false;\u003Cbr\u003E\t\tpublic bool canbuildcraft = false;\u003Cbr\u003E\t\tpublic crafttype ct = crafttype.VAB;\u003Cbr\u003E\t\tpublic string craftfile = null;\u003Cbr\u003E\t\tpublic string flagname = null;\u003Cbr\u003E\t\tpublic CraftBrowser craftlist = null;\u003Cbr\u003E\t\tpublic bool showcraftbrowser = false;\u003Cbr\u003E\t\tpublic ConfigNode craftnode = null;\u003Cbr\u003E\t\tpublic bool craftselected = false;\u003Cbr\u003E\t\tpublic Vector2 resscroll;\u003Cbr\u003E\t\tpublic Dictionary\u0026lt;string, double\u0026gt; requiredresources = null;\u003Cbr\u003E\t\tpublic double hullRocketParts = 0.0;\u003Cbr\u003E\t\tpublic Dictionary\u0026lt;string, float\u0026gt; resourcesliders = new Dictionary\u0026lt;string, float\u0026gt;();\u003Cbr\u003E\t\tpublic float timer = 0.0f;\u003Cbr\u003E        public Vessel launchee, launcher;\u003Cbr\u003E        public Orbit currentorbit;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\tint padPartsCount;\t\t\t\t\t// the number of parts in the pad vessel (for docking detection)\u003Cbr\u003E\tVesselResources padResources;\t\t// resources available to the pad\u003Cbr\u003E\u003Cbr\u003E\t[KSPField(isPersistant = false)]\u003Cbr\u003E\tpublic float SpawnHeightOffset = 1.0f;\t// amount of pad between origin and open space\u003Cbr\u003E\u003Cbr\u003E\tprivate UIStatus uis = new UIStatus();\u003Cbr\u003E\u003Cbr\u003E\t//private List\u0026lt;Vessel\u0026gt; bases;\u003Cbr\u003E\u003Cbr\u003E\tprivate static bool CheckForKethane()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (AssemblyLoader.loadedAssemblies.Any(a =\u0026gt; a.assembly.GetName().Name == \u0022MMI_Kethane\u0022)) {\u003Cbr\u003E\t\t\tDebug.Log(\u0022[EL] Kethane found\u0022);\u003Cbr\u003E\t\t\treturn true;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tDebug.Log(\u0022[EL] Kethane not found\u0022);\u003Cbr\u003E\t\treturn false;\u003Cbr\u003E\t}\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// UI Functions\u003Cbr\u003E\u003Cbr\u003E\tprivate void UseResources(Vessel craft)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tVesselResources craftResources = new VesselResources(craft);\u003Cbr\u003E\u003Cbr\u003E\t\t// Remove all resources that we might later fill (hull resources will not be touched)\u003Cbr\u003E\t\tHashSet\u0026lt;string\u0026gt; resources_to_remove = new HashSet\u0026lt;string\u0026gt;(uis.requiredresources.Keys);\u003Cbr\u003E\t\tcraftResources.RemoveAllResources(resources_to_remove);\u003Cbr\u003E\u003Cbr\u003E\t\t// remove rocket parts required for the hull and solid fuel\u003Cbr\u003E\t\tpadResources.TransferResource(\u0022RocketParts\u0022, -uis.hullRocketParts);\u003Cbr\u003E\u003Cbr\u003E\t\t// use resources\u003Cbr\u003E\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in uis.requiredresources) {\u003Cbr\u003E\t\t\t// If resource is \u0022JetFuel\u0022, rename to \u0022LiquidFuel\u0022\u003Cbr\u003E\t\t\tstring res = pair.Key;\u003Cbr\u003E\t\t\tif (pair.Key == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\tres = \u0022LiquidFuel\u0022;\u003Cbr\u003E\t\t\t\tif (pair.Value == 0)\u003Cbr\u003E\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tif (!uis.resourcesliders.ContainsKey(pair.Key)) {\u003Cbr\u003E\t\t\t\tDebug.Log(String.Format(\u0022[EL] missing slider {0}\u0022, pair.Key));\u003Cbr\u003E\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\t// Calculate resource cost based on slider position - note use pair.Key NOT res! we need to use the position of the dedicated LF slider not the LF component of LFO slider\u003Cbr\u003E\t\t\tdouble tot = pair.Value * uis.resourcesliders[pair.Key];\u003Cbr\u003E\t\t\t// Transfer the resource from the vessel doing the building to the vessel being built\u003Cbr\u003E\t\t\tpadResources.TransferResource(res, -tot);\u003Cbr\u003E\t\t\tcraftResources.TransferResource(res, tot);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    private void FixCraftLock()\u003Cbr\u003E\t{\u003Cbr\u003E        Double localepoch = uis.currentorbit.epoch;\u003Cbr\u003E        Double localdist = -0.1;\u003Cbr\u003E        //uis.launcher.state = Vessel.State.ACTIVE;\u003Cbr\u003E        FlightGlobals.ForceSetActiveVessel(uis.launcher);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        if (uis.launcher.situation == Vessel.Situations.ORBITING)\u003Cbr\u003E        {\u003Cbr\u003E            WarpShip(uis.launcher, uis.currentorbit);\u003Cbr\u003E            uis.currentorbit.epoch = localepoch \u002B localdist;\u003Cbr\u003E            WarpShip(uis.launchee, uis.currentorbit);\u003Cbr\u003E            uis.currentorbit.epoch = localepoch;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (uis.launcher.situation == Vessel.Situations.SUB_ORBITAL)\u003Cbr\u003E        {\u003Cbr\u003E            uis.currentorbit.epoch = localepoch;\u003Cbr\u003E            WarpShip(uis.launcher, uis.currentorbit);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        if (uis.launchee.situation == Vessel.Situations.SUB_ORBITAL)\u003Cbr\u003E        {\u003Cbr\u003E            uis.currentorbit.epoch = localepoch \u002B localdist;\u003Cbr\u003E            WarpShip(uis.launchee, uis.currentorbit);\u003Cbr\u003E            uis.currentorbit.epoch = localepoch;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        //PopupDialog.SpawnPopupDialog(\u0022launcheE\u0022, \u0022 \u0022 \u002B uis.launchee.orbit.inclination \u002B \u0022 \u0022 \u002B uis.launchee.orbit.altitude \u002B \u0022 \u0022 \u002B uis.launchee.orbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.launchee.orbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E        //PopupDialog.SpawnPopupDialog(\u0022launcheR\u0022, \u0022 \u0022 \u002B uis.launcher.orbit.inclination \u002B \u0022 \u0022 \u002B uis.launcher.orbit.altitude \u002B \u0022 \u0022 \u002B uis.launcher.orbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.launcher.orbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        if ((uis.launchee.situation == Vessel.Situations.SUB_ORBITAL) || (uis.launcher.situation == Vessel.Situations.SUB_ORBITAL))\u003Cbr\u003E        {\u003Cbr\u003E            uis.timer = 1.0f; // try again\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E\u003Cbr\u003E            uis.currentorbit.epoch = localepoch;\u003Cbr\u003E\u003Cbr\u003E            // Many thanks to Snjo (firespitter)\u003Cbr\u003E            uis.launchee.situation = uis.launcher.situation;\u003Cbr\u003E\u003Cbr\u003E            //uis.launchee.state = Vessel.State.ACTIVE;\u003Cbr\u003E            uis.launchee.Landed = false;\u003Cbr\u003E            uis.launchee.Splashed = false;\u003Cbr\u003E\u003Cbr\u003E            uis.launchee.GoOnRails();\u003Cbr\u003E            uis.launchee.rigidbody.WakeUp();\u003Cbr\u003E            uis.launchee.ResumeStaging();\u003Cbr\u003E            uis.launchee.landedAt = \u0022External Launchpad\u0022;\u003Cbr\u003E            //uis.launchee.state = Vessel.State.ACTIVE;\u003Cbr\u003E            InputLockManager.ClearControlLocks();\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Off-Kerbin Construction\u0022, \u0022The vessel has been constructed successfully and is now \u0022 \u002B situationdesc(uis.launchee.situation) \u002B \u0022.\u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E            FlightGlobals.ForceSetActiveVessel(uis.launchee);\u003Cbr\u003E\u003Cbr\u003E            uis.timer = 9001.0f; // done\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        public static void ErrorPopup(string message)\u003Cbr\u003E        {\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Error\u0022, message, \u0022Close\u0022, true, HighLogic.Skin);\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    private static void WarpShip(Vessel vessel, Orbit newOrbit) // from hyperedit\u003Cbr\u003E    {\u003Cbr\u003E        if (newOrbit.getRelativePositionAtUT(Planetarium.GetUniversalTime()).magnitude \u0026gt; newOrbit.referenceBody.sphereOfInfluence)\u003Cbr\u003E        {\u003Cbr\u003E            ErrorPopup(\u0022Destination position was above the sphere of influence\u0022);\u003Cbr\u003E            return;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        vessel.Landed = false;\u003Cbr\u003E        vessel.Splashed = false;\u003Cbr\u003E        vessel.landedAt = string.Empty;\u003Cbr\u003E        var parts = vessel.parts;\u003Cbr\u003E        if (parts != null)\u003Cbr\u003E        {\u003Cbr\u003E            var clamps = parts.Where(p =\u0026gt; p.Modules != null \u0026amp;\u0026amp; p.Modules.OfType\u0026lt;LaunchClamp\u0026gt;().Any()).ToList();\u003Cbr\u003E            foreach (var clamp in clamps)\u003Cbr\u003E                clamp.Die();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        try\u003Cbr\u003E        {\u003Cbr\u003E            OrbitPhysicsManager.HoldVesselUnpack(60);\u003Cbr\u003E        }\u003Cbr\u003E        catch (NullReferenceException)\u003Cbr\u003E        {\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        foreach (var v in (FlightGlobals.fetch == null ? (IEnumerable\u0026lt;Vessel\u0026gt;)new[] { vessel } : FlightGlobals.Vessels).Where(v =\u0026gt; v.packed == false))\u003Cbr\u003E            v.GoOnRails();\u003Cbr\u003E\u003Cbr\u003E        HardsetOrbit(vessel.orbit, newOrbit);\u003Cbr\u003E\u003Cbr\u003E        vessel.orbitDriver.pos = vessel.orbit.pos.xzy;\u003Cbr\u003E        vessel.orbitDriver.vel = vessel.orbit.vel;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    private static void HardsetOrbit(Orbit orbit, Orbit newOrbit) // from hyperedit\u003Cbr\u003E    {\u003Cbr\u003E        orbit.inclination = newOrbit.inclination;\u003Cbr\u003E        orbit.eccentricity = newOrbit.eccentricity;\u003Cbr\u003E        orbit.semiMajorAxis = newOrbit.semiMajorAxis;\u003Cbr\u003E        orbit.LAN = newOrbit.LAN;\u003Cbr\u003E        orbit.argumentOfPeriapsis = newOrbit.argumentOfPeriapsis;\u003Cbr\u003E        orbit.meanAnomalyAtEpoch = newOrbit.meanAnomalyAtEpoch;\u003Cbr\u003E        orbit.epoch = newOrbit.epoch;\u003Cbr\u003E        orbit.referenceBody = newOrbit.referenceBody;\u003Cbr\u003E        orbit.Init();\u003Cbr\u003E        orbit.UpdateFromUT(Planetarium.GetUniversalTime());\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\tprivate void BuildAndLaunchCraft()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// build craft\u003Cbr\u003E\t\tShipConstruct nship = ShipConstruction.LoadShip(uis.craftfile);\u003Cbr\u003E\u003Cbr\u003E\t\tVector3 offset = Vector3.up * SpawnHeightOffset;\u003Cbr\u003E\t\tTransform t = this.part.transform;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\tstring landedAt = \u0022External Launchpad\u0022;\u003Cbr\u003E\t\tstring flag = uis.flagname;\u003Cbr\u003E\t\tGame state = FlightDriver.FlightStateCache;\u003Cbr\u003E\t\tVesselCrewManifest crew = new VesselCrewManifest ();\u003Cbr\u003E\u003Cbr\u003E\t\tGameObject launchPos = new GameObject ();\u003Cbr\u003E\t\tlaunchPos.transform.position = t.position;\u003Cbr\u003E\t\tlaunchPos.transform.position \u002B= t.TransformDirection(offset);\u003Cbr\u003E\t\tlaunchPos.transform.rotation = t.rotation;\u003Cbr\u003E\t\tShipConstruction.CreateBackup(nship);\u003Cbr\u003E\t\tShipConstruction.PutShipToGround(nship, launchPos.transform);\u003Cbr\u003E\t\tDestroy(launchPos);\u003Cbr\u003E\u003Cbr\u003E\t\tShipConstruction.AssembleForLaunch(nship, landedAt, flag, state, crew);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t\tVessel vsl = FlightGlobals.Vessels[FlightGlobals.Vessels.Count - 1];\u003Cbr\u003E        vsl.Landed = false;\u003Cbr\u003E\u003Cbr\u003E\t\tif (kethane_present \u0026amp;\u0026amp; !debug)\u003Cbr\u003E\t\t\tUseResources(vsl);\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        Staging.beginFlight();\u003Cbr\u003E\t\tuis.timer = 3.0f;\u003Cbr\u003E        uis.launchee = vsl;\u003Cbr\u003E        uis.launcher = this.vessel;\u003Cbr\u003E        uis.currentorbit = new Orbit();\u003Cbr\u003E        HardsetOrbit(uis.currentorbit,this.vessel.GetOrbit());\u003Cbr\u003E//        PopupDialog.SpawnPopupDialog(\u0022DERP currentorbit\u0022, \u0022 \u0022 \u002B uis.currentorbit.inclination \u002B \u0022 \u0022 \u002B uis.currentorbit.altitude \u002B \u0022 \u0022 \u002B uis.currentorbit.argumentOfPeriapsis \u002B \u0022 \u0022 \u002B uis.currentorbit.eccentricity \u002B \u0022 \u0022, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\tprivate float ResourceLine(string label, string resourceName, float fraction, double minAmount, double maxAmount, double available)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t// Resource name\u003Cbr\u003E\t\tGUILayout.Box(label, Styles.white, GUILayout.Width(120), GUILayout.Height(40));\u003Cbr\u003E\u003Cbr\u003E\t\t// Fill amount\u003Cbr\u003E\t\tGUILayout.BeginVertical();\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\t// limit slider to 0.5% increments\u003Cbr\u003E\t\tif (minAmount == maxAmount) {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022Must be 100%\u0022, GUILayout.Width(300), GUILayout.Height(20));\u003Cbr\u003E\t\t\tfraction = 1.0F;\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tfraction = (float)Math.Round(GUILayout.HorizontalSlider(fraction, 0.0F, 1.0F, Styles.slider, GUI.skin.horizontalSliderThumb, GUILayout.Width(300), GUILayout.Height(20)), 3);\u003Cbr\u003E\t\t\tfraction = (Mathf.Floor(fraction * 200)) / 200;\u003Cbr\u003E\t\t\tGUILayout.Box((fraction * 100).ToString() \u002B \u0022%\u0022, Styles.sliderText, GUILayout.Width(300), GUILayout.Height(20));\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tdouble required = minAmount * (1 - fraction)  \u002B maxAmount * fraction;\u003Cbr\u003E\u003Cbr\u003E\t\t// Calculate if we have enough resources to build\u003Cbr\u003E\t\tGUIStyle requiredStyle = Styles.green;\u003Cbr\u003E\t\tif (available \u0026lt; required) {\u003Cbr\u003E\t\t\trequiredStyle = Styles.red;\u003Cbr\u003E\t\t\t// prevent building unless debug mode is on, or kethane is not\u003Cbr\u003E\t\t\t// installed (kethane is required for resource production)\u003Cbr\u003E\t\t\tuis.canbuildcraft = (!kethane_present || debug);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\t// Required and Available\u003Cbr\u003E\t\tGUILayout.Box((Math.Round(required, 2)).ToString(), requiredStyle, GUILayout.Width(75), GUILayout.Height(40));\u003Cbr\u003E\t\tGUILayout.Box((Math.Round(available, 2)).ToString(), Styles.white, GUILayout.Width(75), GUILayout.Height(40));\u003Cbr\u003E\u003Cbr\u003E\t\t// Flexi space to make sure any unused space is at the right-hand edge\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\treturn fraction;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate void WindowGUI(int windowID)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tStyles.Init();\u003Cbr\u003E\t\t/*\u003Cbr\u003E\t\t * ToDo:\u003Cbr\u003E\t\t * can extend FileBrowser class to see currently highlighted file?\u003Cbr\u003E\t\t * rslashphish says: public myclass(arg1, arg2) : base(arg1, arg2);\u003Cbr\u003E\t\t * KSPUtil.ApplicationRootPath - gets KSPO root\u003Cbr\u003E\t\t * expose m_files and m_selectedFile?\u003Cbr\u003E\t\t * fileBrowser = new FileBrowser(new Rect(Screen.width / 2, 100, 350, 500), title, callback, true);\u003Cbr\u003E\t\t *\u003Cbr\u003E\t\t * Style declarations messy - how do I dupe them easily?\u003Cbr\u003E\t\t */\u003Cbr\u003E\t\tif (uis.init)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tuis.init = false;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tEditorLogic editor = EditorLogic.fetch;\u003Cbr\u003E\t\tif (editor) return;\u003Cbr\u003E\u003Cbr\u003E\t\tif (!uis.builduiactive) return;\u003Cbr\u003E\u003Cbr\u003E\t\tif (padResources != null \u0026amp;\u0026amp; padPartsCount != vessel.Parts.Count) {\u003Cbr\u003E\t\t\t// something docked or undocked, so rebuild the pad\u0027s resouces info\u003Cbr\u003E\t\t\tpadResources = null;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (padResources == null) {\u003Cbr\u003E\t\t\tpadPartsCount = vessel.Parts.Count;\u003Cbr\u003E\t\t\tpadResources = new VesselResources(vessel);\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginHorizontal(\u0022box\u0022);\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\t// VAB / SPH selection\u003Cbr\u003E\t\tif (GUILayout.Toggle(uis.showvab, \u0022VAB\u0022, GUILayout.Width(80))) {\u003Cbr\u003E\t\t\tuis.showvab = true;\u003Cbr\u003E\t\t\tuis.showsph = false;\u003Cbr\u003E\t\t\tuis.ct = crafttype.VAB;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (GUILayout.Toggle(uis.showsph, \u0022SPH\u0022)) {\u003Cbr\u003E\t\t\tuis.showvab = false;\u003Cbr\u003E\t\t\tuis.showsph = true;\u003Cbr\u003E\t\t\tuis.ct = crafttype.SPH;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\tstring strpath = HighLogic.SaveFolder;\u003Cbr\u003E\u003Cbr\u003E\t\tif (GUILayout.Button(\u0022Select Craft\u0022, Styles.normal, GUILayout.ExpandWidth(true))) {\u003Cbr\u003E\t\t\t//GUILayout.Button is \u0022true\u0022 when clicked\u003Cbr\u003E\t\t\tuis.craftlist = new CraftBrowser(new Rect(Screen.width / 2, 100, 350, 500), uis.ct.ToString(), strpath, \u0022Select a ship to load\u0022, craftSelectComplete, craftSelectCancel, HighLogic.Skin, EditorLogic.ShipFileImage, true);\u003Cbr\u003E\t\t\tuis.showcraftbrowser = true;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tif (uis.craftselected) {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022Selected Craft:\t\u0022 \u002B uis.craftnode.GetValue(\u0022ship\u0022), Styles.white);\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Resource requirements\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Resources required to build:\u0022, Styles.label, GUILayout.Width(600));\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Link LFO toggle\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.linklfosliders = GUILayout.Toggle(uis.linklfosliders, \u0022Link RocketFuel sliders for LiquidFuel and Oxidizer\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.resscroll = GUILayout.BeginScrollView(uis.resscroll, GUILayout.Width(600), GUILayout.Height(300));\u003Cbr\u003E\u003Cbr\u003E\t\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Headings\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Resource\u0022, Styles.label, GUILayout.Width(120));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Fill Percentage\u0022, Styles.label, GUILayout.Width(300));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Required\u0022, Styles.label, GUILayout.Width(75));\u003Cbr\u003E\t\t\tGUILayout.Label(\u0022Available\u0022, Styles.label, GUILayout.Width(75));\u003Cbr\u003E\t\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\u003Cbr\u003E\t\t\tuis.canbuildcraft = true;\t   // default to can build - if something is stopping us from building, we will set to false later\u003Cbr\u003E\u003Cbr\u003E\t\t\tif (!uis.requiredresources.ContainsKey(\u0022RocketParts\u0022)) {\u003Cbr\u003E\t\t\t\t// if the craft to be built has no rocket parts storage, then the amount to use is not adjustable\u003Cbr\u003E\t\t\t\tstring resname = \u0022RocketParts\u0022;\u003Cbr\u003E\t\t\t\tdouble available = padResources.ResourceAmount(resname);\u003Cbr\u003E\t\t\t\tResourceLine(resname, resname, 1.0F, uis.hullRocketParts, uis.hullRocketParts, available);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Cycle through required resources\u003Cbr\u003E\t\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in uis.requiredresources) {\u003Cbr\u003E\t\t\t\tstring resname = pair.Key;\t// Holds REAL resource name. May need to translate from \u0022JetFuel\u0022 back to \u0022LiquidFuel\u0022\u003Cbr\u003E\t\t\t\tstring reslabel = resname;\t // Resource name for DISPLAY purposes only. Internally the app uses pair.Key\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\t\tif (pair.Value == 0f) {\u003Cbr\u003E\t\t\t\t\t\t// Do not show JetFuel line if not being used\u003Cbr\u003E\t\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t\t//resname = \u0022JetFuel\u0022;\u003Cbr\u003E\t\t\t\t\tresname = \u0022LiquidFuel\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tif (!uis.resourcesliders.ContainsKey(pair.Key)) {\u003Cbr\u003E\t\t\t\t\tuis.resourcesliders.Add(pair.Key, 1);\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\t// If in link LFO sliders mode, rename Oxidizer to LFO (Oxidizer) and LiquidFuel to LFO (LiquidFuel)\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022Oxidizer\u0022) {\u003Cbr\u003E\t\t\t\t\treslabel = \u0022RocketFuel (Ox)\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tif (reslabel == \u0022LiquidFuel\u0022) {\u003Cbr\u003E\t\t\t\t\treslabel = \u0022RocketFuel (LF)\u0022;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tdouble minAmount = 0.0;\u003Cbr\u003E\t\t\t\tdouble maxAmount = uis.requiredresources[resname];\u003Cbr\u003E\t\t\t\tif (resname == \u0022RocketParts\u0022) {\u003Cbr\u003E\t\t\t\t\tminAmount \u002B= uis.hullRocketParts;\u003Cbr\u003E\t\t\t\t\tmaxAmount \u002B= uis.hullRocketParts;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tdouble available = padResources.ResourceAmount(resname);\u003Cbr\u003E\t\t\t\t// If LFO LiquidFuel exists and we are on LiquidFuel (Non-LFO), then subtract the amount used by LFO(LiquidFuel) from the available amount\u003Cbr\u003E\t\t\t\tif (pair.Key == \u0022JetFuel\u0022) {\u003Cbr\u003E\t\t\t\t\tavailable -= uis.requiredresources[\u0022LiquidFuel\u0022] * uis.resourcesliders[\u0022LiquidFuel\u0022];\u003Cbr\u003E\t\t\t\t\tif (available \u0026lt; 0.0)\u003Cbr\u003E\t\t\t\t\t\tavailable = 0.0;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tuis.resourcesliders[pair.Key] = ResourceLine(reslabel, pair.Key, uis.resourcesliders[pair.Key], minAmount, maxAmount, available);\u003Cbr\u003E\t\t\t\tif (uis.linklfosliders) {\u003Cbr\u003E\t\t\t\t\tfloat tmp = uis.resourcesliders[pair.Key];\u003Cbr\u003E\t\t\t\t\tif (pair.Key == \u0022Oxidizer\u0022) {\u003Cbr\u003E\t\t\t\t\t\tuis.resourcesliders[\u0022LiquidFuel\u0022] = tmp;\u003Cbr\u003E\t\t\t\t\t} else if (pair.Key == \u0022LiquidFuel\u0022) {\u003Cbr\u003E\t\t\t\t\t\tuis.resourcesliders[\u0022Oxidizer\u0022] = tmp;\u003Cbr\u003E\t\t\t\t\t}\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\tGUILayout.EndScrollView();\u003Cbr\u003E\u003Cbr\u003E\t\t\t// Build button\u003Cbr\u003E\t\t\tif (uis.canbuildcraft) {\u003Cbr\u003E\t\t\t\tif (GUILayout.Button(\u0022Build\u0022, Styles.normal, GUILayout.ExpandWidth(true))) {\u003Cbr\u003E\t\t\t\t\tBuildAndLaunchCraft();\u003Cbr\u003E\t\t\t\t\t// Reset the UI\u003Cbr\u003E\t\t\t\t\tuis.craftselected = false;\u003Cbr\u003E\t\t\t\t\tuis.requiredresources = null;\u003Cbr\u003E\t\t\t\t\tuis.resourcesliders = new Dictionary\u0026lt;string, float\u0026gt;();;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\t\t// Close the UI\u003Cbr\u003E\t\t\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\tGUILayout.Box(\u0022You do not have the resources to build this craft\u0022, Styles.red);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tGUILayout.Box(\u0022You must select a craft before you can build\u0022, Styles.red);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tGUILayout.EndVertical();\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.BeginHorizontal();\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tif (GUILayout.Button(\u0022Close\u0022)) {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tuis.showbuilduionload = GUILayout.Toggle(uis.showbuilduionload, \u0022Show on StartUp\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\tGUILayout.FlexibleSpace();\u003Cbr\u003E\t\tGUILayout.EndHorizontal();\u003Cbr\u003E\t\t//DragWindow makes the window draggable. The Rect specifies which part of the window it can by dragged by, and is\u003Cbr\u003E\t\t//clipped to the actual boundary of the window. You can also pass no argument at all and then the window can by\u003Cbr\u003E\t\t//dragged by any part of it. Make sure the DragWindow command is AFTER all your other GUI input stuff, or else\u003Cbr\u003E\t\t//it may \u0022cover up\u0022 your controls and make them stop responding to the mouse.\u003Cbr\u003E\t\tGUI.DragWindow(new Rect(0, 0, 10000, 20));\u003Cbr\u003E\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// called when the user selects a craft the craft browser\u003Cbr\u003E\tprivate void craftSelectComplete(string filename, string flagname)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tuis.showcraftbrowser = false;\u003Cbr\u003E\t\tuis.craftfile = filename;\u003Cbr\u003E\t\tuis.flagname = flagname;\u003Cbr\u003E\t\tuis.craftnode = ConfigNode.Load(filename);\u003Cbr\u003E\t\tConfigNode[] nodes = uis.craftnode.GetNodes(\u0022PART\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\t// Get list of resources required to build vessel\u003Cbr\u003E\t\tif ((uis.requiredresources = getBuildCost(nodes)) != null)\u003Cbr\u003E\t\t\tuis.craftselected = true;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// called when the user clicks cancel in the craft browser\u003Cbr\u003E\tprivate void craftSelectCancel()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tuis.showcraftbrowser = false;\u003Cbr\u003E\u003Cbr\u003E\t\tuis.requiredresources = null;\u003Cbr\u003E\t\tuis.craftselected = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Event Hooks\u003Cbr\u003E\t// See http://docs.unity3d.com/Documentation/Manual/ExecutionOrder.html for some help on what fires when\u003Cbr\u003E\u003Cbr\u003E\t// Called each time the GUI is painted\u003Cbr\u003E\tprivate void drawGUI()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tGUI.skin = HighLogic.Skin;\u003Cbr\u003E\t\tuis.windowpos = GUILayout.Window(1, uis.windowpos, WindowGUI, \u0022Extraplanetary Launchpad: \u0022\u002Bsituationdesc(uis.launcher.situation), GUILayout.Width(600));\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// Called ONCE at start\u003Cbr\u003E\tprivate void Start()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// If \u0022Show GUI on StartUp\u0022 ticked, show the GUI\u003Cbr\u003E\t\tif (uis.showbuilduionload) {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t// Fired maybe multiple times a frame, maybe once every n frames\u003Cbr\u003E\tpublic override void OnFixedUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// ToDo: Should not be checking this every frame - once per craft switch\u003Cbr\u003E\t\t// OnVesselChange may be ideal but I cannot seem to get it to fire\u003Cbr\u003E\t\t// Landed / Flying check should probably be with this code, but moved it elsewhere while this is firing so often\u003Cbr\u003E\u003Cbr\u003E        this.Update();\u003Cbr\u003E        Update();\u003Cbr\u003E\u003Cbr\u003E\t\t// Does the UI want to be visible?\u003Cbr\u003E\t\tif (uis.builduiactive) {\u003Cbr\u003E\t\t\t// Decide if the build menu is allowed to be visible\u003Cbr\u003E\t\t\tif (this.vessel == FlightGlobals.ActiveVessel) {\u003Cbr\u003E\t\t\t\t// Yes - check if it is currently not visible\u003Cbr\u003E\t\t\t\tif (!uis.builduivisible) {\u003Cbr\u003E\t\t\t\t\t// Going from invisible to visible\u003Cbr\u003E\t\t\t\t\tuis.builduivisible = true;\u003Cbr\u003E\t\t\t\t\tRenderingManager.AddToPostDrawQueue(3, new Callback(drawGUI)); //start the GUI\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\t// No - check if it is currently visible\u003Cbr\u003E\t\t\t\tif (uis.builduivisible) {\u003Cbr\u003E\t\t\t\t\t// Going from visible to invisible\u003Cbr\u003E\t\t\t\t\tuis.builduivisible = false;\u003Cbr\u003E\t\t\t\t\tRenderingManager.RemoveFromPostDrawQueue(3, new Callback(drawGUI)); //stop the GUI\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t/*\u003Cbr\u003E\t// Called when you change vessel\u003Cbr\u003E\t// ToDo: Cannot seem to get this code to fire...\u003Cbr\u003E\tprivate void OnVesselChange()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (this.vessel == FlightGlobals.ActiveVessel) {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\t*/\u003Cbr\u003E\u003Cbr\u003E\tpublic void Update()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (uis.timer \u0026lt; 1000.0f) {\u003Cbr\u003E\t\t\tuis.timer -= Time.deltaTime;\u003Cbr\u003E\t\t\tif (uis.timer \u0026lt;= 0) {\u003Cbr\u003E\t\t\t\tFixCraftLock();\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// Fired ONCE per frame\u003Cbr\u003E\tpublic override void OnUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// Update state of context buttons depending on state of UI\u003Cbr\u003E\t\t// ToDo: Move to something fired when the GUI is updated?\u003Cbr\u003E\t\tEvents[\u0022ShowBuildMenu\u0022].active = !uis.builduiactive;\u003Cbr\u003E\t\tEvents[\u0022HideBuildMenu\u0022].active = uis.builduiactive;\u003Cbr\u003E        this.Update();\u003Cbr\u003E        Update();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\t// Fired multiple times per frame in response to GUI events\u003Cbr\u003E\tprivate void OnGUI()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (uis.showcraftbrowser) {\u003Cbr\u003E\t\t\tuis.craftlist.OnGUI();\u003Cbr\u003E\t\t}\u003Cbr\u003E        this.Update();\u003Cbr\u003E        Update();\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\t/*\u003Cbr\u003E\t// ToDo: What Does this Do?\u003Cbr\u003E\tprivate void OnLoad()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tbases = FlightGlobals.fetch.vessels;\u003Cbr\u003E\t\tforeach (Vessel v in bases) {\u003Cbr\u003E\t\t\tprint(v.name);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\t*/\u003Cbr\u003E\u003Cbr\u003E\t// Fired when KSP saves\u003Cbr\u003E\tpublic override void OnSave(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;ExLaunchPad\u0026gt;();\u003Cbr\u003E\t\tconfig.SetValue(\u0022Window Position\u0022, uis.windowpos);\u003Cbr\u003E\t\tconfig.SetValue(\u0022Show Build Menu on StartUp\u0022, uis.showbuilduionload);\u003Cbr\u003E\t\tconfig.save();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\t// Fired when KSP loads\u003Cbr\u003E\tpublic override void OnLoad(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tkethane_present = CheckForKethane();\u003Cbr\u003E\t\tLoadConfigFile();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate void LoadConfigFile()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPluginConfiguration config = PluginConfiguration.CreateForType\u0026lt;ExLaunchPad\u0026gt;();\u003Cbr\u003E\t\tconfig.load();\u003Cbr\u003E\t\tuis.windowpos = config.GetValue\u0026lt;Rect\u0026gt;(\u0022Window Position\u0022);\u003Cbr\u003E\t\tuis.showbuilduionload = config.GetValue\u0026lt;bool\u0026gt;(\u0022Show Build Menu on StartUp\u0022);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Flight UI and Action Group Hooks\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Show Build Menu\u0022, active = true)]\u003Cbr\u003E\tpublic void ShowBuildMenu()\u003Cbr\u003E\t{\u003Cbr\u003E\t\t// Only allow enabling the menu if we are in a suitable place\u003Cbr\u003E        if (((this.vessel.situation == Vessel.Situations.LANDED) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.ORBITING) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.PRELAUNCH) ||\u003Cbr\u003E                (this.vessel.situation == Vessel.Situations.SPLASHED)))\u003Cbr\u003E        {\u003Cbr\u003E            uis.launcher = this.vessel;\u003Cbr\u003E            RenderingManager.AddToPostDrawQueue(3, new Callback(drawGUI)); //start the GUI\u003Cbr\u003E            uis.builduiactive = true;\u003Cbr\u003E        }\u003Cbr\u003E        else\u003Cbr\u003E        {\u003Cbr\u003E            PopupDialog.SpawnPopupDialog(\u0022Sorry\u0022, \u0022Can\u0027t build due to not being landed, splashed, or in a stable orbit\\n\\nCurrent state: \u0022 \u002B situationdesc(this.vessel.situation), \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E        }\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E    public String situationdesc(Vessel.Situations i)\u003Cbr\u003E    {\u003Cbr\u003Eswitch (i)\u003Cbr\u003E{\u003Cbr\u003E    case Vessel.Situations.DOCKED: return \u0022Docked\u0022;\u003Cbr\u003E    case Vessel.Situations.ESCAPING: return \u0022Escaping\u0022;\u003Cbr\u003E    case Vessel.Situations.FLYING: return \u0022Flying\u0022;\u003Cbr\u003E    case Vessel.Situations.LANDED: return \u0022Landed\u0022;\u003Cbr\u003E    case Vessel.Situations.ORBITING: return \u0022Orbiting\u0022;\u003Cbr\u003E    case Vessel.Situations.PRELAUNCH: return \u0022Prelaunch\u0022;\u003Cbr\u003E    case Vessel.Situations.SPLASHED: return \u0022Splashed\u0022;\u003Cbr\u003E    case Vessel.Situations.SUB_ORBITAL: return \u0022Suborbital\u0022;\u003Cbr\u003E}\u003Cbr\u003Ereturn \u0022Not sure\u0022;\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Hide Build Menu\u0022, active = false)]\u003Cbr\u003E\tpublic void HideBuildMenu()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tRenderingManager.RemoveFromPostDrawQueue(3, new Callback(drawGUI)); //stop the GUI\u003Cbr\u003E\t\tuis.builduiactive = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Show Build Menu\u0022)]\u003Cbr\u003E\tpublic void EnableBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tShowBuildMenu();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Hide Build Menu\u0022)]\u003Cbr\u003E\tpublic void DisableBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tHideBuildMenu();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPAction(\u0022Toggle Build Menu\u0022)]\u003Cbr\u003E\tpublic void ToggleBuildMenuAction(KSPActionParam param)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (uis.builduiactive) {\u003Cbr\u003E\t\t\tHideBuildMenu();\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tShowBuildMenu();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t// =====================================================================================================================================================\u003Cbr\u003E\t// Build Helper Functions\u003Cbr\u003E\u003Cbr\u003E\tprivate void MissingPopup(Dictionary\u0026lt;string, bool\u0026gt; missing_parts)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tstring text = \u0022\u0022;\u003Cbr\u003E\t\tforeach (string mp in missing_parts.Keys)\u003Cbr\u003E\t\t\ttext \u002B= mp \u002B \u0022\\n\u0022;\u003Cbr\u003E\t\tint ind = uis.craftfile.LastIndexOf(\u0022/\u0022) \u002B 1;\u003Cbr\u003E\t\tstring craft = uis.craftfile.Substring (ind);\u003Cbr\u003E\t\tcraft = craft.Remove (craft.LastIndexOf(\u0022.\u0022));\u003Cbr\u003E\t\tPopupDialog.SpawnPopupDialog(\u0022Sorry\u0022, \u0022Can\u0027t build \u0022 \u002B craft \u002B \u0022 due to the following missing parts\\n\\n\u0022 \u002B text, \u0022OK\u0022, false, HighLogic.Skin);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic Dictionary\u0026lt;string, double\u0026gt; getBuildCost(ConfigNode[] nodes)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfloat mass = 0.0f;\u003Cbr\u003E\t\tDictionary\u0026lt;string, double\u0026gt; resources = new Dictionary\u0026lt;string, double\u0026gt;();\u003Cbr\u003E\t\tDictionary\u0026lt;string, double\u0026gt; hull_resources = new Dictionary\u0026lt;string, double\u0026gt;();\u003Cbr\u003E\t\tDictionary\u0026lt;string, bool\u0026gt; missing_parts = new Dictionary\u0026lt;string, bool\u0026gt;();\u003Cbr\u003E\u003Cbr\u003E\t\tforeach (ConfigNode node in nodes) {\u003Cbr\u003E\t\t\tstring part_name = node.GetValue(\u0022part\u0022);\u003Cbr\u003E\t\t\tpart_name = part_name.Remove(part_name.LastIndexOf(\u0022_\u0022));\u003Cbr\u003E\t\t\tAvailablePart ap = PartLoader.getPartInfoByName(part_name);\u003Cbr\u003E\t\t\tif (ap == null) {\u003Cbr\u003E\t\t\t\tmissing_parts[part_name] = true;\u003Cbr\u003E\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tPart p = ap.partPrefab;\u003Cbr\u003E\t\t\tmass \u002B= p.mass;\u003Cbr\u003E\t\t\tforeach (PartResource r in p.Resources) {\u003Cbr\u003E\t\t\t\tif (r.resourceName == \u0022IntakeAir\u0022 || r.resourceName == \u0022KIntakeAir\u0022) {\u003Cbr\u003E\t\t\t\t\t// Ignore intake Air\u003Cbr\u003E\t\t\t\t\tcontinue;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tDictionary\u0026lt;string, double\u0026gt; res_dict = resources;\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\t\t\tres_def = PartResourceLibrary.Instance.GetDefinition(r.resourceName);\u003Cbr\u003E\t\t\t\tif (res_def.resourceTransferMode == ResourceTransferMode.NONE\u003Cbr\u003E\t\t\t\t\t|| res_def.resourceFlowMode == ResourceFlowMode.NO_FLOW) {\u003Cbr\u003E\t\t\t\t\tres_dict = hull_resources;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t\t\tif (!res_dict.ContainsKey(r.resourceName)) {\u003Cbr\u003E\t\t\t\t\tres_dict[r.resourceName] = 0.0;\u003Cbr\u003E\t\t\t\t}\u003Cbr\u003E\t\t\t\tres_dict[r.resourceName] \u002B= r.maxAmount;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (missing_parts.Count \u0026gt; 0) {\u003Cbr\u003E\t\t\tMissingPopup(missing_parts);\u003Cbr\u003E\t\t\treturn null;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t// RocketParts for the hull is a separate entity to RocketParts in\u003Cbr\u003E\t\t// storage containers\u003Cbr\u003E\t\tPartResourceDefinition rp_def;\u003Cbr\u003E\t\trp_def = PartResourceLibrary.Instance.GetDefinition(\u0022RocketParts\u0022);\u003Cbr\u003E\t\tuis.hullRocketParts = mass / rp_def.density;\u003Cbr\u003E\u003Cbr\u003E\t\t// If non pumpable resources are used, convert to RocketParts\u003Cbr\u003E\t\tforeach (KeyValuePair\u0026lt;string, double\u0026gt; pair in hull_resources) {\u003Cbr\u003E\t\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\t\tres_def = PartResourceLibrary.Instance.GetDefinition(pair.Key);\u003Cbr\u003E\t\t\tdouble hull_mass = pair.Value * res_def.density;\u003Cbr\u003E\t\t\tdouble hull_parts = hull_mass / rp_def.density;\u003Cbr\u003E\t\t\tuis.hullRocketParts \u002B= hull_parts;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\t// If there is JetFuel (ie LF only tanks as well as LFO tanks - eg a SpacePlane) then split the Surplus LF off as \u0022JetFuel\u0022\u003Cbr\u003E\t\tif (resources.ContainsKey(\u0022Oxidizer\u0022) \u0026amp;\u0026amp; resources.ContainsKey(\u0022LiquidFuel\u0022)) {\u003Cbr\u003E\t\t\tdouble jetFuel = 0.0;\u003Cbr\u003E\t\t\t// The LiquidFuel:Oxidizer ratio is 9:11. Try to minimize rounding effects.\u003Cbr\u003E\t\t\tjetFuel = (11 * resources[\u0022LiquidFuel\u0022] - 9 * resources[\u0022Oxidizer\u0022]) / 11;\u003Cbr\u003E\t\t\tif (jetFuel \u0026lt; 0.01)\t{\u003Cbr\u003E\t\t\t\t// Forget it. not getting far on that. Any discrepency this\u003Cbr\u003E\t\t\t\t// small will be due to precision losses.\u003Cbr\u003E\t\t\t\tjetFuel = 0.0;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tresources[\u0022LiquidFuel\u0022] -= jetFuel;\u003Cbr\u003E\t\t\tresources[\u0022JetFuel\u0022] = jetFuel;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\treturn resources;\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Epublic class Recycler : PartModule\u003Cbr\u003E{\u003Cbr\u003E\tdouble busyTime;\u003Cbr\u003E\tbool recyclerActive;\u003Cbr\u003E\t[KSPField] public float RecycleRate = 1.0f;\u003Cbr\u003E\t[KSPField (guiName = \u0022State\u0022, guiActive = true)] public string status;\u003Cbr\u003E\u003Cbr\u003E\tpublic void OnTriggerStay(Collider col)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!recyclerActive\u003Cbr\u003E\t\t\t|| Planetarium.GetUniversalTime() \u0026lt;= busyTime\u003Cbr\u003E\t\t\t|| !col.CompareTag(\u0022Untagged\u0022)\u003Cbr\u003E\t\t\t|| col.gameObject.name == \u0022MapOverlay collider\u0022)\t// kethane\u003Cbr\u003E\t\t\treturn;\u003Cbr\u003E\t\tPart p = col.attachedRigidbody.GetComponent\u0026lt;Part\u0026gt;();\u003Cbr\u003E\t\tDebug.Log(String.Format(\u0022[EL] {0}\u0022, p));\u003Cbr\u003E\t\tif (p != null \u0026amp;\u0026amp; p.vessel != null \u0026amp;\u0026amp; p.vessel != vessel) {\u003Cbr\u003E\t\t\tfloat mass;\u003Cbr\u003E\t\t\tif (p.vessel.isEVA) {\u003Cbr\u003E\t\t\t\tmass = RecycleKerbal(p.vessel);\u003Cbr\u003E\t\t\t} else {\u003Cbr\u003E\t\t\t\tmass = RecycleVessel(p.vessel);\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\tbusyTime = Planetarium.GetUniversalTime() \u002B mass / RecycleRate;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tprivate float ReclaimResource(string resource, double amount,\u003Cbr\u003E\t\t\t\t\t\t\t\t  string vessel_name, string name=null)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tPartResourceDefinition res_def;\u003Cbr\u003E\t\tres_def = PartResourceLibrary.Instance.GetDefinition(resource);\u003Cbr\u003E\t\tVesselResources recycler = new VesselResources(vessel);\u003Cbr\u003E\u003Cbr\u003E\t\tif (res_def == null) {\u003Cbr\u003E\t\t\treturn 0;\u003Cbr\u003E\t\t}\u003Cbr\u003E\u003Cbr\u003E\t\tif (name == null) {\u003Cbr\u003E\t\t\tname = resource;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tdouble remain = amount;\u003Cbr\u003E\t\t// any resources that can\u0027t be pumped or don\u0027t flow just \u0022evaporate\u0022\u003Cbr\u003E\t\t// FIXME: should this be a little smarter and convert certain such\u003Cbr\u003E\t\t// resources into rocket parts?\u003Cbr\u003E\t\tif (res_def.resourceTransferMode != ResourceTransferMode.NONE\u003Cbr\u003E\t\t\t\u0026amp;\u0026amp; res_def.resourceFlowMode != ResourceFlowMode.NO_FLOW) {\u003Cbr\u003E\t\t\tremain = recycler.TransferResource(resource, amount);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tDebug.Log(String.Format(\u0022[EL] {0}-{1}: {2} taken {3} reclaimed, {4} lost\u0022, vessel_name, name, amount, amount - remain, remain));\u003Cbr\u003E\t\treturn (float) (amount * res_def.density);\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic float RecycleKerbal(Vessel v)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!v.isEVA)\u003Cbr\u003E\t\t\treturn 0;\u003Cbr\u003E\u003Cbr\u003E\t\t// idea and numbers taken from Kethane\u003Cbr\u003E\t\tif (v.GetVesselCrew()[0].isBadass) {\u003Cbr\u003E\t\t\tv.rootPart.explosionPotential = 10000;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tFlightGlobals.ForceSetActiveVessel(this.vessel);\u003Cbr\u003E\t\tv.rootPart.explode();\u003Cbr\u003E\u003Cbr\u003E\t\tfloat mass = 0;\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022Kethane\u0022, 150, v.name);\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022Metal\u0022, 1, v.name);\u003Cbr\u003E\t\treturn mass;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic float RecycleVessel(Vessel v)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfloat ConversionEfficiency = 0.8f;\u003Cbr\u003E\t\tdouble amount;\u003Cbr\u003E\t\tVesselResources scrap = new VesselResources(v);\u003Cbr\u003E\u003Cbr\u003E\t\tPartResourceDefinition rp_def;\u003Cbr\u003E\t\trp_def = PartResourceLibrary.Instance.GetDefinition(\u0022RocketParts\u0022);\u003Cbr\u003E\u003Cbr\u003E\t\tfloat mass = 0;\u003Cbr\u003E\t\tforeach (string resource in scrap.resources.Keys) {\u003Cbr\u003E\t\t\tamount = scrap.ResourceAmount (resource);\u003Cbr\u003E\t\t\tmass \u002B= ReclaimResource(resource, amount, v.name);\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tfloat hull_mass = v.GetTotalMass();\u003Cbr\u003E\t\tamount = hull_mass * ConversionEfficiency / rp_def.density;\u003Cbr\u003E\t\tmass \u002B= ReclaimResource(\u0022RocketParts\u0022, amount, v.name, \u0022hull\u0022);\u003Cbr\u003E\t\tv.Die();\u003Cbr\u003E\t\treturn mass;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Activate Recycler\u0022, active = true)]\u003Cbr\u003E\tpublic void Activate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\trecyclerActive = true;\u003Cbr\u003E\t\tEvents[\u0022Activate\u0022].active = false;\u003Cbr\u003E\t\tEvents[\u0022Deactivate\u0022].active = true;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t[KSPEvent(guiActive = true, guiName = \u0022Deactivate Recycler\u0022,\u003Cbr\u003E\t active = false)]\u003Cbr\u003E\tpublic void Deactivate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\trecyclerActive = false;\u003Cbr\u003E\t\tEvents[\u0022Activate\u0022].active = true;\u003Cbr\u003E\t\tEvents[\u0022Deactivate\u0022].active = false;\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic override void OnLoad(ConfigNode node)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tDeactivate();\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tpublic override void OnUpdate()\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (Planetarium.GetUniversalTime() \u0026lt;= busyTime) {\u003Cbr\u003E\t\t\tstatus = \u0022Busy\u0022;\u003Cbr\u003E\t\t} else if (recyclerActive) {\u003Cbr\u003E\t\t\tstatus = \u0022Active\u0022;\u003Cbr\u003E\t\t} else {\u003Cbr\u003E\t\t\tstatus = \u0022Inactive\u0022;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"Patupi","CreatedById":71098,"CreatedDateTime":"2013-10-21T21:11:49Z","Content":"\n\u003Cp\u003EYou mean it may be possible to use the ship selection from EPL in OSY instead of launching and teleporting the ship to the shipyard? That would be very cool! It somehow feels wrong to have to launch from KSC first, then catapult the vessels to your yard. I know there isn\u0027t much technical difference in result (other than the wait for the physics shift jumping back and forth) but I definitely would prefer this method used in OSY.\u003C/p\u003E\n"},{"CreatedByName":"Spazmatism","CreatedById":88997,"CreatedDateTime":"2013-10-21T21:12:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022taniwha\u0022 data-cite=\u0022taniwha\u0022\u003E\u003Cdiv\u003EYes. You don\u0027t need it. If you don\u0027t have Kethane installed, it will (or should) auto-enable. If you do have Kethane installed, then why would you want it unless actually debugging?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan I still write it in with kethane installed? I want to keep kethane because I have some working ships using kethane that I don\u0027t want to despawn, and sometimes I play without cheating.\u003C/p\u003E\n"},{"CreatedByName":"Seawolf","CreatedById":89655,"CreatedDateTime":"2013-10-21T21:27:51Z","Content":"\n\u003Cp\u003EHi,\u003C/p\u003E\u003Cp\u003EThe center of mass and the center of thrust on the \u0022launch pad 2\u0022 seem to be misaligned. When I try to fly it using its own rockets, it leans forward and eventually starts spinning, which makes it uncontrollable. No other part was connected to it when this happened.\u003C/p\u003E\u003Cp\u003EI didn\u0027t see another post about the same issue, so I wasn\u0027t sure if this was a bug or some problem with my installation.\u003C/p\u003E\u003Cp\u003ECan you guys help me out? Thanks.\u003C/p\u003E\n"},{"CreatedByName":"BigOto2","CreatedById":58792,"CreatedDateTime":"2013-10-21T22:44:33Z","Content":"\n\u003Cp\u003ESounds like an issue with the pad itself not having enough control authority. But attaching reaction wheels doesn\u0027t work well because of another issue, that also makes it seem to me that the Launch Pad 2 is impossible to use...\u003C/p\u003E\u003Cp\u003EIt seems sensible to attach parts such as a docking port that would allow other modules to be connected, for example one with a Rocket Parts tank. But all of the parts move, and when I unfold it, none of the attached parts move with it. They just get weirdly suspended in the air where the attachment points used to be before the whole thing moved. So it\u0027s basically impossible to attach anything to it, which means transferring resources to it is also impossible without another addon for it.\u003C/p\u003E\u003Cp\u003EAm I overlooking something here?\u003C/p\u003E\n"},{"CreatedByName":"spiritplumber","CreatedById":84232,"CreatedDateTime":"2013-10-22T01:07:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Patupi\u0022 data-cite=\u0022Patupi\u0022\u003E\u003Cdiv\u003EYou mean it may be possible to use the ship selection from EPL in OSY instead of launching and teleporting the ship to the shipyard? That would be very cool! It somehow feels wrong to have to launch from KSC first, then catapult the vessels to your yard. I know there isn\u0027t much technical difference in result (other than the wait for the physics shift jumping back and forth) but I definitely would prefer this method used in OSY.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is the case. I am posting the modified dll. I am hoping skykooler will add this to the mod. It seems to work well. Replace the original dll with mine, and LaunchPadEx parts will function in orbit. However, there is a bug: you will have to \u0022switch to\u0022 another spacecraft before having control.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://emlia.org/ksp_shared/Launchpad.dll\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://emlia.org/ksp_shared/Launchpad.dll\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-22T05:35:14Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Spazmatism\u0022 data-cite=\u0022Spazmatism\u0022\u003E\u003Cdiv\u003ECan I still write it in with kethane installed? I want to keep kethane because I have some working ships using kethane that I don\u0027t want to despawn, and sometimes I play without cheating.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIndeed you can, for now anyway.\u003C/p\u003E\n"},{"CreatedByName":"KhaosCorp","CreatedById":61149,"CreatedDateTime":"2013-10-22T06:17:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BigOto2\u0022 data-cite=\u0022BigOto2\u0022\u003E\u003Cdiv\u003ESounds like an issue with the pad itself not having enough control authority. But attaching reaction wheels doesn\u0027t work well because of another issue, that also makes it seem to me that the Launch Pad 2 is impossible to use...\u003Cp\u003EIt seems sensible to attach parts such as a docking port that would allow other modules to be connected, for example one with a Rocket Parts tank. But all of the parts move, and when I unfold it, none of the attached parts move with it. They just get weirdly suspended in the air where the attachment points used to be before the whole thing moved. So it\u0027s basically impossible to attach anything to it, which means transferring resources to it is also impossible without another addon for it.\u003C/p\u003E\u003Cp\u003EAm I overlooking something here?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes you are =P\u003C/p\u003E\u003Cp\u003Euse a pancake tank as a base for LP2. OR just get KAS and land LP2 and then slap a pipe connector on it.\u003C/p\u003E\n"},{"CreatedByName":"Patupi","CreatedById":71098,"CreatedDateTime":"2013-10-22T08:35:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022spiritplumber\u0022 data-cite=\u0022spiritplumber\u0022\u003E\u003Cdiv\u003EThat is the case. I am posting the modified dll. I am hoping skykooler will add this to the mod. It seems to work well. Replace the original dll with mine, and LaunchPadEx parts will function in orbit. However, there is a bug: you will have to \u0022switch to\u0022 another spacecraft before having control.\u003Cp\u003E\u003Ca href=\u0022http://emlia.org/ksp_shared/Launchpad.dll\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://emlia.org/ksp_shared/Launchpad.dll\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs long as you can switch ships within physics distance (ie the to the shipyard and back with \u0027[\u0027, \u0027]\u0027 ) to get control then that should be fine. If it needs unloading and loading physics by switching out of the area and back it\u0027d be a pain with 0.21, 0.22\u0027s extra delays, but still workable.\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-22T09:30:11Z","Content":"\n\u003Cp\u003Espiriteplumber: I\u0027ve been looking at the code and I think the problem with switching is you copied a little too much from hyperedit: the spawned ship should already be active from when it is first created\u003C/p\u003E\n"},{"CreatedByName":"BigOto2","CreatedById":58792,"CreatedDateTime":"2013-10-22T16:34:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022KhaosCorp\u0022 data-cite=\u0022KhaosCorp\u0022\u003E\u003Cdiv\u003EYes you are =P\u003Cp\u003Euse a pancake tank as a base for LP2. OR just get KAS and land LP2 and then slap a pipe connector on it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks, a seemingly odd solution but it sounds like it would work. I think I\u0027ll just use KAS for now so it won\u0027t be oddly propped up on the ground. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Seawolf","CreatedById":89655,"CreatedDateTime":"2013-10-22T19:53:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Seawolf\u0022 data-cite=\u0022Seawolf\u0022\u003E\u003Cdiv\u003EHi,\u003Cp\u003EThe center of mass and the center of thrust on the \u0022launch pad 2\u0022 seem to be misaligned. When I try to fly it using its own rockets, it leans forward and eventually starts spinning, which makes it uncontrollable. No other part was connected to it when this happened.\u003C/p\u003E\u003Cp\u003EI didn\u0027t see another post about the same issue, so I wasn\u0027t sure if this was a bug or some problem with my installation.\u003C/p\u003E\u003Cp\u003ECan you guys help me out? Thanks.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo one has a solution for this?\u003C/p\u003E\n"},{"CreatedByName":"BigOto2","CreatedById":58792,"CreatedDateTime":"2013-10-23T00:29:14Z","Content":"\n\u003Cp\u003EWell, continuing off of Khaoscorp\u0027s idea, ASAS pancake on the bottom of the pad for better reaction wheel control?\u003C/p\u003E\n"},{"CreatedByName":"KhaosCorp","CreatedById":61149,"CreatedDateTime":"2013-10-23T00:34:11Z","Content":"\n\u003Cp\u003ELaunchPad2 was never really meant to \u0027fly\u0027 of its own power. The small engines it has can ASSIST in landing, OR are perfect for bunny-jumping the pad off of a more capable landing craft. A little bit of RCS or SAS and that more than fixes the tiny bit the CoM is offset. \u003C/p\u003E\u003Cp\u003EI have honestly had the best luck with landing the pad ontop of a more than capable lander, and then hopping the pad off...this method also leaves the lander to be recycled.\u003C/p\u003E\n"},{"CreatedByName":"Skyblue","CreatedById":88432,"CreatedDateTime":"2013-10-23T07:54:07Z","Content":"\n\u003Cp\u003Espiritplumber: Sorry if I\u0027m asking a noob question but editting code is a first for me. I unpacked the mod and looked for the ExLaunchPad.cs file in order to edit it according to your very interesting suggestion. I am unable to find a file called ExLaunchPad.cs. Can you help?\u003C/p\u003E\n"},{"CreatedByName":"skykooler","CreatedById":60459,"CreatedDateTime":"2013-10-23T10:24:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Skyblue\u0022 data-cite=\u0022Skyblue\u0022\u003E\u003Cdiv\u003Espiritplumber: Sorry if I\u0027m asking a noob question but editting code is a first for me. I unpacked the mod and looked for the ExLaunchPad.cs file in order to edit it according to your very interesting suggestion. I am unable to find a file called ExLaunchPad.cs. Can you help?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe source for the mod is not in the zip to save download size. You can find it on \u003Ca href=\u0022https://github.com/skykooler/Extraplanetary-Launchpads\u0022 rel=\u0022external nofollow\u0022\u003EGithub.\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"spiritplumber","CreatedById":84232,"CreatedDateTime":"2013-10-24T19:38:58Z","Content":"\n\u003Cp\u003EIf you do not wish to compile this yourself, I also linked a modified Launchpad.dll with the functionality. \u003Ca href=\u0022http://emlia.org/ksp_shared/Launchpad.dll\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://emlia.org/ksp_shared/Launchpad.dll\u003C/a\u003E I hope the creator of the mod is OK with this as a temporary solution.\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-10-24T23:52:20Z","Content":"\n\u003Cp\u003Espiritplumber: The only problem you really should be distributing the \u0022full\u0022\u003Csup\u003E*\u003C/sup\u003E source with your dll. (\u003Csup\u003E*\u003C/sup\u003E just the source to the plugin itself, probably no need to distribute the models too so long as you provide a link).\u003C/p\u003E\u003Cp\u003EI don\u0027t include the source or link to my github reporsitory because I send my changes to skykooler and he merges them into his tree, which is linked on the front page, pretty quickly, and even that is pushing things.\u003C/p\u003E\u003Cp\u003EOnce I get some time (I expect some this weekend), I\u0027ll integrate your patch into my tree (probably modified).\u003C/p\u003E\n"}]}