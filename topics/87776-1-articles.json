{"TopicId":87776,"ForumId":36,"TopicTitle":"Does anyone have experience with why Physics.RayCast sometimes passes through parts?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-18T16:19:39Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-18T16:19:39Z","Content":"\n\u003Cp\u003EUnity\u0027s Physics.RayCast() doesn\u0027t seem very reliable when it comes to aiming the ray at ship parts. It works fine for ground terrain or KSC buildings, but when aimed at ship parts it works intermitently. Note, this is NOT (I don\u0027t think) a problem with the layers because it hits the SAME part for one or two Update()\u0027s, then in the next update it passes right through it, then in the next Update() it hits it again, then a few updates later it starts passing through it again, and so on.\u003C/p\u003E\u003Cp\u003EThe problem seems more pronounced when the ship is in motion (I have a laser on the ship aiming at another part of the same ship to measure the distance between them as an Infernal Robotics part moves them farther apart, and when the ship takes off the erroneous \u0022penetrating\u0022 raycasts start happening more frequently than when it was on the ground.)\u003C/p\u003E\u003Cp\u003EI\u0027ve tried googling about it and it seems to be that people have trouble with Raycast hitting moving parts and it has something to do with the exact timing of when you call Physics.RayCast(). I find people claiming it\u0027s better if you put Physics.RayCast() calls in FixedUpdate() instead of Update(), but that seems like a drastic measure as FixedUpdate is a precious resource I should avoid using, and the rest of my logic about what to do with the raycast is too \u0022expensive\u0022 for FixedUpdate() and needs to stay in Update() so it\u0027s going to make the programming more complex if I putthe raycasts in FixedUpdate().\u003C/p\u003E\u003Cp\u003EDoes anyone have good experience with Physics.Raycast() hitting ship parts and know whether or not this claim is really true (that you need to put the raycasts in FixedUpdate() for them to work right?) That\u0027s a major undertaking to make that change for my mod and it would be horrible if I went through the work only to find its a red herring.\u003C/p\u003E\u003Cp\u003EUnity\u0027s own docs for RayCast never mention this, but given the state of Unity\u0027s documentation, the fact that it never mentions it is hardly conclusive.\u003C/p\u003E\n"},{"CreatedByName":"Nertea","CreatedById":83952,"CreatedDateTime":"2014-10-18T16:29:26Z","Content":"\n\u003Cp\u003EAlways raycast in FixedUpdate. You can\u0027t guarantee otherwise that the physics engine has updated correctly. If necessary, run your raycast in FixedUpdate and run your logic in Update.\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-10-18T16:29:58Z","Content":"\n\u003Cp\u003ETake this with a grain of salt as I have not actually run any tests of any sort, but I think you will have to move it to FixedUpdate.\u003C/p\u003E\u003Cp\u003EThe reasoning behind this is that anything to do with physics, in which I include Raycast, is supposed to happen on FixedUpdate as that is the \u0022physics frame\u0022 as opposed to the \u0022GUI overlay frame\u0022 that Update is. \u003C/p\u003E\u003Cp\u003ENow, I\u0027ve never been able to explicitly confirm this, but my take away from this is that outside of the FixedUpdate frame, the physics state of objects can not be guaranteed as you are between physics updates and there is no \u0022physics cache\u0022 that I am aware of that would provide a guaranteed return to a physics call run outside the FixedUpdate frame.\u003C/p\u003E\u003Cp\u003EI can\u0027t even think of a test that would reliably support this theory and I have only used RayCast once, but that was for terrain height and I specifically masked out the Parts layer so I would not get returns from Parts and so I had no chance of seeing this when I used it.\u003C/p\u003E\u003Cp\u003EThat\u0027s what I know for whatever value it has to you.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003Cp\u003Eedit: Heh, I got ninja\u0027d. Still, more information never hurts.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-18T17:15:24Z","Content":"\n\u003Cp\u003EOkay thanks for the replies. I\u0027ll start looking into how to make the change. One of the reasons it\u0027s ugly is that my logic currently is this to decide if the laser hits something:\u003C/p\u003E\u003Cp\u003EFIRST, try Physics.RayCast(). If that finds a hit on a terrain polygon or a ship part, then quit right there and return that, we\u0027re done.\u003C/p\u003E\u003Cp\u003ESECOND, if Physics.RayCast() failed to find a hit, there might still be a hit far away because planetary terrain that\u0027s far from the camera isn\u0027t really fully rendered into polygons. It\u0027s sort of \u0022holographic\u0022 in the sense that RayCasts pass through it. Therefore when Physics.RayCast() finds no hit, fall back on a numeric iterative solver algorithm that takes sample points along the ray to see when the ray first goes below the pqsController\u0027s reported terrain altitude for that spot, and where it does, iteratively narrow down with tighter and tighter sample points until the exact spot where it went underground is found.\u003C/p\u003E\u003Cp\u003EAs you can see that fallback algorithm in the second part is WAAAY too expensive to be doing inside FixedUpdate(). But the decision as to whether or not to do it depends on the result of the raycast in FixedUpdate. Since the ratio of number of FixedUpdate()\u0027s to Update()\u0027s is not 1:1, it may get slightly messy.\u003C/p\u003E\u003Cp\u003EDo I have a guarantee that Update() and FixedUpdate() share the same thread, meaning that my Update() method can\u0027t be interrupted partway through by my FixedUpdate() method, or visa versa? If so, that would make it easier because then I can just remember the state of the most recent RayCast from FixedUpdate() and just look at it in Update().\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-10-18T22:16:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EDo I have a guarantee that Update() and FixedUpdate() share the same thread, meaning that my Update() method can\u0027t be interrupted partway through by my FixedUpdate() method, or visa versa? If so, that would make it easier because then I can just remember the state of the most recent RayCast from FixedUpdate() and just look at it in Update().\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI can\u0027t answer your thread question directly, but I will confirm that I just remembered the state of the previous ray to transfer the result from FixedUpdate to Update. In my case all I was transferring was a float for the distance the ray hit but the same logic should work for the data you are also trying to transfer. (I just declared a variable at the class level outside of Update and FixedUpdate and they referenced the variable as needed to read/write it.)\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-19T05:11:39Z","Content":"\n\u003Cp\u003ESigh. Moving it to FixedUpdate didn\u0027t break anything but it didn\u0027t make it work either. It behaves exactly the same now.\u003C/p\u003E\n"},{"CreatedByName":"lo-fi","CreatedById":111099,"CreatedDateTime":"2014-10-19T12:49:21Z","Content":"\n\u003Cp\u003EI would look at the BD armoury source, it uses raycasting for the bullets, and actually states that they never pass through.\u003C/p\u003E\n"},{"CreatedByName":"BahamutoD","CreatedById":72433,"CreatedDateTime":"2014-10-19T17:45:29Z","Content":"\n\u003Cp\u003EWhile working on BDArmory, I ran into a few problems with moving objects. If an object is moving quickly, and you are trying to get it\u0027s position, sometimes you have to do something like\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Etarget.transform.position \u002B (target.rigidbody.velocity * Time.fixedDeltaTime)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you set up a LineRenderer to give you a visual of where your Raycast is going, you will see that the faster an object is moving, the further behind \u0022transform.position\u0022 is from the object. Adding its delta position over the last physics time step (velocity * fixeddeltatime) corrects for this error.\u003C/p\u003E\u003Cp\u003EIn some cases, the position is one timestep ahead of where the object actually is, and I would have to subtract the error. (Getting bullets to spawn at the tip of a barrel in BDArmory). This is less often the case though.\u003C/p\u003E\u003Cp\u003E-Edit: I just remembered that this was because the spawned object had a high velocity. You wouldn\u0027t have to worry about this in your situation.\u003C/p\u003E\u003Cp\u003EWhile working on CameraTools, I found that pointing something (a camera in that case) at a moving target in Update() results in alot of stuttering, and it had to be in FixedUpdate() with the aforementioned error compensation to get it to point directly at the target.\u003C/p\u003E\u003Cp\u003EI don\u0027t know if this is what your problem is, but I hope it helps.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-19T17:50:57Z\u0022 title=\u002210/19/2014 05:50  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 19, 2014\u003C/time\u003E by BahamutoD\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-22T05:15:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022BahamutoD\u0022 data-cite=\u0022BahamutoD\u0022\u003E\u003Cdiv\u003EWhile working on BDArmory, I ran into a few problems with moving objects. If an object is moving quickly, and you are trying to get it\u0027s position, sometimes you have to do something like\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Etarget.transform.position \u002B (target.rigidbody.velocity * Time.fixedDeltaTime)\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you set up a LineRenderer to give you a visual of where your Raycast is going, you will see that the faster an object is moving, the further behind \u0022transform.position\u0022 is from the object. Adding its delta position over the last physics time step (velocity * fixeddeltatime) corrects for this error.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBut how on earth do you know in software which of these situations you\u0027re in? I can tell visually by looking of course, but how does the code know whether or not it\u0027s the right situations to add the velocity offset or not? is there a cutoff speed where the effect becomes needed?\u003C/p\u003E\u003Cp\u003EI tried moving the logic into FixedUpdate and it was drawing the ray in the wrong spot, well offset from the position of the ship. When I have it in Update() it draws in the right spot, but passes through things. When I put it in FixedUpdate, it\u0027s not even drawn in the right spot.\u003C/p\u003E\n"},{"CreatedByName":"InfiniteDice","CreatedById":57451,"CreatedDateTime":"2014-10-22T07:32:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI\u0027ve tried googling about it and it seems to be that people have trouble with Raycast hitting moving parts and it has something to do with the exact timing of when you call Physics.RayCast(). I find people claiming it\u0027s better if you put Physics.RayCast() calls in FixedUpdate() instead of Update(), but that seems like a drastic measure as FixedUpdate is a precious resource I should avoid using, and the rest of my logic about what to do with the raycast is too \u0022expensive\u0022 for FixedUpdate() and needs to stay in Update() so it\u0027s going to make the programming more complex if I putthe raycasts in FixedUpdate().\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t think whatever you will be doing will impact the game that much honestly. Every bullet in skillful has a raycast that checks for missed collisions, and there can be literally hundreds at once. All my raycasts are in FixedUpdate and only things like keypresses are in Update.\u003C/p\u003E\u003Cp\u003EWith the raycasting issue. Not sure what it could be other than perhaps an issue with specific parts which use compound colliders instead of a solid convex mesh collider. But it\u0027s more likely from using the raycast in Update.\u003C/p\u003E\u003Cp\u003EPerhaps something is in the way of the raycast and it\u0027s not able to complete the journey to the target part. Are you logging all the hits so you can see what it\u0027s doing? There is also RaycastAll wherein you can save all raycast hits to an array. \u003C/p\u003E\u003Cp\u003E//The following code is not 100% correct I\u0027m sure there are typos!\u003C/p\u003E\u003Cp\u003Epublic RaycastHit[] allHits;\u003C/p\u003E\u003Cp\u003E//then the raycast\u003C/p\u003E\u003Cp\u003Efor (var i = 0; i \u0026lt; allHits.length; i\u002B\u002B) {for(int i = 0; i \u0026lt; allHits.Length; i\u002B\u002B)\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003Eif (Physics.RaycastAll(firedFromHere, rayDirection, allHits\u003Cem\u003E))\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E{\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Eif(allhits\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E.collider.gameobject.part != null)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E Debug.Log(allhits\u003C/em\u003E\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003E.part.name);\u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003E}\u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003E}\u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003EOr some such thing... at least then you know what you\u0027re hitting. You could even specify that it not look at hits from the part firing the raycast this way. Anyways I also hope this helps in some way, the only real way to do it is with lots of logging, trial and error, etc.\u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E\u003Cem\u003EGood luck! \u003C/em\u003E\u003C/em\u003E\u003C/em\u003E\u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-22T07:37:42Z\u0022 title=\u002210/22/2014 07:37  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 22, 2014\u003C/time\u003E by InfiniteDice\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-22T09:45:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022InfiniteDice\u0022 data-cite=\u0022InfiniteDice\u0022\u003E\u003Cdiv\u003EI don\u0027t think whatever you will be doing will impact the game that much honestly. Every bullet in skillful has a raycast that checks for missed collisions, and there can be literally hundreds at once. All my raycasts are in FixedUpdate and only things like keypresses are in Update.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes the drawing of the ray, if I\u0027m showing it visually with a red lineRenderer, have to also be in FixedUpdate? I think the problem may be that. When I raycast in FixedUpdate and then draw the result, the drawing is really far off, appearing about 20 meters ahead of the craft as it orbits, making it very hard to debug what I\u0027m looking at. But then again I\u0027m tying to raycast in FixedUpdate and then Draw in Update.\u003C/p\u003E\u003Cp\u003EI think I can do it but the logic is messy because of the fallback to a slow numeric algorithm when the terrain is too far away for raycasts to work (the game unloads the polygon colliders when the terrain is more than about 10-20 km away or so). What I\u0027m trying to do is basically this:\u003C/p\u003E\u003Cp\u003EMyRayCastWrapper( stuff );\u003C/p\u003E\u003Cp\u003EDrawRay();\u003C/p\u003E\u003Cp\u003EWhere MyRayCastWrapper( stuff ) is doing the following:\u003C/p\u003E\u003Cp\u003EStep 1 - Try Physics.Raycast to hit ground or ship objects near enough to have loaded colliders.\u003C/p\u003E\u003Cp\u003EStep 2 - If Step 1 returned false, then fall back to my own homebrewed numeric algorithm to find terrain hits with the distant planet surface by querying the pqsController.\u003C/p\u003E\u003Cp\u003EThe ugly part is that although Step 1 and the ray drawing may both be fast enough to put in FixedUpdate, there\u0027s that annoying Step 2 which really shouldn\u0027t be in FixedUpdate because it\u0027s computationally expensive, and yet it happens *between* Step 1 and the drawing of the ray. I could wait and draw the ray later but then it\u0027s being drawn in the wrong animation frame and thus in the wrong spot.\u003C/p\u003E\u003Cp\u003EI think it\u0027s doable but messy. I may have to disable the numeric solver, get the solution working for just raycast only, and then work out how to re-enable the numeric solver in the new way the code looks after that.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Efor (var i = 0; i \u0026lt; allHits.length; i\u002B\u002B) {for(int i = 0; i \u0026lt; allHits.Length; i\u002B\u002B)\u003Cbr\u003E{\u003Cbr\u003Eif (Physics.RaycastAll(firedFromHere, rayDirection, allHits[i]))\u003Cbr\u003E{\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat really looks like it\u0027s in the wrong order around. Are you sure I\u0027m supposed to be checking how many alllHits there were and THEN for each one of them be calling Raycast on them? Doesn\u0027t the raycast come first and allhits isn\u0027t even populated until it\u0027s been called?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-22T17:17:18Z","Content":"\n\u003Cp\u003EOkay this is really getting quite infuriating. (Dealing with the API, not you guys. You\u0027ve been very helpful but the game just isn\u0027t cooperating.)\u003C/p\u003E\u003Cp\u003ESee the screenshots below. The laserbeam keeps toggling between giving a hit of 1.78 meters intersecting the structuralBeam3, versus giving a hit of 3.32 meters intersecting the landingLeg1-2 that\u0027s beyond it. Every few updates it flips between these two answers.\u003C/p\u003E\u003Cp\u003EThe craft is sitting still on the ground. Not Moving. When the laser does miss the 1.78 hit and pass through to the 3.32 hit, I can see clearly the beam passing right through the middle of the closer object, incorrectly failing to detect the hit.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/xwH70OA.png\u0022 alt=\u0022xwH70OA.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/mIB8omX.png\u0022 alt=\u0022mIB8omX.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is the relevant code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Perform Unity\u0027s Physics.RayCast() check when the movement of all the objects is set in stone and they are not moving:\u003Cbr\u003E        /// Physics.RayCast() is unreliable when called from Update() because objects are moving their positions during their\u003Cbr\u003E        /// Update()\u0027s and you don\u0027t know when during the order of all that your own Update() will be getting called.  Therefore\u003Cbr\u003E        /// Physics.Raycast() has to be called during FixedUpdate.\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        public void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            // The location of origin is different in FixedUpdate than it is\u003Cbr\u003E            // in Update, so it has to be reset in both:\u003Cbr\u003E            origin = this.part.transform.TransformPoint( relLaserOrigin );\u003Cbr\u003E            pointing = this.part.transform.rotation * Vector3d.down;\u003Cbr\u003E\u003Cbr\u003E            mostRecentUnityRaycastSuccess = false;\u003Cbr\u003E\u003Cbr\u003E            if( hasPower \u0026amp;\u0026amp; Activated \u0026amp;\u0026amp; origin != null \u0026amp;\u0026amp; pointing != null)\u003Cbr\u003E            {\u003Cbr\u003E                RaycastHit[] hits = null;\u003Cbr\u003E                hits = Physics.RaycastAll( origin, pointing, MaxDistance, mask );\u003Cbr\u003E                Debug.Log(\u0022num hits = \u0022 \u002B hits.Length );\u003Cbr\u003E                if( hits.Length \u0026gt; 0 )\u003Cbr\u003E                {\u003Cbr\u003E                    mostRecentUnityRaycastSuccess = true;\u003Cbr\u003E                    float bestDist = Mathf.Infinity;\u003Cbr\u003E                    foreach( RaycastHit hit in hits )\u003Cbr\u003E                    {\u003Cbr\u003E                        Debug.Log(\u0022hit.distance = \u0022 \u002B hit.distance \u002B \u0022, bestDist = \u0022 \u002B bestDist);\u003Cbr\u003E                        if( hit.distance \u0026lt; bestDist )\u003Cbr\u003E                        {\u003Cbr\u003E                            Debug.Log(\u0022using new hit.\u0022);\u003Cbr\u003E                            bestDist = hit.distance;\u003Cbr\u003E                            mostRecentUnityRaycastResult = hit;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESee the Debug.Log statements? This is what they\u0027re showing in the log:\u003C/p\u003E\u003Cp\u003E(I\u0027ve removed all the verbose \u0022(Filename: ....)\u0022 lines to make the log clearer to read.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Enum hits = 3\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787935, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323033, bestDist = 3.787935\u003Cbr\u003Eusing new hit.\u003Cbr\u003Enum hits = 4\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787934, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 1.778339, bestDist = 3.787934\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323035, bestDist = 1.778339\u003Cbr\u003Enum hits = 4\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787933, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 1.778339, bestDist = 3.787933\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323039, bestDist = 1.778339\u003Cbr\u003Enum hits = 3\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787933, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt seems entirely outside my ability to control it - it just sometimes fails to include the structureBeam3 among the hits, even though I\u0027m not doing anything different. And it seems to randomly flip between finding it and not finding it based on who knows what. I\u0027m tempted to punt and just tell people \u0022sometimes it will fail to hit parts and there\u0027s nothing I can do about it.\u0022\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-22T17:21:38Z","Content":"\n\u003Cp\u003EOkay this is really getting quite infuriating. (Dealing with the API, not you guys. You\u0027ve been very helpful but the game just isn\u0027t cooperating.)\u003C/p\u003E\u003Cp\u003ESee the screenshots below. The laserbeam keeps toggling between giving a hit of 1.78 meters intersecting the structuralBeam3, versus giving a hit of 3.32 meters intersecting the landingLeg1-2 that\u0027s beyond it. Every few updates it flips between these two answers.\u003C/p\u003E\u003Cp\u003EThe craft is sitting still on the ground. Not Moving. When the laser does miss the 1.78 hit and pass through to the 3.32 hit, I can see clearly the beam passing right through the middle of the closer object, incorrectly failing to detect the hit.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/xwH70OA.png\u0022 alt=\u0022xwH70OA.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/mIB8omX.png\u0022 alt=\u0022mIB8omX.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EThis is the relevant code:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        /// \u0026lt;summary\u0026gt;\u003Cbr\u003E        /// Perform Unity\u0027s Physics.RayCast() check when the movement of all the objects is set in stone and they are not moving:\u003Cbr\u003E        /// Physics.RayCast() is unreliable when called from Update() because objects are moving their positions during their\u003Cbr\u003E        /// Update()\u0027s and you don\u0027t know when during the order of all that your own Update() will be getting called.  Therefore\u003Cbr\u003E        /// Physics.Raycast() has to be called during FixedUpdate.\u003Cbr\u003E        /// \u0026lt;/summary\u0026gt;\u003Cbr\u003E        public void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            // The location of origin is different in FixedUpdate than it is\u003Cbr\u003E            // in Update, so it has to be reset in both:\u003Cbr\u003E            origin = this.part.transform.TransformPoint( relLaserOrigin );\u003Cbr\u003E            pointing = this.part.transform.rotation * Vector3d.down;\u003Cbr\u003E\u003Cbr\u003E            mostRecentUnityRaycastSuccess = false;\u003Cbr\u003E\u003Cbr\u003E            if( hasPower \u0026amp;\u0026amp; Activated \u0026amp;\u0026amp; origin != null \u0026amp;\u0026amp; pointing != null)\u003Cbr\u003E            {\u003Cbr\u003E                RaycastHit[] hits = null;\u003Cbr\u003E                hits = Physics.RaycastAll( origin, pointing, MaxDistance, mask );\u003Cbr\u003E                Debug.Log(\u0022num hits = \u0022 \u002B hits.Length );\u003Cbr\u003E                if( hits.Length \u0026gt; 0 )\u003Cbr\u003E                {\u003Cbr\u003E                    mostRecentUnityRaycastSuccess = true;\u003Cbr\u003E                    float bestDist = Mathf.Infinity;\u003Cbr\u003E                    foreach( RaycastHit hit in hits )\u003Cbr\u003E                    {\u003Cbr\u003E                        Debug.Log(\u0022hit.distance = \u0022 \u002B hit.distance \u002B \u0022, bestDist = \u0022 \u002B bestDist);\u003Cbr\u003E                        if( hit.distance \u0026lt; bestDist )\u003Cbr\u003E                        {\u003Cbr\u003E                            Debug.Log(\u0022using new hit.\u0022);\u003Cbr\u003E                            bestDist = hit.distance;\u003Cbr\u003E                            mostRecentUnityRaycastResult = hit;\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESee the Debug.Log statements? This is what they\u0027re showing in the log:\u003C/p\u003E\u003Cp\u003E(I\u0027ve removed all the verbose \u0022(Filename: ....)\u0022 lines to make the log clearer to read.)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Enum hits = 3\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787935, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323033, bestDist = 3.787935\u003Cbr\u003Eusing new hit.\u003Cbr\u003Enum hits = 4\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787934, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 1.778339, bestDist = 3.787934\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323035, bestDist = 1.778339\u003Cbr\u003Enum hits = 4\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787933, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 1.778339, bestDist = 3.787933\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323039, bestDist = 1.778339\u003Cbr\u003Enum hits = 3\u003Cbr\u003Ehit.distance = 6.966611, bestDist = Infinity\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.787933, bestDist = 6.966611\u003Cbr\u003Eusing new hit.\u003Cbr\u003Ehit.distance = 3.323033, bestDist = 3.787935\u003Cbr\u003Eusing new hit.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt seems entirely outside my ability to control it - it just sometimes fails to include the structureBeam3 among the hits (returning a list of only 3 hits, not the correct 4 hits), even though I\u0027m not doing anything different in that particular update. And it seems to randomly flip between finding it and not finding it based on who knows what. I\u0027m tempted to punt and just tell people \u0022sometimes it will fail to hit parts and there\u0027s nothing I can do about it.\u0022\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-22T17:22:51Z\u0022 title=\u002210/22/2014 05:22  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 22, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003Cbr\u003Etail end of my output log was cut off.\n\u003C/span\u003E\n"},{"CreatedByName":"InfiniteDice","CreatedById":57451,"CreatedDateTime":"2014-10-22T22:25:36Z","Content":"\n\u003Cp\u003EDid you test this with other parts? Not all parts are created equal unfortunately. That could have a few collider boxes in the sides, and nothing where you are shooting the ray at. I\u0027m not saying that\u0027s what\u0027s happening but just to eliminate that possibility try doing the test on 4 totally different parts with different part shapes. \u003C/p\u003E\u003Cp\u003EAbout the code yes it\u0027s a$$ backwards I knew I\u0027d mess it up but I think you understood it anyways. And yes I\u0027d put all of it in FixedUpdate(), get your fps with and without your code running, I don\u0027t think you\u0027ll see much of a difference.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-23T04:08:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022InfiniteDice\u0022 data-cite=\u0022InfiniteDice\u0022\u003E\u003Cdiv\u003EDid you test this with other parts? Not all parts are created equal unfortunately. That could have a few collider boxes in the sides, and nothing where you are shooting the ray at. I\u0027m not saying that\u0027s what\u0027s happening but just to eliminate that possibility try doing the test on 4 totally different parts with different part shapes. \u003Cp\u003EAbout the code yes it\u0027s a$$ backwards I knew I\u0027d mess it up but I think you understood it anyways. And yes I\u0027d put all of it in FixedUpdate(), get your fps with and without your code running, I don\u0027t think you\u0027ll see much of a difference.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will if I include the fallback pqs technique in fixedupdate. If all I do is the raytracing it\u0027s fast enough in fixedupdate. If I run a recursive iterator that has to take about 500 loop iterations to get down to an answer within 2m of accurate because the only way to detect terrain hits at long distances is to test sample points along the ray, then it won\u0027t. I already know it\u0027s not even fast enough for plain ole Update(). I had to split the algorithm up across multiple updates, remembering state between them to get acceptable FPS. Note, that\u0027s even BEFORE I moved any of it to fixedupdate. The problem of finding the solution of the intercept of a ray with the pqs terrain is NOT a trivial calculation. It requires itrerative approximation.\u003C/p\u003E\u003Cp\u003EThat\u0027s why I have to have half the logic (the stuff using Physics.RayCast) in fixedUPate and the other half (the fallback to pqsCOllider) in Update().\u003C/p\u003E\u003Cp\u003EBut that\u0027s not even related to my problem. Even when dealing with JUST nearby objects using JUST Physics.RayCast in JUST FixedUpdate, Unity is returning inconsistent results where in one FixedUpdate it will hit the part and in the next one it will pass through it to the part behind it *even when nothing moved*.\u003C/p\u003E\u003Cp\u003EI suspect that what\u0027s happening is that because I get FixedUpates more frequently than Updates, that not all the movement and recalculation of all the KSP parts is finished between fixedUpdates. There is no guarantee that Unity gets its way through ALL the parts\u0027 Update()s before the next FixedUpdate. So some have moved and others haven\u0027t yet. That\u0027s my guess. \u003C/p\u003E\u003Cp\u003EAs to changing parts - again it\u0027s reliably inconsistent - any part has the effect that it tends to pass right through about 1/3 of the time in FixedUpdate.\u003C/p\u003E\u003Cp\u003EI\u0027ve tried falling back on an ugly amount of work to compensate for it - I only need the information up to date once per Update, not once per FixedUpdate - so I\u0027m trying to gather ALL the hits of ALL the fixed Updates that happened between Update()s, and then when the Update() runs, taking the nearest hit among ALL of them. that way as long as it hits the object on at least ONE of the FixedUpdates I don\u0027t care that it missed on others. It has to miss on all of them to be a real miss.\u003C/p\u003E\n"},{"CreatedByName":"InfiniteDice","CreatedById":57451,"CreatedDateTime":"2014-10-23T06:22:38Z","Content":"\n\u003Cp\u003ESeems like you know you\u0027re stuff. So if 1 in 3 is a fail, why not double up the rays and have 1 in 6 fail. What is an acceptable level of loss? I\u0027ve fired tons of rays and I don\u0027t see 1 in 3 misses even when the bullet is going 1200 m/s. Though if you are scanning something in orbit --\u0026gt; stationary the velocities could be much higher, at that point I can\u0027t attest as it is logical that it may be incapable of that accuracy.\u003C/p\u003E\u003Cp\u003EI do a raycast lookback on all my bullet rigidbodies, essentially the raycast looks at the step in motion between frames and sees if there was a missed collision. It seems reliable to me (again at up to 1200 - 1300 m/s - I don\u0027t require faster than that).\u003C/p\u003E\u003Cp\u003EVector3 movementThisStep = rb.position - previousPosition;\u003C/p\u003E\u003Cp\u003E float movementSqrMagnitude = movementThisStep.sqrMagnitude;\u003C/p\u003E\u003Cp\u003E if (movementSqrMagnitude \u0026gt; sqrMinimumExtent \u0026amp;\u0026amp; doDetectMiss == true)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E float movementMagnitude = Mathf.Sqrt(movementSqrMagnitude);\u003C/p\u003E\u003Cp\u003E RaycastHit hitInfo;\u003C/p\u003E\u003Cp\u003E if (Physics.Raycast(previousPosition, movementThisStep, out hitInfo, movementMagnitude, 1))\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E rb.position = hitInfo.point - movementThisStep / movementMagnitude * partialExtent;\u003C/p\u003E\u003Cp\u003E lastGoodHitInfo = hitInfo.point;\u003C/p\u003E\u003Cp\u003E //rb.position = hitInfo.point - (movementThisStep / movementMagnitude) * partialExtent;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003EYou\u0027re not tracking a physical position over time, you\u0027re doing an instantaneous ray. So I realize this might be useless, but it could trigger an idea for you...\u003C/p\u003E\u003Cp\u003EThere is also something here, about calling from Update but waiting for the FixedUpdate. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://forum.unity3d.com/threads/moving-colliders-and-raycasts.201740/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.unity3d.com/threads/moving-colliders-and-raycasts.201740/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAgain might not be relevant other than to perhaps trigger an idea.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-23T06:33:14Z\u0022 title=\u002210/23/2014 06:33  AM\u0022 data-short=\u00229 yr\u0022\u003EOctober 23, 2014\u003C/time\u003E by InfiniteDice\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-23T06:52:31Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022InfiniteDice\u0022 data-cite=\u0022InfiniteDice\u0022\u003E\u003Cdiv\u003ESeems like you know you\u0027re stuff. So if 1 in 3 is a fail, why not double up the rays and have 1 in 6 fail. What is an acceptable level of loss? I\u0027ve fired tons of rays and I don\u0027t see 1 in 3 misses even when the bullet is going 1200 m/s. Though if you are scanning something in orbit --\u0026gt; stationary the velocities could be much higher, at that point I can\u0027t attest as it is logical that it may be incapable of that accuracy.\u003Cp\u003EI do a raycast lookback on all my bullet rigidbodies, essentially the raycast looks at the step in motion between frames and sees if there was a missed collision. It seems reliable to me (again at up to 1200 - 1300 m/s - I don\u0027t require faster than that).\u003C/p\u003E\u003Cp\u003EVector3 movementThisStep = rb.position - previousPosition;\u003C/p\u003E\u003Cp\u003E float movementSqrMagnitude = movementThisStep.sqrMagnitude;\u003C/p\u003E\u003Cp\u003E if (movementSqrMagnitude \u0026gt; sqrMinimumExtent \u0026amp;\u0026amp; doDetectMiss == true)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E float movementMagnitude = Mathf.Sqrt(movementSqrMagnitude);\u003C/p\u003E\u003Cp\u003E RaycastHit hitInfo;\u003C/p\u003E\u003Cp\u003E if (Physics.Raycast(previousPosition, movementThisStep, out hitInfo, movementMagnitude, 1))\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E rb.position = hitInfo.point - movementThisStep / movementMagnitude * partialExtent;\u003C/p\u003E\u003Cp\u003E lastGoodHitInfo = hitInfo.point;\u003C/p\u003E\u003Cp\u003E //rb.position = hitInfo.point - (movementThisStep / movementMagnitude) * partialExtent;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003EYou\u0027re not tracking a physical position over time, you\u0027re doing an instantaneous ray. So I realize this might be useless, but it could trigger an idea for you...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHave you tried using the algorithm to just fire a bullet through just one thin part rather than through a ship made of multiple parts? It might be that as long as you hit one of the parts of the ship it\u0027s a success, whereas I need to hit the *correct* part of the ship to be a success. If I hit the fuel tank in the middle even though there was a panel part in front of it that I should have hit first, then that\u0027s a \u0022fail\u0022 by my criteria. For firing a bullet to hit a ship, hitting the tank instead of the panel would still look like a good success for your needs. I don\u0027t know. \u003C/p\u003E\u003Cp\u003EIt could also be a very ugly timing issue. It might be that it depends on how many Update()\u0027s happen versus how many FixedUpate()\u0027s happen, and computer speed changes whether or not a full suite of Update()s happen and finish on time before a FixedUpdate().\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThere is also something here, about calling from Update but waiting for the FixedUpdate. \u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://forum.unity3d.com/threads/moving-colliders-and-raycasts.201740/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.unity3d.com/threads/moving-colliders-and-raycasts.201740/\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAgain might not be relevant other than to perhaps trigger an idea.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI read that thread before on my previous googling. Sadly, some of the advice is about what order I should be updating the position of \u0022my\u0022 objects in, as if I was writing my own Unity game from scratch and had the privilege to do that. This isn\u0027t useful in the context of a KSP mod because I\u0027m not in charge of deciding when to update and draw the ship parts, SQUAD is in their proprietary code that I don\u0027t know how it was written. And the rest of the advice is quite different because it talks about drawing a raycast from the camera, which I\u0027m not doing.\u003C/p\u003E\u003Cp\u003ESadly I\u0027m suspecting that what\u0027s actually happening here is that SQUAD\u0027s own code is updating parts in such a way that it\u0027s not working right when trying to hit thin parts. \u003C/p\u003E\u003Cp\u003EIt might explain also why it is that the main game itself has such a hard time with right-clicking on parts working to bring up the menu. That user interface is ALSO dependant on raycasting and it also seems to fail about half the time when I try to click on parts. I have to keep re-trying until I get lucky enough to get it to work.\u003C/p\u003E\n"},{"CreatedByName":"InfiniteDice","CreatedById":57451,"CreatedDateTime":"2014-10-23T13:15:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EHave you tried using the algorithm to just fire a bullet through just one thin part rather than through a ship made of multiple parts? It might be that as long as you hit one of the parts of the ship it\u0027s a success, whereas I need to hit the *correct* part of the ship to be a success. If I hit the fuel tank in the middle even though there was a panel part in front of it that I should have hit first, then that\u0027s a \u0022fail\u0022 by my criteria. For firing a bullet to hit a ship, hitting the tank instead of the panel would still look like a good success for your needs. I don\u0027t know. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes I can hit small colliders 0.05 thickness at ~1200 m/s \u002B/- using that method. I don\u0027t really know your parameters and tolerances you need. ie: If I stack 4 panels on top of one another, I can kill them in order they are stacked top-down.\u003C/p\u003E\u003Cp\u003EI think you are already doing something like this... make a ray cast over consecutive fixedupdates, save the results of the raytrace only if it hits that part (if you know the part it\u0027s going for) if not, you\u0027d need to also save the (hitpart.name or hitpart.partname - can\u0027t remember which is unique) to cross reference later.\u003C/p\u003E\u003Cp\u003EAfter say 3 or 4 fixedupates then update/output the result. If there is no data on one of the scans, it either doesn\u0027t factor into the calculation or add the average of the remaining valid hit returns. Then average it again....\u003C/p\u003E\u003Cp\u003ESo on the click/activation, have the raytrace fire over 3 fixedupdates. This way given your 1 in 3 failure rate you should have at least one number to return.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-23T13:24:48Z\u0022 title=\u002210/23/2014 01:24  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 23, 2014\u003C/time\u003E by InfiniteDice\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-10-23T13:55:10Z","Content":"\n\u003Cp\u003EActually, while this is not a solution it will at least help you narrow it down.\u003C/p\u003E\u003Cp\u003EWithin the same FixedUpdate frame, fire the same ray 5 times. By that I mean fire 5 different rayCast objects, but use exactly the same values.\u003C/p\u003E\u003Cp\u003EWhen you get a miss result, do all 5 rays return a miss? The issue probably lies somewhere in the Parts and how KSP handles them.\u003C/p\u003E\u003Cp\u003EDo some rays return good and some return bad? The issue is in rayCast itself somewhere, or a timing issue of some sort.\u003C/p\u003E\u003Cp\u003ECan\u0027t test this myself as I\u0027m on my mobile but it would narrow down what the actual issue is.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"InfiniteDice","CreatedById":57451,"CreatedDateTime":"2014-10-23T14:43:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EActually, while this is not a solution it will at least help you narrow it down.\u003Cp\u003EWithin the same FixedUpdate frame, fire the same ray 5 times. By that I mean fire 5 different rayCast objects, but use exactly the same values.\u003C/p\u003E\u003Cp\u003EWhen you get a miss result, do all 5 rays return a miss? The issue probably lies somewhere in the Parts and how KSP handles them.\u003C/p\u003E\u003Cp\u003EDo some rays return good and some return bad? The issue is in rayCast itself somewhere, or a timing issue of some sort.\u003C/p\u003E\u003Cp\u003ECan\u0027t test this myself as I\u0027m on my mobile but it would narrow down what the actual issue is.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI think what he mentioned is that sometimes the position shift during update translates into an automatic miss with any raycast in the FixedUpdate. If that\u0027s the case it might not matter how many he uses in the same FixedUpdate. But he\u0027d be more suited to be the judge of that as he\u0027s the one knee deep \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-10-23T15:43:51Z","Content":"\n\u003Cp\u003EFrom my reading of the thread, it seems to be unclear what the cause of this issue is.\u003C/p\u003E\u003Cp\u003EI posted that because I believe that if all 5 rays cast in the same frame miss, that means KSP is doing something behind the scenes and so is nothing that we as modders can affect and so we are stuck with it.\u003C/p\u003E\u003Cp\u003EIf only some of the rays miss, that implies the issues lies in the raycast function or in the timing of Update/FixedUpdate and may be something we can affect. (Or may not, further testing required.)\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"Nertea","CreatedById":83952,"CreatedDateTime":"2014-10-23T16:58:15Z","Content":"\n\u003Cp\u003ESo here\u0027s some things to try:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EIs the behaviour the same with Physics.Raycast() as well as Physics.RaycastAll()? In the past I\u0027ve had issues with RaycastAll() in my own Unity projects.\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ETry using Physics.Spherecast() with an appropriate radius, which does what you\u0027d expect it to (raycast with a sphere instead of a point). It\u0027s more expensive, but it should get you an idea of what\u0027s going on. If you\u0027re thinking that there is positional jitter that is causing your error, using a Spherecast will help determine that - if it is hitting but the raycast isn\u0027t, there\u0027s a small jitter involved. If it\u0027s still not hitting\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EI don\u0027t know exactly how the methods you\u0027re using to get your laser aim start point and direction are working exactly, but it seems like a far easier way would be to place a transform in your model file (placed and oriented as your laser origin), get it via a standard method, and just use that transform\u0027s position and forward parameters to aim the beam. I\u0027m not sure why you\u0027re doing otherwise, but as you\u0027re raycasting within KSP\u0027s physics bubble against things inside the physics bubble, you shouldn\u0027t need to do much else. If all else fails, you should try this. \u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ERelated to point 3, how are you drawing your LineRenderer (I don\u0027t see it in your code)?\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-23T17:00:53Z\u0022 title=\u002210/23/2014 05:00  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 23, 2014\u003C/time\u003E by Nertea\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-23T18:32:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EFrom my reading of the thread, it seems to be unclear what the cause of this issue is.\u003Cp\u003EI posted that because I believe that if all 5 rays cast in the same frame miss, that means KSP is doing something behind the scenes and so is nothing that we as modders can affect and so we are stuck with it.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESadly, the problem is that you\u0027re half right but not 100% right. I get much better results by taking the best hit of all the FixedUpdate raycasts that happen between Update()s, but sadly not 100% perfect results. It still occasionally takes more FixedUpdate()\u0027s to find the hit than are happening between Update()s. And it\u0027s not a fixed number of fixedUpdates. Sometimes 2 FixedUpdates is enough to guarantee finding a hit among them. Sometimes it occasionally takes 3 or 4 to get to one where there\u0027s a hit. When I say it fails about 1/3 of the time I don\u0027t mean that it\u0027s perfectly interleaved, as in success, success, failure, success, success, failure, success, success, failure. Sometimes it\u0027s more like this:\u003C/p\u003E\u003Cp\u003Esuccess, success, success, success, success, failure, success, failure, success, success, success, failure, failure, failure, success, success, success, success. I..e an *average* of 2/3 success, but not nicely interleaved as 2 success, 1 fail, 2 success, 1 fail. During the bits where there\u0027s multiple failures in a row, I end up still returning a failure overall to the Update() because none of the FixedUpates() that occurred in that chunk found the hit.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-10-23T18:36:44Z\u0022 title=\u002210/23/2014 06:36  PM\u0022 data-short=\u00229 yr\u0022\u003EOctober 23, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-23T18:44:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Nertea\u0022 data-cite=\u0022Nertea\u0022\u003E\u003Cdiv\u003ESo here\u0027s some things to try:\u003Cp\u003E[*]Is the behaviour the same with Physics.Raycast() as well as Physics.RaycastAll()? In the past I\u0027ve had issues with RaycastAll() in my own Unity projects.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eyes. I was using Physics.RayCast() first and then changed to using Physics.RaycastAll() later to see if it would help. Both had the same problem.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E[*]Try using Physics.Spherecast() with an appropriate radius, which does what you\u0027d expect it to (raycast with a sphere instead of a point). It\u0027s more expensive, but it should get you an idea of what\u0027s going on. If you\u0027re thinking that there is positional jitter that is causing your error, using a Spherecast will help determine that - if it is hitting but the raycast isn\u0027t, there\u0027s a small jitter involved. If it\u0027s still not hitting\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis isn\u0027t workable in this case because I don\u0027t hardcode which part I\u0027m trying to aim at. Its \u0022return the hit on whichever part you hit that\u0027s nearest\u0022.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E[*]I don\u0027t know exactly how the methods you\u0027re using to get your laser aim start point and direction are working exactly, but it seems like a far easier way would be to place a transform in your model file (placed and oriented as your laser origin), get it via a standard method, and just use that transform\u0027s position and forward parameters to aim the beam. I\u0027m not sure why you\u0027re doing otherwise, but as you\u0027re raycasting within KSP\u0027s physics bubble against things inside the physics bubble, you shouldn\u0027t need to do much else. If all else fails, you should try this. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s what this is:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E            origin = this.part.transform.TransformPoint( relLaserOrigin );\u003Cbr\u003E            pointing = this.part.transform.rotation * Vector3d.down;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E[*]Related to point 3, how are you drawing your LineRenderer (I don\u0027t see it in your code)?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s done during Update(), using a recalculation of origin and pointing (since the location of things can be different during Update()), but capping the distance of the line at whatever the distance result of the raycasts in FixedUpdate were. So FixedUpdate is picking the distance of the hit, then Update() is drawing using that distance. I don\u0027t think that will make much difference but I could move the drawing code to fixedupdate too. The problem isn\u0027t the drawing, but the calculation of the distance is missing the hit entirely.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-10-23T18:49:03Z","Content":"\n\u003Cp\u003EAlso, one thing I\u0027m suspicious of is that despite the fact that everyone in the Unity user community says to perform the raycasts in FixedUpdate(), Unity\u0027s OWN online documentation examples always show it being done in Update(). Granted Unity\u0027s documentation is horrible so it could be wrong, but it does make me suspicious.\u003C/p\u003E\u003Cp\u003ESee this: \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Physics.Raycast.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://docs.unity3d.com/ScriptReference/Physics.Raycast.html\u003C/a\u003E\u003C/p\u003E\n"}]}