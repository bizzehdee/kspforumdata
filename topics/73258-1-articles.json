{"TopicId":73258,"ForumId":44,"TopicTitle":"Some orbital calculations...","CreatedByName":"ABanimationLtd","CreatedById":111691,"CreatedDateTime":"2014-05-24T15:15:51Z","PageNum":1,"Articles":[{"CreatedByName":"ABanimationLtd","CreatedById":111691,"CreatedDateTime":"2014-05-24T15:15:51Z","Content":"\n\u003Cp\u003ESo I\u0027m working on a programming project which involves simulating some 2D orbital mechanics. I\u0027ve got everything set up running smoothly for a stable orbit, but now I\u0027d like to be able to change the orbital velocity at any point and for the program to calculate what would then happen to the apoapsis, periapsis, semi-major axis and so on. So let\u0027s say I\u0027m orbiting at 2000m/s, and I accelerate to 2100m/s, what would I need to do to find out what my new apoapsis and periapsis are? I\u0027m assuming I\u0027ll need the theta angle, and I can calculate that quite easily already. Any equation(s) I should try using?\u003C/p\u003E\n"},{"CreatedByName":"christok","CreatedById":93810,"CreatedDateTime":"2014-05-24T15:38:30Z","Content":"\n\u003Cp\u003ETaken from J.R. Wertz, \u003Cem\u003EOrbit \u0026amp; constellation design \u0026amp; management\u003C/em\u003E. 2001. Microcosm. ISBN 978-1-881883-07-8. pp. 107-108:\u003C/p\u003E\u003Cp\u003ELet \u003Cstrong\u003Er\u003C/strong\u003E be the position vector and \u003Cstrong\u003EV\u003C/strong\u003E the velocity vector (centred on the planet). (r = |\u003Cstrong\u003Er\u003C/strong\u003E| and V = |\u003Cstrong\u003EV\u003C/strong\u003E| denote their magnitudes.) \u003Cstrong\u003Ez\u003C/strong\u003E is the unit vector normal to the equatorial plane. mu denotes the gravitational parameter, G * M, of the central body.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Eh\u003C/strong\u003E = \u003Cstrong\u003Er\u003C/strong\u003E \u00C3\u0192\u00E2\u20AC\u201D \u003Cstrong\u003EV\u003C/strong\u003E is the angular momentum vector.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EN\u003C/strong\u003E = \u003Cstrong\u003Ez\u003C/strong\u003E \u00C3\u0192\u00E2\u20AC\u201D \u003Cstrong\u003Eh\u003C/strong\u003E/h is the vector to the ascending node.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003Ee\u003C/strong\u003E = \u003Cstrong\u003EV\u003C/strong\u003E \u00C3\u0192\u00E2\u20AC\u201D \u003Cstrong\u003Eh\u003C/strong\u003E / mu - \u003Cstrong\u003Er\u003C/strong\u003E/r is the excentricity vector (it points towards periapsis).\u003C/p\u003E\u003Cp\u003EE - (V^2)/2 - mu/r is the orbital energy.\u003C/p\u003E\u003Cp\u003Ea = - mu/(2E) = (2/r - (V^2)/mu)^-1 is the semimajor axis.\u003C/p\u003E\u003Cp\u003Ep = |\u003Cstrong\u003Eh\u003C/strong\u003E|^2 / mu is the semi-parameter, if the orbit is a hyperbola instead of an ellipse.\u003C/p\u003E\u003Cp\u003Ee = |\u003Cstrong\u003Ee\u003C/strong\u003E| is the eccentricity.\u003C/p\u003E\n"},{"CreatedByName":"ABanimationLtd","CreatedById":111691,"CreatedDateTime":"2014-05-24T16:06:06Z","Content":"\n\u003Cp\u003EThis doesn\u0027t really make much sense to me. To clarify: I start with my apoapsis, periapsis, distance and mu values; from there I find the semi-major axis, orbital velocity, orbital energy, theta, and radial velocity, which then increments the total distance. When it reaches apoapsis, a boolean changes from true to false so that its movement reverses, and the opposite occurs at periapsis. I\u0027m not actually simulating any kind of 2D space or vectors. The only indicator of where I am in the orbit is theta. So, I need a way of doing this without vectors. If I\u0027m missing something really obvious and am being really stupid, please explain to me what I should be doing \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"christok","CreatedById":93810,"CreatedDateTime":"2014-05-24T18:50:02Z","Content":"\n\u003Cp\u003EJust pick a coordinate system and write out the vector operations in terms of their components under that system. \u003Cstrong\u003Er\u003C/strong\u003E will, for example, be the unit vector in the direction theta times the current altitude. NB: The equations I gave are three-dimensional. The cross product should have clued you in. It is undefined for all other cases*. Some numbers will vanish when you work it out.\u003C/p\u003E\u003Cp\u003EIf the real problem is that you don\u0027t understand vectors, feel free to ask. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E I could be wrong but your method of calculation sounds a little strange.\u003C/p\u003E\u003Cp\u003E*There are generalisations but they\u0027re not the \u0022real\u0022 cross product.\u003C/p\u003E\n"},{"CreatedByName":"ABanimationLtd","CreatedById":111691,"CreatedDateTime":"2014-05-24T19:32:04Z","Content":"\n\u003Cp\u003EIndeed, I am not overly familiar with vectors, at least not to the level of complexity that\u0027s being used here. I suppose the problem comes with bridging the gap between physics and computing, and translating some of these equations into computer code. This is why I\u0027m not simulating 2D space - the last time I tried that, most of even the most basic equations stopped working, like v = sqrt(GM(2/r - 1/a)). Still not entirely sure why.\u003C/p\u003E\u003Cp\u003EHowever, I could try using actual 2D space with a co-ordinate system again if you think it\u0027ll work, since I have the code for it stored elsewhere. I could then start using vectors properly, but yes, a lot of it would need explaining in simpler terms. I believe a lot of my problems came from the fact that I was simulating the actual force of gravity on my object and just letting it go from there - leaving me with no way of accurately figuring out the apoapsis, periapsis, period and so on. So, I would rather avoid using 2D space and vectors if possible but if there is no other way I should be able to get it set up.\u003C/p\u003E\n"},{"CreatedByName":"christok","CreatedById":93810,"CreatedDateTime":"2014-05-26T16:02:27Z","Content":"\n\u003Cp\u003EThat\u0027s understandable.\u003C/p\u003E\u003Cp\u003EWorking in Euclidean coordinates and setting V_z = r_z = 0, we have:\u003C/p\u003E\u003Cp\u003Ee_x = 1/mu * V_y * (r_x * V_y - r_y * V_x) - r_x / r\u003C/p\u003E\u003Cp\u003Ee_y = 1/mu * V_x * (r_x * V_y - r_y * V_x) - r_y/r\u003C/p\u003E\u003Cp\u003Ewhere r_x and r_y are the positions in the x and y directions respectively, V_x and V_y the respective velocities and r = sqrt(r_x^2 \u002B r_y^2) is the magnitude of the position vector.\u003C/p\u003E\u003Cp\u003EThe eccentricity e = sqrt(e_x^2 \u002B e_y^2)\u003C/p\u003E\u003Cp\u003Ea = 1/(2/r - V^2 / mu) is the magnitude of the semimajor axis.\u003C/p\u003E\u003Cp\u003Ec = e * a is half the interfocal distance.\u003C/p\u003E\u003Cp\u003EThe distance (from the centre of the large body) to the periapsis is (a - c)\u003C/p\u003E\u003Cp\u003EPeriapsis lies in the direction of vector e, that is, x-coordinate e_x / e * (a-c) and y-coordinate e_y/e * (a-c)\u003C/p\u003E\u003Cp\u003EYou can transform this into polar coordinates if you want (which is probably better anyway).\u003C/p\u003E\n"}]}