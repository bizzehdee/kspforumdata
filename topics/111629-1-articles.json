{"TopicId":111629,"ForumId":29,"TopicTitle":"Change wing lift dependant on animation (solved, thank you)","CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T15:28:01Z","PageNum":1,"Articles":[{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T15:28:01Z","Content":"I have an animated wing that deploys itself, but I have come across the unfortunate issue where stock KSP will only register the wings lift values from its initial position, meaning that when the wings are folded and stowed away, they still behave as though they\u0027re fully deployed.\n\nI figure that one way around this is to link the lift values to the animation of the object (so in short, something like Lift = Frame \\* x).\n\nI had to borrow from other plugins to figure out what I need, and I think I am very close to getting this working, but right now its just not doing anything.\n\nThis is what I have so far:\n\n\u003E \n\u003E using UnityEngine;\n\u003E namespace Animate2Variable\n\u003E \n\u003E {\n\u003E \n\u003E  public class AnimatedWing : PartModule\n\u003E \n\u003E  { \n\u003E \n\u003E  [KSPField(guiActive = true, guiActiveEditor = false, \n\u003E \n\u003E  guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\n\u003E \n\u003E  public float deflectionLiftCoeff;\n\u003E \n\u003E  public void FixedUpdate()\n\u003E \n\u003E  {\n\u003E \n\u003E  if (part.Modules.Contains(\u0022ModuleControlSurface\u0022))\n\u003E \n\u003E  {\n\u003E \n\u003E  deflectionLiftCoeff = animation[\u0022Deploy\u0022].time ;\n\u003E \n\u003E  ((ModuleLiftingSurface)part.Modules[\u0022ModuleControlSurface\u0022]).deflectionLiftCoeff = deflectionLiftCoeff;\n\u003E \n\u003E  }\n\u003E \n\u003E  }\n\u003E \n\u003E  }\n\u003E \n\u003E }\n\n**Edited \u003Ctime datetime=\u00222015-06-01T17:12:32Z\u0022 title=\u002206/01/2015 05:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 1, 2015\u003C/time\u003E by electronicfox**"},{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T20:51:32Z","Content":"Ok I got this far, but now my anim(Anim).normalizedTime throws up \u0027is a \u0027field\u0027 but is used like a \u0027method\u0027.\n\n\u003E \n\u003E namespace Animate2Variable\n\u003E {\n\u003E \n\u003E  public class AnimatedWing : PartModule\n\u003E \n\u003E  { \n\u003E \n\u003E  public Animation anim;\n\u003E \n\u003E  [KSPField(isPersistant = false)]\n\u003E \n\u003E  public string Anim = \u0022\u0022;\n\u003E \n\u003E  [KSPField(isPersistant = false)]\n\u003E \n\u003E  public float LiftMultiply = 0;\n\u003E \n\u003E  [KSPField(guiActive = true, guiActiveEditor = false, \n\u003E \n\u003E  guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\n\u003E \n\u003E  public float deflectionLiftCoeff;\n\u003E \n\u003E  public void FixedUpdate()\n\u003E \n\u003E  {\n\u003E \n\u003E  anim = part.FindModelAnimators(Anim)[0];\n\u003E \n\u003E  if (part.Modules.Contains(\u0022ModuleControlSurface\u0022))\n\u003E \n\u003E  { \n\u003E \n\u003E  deflectionLiftCoeff = anim(Anim).normalizedTime;\n\u003E \n\u003E  ((ModuleControlSurface)part.Modules[\u0022ModuleControlSurface\u0022]).deflectionLiftCoeff = deflectionLiftCoeff;\n\u003E \n\u003E  }\n\u003E \n\u003E  }\n\u003E \n\u003E  }\n\u003E \n\u003E  }"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-06-01T22:34:55Z","Content":"Because () are not [].\n\ndeflectionLiftCoeff = anim[Anim].normalizedTime;\n\nHere is a cleaned up version. Of course you ll have to do more than just setting the current value of the anim time but I guess you already know that.\n\n    using UnityEngine;namespace Animate2Variable{    public class AnimatedWing : PartModule    {        [KSPField(isPersistant = false)]        public string animationName = \u0022\u0022;        [KSPField(isPersistant = false)]        public float LiftMultiply = 0;        [KSPField(guiActive = true, guiActiveEditor = false,guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]        public float deflectionLiftCoeff;        private ModuleControlSurface liftingSurface;        private Animation anim;        public override void OnStart(PartModule.StartState state)        {            anim = part.FindModelAnimators(animationName)[0];            liftingSurface = part.FindModuleImplementing();        }        public void FixedUpdate()        {            if (anim == null || liftingSurface == null)                return;            deflectionLiftCoeff = anim[animationName].normalizedTime;            liftingSurface.deflectionLiftCoeff = deflectionLiftCoeff;        }    }}"},{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T22:52:34Z","Content":"\u003E \n\u003E Because () are not [].\n\u003E deflectionLiftCoeff = anim[Anim].normalizedTime;\n\u003E \n\u003E Here is a cleaned up version. Of course you ll have to do more than just setting the current value of the anim time but I guess you already know that.\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \n\u003E     using UnityEngine;namespace Animate2Variable{    public class AnimatedWing : PartModule    {        [KSPField(isPersistant = false)]        public string animationName = \u0022\u0022;        [KSPField(isPersistant = false)]        public float LiftMultiply = 0;        [KSPField(guiActive = true, guiActiveEditor = false,guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]        public float deflectionLiftCoeff;        private ModuleControlSurface liftingSurface;        private Animation anim;        public override void OnStart(PartModule.StartState state)        {            anim = part.FindModelAnimators(animationName)[0];            liftingSurface = part.FindModuleImplementing();        }        public void FixedUpdate()        {            if (anim == null || liftingSurface == null)                return;            deflectionLiftCoeff = anim[animationName].normalizedTime;            liftingSurface.deflectionLiftCoeff = deflectionLiftCoeff;        }    }}\n\nThank you! I knew it would be something really simple.\n\nI already have another value editable in the cfg that will shrink down the animation time value to a reasonable amount for the final draft of this code."}]}