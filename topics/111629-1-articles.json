{"TopicId":111629,"ForumId":29,"TopicTitle":"Change wing lift dependant on animation (solved, thank you)","CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T15:28:01Z","PageNum":1,"Articles":[{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T15:28:01Z","Content":"\n\u003Cp\u003EI have an animated wing that deploys itself, but I have come across the unfortunate issue where stock KSP will only register the wings lift values from its initial position, meaning that when the wings are folded and stowed away, they still behave as though they\u0027re fully deployed.\u003C/p\u003E\u003Cp\u003EI figure that one way around this is to link the lift values to the animation of the object (so in short, something like Lift = Frame * x).\u003C/p\u003E\u003Cp\u003EI had to borrow from other plugins to figure out what I need, and I think I am very close to getting this working, but right now its just not doing anything.\u003C/p\u003E\u003Cp\u003EThis is what I have so far:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Eusing UnityEngine;\u003Cp\u003Enamespace Animate2Variable\u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public class AnimatedWing : PartModule\u003C/p\u003E\u003Cp\u003E { \u003C/p\u003E\u003Cp\u003E [KSPField(guiActive = true, guiActiveEditor = false, \u003C/p\u003E\u003Cp\u003E guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\u003C/p\u003E\u003Cp\u003E public float deflectionLiftCoeff;\u003C/p\u003E\u003Cp\u003E public void FixedUpdate()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E if (part.Modules.Contains(\u0022ModuleControlSurface\u0022))\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E deflectionLiftCoeff = animation[\u0022Deploy\u0022].time ;\u003C/p\u003E\u003Cp\u003E ((ModuleLiftingSurface)part.Modules[\u0022ModuleControlSurface\u0022]).deflectionLiftCoeff = deflectionLiftCoeff;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-01T17:12:32Z\u0022 title=\u002206/01/2015 05:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 1, 2015\u003C/time\u003E by electronicfox\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T20:51:32Z","Content":"\n\u003Cp\u003EOk I got this far, but now my anim(Anim).normalizedTime throws up \u0027is a \u0027field\u0027 but is used like a \u0027method\u0027.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003Enamespace Animate2Variable\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003E public class AnimatedWing : PartModule\u003C/p\u003E\u003Cp\u003E { \u003C/p\u003E\u003Cp\u003E public Animation anim;\u003C/p\u003E\u003Cp\u003E [KSPField(isPersistant = false)]\u003C/p\u003E\u003Cp\u003E public string Anim = \u0022\u0022;\u003C/p\u003E\u003Cp\u003E [KSPField(isPersistant = false)]\u003C/p\u003E\u003Cp\u003E public float LiftMultiply = 0;\u003C/p\u003E\u003Cp\u003E [KSPField(guiActive = true, guiActiveEditor = false, \u003C/p\u003E\u003Cp\u003E guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\u003C/p\u003E\u003Cp\u003E public float deflectionLiftCoeff;\u003C/p\u003E\u003Cp\u003E public void FixedUpdate()\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E anim = part.FindModelAnimators(Anim)[0];\u003C/p\u003E\u003Cp\u003E if (part.Modules.Contains(\u0022ModuleControlSurface\u0022))\u003C/p\u003E\u003Cp\u003E { \u003C/p\u003E\u003Cp\u003E deflectionLiftCoeff = anim(Anim).normalizedTime;\u003C/p\u003E\u003Cp\u003E ((ModuleControlSurface)part.Modules[\u0022ModuleControlSurface\u0022]).deflectionLiftCoeff = deflectionLiftCoeff;\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2015-06-01T22:34:55Z","Content":"\n\u003Cp\u003EBecause () are not [].\u003C/p\u003E\u003Cp\u003EdeflectionLiftCoeff = anim[Anim].normalizedTime;\u003C/p\u003E\u003Cp\u003EHere is a cleaned up version. Of course you ll have to do more than just setting the current value of the anim time but I guess you already know that.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace Animate2Variable\u003Cbr\u003E{\u003Cbr\u003E    public class AnimatedWing : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public string animationName = \u0022\u0022;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public float LiftMultiply = 0;\u003Cbr\u003E\u003Cbr\u003E        [KSPField(guiActive = true, guiActiveEditor = false,guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\u003Cbr\u003E        public float deflectionLiftCoeff;\u003Cbr\u003E\u003Cbr\u003E        private ModuleControlSurface liftingSurface;\u003Cbr\u003E\u003Cbr\u003E        private Animation anim;\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            anim = part.FindModelAnimators(animationName)[0];\u003Cbr\u003E\u003Cbr\u003E            liftingSurface = part.FindModuleImplementing\u0026lt;ModuleControlSurface\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if (anim == null || liftingSurface == null)\u003Cbr\u003E                return;\u003Cbr\u003E\u003Cbr\u003E            deflectionLiftCoeff = anim[animationName].normalizedTime;\u003Cbr\u003E\u003Cbr\u003E            liftingSurface.deflectionLiftCoeff = deflectionLiftCoeff;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"electronicfox","CreatedById":43373,"CreatedDateTime":"2015-06-01T22:52:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarbian\u0022 data-cite=\u0022sarbian\u0022\u003E\u003Cdiv\u003EBecause () are not [].\u003Cp\u003EdeflectionLiftCoeff = anim[Anim].normalizedTime;\u003C/p\u003E\u003Cp\u003EHere is a cleaned up version. Of course you ll have to do more than just setting the current value of the anim time but I guess you already know that.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace Animate2Variable\u003Cbr\u003E{\u003Cbr\u003E    public class AnimatedWing : PartModule\u003Cbr\u003E    {\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public string animationName = \u0022\u0022;\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E        [KSPField(isPersistant = false)]\u003Cbr\u003E        public float LiftMultiply = 0;\u003Cbr\u003E\u003Cbr\u003E        [KSPField(guiActive = true, guiActiveEditor = false,guiName = \u0022deflectionLiftCoeff\u0022, isPersistant = false)]\u003Cbr\u003E        public float deflectionLiftCoeff;\u003Cbr\u003E\u003Cbr\u003E        private ModuleControlSurface liftingSurface;\u003Cbr\u003E\u003Cbr\u003E        private Animation anim;\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart(PartModule.StartState state)\u003Cbr\u003E        {\u003Cbr\u003E            anim = part.FindModelAnimators(animationName)[0];\u003Cbr\u003E\u003Cbr\u003E            liftingSurface = part.FindModuleImplementing\u0026lt;ModuleControlSurface\u0026gt;();\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            if (anim == null || liftingSurface == null)\u003Cbr\u003E                return;\u003Cbr\u003E\u003Cbr\u003E            deflectionLiftCoeff = anim[animationName].normalizedTime;\u003Cbr\u003E\u003Cbr\u003E            liftingSurface.deflectionLiftCoeff = deflectionLiftCoeff;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThank you! I knew it would be something really simple.\u003C/p\u003E\u003Cp\u003EI already have another value editable in the cfg that will shrink down the animation time value to a reasonable amount for the final draft of this code.\u003C/p\u003E\n"}]}