{"TopicId":76279,"ForumId":29,"TopicTitle":"Acquiring a position vector","CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-06-29T21:35:26Z","PageNum":1,"Articles":[{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-06-29T21:35:26Z","Content":"\n\u003Cp\u003ENew to creating plugins for KSP, trying to figure out how to acquire two vessels\u0027 (or celestial body\u0027s) position vectors in the same frame to do pointing math.\u003C/p\u003E\u003Cp\u003EI\u0027m trying to ascertain how to use\u003C/p\u003E\u003Cp\u003EVessel GetVessel() and Vector3d GetWorldPos3d()\u003C/p\u003E\u003Cp\u003EOr if those are even the correct methods to be using in this case. I haven\u0027t been able to find a good code example snippet to showcase how to do simple telemetry gets, so even just pointing me at a source code file would be fine.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-06-30T17:18:13Z","Content":"\n\u003Cp\u003EThere\u0027s a lot of this stuff in the kOS mod, because it has to present the geometry of the game to the user in a way that lets them write scrips without having to delve into the weirdity of KSP\u0027s internal coordinate system. (Still an ongoing project because we haven\u0027t made the features to hide the fact that the universe switches between still-universe-rotating-planet mode and rotating-planet-still-universe mode depending on your altitude.)\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/KSP-KOS/KOS\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KSP-KOS/KOS\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve had some experience with KSP\u0027s oddball coordinate system because of that project, not by choice but because we\u0027ve had to delve into it in order to make the mod work. If you have any questions feel free to ask.\u003C/p\u003E\u003Cp\u003EThe first thing to remember is that the terminology \u0022world coordinates\u0022 has nothing to do with the planet or moon. It doesn\u0027t mean \u0022world\u0022 in that sense of the word. I would be better described as \u0022universe coordinates\u0022. The reason it\u0027s called \u0022world\u0022 coordinates is that it\u0027s terminology coming from the underlying Unity system, which chose to describe the entire XYZ universe with the word \u0022world\u0022 - a term that makes sense if you\u0027re writing most sorts of games, but gets a bit misleading when writing a game in space with planets.\u003C/p\u003E\u003Cp\u003EIn Unity, \u0022world\u0022 is used to differentiate from \u0022local\u0022. i.e. the coordinates of this fuel tank relative to the entire scene Unity is rendering, versus the coordinates of this fuel tank relative to the ship it\u0027s part of.\u003C/p\u003E\u003Cp\u003E\u0022Scene\u0022 would probably have been a better word than \u0022world\u0022, as it has a longstanding traditional meaning in 3d software as meaning \u0022everything there is in the coord grid right now\u0022.\u003C/p\u003E\u003Cp\u003ESo GetWorldPos3D() is in fact getting the coordinates of the item in question relative to the whole rendered scene.\u003C/p\u003E\u003Cp\u003EBut to make sense of that you\u0027d need to know where the origin of the scene actually is... and that\u0027s a big big mess because it moves. The origin of the scene is always *NEAR* the current vessel but not necessarily ON it. When you are on rails THEN the origin is exactly where the active vessel is, rigidly. But then when you come off of rails the vessel is allowed to drift away from the origin during the full-physics simulation. After you\u0027ve been off of rails for a minute or so, the origin will typically be as much as 100 or 200 meters away from the active vessel.\u003C/p\u003E\u003Cp\u003EIf you want to know where one vessel is relative to another vessel, then you can ignore the moving origin problem and just do simple vector subtraction between the two positions. Call vessel 1\u0027s GetWorldPos3d() and vessel 2\u0027s GetWordPos3d() and subtract one vector from the other. That would give you the same consistent answer regardless of where the shared origin of those two positions is.\u003C/p\u003E\u003Cp\u003EScale: When in flight-camara mode (as opposed to map view mode) the grid is scaled so that 1 unit of math = 1 meter of space. When in map view mode the scale of the universe changes a lot for drawing on the screen, but the coordinates behind the scenes for other stuff are the same.\u003C/p\u003E\u003Cp\u003ERotation: This is a mess. To see a description of it, look here : \u003Ca href=\u0022http://ksp-kos.github.io/KOS_DOC/ref_frame/index.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://ksp-kos.github.io/KOS_DOC/ref_frame/index.html\u003C/a\u003E and look at the part about the RAW rotation.\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-06-30T22:51:12Z","Content":"\n\u003Cp\u003EThank you much! The description of the math helps a lot to give me context to base my math.\u003C/p\u003E\u003Cp\u003EI guess what I\u0027m still confused on is how one accesses a particular vessel\u0027s (or celestial body\u0027s) methods? (And am assuming that GetWorldPos3d is, or is analagous to, an Object Method). Here\u0027s the lines of code (I\u0027m writing a partmodule, so these are running inside of that)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            Vessel current = vessel.GetVessel();\u003Cbr\u003E            Vector3d position = current.GetWorldPos3d();\u003Cbr\u003E            //maths happen here\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EExcept whatever I\u0027m doing isn\u0027t be recognized by either the IDE, or the compiler. However, when I compile with this replacement:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            Vector3 position = transform.position;\u003Cbr\u003E            //maths happen here\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt compiles just fine (and runs in-game just fine as well), placed it on the context menu for the part), however, this is the position relative to the local frame (that travels with the spaceship to help prevent the Kraken, as I understand it from your post). So, onto my questions:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EHow do I assign an object to my current vessel?\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EHow do I assign an object for some arbitrary vessel x?\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003ECorrollary to 2, how do I grab the object for a planet, say I want to do pointing math to Kerbin while in orbit around Jool?\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFor context, let\u0027s say in my persistence file I have two vessels:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EVESSEL\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tpid = 591e5579d8dd4cca8ade75f7a66becc9\u003Cbr\u003E\t\t\tname = Jool Test Craft\u003Cbr\u003E\t\t\ttype = Probe\u003Cbr\u003E\t\t\tsit = ORBITING\u003Cbr\u003E                        //more stuff here\u003Cbr\u003E                 }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EVESSEL\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tpid = 53d2cbfd6a1d4f1682347b995e648ea1\u003Cbr\u003E\t\t\tname = Kerbin Test Craft\u003Cbr\u003E\t\t\ttype = Probe\u003Cbr\u003E\t\t\tsit = ORBITING\u003Cbr\u003E                        //more stuff here\u003Cbr\u003E                 }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EDo I need to reference any of that data to ID the craft, or is there a simpler way of doing this?\u003C/p\u003E\u003Cp\u003EThanks again for all your help, I\u0027m very new to all of this.\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-06-30T22:57:03Z","Content":"\n\u003Cp\u003EOn rotation, it sounds like there isn\u0027t a \u0027world\u0027 rotation, or a quaternion that describes the vessel\u0027s rotation in world coordinates? That would be ideal, if it exists. (Crosses fingers for GetWorldQuat())\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-01T00:24:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Felger\u0022 data-cite=\u0022Felger\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public override void OnUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            Vessel current = vessel.GetVessel();\u003Cbr\u003E            Vector3d position = current.GetWorldPos3d();\u003Cbr\u003E            //maths happen here\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EExcept whatever I\u0027m doing isn\u0027t be recognized by either the IDE, or the compiler.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u0027vessel\u0027 (lowercase) isn\u0027t a thing yet. You didn\u0027t declare it as a variable.\u003C/p\u003E\u003Cp\u003E\u0027Vessel\u0027 (uppercase) is the name of the Vessel class, and you could use it to call a static method without an instance of the class, but Vessel.GetVessel() isn\u0027t a static method so you can\u0027t do that.\u003C/p\u003E\u003Cp\u003EYou need to get a variable of type Vessel first. That\u0027s what you\u0027re missing. If the vessel you\u0027re interested in is the current active one (the one the cameras is looking at and which receives the control inputs from the keyboard), here\u0027s how you can get it:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E  Vessel curVessel = FlightGlobals.fetch.activeVessel();\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAfter that you can do things like curVessel.GetWorldPos3d().\u003C/p\u003E\u003Cp\u003ETo get the vessel orientation as a quaternion, first get its Unity transform, for example:\u003C/p\u003E\u003Cp\u003ETransform trans = curVessel.ReferenceTransform();\u003C/p\u003E\u003Cp\u003ENow you can get the quaternion from calls into Unity.\u003C/p\u003E\u003Cp\u003EQuaternion q = trans.rotation;\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-01T00:29:09Z\u0022 title=\u002207/01/2014 12:29  AM\u0022 data-short=\u002210 yr\u0022\u003EJuly 1, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-01T01:03:55Z","Content":"\n\u003Cp\u003EWow, I am a dummy, I had assumed that grabbing a vessel would be in the Vessel class, but neglected to look at FlightGlobals. Thanks so much!\u003C/p\u003E\u003Cp\u003EAnd that quaternion is from the world frame to the vessel frame (Oriented with the body of the vessel)? Or is it from the odd frame you were referencing in the kOS documentation you linked me to, to the vessel frame?\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-01T03:42:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Felger\u0022 data-cite=\u0022Felger\u0022\u003E\u003Cdiv\u003EWow, I am a dummy, I had assumed that grabbing a vessel would be in the Vessel class, but neglected to look at FlightGlobals. Thanks so much!\u003Cp\u003EAnd that quaternion is from the world frame to the vessel frame (Oriented with the body of the vessel)? Or is it from the odd frame you were referencing in the kOS documentation you linked me to, to the vessel frame?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI *think* it\u0027s from the odd world references. But then in principle it should be possible to get it relative to the vessel by combining the vessel rotation relative to world coords and the horizon rotation relative to world coords.\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-01T21:59:54Z","Content":"\n\u003Cp\u003EPoint of curiosity, when you say odd world references, is this reference frame oriented the same way as the \u0027World\u0027 reference frame? If so, that\u0027s quite convenient, as I only really care about the relative orientation to the position vector\u0027s frame.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-02T21:07:57Z","Content":"\n\u003Cp\u003EYes. I consider the orientation of the world reference frame odd. When I say \u0022odd world references\u0022 I mean \u0022what KSP chose to tell Unity to use as the world coord system, which keeps changing orientation.\u0022\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-02T22:15:06Z","Content":"\n\u003Cp\u003EExcellent, that\u0027s what I was hoping for. For the purposes of my math, it doesn\u0027t matter as long as they\u0027re both in reference to the same frame.\u003C/p\u003E\u003Cp\u003EI do wonder what led them to have a seemingly arbitrarily oriented frame, though. The aerospace engineer in me would have set up a global frame centered on the sun (centerpoint of the universe), and had all the \u0027world\u0027 frames match that frame\u0027s orientation for simplicity. Ah well, I\u0027m sure they had their reasons.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-03T10:33:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Felger\u0022 data-cite=\u0022Felger\u0022\u003E\u003Cdiv\u003E Ah well, I\u0027m sure they had their reasons.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESpace Kraken.\u003C/p\u003E\u003Cp\u003EThe problem is that while centering the universe on the Sun is mathematically elegant, it\u0027s not so elegant when dealing with floating point representations of numbers in a computer which have a fixed limit to the number of significant digits they can represent. Because they\u0027re stored with a mantissa/exponent format, with a fixed number of significant digits in the mantissa, the precision gets worse the farther from zero the numbers are. At zero you have the ability to store the difference between 0.00000001 and 0.00000002 meters. But when those numbers get big and you\u0027re talking about a billion meters, then it\u0027s a problem that you don\u0027t have that precision anymore.\u003C/p\u003E\u003Cp\u003ETrying to calculate whether or not your fuel tank has collided too hard into your command pod when the numbers you\u0027re using to perform the calculation have to be rounded to the nearest 10 centimeters or so tends to make your ship blow up. It tricks the system into thinking the part has suddenly moved really fast in a fraction of a second as it \u0022snaps\u0022 to the next available number.\u003C/p\u003E\u003Cp\u003EThus ships used to just unfairly blow up when you started getting too far from the sun and the position values became less precise. Moving the origin of the universe to always be near the ship is how SQUAD fixed that problem.\u003C/p\u003E\u003Cp\u003EThe thing I don\u0027t understand is why the *rotation* of the axes had to be made to change all the time.\u003C/p\u003E\n"},{"CreatedByName":"Felger","CreatedById":76828,"CreatedDateTime":"2014-07-04T02:54:35Z","Content":"\n\u003Cp\u003EYeah, completely understand the rationale behind moving the origin. The floating point error symptoms still exist, actually, if you move your ship to the light-years scale. Due to floating point errors your orbit will vary wildly, though on the bright side you won\u0027t explode (as far as I\u0027ve seen, anyway).\u003C/p\u003E\u003Cp\u003EAgreed on the rotation of the axes. Either there\u0027s a reason they didn\u0027t orient them consistently, or it was just easier to deal with in the code this way.\u003C/p\u003E\u003Cp\u003ETo be fair, though, there are perfectly valid (non-inertial) reference frames that rotate their origins in a semi-organized fashion. LVLH is a pretty good one, mark your attitude relative to your current velocity and position vectors.\u003C/p\u003E\n"}]}