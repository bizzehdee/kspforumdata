{"TopicId":86271,"ForumId":29,"TopicTitle":"Part Gravity Code","CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2014-10-07T00:01:29Z","PageNum":1,"Articles":[{"CreatedByName":"kellven","CreatedById":16971,"CreatedDateTime":"2014-10-07T00:01:29Z","Content":"\n\u003Cp\u003EApologies in advance for any ranting, simply thinking of Squad-code induces compulsive rage.\u003C/p\u003E\u003Cp\u003EQ:\u003C/p\u003E\u003Cp\u003E-Does anyone know how gravity is handled in code now?\u003C/p\u003E\u003Cp\u003E-From what I remember, it was handled (back in 2012) in some hidden method of the ancient Part class, and all the gravity modifying mods had to recompute the gravity of every single part, and apply a second force with opposite vector, doubling the instructions just to get back to base, this was beyond stupid. I also remember that when PartModule came out, Squad just dragged along nearly all the ancient code, and stuck it in a new package. From what I understand, Squad in their infallible omniscience decided at some following point to obfuscate their magnificent contribution to programming, which if they did what I think they did, means they\u0027re now feeding their entire code base through maximal method overload and rename routines, which I suspect means getting ahold of the damn misanthropic gravity method is now well and truly impossible.\u003C/p\u003E\u003Cp\u003E-Can anyone confirm this is the case, or tell me how to acquire the object?\u003C/p\u003E\u003Cp\u003EReason for Q:\u003C/p\u003E\u003Cp\u003EThe idea I had was to inject a tiny amount of ontological sanity and modability into the stew, and create an actual \u0022public sealed Gravity\u0022 object, and possibly other basic physics-system objects, collision being the only truly non-trivial system(and best left to Unity for now).\u003C/p\u003E\u003Cp\u003EThe Gravity object doesn\u0027t actually handle gravity, it\u0027s just a publicly accessible immutable container for links to the code that does. Inside Gravity are interface properties, which initialize to the default Squad code implementation; and a few general control properties which specify or report things like whether \u0022vessel-based\u0022 or \u0022part-based\u0022 implementation is being used, \u00222-body\u0022 or \u0022n-body\u0022 computations are in effect, what\u0027s overridden, who\u0027s responsible, versioning, and whatever else needs tracking. This allows some sanity to be used with all the obsessive compulsive code hiding and obfuscation: Leave the damn Gravity object and interfaces alone, mark the actual SQUAD IMPLEMENTATION private/internal/whatever, obfuscate the implementation only, and simply set those hidden objects as the default initialization values of the interface properties.\u003C/p\u003E\u003Cp\u003EDoing something like this will allow the modding community to actually mod the game in depth, in ways the dev team didn\u0027t think of, without compromising Squad\u0027s actual IP, or having any need to document/reference any of the source code that doesn\u0027t have a valid reason for being public. The best part is that this is how C# is actually intended to work in the first place.\u003C/p\u003E\u003Cp\u003EOne other benefit of separating and properly organizing physics code out of unity is that the Kraken can be truly slain, at least in theory, and high-mass restrictions can be resolved. Aside from collision handling, the actual implementation of the physics required by KSP is very nearly trivial, well documented all over the net, and not really THAT much work, even using native code. Using custom implementations means KSP can finally have a physics system that does what KSP actually needs it to do, instead of what Unity thought was a good idea to borrow from PhysX.\u003C/p\u003E\u003Cp\u003EThe difficult part of this is putting together a comprehensive framework in C# to tie it all together, and properly handle modding, and properly hide the implementation that actually deserves it from decompilation/theft. Unfortunately, it\u0027s precisely the high level architecture and planning that I\u0027ve seen Squad fail at the most miserably.\u003C/p\u003E\n"},{"CreatedByName":"OrbitusII","CreatedById":57305,"CreatedDateTime":"2014-10-07T00:13:39Z","Content":"\n\u003Cp\u003EYou can still simply apply a force to an rigidbody in the old Unity fashion, check out the Script Reference for more on that. \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html\u0022 rel=\u0022external nofollow\u0022\u003ELink to Rigidbody.AddForce\u003C/a\u003E. Vessels themselves aren\u0027t rigidbodies, so you\u0027ll have to apply a force to each individual part. There is an N-body mod out there somewhere as well, but it does not perform part-part gravitic interactions (since they\u0027re so minute that they basically don\u0027t matter).\u003C/p\u003E\u003Cp\u003EIf you want to implement a better PhysX system, you can either wait until Unity 5 (which involves an upgrade to PhysX 3.3, IIRC) or try to implement it yourself via sticking a .dll into the GameData folder. The issue with the Kraken and co. is unfortunately an innate part of the physics systems, and Squad has already handled many of the Krakens that have shown up in the game. What you see now in terms of Kraken attacks are pathetic compared to the original Kraken, from what I\u0027ve heard.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2014-10-07T11:31:52Z","Content":"\n\u003Cp\u003EThe actual force are applied by the FlightIntegrator instance of the vessel. So if you wanted to change what\u0027s going on you could just change the FlightIntegrator of the vessel and you\u0027d get a new gravity/drag/anyOtherForce.\u003C/p\u003E\u003Cp\u003EBut that would not change the orbit for the non loaded ship since they use Orbit, which implements the equations for 1 object orbiting an other. \u003C/p\u003E\u003Cp\u003EYou can\u0027t just define a \u0022Gravity\u0022 object because non loaded object are on rail and don\u0027t have a force applied to them but just use a equation defined in Orbit. \u003C/p\u003E\u003Cp\u003EAn while I agree that the game could be a bit more modular and allow for deeper mod change without trick I also think you could ask for change without turning your post into rant/Squad attack.\u003C/p\u003E\n"},{"CreatedByName":"frizzank","CreatedById":57210,"CreatedDateTime":"2014-10-07T13:45:08Z","Content":"\n\u003Cp\u003EYou can look at the gravity plugin in the asteroid mod.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www./download/79fc0quuj92w7ay/FASA_Asteroids2.41.zip\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/79fc0quuj92w7ay/FASA_Asteroids2.41.zip\u003C/a\u003E\u003C/p\u003E\n"}]}