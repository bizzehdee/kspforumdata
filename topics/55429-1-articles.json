{"TopicId":55429,"ForumId":29,"TopicTitle":"simple if/then code in part cfgs","CreatedByName":"seanth","CreatedById":79989,"CreatedDateTime":"2013-12-07T03:07:38Z","PageNum":1,"Articles":[{"CreatedByName":"seanth","CreatedById":79989,"CreatedDateTime":"2013-12-07T03:07:38Z","Content":"\n\u003Cp\u003EA friend and I were looking at the ResGen module (\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/28895-0-20-2-Resource-Generation-Module-(0-28)\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/28895-0-20-2-Resource-Generation-Module-(0-28)\u003C/a\u003E), and it\u0027s so very close to something I would love: mainly a way to do real if/then evaluations in a module. \u003C/p\u003E\u003Cp\u003EIs anyone working something similar, or maybe working toward allowing lua or javascript in a part\u0027s cfg (via a special module). It would much easier to write necessary code in a part\u0027s cfg than to roll custom dlls\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-12-09T22:12:17Z\u0022 title=\u002212/09/2013 10:12  PM\u0022 data-short=\u002210 yr\u0022\u003EDecember 9, 2013\u003C/time\u003E by seanth\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2013-12-09T16:54:08Z","Content":"\n\u003Cp\u003EPerhaps an example of what you are looking for?\u003C/p\u003E\u003Cp\u003ETaking a quick look at the ResGen module you linked, that does not implement if/then evaluations in the part.cfg that I can see.\u003C/p\u003E\u003Cp\u003EThe ResGen module looks at the part.cfg to get the resource time and consumption/production rates yes, but all the logic is calculated by the ResGen .dll, not in the part.cfg.\u003C/p\u003E\u003Cp\u003EWhich makes sense to me. The part.cfg describes the properties of the associated part. A part\u0027s intrinsic properties don\u0027t change.\u003C/p\u003E\u003Cp\u003EA solar panel generates X amount of electricity per lumen of light that it is exposed to, this value is in the part.cfg (Intrinsic value)\u003C/p\u003E\u003Cp\u003EThe game then calculates how many lumens of light are hitting the solar panel based on its distance from the sun and produces the appropriate amount of electricity. (Logic not in the part.cfg)\u003C/p\u003E\u003Cp\u003EAt least that\u0027s how I see things.\u003C/p\u003E\u003Cp\u003ED.\u003C/p\u003E\n"},{"CreatedByName":"seanth","CreatedById":79989,"CreatedDateTime":"2013-12-09T21:20:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Diazo\u0022 data-cite=\u0022Diazo\u0022\u003E\u003Cdiv\u003EPerhaps an example of what you are looking for?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAn example.... Hmmm. Well, let\u0027s imagine a new sort of Air intake. Let\u0027s further assume the % of oxygen on Laythe is different than on Kerbin. I think it would be neat to do something like:\u003C/p\u003E\u003Cp\u003EMODULE{\u003C/p\u003E\u003Cp\u003E name = magicalCodeAndLogicThingy\u003C/p\u003E\u003Cp\u003E INPUT{\u003C/p\u003E\u003Cp\u003E name = IntakeAir\u003C/p\u003E\u003Cp\u003E rate = 1.0\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E OUTPUT{\u003C/p\u003E\u003Cp\u003E if(planet==Kerbin){\u003C/p\u003E\u003Cp\u003E name = Oxygen\u003C/p\u003E\u003Cp\u003E rate = 0.21\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E if(planet==Laythe){\u003C/p\u003E\u003Cp\u003E name = Oxygen\u003C/p\u003E\u003Cp\u003E rate = 0.15\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EJust as an example. Or maybe a way to nest Modules. So, for example, you could use different powercurves for ModuleDeployableSolarPanel on a per planet basis to reflect how cloudy the atmosphere is.\u003C/p\u003E\u003Cp\u003EThese are just examples off the top of my head, mind you.\u003C/p\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2013-12-09T21:43:22Z","Content":"\n\u003Cp\u003ETo my awareness, the config loader really isn\u0027t set up to have this sort of functionality added. It could be done by specifying some sort of custom scripting language for use in a particular field within a module, and then using a plugin to parse that field and take actions as appropriate, e.g.:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = magicalCodeAndLogicThingy\u003Cbr\u003E    INPUT\u003Cbr\u003E    {\u003Cbr\u003E        name = IntakeAir\u003Cbr\u003E        rate = 1.0\u003Cbr\u003E    }\u003Cbr\u003E    OUTPUT\u003Cbr\u003E    {\u003Cbr\u003E        contingency = if(mainBody==Kerbin)\u003Cbr\u003E        name = Oxygen\u003Cbr\u003E        rate = 0.21\u003Cbr\u003E    }\u003Cbr\u003E    OUTPUT\u003Cbr\u003E    {\u003Cbr\u003E        contingency = if(mainBody==Laythe)\u003Cbr\u003E        name = Oxygen\u003Cbr\u003E        rate = 0.15\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EBut, implementing something like that with broad re-usability is going to involve a lot of eval calls, or be very laborious on your part. If you have a specific application like this example in mind, it would be easier to do something like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = magicalOxygenIntake\u003Cbr\u003E    INPUT\u003Cbr\u003E    {\u003Cbr\u003E        name = IntakeAir\u003Cbr\u003E        rate = 1.0\u003Cbr\u003E    }\u003Cbr\u003E    OUTPUT\u003Cbr\u003E    {\u003Cbr\u003E        name = Oxygen\u003Cbr\u003E        PLANET\u003Cbr\u003E        {\u003Cbr\u003E            name = Kerbin\u003Cbr\u003E            rate = 0.15\u003Cbr\u003E        }\u003Cbr\u003E        PLANET\u003Cbr\u003E        {\u003Cbr\u003E            name = Laythe\u003Cbr\u003E            rate = 0.15\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen in your magicalOxygenIntake OnLoad override, you scan the PLANET nodes (using the existing ConfigNode tools in the KSP API) to define specific behavior based on those blocks.\u003C/p\u003E\u003Cp\u003ESo, the real question to be asking is: what are you trying to do? If you\u0027re trying to write a scriptable language for cfg files that allows for broad reuse, you might start by researching what ModuleManager has done with loading its config files, and then start specifying a language. If you\u0027re looking to make a magical oxygen intake, what you really want to do is work inside the tools already in KSP\u0027s API to build a PartModule that does what you\u0027re looking for.\u003C/p\u003E\n"},{"CreatedByName":"seanth","CreatedById":79989,"CreatedDateTime":"2013-12-09T22:12:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022toadicus\u0022 data-cite=\u0022toadicus\u0022\u003E\u003Cdiv\u003ESo, the real question to be asking is: what are you trying to do? If you\u0027re trying to write a scriptable language for cfg files that allows for broad reuse, you might start by researching what ModuleManager has done with loading its config files, and then start specifying a language. If you\u0027re looking to make a magical oxygen intake, what you really want to do is work inside the tools already in KSP\u0027s API to build a PartModule that does what you\u0027re looking for.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat I am interested in is the former. \u003C/p\u003E\u003Cp\u003EGiven what I have read, I am going to assume that the answer to my initial question is that no one is working on such a thing. Or at least no one has chimed in to say they are working on such a thing.\u003C/p\u003E\n"},{"CreatedByName":"toadicus","CreatedById":67745,"CreatedDateTime":"2013-12-09T23:06:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022seanth\u0022 data-cite=\u0022seanth\u0022\u003E\u003Cdiv\u003EWhat I am interested in is the former. \u003Cp\u003EGiven what I have read, I am going to assume that the answer to my initial question is that no one is working on such a thing. Or at least no one has chimed in to say they are working on such a thing.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe closest that I\u0027m aware of is ModuleManager. That\u0027s not where the focus is, but there are at least similarities in that it offers a small scripting language in cfg-format files geared to a specific purpose.\u003C/p\u003E\n"},{"CreatedByName":"MrHappyFace","CreatedById":76365,"CreatedDateTime":"2013-12-25T20:25:08Z","Content":"\n\u003Cp\u003EYou could do something similar to this, however, I am not at my computer so this exact code might not work. Just put this code in a class extending partmodule in the OnUpdate function and put the module in your part, no code in the config required!\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003C/pre\u003E\u003Cp\u003Efloat ResourceRate;\u003C/p\u003E\u003Cp\u003EIf(vessel.mainBody.name = \u0022Kerbin\u0022)\u003C/p\u003E\u003Cp\u003E ResourceRate = 0.21;\u003C/p\u003E\u003Cp\u003EIf(vessel.main body.name = \u0022Laythe\u0022)\u003C/p\u003E\u003Cp\u003E ResourceRate = 0.15;\u003C/p\u003E\u003Cp\u003EPart.RequestResource(\u0022Oxygen\u0022, ResourceRate);\u003C/p\u003E\u003Cp\u003E[\\CODE]\u003C/p\u003E\n"}]}