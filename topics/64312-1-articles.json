{"TopicId":64312,"ForumId":36,"TopicTitle":"Craft Part Module/Parser","CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T12:18:53Z","PageNum":1,"Articles":[{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T12:18:53Z","Content":"\n\u003Cp\u003EHi All,\u003C/p\u003E\u003Cp\u003EI\u0027ve been thinking about writing some KSP modules for a few months now but, could not come up with a cool idea which had not already been done. Yeah, there\u0027s the alien invasion strategy game idea, think X-COM meets Kethane. But, that\u0027s a bit too much for a first mod. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022:wink:\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo, I\u0027m settling for something which I don\u0027t think has been done yet which very much aligns with my programming expertise. I\u0027m a web developer and I use/debug/write parsers of tree structures for a living. I simply can\u0027t find one for KSP craft files.\u003C/p\u003E\u003Cp\u003ENow, I could go on about how I spend most of my KSP time in the build interface and all the improvements I could make with modules built on the parser. However, first things first. Because I don\u0027t know a fraction of the inner guts of KSP and Unity like most devs here, I\u0027m looking for input into the API.\u003C/p\u003E\u003Cp\u003EHere\u0027s the basic concept of what I propose. \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ELayer One\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EBasic tree parser which would have a similar approach to reading and navigating the craft files as the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Document_Object_Model\u0022 rel=\u0022external nofollow\u0022\u003EDOM\u003C/a\u003E(Document Object Model) library. Construct the tree using a set of nodes with different nodes being either a craft, attribute, child object, etc. I would like to architect this with performance in mind.\u003C/p\u003E\u003Cp\u003EI don\u0027t know how Squad reads crafts files but, I\u0027m sure they haven\u0027t implemented anything like layer two.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ELayer Two\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ECreate an API wrapper using a builder pattern similar to the \u003Ca href=\u0022https://en.wikipedia.org/wiki/Sizzle_%28selector_engine%29\u0022 rel=\u0022external nofollow\u0022\u003ESizzle Engine\u003C/a\u003E(CSS selectors) which jQuery uses. This would allow more on-the-fly programming for modules and if the performance of layer one is good then that could be used widely in-flight.\u003C/p\u003E\u003Cp\u003EThere\u0027s basically three pieces to this puzzle.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:decimal;\u0022\u003E\u003Cli\u003EDefinition of the craft file(if none exists create it as part of this project)\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDefinition of the programmatic tree structure for the craft file parser\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003EDefinition of the builder API(part selector engine) for mod developers\u003Cbr\u003E\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELike jQuery, this could be extended to a number of basic manipulations and event handling. That\u0027s something to consider for the future. Any input into this idea is most appreciated. Be gentle. I\u0027m a complete noob at KSP modding and my expertise in Unity3D is basic at best.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EThe module concept?\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOh yeah. Have a new tab for the building interface with the craft tree structure in it. The craft is translucent in the editor with the selected part or, tree branch, as a solid part. In the interface have all the part/branch manipulation options available, such as, tweakables. Additional features may include having hooks for specific programming attached to that craft part. After the API is built the possibilities would be endless.\u003C/p\u003E\n"},{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T12:19:51Z","Content":"\n\u003Cp\u003E\u003Cem\u003EI\u0027ll take the liberty of using this space to insert API notes/rules and provide news/updates.\u003C/em\u003E\u003C/p\u003E\n"},{"CreatedByName":"Crater","CreatedById":48907,"CreatedDateTime":"2014-02-26T13:00:47Z","Content":"\n\u003Cp\u003EAre you thinking about this as an in-game tool, or separate app?\u003C/p\u003E\u003Cp\u003EI ask because, if you\u0027re planning for something in-game, then you most likely don\u0027t want to work with craft files, but with the in-memory vessel objects that KSP is using to represent the already loaded and parsed vessel, which would mean that you\u0027d need more of a tree walker than a parser, and I think from what you\u0027re saying, layer one is already implemented within the game, and you could get straight on to layer two?\u003C/p\u003E\n"},{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T17:01:44Z","Content":"\n\u003Cp\u003EThe core would be a C# library for use ingame and external tool development.\u003C/p\u003E\u003Cp\u003ELayer one would do two things, parse a craft file and parse the data from an ingame craft object. Judging from the files and the ingame performance, data handling is all flat and very basic. The idea would be to create a tree structure as a reference point(part of the builder pattern) and then, as part of layer two, create a new flat memory structure which would do a better job at accessing and manipulating the game objects.\u003C/p\u003E\u003Cp\u003EIt seems that the game object data access increases memory and processing requirements exponentially. I have a pretty clear architecture in mind to make that resource issue linear, using a psuedo hash table lookup routine that never recursively iterates through a loop. Rather, it would seeks to deduct value sets from the entire hash table instead of pathing through references and attribute comparisons to assemble the results.\u003C/p\u003E\n"},{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T17:14:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crater\u0022 data-cite=\u0022Crater\u0022\u003E\u003Cdiv\u003E...which would mean that you\u0027d need more of a tree walker than a parser, and I think from what you\u0027re saying, layer one is already implemented within the game...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOther than \u003Cstrong\u003EVessel.rootpart\u003C/strong\u003E and \u003Cstrong\u003EPart.children\u003C/strong\u003E what other tree walking options are available? The current API that I\u0027m aware of seems less than, say, optimised.\u003C/p\u003E\n"},{"CreatedByName":"Crater","CreatedById":48907,"CreatedDateTime":"2014-02-26T17:19:49Z","Content":"\n\u003Cp\u003EI\u0027m not disagreeing with what you\u0027re trying to achieve, I was just trying to point out that there \u003Cem\u003Eis no\u003C/em\u003E craft file to read for a loaded vessel. While you are in the game, the only possible source for information about a craft is the in-memory game object. This is periodcally flushed to the persistence file (which is similar in layout to a .craft, but not quite the same), but your information source, which you will have to work from for any in-game operations will have to be walking the current tree and building your optimized data structures, not parsing .craft files.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-02-26T17:44:55Z","Content":"\n\u003Cp\u003EI\u0027ve read your posts multiple times but are still note sure what you are trying to re-invent. Who and how exactly would someone benefit from it? (Except you, since *something* would work in a way thats more familiar to yourself).\u003C/p\u003E\u003Cp\u003E- You can\u0027t change part cfg\u0027s, VAB/SPH\u0027s craft files, or save games (.sfs\u0027s) without loosing compatibility.\u003C/p\u003E\u003Cp\u003E- You can\u0027t improve ingame performance without re-recreating the game and it is good enough anyway.\u003C/p\u003E\u003Cp\u003E- Load and save processes could be speed up a lot, but again thats barely sth a moder can do.\u003C/p\u003E\u003Cp\u003E- You could invent a new way to build \u0026amp; load stock-compatible part modules, but i don\u0027t think that would be used a lot since thats not really a problem in KSP (though it does miss documentation, i have to admit).\u003C/p\u003E\n"},{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-26T18:39:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crater\u0022 data-cite=\u0022Crater\u0022\u003E\u003Cdiv\u003EI\u0027m not disagreeing with what you\u0027re trying to achieve, I was just trying to point out that there \u003Cem\u003Eis no\u003C/em\u003E craft file to read for a loaded vessel. While you are in the game, the only possible source for information about a craft is the in-memory game object. This is periodcally flushed to the persistence file (which is similar in layout to a .craft, but not quite the same), but your information source, which you will have to work from for any in-game operations will have to be walking the current tree and building your optimized data structures, not parsing .craft files.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, that\u0027s my understanding too. The idea would be to know how to get to the part/s I\u0027m looking for on the game object. For example, if I want to get all parts with a toggle module attached to a fuel tank and it is set to down position, I have to look up all the PartModules and cross reference them to the Parts. Expensive operation looping through recursive loops. Also, alot of programming each time you have to find something and call an event it it/them. Easier just to have a call findPart(\u0022name.FT400 \u0026gt; module.Toggle[position=down]\u0022).doSomething();\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Faark\u0022 data-cite=\u0022Faark\u0022\u003E\u003Cdiv\u003EI\u0027ve read your posts multiple times but are still note sure what you are trying to re-invent. Who and how exactly would someone benefit from it? (Except you, since *something* would work in a way thats more familiar to yourself).\u003Cp\u003E- You can\u0027t change part cfg\u0027s, VAB/SPH\u0027s craft files, or save games (.sfs\u0027s) without loosing compatibility.\u003C/p\u003E\u003Cp\u003E- You can\u0027t improve ingame performance without re-recreating the game and it is good enough anyway.\u003C/p\u003E\u003Cp\u003E- Load and save processes could be speed up a lot, but again thats barely sth a moder can do.\u003C/p\u003E\u003Cp\u003E- You could invent a new way to build \u0026amp; load stock-compatible part modules, but i don\u0027t think that would be used a lot since thats not really a problem in KSP (though it does miss documentation, i have to admit).\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAgreed. I\u0027m not looking to save craft files, just parse the file for external tools such as delta-v calculators. The idea is to parse the craft object ingame as well to perform operations defined on the fly. EG; change hotkey 2 to release all drogue chutes. The module idea comes from certain re-occurring frustrations that exist for me in the builder interface which could easily be solved with object manipulation on a side panel rather than having to click the object itself.\u003C/p\u003E\u003Cp\u003EI spent yesterday right-clicking on objects over and over again both in the editor and ingame and not getting the properties menu up. It would have been a godsend to do something simple like command my vessel \u0022extend all parts that can extend\u0022. Easy to do with both a find and command text box with something like this: \u0022module.Extend\u0022, \u0022position=extend\u0022\u003C/p\u003E\u003Cp\u003ECheers for the questions.\u003C/p\u003E\n"},{"CreatedByName":"Faark","CreatedById":69775,"CreatedDateTime":"2014-02-26T20:06:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022O-Doc\u0022 data-cite=\u0022O-Doc\u0022\u003E\u003Cdiv\u003EFor example, if I want to get all parts with a toggle module attached to a fuel tank and it is set to down position, I have to look up all the PartModules and cross reference them to the Parts. Expensive operation looping through recursive loops. Also, alot of programming each time you have to find something and call an event it it/them. Easier just to have a call findPart(\u0022name.FT400 \u0026gt; module.Toggle[position=down]\u0022).doSomething();\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe c# code that does that could look like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eforeach(var module in FlightGlobals.ActiveVessel.Parts\u003Cbr\u003E    .Where(part=\u0026gt;part.name==\u0022FT400\u0022)\u003Cbr\u003E    .Select(part=\u0026gt;part.FindModulesImplementing\u0026lt;ModuleToggle\u0026gt;().FirstOrDefault())\u003Cbr\u003E    .Where(toggleModule=\u0026gt;module!=null \u0026amp;\u0026amp; toggleModule.position == TogglePositions.Down))\u003Cbr\u003E{\u003Cbr\u003E    module.doSomething();\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt is ofc a lot longer, since C# is a general purpose language, but shouldn\u0027t have notable performance issues. Running code like that on large vessels a bazillion times per frame wouldn\u0027t be a great idea, ofc, but i don\u0027t see a good way to improve that.\u003C/p\u003E\u003Cp\u003EA nice ingame UI to do stuff could definitively be an improvement. I personally would prefer sth that would be easy to use and doesn\u0027t make me think about syntax or stuff like that. Guess it would just be something like a more powerful and more user friendly action group manager that can be used in flight as well.\u003C/p\u003E\u003Cp\u003EThere were/are a few action group managers, but their screens never looked user-friendly enough for me to give one of them a try.\u003C/p\u003E\n"},{"CreatedByName":"O-Doc","CreatedById":95453,"CreatedDateTime":"2014-02-27T02:58:54Z","Content":"\n\u003Cp\u003EThanks for the code. That\u0027s very useful. The purpose of a syntax would mostly be about programmatically navigating a ship\u0027s parts on the fly. Given the state of the official wiki I\u0027m not even sure how useful it would be to other module developer\u0027s needs. I can see a ton of uses for something like this.\u003C/p\u003E\n"}]}