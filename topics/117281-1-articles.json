{"TopicId":117281,"ForumId":29,"TopicTitle":"Part information missing from GameDatabase.Instance.GetConfigNodes(\u0026quot;PART\u0026quot;)","CreatedByName":"Hexicube","CreatedById":109496,"CreatedDateTime":"2015-07-30T22:18:43Z","PageNum":1,"Articles":[{"CreatedByName":"Hexicube","CreatedById":109496,"CreatedDateTime":"2015-07-30T22:18:43Z","Content":"\n\u003Cp\u003EI\u0027m developing a plugin for a part I\u0027m making, and part of that scans all the parts to see if they contain a node. That part of it works fine, however on the actual ConfigNode given by GameDatabase.Instance.GetConfigNodes(\u0022PART\u0022) there\u0027s several things missing. The missing values are: name/author/TechRequired/entryCost/cost/category/title/manufacturer/description/bulkheadProfiles\u003C/p\u003E\u003Cp\u003EI specifically need the \u0027name\u0027 value to populate a dictionary of parts that have my custom node, for later use with the plugin. Am I doing something wrong?\u003C/p\u003E\u003Cp\u003E[edit] Discovered that I should be using PartLoader.LoadedPartsList instead of directly fetching the part config nodes.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-30T22:24:52Z\u0022 title=\u002207/30/2015 10:24  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 30, 2015\u003C/time\u003E by Hexicube\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-07-30T22:57:25Z","Content":"\n\u003Cp\u003EI have no idea why you\u0027re missing data from the PART nodes (I\u0027ve had no issues retrieving data through the same method), but you can reverse the idea fairly easily\u003C/p\u003E\u003Cp\u003E1) Have a partmodule corresponding to your node. It doesn\u0027t need to do anything (empty class inheriting from partmodule)\u003C/p\u003E\u003Cp\u003E2) Search Partloader for parts containing that module\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EList\u0026lt;AvailablePart\u0026gt; partsWithModule = PartLoader.Instance.parts.Select(p =\u0026gt; p.Modules.Contains(\u0022MyModule\u0022));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhy are you loading data this way anyway? It\u0027s fairly unusual to need somehing like this\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-07-30T22:59:32Z\u0022 title=\u002207/30/2015 10:59  PM\u0022 data-short=\u00228 yr\u0022\u003EJuly 30, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Hexicube","CreatedById":109496,"CreatedDateTime":"2015-07-31T03:04:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003EI have no idea why you\u0027re missing data from the PART nodes (I\u0027ve had no issues retrieving data through the same method), but you can reverse the idea fairly easily\u003Cp\u003E1) Have a partmodule corresponding to your node. It doesn\u0027t need to do anything (empty class inheriting from partmodule)\u003C/p\u003E\u003Cp\u003E2) Search Partloader for parts containing that module\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EList\u0026lt;AvailablePart\u0026gt; partsWithModule = PartLoader.Instance.parts.Select(p =\u0026gt; p.Modules.Contains(\u0022MyModule\u0022));\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhy are you loading data this way anyway? It\u0027s fairly unusual to need somehing like this\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003EI explicitly needed the raw name of the part so I knew the type of part loaded, adding a module wouldn\u0027t suffice for this. It\u0027s possible those values were missing due to the fact I scanned for the data way after the game had loaded, I wanted to be 100% sure that my code was ran after all parts were loaded in (and after ModuleManager fiddled with any values).\u003Cp\u003EIt is a bit unusual, yeah. I\u0027m creating my own version of OSE-Workshop as the dev told me they were currently uninterested in having parts broke down into multiple sub-components as it would be a lot of work to implement such a thing. I\u0027m building a dictionary by raw part name containing the raw components of that part, along with the time it takes, the electric charge cost, and a generated icon from KIS (as I already will be using that for inventories).\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-07-31T04:28:22Z","Content":"\n\u003Cp\u003EYep, the PartLoader strips various things from the node on load. It\u0027s annoying.\u003C/p\u003E\n"},{"CreatedByName":"Hexicube","CreatedById":109496,"CreatedDateTime":"2015-07-31T08:03:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EYep, the PartLoader strips various things from the node on load. It\u0027s annoying.\u003C/div\u003E\u003C/blockquote\u003EIt\u0027s not annoying, you just have to find the correct way according to squad\u0027s programming. What it is, though, is weird. Can\u0027t imagine why it would be needed.\u003Cp\u003EI suppose iterating over the AvailablePart list is faster in the end, too.\u003C/p\u003E\n"}]}