{"TopicId":59040,"ForumId":36,"TopicTitle":"[WIP] Jebnix - A kOS Alternative","CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-01-06T04:35:42Z","PageNum":8,"Articles":[{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-04-28T04:21:45Z","Content":"\n\u003Cp\u003EAt the same time, given that this is \u0022Jebnix,\u0022 I think it might be fun and helpful to have a handful of *nix-like utilities to play with if people want to.\u003C/p\u003E\n"},{"CreatedByName":"nanobot","CreatedById":108199,"CreatedDateTime":"2014-04-28T06:31:22Z","Content":"\n\u003Cp\u003EWhat if the \u0022shell\u0022 just compiled the entered lines on-the-fly and uses the same backend? It should be fast enough. To me, dropping the interactive mode (which I would really like to have) for this reason would be overkill.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-04-28T07:20:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022nanobot\u0022 data-cite=\u0022nanobot\u0022\u003E\u003Cdiv\u003EWhat if the \u0022shell\u0022 just compiled the entered lines on-the-fly and uses the same backend? It should be fast enough. To me, dropping the interactive mode (which I would really like to have) for this reason would be overkill.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe one major issue with that is that the compiler and the program counter would have to talk to each other, just like an interpreter does. It wouldn\u0027t simplify things very much. That\u0027s pretty much what I\u0027m doing now.\u003C/p\u003E\u003Cp\u003EConsider this basic example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E1   set x to 0.\u003Cbr\u003E2   while x \u0026lt; 5\u003Cbr\u003E3   {\u003Cbr\u003E4       set x to x \u002B 1.\u003Cbr\u003E5       print x.\u003Cbr\u003E6   }\u003Cbr\u003E7   print \u0022Finished!\u0022.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EConsider what is happening when it\u0027s translated into a pseudoassembly, and then executed without the compiler talking to the program counter.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// When the whole thing is compiled and run\u003Cbr\u003E// Assembly:\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0\u003Cbr\u003E    jmp while_loop\u003Cbr\u003E    print \u0022Finished!\u0022\u003Cbr\u003E\u003Cbr\u003Ewhile_loop:\u003Cbr\u003E   add x, 1\u003Cbr\u003E   print x\u003Cbr\u003E   cmp x, 5\u003Cbr\u003E   jl while_loop\u003Cbr\u003E   ret\u003Cbr\u003E\u003Cbr\u003E// Output:\u003Cbr\u003E1\u003Cbr\u003E2\u003Cbr\u003E3\u003Cbr\u003E4\u003Cbr\u003E5\u003Cbr\u003EFinished!\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Compiling one line at a time. The \u0026lt;-- indicates where the program counter is.\u003Cbr\u003E// When line 1 is compiled alone:\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0   \u0026lt;--\u003Cbr\u003E\u003Cbr\u003E// Then lines 2 and 3 are compiled:\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0\u003Cbr\u003E\u003Cbr\u003Ewhile_loop:\u003Cbr\u003E    // this is where the block should go\u003Cbr\u003E    cmp x, 5          \u0026lt;--   // this will begin an unending loop\u003Cbr\u003E    jl while_loop\u003Cbr\u003E\u003Cbr\u003E// Then line 4 is compiled:\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0\u003Cbr\u003E\u003Cbr\u003Ewhile_loop:\u003Cbr\u003E    add x, 1       \u0026lt;-- // on the next pass, the counter winds up here. The loop will end within 17 cycles, which at even at 100 Hz is less than a 5th of a second. \u003Cbr\u003E    cmp x, 5\u003Cbr\u003E    jl while_loop\u003Cbr\u003E\u003Cbr\u003E// Then lines 5 and 6 are compiled\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0\u003Cbr\u003E\u003Cbr\u003Ewhile_loop:\u003Cbr\u003E    add x, 1\u003Cbr\u003E    print x\u003Cbr\u003E    cmp x, 5\u003Cbr\u003E    jl while_loop\u003Cbr\u003E                       \u0026lt;--  // outside the loop, waiting for an instruction\u003Cbr\u003E\u003Cbr\u003E// Line 7 is compiled\u003Cbr\u003Emain:\u003Cbr\u003E    mov x, 0\u003Cbr\u003E    jmp while_loop\u003Cbr\u003E    print \u0022Finished!\u0022\u003Cbr\u003E\u003Cbr\u003Ewhile_loop:\u003Cbr\u003E   add x, 1\u003Cbr\u003E   print x\u003Cbr\u003E   cmp x, 5\u003Cbr\u003E   jl while_loop\u003Cbr\u003E   ret               \u0026lt;-- // this is the new instruction. the call stack is empty, however, resulting in an underflow\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe way to fix this would be to halt execution whenever a control block is about to be written by the user, then compiling the block when the user closes the block. This, however, presents its own set of problems. Consider if I\u0027d left out the period on line 4. Jebnix wouldn\u0027t let the user know about the syntax error until compilation. By that time, they\u0027ve already written the line, and it may be buried deep inside a long block of code which now has to be rewritten from scratch.\u003C/p\u003E\u003Cp\u003EI\u0027ll admit that it\u0027s late, and I may not be able to think of an obvious solution to this problem, but this is how things look to me at the moment.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-04-28T10:41:03Z","Content":"\n\u003Cp\u003EAre you planning to include debugging tools with the utilities for Jebnix? I am totally in favor of the compiled version, but need to debug. At least a step/trace with an output display. \u003C/p\u003E\u003Cp\u003EI admit I don\u0027t see a real difference, from a coder perspective, among an interpreter and a JIT compiler/launcher with debug options on (bear with me, I don\u0027t write compilers). \u003C/p\u003E\u003Cp\u003EBut some hurdles you wrote about (e.g. the program counter) are certainly there in both an interpreter and a debugger.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-04-28T11:11:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EAre you planning to include debugging tools with the utilities for Jebnix? I am totally in favor of the compiled version, but need to debug. At least a step/trace with an output display. \u003Cp\u003EI admit I don\u0027t see a real difference, from a coder perspective, among an interpreter and a JIT compiler/launcher with debug options on (bear with me, I don\u0027t write compilers). \u003C/p\u003E\u003Cp\u003EBut some hurdles you wrote about (e.g. the program counter) are certainly there in both an interpreter and a debugger.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will be including a debugger, which will include stepping, stack trace, and variable values, as well as the values of the evaluation stack, all with symbols (the virtual machine will be a stack machine). You will also be able to do a memory dump.\u003C/p\u003E\u003Cp\u003EI will also be including the console debugger that I use to test everything, which is simply a Windows Console application that emulates the machine in the game, except without a rocket attached to it.\u003C/p\u003E\n"},{"CreatedByName":"nanobot","CreatedById":108199,"CreatedDateTime":"2014-04-28T12:15:11Z","Content":"\n\u003Cp\u003EI see what you meant, woodywood245. I agree with you that there should not a machine code generation invoked every time the input gets partially parsed, since this can change the semantics of a program in a serious way.\u003C/p\u003E\u003Cp\u003EWhat about this:\u003C/p\u003E\u003Cp\u003E- The interpreter expects user input line for line and tries to parse this line, starting with an empty parsing stack.\u003C/p\u003E\u003Cp\u003E- The input is tried to be parsed into a \u0026lt;statement\u0026gt; node. If the parser needs more tokens, print a symbol like \u0026gt; that prompts the user for another line (easiest way to do this is a blocking readNextToken() method)\u003C/p\u003E\u003Cp\u003E- If the input is a valid statement, execute it.\u003C/p\u003E\u003Cp\u003EThis can be generalized for the whole language grammar. Most important for this is to specify what exactly is an executable piece of code.\u003C/p\u003E\u003Cp\u003EAssuming you have a simple formal grammar like this:\u003C/p\u003E\u003Cp\u003E\u0026lt;statement\u0026gt; -\u0026gt; \u0026lt;expr\u0026gt; := \u0026lt;expr\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;statement\u0026gt; -\u0026gt; while (\u0026lt;expr\u0026gt;) \u0026lt;statement\u0026gt;\u003C/p\u003E\u003Cp\u003E\u0026lt;statement\u0026gt; -\u0026gt; { \u0026lt;statement-list\u0026gt; }\u003C/p\u003E\u003Cp\u003E\u0026lt;statement-list\u0026gt; -\u0026gt; \u00C3\u017D\u00C2\u00B5 | \u0026lt;statement\u0026gt;\u0026lt;statement-list\u0026gt;\u003C/p\u003E\u003Cp\u003EThen a \u0026lt;statement\u0026gt;, defined like above, is the minimal executable piece of code.\u003C/p\u003E\u003Cp\u003EI will demonstrate a parsing process using an interactive shell.\u003C/p\u003E\u003Cp\u003EThe parser should start with expecting a \u0026lt;statement\u0026gt; node.\u003C/p\u003E\u003Cp\u003EThe \u0026lt;statement\u0026gt; node then requires reading a { or a \u0022while\u0022 or an expression.\u003C/p\u003E\u003Cp\u003ELet the input of the user be:\u003C/p\u003E\u003Cp\u003E\u0026gt; while (\u003C/p\u003E\u003Cp\u003EThe parser sees the \u0022while\u0022 keyword and then knows it has to use production 2. (I think that a recursive descent parser is a good option for this kind of user input interpretation).\u003C/p\u003E\u003Cp\u003EWhile resolving the right hand side of production 2, it consumes the tokens \u0022while\u0022 and \u0022(\u0022 and then requires an \u0026lt;expr\u0026gt;. However, since the sequence of remaining tokens is empty, all the parser will do is again printing a prompt:\u003C/p\u003E\u003Cp\u003E\u0026gt;\u003C/p\u003E\u003Cp\u003EAssume the user will now enter the expression and closing \u0022)\u0022 :\u003C/p\u003E\u003Cp\u003E\u0026gt; (3 \u0026lt; 4) == !false )\u003C/p\u003E\u003Cp\u003EThen the parser can parse the \u0026lt;expression\u0026gt; node and consume the ) token, requiring a \u0026lt;statement\u0026gt; (but knowing that this one is \u0022one level deeper\u0022 than the original one).\u003C/p\u003E\u003Cp\u003EAfter this statement was also parsed, the production\u003C/p\u003E\u003Cp\u003E\u0026lt;statement\u0026gt; -\u0026gt; while (\u0026lt;expr\u0026gt;) \u0026lt;statement\u0026gt;\u003C/p\u003E\u003Cp\u003Eis finished and the parser returns to the original \u0022\u0026lt;statement\u0026gt;\u0022 call, then producing the required machine code.\u003C/p\u003E\u003Cp\u003EIn this grammar, also a function definition could be modeled as some kind of statement, but one with no side effect or output except that it internally stores the new function.\u003C/p\u003E\u003Cp\u003EI think I will now first study the parser that you use, I worry everything I wrote is already obvious for you. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT\u003C/p\u003E\u003Cp\u003EOk, I see that at least on github, the Compiler and CompiledScript files are empty.\u003C/p\u003E\u003Cp\u003ESo if you want, I can give you some directions on how a multi-stage compiler (tokenizer -\u0026gt; syntax parser -\u0026gt; assembly code generator) could be designed.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-04-28T13:05:36Z\u0022 title=\u002204/28/2014 01:05  PM\u0022 data-short=\u002210 yr\u0022\u003EApril 28, 2014\u003C/time\u003E by nanobot\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Camacha","CreatedById":59088,"CreatedDateTime":"2014-04-28T16:14:45Z","Content":"\n\u003Cp\u003EI understand the problem \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E For me the live mode/interactive mode is helpful for reasons explained, but it is not something critical. If there might be another way of quickly testing code without having to go back and forth, that should work fine too. I would just hope to avoid a situation where you need to go through a number of steps each try, as that is something that would drive me a bit crazy in kOS sometimes. Of course, the lack of accurate error messages and often sparse or ambivalent documentation amplified the problem a lot.\u003C/p\u003E\u003Cp\u003ESo no, I would not be terribly disappointed if the interactive mode disappeared. It is a luxery and one mostly needed to compensate for other problems. As long as the points I mentioned are taken into account (which I feel they are), things should be fine.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-05-01T07:56:58Z","Content":"\n\u003Cp\u003EI\u0027ve just added an Official Features List. This list is not complete (I still need to add stuff to it), but it contains a good idea of what I\u0027ve got done so far and what I need to do still. This only applies to the compiled version, which I consider experimental.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/griderd/Jebnix/wiki/Official-Features\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix/wiki/Official-Features\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-05-05T00:42:53Z","Content":"\n\u003Cp\u003EThis is a sample of the documentation I am writing for this project. This page describes the Vector structure in KerboScript\u002B\u002B. \u003Ca href=\u0022https://github.com/griderd/Jebnix/wiki/Vector-Structure-(KerboScript)\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/griderd/Jebnix/wiki/Vector-Structure-(KerboScript)\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIs there anything else you\u0027d like to see in the documentation that will make working with KerboScript\u002B\u002B easier?\u003C/p\u003E\u003Cp\u003EP.S. The other wiki pages, except for Official Features, are out of date by several weeks because of the changes I\u0027ve made. However, I will be updating them as I go.\u003C/p\u003E\n"},{"CreatedByName":"Masked Turk","CreatedById":76284,"CreatedDateTime":"2014-05-20T07:54:53Z","Content":"\n\u003Cp\u003EIs it really worth developing an alternate to kOS instead of contributing resources/ideas to the existing system that has an audience? Don\u0027t get me wrong, I\u0027m not knocking your work, but it does seem a shame to fragment what is probably already a fairly small userbase.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-05-20T11:09:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Masked Turk\u0022 data-cite=\u0022Masked Turk\u0022\u003E\u003Cdiv\u003EIs it really worth developing an alternate to kOS instead of contributing resources/ideas to the existing system that has an audience? Don\u0027t get me wrong, I\u0027m not knocking your work, but it does seem a shame to fragment what is probably already a fairly small userbase.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EInformation Technology is filled with solutions that have turned obsolete and, though great efforts were made to keep them alive, ultimately had to be abandoned because new ones performed much better. Notable are MS DOS, parallel ports, floppy disks. Even if very used, ultimately those technologies had to be considered a legacy, and be removed to allow progress.\u003C/p\u003E\u003Cp\u003EThe original kOS is really an example of the above. Its language has so many quirks and shortcomings, it was really needed to improve. But, as often happens with new things in IT, different and sometimes opposite solutions emerge. \u003C/p\u003E\u003Cp\u003EThere is of course the new kOS Scriptable Autopilot System, by Erendrake. Originally started as a maintenance update to kOS, it now implements a revamped kerboscript syntax. But it strictly adheres to the original kOS code in many ways, and as a result it is sometimes even slower to compute.\u003C/p\u003E\u003Cp\u003EJebnix is not yet ready for use, therefore you don\u0027t see as much of a user base with it yet. But it has some great potential because it completely abandons the kOS code and implements its own (still able to interpret kerboscript, but also to run it in compiled form). Performance gains are expected to be impressive, and further improvements in the language are coming as well.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-05-21T13:38:21Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EInformation Technology is filled with solutions that have turned obsolete and, though great efforts were made to keep them alive, ultimately had to be abandoned because new ones performed much better. Notable are MS DOS, parallel ports, floppy disks. Even if very used, ultimately those technologies had to be considered a legacy, and be removed to allow progress.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI would say that there are many more examples of Engineering projects that are total rewrites and never see the light of day, I know I have been part of my fair share of these \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EThe original kOS is really an example of the above. Its language has so many quirks and shortcomings, it was really needed to improve. But, as often happens with new things in IT, different and sometimes opposite solutions emerge. \u003Cp\u003EThere is of course the new kOS Scriptable Autopilot System, by Erendrake. Originally started as a maintenance update to kOS, it now implements a revamped kerboscript syntax. But it strictly adheres to the original kOS code in many ways, and as a result it is sometimes even slower to compute.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWe do not strictly adhere to anything if we think we can improve it. Truly very little code remains of the addon that Nivekk left us. If you had used it in the last month you would notice that the new kOS is considerably faster than the old one.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EJebnix is not yet ready for use, therefore you don\u0027t see as much of a user base with it yet. But it has some great potential because it completely abandons the kOS code and implements its own (still able to interpret kerboscript, but also to run it in compiled form). Performance gains are expected to be impressive, and further improvements in the language are coming as well.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EScripts run with kOS today are compiled and run much faster than before thanks to a lot of hard work by our small team. we are adding new features almost every day such as a vector drawing tool and an improved file editor that we just issued a pre-release for.\u003C/p\u003E\u003Cp\u003EI welcome anyone who wants to develop a mod with their own time. Someone bringing new ideas to the table is exciting for everyone in the modding community. I wish woodywood245 the best of luck with his project.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-07-03T01:10:01Z","Content":"\n\u003Cp\u003EAaaannnd we\u0027re back!\u003C/p\u003E\u003Cp\u003EI went AWOL for a while. As I\u0027d mentioned in April, I\u0027d made some major life changes, and I was working in relation to those. In short, I quit school and I\u0027m starting a business. As a result, I\u0027ve been doing a quite a lot of work in that area to get it going.\u003C/p\u003E\u003Cp\u003EHowever, I haven\u0027t stopped working on this. I\u0027ve just performed a commit a few minutes ago, which fixed a few known problems in the code. Hopefully I\u0027ll get a few things done over the next couple days.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-07-03T02:05:39Z","Content":"\n\u003Cp\u003EA sample of the WinForms Jebnix Debugger. This includes the new video memory viewer.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://scontent-b-sjc.xx.fbcdn.net/hphotos-xfp1/t31.0-8/10353349_699029106824261_2464521110868817556_o.png\u0022 alt=\u002210353349_699029106824261_2464521110868817556_o.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://scontent-a-sjc.xx.fbcdn.net/hphotos-xaf1/t31.0-8/10368924_699029126824259_4388765036940425491_o.png\u0022 alt=\u002210368924_699029126824259_4388765036940425491_o.png\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2014-07-03T08:43:33Z","Content":"\n\u003Cp\u003ESo happy to see you are back (again), and keep making progress with Jebnix. Wish all is good IRL for you \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003C/p\u003E\u003Cp\u003EIf the disclaimer with the github repo is still current, Jebnix is not yet ready for independent testing. Would you point what steps still are required to make the first beta version (that I would like to run) ? Not asking timings or schedules, unless you want to tell.\u003C/p\u003E\n"},{"CreatedByName":"FennexFox","CreatedById":111279,"CreatedDateTime":"2014-07-06T04:55:54Z","Content":"\n\u003Cp\u003EAre there some mods like \u0027Mechjeb embedded\u0027 which embed Jebnix function to all command pod?\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-07-06T06:28:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003ESo happy to see you are back (again), and keep making progress with Jebnix. Wish all is good IRL for you \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E.\u003Cp\u003EIf the disclaimer with the github repo is still current, Jebnix is not yet ready for independent testing. Would you point what steps still are required to make the first beta version (that I would like to run) ? Not asking timings or schedules, unless you want to tell.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI am at the point where the control flow from compilation to execution is complete. There are a lot of things that need to be implemented in both the compiler and runtime. I also need to set up vehicle control and some additional data types. Then I\u0027ll implement a KSP version of the console. That\u0027s the short version.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2014-07-06T06:31:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FennexFox\u0022 data-cite=\u0022FennexFox\u0022\u003E\u003Cdiv\u003EAre there some mods like \u0027Mechjeb embedded\u0027 which embed Jebnix function to all command pod?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EJebnix is not complete. So no, not yet.\u003C/p\u003E\n"},{"CreatedByName":"Assossa","CreatedById":119669,"CreatedDateTime":"2014-08-24T19:33:47Z","Content":"\n\u003Cp\u003EHey woodywood, this mod looks amazing. I was wondering if i could help develop it. I wouldn\u0027t be a huge help, but hopefully I can help implement some of the features faster.\u003C/p\u003E\u003Cp\u003EThanks for considering, I am an experienced java and c# developer by the way.\u003C/p\u003E\n"},{"CreatedByName":"woodywood245","CreatedById":72562,"CreatedDateTime":"2015-02-07T21:17:31Z","Content":"\n\u003Cp\u003EI\u0027m back! Again. As usual, life kinda went on a rollercoaster ride, and I haven\u0027t had as much time to work on this as I\u0027d hoped. However, I\u0027m getting back into it, reading the code, fixing stupid mistakes, removing bugs, and implementing features. Or in some cases, completely re-implementing features (WHAT WAS I THINKING!?)\u003C/p\u003E\u003Cp\u003EOver the last couple days, I\u0027ve fixed some problems in compiler\u0027s implementation of the Shunting-yard algorithm, fixed issues with the PRINT keyword, re-implemented SET, fixed a keyboard input issue, and added a handful of extra architectural stuff. I\u0027m not done yet, though.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Assossa\u0022 data-cite=\u0022Assossa\u0022\u003E\u003Cdiv\u003EHey woodywood, this mod looks amazing. I was wondering if i could help develop it. I wouldn\u0027t be a huge help, but hopefully I can help implement some of the features faster.\u003Cp\u003EThanks for considering, I am an experienced java and c# developer by the way.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for the offer. I\u0027ll think about it, but to be honest, I\u0027m a bit of a control freak. I also don\u0027t currently have a clear development roadmap because I\u0027ve been off the project for so long. So as far as that goes, I wouldn\u0027t exactly know what to have anyone else work on, because I\u0027m not sure what I\u0027m working on until I\u0027m halfway into it.\u003C/p\u003E\n"},{"CreatedByName":"VentZer0","CreatedById":130750,"CreatedDateTime":"2015-02-13T12:48:19Z","Content":"\n\u003Cp\u003EI am curious how this will turn out. I\u0027d like to suggest in terms of functionality that you also keep people in mind who are more into planes and like to autopilot them. Like me for example \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003ECurrently I am working on a autopilot in kOS for my drone planes (which are targets for my missile tests) and I have serious issues with steering the plane into turns and have them turn at ~0 vertical speed, ALT hold while turning. I would love if you could implement some smart PID-controller function. That way it would also be very easy to have a SAS alternative tailored to your craft, since SAS and FAR/NEAR do like eachother, planes start to oszillate extremely at some point with FAR or NEAR.\u003C/p\u003E\u003Cp\u003EWith a PID function it that we could tie into the controls this behaviour could be avoided.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-13T13:10:09Z\u0022 title=\u002202/13/2015 01:10  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 13, 2015\u003C/time\u003E by VentZer0\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2015-02-17T17:18:34Z","Content":"\n\u003Cp\u003EPlease confirm is Jebnix still developed ? From what i saw at github, last activity was in July of 2014, with one branch updated 10 days ago.\u003C/p\u003E\n"},{"CreatedByName":"lodestar","CreatedById":101720,"CreatedDateTime":"2015-02-17T17:58:29Z","Content":"\n\u003Cp\u003EI\u0027ve been experimenting with kOS and it\u0027s great that an alternative is coming up, but how hard can it be to embed a Lua or Python interpreter in KSP, instead of writing a new language from scratch?\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2015-02-17T18:47:23Z","Content":"\n\u003Cp\u003EAs far as languages are concerned, my preference is Pascal. I does not allow various ambiguities both in program structure and use of variables. If i remember right, there is \u0022engine\u0022 for Pascal Script, which is open source, so reviewing for implementation in Jebnix should be a matter of time and effort, not royalties nor side-stepping vulture squadrons protecting intellectual property.\u003C/p\u003E\n"}]}