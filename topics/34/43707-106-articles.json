{"TopicId":43707,"ForumId":34,"TopicTitle":"kOS Scriptable Autopilot System 0.9","CreatedByName":"KevinLaity","CreatedById":68050,"CreatedDateTime":"2013-08-24T14:28:17Z","PageNum":106,"Articles":[{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-20T23:07:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI\u0027d really like to see that version hosted somewhere precompiled. I stopped testing because of that problem. It pretty much broke all my mission scripts.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIm at work so i wasnt able to run it in KSP but i have put up a new installer with just the change you wanted. I should have done it before.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/erendrake/KOS/releases/tag/v0.10.0P2\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/erendrake/KOS/releases/tag/v0.10.0P2\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-21T00:07:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003E\u003Cstrong\u003E@erendrake\u003C/strong\u003E\u003C/span\u003E\u003Cp\u003ESo \u0027running concurrently\u0027 can never happen in a single core system, as --- essentially --- the single core can only do one thing at a time and to the core everything is the same thread? Correct? \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo a single core system it is not true that everything is on the same \u0022thread\u0022, it only executes one thread at a time but each process has at least one execution thread of its own. The code in KOS is synchronous, never attempting to spin off another thread. If you are seeing out of order execution, you should report is as a bug.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-21T05:22:59Z","Content":"\n\u003Cp\u003EI have another pre release version available on github.\u003C/p\u003E\u003Cp\u003Ev0.10.0 Prerelease 3\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/erendrake/KOS/releases/tag/v0.10.0P3\u0022 rel=\u0022external nofollow\u0022\u003Ev0.10.0P3\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E I feel pretty good about this one as i have successfully run all of my scripts and a few others that have been posted around the forums here and so far, they have all run successfully like they did in 0.9.2.\u003C/p\u003E\u003Cp\u003EIf there are no objections for a day or so, ill try and get this up on the spaceport and the OP.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-21T05:25:07Z\u0022 title=\u002201/21/2014 05:25  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 21, 2014\u003C/time\u003E by erendrake\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-21T08:31:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003ETo a single core system it is not true that everything is on the same \u0022thread\u0022, it only executes one thread at a time but each process has at least one execution thread of its own. The code in KOS is synchronous, never attempting to spin off another thread. If you are seeing out of order execution, you should report is as a bug.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t think weissel was claiming that kOS is multithreaded ON the host computer (your PC) but that the fake virtual computer it presents is multithreaded. That just like a real computer with a single core handles the threads of processes by switching between them very fast in serial, that kOS also in its own single host OS\u0027s thread does the same thing - it switches between the threads of the fake virtual computer in serial.\u003C/p\u003E\u003Cp\u003EWhile this is perfectly plausible and kOS could have been written that way, I didn\u0027t see it behaving like this when I last tested how WHEN/THEN worked.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-21T08:47:59Z\u0022 title=\u002201/21/2014 08:47  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 21, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Cilph","CreatedById":21477,"CreatedDateTime":"2014-01-21T08:33:42Z","Content":"\n\u003Cp\u003ETo whomever is going to take control of kOS, contact me with wishes on how you want to do RT2 integration.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-21T08:46:14Z","Content":"\n\u003Cp\u003E[ I edited this to remove weissel\u0027s unnecessary hubristic large font tags.]\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003E@Steven Mading\u003C/strong\u003E \u003Cp\u003EI get \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E1\u003Cbr\u003E A\u003Cbr\u003E  a\u003Cbr\u003E2\u003Cbr\u003E B\u003Cbr\u003E  b\u003Cbr\u003E3\u003Cbr\u003E C\u003Cbr\u003E  c\u003Cbr\u003E4\u003Cbr\u003E D\u003Cbr\u003E  d\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhat do you get?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI always got the behavior I described already. Which does not interleave the outputs like this, but does what I already described. The \u0022when\u0022 interrupted the main program and didn\u0027t give control back until it hit the end of its THEN block.\u003C/p\u003E\u003Cp\u003EIf I\u0027d gotten behavior like you describe I\u0027d have agreed with you.\u003C/p\u003E\u003Cp\u003EBut I admit that my experience testing this was several kOS revisions ago.\u003C/p\u003E\u003Cp\u003ECould this be behavior that changed with versions? Kevin had been fiddling with the execution contexts a lot when he increased the speed by 5x, so this may be behavior that changed then. I assure you, the interleaving of output is NOT what it did the last time I tried this. I tested it specifically because it was badly documented how it worked and therefore trying it was the only way to see how it worked.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EUh --- which things would be prohibited? Examples please?\u003C/p\u003E\u003Cp\u003EYou cannot \u0022fork\u0022, that\u0027s right, it\u0027s not a new process, you share variable space and environment (like which volume you\u0027re looking at) ... but --- except for it being a thread and not a process and all that that implies --- what code would be prohibited?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe only thing that I saw running concurrently was NOT the body of the THEN, but merely the conditional checks of the WHEN. The WHEN condition check was interleaved between every statement in the main program, but the body\u0027s statements weren\u0027t. So with the construct \u0022WHEN foo THEN bar\u0022, the only things that could be really threaded were the things you could put in foo, not the things you put in bar. i.e. only the conditional boolean checks were behaving in a threaded way. Once they triggered, the body would run in serial.\u003C/p\u003E\u003Cp\u003EI believe you that the behavior has changed. But it wasn\u0027t like this the last time I experimented to learn how WHEN/THEN work. I explicitly tested for whether the THEN body ran concurrently by performing a test exactly like the one you demonstrate here and it didn\u0027t. At least, not about 5 months ago it didn\u0027t.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-21T08:57:30Z\u0022 title=\u002201/21/2014 08:57  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 21, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Zander","CreatedById":76100,"CreatedDateTime":"2014-01-21T08:52:33Z","Content":"\n\u003Cp\u003E@weissel \u003C/p\u003E\u003Cp\u003EI tested and you are right. It works. But it is very troublesome to have to open and close each terminal like that. Is there any way I can create a script that commands other KOS computers to independently run scripts in their own terminal in the same way you can do it manually by opening each terminal?\u003C/p\u003E\u003Cp\u003EIf not is it possible to have multiple terminals open at the same time?\u003C/p\u003E\u003Cp\u003Ethanks\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-21T11:36:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003EI have another pre release version available on github.\u003Cp\u003Ev0.10.0 Prerelease 3\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/erendrake/KOS/releases/tag/v0.10.0P3\u0022 rel=\u0022external nofollow\u0022\u003Ev0.10.0P3\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI just tested it with my old Duna mission script again and it worked as far as I had time to test it for. I tested it up to the point of landing on Duna, then had to call it quits and go to bed. The rest of the Duna mission script after the landing on Duna just consists of calling the same programs again with different parameters so if it works up to the point of landing that means I\u0027ve exercised all the software in the mission at least once already. So I\u0027d say it seems to be working.\u003C/p\u003E\u003Cp\u003EIt works great now. The DELTAV problem is fixed *AND* it\u0027s also running at full speed again. I don\u0027t know what changed but whatever it was it fixed the big lags that were in the previous 0.10 version (granted it still has the choppiness that kOS has always had, but it\u0027s now back to performing on par with how it used to run in 0.9.2).\u003C/p\u003E\u003Cp\u003EI haven\u0027t tested any of the new functionality in 0.9.2. This was just a regression test using old scripts. Some of that new content could trim down a lot of my scripts. For example I had my own private body database for all the planetary information which looks like it will be obsolete now with the new BODY: fields.\u003C/p\u003E\u003Cp\u003EDid anyone ever add the natural log function: ln(x) ? It\u0027s needed to answer the math problem: \u0022Given the scale height and sea level pressure of the body\u0027s atmosphere, and a desired air pressure P, calculate A, the the altitude above sea level at which the air pressure will be P.\u0022 My ascent script uses this to calculate the altitude at which to begin tipping over. At the moment it resorts to calculating it by approximating ln(x) by a series calculation in a loop prior to liftoff, which is a bit clunky but works.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-21T11:43:13Z\u0022 title=\u002201/21/2014 11:43  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 21, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sarkun","CreatedById":10559,"CreatedDateTime":"2014-01-21T11:46:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EDid anyone ever add the natural log function: ln(x) ? It\u0027s needed to answer the math problem: \u0022Given the scale height and sea level pressure of the body\u0027s atmosphere, and a desired air pressure P, calculate A, the the altitude above sea level at which the air pressure will be P.\u0022 My ascent script uses this to calculate the altitude at which to begin tipping over. At the moment it resorts to calculating it by approximating ln(x) by a series calculation in a loop prior to liftoff, which is a bit clunky but works.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESensor reporter adds a few math functions, ln(x) among them. Don\u0027t know if it works in 0.23 though, I kind of abandoned kOS until it gets stable again.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/51211-Sensor-Reporter-for-kOS\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/51211-Sensor-Reporter-for-kOS\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-21T11:49:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarkun\u0022 data-cite=\u0022sarkun\u0022\u003E\u003Cdiv\u003ESensor reporter adds a few math functions, ln(x) among them. Don\u0027t know if it works in 0.23 though, I kind of abandoned kOS until it gets stable again.\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/51211-Sensor-Reporter-for-kOS\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://forum.kerbalspaceprogram.com/threads/51211-Sensor-Reporter-for-kOS\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe author of sensor reporter has chosen to go with making a new kOS-like mod from the ground up. It looks like a very cool project, but as it\u0027s being made from scratch it will likely be a while before anything is released, I imagine.\u003C/p\u003E\n"},{"CreatedByName":"whaaw","CreatedById":69050,"CreatedDateTime":"2014-01-21T18:46:47Z","Content":"\n\u003Cp\u003EHow does the new commands work Bodyathmosphere, atm, exists, they wont work for me. also tryed body:atm bodyatmosphere:atm. i dont get it just from source code.\u003C/p\u003E\n"},{"CreatedByName":"Nando","CreatedById":69475,"CreatedDateTime":"2014-01-22T02:15:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022whaaw\u0022 data-cite=\u0022whaaw\u0022\u003E\u003Cdiv\u003EHow does the new commands work Bodyathmosphere, atm, exists, they wont work for me. also tryed body:atm bodyatmosphere:atm. i dont get it just from source code.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eprint body(ship:obt:body):atm:height.\u003Cbr\u003Eprint body(target:obt:body):atm:height.\u003Cbr\u003Eprint body(body):atm:height.\u003Cbr\u003Eprint body(\u0022duna\u0022):atm:height.\u003Cbr\u003Eprint bodyatmosphere(\u0022duna\u0022):height.\u003Cbr\u003Eprint bodyatmosphere(ship:obt:body):height.\u003Cbr\u003Eprint bodyatmosphere(body):height.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"weissel","CreatedById":81306,"CreatedDateTime":"2014-01-24T23:06:35Z","Content":"\n\u003Cp\u003E@Steven Mading\u003C/p\u003E\u003Cp\u003ESorry for the tags\u0027 font size. It seems I overdid it. Reduced.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E I always got the behavior I described already. [... snip ...] \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat explains it. Had I gotten the results you had observed, I would of course have had to agree with you. And since you got those results, obviously that was yet another part of kOS which was changed.\u003C/p\u003E\u003Cp\u003E@Zander\u003C/p\u003E\u003Cp\u003EUntil there\u0027s an \u0027auto-run\u0027 command implemented, you\u0027ll have to start each kOS unit\u0027s processing via the terminal, as far as I can tell; I\u0027ve not yet worked much with multiple kOS units on a single entity, so I don\u0027t know.\u003C/p\u003E\u003Cp\u003E@erendrake\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003ETo a single core system it is not true that everything is on the same \u0022thread\u0022, it only executes one thread at a time but each process has at least one execution thread of its own. The code in KOS is synchronous, never attempting to spin off another thread. If you are seeing out of order execution, you should report is as a bug.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI guess it depends on the point of view. To the CPU, it\u0027s all one code stream (one thread), to the programs it\u0027s one or more processes of one or more threads each, to the OS it\u0027s multiple processes and threads that have to be spun into the single stream of code pushed to the CPU.\u003C/p\u003E\u003Cp\u003EIn kOS I (seem to) get a round-robin execution of the main code and each active WHEN group, one command at a time. So the \u0027synchronus code in kOS\u0027 is comparable to the CPU, while each WHEN (and the main code strea,) is comparable to a program with multiple threads, wheras the round-robin distributing part of kOS would be comparable to the OS spinning together multiple threads.\u003C/p\u003E\u003Cp\u003ETo the programmer it doesn\u0027t matter much --- ignoring speed optimization --- if the OS your program is running under is actually emulated in a single thread (like kOS) or emulated on multiple threads or runnning on a virtual machine with one or more cores available to it or running natively on a single core or multi-core machine. It matters if the execution is (pseudo)parallel or not. kOS does pseudo-parallel, which is what matters, as you can run several code parts \u0027at the same time\u0027 --- opposed to \u0022you can\u0027t run out of order at all --- no WHEN, no ON\u0022 or \u0022an active interrupt (WHEN, ON) blocks the execution of everything else until it\u0027s done\u0022.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-26T21:41:10Z","Content":"\n\u003Cp\u003E@weissel \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIn kOS I (seem to) get a round-robin execution of the main code and each active WHEN group, one command at a time.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EExactly, one at a time. In a Superloop.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ETo the programmer it doesn\u0027t matter much \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eto the programmer threads matter very much. If you use more than one you must synchronize context when you want to migrate between them.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E(pseudo)parallel\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes not exist, its either parallel or series.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI guess it depends on the point of view.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eno, it doesnt. Superloop != Multithreading. I suspect that \u0022Thread\u0022 doesn\u0027t mean what you think it means.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-27T00:32:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIn kOS I (seem to) get a round-robin execution of the main code and each active WHEN group, one command at a time. \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat\u0027s still a huge difference. Real multithreading doesn\u0027t guarantee anything about how nicely interleaved the threads will be. Maybe on one run you happen to switch between thread 1 and thread 2 letting each run one line before context switching, and maybe on the next one you get 2 instructions in a row from thread 1 before it goes over to thread 2. The guarantee of one line from 1 followed by one line from 2 followed by one line from 1 and so on is very unlike multithreading. In real multithreading if there\u0027s points where the threads must have their behavior synchronized in order to make the algorithm work, you have to work out a handshaking system between them to make it happen. You can\u0027t rely on a perfect line by line round-robin.\u003C/p\u003E\u003Cp\u003EIn other words, with actual multithreading, not only do the threads run at the same time, but they run at *their own independent speeds* as well. The scheduler may use lots of strange esoteric criteria to pick which one runs faster, and you\u0027re not meant to write code that makes any assumptions about how that will work out. In actual threading, if one thread is running a statement that\u0027s time consuming and slow, the other thread might have executed several statements in the meantime. They don\u0027t nicely interleave one to one.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-27T05:36:18Z\u0022 title=\u002201/27/2014 05:36  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 27, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"check","CreatedById":71875,"CreatedDateTime":"2014-01-27T14:05:49Z","Content":"\n\u003Cp\u003EI made the following video over a month ago, but just uploaded it now. It\u0027s a timelapse of a completely autonomous rover drive over Duna, guided only by a kOS script. The script accounds for the rovers speed and attitude so it doesnt make adjustments to heading when the rover is going too fast or is on uneven terrain, minimizing (but not completely eliminating) the risk of flipping over.\u003C/p\u003E\u003Cp\u003EVideo\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/9du08jlFS1w?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003EScript:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eclearscreen.\u003Cbr\u003EPrint \u0022Duna Pole to Pole by check\u0022.\u003Cbr\u003Eset waypoint1 to latlng(-41,-10).\u003Cbr\u003Eset waypoint2 to latlng(-35,-18).\u003Cbr\u003Eset waypoint3 to latlng(-28.5,-24.3).\u003Cbr\u003E\u003Cbr\u003Eset waypoint4 to latlng(-28.3,-30.2).\u003Cbr\u003Eset waypoint5 to latlng(-19,-42).\u003Cbr\u003Eset waypoint6 to latlng(-7.8,-35.9).\u003Cbr\u003E\u003Cbr\u003Eset waypoint7 to latlng(1,-19).\u003Cbr\u003Eset waypoint8 to latlng(4.6,-13.8).\u003Cbr\u003Eset waypoint9 to latlng(8,-5.5).\u003Cbr\u003E\u003Cbr\u003Eset waypoint10 to latlng(17,17).\u003Cbr\u003Eset waypoint11 to latlng(31,37).\u003Cbr\u003Eset waypoint12 to latlng(47.5,44.8).\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eset nextwaypoint to waypoint1.\u003Cbr\u003Eset w to 1.\u003Cbr\u003Euntil w = 13 {\u003Cbr\u003Elock wheelthrottle to -0.2.\u003Cbr\u003Ewait 3.\u003Cbr\u003Elock wheelsteering to nextwaypoint.\u003Cbr\u003Elock wheelthrottle to 0.1.\u003Cbr\u003Ewait 5.\u003Cbr\u003Elock wheelthrottle to 0.5.\u003Cbr\u003Euntil nextwaypoint:distance \u0026lt; 50 {\u003Cbr\u003Eprint \u0022Waypoint \u0022\u002Bw\u002B \u0022 \u0022\u002Bnextwaypoint distance at (3,3).\u003Cbr\u003E\tif inlight = \u0022True\u0022 {lights off.}.\u003Cbr\u003E\tif inlight = \u0022False\u0022 {lights on.}.\u003Cbr\u003Eset x to up - facing.\u003Cbr\u003Eset attitude to sqrt((x:pitch)^2\u002B(x:yaw)^2).\u003Cbr\u003Eif attitude \u0026gt; 2 {unlock wheelsteering.}.\u003Cbr\u003Eif surfacespeed \u0026gt; 14 {lock wheelthrottle to 0.1.}.\u003Cbr\u003Eif surfacespeed \u0026lt; 14 {lock wheelthrottle to 0.5.}.\u003Cbr\u003Eif surfacespeed \u0026gt; 18 {lock wheelthrottle to -0.1.}.\u003Cbr\u003E\u003Cbr\u003Eif attitude \u0026lt; 2 {lock wheelsteering to nextwaypoint.}.\u003Cbr\u003E}.\u003Cbr\u003Eset w to w \u002B1.\u003Cbr\u003Eif w = 2 {set nextwaypoint to waypoint2.}.\u003Cbr\u003Eif w = 3 {set nextwaypoint to waypoint3.}.\u003Cbr\u003Eif w = 4 {set nextwaypoint to waypoint4.}.\u003Cbr\u003Eif w = 5 {set nextwaypoint to waypoint5.}.\u003Cbr\u003Eif w = 6 {set nextwaypoint to waypoint6.}.\u003Cbr\u003Eif w = 7 {set nextwaypoint to waypoint7.}.\u003Cbr\u003Eif w = 8 {set nextwaypoint to waypoint8.}.\u003Cbr\u003Eif w = 9 {set nextwaypoint to waypoint9.}.\u003Cbr\u003Eif w = 10 {set nextwaypoint to waypoint10.}.\u003Cbr\u003Eif w = 11 {set nextwaypoint to waypoint11.}.\u003Cbr\u003Eif w = 12 {set nextwaypoint to waypoint12.}.\u003Cbr\u003E}.\u003Cbr\u003Elock wheelthrottle to -0.1.\u003Cbr\u003Ewait until surfacespeed \u0026lt; 3.\u003Cbr\u003Ebrakes on.\u003Cbr\u003Eunlock all.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote: It didn\u0027t get much past waypoint 1. lol.\u003C/p\u003E\n"},{"CreatedByName":"weissel","CreatedById":81306,"CreatedDateTime":"2014-01-27T22:53:13Z","Content":"\n\u003Cp\u003E@erendrake\u003C/p\u003E\u003Cp\u003EShould I now just quote your \u0022Exactly\u0022 and claim you fully agreed with me? You did a similar thing to me. I didn\u0027t say \u0022threads don\u0027t matter to programmers\u0022. I said the \u0022hardware\u0022 (real or emulated) didn\u0027t matter much. OK, only as long as it\u0027s fast enough.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E(pseudo)parallel\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EDoes not exist, its either parallel or series.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESingle core CPU, no hyperthreading, running e.g. Linux: can it run programs and threads in parallel (and how does it do that, then) or only in series (and how comes the user gets the impression it can)?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003Eno, it doesnt.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPray tell: how does the CPU know if a program has one or multiple threads?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003ESuperloop != Multithreading. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EEducate me: which necessary part of \u003Cem\u003Ethe\u003C/em\u003E definition (URL please!) of being capable of running multiple threads does a superloop not have?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003EI suspect that \u0022Thread\u0022 doesn\u0027t mean what you think it means.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat do you think \u0022Thread\u0022 means?\u003C/p\u003E\u003Cp\u003E@Steven Mading\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EThat\u0027s still a huge difference. Real multithreading doesn\u0027t guarantee anything about how nicely interleaved the threads will be.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAre you saying \u003Cem\u003Enot\u003C/em\u003E guaranteeing a certain interleaving is a \u003Cem\u003Enecessary\u003C/em\u003E precondition of multithreading? OK, fine, kOS doesn\u0027t guarantee it: no guarantee in the documentation for the user/kOS programmer.\u003C/p\u003E\u003Cp\u003EI can see your reply: \u0022But kOS \u003Cem\u003Edoes\u003C/em\u003E it that way.\u0022\u003C/p\u003E\u003Cp\u003EI\u0027ll answer \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Col style=\u0022list-style-type:lower-alpha;\u0022\u003E\u003Cli\u003E currently, yes, but that may change in the future, as it\u0027s an implemention detail\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E So kOS would feature \u0022real multithreading\u0022 if it pulled the next thread at random from the list of runnable threads?\u003C/li\u003E\u003C/ol\u003E\u003Cp\u003Eand I\u0027d add that I can\u0027t see an advantage switching from round robin to random.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn real multithreading if there\u0027s points where the threads must have their behavior synchronized in order to make the algorithm work, you have to work out a handshaking system between them to make it happen. You can\u0027t rely on a perfect line by line round-robin.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhen you have no guarantee for X to always be the case, you must assume X \u003Cem\u003Emay\u003C/em\u003E not always be the case, but not that it \u003Cem\u003Enever\u003C/em\u003E will be the case. Right?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn other words, with actual multithreading, not only do the threads run at the same time, ...\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan a single CPU (no hyperthreading etc.) support multithreading, as it can only run a single instruction at a time? That\u0027s kinda important here to understand you correctly ...\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E... but they run at *their own independent speeds* as well. The scheduler may use lots of strange esoteric criteria to pick which one runs faster, and you\u0027re not meant to write code that makes any assumptions about how that will work out.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EkOS uses an esoteric criterion known by the mystical name \u0027round robin\u0027, so we\u0027re golden. \u003C/p\u003E\u003Cp\u003EAnd (obviously) you\u0027re not meant to write code that assumes something which is not guaranteed. Which means that in the cases where you have a guaranteed scheduler behaviour, you can (and sometimes should) write code that makes assumptions on the guaranteed behaviour. Say, when you are guaranteed to have at least of so-and-so-many microseconds runtime per time unit and you must guarantee to produce a certain result within so-and-so many time units.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIn actual threading, if one thread is running a statement that\u0027s time consuming and slow, the other thread might have executed several statements in the meantime.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn kOS all commands (that do not wait or (untested:) run other programs) seem to take \u003Cem\u003Eexactly\u003C/em\u003E the same time. Just as with a RISC CPU. Which means there simply are no time consuming or slow commands. Life in the Kerbol system is strange, just look at the density of the planets.\u003C/p\u003E\u003Cp\u003EHowever, a calculation made from several commands may be faster or slower than another one with a different number of steps, so one may present you with results earlier, and you might have to sync them.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-28T01:17:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ESingle core CPU, no hyperthreading, running e.g. Linux: can it run programs and threads in parallel (and how does it do that, then) or only in series (and how comes the user gets the impression it can)?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe Operating system can hold multiple memory contexts, but no it cannot violate the rules of the underlying hardware. Users think it can because there are millions of clever engineers in the world, upkeeping this illusion. \u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EPray tell: how does the CPU know if a program has one or multiple threads?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt doesnt. it doesnt know about programs or threads or processes.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEducate me: which necessary part of \u003Cem\u003Ethe\u003C/em\u003E definition (URL please!) of being capable of running multiple threads does a superloop not have?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI did not say that a superloop can not manage additional threads. I said that a superloop is not the same thing as multiple threads. you are conflating.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022weissel\u0022 data-cite=\u0022weissel\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EWhat do you think \u0022Thread\u0022 means?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe smallest unit that the OS\u0027s scheduler can manage.\u003C/p\u003E\u003Cp\u003EYou are smelling strongly of Troll. I am not going to respond to you again on this. kOS is single threaded.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-28T01:20:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022check\u0022 data-cite=\u0022check\u0022\u003E\u003Cdiv\u003EI made the following video over a month ago, but just uploaded it now. It\u0027s a timelapse of a completely autonomous rover drive over Duna, guided only by a kOS script. The script accounds for the rovers speed and attitude so it doesnt make adjustments to heading when the rover is going too fast or is on uneven terrain, minimizing (but not completely eliminating) the risk of flipping over.\u003Cp\u003EVideo\u003C/p\u003E\u003Cp\u003E\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/9du08jlFS1w?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003EScript:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eclearscreen.\u003Cbr\u003EPrint \u0022Duna Pole to Pole by check\u0022.\u003Cbr\u003Eset waypoint1 to latlng(-41,-10).\u003Cbr\u003Eset waypoint2 to latlng(-35,-18).\u003Cbr\u003Eset waypoint3 to latlng(-28.5,-24.3).\u003Cbr\u003E\u003Cbr\u003Eset waypoint4 to latlng(-28.3,-30.2).\u003Cbr\u003Eset waypoint5 to latlng(-19,-42).\u003Cbr\u003Eset waypoint6 to latlng(-7.8,-35.9).\u003Cbr\u003E\u003Cbr\u003Eset waypoint7 to latlng(1,-19).\u003Cbr\u003Eset waypoint8 to latlng(4.6,-13.8).\u003Cbr\u003Eset waypoint9 to latlng(8,-5.5).\u003Cbr\u003E\u003Cbr\u003Eset waypoint10 to latlng(17,17).\u003Cbr\u003Eset waypoint11 to latlng(31,37).\u003Cbr\u003Eset waypoint12 to latlng(47.5,44.8).\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eset nextwaypoint to waypoint1.\u003Cbr\u003Eset w to 1.\u003Cbr\u003Euntil w = 13 {\u003Cbr\u003Elock wheelthrottle to -0.2.\u003Cbr\u003Ewait 3.\u003Cbr\u003Elock wheelsteering to nextwaypoint.\u003Cbr\u003Elock wheelthrottle to 0.1.\u003Cbr\u003Ewait 5.\u003Cbr\u003Elock wheelthrottle to 0.5.\u003Cbr\u003Euntil nextwaypoint:distance \u0026lt; 50 {\u003Cbr\u003Eprint \u0022Waypoint \u0022\u002Bw\u002B \u0022 \u0022\u002Bnextwaypoint distance at (3,3).\u003Cbr\u003E\tif inlight = \u0022True\u0022 {lights off.}.\u003Cbr\u003E\tif inlight = \u0022False\u0022 {lights on.}.\u003Cbr\u003Eset x to up - facing.\u003Cbr\u003Eset attitude to sqrt((x:pitch)^2\u002B(x:yaw)^2).\u003Cbr\u003Eif attitude \u0026gt; 2 {unlock wheelsteering.}.\u003Cbr\u003Eif surfacespeed \u0026gt; 14 {lock wheelthrottle to 0.1.}.\u003Cbr\u003Eif surfacespeed \u0026lt; 14 {lock wheelthrottle to 0.5.}.\u003Cbr\u003Eif surfacespeed \u0026gt; 18 {lock wheelthrottle to -0.1.}.\u003Cbr\u003E\u003Cbr\u003Eif attitude \u0026lt; 2 {lock wheelsteering to nextwaypoint.}.\u003Cbr\u003E}.\u003Cbr\u003Eset w to w \u002B1.\u003Cbr\u003Eif w = 2 {set nextwaypoint to waypoint2.}.\u003Cbr\u003Eif w = 3 {set nextwaypoint to waypoint3.}.\u003Cbr\u003Eif w = 4 {set nextwaypoint to waypoint4.}.\u003Cbr\u003Eif w = 5 {set nextwaypoint to waypoint5.}.\u003Cbr\u003Eif w = 6 {set nextwaypoint to waypoint6.}.\u003Cbr\u003Eif w = 7 {set nextwaypoint to waypoint7.}.\u003Cbr\u003Eif w = 8 {set nextwaypoint to waypoint8.}.\u003Cbr\u003Eif w = 9 {set nextwaypoint to waypoint9.}.\u003Cbr\u003Eif w = 10 {set nextwaypoint to waypoint10.}.\u003Cbr\u003Eif w = 11 {set nextwaypoint to waypoint11.}.\u003Cbr\u003Eif w = 12 {set nextwaypoint to waypoint12.}.\u003Cbr\u003E}.\u003Cbr\u003Elock wheelthrottle to -0.1.\u003Cbr\u003Ewait until surfacespeed \u0026lt; 3.\u003Cbr\u003Ebrakes on.\u003Cbr\u003Eunlock all.\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENote: It didn\u0027t get much past waypoint 1. lol.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI havent messed with rovers much yet with KOS. How well does the negative throttle work? I have been trying to figure out how to make brakes not so binary to help with missions just like this.\u003C/p\u003E\u003Cp\u003EThanks for sharing!\u003C/p\u003E\n"},{"CreatedByName":"check","CreatedById":71875,"CreatedDateTime":"2014-01-28T01:36:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003EI havent messed with rovers much yet with KOS. How well does the negative throttle work? I have been trying to figure out how to make brakes not so binary to help with missions just like this.\u003Cp\u003EThanks for sharing!\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWorks pretty well. Much less likely to flip the rover over, I found. The trade off is your stopping distance is increased.\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-28T01:41:12Z","Content":"\n\u003Cp\u003EMind showing us a shot of the rover? i have been trying to figure out how i want to deal with having only one part so far and i want to see how you integrated the part into the structure.\u003C/p\u003E\n"},{"CreatedByName":"check","CreatedById":71875,"CreatedDateTime":"2014-01-28T01:52:39Z","Content":"\n\u003Cp\u003EHere you go. Nothing fancy.\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/SoDHHtR.jpg\u0022 alt=\u0022SoDHHtR.jpg\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Keloooe_Pest","CreatedById":90575,"CreatedDateTime":"2014-01-28T05:35:25Z","Content":"\n\u003Cp\u003EHey I have full electric charge on my crafts but when I open the terminal, it appears grayed out and I can\u0027t type anything into it, it loads the terminal just fine when booting up and still nothing happens to the terminal, any help?\u003C/p\u003E\n"},{"CreatedByName":"erendrake","CreatedById":57164,"CreatedDateTime":"2014-01-28T05:58:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Keloooe_Pest\u0022 data-cite=\u0022Keloooe_Pest\u0022\u003E\u003Cdiv\u003EHey I have full electric charge on my crafts but when I open the terminal, it appears grayed out and I can\u0027t type anything into it, it loads the terminal just fine when booting up and still nothing happens to the terminal, any help?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI have a new build available that will fix your issue. \u003Ca href=\u0022https://github.com/erendrake/KOS/releases/tag/v0.10.0P3\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/erendrake/KOS/releases/tag/v0.10.0P3\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-01-28T08:39:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022erendrake\u0022 data-cite=\u0022erendrake\u0022\u003E\u003Cdiv\u003EYou are smelling strongly of Troll. I am not going to respond to you again on this. kOS is single threaded.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAgreed. The constant use of the disingenuous technique is a clear sign that the goal is to lengthen the argument rather than have anything conclude. I\u0027m willing to argue with someone who I think genuinely believes a contrarian thing. But I\u0027m not willing to waste the time arguing with someone who I suspect might be pretending to believe a contrarian position just to be abrasive rather than genuinely believing it.\u003C/p\u003E\u003Cp\u003EAnd it doesn\u0027t matter anyway. kOS works exactly like it works regardless of what it\u0027s called. I\u0027m glad to have learned from weissel that kOS behavior had changed since I last tested it, even though I do not agree that this behavior is what the word \u0022multithreading\u0022 actually means.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-28T08:53:09Z\u0022 title=\u002201/28/2014 08:53  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 28, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"}]}