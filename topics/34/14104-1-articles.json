{"TopicId":14104,"ForumId":34,"TopicTitle":"[PLUGIN, PARTS][0.17] EPS - Electric Power Standards 0.3 (12.09.27)","CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-07-11T20:14:26Z","PageNum":1,"Articles":[{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-07-11T20:14:26Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EDear Fellow Kerbonauts!\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EAfter about a month of work, i present to you:\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003E\u003Cspan style=\u0022color:#800000;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EElectric Power Standards\u003C/span\u003E\u003C/span\u003E\u003C/strong\u003E plugin and parts.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003E\n\u003C/span\u003E\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022480\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/c5A7UoEzpGI?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E\u003Cp\u003ESeeing what a confusion only 2 addons create that use some form of electricity,\u003C/p\u003E\u003Cp\u003Estandardisation in this area is a must. This addon attempts to do just that.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EWhat EPS provides:\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E -Standard PartModule Classes you can use or derive from Power Sources, Batteries, Users calsses you can build upon.\u003C/p\u003E\u003Cp\u003E -Standard calls to use Electric Power\u003C/p\u003E\u003Cp\u003E -Highly cusomizable, and easy to implement to existing addons\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003ECurrent parts:\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E -Battery to store Electricity in.\u003C/p\u003E\u003Cp\u003E -Solar Panel that detects Sunlight\u003C/p\u003E\u003Cp\u003E -Fuelcell that uses Liquid Fuel to power electric systems\u003C/p\u003E\u003Cp\u003E -Nuclear Battery\u003C/p\u003E\u003Cp\u003E -Laser Drill to mine for energy. Use \u0027\u003Cstrong\u003EU\u003C/strong\u003E\u0027 to lower / raise.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EDownload:\u003C/span\u003E\u003C/span\u003E \u003Ca href=\u0022http://www./?jtrxo9phxuhl32h\u0022 rel=\u0022external nofollow\u0022\u003EEPS_0.3\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003ESource:\u003C/span\u003E \u003Ca href=\u0022http://www./?m5tydpoqod55379\u0022 rel=\u0022external nofollow\u0022\u003EEPS_0.3 Source\u003C/a\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003E \u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cspan style=\u0022color:#0000FF;\u0022\u003EFolding Panels Guide:\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E1, Make sure that you are using at least \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/showthread.php/8751-Plugin-0-17-PowerTech-v0-2-6-1\u0022 rel=\u0022external nofollow\u0022\u003EPowerTech v0.2.6.1\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E2, Get a panel using the module SolarPanels_adv_PowerTech. These will be \u003Cstrong\u003E\u003Cem\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003EStandard\u003C/span\u003E\u003C/em\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003E \u003C/span\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003EDynaVolt\u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003E (DynaSat) and \u003C/span\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003EKosmos \u003C/span\u003E\u003Cspan style=\u0022color:#000000;\u0022\u003Epanels\u003C/span\u003E.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E Note: Don\u0027t use the EPS specific panels, but the standard ones, except if the panel is specifically made for EPS 0.3!\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E3, Download \u003Ca href=\u0022http://www./view/?tbp7vh5whjih0te\u0022 rel=\u0022external nofollow\u0022\u003Ethis module\u003C/a\u003E, and attach it to the end of the part.cfg of the panel\u003C/p\u003E\u003Cp\u003E4, If you find a line starting with \u003Cem\u003E\u0027ShowIndicators\u0027\u003C/em\u003E make it false like so: \u003Cem\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003EShowIndicators = false\u003C/span\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E If you don\u0027t find the line, add it as shown above!\u003C/p\u003E\u003Cp\u003E5, Enjoy your new EPS compatible folding panels!\u003C/p\u003E\u003Cp\u003ENote: I\u0027ll be contacting panel makers about permission to provide animated panels without this hassle...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EDocumentation:\u003C/span\u003E\u003C/span\u003E \u003Ca href=\u0022http://www./view/?vv5ygouh9kzbcmv\u0022 rel=\u0022external nofollow\u0022\u003EEPS_0.2 Documentation (PDF)\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E (outdated, will update soon)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EPowerNodes \u003C/span\u003E\u003C/strong\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E(experimantal!)\u003C/span\u003E\u003C/strong\u003E\u003C/span\u003E\u003Cstrong\u003E:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E-Nodes convert whatever part is \u003Cem\u003Edirectly attached to them\u003C/em\u003E to EPS users.\u003C/p\u003E\u003Cp\u003E-If there is no power, the user is deactivated. When power returns, the user is restarted.\u003C/p\u003E\u003Cp\u003E-Should be compatible with most mods / parts (Including ASAS, MechJeb, etc...)\u003C/p\u003E\u003Cp\u003E-Power drain of each unit is 0.0075. If the nodes are put on via symmetry, the Sum drain of the nodes is 0.0075.\u003C/p\u003E\u003Cp\u003E-They can be found in the Decals section.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E-These are EXPERIMENTAL parts, they deactivate systems in an... unothodox way.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E Use caution when using this. I recommend you back up your save file!\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E (even though i never broke saves with the nodes, better safe than sorry!)\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E[ATTACH=CONFIG]33898[/ATTACH]\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EPowerNodes:\u003C/span\u003E\u003C/span\u003E \u003Ca href=\u0022http://www./?t5tb31tsboj6m3u\u0022 rel=\u0022external nofollow\u0022\u003EEPS_0.3 PowerNodes\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ECompatibility (will update based on testing and input from this forum):\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003ERCS Thrusters: \u003C/span\u003E\u003Cspan style=\u0022color:#008000;\u0022\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003ECompatible.\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EASAS: \u003Cspan style=\u0022color:#008000;\u0022\u003ECompatible.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ELanding Gear: \u003Cspan style=\u0022color:#008000;\u0022\u003ECompatible.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ELiquid Fuel Engine: \u003Cspan style=\u0022color:#008000;\u0022\u003ECompatible.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EMechJeb: \u003Cspan style=\u0022color:#008000;\u0022\u003ECompatible\u003C/span\u003E,\u003Cspan style=\u0022color:#8b4513;\u0022\u003Ethrows errors to log when unpowered.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ECanards, moving winglets: \u003Cspan style=\u0022color:#8b4513;\u0022\u003ESemi-Compatible, they lose function when unpowered and throws NullReferenceExceptions.\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EMods using this plugin:\u003C/p\u003E\u003Cp\u003E -ZOxygene\u003C/p\u003E\u003Cp\u003EMods compatible with this plugin:\u003C/p\u003E\u003Cp\u003E -Electric Energy Ion Engine\u003C/p\u003E\u003Cp\u003EOthers will hopefully follow. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E0.2:\u003C/p\u003E\u003Cp\u003E -added new parts\u003C/p\u003E\u003Cp\u003E -all code is now PartModule based\u003C/p\u003E\u003Cp\u003E -Batteries use the PartResource \u0022Energy\u0022.\u003C/p\u003E\u003Cp\u003E0.3:\u003C/p\u003E\u003Cp\u003E -KSP 0.17 compatible\u003C/p\u003E\u003Cp\u003E -rewrote Source user management, users now take demanded power and intelligently find the best source of power\u003C/p\u003E\u003Cp\u003E -new battery management by sources\u003C/p\u003E\u003Cp\u003E -added PowerNodes\u003C/p\u003E\u003Cp\u003E-lots and lots of bugfixes\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003ECredits\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E-Yorik: Part models and textures\u003C/p\u003E\u003Cp\u003E-l00: coding \u0026amp; the rest \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cspan style=\u0022color:#0000ff;\u0022\u003EAnnouncement:\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EI am very pleased to announce that i am now working with \u003Cstrong\u003Erocket2guns\u003C/strong\u003E, the original\u003C/p\u003E\u003Cp\u003Ecreator of the \u003Ca href=\u0022http://kerbalspaceprogram.com/forum/showthread.php/8428-Component-Space-Shuttle-%28CSS%29-v0-3-1-%28April-06-2012%29\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003EComponent Space Shuttle\u003C/strong\u003E\u003C/a\u003E! Expect new awesome Models for the parts in the future!\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/3.0/\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg src=\u0022http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png\u0022 alt=\u002288x31.png\u0022\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis work by l00 is licensed under a \u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/3.0/\u0022 rel=\u0022external nofollow\u0022\u003ECreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\u003C/a\u003E.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-10-01T14:43:13Z\u0022 title=\u002210/01/2012 02:43  PM\u0022 data-short=\u002211 yr\u0022\u003EOctober 1, 2012\u003C/time\u003E by l00\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-07-11T20:23:23Z","Content":"\n\u003Cp\u003ETook me a bit to figure out. As far as I see what I can use as a part-developer are the modules etc.\u003C/p\u003E\u003Cp\u003EI had to take a look into those part.cfg\\\u0027s to check what the parameters of EPS_BATT_default were and they are:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- EPS Battery parameters ---\u003Cbr\u003E// Battery Capacity\u003Cbr\u003EMaxBattLevel = 150\u003Cbr\u003E// Starting Power\u003Cbr\u003EBattLevel = 150\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand for EPS_SOURCE_Spanel_default:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- EPS_SPanel ---\u003Cbr\u003EMaxPwrGain = 0.009\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI suggest you put them in the documentation because it isn\\\u0027t really clear atm.\u003C/p\u003E\u003Cp\u003EAlso how do I make other parts use energy? For example I have a Satellite Dish which deploys and I want to use it energy to function. What do I need to put in the part.cfg?\u003C/p\u003E\u003Cp\u003ESame counts for a Ion Engine.. how can I make a Ion Engine work with your plugin?\u003C/p\u003E\n"},{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-07-11T22:07:15Z","Content":"\n\u003Cp\u003EHi!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ETook me a bit to figure out. As far as I see what I can use as a part-developer are the modules etc.\u003C/p\u003E\u003Cp\u003EI had to take a look into those part.cfg\\\u0027s to check what the parameters of EPS_BATT_default were and they are:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- EPS Battery parameters ---\u003Cbr\u003E// Battery Capacity\u003Cbr\u003EMaxBattLevel = 150\u003Cbr\u003E// Starting Power\u003Cbr\u003EBattLevel = 150\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand for EPS_SOURCE_Spanel_default:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E// --- EPS_SPanel ---\u003Cbr\u003EMaxPwrGain = 0.009\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI suggest you put them in the documentation because it isn\\\u0027t really clear atm.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYepp, i\\\u0027ll need to do that, thaks noting it!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAlso how do I make other parts use energy? For example I have a Satellite Dish which deploys and I want to use it energy to function. What do I need to put in the part.cfg?\u003C/p\u003E\u003Cp\u003ESame counts for a Ion Engine.. how can I make a Ion Engine work with your plugin?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor the Dish, you can use the Buffer code. Put it in \u0027onPartFixedUpdate()\u0027.\u003C/p\u003E\u003Cp\u003EThan if \u0027Energy\u0027\u0026gt;0, the dish is on. Else it is off.\u003C/p\u003E\u003Cp\u003EOnce you make the part, use the provided EPS parts to power the Dish!\u003C/p\u003E\u003Cp\u003EDecide the size of the Buffer (think of it as an internal battery), i\\\u0027d use a small size, say, 0.1f.\u003C/p\u003E\u003Cp\u003EThe size of the Buffer is \u0027MaxEnergy\u0027, the current level of the buffer is \u0027Energy\u0027 in the example, but those are just floats, you can define and name them anything you like!\u003C/p\u003E\u003Cp\u003EIt may also be a good idea to have a bar in flight to show the buffer level!\u003C/p\u003E\u003Cp\u003ESame goes basically for any other part using EPS electrcity.\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n"},{"CreatedByName":"Dani-Sang","CreatedById":4234,"CreatedDateTime":"2012-07-11T22:49:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022l00\u0022 data-cite=\u0022l00\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFor the Dish, you can use the Buffer code. Put it in \u0027onPartFixedUpdate()\u0027.\u003C/p\u003E\u003Cp\u003EThan if \u0027Energy\u0027\u0026gt;0, the dish is on. Else it is off.\u003C/p\u003E\u003Cp\u003EOnce you make the part, use the provided EPS parts to power the Dish!\u003C/p\u003E\u003Cp\u003EDecide the size of the Buffer (think of it as an internal battery), i\\\u0027d use a small size, say, 0.1f.\u003C/p\u003E\u003Cp\u003EThe size of the Buffer is \u0027MaxEnergy\u0027, the current level of the buffer is \u0027Energy\u0027 in the example, but those are just floats, you can define and name them anything you like!\u003C/p\u003E\u003Cp\u003EIt may also be a good idea to have a bar in flight to show the buffer level!\u003C/p\u003E\u003Cp\u003ESame goes basically for any other part using EPS electrcity.\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat part is something I was afraid off. As pure part creator , I don\\\u0027t have much knowledge about this coding and it is extremely complicated compared to the basics of\u003Cstrong\u003E part.cfg\u003C/strong\u003E. Currently there is sooooo much code for Buffer it actually scares me away from it and don\\\u0027t see it as worthwhile addition to my own parts. Isn\\\u0027t it possible to achieve the following and let the rest of the codes run in the background?:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003ENamehere what is needed (the clearer the better)\u003Cbr\u003E{\u003Cbr\u003E// Deactivate Part when It is not receiving Energy\u003Cbr\u003EDeactivateWhenEmpty = true/false\u003Cbr\u003E// Ability to Deactivate Manual with Right Mouse Click\u003Cbr\u003EDeactivateManual = true/false\u003Cbr\u003E// The amount of Energy it uses\u003Cbr\u003EEnergyConsumption = number\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis wouldn\\\u0027t scare me away from using this plugin. Additional stuff could be added too ofcourse, but it isn\\\u0027t clear for me atm. (Also, what the hell do the \u0027Standard Calls\u0027 do/provide?)\u003C/p\u003E\u003Cp\u003EAlso currently on its own its very limited. You got something to store energy, you got something to gather with it but you don\\\u0027t have a module to actually use the energy (haven\\\u0027t noticed a filter to go along with your ZO2 plugin). I suggest you add some extra modules such as:\u003C/p\u003E\u003Cp\u003E- EPS_IonEngine_Default\u003C/p\u003E\u003Cp\u003E- EPS_Generator_Default (Generator Part is a Generator)\u003C/p\u003E\u003Cp\u003E- EPS_Filter_Default (to go along with your zoxygen plugin)\u003C/p\u003E\u003Cp\u003EAnd I would personally remove the miner cause it doesn\\\u0027t really make sense, specially if there is next to noting to use your energy on. \u003C/p\u003E\u003Cp\u003EAnd my last piece of advice is this following image:\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/irmTO.png\u0022 alt=\u0022irmTO.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EI don\\\u0027t understand it why you made it so complicated. Isn\\\u0027t it just better to have:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESOURCE ---\u0026gt; BATTERY ---\u0026gt; PART \u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOr do you want to have the option to have only specific sources to energize specific parts?\u003C/p\u003E\u003Cp\u003EJust my 2 cents. This is just a point of view of a regular part-creator. \u003C/p\u003E\n"},{"CreatedByName":"togfox","CreatedById":17083,"CreatedDateTime":"2012-07-11T23:06:11Z","Content":"\n\u003Cp\u003EThis is a great step towards unifying electricity and parts that require electricity! I\\\u0027m hope the coders can work together to standardise this, document it and make KSP wickedly cool. 8)\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-07-12T06:12:19Z","Content":"\n\u003Cp\u003EDoes this also allow to store energy as part resource, like my plugin does right now?\u003C/p\u003E\u003Cp\u003EYou really managed to confuse me with this right now, hopefully it makes sense for me after I\\\u0027m back from school...\u003C/p\u003E\n"},{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-07-13T23:03:43Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E\u003Cspan\u003E\u003Cspan style=\u0022color:#800000;\u0022\u003EEPS usage Examples\u003C/span\u003E\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ESorry to put the examples seperately like this, but the Forum only allows 20000 characters to be in a post.\u003C/p\u003E\u003Cp\u003E -Getting power from all sources (panels, drills...):\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E//EPS example code\u003C/p\u003E\u003Cp\u003E//Getting power from all sources\u003C/p\u003E\u003Cp\u003E//Get the current Warprate (get it this way to avoid a KSP bug)\u003C/p\u003E\u003Cp\u003Efloat wr = EPS_Common.GetWR();\u003C/p\u003E\u003Cp\u003E//This variable is what we will use to store the amount of power we get.\u003C/p\u003E\u003Cp\u003Efloat get=0;\u003C/p\u003E\u003Cp\u003E//This is the target amount we want to get\u003C/p\u003E\u003Cp\u003Efloat Needed=0.2f\u003C/p\u003E\u003Cp\u003E//Get the list of sources, and the number of sources, according to filter (in this case, all)\u003C/p\u003E\u003Cp\u003Eint[] sources=EPS_Common.GetSourceList(this.vessel,\u0027\u0027);//the final argument is filter\u003C/p\u003E\u003Cp\u003Eint sourcecnt=EPS_Common.CountSources(this.vessel,\u0027\u0027);\u003C/p\u003E\u003Cp\u003E//get power from powersources if available; go through the sources that were identified in sources[]\u003C/p\u003E\u003Cp\u003Efor (int i = 0; i \u0026lt;= sourcecnt - 1; i\u002B\u002B)\u003C/p\u003E\u003Cp\u003E {\u003C/p\u003E\u003Cp\u003E if (get\u0026gt;=Needed) break;//don\\\u0027t continue (or start) draining if we got enough\u003C/p\u003E\u003Cp\u003E get \u002B= ( EPS_Common.GetSourcePwr(sources\u003Cem\u003E, (Part)this, this.vessel) * wr);//Get power from a panel / drill. Arg: \u0027The Sources element number in the vessel\u0027, \u0027the requesting PART\u0027. Ret: (float) PwrGain of the Source / users of Source. Multiply by warprate!\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//Note that while the \u0027get\u0027 variable is filled up, power consumption is handled by the EPS_Common.GetSourcePwr as well!\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E -Getting power from drills only:\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003Cem\u003E//EPS example code\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//Getting power from all types of drills eg.:EPS_SOURCE_LaserDrill_WHATEVER_TYPE\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//to get power from a specific type, use a filter like \u0027EPS_SOURCE_LaserDrill_default\u0027 for the default for example.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//Get the current Warprate (get it this way to avoid a KSP bug)\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Efloat wr = EPS_Common.GetWR();\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//This variable is what we will use to store the amount of power we get.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Efloat get=0;\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//This is the target amount we want to get\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Efloat Needed=0.2f\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//Get the list of drills, and the number of drills, according to filter\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Eint[] drills=EPS_Common.GetSourceList(this.vessel,\u0027EPS_SOURCE_LaserDrill\u0027);//the final argument is filter\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Eint drillcnt=EPS_Common.CountSources(this.vessel,\u0027EPS_SOURCE_LaserDrill\u0027);\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E//get power from powersources if available; go through the sources that were identified in drills[]\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003Efor (int i = 0; i \u0026lt;= drillcnt - 1; i\u002B\u002B)\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E if (get\u0026gt;=Needed) break;//don\\\u0027t continue (or start) draining if we got enough\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E get \u002B= ( EPS_Common.GetSourcePwr(drills\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E, (Part)this, this.vessel) * wr);//Get power from a drill. Arg: \u0027The Sources element number in the vessel\u0027, \u0027the requesting PART\u0027. Ret: (float) PwrGain of the Source / users of Source. Multiply by warprate!\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Note that while the \u0027get\u0027 variable is filled up, power consumption is handled by the EPS_Common.GetSourcePwr as well!\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E -Getting power from all Batteries in all stages, prioritised by stage:\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//EPS example code\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Getting power from all batteries with priority on lower-stage batteries\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Get the current Warprate (get it this way to avoid a KSP bug)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Efloat wr = EPS_Common.GetWR();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//This variable is what we will use to store the amount of power we get.\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Efloat get=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//This is the target amount we want to get\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Efloat Needed=0.2f\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Get the list and number of of all EPS Batteries \u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Eint[] battlist=EPS_Common.GetBattList(this.vessel);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Eint battcnt=EPS_Common.CountBatt(this.vessel);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//get power from batteries if available; go through the batteries that were identified in battlist[]\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Efor (int i=(Staging.StageCount);i\u0026gt;=0;i--)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (get\u0026gt;=Needed) break;//don\\\u0027t continue (or start) draining if we got enough\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E get\u002B= ( EPS_Common.UseBattPwr(Needed, this.vessel, i, battlist, battcnt) ) ;//Try to use batteries to get power. Needed is the amount we want to take (if we already have enough, no matter, it will be excess and will be charged back to the battery)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Note that while the \u0027get\u0027 variable is filled up, power consumption is handled by the EPS_Common.UseBattPwr as well!\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E -A Reactor, constantly generating power:\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E class EPS_SOURCE_Reactor : Part\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E //EPS - These variables are mandaroty\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public float MaxPwrGain = 0.013f,MinPwrGain = 0f, PwrGain = 0f;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public String Users=\u0027\u0027;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public uint nUsers=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E int UpdCount=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E //part internal\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public VInfoBox _IndBar;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E private float DispA=0.75f;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public string IndMsg=\u0027Reactor PWR\u0027;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public Color IndBgClr=XKCDColors.DarkYellow;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public Color IndBarClr=XKCDColors.Yellow;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public float IndBarLgth=2f;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E public DefaultIcons PartIcon=DefaultIcons.FUEL_TANK;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E protected override void onPartStart()\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E base.onPartStart();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E this.stackIcon.SetIcon(PartIcon);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E this.stackIcon.SetIconColor(IndBgClr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E this.stackIconGrouping = StackIconGrouping.SAME_MODULE;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E protected override void onFlightStart()\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E base.onFlightStart();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar = this.stackIcon.DisplayInfo();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetLength(IndBarLgth);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E XKCDColors.NextColorAlpha = DispA;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetMsgBgColor(IndBgClr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetMsgTextColor(IndBarClr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetMessage(IndMsg);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetProgressBarBgColor(IndBgClr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetProgressBarColor(IndBarClr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E XKCDColors.NextColorAlpha = 1f;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E protected override void onPartFixedUpdate()\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E base.onPartFixedUpdate();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E //custom code starts here\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (this.state==PartStates.ACTIVE)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E PwrGain=MaxPwrGain;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E else\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E PwrGain=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E UpdCount\u002B\u002B; //This part is responsible for checking if users of the source are still using it. Just use as it is here! \u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (UpdCount\u0026gt;=50)\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E UpdCount=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E EPS_Common.UsersReScan(this);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E _IndBar.SetValue(Mathf.Clamp01(PwrGain / MaxPwrGain));\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E //custom code ends here\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E protected override void onPartDeactivate()\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E base.onPartDeactivate();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E this.stackIcon.ClearInfoBoxes();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E -A Buffer (for engines and such)(only the FixedUpdate is important for the Buffer, no mandarory variables and such are needed for this):\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003Eprotected override void onPartFixedUpdate()\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E base.onPartFixedUpdate();\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E float wr = EPS_Common.GetWR();// sometimes, TimeWarp.CurrentRate is 0 instead of 1... This always returns the correct rate.\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//these get the sources and number of sources. These are needed for optimization. The string is for filtering, eg. use \u0027EPS_SOURCE_LaserDrill\u0027 to get laserdrills only.\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Use \u0027EPS_SOURCE_LaserDrill_default\u0027 to get default drills only\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E int[] sources=EPS_Common.GetSourceList(this.vessel,\u0027\u0027);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E int sourcecnt=EPS_Common.CountSources(this.vessel,\u0027\u0027);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E int[] battlist=EPS_Common.GetBattList(this.vessel);//get batterly list and number of batteries\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E int battcnt=EPS_Common.CountBatt(this.vessel);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E float get=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E float Needed=0.010f * wr;//this is the Drain rate of EPS parts. Compensating for warp rate is also handled here. Remember, the more \\\u0027Needed\\\u0027 is, the more we try to take from the sources, batteries on each attemt to drain!\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (Energy\u0026gt;=MaxEnergy) Needed=0;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E for (int i = 0; i \u0026lt;= sourcecnt - 1; i\u002B\u002B)//get power from powersources if available; go through the sources that were identified in sources[]\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (get\u0026gt;=Needed) break;//don\\\u0027t continue (or start) draining if we got enough\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Get power from a panel / drill. Arg: \u0027The Sources element number in the vessel\u0027, \u0027the requesting PART\u0027. Ret: (float) PwrGain of the Source / users of Source.\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E//Multiply by warprate!\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E get \u002B= ( EPS_Common.GetSourcePwr(sources, (Part)this, this.vessel) * wr);\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E for (int i=(Staging.StageCount);i\u0026gt;=0;i--)//Drain power from batteries\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E {\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (get\u0026gt;=Needed) break;//don\\\u0027t continue (or start) draining if we got enough already\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E get\u002B= ( EPS_Common.UseBattPwr(Needed, this.vessel, i, battlist, battcnt) ) ;//Try to use batteries to get power. Needed is the amount we want to take\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E Energy\u002B=get;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E if (Energy\u0026gt;MaxEnergy) Energy=MaxEnergy;\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cem\u003E\u003Cem\u003E }\u003C/em\u003E\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\n"},{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-07-14T00:15:00Z","Content":"\n\u003Cp\u003EHi Everyone!\u003C/p\u003E\u003Cp\u003ESome replies:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAs pure part creator , I don\\\u0027t have much knowledge about this coding and it is extremely complicated compared to the basics of part.cfg. Currently there is sooooo much code for Buffer it actually scares me away from it and don\\\u0027t see it as worthwhile addition to my own parts. Isn\\\u0027t it possible to achieve the following and let the rest of the codes run in the background?:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, for a pure part creator, this has not much use, as the calls for power must be managed by the plugins to make EPS versatile.\u003C/p\u003E\u003Cp\u003EFor the Buffer, all you need to do is to define the 2 floats \u0027Energy\u0027 and \u0027MaxEnergy\u0027 in your class and CTRL\u002BC / CTRL\u002BV the code to the beginning of your \u0027onPartFixedUpdate()\u0027 override!\u003C/p\u003E\u003Cp\u003ENow, if you have no idea what the last line meant, than, with all respect, you will need to learn about coding plugins before EPS is any use to you.\u003C/p\u003E\u003Cp\u003EAgain, i meant no disrespect by this at all.\u003C/p\u003E\u003Cp\u003EOf course, if you want to make a model, like a battery or a panel, simply do it like you would with any other part, and use the part.cfg in the EPS parts to see what module\u003C/p\u003E\u003Cp\u003Eyou need to use and parameters you have to define.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003Ewhat the hell do the \u0027Standard Calls\u0027 do/provide?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThose are what you use to get power, get the warprate, charge the batteries, etc...\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAlso currently on its own its very limited. You got something to store energy, you got something to gather with it but you don\\\u0027t have a module to actually use the energy (haven\\\u0027t noticed a filter to go along with your ZO2 plugin).\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, it is \u0027limited\u0027, because you don\\\u0027t install this mod on it\\\u0027s own. The goal of this mod is to make a standard system plugin creators can use in their mods, and than all those mods created\u003C/p\u003E\u003Cp\u003Ewould be compatible. An example: You make the Sat-dish. It drains power. If you make the panels and batteries that support it\\\u0027s power needs, that will work fine. But than, when your mod\u003C/p\u003E\u003Cp\u003Eis released, and someone has the (pre-0.6) Zoxygen mod and you mod too, the Zoxygen cannot be refilled from your mods batteries/panels, and your mod won\\\u0027t use the sources from\u003C/p\u003E\u003Cp\u003EZoxygen. So than, the player has to put 2 types of panels and batteries on his/her craft to use both mods. And the part creators have to make 2 types of panels, batteries, etc...\u003C/p\u003E\u003Cp\u003ENow imagine the same scenario with 10 mods, all using their own form of elecricity! -\u0026gt; Chaos...\u003C/p\u003E\u003Cp\u003ESo, with EPS, every plugin creator can say: \u0027Ok, i don\\\u0027t have to make my own code for the elecricity stuff, i can just use the ones provided by EPS, i can also modify them using the templates\u003C/p\u003E\u003Cp\u003Ein the documentation, write my plugin using EPS, and it will be compatible with every other plugin using EPS!\u0027\u003C/p\u003E\u003Cp\u003EThan part creators can make their own versions of EPS parts, add animations and such (if they want), and know their parts will work with all EPS powered plugins.\u003C/p\u003E\u003Cp\u003EAnd than the player, who has 10 things that use EPS electric power can simply put the appropriate number of panels, batteries, drills on their craft, and everything will work with\u003C/p\u003E\u003Cp\u003Eeverything else.\u003C/p\u003E\u003Cp\u003EOf course, this only applies if the plugin mod creators use EPS in their mods. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAlso, the Filter was made by Kreuzung in his mod, to be able to use the Electrical Energy type of energy as Zoxygen type of energy. The Zo2 Main System has the filters \u0027built in\u0027.\u003C/p\u003E\u003Cp\u003EEPS poweres the Zo2 Main System directly.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EI suggest you add some extra modules such as:\u003C/p\u003E\u003Cp\u003E- EPS_IonEngine_Default\u003C/p\u003E\u003Cp\u003E- EPS_Generator_Default (Generator Part is a Generator)\u003C/p\u003E\u003Cp\u003E- EPS_Filter_Default (to go along with your zoxygen plugin)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThose are in Kreuzung\\\u0027s mod. If he will use the EPS (from what i hear, yes!), than both the IonEngine and the Reactor will be compatible with Zoxygen too. The filter will probably be outdated.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Dani-Sang\u0022 data-cite=\u0022Dani-Sang\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EIsn\\\u0027t it just better to have:\u003C/p\u003E\u003Cp\u003ESOURCE ---\u0026gt; BATTERY ---\u0026gt; PART\u003C/p\u003E\u003Cp\u003EOr do you want to have the option to have only specific sources to energize specific parts?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI most definiatly want the option for selective powering! For ex.: an IRSU must be able to get fuel from the Drills only, but not Batteries or Panels!\u003C/p\u003E\u003Cp\u003EAn even simpler scenario where \u0027SOURCE ---\u0026gt; BATTERY ---\u0026gt; EpsUsingPART\u0027 would not work: What if the player doesn\\\u0027t want Batteries at all? EPS would just stop working.\u003C/p\u003E\u003Cp\u003EI\\\u0027d like to make it possible for the players to \u0027screw around\u0027 with EPS stuff as \u0027flexibly\u0027 as stock parts.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022togfox\u0022 data-cite=\u0022togfox\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EThis is a great step towards unifying electricity and parts that require electricity! I\\\u0027m hope the coders can work together to standardise this, document it and make KSP wickedly cool. 8)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHere\\\u0027s to hoping! :cheers:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Kreuzung\u0022 data-cite=\u0022Kreuzung\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EDoes this also allow to store energy as part resource, like my plugin does right now?\u003C/p\u003E\u003Cp\u003EYou really managed to confuse me with this right now, hopefully it makes sense for me after I\\\u0027m back from school...\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt does not store the energy as part resource, i thought about it, but i think it\\\u0027s better not to do that, at least for the time being, as the part resource system is a new thing, and if\u003C/p\u003E\u003Cp\u003Esomething is changed in later KSP versions, that might mean a major rewrite of the mod. Also, i find it more flexible to use my own system \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAsk any question, i will try my best to answer it! I am also working on expanding the documentation!\u003C/p\u003E\u003Cp\u003EWell, i seem to have managed to write a nice wall of text! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThank you all for your replies, fell free ot ask any questions!\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-07-14T09:34:39Z","Content":"\n\u003Cp\u003EWell, I store all energy with system now:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cdiv\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Epublic class EL_API\u003Cbr\u003E{\u003Cbr\u003E //------------------------------------------------------\u003Cbr\u003E //Consumes amount of energy in vessel\u003Cbr\u003E public static bool Consume(float Amount, Vessel vessel)\u003Cbr\u003E {\u003Cbr\u003E if (GetVesselEnergy(vessel) \u0026lt; Amount) return false;//Runs faster and prevents lag with batteries empty\u003Cbr\u003E foreach (Part p in vessel.parts)//Check each part\u003Cbr\u003E {\u003Cbr\u003E //Part resource\u003Cbr\u003E Amount-=p.RequestResource(\u0027Energy\u0027, Amount);\u003Cbr\u003E if(Amount \u0026lt;= 0.0001) return true;\u003Cbr\u003E }\u003Cbr\u003E return false;\u003Cbr\u003E }\u003Cbr\u003E //---------------------------------------------------\u003Cbr\u003E //Load the vessel with amount of energy, returns energy that couldn\\\u0027t be stored\u003Cbr\u003E public static float Load(float Amount, Vessel vessel)\u003Cbr\u003E {\u003Cbr\u003E if (Amount \u0026lt; 0) return Amount;\u003Cbr\u003E foreach (Part p in vessel.parts)\u003Cbr\u003E {\u003Cbr\u003E if (p.Resources.Contains(\u0027Energy\u0027))\u003Cbr\u003E {\u003Cbr\u003E if (p.Resources[\u0027Energy\u0027].maxAmount - p.Resources[\u0027Energy\u0027].amount \u0026gt;= Amount)//Battery can store amount, do so and return 0\u003Cbr\u003E {\u003Cbr\u003E p.Resources[\u0027Energy\u0027].amount \u002B= Amount;\u003Cbr\u003E return 0;\u003Cbr\u003E }\u003Cbr\u003E else//Battery can\\\u0027t store amount completely\u003Cbr\u003E {\u003Cbr\u003E Amount -= p.Resources[\u0027Energy\u0027].maxAmount - p.Resources[\u0027Energy\u0027].amount;\u003Cbr\u003E p.Resources[\u0027Energy\u0027].amount = p.Resources[\u0027Energy\u0027].maxAmount;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E return Amount;\u003Cbr\u003E }\u003Cbr\u003E //-----------------------------------------------\u003Cbr\u003E //Because nobody needs it\u003Cbr\u003E public static void RemoveAllEnergy(Vessel vessel)\u003Cbr\u003E {\u003Cbr\u003E foreach (Part p in vessel.parts)\u003Cbr\u003E {\u003Cbr\u003E p.Resources[\u0027energy\u0027].amount = 0;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E //------------------------------------------------\u003Cbr\u003E //Cheating?\u003Cbr\u003E public static void RestoreAllEnergy(Vessel vessel)\u003Cbr\u003E {\u003Cbr\u003E foreach (Part p in vessel.parts)\u003Cbr\u003E {\u003Cbr\u003E p.Resources[\u0027energy\u0027].amount = p.Resources[\u0027energy\u0027].maxAmount;\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E public static float GetVesselEnergy(Vessel vessel)\u003Cbr\u003E {\u003Cbr\u003E float r = 0;\u003Cbr\u003E foreach (Part p in vessel.parts)\u003Cbr\u003E {\u003Cbr\u003E if (p.Resources.Contains(\u0027Energy\u0027)) r \u002B= p.Resources[\u0027Energy\u0027].amount;\u003Cbr\u003E }\u003Cbr\u003E return r;\u003Cbr\u003E }\u003Cbr\u003E}\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Eusing System;\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt works well, every part can store energy, and I think I can make it interact with your system too.\u003C/p\u003E\u003Cp\u003EI\\\u0027d like to have part modules as sources, is that possible? For some reason, I\\\u0027m not coding parts anymore, just modules.\u003C/p\u003E\n"},{"CreatedByName":"Alchemist","CreatedById":8825,"CreatedDateTime":"2012-07-21T16:24:58Z","Content":"\n\u003Cp\u003EI like the concept of direct requesting power directly from the sources, but here are some suggestions:\u003C/p\u003E\u003Cp\u003E1) KSPField interface. Fields marked as [KSPField] are accessible through part.Fields[Fieldname]. That should be less problematic (and probably much less laggy) than part.GetType().GetField(Fieldname). And at least there\\\u0027s a way to check if the field exists before running into null reference. Why not to use this interface? Even more: because you easily can check the fields it can remove naming requirements - you can check all parts and part modules if they are power sources.\u003C/p\u003E\u003Cp\u003E2) PartResource system. In fact, this is the ultimate answer to \u0027Stop making new tank types!\u0027. The system is accessible from any part without referencing any other plugins - it\\\u0027ll be accessible even by parts that have no EPS interface. So, any part with some capacity for energy resource becomes the battery. \u003C/p\u003E\u003Cp\u003E3) \u0027Power Demanded\u0027 (or may be better undemanded?) field for the sources. When taking power directly from a source, a consumer should not only add itself to its user list, but also mark how much power was \u003Cstrong\u003Eactually\u003C/strong\u003E routed to that user. This will stop the situations when old consumers already took all the energy, but then a new one adds itself to the list and gets its share out of nowhere (the new consumer should check how much is already taken this turn and not take more that actually left. it may also not take its share fully if it needs less). That will also allow perfect control for the Energy that goes to batteries: the power source will check this field next frame, if something left (a user didn\\\u0027t requested or requested less or no such users at all) the source will transfer that to the batteries (so that it can be used by users that don\\\u0027t have EPS interface or didn\\\u0027t get what it needed through direct power sharing). Then the source sets it\\\u0027s new power gain value (it might change between the frames) and resets the field.\u003C/p\u003E\u003Cp\u003EWhat does this give:\u003C/p\u003E\u003Cp\u003E1) compatibility with anything PartResource-compatible, while still preserving the direct source-user routing for EPS.\u003C/p\u003E\u003Cp\u003E2) more careful power management (the current scheme may waste rather much of it)\u003C/p\u003E\u003Cp\u003E3) possibly even less lag\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-07-22T15:22:01Z","Content":"\n\u003Cp\u003EAnd please also allow part modules as sources. I ? PART MODULES! ;P\u003C/p\u003E\u003Cp\u003EAnd well, that \u0027name it like this and declare these variables!\u0027 cries for an interface.\u003C/p\u003E\n"},{"CreatedByName":"SquirrelMachine","CreatedById":28033,"CreatedDateTime":"2012-07-30T02:04:24Z","Content":"\n\u003Cp\u003EHas there been any recent progress on this? As a player I would love to have only one kind of panel and one kind of battery fuel everything. I love zoxygene and ion engines, but so far I\\\u0027ve only found engines that don\\\u0027t use ESP, which makes me have to haul up two kinds of batteries, complicating ship design a bit. I hope development continues.\u003C/p\u003E\n"},{"CreatedByName":"WoodenBiplane","CreatedById":22309,"CreatedDateTime":"2012-08-06T02:36:38Z","Content":"\n\u003Cp\u003EHey SquirrelMachine, I think MMI (Mechanical Mouse Industries) uses ESP.\u003C/p\u003E\n"},{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-08-06T18:58:31Z","Content":"\n\u003Cp\u003EHi Everyone!\u003C/p\u003E\u003Cp\u003EI just want to make a quick update on what to expect from EPS 0.2:\u003C/p\u003E\u003Cp\u003E -All EPS Batteries and Sources converted to PartModules.\u003C/p\u003E\u003Cp\u003E -Solar Panel Modules detect if they are attached to Powertech adv. panels, and can use any of the panels using them (dynasat, kosmos...).\u003C/p\u003E\u003Cp\u003E -EPS Batteries now contain PartResource, so EPS can now be used that way too! This results in SRC--\u0026gt;BATT--\u0026gt;Consumer power flow.\u003C/p\u003E\u003Cp\u003E -EPS Reactor module.\u003C/p\u003E\u003Cp\u003E -A powerful but really simple interface to make your plugin compatible with EPS.\u003C/p\u003E\u003Cp\u003E -An EPS_User module that needs to be attached to the consuming part. This handles all EPS functions, you only need to tell it what to do.\u003C/p\u003E\u003Cp\u003E -A \u0022Dumb Mode\u0022 for the EPS_User module that enables parts that have nothing to do with EPS to consume power and be deactivated if it runs out and reactivated if power is back(!).\u003C/p\u003E\u003Cp\u003ERelease should be this week.\u003C/p\u003E\u003Cp\u003ECheers!\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222012-08-06T19:04:28Z\u0022 title=\u002208/06/2012 07:04  PM\u0022 data-short=\u002211 yr\u0022\u003EAugust 6, 2012\u003C/time\u003E by l00\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"rkman","CreatedById":15721,"CreatedDateTime":"2012-08-06T20:32:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022l00\u0022 data-cite=\u0022l00\u0022\u003E\u003Cdiv\u003E...deactivated if it runs out and reactivated if power is back(!).\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EVery nice. \u003C/p\u003E\u003Cp\u003EI guess it\u0027s safe to assume that means batteries to will be able to be recharged once empty. Not to mention there will be dual fuel capability.\u003C/p\u003E\n"},{"CreatedByName":"AncientAstronaut","CreatedById":36093,"CreatedDateTime":"2012-08-09T05:34:06Z","Content":"\n\u003Cp\u003EWill this work for .16? I think this is exactly what I need.\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-08-09T16:29:26Z","Content":"\n\u003Cp\u003EIt should.\u003C/p\u003E\n"},{"CreatedByName":"Shadowfios","CreatedById":34205,"CreatedDateTime":"2012-08-17T10:19:02Z","Content":"\n\u003Cp\u003EI know it has already been asked, but I am still confused to whether or not you can fuel ion engines with EPS. Preferably with a simple .cfg edit. If you can fuel ion engines with it could you please post a sample code of Mechanical Mouse industries\u0027s satellite pack\u0027s ion engine, highlighting the difference between the original and the edited? If it is not possible at the moment will it be possible after the next update to this mod?\u003C/p\u003E\n"},{"CreatedByName":"Andorian Blues","CreatedById":30416,"CreatedDateTime":"2012-09-08T01:28:30Z","Content":"\n\u003Cp\u003EI\u0027m trying to test out how the \u0022dumb mode\u0022 module works. The example given in the documentation is that this should work to power a LiquidFuelEngine part, because it can be turned on and off. So I\u0027ve attached the following to the end of the part.cfg file for a liquid fuel engine:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = EPS_User_DEF\u003Cbr\u003E\tMaxConsumption = 0.10\u003Cbr\u003E\tDeactivateUnpowered = 0\u003Cbr\u003E}\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027ve purposefully set the consumption high to test how it works. However in game the engine works exactly as in vanilla, and does not consume any energy, nor does it deactivate if there is no energy available. Right clicking shows EPS Pwr Cons:: 0, and it never changes from 0. What am I missing?\u003C/p\u003E\n"},{"CreatedByName":"zgrillo2004","CreatedById":44211,"CreatedDateTime":"2012-09-18T09:25:53Z","Content":"\n\u003Cp\u003EDoes anyone have any problem attaching the batteries to my rocket, because when I try to attach an type of battery except the fuel cells, it would break the rocket creator\u0027s snap capabilities and I cant put new parts in and its really ticking me off.\u003C/p\u003E\n"},{"CreatedByName":"BlueSubstance","CreatedById":40362,"CreatedDateTime":"2012-09-19T15:11:54Z","Content":"\n\u003Cp\u003EPipipipictures?\u003C/p\u003E\n"},{"CreatedByName":"strictlyrude27","CreatedById":36036,"CreatedDateTime":"2012-09-26T04:33:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zgrillo2004\u0022 data-cite=\u0022zgrillo2004\u0022\u003E\u003Cdiv\u003EDoes anyone have any problem attaching the batteries to my rocket, because when I try to attach an type of battery except the fuel cells, it would break the rocket creator\u0027s snap capabilities and I cant put new parts in and its really ticking me off.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027m the same boat. Game makes a really awful buzzing sound, then I can\u0027t connect parts anymore. And no more parts will attach after that, either..\u003C/p\u003E\n"},{"CreatedByName":"Stalvet","CreatedById":27689,"CreatedDateTime":"2012-09-26T16:55:15Z","Content":"\n\u003Cp\u003EHi\u003C/p\u003E\u003Cp\u003EThe same situation as above. Place part of my report for test zoxydene parts in 0.17.\u003C/p\u003E\u003Cp\u003E\u0022\u003C/p\u003E\u003Cp\u003Eall modules have inside as follow make a problems with connect parts:\u003C/p\u003E\u003Cp\u003E// --- general parameters ---\u003C/p\u003E\u003Cp\u003Ename = EPS xxxxxxxxxx\u003C/p\u003E\u003Cp\u003Emodule = GenericEPS\u003C/p\u003E\u003Cp\u003EThanks for Kreuzung for idea, but problem not solved\u003C/p\u003E\u003Cp\u003E \u0022Posted by Kreuzung \u003C/p\u003E\u003Cp\u003ETry changing that to module = Strut .....\u0022\u003C/p\u003E\u003Cp\u003EI try to make it but - the same problem. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Kreuzung","CreatedById":21035,"CreatedDateTime":"2012-09-26T17:02:07Z","Content":"\n\u003Cp\u003EThen EPS is broken in .17.\u003C/p\u003E\n"},{"CreatedByName":"l00","CreatedById":11431,"CreatedDateTime":"2012-09-27T17:18:12Z","Content":"\n\u003Cp\u003ENew version released.\u003C/p\u003E\u003Cp\u003EAs this mod now has a use by itself,\u003C/p\u003E\u003Cp\u003Ei\u0027d like to request this thread to be moved to the Plugin-Powered releases section.\u003C/p\u003E\u003Cp\u003EThank you, and enjoy \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"}]}