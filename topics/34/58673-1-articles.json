{"TopicId":58673,"ForumId":34,"TopicTitle":"Open Resource System (ORS) - Mod Resource API - version 1.4.2","CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-02T22:58:10Z","PageNum":1,"Articles":[{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-02T22:58:10Z","Content":"\n\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv style=\u0022text-align:center;\u0022\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003EOpen Resource System (ORS) - Mod Resource API - version 1.4.2\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003C/div\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EWhat is the Open Resource System?\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EORS is designed to provide a framework for mods to create resources in KSP with minimal effort. It includes pre-written part modules that you can use for resource scanning and resource extraction directly just by creating .cfg files or you can use a reference to the ORS .dll file in your own plugin code.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003EHow does it work?\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe basic idea of ORS is to seperate resources into tree types:\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EAtmospheric Resources\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAtmospheric resources are resources that are found, simply enough, in the atmospheres of planets. These resources can be collectable or they can be specified solely for interest, i.e. detected with scanners but not collected. ORS defines the atmosphere for each planet and the idea is that modders modify these definitions using ModuleManager. Atmospheric resource definitions look like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EATMOSPHERIC_RESOURCE_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E\tname = KerbinOxygen\u003Cbr\u003E\tguiName = Oxygen\u003Cbr\u003E\tcelestialBodyName = Kerbin\u003Cbr\u003E\tresourceName = Oxidizer\u003Cbr\u003E\tabundance = 0.20946\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe resourceName definition is optional, this determines whether a particular \u0022in game\u0022 resource can be collected from the atmosphere.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOceanic Resources\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EOceanic resources are much like Atmospheric resources and ORS also defines default values for every body in the Kerbin system, which again, are designed to be updated using ModuleManager or extended. They look like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOCEANIC_RESOURCE_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E\tname = KerbinWater\u003Cbr\u003E\tguiName = Water\u003Cbr\u003E\tcelestialBodyName = Kerbin\u003Cbr\u003E\tabundance = 0.9666\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAgain, the resourceName definition (see the atmosphere node example) is optional. Unlike in the atmosphere node, it isn\u0027t shown in this one because there are no resources in the stock game that can be collected directly from the ocean without some kind of processing.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EResource Packs\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAtmospheric and Oceanic resources, since they are based on concentrations need to be consistent, otherwise values could add up to more 100% or different mods could report different values and that might be very confusing to the player! As such, ORS will allow the player to load in only one atmospheric and oceanic resource pack at a time.\u003C/p\u003E\u003Cp\u003EAtmospheric and Oceanic packs enclose the ATMOSPHERIC_RESOURCE_DEFINITION and OCEANIC_RESOURCE_DEFINITION blocks as follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EATMOSPHERIC_RESOURCE_PACK_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E    name = ExampleAtmosphericPack\u003Cbr\u003E    ATMOSPHERIC_RESOURCE_DEFINITION\u003Cbr\u003E    {\u003Cbr\u003E\tname = EveCarbonDioxide\u003Cbr\u003E\tguiName = Carbon Dioxide\u003Cbr\u003E\tcelestialBodyName = Eve\u003Cbr\u003E\tabundance = 0.6217\u003Cbr\u003E    }\u003Cbr\u003E    ATMOSPHERIC_RESOURCE_DEFINITION\u003Cbr\u003E    {\u003Cbr\u003E\tname = EveNitrogen\u003Cbr\u003E\tguiName = Nitrogen\u003Cbr\u003E\tcelestialBodyName = Eve\u003Cbr\u003E\tabundance = 0.3654\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    ....\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EOCEANIC_RESOURCE_PACK_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E    name = ExampleOceanicPack\u003Cbr\u003E    OCEANIC_RESOURCE_DEFINITION\u003Cbr\u003E    {\u003Cbr\u003E\tname = EveWater\u003Cbr\u003E\tguiName = Water\u003Cbr\u003E\tcelestialBodyName = Eve\u003Cbr\u003E\tabundance = 0.9783\u003Cbr\u003E    }\u003Cbr\u003E    OCEANIC_RESOURCE_DEFINITION\u003Cbr\u003E    {\u003Cbr\u003E\tname = EveSodium\u003Cbr\u003E\tguiName = Sodium\u003Cbr\u003E\tcelestialBodyName = Eve\u003Cbr\u003E\tabundance = 0.0094\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    ...\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt is best practise to place these nodes inside cfg files inside the ORSResourcePack directory and make it clear to the user that they should remove any existing ORSResourcePack before installing yours.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ECrustal Resources\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ECrustal resources are the most complicated and are not defined by default. These define a resource map created by an image file that determines the abudnance of the element across the surface of each planet. This is an example of a node from KSP Interstellar.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EPLANETARY_RESOURCE_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E\tname = Thorium\u003Cbr\u003E\tcelestialBodyName = Kerbin\u003Cbr\u003E\tresourceName = ThF4\u003Cbr\u003E\tmapUrl = WarpPlugin/PlanetResourceData/kerbin_thorium\u003Cbr\u003E\tresourceScale = LOG_SCALE\u003Cbr\u003E\tscaleFactor = 1.0311580936394657748190008944693\u003Cbr\u003E\tscaleMultiplier = 4\u003Cbr\u003E\tdisplayTexture = WarpPlugin/thorium_resource_point\u003Cbr\u003E\tdisplayThreshold = 0.001\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EmapUrl\u003C/strong\u003E parameter determines the path to the (greyscale) image that definies the resources across Kerbin\u0027s surface.\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EresourceScale \u003C/strong\u003E parameter can be LOG_SCALE or LINEAR_SCALE. Using greyscale only gives you 255 different possible values so using LOG_SCALE allows you to achieve a much bigger variation over the range.\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EscaleFactor \u003C/strong\u003E parameter is only applicable when using LOG_SCALE. Resource value is equal to scaleFactor^(pixel greyscale value)/1000000 (i.e. the number is in ppm).\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EscaleMultiplier \u003C/strong\u003E parameter is a final simple multiplication to change the resource value, making the final resource valuel scaleMultiplier * scaleFactor^(pixel greyscale value)/1000000 for LOG_SCALE or (pixel greyscale value)/255 * scaleMultiplier for LINEAR_SCALE.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E \u003Cem\u003EThe final resource value should always be between 0 and 1.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EdisplayTexture \u003C/strong\u003E parameter will allow a textured sphere with the specified texture to be displayed at locations of high abundance of a particular resource, allowing your players to spot resources using a scanner from orbit both on the game display and in the map view.\u003C/p\u003E\u003Cp\u003EThe \u003Cstrong\u003EdisplayThreshold \u003C/strong\u003E parameter determines the abundance of the resource you need in order to trigger the spot being detected as a high abundance area.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E \u003Cem\u003EDo not overuse these options, you should have perhaps 0-100 high abundance areas per planet, no more.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EExamples\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003Ekerbin_thorium.png\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/MqQkcso.png\u0022 alt=\u0022MqQkcso.png\u0022\u003E\u003C/p\u003E\u003Cp\u003Ethorium_resource_point.png\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/9OGki6E.png\u0022 alt=\u00229OGki6E.png\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EOkay, how do I scan for resources?\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EYou can hook into the system to scan for resources by using the ORSResourceScanner part module. Let\u0027s say I wanted to scan for the Thorium above, I would make a part with this PartModule\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ORSResourceScanner\u003Cbr\u003E\tresourceName = Thorium\u003Cbr\u003E\tmapViewAvailable = true\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis module simply says that it is scanning for the Thorium resource and that you should be able to see high concentrations of Thorium marked in game. The part will also show you the percentage/ppm concentration in the soil below.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003ESo far so good, how do I make it possible to extract resources?\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ELet\u0027s continue to use Thorium as an example, the module for resource extraction is a little more complicated than the others but it\u0027s still really rather simple. This is what the thorium mining module in Interstellar looks like this but this has some special features such as using the Megajoule resource manager to draw power. \u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ORSModuleResourceExtraction\u003Cbr\u003E\tpowerConsumptionLand = 10\u003Cbr\u003E\tpowerConsumptionOcean = 0.001\u003Cbr\u003E\textractionRateLandPerTon = 0.009259259259\u003Cbr\u003E\textractionRateOceanPerTon = 0.0001\u003Cbr\u003E\tresourceName = ThF4\u003Cbr\u003E\tunitName = Thorium Miner\u003Cbr\u003E\textractActionName = Mine Thorium\u003Cbr\u003E\tstopActionName = Stop Thorium Mining\u003Cbr\u003E\tresourceManaged = True\u003Cbr\u003E\tresourceToUse = Megajoules\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EMost people probably aren\u0027t going to want to make use of those extra features so they might modify the item like this (changes highlighted in bold). The changes to powerConsumption and extraction rate are to make things more friendly to stock power levels.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = ORSModuleResourceExtraction\u003Cbr\u003E\tpowerConsumptionLand = [B]100[/B]\u003Cbr\u003E\tpowerConsumptionOcean = 0.001\u003Cbr\u003E\textractionRateLandPerTon = [B]0.00009259259259[/B]\u003Cbr\u003E\textractionRateOceanPerTon = 0.0001\u003Cbr\u003E\tresourceName = ThF4\u003Cbr\u003E\tunitName = Thorium Miner\u003Cbr\u003E\textractActionName = Mine Thorium\u003Cbr\u003E\tstopActionName = Stop Thorium Mining\u003Cbr\u003E\tresourceManaged = [B]False[/B]\u003Cbr\u003E\tresourceToUse = [B]ElectricCharge[/B]\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EI\u0027m a modder and I\u0027m worried about distributing other people\u0027s code with my plugin in case an update breaks something, can you help me?\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EYes I can. In order to guarantee that your mod will continue to work even when this plugin is updated, this mod will be distributed with a number of .dll files. The current standard version OpenResourceSystem.dll and the current version specific .dll file - i.e. the first version will have OpenResourceSystem.dll and OpenResourceSystem_1_0_0.dll. If you must guarantee compatibility for players of your mod, you should compile your own mod using the most recent \u003Cem\u003Eversion specific copy\u003C/em\u003E of the plugin.\u003C/p\u003E\u003Cp\u003EYou should then distribute your mod with a copy of OpenResourceSystem containing the version specific .dll you are currently referencing i.e. \u0022OpenResourceSystem_1_0_0.dll\u0022 but \u003Cstrong\u003ENOT\u003C/strong\u003E the default OpenResourceSystem.dll. You should then alter your reference to use a specific alias rather than \u0022global\u0022, e.g. \u0022ORSv1_4\u0022 for OpenResourceSystem_1_4_0.dll and use extern alias to reference your specific version. This ensures that newer versions of the plugin will never accidently replace old versions, at worst any .dll can only be replaced be a .dll of the same version number (which doesn\u0027t matter).\u003C/p\u003E\u003Cp\u003EYou can make \u0022safe\u0022 copies of the above files simply by inheriting from the above class. So, in the case of Interstellar, to make use of this system, I might create a .cs file called FNResourceScanner.cs file which looked liked this\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eextern alias ORSv1_4;\u003Cbr\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing ORSv1_4::OpenResourceSystem;\u003Cbr\u003E\u003Cbr\u003Enamespace FNPlugin {\u003Cbr\u003E    class FNResourceScanner : ORSResourceScanner {\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand references OpenResourceSystem_1_4_0.dll. That way, if I later release OpenResourceSystem version 1.5 (or whichever version comes next), it doesn\u0027t matter - OpenResourceSystem_1_4_0.dll will still be there and my plugin is safe. I can then update to OpenResourceSystem_1_5_0.dll at my own leisure without worrying about my mod breaking.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cstrong\u003EI\u0027m looking for a resource system, something like the original proposed stock system, will this mod give me that?\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003ENo. This mod is all behind the scenes stuff designed to make it easy for modders to add those kind of resource systems and to provide a common backend, so that parts from one mod will work with resources in other mods, etc. If you\u0027re looking for mods that actually add resources, this resource system is all based off work done originally for \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/43839-0-23-KSP-Interstellar-%28Tweakables-New-ISRU-Preecoolers%29-Version-0-9-2-%28Beta%29\u0022 rel=\u0022external nofollow\u0022\u003EKSP Interstellar\u003C/a\u003E. Interstellar is a large and heavy footprint mod for people to rely upon for their own resource systems, so I decided to seperate out the resource components and make them available to everyone under a permissive license. \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/23979-Kethane-Pack-0-8-2-%28KSP-0-23%29-Find-it-mine-it-burn-it%21-New-download-mirror\u0022 rel=\u0022external nofollow\u0022\u003EKethane\u003C/a\u003E is also a popular but unrelated resource mod.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://bitbucket.org/FractalUK/kspinstellar/downloads/OpenResourceSystem-v1.4.2.zip\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cstrong\u003EDownload\u003C/strong\u003E\u003C/span\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/FractalUK/KSPInterstellar/tree/develop/OpenResourceSystem\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:10px;\u0022\u003ESource\u003C/span\u003E\u003C/strong\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/FractalUK/KSPInterstellar/blob/master/OpenResourceSystem/License.txt\u0022 rel=\u0022external nofollow\u0022\u003ELicense\u003C/a\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-09-24T23:34:33Z\u0022 title=\u002209/24/2014 11:34  PM\u0022 data-short=\u00229 yr\u0022\u003ESeptember 24, 2014\u003C/time\u003E by Fractal_UK\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"N3X15","CreatedById":12073,"CreatedDateTime":"2014-01-02T23:17:39Z","Content":"\n\u003Cp\u003EOh my.~\u003C/p\u003E\u003Cp\u003EI still have a Jenkins server, if you\u0027d like to set up continuous integration or put up nightlies.\u003C/p\u003E\n"},{"CreatedByName":"GeoPhizzix","CreatedById":98946,"CreatedDateTime":"2014-01-02T23:28:44Z","Content":"\n\u003Cp\u003EAhh, nothing like the smell of mineral exploration in the morning. I like the sound of this, definitely going to give it a try. Thank you for your time and sharing it with us!\u003C/p\u003E\n"},{"CreatedByName":"Ratzap","CreatedById":75982,"CreatedDateTime":"2014-01-02T23:49:00Z","Content":"\n\u003Cp\u003EAh good, you did decide to do it. I was getting round to PMing you again to see if you were going to or not before starting myself.\u003C/p\u003E\u003Cp\u003ENow we can all stop reinventing the wheel and polish one resource system up.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-02T23:56:06Z\u0022 title=\u002201/02/2014 11:56  PM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 2, 2014\u003C/time\u003E by Ratzap\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-03T00:54:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ratzap\u0022 data-cite=\u0022Ratzap\u0022\u003E\u003Cdiv\u003EAh good, you did decide to do it. I was getting round to PMing you again to see if you were going to or not before starting myself.\u003Cp\u003ENow we can all stop reinventing the wheel and polish one resource system up.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt took me a while to test the system to make sure the setup that I imagined was actually practical. The test case was rewriting large parts of Interstellar to hook into this rather than containing the code internally - by doing that, I\u0027ve proved that it is viable for other mods to hook into this in the same way.\u003C/p\u003E\u003Cp\u003EOf course, you don\u0027t actually need to reference the dll directly, you can just make use of the internal PartModules with .cfg files but I\u0027ve learnt from similar discussion about ModuleManager that a lot of modders really want to guarantee version safety (and I don\u0027t blame them).\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022N3X15\u0022 data-cite=\u0022N3X15\u0022\u003E\u003Cdiv\u003EOh my.~\u003Cp\u003EI still have a Jenkins server, if you\u0027d like to set up continuous integration or put up nightlies.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for the offer, I guess I\u0027ll wait and see how this takes off and whether it is something that attracts lots of willing contributors.\u003C/p\u003E\n"},{"CreatedByName":"deadshot462","CreatedById":13659,"CreatedDateTime":"2014-01-03T01:07:27Z","Content":"\n\u003Cp\u003ELooking forward to seeing what people come up with this.\u003C/p\u003E\n"},{"CreatedByName":"Fraz86","CreatedById":90101,"CreatedDateTime":"2014-01-03T01:19:11Z","Content":"\n\u003Cp\u003EThis looks great! Do you plan to incorporate orbital resources as well (e.g., like antimatter in KSPI)?\u003C/p\u003E\n"},{"CreatedByName":"jordanjay29","CreatedById":62787,"CreatedDateTime":"2014-01-03T01:21:53Z","Content":"\n\u003Cp\u003EI love these helper mods, it really shows that there\u0027s a vibrant, healthy modding community here. We need a directory of Mods for Modders for reference.\u003C/p\u003E\n"},{"CreatedByName":"CaptRobau","CreatedById":41695,"CreatedDateTime":"2014-01-03T01:51:17Z","Content":"\n\u003Cp\u003ECould you put up a small example mod or screenshots? I have a hard time making it work, which isn\u0027t helped by not knowing what everything should look like.\u003C/p\u003E\n"},{"CreatedByName":"Shad0wCatcher","CreatedById":98819,"CreatedDateTime":"2014-01-03T02:06:29Z","Content":"\n\u003Cp\u003E@ Fractal Congrats on the release; here\u0027s hoping it really catches on and we can have one unified \u0022resource\u0022 directory soon for folks to tap into versus everyone reinventing the wheel as Ratzap rather eloquently put it.\u003C/p\u003E\n"},{"CreatedByName":"Majiir","CreatedById":7550,"CreatedDateTime":"2014-01-03T03:05:21Z","Content":"\n\u003Cp\u003EFractal_UK, could you expand on the distribution and versioning scheme? Is OpenResourceSystem.dll some sort of version picker? What kind of file structure do you recommend (i.e. should API users include DLLs in their own GameData folders)? Is there any shared functionality (like caching or a UI) that will be duplicated if mods distribute their own DLLs?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Ratzap\u0022 data-cite=\u0022Ratzap\u0022\u003E\u003Cdiv\u003ENow we can all stop reinventing the wheel and polish one resource system up.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn what way is this not reinventing the wheel, and what previous projects \u003Cem\u003Ehave\u003C/em\u003E been reinventing the wheel?\u003C/p\u003E\n"},{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-03T03:33:58Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Majiir\u0022 data-cite=\u0022Majiir\u0022\u003E\u003Cdiv\u003EFractal_UK, could you expand on the distribution and versioning scheme? Is OpenResourceSystem.dll some sort of version picker? What kind of file structure do you recommend (i.e. should API users include DLLs in their own GameData folders)? Is there any shared functionality (like caching or a UI) that will be duplicated if mods distribute their own DLLs?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere shouldn\u0027t be any need to include the dll in the mod\u0027s own folder but equally there is no problem with putting it there. No code is actually executed on loading by any of the plugins, it\u0027s all triggered by Part Modules so the idea is that the OpenResourceSystem directory can contain a version archive, that way if you have two mods, mod A and mod B where mod A uses OpenResourceSystem_1_0_0.dll and mod B uses OpenResourceSystem_2_2_0.dll, both mods will still have access to the code that they themselves want to use. The only thing I need to do is maintain cfg file compatibility between releases.\u003C/p\u003E\u003Cp\u003EThus, mod A can include its release containing OpenResourceSystem/Plugins/OpenResourceSystem_1_0_0.dll, Mod B can include a release containing OpenResourceSystem/Plugins/OpenResourceSystem_2_2_0.dll, and neither will conflict with each other or the standard OpenResourceSystem.dll. Critically, when players install new mods the only files that might get overwritten are copies of the same version of the dll - and that should not matter at all.\u003C/p\u003E\u003Cp\u003EOpenResourceSystem.dll is merely the default, up to date copy, which should only be distributed from here - any mods hooking in should use the appropriate version specific DLL. This default one should also be loaded first allowing mods using only .cfg files associated with this to use the most up to date version of the plugin.\u003C/p\u003E\u003Cp\u003EThere is no UI crossover involved, data is obviously duplicated if you have many different versions running at the same time but each version will be retreiving data from the same source .cfg files so doing this shouldn\u0027t cause any strange results.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Fraz86\u0022 data-cite=\u0022Fraz86\u0022\u003E\u003Cdiv\u003EThis looks great! Do you plan to incorporate orbital resources as well (e.g., like antimatter in KSPI)?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI guess I could do, I am not sure how many resources other resources would fit well into this category but it could be done.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-01-03T03:37:33Z\u0022 title=\u002201/03/2014 03:37  AM\u0022 data-short=\u002210 yr\u0022\u003EJanuary 3, 2014\u003C/time\u003E by Fractal_UK\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Shad0wCatcher","CreatedById":98819,"CreatedDateTime":"2014-01-03T03:51:15Z","Content":"\n\u003Cp\u003EI suppose Nebula mining (future-proofing essentially) would be done orbitally; same with planetary rings (someone makes one that can be interacted with).\u003C/p\u003E\n"},{"CreatedByName":"FenrirWolf","CreatedById":72121,"CreatedDateTime":"2014-01-03T04:08:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Majiir\u0022 data-cite=\u0022Majiir\u0022\u003E\u003Cdiv\u003EIn what way is this not reinventing the wheel, and what previous projects \u003Cem\u003Ehave\u003C/em\u003E been reinventing the wheel?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn that other people can hook into this iteration of the wheel instead of making a other one later.\u003C/p\u003E\n"},{"CreatedByName":"CaptRobau","CreatedById":41695,"CreatedDateTime":"2014-01-03T11:25:48Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Fractal_UK\u0022 data-cite=\u0022Fractal_UK\u0022\u003E\u003Cdiv\u003EI guess I could do, I am not sure how many resources other resources would fit well into this category but it could be done.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBussard Ramjet here we come.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2014-01-03T13:00:59Z","Content":"\n\u003Cp\u003EI don\u0027t understand the version system either. How does KSP know which version of the PartModule to use ? With 2\u002B DLL defining the same PartModule I think it will only use one version for all mods ( first or last ?)\u003C/p\u003E\u003Cp\u003EOr I need more coffee.\u003C/p\u003E\n"},{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-03T13:11:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sarbian\u0022 data-cite=\u0022sarbian\u0022\u003E\u003Cdiv\u003EI don\u0027t understand the version system either. How does KSP know which version of the PartModule to use ? With 2\u002B DLL defining the same PartModule I think it will only use one version for all mods ( first or last ?)\u003Cp\u003EOr I need more coffee.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKSP will always use the first version loaded for PartModules defined directly, which should always be the latest version - OpenResourceSystem.dll. Mods that require a version independent copy should reference the version specific copy of the dll (OpenResourceSystem_1_0_0.dll at present) and create new classes that inherit from these.\u003C/p\u003E\u003Cp\u003EIn your case, if you want a scanner, you might make:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing OpenResourceSystem;\u003Cbr\u003E\u003Cbr\u003Enamespace SarbianMod{\u003Cbr\u003E    class SarbianResourceScanner : ORSResourceScanner {\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThen in your part.cfg you use\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E\tname = SarbianResourceScanner\u003Cbr\u003E\tresourceName = Thorium\u003Cbr\u003E\tmapViewAvailable = true\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESarbianResourceScanner is now tied to the version specific copy of the .dll that you want to use for your own mod, whereas ORSResourceScanner is tied to the most up to date copy.\u003C/p\u003E\n"},{"CreatedByName":"sarbian","CreatedById":57146,"CreatedDateTime":"2014-01-03T13:49:01Z","Content":"\n\u003Cp\u003EOk, I get it now. Something still sound a bit too complex but I need to think more.\u003C/p\u003E\n"},{"CreatedByName":"Ratzap","CreatedById":75982,"CreatedDateTime":"2014-01-03T15:57:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Majiir\u0022 data-cite=\u0022Majiir\u0022\u003E\u003Cdiv\u003EIn what way is this not reinventing the wheel, and what previous projects \u003Cem\u003Ehave\u003C/em\u003E been reinventing the wheel?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EKethane is the best known resource system but it\u0027s restricted by the license. Every mod which wanted to do something with resources (extraplanetary and orbital come to mind) had to either attempt to fit in with your restrictions (the recent arguments in the EL thread are an example) or go it alone - a very daunting prospect. So people who might want to do something but don\u0027t want to have to write their own system or give it all to you and hope you agree can now do what they want.\u003C/p\u003E\u003Cp\u003ESo I suppose it is a reinvention but it\u0027s the first free and open system, which is what KSP needs. It\u0027s basic infrastructure for other people to build mods without needing to do more than add some config files. Use the same models, same parts, same GUI - nice and consistent for players.\u003C/p\u003E\n"},{"CreatedByName":"wasmic","CreatedById":64885,"CreatedDateTime":"2014-01-03T16:25:11Z","Content":"\n\u003Cp\u003ESo this is like the MinecraftForge OreDictionary? Sweeeeet.\u003C/p\u003E\n"},{"CreatedByName":"regex","CreatedById":70807,"CreatedDateTime":"2014-01-03T17:11:53Z","Content":"\n\u003Cp\u003EI\u0027m curious as to why this ships with its own resources defined? One of the drawbacks of extending Kethane\u0027s functions is that you always had to have Kethane. While your license doesn\u0027t prevent me from yanking them out, I\u0027m not sure why it isn\u0027t left up to the mod author to define their own resources (unless it is to reserve those names for KSPI?) I can understand them being included as an illustration of how to use the mod but are they needed? Do those resources show if you don\u0027t have a proper scanner, just sitting in the background?\u003C/p\u003E\u003Cp\u003EMaybe I\u0027m just ignorant of the functionality because I don\u0027t use KSPI...\u003C/p\u003E\u003Cp\u003EAnyway, great work Fractal_UK, I see some good things on the horizon from this.\u003C/p\u003E\n"},{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-03T17:22:24Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022regex\u0022 data-cite=\u0022regex\u0022\u003E\u003Cdiv\u003EI\u0027m curious as to why this ships with its own resources defined? One of the drawbacks of extending Kethane\u0027s functions is that you always had to have Kethane. While your license doesn\u0027t prevent me from yanking them out, I\u0027m not sure why it isn\u0027t left up to the mod author to define their own resources (unless it is to reserve those names for KSPI?) I can understand them being included as an illustration of how to use the mod but are they needed? Do those resources show if you don\u0027t have a proper scanner, just sitting in the background?\u003Cp\u003EMaybe I\u0027m just ignorant of the functionality because I don\u0027t use KSPI...\u003C/p\u003E\u003Cp\u003EAnyway, great work Fractal_UK, I see some good things on the horizon from this.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe idea of having a predefined set of oceanic and atmospheric resources is basically to ensure a good player experience, everything is designed to work from percentage abundances. It wouldn\u0027t really make much sense and wouldn\u0027t provide a good experience for players if the atmosphere or ocean ended up having resources that totalled up to 856% or something. I provide a set of defaults not to prevent changes but rather to try and define a range in which changes should be made.\u003C/p\u003E\n"},{"CreatedByName":"Dred_furst","CreatedById":194,"CreatedDateTime":"2014-01-03T17:31:45Z","Content":"\n\u003Cp\u003EWouldn\u0027t it be better to provide that in an example project if you are providing examples?\u003C/p\u003E\u003Cp\u003EI\u0027m looking into how to expand this, do you have any sort of roadmap for it currently? or any design documentation to boost development?\u003C/p\u003E\u003Cp\u003Eand finally re: project setup, what IDE are you using to develop this? Monodevelop or Visual studio? It appears to be missing the SLN file for the csproj file as well as having some weird dependencies in visual studio. (And inversely, KSPI is missing the csproj file for FNPlugin).\u003C/p\u003E\n"},{"CreatedByName":"regex","CreatedById":70807,"CreatedDateTime":"2014-01-03T18:03:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Fractal_UK\u0022 data-cite=\u0022Fractal_UK\u0022\u003E\u003Cdiv\u003EThe idea of having a predefined set of oceanic and atmospheric resources is basically to ensure a good player experience, everything is designed to work from percentage abundances. It wouldn\u0027t really make much sense and wouldn\u0027t provide a good experience for players if the atmosphere or ocean ended up having resources that totalled up to 856% or something. I provide a set of defaults not to prevent changes but rather to try and define a range in which changes should be made.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI would argue that it\u0027s up to the mod author to ensure a good player experience and to define what resources their mod provides/needs. What if they have differing ideas regarding the composition of Eve\u0027s oceans or Laythe\u0027s atmosphere? Now if they change those values using ModuleManager they\u0027re altering the experience for every other mod rather than adding what they need. Does KSPI use these defaults? I guess I\u0027m just a bit puzzled about how this is \u0022open\u0022 when there are defaults defined and changing them could affect the experience of other mods rather than building upon them.\u003C/p\u003E\n"},{"CreatedByName":"Fractal_UK","CreatedById":61595,"CreatedDateTime":"2014-01-03T18:23:54Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022regex\u0022 data-cite=\u0022regex\u0022\u003E\u003Cdiv\u003EI would argue that it\u0027s up to the mod author to ensure a good player experience and to define what resources their mod provides/needs. What if they have differing ideas regarding the composition of Eve\u0027s oceans or Laythe\u0027s atmosphere? Now if they change those values using ModuleManager they\u0027re altering the experience for every other mod rather than adding what they need. Does KSPI use these defaults? I guess I\u0027m just a bit puzzled about how this is \u0022open\u0022 when there are defaults defined and changing them could affect the experience of other mods rather than building upon them.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERemember that the definitions are going to be shared by all mods, that is the point of integrating into a single resource system, additionally multiple definitions are generally bad - that means if there are no defaults but four or five seperate mods want to use this to define the ocean as containing water (not an unreasonable thing to want) you immediately have five duplicate definitions and the whole thing becomes a mess. It is much much safer for atmospheric and oceanic resources to define defaults and edit them with ModuleManager.\u003C/p\u003E\u003Cp\u003EOnce I release the next update KSPI will use MM .cfgs to edit some resources into these existing definitions.\u003C/p\u003E\u003Cp\u003EIt may also be possible to add some kind of masking system so that certain mods can hide certain resources from others if they need to do something funny or create duplicates for some reason.\u003C/p\u003E\u003Cp\u003EPlanetary resource definitions are a bit different and no defaults are defined there.\u003C/p\u003E\n"}]}