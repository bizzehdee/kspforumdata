{"TopicId":58235,"ForumId":34,"TopicTitle":"[1.8-1.9] Modular Fuel Tanks v5.13.1","CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2013-12-30T08:03:39Z","PageNum":15,"Articles":[{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-08T17:33:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022taniwha\u0022 data-cite=\u0022taniwha\u0022\u003E\u003Cdiv\u003ENo, MFT will continue to remove unlisted resources. What I was proposing was making it so that tanks could have resources that cannot be edited.\u003Cp\u003EIt really is quite feasible to add every possible resource a command pod might have: stock pods have only ElectricCharge and MonoPropellant. Non-stock pods that add other resources can accept their responsibility and add those resources to the relevant tank definition. The same goes for mods like TAC-LS that add other resources.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe problem is that TAC-LS needs to determine if you have other mods too, like DRE, and ALSO add those resources to its tank types - so TAC-LS would have to make a tank type for every conceivable combination of mods that add stuff to command pods\u003Cem\u003E.\u003C/em\u003E The minute you have more than one mod with more than one resource, things get messy. But adding an option to just \u0022keep = thisresource\u0022 or something would make all of that much easier, or having two different types of MFT tanks: one that replaces, one that just adds. Otherwise, what happens when putting MFT first in the application of MM patches and adding RESOURCE{} stuff after it? Maybe that would work?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-08T17:35:59Z\u0022 title=\u002201/08/2015 05:35  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 8, 2015\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"legolegs","CreatedById":94430,"CreatedDateTime":"2015-01-09T09:37:34Z","Content":"\n\u003Cp\u003EWhile TACLS can be modified to match new MTF behavior things like ablative shields should not be affected by fuel tanks, modular or not.\u003C/p\u003E\n"},{"CreatedByName":"techno65535","CreatedById":160947,"CreatedDateTime":"2015-01-10T08:27:08Z","Content":"\n\u003Cp\u003ESo, I\u0027m trying to make an MM config to add electric charge back to the command pods when using MFT and TACLS. Made a definition and a config to add it but it\u0027s either I manage to add in electric charge while removing the lifesupport tanks, or it doesn\u0027t. Not sure what I\u0027m doing wrong at this point.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ETANK_DEFINITION\u003Cbr\u003E{\u003Cbr\u003E\tname = ElectricCharge\u003Cbr\u003E\tbasemass = -1\u003Cbr\u003E\tTANK\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ElectricCharge\u003Cbr\u003E\t\tamount = full\u003Cbr\u003E\t\tmaxAmount = 100%\u003Cbr\u003E\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E@PART[*]:HAS[#CrewCapacity[1],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 250\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[#CrewCapacity[2],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 350\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[#CrewCapacity[3],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 450\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[#CrewCapacity[4],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 550\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[#CrewCapacity[5],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 650\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[#CrewCapacity[6],@MODULE[ModuleCommand]]:Final\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\ttype = ElectricCharge\u003Cbr\u003E\t\tbasemass = -1\u003Cbr\u003E\t\tvolume = 750\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EShould probably mention this is my first time trying to make an MM config. Crossposting with MM thread.\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2015-01-11T07:35:29Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003Etechno65535\u003C/strong\u003E: not quite. What you need to do is add an ElectricCharge TANK to the TAC-LS definition.\u003C/p\u003E\n"},{"CreatedByName":"fatcargo","CreatedById":93302,"CreatedDateTime":"2015-01-13T19:21:50Z","Content":"\n\u003Cp\u003ETaniwha, i have a problem with multiple ModuleManager entries referencing same parts causing them to have multiple MFT items in context menu. Parts are from Space Plane Plus package which is now under Squad\u0027s parts folder.\u003C/p\u003E\u003Cp\u003EIn following example, in MM patch file \u0022Squad_modularFuelTanks.cfg\u0022 there are 3 different entries :\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E@PART[mk2SpacePlaneAdapter]\u003Cbr\u003E{\u003Cbr\u003E\t//!RESOURCE[LiquidFuel] {}\u003Cbr\u003E\t//!RESOURCE[Oxidizer] {}\u003Cbr\u003E\t//!RESOURCE[MonoPropellant] {}\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\tvolume = 80\u003Cbr\u003E\t\ttype = Fuselage\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[mk2SpacePlaneAdapter]\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\tvolume = 300\u003Cbr\u003E\t\ttype = Default\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[mk2SpacePlaneAdapter]\u003Cbr\u003E{\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = ModuleFuelTanks\u003Cbr\u003E\t\tvolume = 300\u003Cbr\u003E\t\ttype = Default\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAnd in MM patch file \u0022SPP.cfg\u0022 :\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E@PART[mk2SpacePlaneAdapter] { \u003Cbr\u003E    MODULE { \u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = 300\u003Cbr\u003E        type = Default\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThis causes part to have MFT context menu items with varying available units of space and selecting two out of 4 \u0022remove all\u0022 items causes remaing two to stay \u0022stuck\u0022 in menu.\u003C/p\u003E\u003Cp\u003EHave a look :\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/1JOrZmT.png\u0022 alt=\u00221JOrZmT.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ESo, which patch is the right one ? There are several parts with similar (mostly two identical entries per part) problems.\u003C/p\u003E\n"},{"CreatedByName":"benc85","CreatedById":78820,"CreatedDateTime":"2015-01-16T13:44:56Z","Content":"\n\u003Cp\u003EDid the option to add the 45/55 LF/O mix to tanks disappear? It doesn\u0027t seem to show on my install any more and having to use a calculator to add them individually is a pain in the ass \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"taniwha","CreatedById":57176,"CreatedDateTime":"2015-01-16T15:40:42Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003Ebenc85\u003C/strong\u003E: I do seem to have misplaced that somewhere. I\u0027ll check this weekend now that my EL/Kethane \u0022testing\u0022 has calmed down a little.\u003C/p\u003E\n"},{"CreatedByName":"benc85","CreatedById":78820,"CreatedDateTime":"2015-01-16T16:32:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022taniwha\u0022 data-cite=\u0022taniwha\u0022\u003E\u003Cdiv\u003E\u003Cstrong\u003Ebenc85\u003C/strong\u003E: I do seem to have misplaced that somewhere. I\u0027ll check this weekend now that my EL/Kethane \u0022testing\u0022 has calmed down a little.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWooooo! Thank you sir\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-16T22:28:49Z","Content":"\n\u003Cp\u003EHere is a link to an updated Squad_modularFuelTanks.cfg that I made. It removes duplicate entries with former SPP parts and merges everything from SPP into it. Can remove SPP.cfg entirely with this version.\u003C/p\u003E\u003Cp\u003ELink: \u003Ca href=\u0022https://dl.dropboxusercontent.com/u/59567837/Squad_modularFuelTanks.cfg\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://dl.dropboxusercontent.com/u/59567837/Squad_modularFuelTanks.cfg\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-17T17:20:53Z","Content":"\n\u003Cp\u003EI think we can actually replace most of the config files with this now:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// generic tank replacement\u003Cbr\u003E@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:FINAL {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[LiquidFuel]/maxAmount$\u003Cbr\u003E        @volume \u002B= #$../RESOURCE[Oxidizer]/maxAmount$\u003Cbr\u003E        type = Default\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:FINAL {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[LiquidFuel]/maxAmount$\u003Cbr\u003E        type = Fuselage\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@RESOURCE[MonoPropellant],!MODULE[ModuleCommand],!MODULE[ModuleFuelTanks]]:FINAL {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[MonoPropellant]/maxAmount$\u003Cbr\u003E        type = RCS\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@RESOURCE[XenonGas],!MODULE[ModuleFuelTanks]]:FINAL {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[XenonGas]/maxAmount$\u003Cbr\u003E        type = Xenon\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@MODULE[ModuleFuelTanks],@MODULE[ModuleEngines]]:FINAL {\u003Cbr\u003E    @MODULE[ModuleFuelTanks] {\u003Cbr\u003E        %basemass = -1\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@MODULE[ModuleFuelTanks],@MODULE[ModuleEnginesFX]]:FINAL {\u003Cbr\u003E    @MODULE[ModuleFuelTanks] {\u003Cbr\u003E        %basemass = -1\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART[*]:HAS[@MODULE[ModuleFuelTanks]]:FINAL {\u003Cbr\u003E    !MODULE[FSfuelSwitch] {}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m still working out all the files I need to change, nosecones, special tanks and the like. I haven\u0027t tested this yet.\u003C/p\u003E\u003Cp\u003EEDIT: It should work as a patch to existing installs now.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-17T20:46:34Z\u0022 title=\u002201/17/2015 08:46  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 17, 2015\u003C/time\u003E by NonWonderDog\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-17T17:47:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NonWonderDog\u0022 data-cite=\u0022NonWonderDog\u0022\u003E\u003Cdiv\u003EI think we can actually replace most of the config files with this now:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// generic tank replacement\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]] {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[LiquidFuel]/amount$\u003Cbr\u003E        volume \u002B= #$../RESOURCE[Oxidizer]/amount$\u003Cbr\u003E        type = Default\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]] {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[LiquidFuel]/amount$\u003Cbr\u003E        type = Fuselage\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@RESOURCE[MonoPropellant],!MODULE[ModuleFuelTanks]] {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[MonoPropellant]/amount$\u003Cbr\u003E        type = RCS\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@RESOURCE[XenonGas],!MODULE[ModuleFuelTanks]] {\u003Cbr\u003E    MODULE {\u003Cbr\u003E        name = ModuleFuelTanks\u003Cbr\u003E        volume = #$../RESOURCE[Xenon]/amount$\u003Cbr\u003E        type = Xenon\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI\u0027m still working out all the files I need to change, nosecones, special tanks and the like. I haven\u0027t tested this yet.\u003C/p\u003E\u003Cp\u003EEDIT: It should work as a patch to existing installs now.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat sounds like a good idea! I am not familiar enough with regex (?) to interpret some of what\u0027s in there, but I assume there would also be a way to replace a xenon tank with the \u0022Default\u0022 tank type by dividing the amount of XenonGas present in a part by 56 (I think) to get the right volume for liquid fuel / oxidizer...? And to do the same for things like NearFuture resources (divide LiquidHydrogen by 2.5, I think, ArgonGas by something crazy), and really anything else?\u003C/p\u003E\u003Cp\u003EReason I ask is because I\u0027ve patched the Default tank type to be pretty much universal - can have ElectricCharge, Xenon, ArgonGas, Karbonite, Metal, RocketParts, etc. etc.\u003C/p\u003E\u003Cp\u003EIt would be really cool to have just one config like that, matched to volumes/densities/whatever as laid out in CRP or some such.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-17T17:50:04Z\u0022 title=\u002201/17/2015 05:50  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 17, 2015\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-17T18:21:13Z","Content":"\n\u003Cp\u003EAlright, this didn\u0027t actually take very long (I\u0027m glad I learned Vim).\u003C/p\u003E\u003Cp\u003EDelete every .cfg except for MFSSettings.cfg and Propellants.cfg from your ModularFuelTanks directory, and drop in the \u0022Tanks\u0022 folder below. You can just leave it as a subdirectory (\u0027ModularFuelTanks/Tanks/zzGeneric.cfg\u0027, etc.).\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://www./download/iu9p1ds2rtc2y8e/GenericModularFuelTanks.zip\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/iu9p1ds2rtc2y8e/GenericModularFuelTanks.zip\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThis should have exactly the same tanks as before, but will also apply generic Modular Fuel Tanks to every tank from every mod that isn\u0027t already covered.\u003C/p\u003E\u003Cp\u003EThis uses the variable support that was added to ModuleManager recently. Basically, ModuleManager can now \u003Cem\u003Eread\u003C/em\u003E config files as well as just edit them. This config tells it to find out how much fuel, oxidizer, monoprop, or xenon each part carries, and to generate a modular fuel tank of that size.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-17T20:33:34Z\u0022 title=\u002201/17/2015 08:33  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 17, 2015\u003C/time\u003E by NonWonderDog\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-17T18:32:10Z","Content":"\n\u003Cp\u003ESo would this do what I\u0027m looking for? Which is: \u003C/p\u003E\u003Cp\u003E1. Find a part with LiquidHydrogen in it\u003C/p\u003E\u003Cp\u003E2. Apply MFT to that part, but\u003C/p\u003E\u003Cp\u003E3. Set the \u0022volume\u0022 of the MFT tank to be the amount of LiquidHydrogen divided by 2.5:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[LiquidHydrogen],!MODULE[ModuleFuelTanks]] {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[LiquidHydrogen]/amount$\u003C/p\u003E\u003Cp\u003E volume /= 2.5\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EReasoning being that LiquidHydrogen, for better or worse, seems to have about 2.5 times the units in the same volume as something with liquid fuel (so that it will balance about right with NFT tanks)\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-17T18:34:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AccidentalDisassembly\u0022 data-cite=\u0022AccidentalDisassembly\u0022\u003E\u003Cdiv\u003ESo would this do what I\u0027m looking for? Which is: \u003Cp\u003E1. Find a part with LiquidHydrogen in it\u003C/p\u003E\u003Cp\u003E2. Apply MFT to that part, but\u003C/p\u003E\u003Cp\u003E3. Set the \u0022volume\u0022 of the MFT tank to be the amount of LiquidHydrogen divided by 2.5:\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat should do it. You probably want to define a cryogenic tank for that, though.\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-17T19:18:31Z","Content":"\n\u003Cp\u003ENot sure what the difference between a cryogenic tank and other tank is (in real life I understand, but not in KSP), but here\u0027s what I\u0027ve come up with.\u003C/p\u003E\u003Cp\u003EThe reasoning behind the numbers is to approximate the amount of Xenon, Argon, or Liquid Hydrogen you get in a Near Future tank when compared to a stock tank of the same volume. This necessitates changing MFT\u0027s Xenon utilization to 14.5 rather than 56 (!). The 56 number is based exclusively (I think) on the small stock stackable Xenon tank, and is wildly more than you get in the same volume from a NFT tank. Opinions may vary on the right numbers.\u003C/p\u003E\u003Cp\u003EI use the Default tank type because I have patched it using an MM config to include NearFuture, EPL, and maybe some more resources - slight mass penalty for stuff like LiquidHydrogen or ArgonGas that probably need a bit more robust tanks (or cryogenic or whatever) to store.\u003C/p\u003E\u003Cp\u003EI added :Final to all of this because I figure that way, if I forget to delete any configs, these will run last and the check for !MODULE[ModuleFuelTanks] will avoid accidental duplication. Some mods have their own MFT definitions in their own directories, so I thought the MFT directory and its patches might get applied first, etc. etc.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E// generic tank replacement\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[LiquidFuel]/amount$\u003C/p\u003E\u003Cp\u003E volume \u002B= #$../RESOURCE[Oxidizer]/amount$\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[LiquidFuel]/amount$\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[LiquidHydrogen],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[LiquidHydrogen]/amount$\u003C/p\u003E\u003Cp\u003E volume /= 2.5\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[ArgonGas],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[ArgonGas]/amount$\u003C/p\u003E\u003Cp\u003E volume /= 16.5\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[MonoPropellant],!MODULE[ModuleCommand],!MODULE[ModuleFuelTanks],!MODULE[ModuleDockingNode]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[MonoPropellant]/amount$\u003C/p\u003E\u003Cp\u003E type = RCS\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[XenonGas],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[Xenon]/amount$\u003C/p\u003E\u003Cp\u003E volume /= 14.5\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@MODULE[ModuleFuelTanks],@MODULE[ModuleEngines]]:Final {\u003C/p\u003E\u003Cp\u003E @MODULE[ModuleFuelTanks] {\u003C/p\u003E\u003Cp\u003E %basemass = -1\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@MODULE[ModuleFuelTanks],@MODULE[ModuleEnginesFX]]:Final {\u003C/p\u003E\u003Cp\u003E @MODULE[ModuleFuelTanks] {\u003C/p\u003E\u003Cp\u003E %basemass = -1\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-17T19:22:01Z\u0022 title=\u002201/17/2015 07:22  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 17, 2015\u003C/time\u003E by AccidentalDisassembly\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-17T19:55:48Z","Content":"\n\u003Cp\u003EHmm... ModuleManager tells me that my generic file has 77 errors, which is impressive since there are only 45 lines. It doesn\u0027t tell me what any of those errors are, though...\u003C/p\u003E\u003Cp\u003E\u0022RESOURCE[Xenon]\u0022 should read \u0022RESOURCE[XenonGas]\u0022. That fixes 8 of them. \u003C/p\u003E\u003Cp\u003E\u0022volume \u002B= #$../RESOURCE[Oxidizer]/amount$\u0022 needs a \u0027@\u0027 in front of it. That\u0027s the rest of them -- it wasn\u0027t adding the Oxidizer volume to the modular tank.\u003C/p\u003E\u003Cp\u003EI did have to add \u0022:FINAL\u0022 to the generic config for mod compatibility, as well. The proper way would be for the other mods to use \u0027%MODULE[ModuleFuelTanks]\u0027 to override the generic tank if necessary, but that\u0027s not going to happen.\u003C/p\u003E\u003Cp\u003EI\u0027ve updated my zip: \u003Ca href=\u0022http://www./download/iu9p1ds2rtc2y8e/GenericModularFuelTanks.zip\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://www./download/iu9p1ds2rtc2y8e/GenericModularFuelTanks.zip\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EI think I might end up branching either this or RealFuels on GitHub and trying to make a generalized 6.4x-focused NearFuels out of it.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-17T21:12:14Z\u0022 title=\u002201/17/2015 09:12  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 17, 2015\u003C/time\u003E by NonWonderDog\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-01-17T22:11:05Z","Content":"\n\u003Cp\u003ENonWonderDog: MM reports the number of times *applying* the patch errors out, not how many errors are in the patch. That means it failed for 77 attempts (and there\u0027s what, 9 patches in the file? So something like 8 parts it failed on?)\u003C/p\u003E\u003Cp\u003EAlso, be careful: MFT will change the mass of parts it\u0027s applied to unless you tell it not to, so parts that should keep their dry mass (like service modules, pods, etc) need special handling.\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-17T23:12:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003ENonWonderDog: MM reports the number of times *applying* the patch errors out, not how many errors are in the patch. That means it failed for 77 attempts (and there\u0027s what, 9 patches in the file? So something like 8 parts it failed on?)\u003Cp\u003EAlso, be careful: MFT will change the mass of parts it\u0027s applied to unless you tell it not to, so parts that should keep their dry mass (like service modules, pods, etc) need special handling.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESorry if this is a dumb question, but just to make sure I understand: let\u0027s say I apply the \u0022Default\u0022 TANK_DEFINITION to a part. It has within it \u0022basemass = 0.000625 * volume\u0022, so that means that anything with that MFT definition applied to it will have this new base mass, right? Not that this basemass = X will be \u003Cem\u003Eadded \u003C/em\u003Eto the part, but instead it will be recalculated? And then specific TANK definitions could also add mass, like:\u003C/p\u003E\u003Cp\u003ETANK \u003C/p\u003E\u003Cp\u003E{\u003C/p\u003E\u003Cp\u003Eblah blah blah\u003C/p\u003E\u003Cp\u003Emass = 0.000625 // adds 0.000625 tons per unit of volume, so every 1,000 liquid fuel capacity (for ex.) would add an ADDITIONAL 0.625 tons to the basemass = 0.000625*volume thing\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003EIs all of that correct?\u003C/p\u003E\n"},{"CreatedByName":"AccidentalDisassembly","CreatedById":110936,"CreatedDateTime":"2015-01-18T04:32:12Z","Content":"\n\u003Cp\u003EOK, found the source of at least SOME of the errors in that MM config - one bit needs an @:\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E@PART\u003C/p\u003E\u003Cp\u003E[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleFuelTanks]]:Final {\u003C/p\u003E\u003Cp\u003E MODULE {\u003C/p\u003E\u003Cp\u003E name = ModuleFuelTanks\u003C/p\u003E\u003Cp\u003E volume = #$../RESOURCE[LiquidFuel]/amount$\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022text-decoration:underline;\u0022\u003E\u003Cspan style=\u0022color:#ff0000;\u0022\u003E@\u003C/span\u003E\u003C/span\u003E\u003C/strong\u003Evolume \u002B= #$../RESOURCE[Oxidizer]/amount$\u003C/p\u003E\u003Cp\u003E type = Default\u003C/p\u003E\u003Cp\u003E }\u003C/p\u003E\u003Cp\u003E}\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-01-18T09:32:40Z","Content":"\n\u003Cp\u003EAccidentalDisassembly: correct. When basemass is not set to (in the TANK_DEFINITION) nor overridden (in the MODULE) to -1, then MFT will set the mass of any part it is added to as:\u003C/p\u003E\u003Cp\u003Ebasemass \u002B SUM(for each tank, tank.maxAmount / tank.utilization * tank.mass)\u003C/p\u003E\u003Cp\u003EWhen basemass is -1, MFT does not mess with mass.\u003C/p\u003E\u003Cp\u003Ebasemass can be set via one of two forms: if it is just a number, that is the basemass in tons; if it is given as some_number * volume, then the basemass of the part will be that product.\u003C/p\u003E\n"},{"CreatedByName":"NonWonderDog","CreatedById":10479,"CreatedDateTime":"2015-01-18T15:59:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022AccidentalDisassembly\u0022 data-cite=\u0022AccidentalDisassembly\u0022\u003E\u003Cdiv\u003EOK, found the source of at least SOME of the errors in that MM config - one bit needs an @:\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI\u0027d updated my post #366 a few times yesterday to say I\u0027d fixed all the ModuleManager errors, sorry if you wasted time looking for them.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EAlso, be careful: MFT will change the mass of parts it\u0027s applied to unless you tell it not to, so parts that should keep their dry mass (like service modules, pods, etc) need special handling.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUnderstood, but I still think it\u0027s better to support all tanks by default and call out special cases as they come up than to leave everything unsupported until someone gets around to fixing it, especially if I end up adding CRP resources as I\u0027m currently trying to spec out.\u003C/p\u003E\n"},{"CreatedByName":"mreadshaw","CreatedById":135349,"CreatedDateTime":"2015-01-19T21:57:26Z","Content":"\n\u003Cp\u003EAwesome mod! So very useful. One question though, whenever I see this mod in a video they always talk about how you can auto-configure the tanks based on engines but I don\u0027t seem to have that option. Was the feature removed or is something wrong with my install?\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-01-20T01:31:46Z","Content":"\n\u003Cp\u003EAdd an engine, then right-click the tank and try again.\u003C/p\u003E\n"},{"CreatedByName":"mreadshaw","CreatedById":135349,"CreatedDateTime":"2015-01-20T18:47:39Z","Content":"\n\u003Cp\u003EHmm not coming up for me. I\u0027ve tried on both my modded install and my stock backup and neither one gives me the option. I\u0027ll try again with a complete re-download from steam to make sure that my backup isn\u0027t messed up someway. Otherwise the mod works flawlessly, The UI comes up and everything can be hand edited just fine.\u003C/p\u003E\n"},{"CreatedByName":"rynak","CreatedById":115092,"CreatedDateTime":"2015-01-20T19:48:31Z","Content":"\n\u003Cp\u003EWhat\u0027s the reason for the MK1 fuselage not showing the option in SPH to edit the fuel types?\u003C/p\u003E\u003Cp\u003EI looked through the configfiles, but found nothing unusual specified about them. Is this hardcoded into the plugin?\u003C/p\u003E\u003Cp\u003EEDIT: Nevermind, my mistake. The part wasn\u0027t the stock one.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-01-20T19:55:20Z\u0022 title=\u002201/20/2015 07:55  PM\u0022 data-short=\u00229 yr\u0022\u003EJanuary 20, 2015\u003C/time\u003E by rynak\u003C/strong\u003E\n\u003C/span\u003E\n"}]}