{"TopicId":99043,"ForumId":34,"TopicTitle":"[1.2.2] TestFlight - v1.8.0 - 01 May 2017 - Bring Flight Testing to KSP!","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T01:14:56Z","PageNum":6,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-04-29T21:03:27Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022255\u0022 data-cite=\u0022255\u0022\u003E\u003Cdiv\u003EDuring a KCT simulation there shouldn\u0027t be failures. Or at least add an option to disable that.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere are plans for better integration but until such time as 1) KCT integrates with TF using the API i\u0027ve supplied, or \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E KCT makes an API that TF can use to integrate with it, there isn\u0027t anything I can do.\u003C/p\u003E\u003Cp\u003ETestFlight provides an API to allow KCT to do that and more, but magico13 never got around to doing any implementation. He has talked about maybe making an API for KCT, and if he does, and that API gives me what I need, then at that time I will look into better integration.\u003C/p\u003E\n"},{"CreatedByName":"255","CreatedById":60654,"CreatedDateTime":"2015-04-29T22:45:05Z","Content":"\n\u003Cp\u003EI see, thanks for the reply. ^^\u003C/p\u003E\n"},{"CreatedByName":"Jiraiyah","CreatedById":97667,"CreatedDateTime":"2015-05-05T13:38:03Z","Content":"\n\u003Cp\u003Ehey any news on 1.0 or 1.0.2 release? thanks\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-11T02:33:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jiraiyah\u0022 data-cite=\u0022Jiraiyah\u0022\u003E\u003Cdiv\u003Ehey any news on 1.0 or 1.0.2 release? thanks\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHi Jiralyah. Very close! Very close. I have a release candidate that I just released on GitHub, though its currently compiled against KSP 1.0, I think it should work on 1.0.2 as well.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/1.3.0.11\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/1.3.0.11\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-11T03:10:36Z","Content":"\n\u003Cp\u003EUpdate - I have recompiled against KSP 1.0.2. TestFlight 1.3 Release Candidate 1 is now on GitHub:\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/1.3.0.12\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/1.3.0.12\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAssuming no one finds any major bugs in this RC, I will be pushing out a full release of 1.3 next weekend.\u003C/p\u003E\n"},{"CreatedByName":"magico13","CreatedById":73338,"CreatedDateTime":"2015-05-17T00:27:30Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EThere are plans for better integration but until such time as 1) KCT integrates with TF using the API i\u0027ve supplied, or \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E KCT makes an API that TF can use to integrate with it, there isn\u0027t anything I can do.\u003Cp\u003ETestFlight provides an API to allow KCT to do that and more, but magico13 never got around to doing any implementation. He has talked about maybe making an API for KCT, and if he does, and that API gives me what I need, then at that time I will look into better integration.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESince I don\u0027t know how long enneract will take to get HoloDeck to a functional state, and because I feel bad about not getting around to this earlier, I\u0027m gonna take a look at this now. Won\u0027t be in a full release for a while, but it\u0027ll be in dev versions of KCT. I just need to figure out how to disable or enable failures on a whole craft. Still learning how you\u0027ve got the API set up. In case it matters, I\u0027m planning on using the hybrid method.\u003C/p\u003E\u003Cp\u003ESorry about the confusion/delay. The past few months have been an interesting time and plans keep getting shuffled around.\u003C/p\u003E\u003Cp\u003EE: Looks like I just get all the failures on a part, loop over them, and disable them by name. Then to reenable failures you get all the failures and enable them by name. Correct?\u003C/p\u003E\u003Cp\u003EE2: Next question. How exactly do I get the ITestFlightCore for a specific part? I\u0027m assuming it\u0027s related to a PartModule maybe? Still trying to wrap my head around this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003Cp\u003EE3: About to test if this code works. If so, then I think I\u0027ve got the hang of it. Doing things like keeping partial data will be harder, but at least letting people disable failures makes sense.\u003C/p\u003E\u003Cp\u003EE4: HAHA! It works \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E Alright, consider the ability to disable/re-enable part failures to be in the next dev versions.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-17T00:45:11Z\u0022 title=\u002205/17/2015 12:45  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 17, 2015\u003C/time\u003E by magico13\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-17T00:53:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022magico13\u0022 data-cite=\u0022magico13\u0022\u003E\u003Cdiv\u003ESince I don\u0027t know how long enneract will take to get HoloDeck to a functional state, and because I feel bad about not getting around to this earlier, I\u0027m gonna take a look at this now. Won\u0027t be in a full release for a while, but it\u0027ll be in dev versions of KCT. I just need to figure out how to disable or enable failures on a whole craft. Still learning how you\u0027ve got the API set up. In case it matters, I\u0027m planning on using the hybrid method.\u003Cp\u003ESorry about the confusion/delay. The past few months have been an interesting time and plans keep getting shuffled around.\u003C/p\u003E\u003Cp\u003EE: Looks like I just get all the failures on a part, loop over them, and disable them by name. Then to reenable failures you get all the failures and enable them by name. Correct?\u003C/p\u003E\u003Cp\u003EE2: Next question. How exactly do I get the ITestFlightCore for a specific part? I\u0027m assuming it\u0027s related to a PartModule maybe? Still trying to wrap my head around this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmm you know what, those API examples are embarrassingly out of date now, as a lot has changed in the core code. For example, finding the core is very different now due to the query system.\u003C/p\u003E\u003Cp\u003EThe good news is you don\u0027t need to worry about it. Things are actually easier now then they were back then \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe easiest way to do it is to use TestFlightInterface (\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/blob/dev/TestFlightCore/TestFlightCore/TestFlightInterface.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/blob/dev/TestFlightCore/TestFlightCore/TestFlightInterface.cs\u003C/a\u003E) which is, essentially an API wrapper around the API \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E Its job is to make it easier to interact with TF through Reflection. Every method in TestFlightInterface is static, so that makes them very simple to call from Reflection. Furthermore any of the methods that deal with a part specifically (which is 99% of them, other than some basics like checking if TF is enabled, etc) take the Part as a param, and then find the core for you internally.\u003C/p\u003E\u003Cp\u003EI would look at the Interop example code: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlightAddon/blob/master/TFInteropExample.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlightAddon/blob/master/TFInteropExample.cs\u003C/a\u003E for a simpler example of how to work with the TestFlightInterface, but in a nutshell:\u003C/p\u003E\u003Cp\u003EInitial setup: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlightAddon/blob/master/TFInteropExample.cs#L11-L26\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlightAddon/blob/master/TFInteropExample.cs#L11-L26\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EThat will then give you a cached tfInterface handle to the TestFlightInterface which you can use to invoke the various Interface methods.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003EtfInterface.InvokeMember(\u0022DisableFailure\u0022, tfBindingFlags, null, null, new System.Object[] { this.part, \u0022TestFlightFailure_ResourceLeak\u0022 });\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESide note, while the API has been very stable, I would verify things as they stand in the \u0022dev\u0022 branch just in case. One example is that Scope is going away in 1.3, so all the methods dealing with Scope aren\u0027t needed anymore.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022magico13\u0022 data-cite=\u0022magico13\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EE4: HAHA! It works \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E Alright, consider the ability to disable/re-enable part failures to be in the next dev versions.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELOL you got it working faster than I could type up my reply. Is that a sign I made it good? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"magico13","CreatedById":73338,"CreatedDateTime":"2015-05-17T01:01:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ELOL you got it working faster than I could type up my reply. Is that a sign I made it good? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt seems pretty easy to work with now that I have an idea of what I\u0027m doing. I almost never work with PartModules, so I wasn\u0027t sure if what I was doing was correct. But it listed off all the possible failure modes when I asked it to, so I\u0027m assuming things are working properly \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E I\u0027ll do a bunch of random launches and see if I can get things to fail/not fail when I want them to.\u003C/p\u003E\u003Cp\u003EI\u0027m just doing this currently:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E                foreach (Part p in FlightGlobals.ActiveVessel.Parts)\u003Cbr\u003E                {\u003Cbr\u003E                    if (p.Modules.Contains(\u0022TestFlightCore\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        TestFlightAPI.ITestFlightCore coreMod = p.Modules[\u0022TestFlightCore\u0022] as TestFlightAPI.ITestFlightCore;\u003Cbr\u003E                        //disable failures\u003Cbr\u003E                        foreach (string failureName in coreMod.GetAvailableFailures())\u003Cbr\u003E                        {\u003Cbr\u003E                            KCTDebug.Log(p.partInfo.name \u002B \u0022:\u0022 \u002B failureName);\u003Cbr\u003E                            coreMod.DisableFailure(failureName);\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EE: Hmm. Failure still occurring. Might need to do something else.\u003C/p\u003E\u003Cp\u003EE2: Might try out the interface instead. Will report back if I have success or problems.\u003C/p\u003E\u003Cp\u003EE3: Nope. Supposedly disabled failures are still being triggered using that method instead of the hybrid method. It will gladly tell me all the possible failures, but using those I can\u0027t actually disable them. I think it might be on your side.\u003C/p\u003E\u003Cp\u003EWhen you disable a failure you lower and trim the name: failureModuleName = failureModuleName.ToLower().Trim();\u003C/p\u003E\u003Cp\u003EWhen you check if a module is in the disabled list, you don\u0027t: PartModule pm = fm as PartModule; if (!disabledFailures.Contains(pm.moduleName)) {...}\u003C/p\u003E\u003Cp\u003EI bet there\u0027s some case issues there, since the names that I\u0027m getting have capitals in them, meaning it will never find them in the list if they\u0027re made lowercase.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-17T01:37:48Z\u0022 title=\u002205/17/2015 01:37  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 17, 2015\u003C/time\u003E by magico13\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-17T02:46:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022magico13\u0022 data-cite=\u0022magico13\u0022\u003E\u003Cdiv\u003EIt seems pretty easy to work with now that I have an idea of what I\u0027m doing. I almost never work with PartModules, so I wasn\u0027t sure if what I was doing was correct. But it listed off all the possible failure modes when I asked it to, so I\u0027m assuming things are working properly \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E I\u0027ll do a bunch of random launches and see if I can get things to fail/not fail when I want them to.\u003Cp\u003EI\u0027m just doing this currently:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E                foreach (Part p in FlightGlobals.ActiveVessel.Parts)\u003Cbr\u003E                {\u003Cbr\u003E                    if (p.Modules.Contains(\u0022TestFlightCore\u0022))\u003Cbr\u003E                    {\u003Cbr\u003E                        TestFlightAPI.ITestFlightCore coreMod = p.Modules[\u0022TestFlightCore\u0022] as TestFlightAPI.ITestFlightCore;\u003Cbr\u003E                        //disable failures\u003Cbr\u003E                        foreach (string failureName in coreMod.GetAvailableFailures())\u003Cbr\u003E                        {\u003Cbr\u003E                            KCTDebug.Log(p.partInfo.name \u002B \u0022:\u0022 \u002B failureName);\u003Cbr\u003E                            coreMod.DisableFailure(failureName);\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EE: Hmm. Failure still occurring. Might need to do something else.\u003C/p\u003E\u003Cp\u003EE2: Might try out the interface instead. Will report back if I have success or problems.\u003C/p\u003E\u003Cp\u003EE3: Nope. Supposedly disabled failures are still being triggered using that method instead of the hybrid method. It will gladly tell me all the possible failures, but using those I can\u0027t actually disable them. I think it might be on your side.\u003C/p\u003E\u003Cp\u003EWhen you disable a failure you lower and trim the name: failureModuleName = failureModuleName.ToLower().Trim();\u003C/p\u003E\u003Cp\u003EWhen you check if a module is in the disabled list, you don\u0027t: PartModule pm = fm as PartModule; if (!disabledFailures.Contains(pm.moduleName)) {...}\u003C/p\u003E\u003Cp\u003EI bet there\u0027s some case issues there, since the names that I\u0027m getting have capitals in them, meaning it will never find them in the list if they\u0027re made lowercase.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI commented on the bugs on GitHub, but wanted to follow up here as well. Right now your code above is problematic as it isn\u0027t the proper way to get the Core on a part. There can be multiple Cores (or any model really) on a part, but only one will be the active one. This is because things like engines in RO for example can have multiple configurations on the same part because of RealFuels. So TestFlight has a Query system that can be used to define multiple modules and which configurations to hook to. \u003C/p\u003E\u003Cp\u003EAnyway long story short you need to either 1) Use TestFlightInterface and just specify the part, and let it hook to the proper Core, or 2) If you are going to get the Core yourself, you need to call the API to let it get the right one for you. \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/blob/dev/TestFlightAPI/TestFlightAPI/TestFlightAPI.cs#L103\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/blob/dev/TestFlightAPI/TestFlightAPI/TestFlightAPI.cs#L103\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"magico13","CreatedById":73338,"CreatedDateTime":"2015-05-17T02:57:39Z","Content":"\n\u003Cp\u003EI\u0027ve changed it since then to use the reflection based method.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif (KCT_Utilities.TestFlightInstalled \u0026amp;\u0026amp; KCT_GameStates.TestFlightPartFailures \u0026amp;\u0026amp; GUILayout.Button(\u0022Disable Part Failures\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                KCT_GameStates.TestFlightPartFailures = false;\u003Cbr\u003E                foreach (Part part in FlightGlobals.ActiveVessel.Parts)\u003Cbr\u003E                {\u003Cbr\u003E                    bool tfAvailableOnPart = (bool)KCT_Utilities.TestFlightInterface.InvokeMember(\u0022TestFlightAvailable\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part });\u003Cbr\u003E                    if (tfAvailableOnPart)\u003Cbr\u003E                    {\u003Cbr\u003E                        foreach (string failureName in (List\u0026lt;string\u0026gt;)KCT_Utilities.TestFlightInterface.InvokeMember(\u0022GetAvailableFailures\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part }))\u003Cbr\u003E                        {\u003Cbr\u003E                            KCTDebug.Log(part.partInfo.name \u002B \u0022:\u0022 \u002B failureName);\u003Cbr\u003E                            KCT_Utilities.TestFlightInterface.InvokeMember(\u0022DisableFailure\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part, failureName });\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            if (KCT_Utilities.TestFlightInstalled \u0026amp;\u0026amp; !KCT_GameStates.TestFlightPartFailures \u0026amp;\u0026amp; GUILayout.Button(\u0022Enable Part Failures\u0022))\u003Cbr\u003E            {\u003Cbr\u003E                KCT_GameStates.TestFlightPartFailures = true;\u003Cbr\u003E                foreach (Part part in FlightGlobals.ActiveVessel.Parts)\u003Cbr\u003E                {\u003Cbr\u003E                    bool tfAvailableOnPart = (bool)KCT_Utilities.TestFlightInterface.InvokeMember(\u0022TestFlightAvailable\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part });\u003Cbr\u003E                    if (tfAvailableOnPart)\u003Cbr\u003E                    {\u003Cbr\u003E                        foreach (string failureName in (List\u0026lt;string\u0026gt;)KCT_Utilities.TestFlightInterface.InvokeMember(\u0022GetAvailableFailures\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part }))\u003Cbr\u003E                        {\u003Cbr\u003E                            KCTDebug.Log(part.partInfo.name \u002B \u0022:\u0022 \u002B failureName);\u003Cbr\u003E                            KCT_Utilities.TestFlightInterface.InvokeMember(\u0022EnableFailure\u0022, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new System.Object[] { part, failureName });\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf/when I get into doing more interactions with TestFlight, I\u0027ll clean that up some more, but for now it appears to work with the modified TestFlight I have.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-18T05:00:23Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:14px;\u0022\u003ERelease 1.3 (v1.3.1.0)\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/1.3.1.0\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E, or \u003Ca href=\u0022https://kerbalstuff.com/mod/572/TestFlight\u0022 rel=\u0022external nofollow\u0022\u003EKerbalStuff\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EHighlights\u003C/span\u003E\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EKSP v1.0.2 Compatible\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ENo more scope\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EAs of v1.3, the concept of flight scope has been removed form TestFlight. This means that part reliability and flight data are universal. Removal of scope reduced the complexity of the code, but more importantly opened up things for coming soon features that simply couldn\u0027t be done well while scope was there. It made things too complex for the player.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EContractConfigurator Support\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ETestFlight now supports ContractConfigurator by adding a new contract goal to gather flight data on a part. This allows contract authors to add flight testing! \u003Cstrong\u003ENOTE\u003C/strong\u003E: While the support is there, currently no contracts actually use it.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EStock Configs\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThis version of TestFlight introduces some basic preliminary config files to support Stock parts for everyone who wanted to play with TestFlight but don\u0027t play RealismOverhaul. More fleshed out configs will come later and i\u0027m really hoping I can enlist some community help on these, as I personally don\u0027t play stock.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlight Plugin, and Config Packs\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ETestFlight is now distributed in pieces consisting of one ZIP file for the core plugin, without any configs, and then separate config packs, currently for RealismOverhaul and Stock. \u003Cstrong\u003ENOTE\u003C/strong\u003E: Under this new model, you must make sure to download and extract both the core plugin and \u003Cstrong\u003Eone\u003C/strong\u003E config pack.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EThere may be some initial hiccups on CKAN due to this change, as it isn\u0027t possible for me to test it 100% before releasing. Any issues I will endeavor to fix as quickly as possible. Please let me know if you run into any problems!\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003E\u003Cstrong\u003EChange Log\u003C/strong\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EAPI\u003C/strong\u003E: new API stubs for interrogating scenario data store\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EGAME-PLAY\u003C/strong\u003E: The concept of \u0027*scope*\u0027 no longer applies, and data and reliability is universal. This is a major change that paves the way for newer features coming soon.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - ALL\u003C/strong\u003E: Updated reliability configs to use noscope format\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: ContractConfigurator support. TestFlight now creates a new Contract goal for gaining flight data on a part. This allows contract authors to incorporate flight testing into contracts.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed data type errors in noscope api changes. Added data overloads for float, int, bool, and double\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Property added to TestFlightCore \u0060startFlightData\u0060 that can be used to indicate that a part should start with a given amount of existing flight data\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlightScenario available in all scenes\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: ContractConfigurator don\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t try to validate part string during initial load, as we won\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2t have a scenario available then\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: ContractConfigurator only display data remaining if some data has been collected\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EKSP\u003C/strong\u003E: Updated and compiled for KSP v1.0.0\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlight now distributed as multiple files, with a core Plugin Only distribution and multiple Config Packs, currently for RealismOverhaul and Stock.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: If TestFlight title property is not defined or blank, use the part\u0027s stock title instead\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Fix possible infinite loop when the TestFlightCore had a configuration without query in it\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Allow any module to have a blank or undefined config. In such cases it is considered always active\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Added RT5, RT10, BACC, and Kickback solid boosters\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Added: LV-T30, LV-T45, LV-909, Poodle, Skipper, Mainsail liquid engines\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - RO\u003C/strong\u003E: WAC-Corporal and XLR11 engines start fully tested\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Fixed incorrect configuration tags on stock solid engines\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: First tier stock liquid and solid engines start at max data\u003C/p\u003E\u003Cp\u003Ealready researched\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EAPI\u003C/strong\u003E: Added API to TestFlightManager for persisting arbitrary data for a save game\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Added per save game settings\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Parts can be set to always be at maximum flight data in a specific save game\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlight can be enabled or disabled on a per save game basis\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: When part\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u201E\u00A2s start at MaxData they start at properly the maximum data defined by the ReliabilityCurve and not some insane high value.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: NREs caused by save game without existing data store \u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Added save game settings to the KSC level TestFlight settings window\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Engines would continue gaining data when shutown. Engines now use finalThrust to determine running state\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Added \u0060maxData\u0060 property to TestFlightCore to indicate the maximum amount of flight data the part can obtain.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Added stock resource tank configs\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Flight data caps out at \u0060maxData\u0060 as defined by the TestFlightCore. Closes #68\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Add maxData to all the stock engine configs\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Added default savegame settings\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EAPI\u003C/strong\u003E: Updated SaveData API to allow passing a default value to be used in the case where the saved data could not be found or converted to type\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - RO\u003C/strong\u003E: Added proper \u0060maxData\u0060 lines to all existing RO engine configs (\u003Cstrong\u003EThanks @NathanKell!\u003C/strong\u003E)\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ECONFIGS - STOCK\u003C/strong\u003E: Don\u0027t treat command pods with resources as resource tanks\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Updated AV .version to KSP 1.0\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Updated build system to include a version file for configs\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Split core and config packs into separate netkans\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Updated ReducedThrust code to work with FuelFlow (Reducing fuel flow results in loss of thrust) for KSP 1.0\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Failure_ReducedMaxThrust now supports new KSP 1.0 engines as well as RF EngineSolver engines- Refactored EngineModuleWrapper to no longer split between ModuleEngines and ModuleEnginesFX, and to support new EngineSolverengines such as ModuleEnginesRF\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: No longer use FAR (when installed) to get atmospheric density, as KSP 1.0 has proper values now\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Compiled for KS 1.0.2\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Compiled for ContractorConfigurator 1.0.4\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Failure_ResourceLeak is now more flexible in how the leak amounts are defined. By default it functions as normal, however you can optionally specify values to be in percent of maximum resource capacity or percent of current resource level. By adding the suffixes %t or %c respectively.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Added \u0060calculatePerTick\u0060 property to Failure_ResourceLeak. If set to \u0060true\u0060 then any percent values will be re-calculated each tick. If\u0060false\u0060 then they will only be calculated initially at the time of failure. Default values is \u0060false\u0060.\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Leaked resources will no longer pull from other parts!\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Proper lowercase check for failure module names. (\u003Cstrong\u003EThanks @magico13!\u003C/strong\u003E)\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Catch situation where TriggerFailure() has no valid failures inthe list. (\u003Cstrong\u003EThanks @magico13!\u003C/strong\u003E)\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Core.dataCap is now a float percentage rather than a hard number\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003ENEW\u003C/strong\u003E: Add API method GetMaximumFlightData() which returns the most amount of flight data possible to be gained on a part\u003C/p\u003E\u003Cp\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A2\u003Cstrong\u003EFIX\u003C/strong\u003E: Parse leak values as en-US format\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-18T05:12:43Z\u0022 title=\u002205/18/2015 05:12  AM\u0022 data-short=\u00229 yr\u0022\u003EMay 18, 2015\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Masochist","CreatedById":22698,"CreatedDateTime":"2015-05-29T14:47:59Z","Content":"\n\u003Cp\u003EAre there any plans to make this compatible with the Dangit! mod (or one of the other failure and EVA repair mods)? It carries on some of the same principles but I think it could be made way better if it used progressive reliability vs everything having a set reliability the whole game\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-05-29T17:46:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Masochist\u0022 data-cite=\u0022Masochist\u0022\u003E\u003Cdiv\u003EAre there any plans to make this compatible with the Dangit! mod (or one of the other failure and EVA repair mods)? It carries on some of the same principles but I think it could be made way better if it used progressive reliability vs everything having a set reliability the whole game\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, and frankly I don\u0027t understand why people keep asking me this? This and DangIt! basically do the same thing in totally different ways. How could they possibly work together? TestFlight is designed to simulate failures in a more realistic rather than random way, and to allow parts to improve in reliability through flight testing. AFAIK DangIt! is the exact opposite, making parts get worse with age based on an inventory system.\u003C/p\u003E\u003Cp\u003EEDIT: Ok the above comes off more upset than it really is \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E Really it isn\u0027t anger, its confusion. I honestly don\u0027t see how the two could possibly work together.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-05-29T19:11:47Z\u0022 title=\u002205/29/2015 07:11  PM\u0022 data-short=\u00229 yr\u0022\u003EMay 29, 2015\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FanaticalFighter","CreatedById":77314,"CreatedDateTime":"2015-06-05T03:27:21Z","Content":"\n\u003Cp\u003EAre the mean times between failure in stock supposed to be either ~50 minutes or 111 minutes? I was testing the stock version of TestFlight, and that\u0027s what I\u0027m getting atm. I remember the last time I did RO, I had failures in seconds rather than hours. Any ideas on what I\u0027m doing wrong?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-05T04:46:35Z\u0022 title=\u002206/05/2015 04:46  AM\u0022 data-short=\u00229 yr\u0022\u003EJune 5, 2015\u003C/time\u003E by FanaticalFighter\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-06-06T17:50:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FanaticalFighter\u0022 data-cite=\u0022FanaticalFighter\u0022\u003E\u003Cdiv\u003EAre the mean times between failure in stock supposed to be either ~50 minutes or 111 minutes? I was testing the stock version of TestFlight, and that\u0027s what I\u0027m getting atm. I remember the last time I did RO, I had failures in seconds rather than hours. Any ideas on what I\u0027m doing wrong?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPossibly, but I would have to run the numbers. I did make the Stock configs be a lot more reliable. Honestly as I don\u0027t play with stock, I just spit-balled some numbers to get things running.\u003C/p\u003E\n"},{"CreatedByName":"Corax","CreatedById":11311,"CreatedDateTime":"2015-06-06T22:29:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FanaticalFighter\u0022 data-cite=\u0022FanaticalFighter\u0022\u003E\u003Cdiv\u003EAre the mean times between failure in stock supposed to be either ~50 minutes or 111 minutes? I was testing the stock version of TestFlight, and that\u0027s what I\u0027m getting atm. I remember the last time I did RO, I had failures in seconds rather than hours. Any ideas on what I\u0027m doing wrong?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESame here. Considering this mod under heavy development, and the stock configs new and experimental, here\u0027s what I did:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cblockquote\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003Cbr\u003E// massively increase long term part reliability and amount of\u003Cbr\u003E// attainable test data, markedly reduce amount of initially\u003Cbr\u003E// available data if available\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@MODULE[TestFlightCore]\u0026amp;@MODULE[TestFlightReliability]]:FINAL{\u003Cbr\u003E @MODULE[TestFlightCore]{\u003Cbr\u003E @startFlightData = 1000\u003Cbr\u003E @maxData = 1000000000\u003Cbr\u003E }\u003Cbr\u003E\u003Cbr\u003E @MODULE[TestFlightReliability]{\u003Cbr\u003E @reliabilityCurve{\u003Cbr\u003E key,2 = 100000 0.000001\u003Cbr\u003E key,3 = 10000000 0.00000001\u003Cbr\u003E key,4 = 1000000000 0.0000000001\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E// generic patch for all (most?) engines\u003Cbr\u003E// LFO, Jets, Nerva: ModuleEngines, MultiModeEngine, ModuleEnginesFX\u003Cbr\u003E// RCS: ModuleRCS\u003Cbr\u003E// beware of engineer* etc., otherwise @MODULE[*engine*] could have\u003Cbr\u003E// been so simple...\u003Cbr\u003E// maybe HAS[[@MODULE[*engine*]]\u0026amp;[!@MODULE[*engineer*]]] might work\u003Cbr\u003E@PART\u003Cbr\u003E[*]:HAS[@MODULE[ModuleEngines]|@MODULE[MultiModeEngine]|@MODULE[ModuleEnginesFX]|@MODULE[ModuleRCS]\u0026amp;!MODULE[TestFlightCore]]:NEEDS[TestFlight]:FINAL{\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightInterop\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightCore\u003Cbr\u003E //startFlightData = 10000\u003Cbr\u003E maxData = 1000000000\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = FlightDataRecorder_Engine\u003Cbr\u003E flightDataEngineerModifier = 0.25\u003Cbr\u003E flightDataMultiplier = 5\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightReliability\u003Cbr\u003E reliabilityCurve{\u003Cbr\u003E key = 0 0.0005\u003Cbr\u003E key = 10000 0.0001\u003Cbr\u003E key = 100000 0.000001\u003Cbr\u003E key = 10000000 0.00000001\u003Cbr\u003E key = 1000000000 0.0000000001\u003Cbr\u003E }\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightFailure_ShutdownEngine\u003Cbr\u003E REPAIR = None\u003Cbr\u003E weight = 16\u003Cbr\u003E failureType = software\u003Cbr\u003E failureTitle = Engine Shutdown\u003Cbr\u003E duRepair = 50\u003Cbr\u003E duFail = 100\u003Cbr\u003E severity = failure\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightFailure_ReducedMaxThrust\u003Cbr\u003E REPAIR{\u003Cbr\u003E canBeRepairedInFlight = False\u003Cbr\u003E canBeRepairedOnSplashed = False\u003Cbr\u003E canBeRepairedByRemote = True\u003Cbr\u003E repairChance = 50\u003Cbr\u003E }\u003Cbr\u003E weight = 32\u003Cbr\u003E failureType = mechanical\u003Cbr\u003E failureTitle = Loss of Thrust\u003Cbr\u003E duRepair = 250\u003Cbr\u003E duFail = 100\u003Cbr\u003E severity = failure\u003Cbr\u003E }\u003Cbr\u003E MODULE{\u003Cbr\u003E name = TestFlightFailure_Explode\u003Cbr\u003E failureTitle = Explosion!\u003Cbr\u003E weight = 2\u003Cbr\u003E duFail = 400\u003Cbr\u003E failureType = mechanical\u003Cbr\u003E severity = major\u003Cbr\u003E }\u003Cbr\u003E}\u003Cbr\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/blockquote\u003E\u003Cp\u003EThat should take care of most engines. I haven\u0027t looked at the tanks yet, and I guess other parts could have failure modes as well, such as parachutes, or even structural elements. But this works for me as a first step.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-11T21:11:06Z\u0022 title=\u002206/11/2015 09:11  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 11, 2015\u003C/time\u003E by Corax\u003C/strong\u003E\n\u003Cbr\u003ETypo in .cfg\n\u003C/span\u003E\n"},{"CreatedByName":"FanaticalFighter","CreatedById":77314,"CreatedDateTime":"2015-06-07T02:11:16Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EPossibly, but I would have to run the numbers. I did make the Stock configs be a lot more reliable. Honestly as I don\u0027t play with stock, I just spit-balled some numbers to get things running.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ELooks like you may need a bit of help getting the Stock configs. I have tons of free time at the moment seeing as I just got out of school, and I play Stock as well as RO, so I have some experience in both environments. If you could point me to some documentation of the config, I could whip up a stock config and push it to the git.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-06-07T16:37:12Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FanaticalFighter\u0022 data-cite=\u0022FanaticalFighter\u0022\u003E\u003Cdiv\u003ELooks like you may need a bit of help getting the Stock configs. I have tons of free time at the moment seeing as I just got out of school, and I play Stock as well as RO, so I have some experience in both environments. If you could point me to some documentation of the config, I could whip up a stock config and push it to the git.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI will see if I can get something typed up. It is something I need to do anyway, I have just been avoiding it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-06-07T21:15:55Z","Content":"\n\u003Cp\u003ESome *very* initial docs on the YAML config format: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/wiki/YAML-Configuration-Syntax\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/wiki/YAML-Configuration-Syntax\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EAlso if you look at the YAML files, especially the RO ones you will find some comments here and there to help understand some of the nuances. Beyond that the best way to learn as usual is to just dive in, play with it, and ask questions. So please any questions, just ask here.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-06-07T21:19:30Z\u0022 title=\u002206/07/2015 09:19  PM\u0022 data-short=\u00229 yr\u0022\u003EJune 7, 2015\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FanaticalFighter","CreatedById":77314,"CreatedDateTime":"2015-06-08T01:41:59Z","Content":"\n\u003Cp\u003EK, I\u0027m beginning work on it.\u003C/p\u003E\n"},{"CreatedByName":"StainX","CreatedById":57820,"CreatedDateTime":"2015-06-08T16:24:04Z","Content":"\n\u003Cp\u003ELove the mod, thank you for the work u put into it!\u003C/p\u003E\u003Cp\u003EI just checked wiki/configs... is there a plan for stuff like ReacionWheels/Solarapanels/RCS-blocks/Winglets failures!?\u003C/p\u003E\u003Cp\u003EThe only \u0022two\u0022 modules i could find that can fail is engine and resources, or did i miss a thing?\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-06-09T02:45:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022StainX\u0022 data-cite=\u0022StainX\u0022\u003E\u003Cdiv\u003ELove the mod, thank you for the work u put into it!\u003Cp\u003EI just checked wiki/configs... is there a plan for stuff like ReacionWheels/Solarapanels/RCS-blocks/Winglets failures!?\u003C/p\u003E\u003Cp\u003EThe only \u0022two\u0022 modules i could find that can fail is engine and resources, or did i miss a thing?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo you didn\u0027t miss anything. Those are the parts I started with, but the rest can definitely be added. Just need to do configs for them, and if we need new failure modules more applicable to certain parts than I am more then happy to create them. We just need to work out exactly what is needed.\u003C/p\u003E\n"},{"CreatedByName":"Benji","CreatedById":116398,"CreatedDateTime":"2015-06-09T19:10:31Z","Content":"\n\u003Cp\u003EHei.\u003C/p\u003E\u003Cp\u003EIs there a config pack for this mod \u003Ca href=\u0022https://kerbalstuff.com/mod/352/SpaceY%20Heavy%20Lifters%20Parts%20Pack\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalstuff.com/mod/352/SpaceY%20Heavy%20Lifters%20Parts%20Pack\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EDo I have to make one myself, is it complicated?\u003C/p\u003E\n"},{"CreatedByName":"StainX","CreatedById":57820,"CreatedDateTime":"2015-06-09T22:17:07Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003ENo you didn\u0027t miss anything. Those are the parts I started with, but the rest can definitely be added. Just need to do configs for them, and if we need new failure modules more applicable to certain parts than I am more then happy to create them. We just need to work out exactly what is needed.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOh ok, can\u0027t wait... im not a programer so i really can\u0027t help, but maybe there is a way to interact with the right-click gui so that you can disable certain things and then remove them from the list!?\u003C/p\u003E\u003Cp\u003EAlso... small suggestions if you allow:\u003C/p\u003E\u003Cp\u003EI find the Guis a bit unhandy in my opinion... i would enjoy in-flight highlighting parts to show condition, like far did that with the drag\u0026amp;lift part highlight thingy back in 0.90 plus a right-click part info for reliability!?\u003C/p\u003E\n"},{"CreatedByName":"icedown","CreatedById":129659,"CreatedDateTime":"2015-06-11T04:32:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003ENo you didn\u0027t miss anything. Those are the parts I started with, but the rest can definitely be added. Just need to do configs for them, and if we need new failure modules more applicable to certain parts than I am more then happy to create them. We just need to work out exactly what is needed.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EA general failure type mode would be appropriate for a lot of different parts. if it\u0027s possible. Something that makes the part completely ignore anything you attempt to do to it. It would also work as a good placeholder for making configs and somewhere down the line, you could add more appropriate failure modes.\u003C/p\u003E\n"}]}