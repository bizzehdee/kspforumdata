{"TopicId":99043,"ForumId":34,"TopicTitle":"[1.2.2] TestFlight - v1.8.0 - 01 May 2017 - Bring Flight Testing to KSP!","CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T01:14:56Z","PageNum":1,"Articles":[{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T01:14:56Z","Content":"\n\u003Cp\u003E\n\u003Cspan style=\u0022font-size:36px;\u0022\u003E\u003Cspan style=\u0022font-family:Impact;\u0022\u003ETestFlight\u003C/span\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cimg alt=\u0022M7VM93w.png\u0022 src=\u0022http://i.imgur.com/M7VM93w.png\u0022\u003E\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://github.com/KSP-RO/TestFlight/releases\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg alt=\u002284GomvA.png\u0022 src=\u0022http://i.imgur.com/84GomvA.png\u0022\u003E\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nFlight testing comes to KSP!\n\u003C/p\u003E\n\u003Cp\u003E\nTestFlight is an add-on for Kerbal Space Program that simulates the effect of increasing the reliability of your space hardware through flight testing.\n\u003C/p\u003E\n\u003Cp\u003E\nWikipedia defines Flight Testing as:\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nFlight testing is a branch of aeronautical engineering that develops and\u00A0\u003Cstrong\u003Egathers data during flight of an aircraft\u003C/strong\u003E, or atmospheric testing of launch vehicles and reusable spacecraft, and\u00A0\u003Cstrong\u003Ethen analyzes the data\u003C/strong\u003E\u00A0to evaluate the aerodynamic flight characteristics of the vehicle in order to validate the design, including safety aspects.\n\u003C/p\u003E\n\u003Cdiv\u003E\nThe flight test phase accomplishes two major tasks: \u00A01)\u00A0\u003Cstrong\u003Efinding and fixing any aircraft design problems\u003C/strong\u003E\u00A0and then 2) verifying and documenting the vehicle capabilities for government certification or customer acceptance. The flight test phase can range from the test of a single new system for an existing aircraft to the complete development and certification of a new aircraft, launch vehicle, or reusable spacecraft. Therefore, the duration of a flight test program can vary from a few weeks to many years.\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nIn a nutshell TestFlight is a persistent, parts based research and reliability program. Your parts start out with an inherent failure rate that might be quite high on some parts, and quite low on others. As you fly those parts, you gain flight data. If the parts fail, and they will, then one of many failure modes can occur, some that can be repaired and some that can\u0027t. Either way you will accumulate data from failures and repairs as well. All this data is transmitted back to your spaceport, and the next time you fly the same hardware it will have a lower failure rate based on how much flight data you collected in the previous flight. This happens on a per part basis, along with RealFuels integration so that if you use RealFuels to change the engine to a different config derivative, that derivative will be tracked as well.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003ECOMPATIBILITY\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EKerbal Space Program\u003C/strong\u003E\u00A0: 1.0.5 (x86 only - Windows x64 is not supported. \u00A0Please don\u0027t give bug reports. \u00A0Linux x64 is fine, and Windows x64 should be ok come KSP 1.1)\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/99966-0-90-Realism-Overhaul-7-0-7-2015-032\u0022 rel=\u0022\u0022\u003E\u003Cstrong\u003ERealismOverhaul\u003C/strong\u003E\u003C/a\u003E\u00A0: v8 or later of RealismOverhaul is supported. The TestFlight configs for \u003Cabbr title=\u0022Realism Overhaul (mod)\u0022\u003ERO\u003C/abbr\u003E are managed by that project and come installed with \u003Cabbr title=\u0022Realism Overhaul (mod)\u0022\u003ERO\u003C/abbr\u003E, so simply download the TestFlight Core plugin.\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u003Cstrong\u003EStock\u003C/strong\u003E: As of TestFlight v1.3, there is a TestFlight Config Pack for Stock parts as well, for those who want to experience TestFlight without playing RealismOverhaul. Be sure to download and install the TestFlight Config Pack for Stock, found in the GitHub release of TestFlight, or linked on KerbalStuff.\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/92377-0-90-Kerbal-Construction-Time-1-1-2-%2812-27-14%29-Unrapid-Planned-Assembly\u0022 rel=\u0022\u0022\u003E\u003Cstrong\u003EKerbal Construction Time (KCT)\u003C/strong\u003E\u003C/a\u003E: TestFlight\u00A0\u003Cstrong\u003Edoes\u003C/strong\u003E\u00A0work with KCT, however be aware that any flight data gathered while inside a KCT sim will be lost when you exit the sim. I am working with magico13 to provide tighter integration of TestFlight with KCT.\u00A0\u003Cstrong\u003EUpdate:\u00A0\u003C/strong\u003EKCT now has some limited interaction to allow oyu to disable failures during a sim for testing.\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003EREQUIREMENTS\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/55219\u0022 rel=\u0022\u0022\u003E\u003Cstrong\u003EModuleManager\u003C/strong\u003E\u003C/a\u003E: v2.6.1 or later\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003EOVERVIEW\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ENOTE\u003C/strong\u003E - This video is really old, and there have been lots of changes to TestFlight since then, both in game-play and the UI. However it still gives you a good feel of what TestFlight is all about.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022\u003E\n\u003Cdiv\u003E\n\u003Ciframe allowfullscreen=\u0022true\u0022 frameborder=\u00220\u0022 height=\u0022270\u0022 src=\u0022https://www.youtube.com/embed/_6mBrQB0Ek4?feature=oembed\u0022 width=\u0022480\u0022\u003E\u003C/iframe\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003ECHANGES\u003C/strong\u003E\n\u003C/p\u003E\n\u003Ch1 style=\u0022font-size:30px;margin:0px 60px 0px 0px;line-height:1.4;font-weight:bold;color:rgb(51,51,51);font-family:Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-style:normal;font-variant:normal;letter-spacing:normal;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);\u0022\u003E\n\u003Ca href=\u0022https://github.com/KSP-RO/TestFlight/releases/tag/1.7.0.0\u0022 rel=\u0022external nofollow\u0022 style=\u0022color:rgb(64,120,192);text-decoration:none;background-color:transparent;\u0022\u003ETestFlight 1.7.0.0\u003C/a\u003E\n\u003C/h1\u003E\n\u003Cul style=\u0022padding-left:2em;margin-top:0px;color:rgb(51,51,51);font-family:\u0027Helvetica Neue\u0027, Helvetica, \u0027Segoe UI\u0027, Arial, freesans, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-size:16px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:25.6px;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;background-color:rgb(255,255,255);\u0022\u003E\u003Cli\u003E\nLots of work on reducing TestFlight\u0027s Garbage footprint\n\u003C/li\u003E\n\u003Cli\u003E\nPerformance improvements\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: When assigning R\u0026amp;D to a part, first immediately apply any applicable tech transfer data\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E TestFlight window is now available even if TestFlight is disabled in that save\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: Cleaned up left over direct log statements that were polluting the output_log file\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: Fix NRE in TestFlightCore outside of Flight scene\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: Fix how modules are enabled and disabled due to interop changes that was causing some modules to never become active when they should\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: Fix NRE in the TestFlight Editor window.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EFIX\u003C/strong\u003E: Fix issue with part selection locking for R\u0026amp;D Window in Editor\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003ECHANGE\u003C/strong\u003E: TechTransfer and MaxRnD now stack\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EUPDATE\u003C/strong\u003E: Recompiled for KSP 1.1.3\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong style=\u0022font-weight:bolder;\u0022\u003EUPDATE\u003C/strong\u003E: Recompiled for RealFuels 11.3.0\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv style=\u0022color:rgb(51,51,51);font-family:Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;\u0022\u003E\n\u003Ch1 style=\u0022font-size:30px;margin-top:0px;margin-right:60px;margin-bottom:0px;line-height:1.5;\u0022\u003E\n\u003Ca href=\u0022https://github.com/KSP-RO/TestFlight/releases/tag/1.5.4.0\u0022 rel=\u0022external nofollow\u0022 style=\u0022color:rgb(64,120,192);text-decoration:none;\u0022\u003E1.5.4.0\u003C/a\u003E\n\u003C/h1\u003E\n\u003C/div\u003E\n\u003Cdiv style=\u0022font-family:\u0027Helvetica Neue\u0027, Helvetica, \u0027Segoe UI\u0027, Arial, freesans, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-size:16px;line-height:1.6;color:rgb(51,51,51);\u0022\u003E\n\u003Ch2 style=\u0022margin-top:1em;margin-bottom:16px;line-height:1.225;font-size:1.75em;padding-bottom:.3em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);\u0022\u003E\nHighlights\n\u003C/h2\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nThe TestFlight R\u0026amp;D System is finally here! It has been teased forever by the nonfunctional R\u0026amp;D tab seen in the TestFlight window in the \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E screen, but now it is finally implemented.\n\u003C/p\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nThe R\u0026amp;D system is an optional feature that allows you to spend funds and time to increase part reliability without actually flying them and risking\u00A0\u003Cem\u003Ebad things\u003C/em\u003E\u00A0happening.\u00A0\u00A0\u003Cstrong\u003EGaining data through flight will still often be quicker, but not as safe. R\u0026amp;D will be safer but slower and cost funds. The choice is yours.\u003C/strong\u003E\u00A0Parts do have maximum R\u0026amp;D limits however, so while engineers can get you to a better reliability before flight testing, they won\u0027t get you\u00A0\u003Cstrong\u003Eall\u003C/strong\u003E\u00A0the way.\n\u003C/p\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nR\u0026amp;D can be assigned to any supported part while in the editor constructing your vessel. Simply right click on the part and click the\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ER\u0026amp;D Window\u003C/code\u003E\u00A0button to toggle the R\u0026amp;D window. Here you can assign one of several teams to begin researching that part. Choose the one that works for you, balancing time and cost.\n\u003C/p\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nEvery research cycle, which defaults to one day but may be changed by other mods, your part will receive flight data assigned to it by the research team, and funds will be subtracted.\n\u003C/p\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nYou can stop/pause/resume research at any time either in the editor or as a shortcut by using the R\u0026amp;D tab in the main \u003Cabbr title=\u0022Kerbal Space Center\u0022\u003EKSC\u003C/abbr\u003E screen. Research will also auto stop if the part reaches its maximum R\u0026amp;D level.\n\u003C/p\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nIn addition to the R\u0026amp;D system, I also took this time to redo how TestFlight information is displayed in the editor. The old TF window in the editor is now gone, and is replaced by the new R\u0026amp;D window for assigning research and a new \u0022Info Overlay\u0022 window which can give you detailed TestFlight information on any placed part with a simple Middle Click.\n\u003C/p\u003E\n\u003Ch2 style=\u0022margin-top:1em;margin-bottom:16px;line-height:1.225;font-size:1.75em;padding-bottom:.3em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);\u0022\u003E\nUpgrade Notes\n\u003C/h2\u003E\n\u003Cp style=\u0022margin-top:0px;margin-bottom:16px;\u0022\u003E\nUpgrading from 1.5.3.0 release to 1.5.4.0 release should not cause any issues. If you are upgrading from a dev or beta version of 1.5.4.0, it is suggested that you first stop all R\u0026amp;D teams before upgrading.\n\u003C/p\u003E\n\u003Ch2 style=\u0022margin-top:1em;margin-bottom:16px;line-height:1.225;font-size:1.75em;padding-bottom:.3em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);\u0022\u003E\nChanges\n\u003C/h2\u003E\n\u003Cul style=\u0022padding-left:2em;margin-top:0px;margin-bottom:0px;\u0022\u003E\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fix editor info window not hiding properly\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fix editor info window not shrinking in size when changing parts or hiding the window\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: EngineCycle module now displays information on idle decayand thrust modifiers if applicable in the info window\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed a possible NRE in TestFlightRNDScenario load, as wellas making that code a bit more robust in the case of unexpected data.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Apply\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ErndRate\u003C/code\u003E\u00A0and\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ErndCost\u003C/code\u003E\u00A0to display in R\u0026amp;D window. Fixes\u00A0\u003Ca href=\u0022https://github.com/KSP-RO/TestFlight/issues/136\u0022 rel=\u0022external nofollow\u0022 style=\u0022color:rgb(64,120,192);text-decoration:none;\u0022\u003E#136\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed internal burn time handling on TestFlightReliability_EngineCycle\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed major bug that was causing time handling to be truncated, causing part updates to happen less and less frequently the longer your save went on\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Moved TestFlight settings file to PluginData so that it doesn\u0027t cause ModuleManager recaching when settings change.\u00A0\u00A0\u003Cstrong\u003EImportant Note\u003C/strong\u003E: TestFlight will automatically migrate the settings file for you the first time, but it won\u0027t be able to clean up the old file. Once migration happens you can freely delete the old file if desired.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed to RND Teams getting reset due to a race condition during RND scenario load.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fixed Editor R\u0026amp;D Window position not being properly read from settings on initial load.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: Parts no longer can gain data while in the\u00A0\u003Cstrong\u003EPRELAUNCH\u003C/strong\u003E\u00A0situation. This means no more static test firing. The new R\u0026amp;D system should be used instead if you don\u0027t want to risk parts on an actual flight.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: Expanded Info window data for Core and Reliability modules\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Major bug fix that was preventing pretty much all modules from properly attaching!\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: Placed parts in Editor now have a quick info overlay window that can be accessed by right clicking on the place part. This info window will display TestFlight information on the part.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: TestFlight modules now all have an interface method for\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EGetTestFlightInfo\u003C/code\u003E\u00A0which is used to return data the module desires to be displayed in the Editor Info window\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Interop changes now fire an event on the active Core module allowing for reactions to the change.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Fix duplicate\u00A0\u003Cem\u003ER\u0026amp;D Window\u003C/em\u003E\u00A0buttons showing up in editor tweakables.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: R\u0026amp;D Window in Editor now displays information on how the system works, how much teams cost and how many points they contribute\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: R\u0026amp;D settings can no be configured by other mods using Confignodes. Place all settings in a node named \u201CTFRNDSETTINGS\u201D.\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EupdateFrequency\u003C/code\u003E\u00A0is a double indicating how often the R\u0026amp;D teams tick. Value is in seconds and the default is 86400 or 1 day.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: R\u0026amp;D Teams can be configured by mods using a Config node. For each desired team add a node named \u201CTEAM\u201D under the main \u201CTFRNDSETTINGS\u201D node with the following properties:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003Epoints\u003C/code\u003E\u00A0indicates the amount of research points (directly mapped to data units) generated by the team per update. Default is 100.\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EcostFactor\u003C/code\u003E\u00A0indicates the cost\u00A0\u003Cstrong\u003Eper point\u003C/strong\u003E\u00A0of the research team. Defaults to 1. Added ConfigNodeExtensions from @stupid_chris with license information.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlight supported parts in the Editor now have a right click menu button\u00A0\u003Cem\u003ER\u0026amp;D Window\u003C/em\u003Ewhich allows you to quickly open up a window to control research team allocation for the part.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlight now has a new Research and Development feature. This R\u0026amp;D System is optional, but allows you to trade off time and funds for increased part reliability. Rather than risking failures during a mission with low reliability parts, you can instead assign engineering teams to work on the parts over time, slowly increasing the part reliability without risk.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-CONFIG\u003C/strong\u003E: New property added to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EITestFlightCore\u003C/code\u003E\u00A0to support R\u0026amp;D:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ErndMaxData\u003C/code\u003E\u00A0defines the maximum amount of flight data that can be obtain by using engineering teams. This is defined in absolute units and if not present, R\u0026amp;D ill cap out at 75% of the part\u0027s maximum data\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-CONFIG\u003C/strong\u003E: New property added to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EITestFlightCore\u003C/code\u003E\u00A0to support R\u0026amp;D:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ErndRate\u003C/code\u003E\u00A0defines the speed at which the part is research by engineering teams. This is a multiplier against the number of points generated by a team each cycle and defaults to 1, IE no modification.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-CONFIG\u003C/strong\u003E: New property added to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EITestFlightCore\u003C/code\u003E\u00A0to support R\u0026amp;D:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ErndCost\u003C/code\u003E\u00A0defines the cost at which the part is research by engineering teams. This is a multiplier against the cost of the team each cycle and defaults to 1, IE no modification.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: The following failures will re-apply themselves on loading a game: EnginePerformanceLoss, LockGimbal, ReducedMaxThrust, ResourceLeak\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightReliability_EngineCycle\u003C/code\u003E\u00A0can now optionally modify accumulated burn time based on the actual thrust output of the engine. This is defined as a modifier curve using the FloatCurve\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EthrustModifier\u003C/code\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightReliability_EngineCycle\u003C/code\u003E\u00A0can now optionally decaythe used burn time on an engine when the engine is turned off. Can bedefined by using the property\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EidleDecayRate\u003C/code\u003E. This value is directlysubtracted from the engine\u0027s current burn time each second, so a valueof 1 would be an approximate 1:1 time decay. This can optionally allowengines to have extended usage when shut off during coast periods.Note that this only kicks in if the engine is shut off (not ignited).\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightFailure_IgnitionFail\u003C/code\u003E\u00A0can now apply an additional modifier to the chance of ignition based on the number of previous ignitions used. Use the FloatCurve\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EingitionUseMultiplier\u003C/code\u003E. This is a straight multiplier and thus values below 1 will lower the chance of the engine igniting and values above 1 will increase the chances.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightFailure_IgnitionFail\u003C/code\u003E\u00A0can now cause an additionalfailure to occur if the ignition fails. The chance of this occurringcan be set in the property\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EadditionalFailChance\u003C/code\u003E\u00A0and is a value 0-1f,with default of 0. If this additional failure triggers then theengine will receive one of the existing random failures assigned to thepart.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Add new property\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EFailed\u003C/code\u003E\u00A0to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EITestFlightFailure\u003C/code\u003E\u00A0interface.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: Persist the failed state on a part\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: Add EngineModuleWrapper method to\u00A0\u003Cstrong\u003Eset\u003C/strong\u003E\u00A0the number of ignitions directly.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E:\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EShutdownEngine\u003C/code\u003E\u00A0failure now also removes all ignitions from the engine. They are restored is the failure is repaired.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Add method to EngineModuleWrapper to return the current number of ignitions on an engine.\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003Eint GetIgnitionCount()\u003C/code\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Added new functions to EngineModuleWrapper to Add and Remove ignitions from compatible engines.\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003Evoid AddIgnitions(int numIgnitions)\u003C/code\u003E\u00A0and\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003Evoid RemoveIgnitions(int numIgnitions)\u003C/code\u003E\u00A0Passing \u0026lt; 0 to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ERemoveIgnitions\u003C/code\u003E\u00A0will remove all ignitions on the engine.\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003Cdiv\u003E\n\u003Cdiv style=\u0022color:rgb(51,51,51);font-family:Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;\u0022\u003E\n\u003Ch1 style=\u0022font-size:30px;margin-top:0px;margin-right:60px;margin-bottom:0px;line-height:1.5;\u0022\u003E\n\u003Ca href=\u0022https://github.com/KSP-RO/TestFlight/releases/tag/1.5.3.0\u0022 rel=\u0022external nofollow\u0022 style=\u0022color:rgb(64,120,192);text-decoration:none;\u0022\u003E1.5.3.0\u003C/a\u003E\n\u003C/h1\u003E\n\u003C/div\u003E\n\u003Cdiv style=\u0022font-family:\u0027Helvetica Neue\u0027, Helvetica, \u0027Segoe UI\u0027, Arial, freesans, sans-serif, \u0027Apple Color Emoji\u0027, \u0027Segoe UI Emoji\u0027, \u0027Segoe UI Symbol\u0027;font-size:16px;line-height:1.6;color:rgb(51,51,51);\u0022\u003E\n\u003Cul style=\u0022padding-left:2em;margin-top:0px;margin-bottom:0px;\u0022\u003E\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: New Failure module\u00A0\u003Cstrong\u003EEnginePerformanceLoss\u003C/strong\u003E\u00A0causes the engine\u0027s Isp to degrade by an amount specified in the config property\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EispMultiplier\u003C/code\u003E. A second property\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EispMultiplierJitter\u003C/code\u003E\u00A0can be used to add some small extra random variance to the degredation\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: TestFlightInterop now adds an intervop value named\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EkspPartName\u003C/code\u003E\u00A0which is the internal KSP name of the underlying part. This does not change. Can be used in config queries and should be used instead of blank queries or queries with just part names.\u00A0\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003Econfig = kspPartName = squadFoo\u003C/code\u003E.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: Internally, any empty configuration string is coerced into\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003EkspPartname = squadFoo\u003C/code\u003Eusing the new interop value and the parsed part name.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFIX\u003C/strong\u003E: If a part has starting flight data from the config, add that to the scenario data store when first initializing it. Should fix issue with needing to record\u00A0\u003Cem\u003Epast\u003C/em\u003E\u00A0the startFlightData before it would stick.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Added\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightPartData.AddValue\u003C/code\u003E\u00A0and overloaded versions for int, float, and double that do what it says on the tin.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Added\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightPartData.ToggleValue\u003C/code\u003E\u00A0for bools\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW-API\u003C/strong\u003E: Added\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightManagerScenario.AddFlightDataForPartName\u003C/code\u003E\u00A0helper function to add to existing flight data for a part.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE-API\u003C/strong\u003E: Renamed\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightPartData.AddValue\u003C/code\u003E\u00A0to\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightPartData.SetValue\u003C/code\u003Efollowing in accordance with the previous similar change to TestFlightManagerScenario which wraps these for convenience.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: Removed persistence from\u00A0\u003Ccode style=\u0022font-family:Consolas, \u0027Liberation Mono\u0027, Menlo, Courier, monospace;font-size:14px;padding:.2em 0px;margin:0px;\u0022\u003ETestFlightCore.startFlightData\u003C/code\u003Eas it is not dynamic.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: TestFlightFailure_ResourceLeak - Use System.Random from TestFlightCore instead of Unity\u0027s broken random.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: All RealismOverhaul configs have been removed from TestFlight and are now managed and provided by Realism Overhaul directly.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: TestFlight Realism Overhaul Config pack is no longer built or provided by TestFlight.\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECHANGE\u003C/strong\u003E: Removed Aerobee engine line from RealismOverhaul configs, as these configs now live in the \u003Cabbr title=\u0022Realism Overhaul (mod)\u0022\u003ERO\u003C/abbr\u003E project\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENEW\u003C/strong\u003E: Reliability modules for SkinTemperature and InternalTemperature\n\u003C/li\u003E\n\u003C/ul\u003E\u003C/div\u003E\n\u003Ch2\u003E\n\u00A0\n\u003C/h2\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EQUICK START \u0026amp; DOCUMENTATION\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nYou can find a\u00A0\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/wiki/Quick-Start\u0022 rel=\u0022external nofollow\u0022\u003EQuick Start guide\u003C/a\u003E\u00A0to get you up and running in a short amount of time, as well as full documentation (ever expanding) on the\u00A0\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/wiki\u0022 rel=\u0022external nofollow\u0022\u003ETestFlight Wiki.\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003EDONATIONS\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nIf you like TestFlight and want to give something back for the\u00A0\u003Cstrong\u003Ehundreds\u003C/strong\u003E\u00A0of hours of work I have put into it, please consider being kind and donating a few bucks through PayPal.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\u0026amp;hosted_button_id=WQZY8AT78YUFL\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cimg alt=\u0022btn_donate_LG.gif\u0022 src=\u0022https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\u0022\u003E\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003EFAQ\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nQ: Can I make TestFlight configs for other parts?\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u003Cdiv\u003E\nAbsolutely! If you want to make configs for other part packs and other play styles, please do! I will give you whatever support I can and answer any questions you may have.\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nQ: Can I use TestFlight for my mod?\n\u003C/p\u003E\n\u003Cp\u003E\nAbsolutely! If you want to create configs for your own parts, please do, and I will support you in any way I can.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nQ: Can I extend TestFlight to add my own failures?\n\u003C/p\u003E\n\u003Cp\u003E\nYes you can! TestFlight was written from the ground up to be extendable. It consists of a core system for managing everything, for doing all the work, and a robust API that allows any modder to make his or her own TestFlight Modules that plug into the system. You can make your own Failure and Reliability modules, very easily, often in less than 100 lines of code.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nQ: Why should I use TestFlight?\n\u003C/p\u003E\n\u003Cp\u003E\nWell that is entirely up to you. I won\u0027t force you to use it. I wrote TestFlight firstly for myself, and simply decided to share it with the community. TestFlight can provide emergent gameplay and, like KCT or Life Support Mods, you will find it can drastically change the way your games unfold.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nQ: My parts fail all the time! Even the one that are supposed to be reliable.\n\u003C/p\u003E\n\u003Cp\u003E\nUnderstand that a very core part of TestFlight deals with probability and probability can be an interesting subject. A part may have an extremely low failure rate and thus be extremely unlikely to fail, ever, and yet it could still fail 2 seconds into flight. Just because something is extremely unlikely to happen doesn\u0027t mean it won\u0027t happen. The flip side of this is also true. You could fly engines with horrible reliability and they never fail! It happens.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003EINSTALL\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nDownload the core TestFlight plugin from one of the links above, and simply extract the TestFlight folder into your KSP\\GameData directory. Installation is just like most other mods.\n\u003C/p\u003E\n\u003Cdiv\u003E\nDownload\u00A0\u003Cstrong\u003Eone\u003C/strong\u003E\u00A0TestFlight Config Pack from one of the links above, and simply extract the TestFlight folder into your KSP/GameData directory. A ConfigPack is required or else you will have the plugin, but no parts will be configured to use it. However please ensure you install only one Config Pack or else unexpected things can go wrong.\n\u003C/div\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EOR\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nInstall using \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E. Please note that I can provide no support for problems with \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E. If you should encounter issues or bugs with \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E please see their\u00A0\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/100067-The-Comprehensive-Kerbal-Archive-Network-%28CKAN%29-Package-Manager-v1-5-0-24-Dec-2014\u0022 rel=\u0022\u0022\u003Erelease thread\u003C/a\u003E\n\u003C/p\u003E\n\u003Cul\u003E\u003Cli\u003E\nPlease note that as of TestFlight v1.3, the mod is distributed in pieces containing the Core Plugin and Config Packs. You need the core plugin and one config pack.\u00A0\n\u003C/li\u003E\n\u003C/ul\u003E\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003ESUPPORT\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nIssue Tracking is done through\u00A0\u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/issues\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E. \u00A0If you have a bug feel free to post here and discuss it, but ultimately nothing will get fixed unless an issue exists on GitHub.\n\u003C/p\u003E\n\u003Cp\u003E\nRead\u00A0\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/92229-How-To-Get-Support-%28READ-FIRST%29\u0022 rel=\u0022\u0022\u003Ethis post\u003C/a\u003E\u00A0on how to gather proper logs for debugging.\n\u003C/p\u003E\n\u003Cdiv\u003E\nIn game, open the TestFlight settings and enable Debugging so that the logs will contain extra information to help me troubleshoot the issue.\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\nSupport requests without proper logs with TF debugging turned on may be ignored, as they are often impossible to deal with. Without logs there is no way to know what is going wrong.\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003ESpecial thanks\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNathanKell, and the gang in #ro for research help and support\n\u003C/p\u003E\n\u003Cp\u003E\nTheVoid for early testing with RealismOverhaul\n\u003C/p\u003E\n\u003Cp\u003E\nNonWonderDog for maths\n\u003C/p\u003E\n\u003Cp\u003E\nanxcon for help maintaining and continuing development\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Chr\u003E\u003Cp\u003E\n\u003Cstrong\u003ELICENSE\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nThis work is shared under\u00A0\u003Ca href=\u0022http://creativecommons.org/licenses/by-nc-sa/4.0/\u0022 rel=\u0022external nofollow\u0022\u003ECC BY-NC-SA 4.0\u003C/a\u003E\u00A0license.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222017-05-10T21:31:13Z\u0022 title=\u002205/10/2017 09:31  PM\u0022 data-short=\u00227 yr\u0022\u003EMay 10, 2017\u003C/time\u003E by Agathorn\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2015-02-08T01:35:04Z","Content":"\n\u003Cp\u003Ewait, an add-on about test flying? Absolutely can\u0027t miss it. Test flying things in KSP is one of my major activities \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 alt=\u0022:cool:\u0022\u003E.\u003C/p\u003E\u003Cp\u003EThanks a lot for it.\u003C/p\u003E\n"},{"CreatedByName":"Hattivat","CreatedById":110255,"CreatedDateTime":"2015-02-08T01:42:29Z","Content":"\n\u003Cp\u003ETime to try it, I guess, thanks for making this.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T03:30:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003Ewait, an add-on about test flying? Absolutely can\u0027t miss it. Test flying things in KSP is one of my major activities \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_cool.gif\u0022 alt=\u0022:cool:\u0022\u003E.\u003Cp\u003EThanks a lot for it.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWith shades like that, how can it not be?\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Hattivat\u0022 data-cite=\u0022Hattivat\u0022\u003E\u003Cdiv\u003ETime to try it, I guess, thanks for making this.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYour enthusiasm overwhelms me! Remind me to razz you about it next time I see you in IRC \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"NathanKell","CreatedById":75006,"CreatedDateTime":"2015-02-08T03:58:24Z","Content":"\n\u003Cp\u003EGreat to see this in Releases! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Jumpyyoza","CreatedById":129390,"CreatedDateTime":"2015-02-08T07:11:43Z","Content":"\n\u003Cp\u003EThis looks like a REALLY cool mod! Insta-download!\u003C/p\u003E\n"},{"CreatedByName":"Hattivat","CreatedById":110255,"CreatedDateTime":"2015-02-08T10:34:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EYour enthusiasm overwhelms me! Remind me to razz you about it next time I see you in IRC \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt was 2:42 AM in my timezone, so that was all the enthusiasm I could muster \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T16:32:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022NathanKell\u0022 data-cite=\u0022NathanKell\u0022\u003E\u003Cdiv\u003EGreat to see this in Releases! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks! It was a long hard road to release, but we\u0027re here now.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Jumpyyoza\u0022 data-cite=\u0022Jumpyyoza\u0022\u003E\u003Cdiv\u003EThis looks like a REALLY cool mod! Insta-download!\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks, I hope it live up to your expectations \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"JeffreyCor","CreatedById":93167,"CreatedDateTime":"2015-02-08T16:46:35Z","Content":"\n\u003Cp\u003EUnfortunately the current configs has the same deficiency as another failure mod, having to have each part specifically listed. A \u0022catch all\u0022 for part class which individual overrides along the line of KeepFit to give immediate support for every part of a type in any mod and then different settings when desired for individual parts would give a much wider out of the box support.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T17:17:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022JeffreyCor\u0022 data-cite=\u0022JeffreyCor\u0022\u003E\u003Cdiv\u003EUnfortunately the current configs has the same deficiency as another failure mod, having to have each part specifically listed. A \u0022catch all\u0022 for part class which individual overrides along the line of KeepFit to give immediate support for every part of a type in any mod and then different settings when desired for individual parts would give a much wider out of the box support.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECertainly, and I encourage anyone who wants to pick this up for other configurations than RealismOverhaul to start that way. However for RealismOverhaul the focus is of course on the Realism, and every engine has different failure rates. A catch-all would not do service to RO.\u003C/p\u003E\u003Cp\u003EI also think its important to have tech progression. I don\u0027t know what that progression is in Stock, but for example you can make it so that the some of the flight data from the LVT-30 is transferred to the LVT-45 when you first fly it. I need to do up a wiki page on how this works, but essentially the tech transfer system allows you to set it up so that certain parts are considered an upgrade path and a percentage of flight data can pass from one to the next.\u003C/p\u003E\u003Cp\u003EI could certainly provide quick basic configs for Stock, and JeffreyCor you helped a lot on that in the early testing of TestFlight so thank you for that, but I just feel that providing simple configs is more a disservice and proper ones should be provided. And I just don\u0027t know the Stock game well enough to make proper ones.\u003C/p\u003E\u003Cp\u003EBut like I said if you or anyone else wants to do so, I will be glad to help you out in any way I can and provide a link to your configs here if you desire.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2015-02-08T19:46:25Z","Content":"\n\u003Cp\u003EOf course not everybody uses only the engines from RO. Even when I do use RO, I still have the stock engines (improved in realism because of all the add-ons dealing with them in RO), and still can use them.\u003C/p\u003E\u003Cp\u003ESo, a bit surprised to not find any stock engine yet configured. Now, trying to figure how to build a config for those myself. \u003C/p\u003E\u003Cp\u003EThe wiki is a nice way to show how, but at the moment I still can\u0027t find enough info to figure what to write (e.g., what the meaning of values with keys in TestFlightReliability module). Not a prob about the basic terms, I am pretty used to MTBF, Failure rates, MTTR, and all what makes the statistical aspects of reliability. Just the specifics of TestFlight modules so to start. Thanks.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T20:32:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EOf course not everybody uses only the engines from RO. Even when I do use RO, I still have the stock engines (improved in realism because of all the add-ons dealing with them in RO), and still can use them.\u003Cp\u003ESo, a bit surprised to not find any stock engine yet configured. Now, trying to figure how to build a config for those myself. \u003C/p\u003E\u003Cp\u003EThe wiki is a nice way to show how, but at the moment I still can\u0027t find enough info to figure what to write (e.g., what the meaning of values with keys in TestFlightReliability module). Not a prob about the basic terms, I am pretty used to MTBF, Failure rates, MTTR, and all what makes the statistical aspects of reliability. Just the specifics of TestFlight modules so to start. Thanks.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes you are right I really need to improve the documentation. Let me take a stab at it here though.\u003C/p\u003E\u003Cp\u003ENow that said, may I ask what you mean by you are playing RO but not using RO engines? The RO mod itself includes the configs for those engines, so are you removing them and replacing them with something else? Or did you mean to say you are only using the Stock engines as configured by RO into real engines? In the latter case the included TestFlight configs cover several of the Stock RO engines. The LR-89 and LR-105 engines use Stock engines as does the WAC-Corporal/Aerobee line.\u003C/p\u003E\u003Cp\u003EFirst off, understand that TestFlight works as an aggregate of a bunch of modules on a part. Each module you add, provides additional functionality for that part in the system. At a bear minimum you will need two modules, but really at least four if you want it to be able to have any failure modes.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightCore\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ERequired. You need this on every part. Doesn\u0027t need any properties for a basic setup. If you are applying to an engine that is defined by a ModuleEngineConfigs configuration block, then you will want to add the same \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Econfiguration\u003C/span\u003E property as the original engine definition.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Bare minimum\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = TestFlightCore\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E// If attaching to a ModuleEngineConfigs engine\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = TestFlightCore\u003Cbr\u003E    configuration = LR-89-5\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EFlightDataRecorder\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003ERequired. You also need this on every part. It is what actually records the flight data. You can either use the base one, or one of the two derived ones. The base on \u0022FlightDataRecorder\u0022 will record data at all times during flight. \u0022FlightDataRecorder_Engine\u0022 is intended for engines and only records data while the engine is actually ignited and running. \u0022FlightDataRecorder_Resources\u0022 is intended for tanks and only records data while there are resources in the tank.\u003C/p\u003E\u003Cp\u003EThis module also takes the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Econfiguration\u003C/span\u003E property if needed, as well as \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EflightDataMultiplier\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EflightDataEngineerModifier\u003C/span\u003E. The first defines the rate at which data is recorded, the second is a modifier (0 to 1) per level of an engineer if one is aboard. FlightData_Resources additionally has a \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EemptyThreshold\u003C/span\u003E parameter that defines at what level or below the tank is considered empty.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Engine example\u003Cbr\u003EMODULE\u003Cbr\u003E{\u003Cbr\u003E    name = FlightDataRecorder_Engine\u003Cbr\u003E    flightDataMultiplier = 10\u003Cbr\u003E    flightDataEngineerModifier = 0.25\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightReliability\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThis module is responsible for both determining the reliability of a part, and for checking for failures. This one is a bit more confusing. You can have more than one of these on a part if desired, but only one can be the base \u0022TestFlightReliability\u0022. In addition to \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Econfiguration\u003C/span\u003E again if required (EVERY module has the configuration property), you need to add one or more \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003ERELIABILITY_BODY\u003C/span\u003E nodes to the base TestFlightReliability module. At the very least you need one for the \u0022default\u0022 \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Escope\u003C/span\u003E. This will apply to every scope unless overridden by another RELIABILTY_BODY node that defines a specific scope. Each RELIABILTY_BODY node defines two properties. \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Escope\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EreliabilityCurve\u003C/span\u003E. The curve defines a standard KSP FloatCurve where the key is the amount of flight data and the value is the failure rate at that amount of flight data.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = TestFlightReliability\u003Cbr\u003E\t\tRELIABILITY_BODY\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tscope = default\u003Cbr\u003E\t\t\treliabilityCurve\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tkey = 0 0.0127\u003Cbr\u003E\t\t\t\tkey = 10000 0.0075\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tconfiguration = WAC-Corporal\u003Cbr\u003E\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo that is a basic example that defines just the default scope with a curve that says \u0022At 0 flight data the failure rate is 0.0127 and at 10,000 flight data the failure rate drops to 0.0075\u0022. Its a FloatCurve though so you can make it as complicated as you desire. Most of my setups currently use 4 keys to give a sharper decline in failure rate at first then level out after.\u003C/p\u003E\u003Cp\u003EThere is a derived module \u0022TestFlightReliability_EngineCycle\u0022 which is designed to modify the current failure rate over time based on the engine cycle. Basically giving a bathtub curve with higher failure rate at first ignition, then lowering to normal values for a rated time then slowly increasing again. \u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ETestFlightFailure\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003EThe most used module, there are several derived versions of this each defining a specific failure mode. Just add whichever ones you want. This is where the majority of your config properties are set. There are a bunch of basic properties to define every failure, as well as repairs, and then each individual failure type may have some specialized ones.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EfailureType\u003C/span\u003E = \u0022mechanical\u0022 or \u0022software\u0022\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Eseverity\u003C/span\u003E = \u0022minor\u0022, \u0022failure\u0022, or \u0022major\u0022\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Eweight\u003C/span\u003E = 2 or 4 or 8 or 16 or 32 -- Defines a relative weight for the failure. When the system rolls to pick a random failure, this weight determines its relative weight amongst all failures and must always be one of these values\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EfailureTitle\u003C/span\u003E = short string to show to the player to indicate the failure\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduFail\u003C/span\u003E = amount of flight data that should be granted when this failure occurs\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EduRepair\u003C/span\u003E = amount of flight data to be granted when the failure is repaired\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EoneShot\u003C/span\u003E = true or false, generally false. If oneShot is true the failure happens, the bad things happen, but the part is NOT placed into a failed state\u003C/p\u003E\u003Cp\u003EThe last three are optional. Additionally you can define an optional REPAIR node that defines the requirements for repair. If no REPAIR node is given then the failure can\u0027t be repaired.\u003C/p\u003E\u003Cp\u003EHere is an example\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = TestFlightFailure_ShutdownEngine\u003Cbr\u003E\t\tfailureTitle = Engine Shutdown\u003Cbr\u003E\t\tduFail = 100.0\u003Cbr\u003E\t\tfailureType = software\u003Cbr\u003E\t\tduRepair = 50.0\u003Cbr\u003E\t\tseverity = failure\u003Cbr\u003E\t\tconfiguration = WAC-Corporal\u003Cbr\u003E\t\tweight = 16\u003Cbr\u003E\t\tREPAIR\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\trepairChance = 75\u003Cbr\u003E\t\t\tcanBeRepairedOnSplashed = True\u003Cbr\u003E\t\t\tcanBeRepairedByRemote = True\u003Cbr\u003E\t\t\tcanBeRepairedInFlight = True\u003Cbr\u003E\t\t\tdataScale = 1\u003Cbr\u003E\t\t\tdataSize = 1\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe following failure modules are available, and i\u0027ve indicated any additional properties in ()\u003C/p\u003E\u003Cp\u003ETestFlightFailure_ShutdownEngine\u003C/p\u003E\u003Cp\u003ETestFlightFailure_ResourceLeak (\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EresourceToLeak\u003C/span\u003E = \u0022random\u0022 or a name of a resource, \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EinitialAmount\u003C/span\u003E = amount to leak on first tick right away, \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EperSecondAmount\u003C/span\u003E = amount per second to leak)\u003C/p\u003E\u003Cp\u003ETestFlightFailure_ReducedMaxThrust (\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EthrustReduction\u003C/span\u003E = multiplier, 0 to 1, amount to reduce maximum thrust by)\u003C/p\u003E\u003Cp\u003ETestFlightFailure_LockGimbal\u003C/p\u003E\u003Cp\u003ETestFlightFailure_IgnitionFail (\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003ErestoreIgnitionCharge\u003C/span\u003E = true or false, of true and EngineIgnitor mod is used it will restore the used up charge)\u003C/p\u003E\u003Cp\u003ETestFlightFailure_Explode\u003C/p\u003E\u003Cp\u003EOk that\u0027s a start. Please ask any followup questions you may have, or if you have any problems getting it to work. I will work on expanding the Wiki but TestFlight is a surprisingly complex beast with a very large scope to document.\u003C/p\u003E\n"},{"CreatedByName":"Wercho","CreatedById":57663,"CreatedDateTime":"2015-02-08T21:44:57Z","Content":"\n\u003Cp\u003EThis seems really cool. I like that failures are reduced through use of a part. I don\u0027t play RO, so I\u0027ll wait for more stock support / general configs for use with mods, but I like the way this is going. A couple of questions:\u003C/p\u003E\u003Cp\u003EDoes this work with procedural parts? I know Dang It doesn\u0027t (yet) because PP tanks don\u0027t have a RESOURCE module in the base config, or something like that.\u003C/p\u003E\u003Cp\u003EDoes the resourceleak failure work on electric charge, or mod added resources? I presume yes.\u003C/p\u003E\u003Cp\u003EAny plans to add other failure modes for other parts, such as solar panels, etc.\u003C/p\u003E\u003Cp\u003EAnyway, really cool stuff.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-08T22:13:49Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Wercho\u0022 data-cite=\u0022Wercho\u0022\u003E\u003Cdiv\u003EThis seems really cool. I like that failures are reduced through use of a part. I don\u0027t play RO, so I\u0027ll wait for more stock support / general configs for use with mods, but I like the way this is going. A couple of questions:\u003Cp\u003EDoes this work with procedural parts? I know Dang It doesn\u0027t (yet) because PP tanks don\u0027t have a RESOURCE module in the base config, or something like that.\u003C/p\u003E\u003Cp\u003EDoes the resourceleak failure work on electric charge, or mod added resources? I presume yes.\u003C/p\u003E\u003Cp\u003EAny plans to add other failure modes for other parts, such as solar panels, etc.\u003C/p\u003E\u003Cp\u003EAnyway, really cool stuff.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E1. Yes it works with procedural parts, though it would depend on the failure modules you wanted to apply. That said I have not coded in any SPECIFIC handling of pParts and I plan to do so, so that for example you could set things differently based on the size of the part. I just haven\u0027t gotten to that yet.\u003C/p\u003E\u003Cp\u003E2. Yes it should work on anything that uses resources in the normal way.\u003C/p\u003E\u003Cp\u003E3. Definitely. This is a base to build upon, and I plan to add a lot to it over time.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2015-02-08T23:11:19Z","Content":"\n\u003Cp\u003EAgathorn, many thanks for your detailed explanation. \u003C/p\u003E\u003Cp\u003EOf course it will take a bit of time to experiment, I can\u0027t be sure yet to have got it all right. But sure will come asking again in case.\u003C/p\u003E\u003Cp\u003EOne thing I would know already about the repair mode (e.g. CanBeRepairedInFlight), those modes just mean a button wil appear to let the part be repaired upon clicking? I ask because would like to see the possibility that EVA is required to repair some parts.\u003C/p\u003E\u003Cp\u003EAbout the engines, I mean I\u0027m not finding the stock engines configured, even if changed in RO. Not yet clear if that is because of a bad install. I did a couple tests building a vessel with one of those reconfigured engines, and in flight mode, TestFlight seems unable to find it (it gives a message on the MSD \u0022TestFlight is not currently tracking any vessels\u0022, and I infer it is because no engine was recognized. Unclear if I should in some way make TestFlight look at the engine while in the Editor, I can\u0027t find an option for that.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-09T00:36:37Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EAgathorn, many thanks for your detailed explanation. \u003Cp\u003EOf course it will take a bit of time to experiment, I can\u0027t be sure yet to have got it all right. But sure will come asking again in case.\u003C/p\u003E\u003Cp\u003EOne thing I would know already about the repair mode (e.g. CanBeRepairedInFlight), those modes just mean a button wil appear to let the part be repaired upon clicking? I ask because would like to see the possibility that EVA is required to repair some parts.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere is an option you can specify, \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003ErequiresEVA\u003C/span\u003E. However at this time while you can set it, it is ignored because I haven\u0027t figured out the code for it yet \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAbout the engines, I mean I\u0027m not finding the stock engines configured, even if changed in RO. Not yet clear if that is because of a bad install. I did a couple tests building a vessel with one of those reconfigured engines, and in flight mode, TestFlight seems unable to find it (it gives a message on the MSD \u0022TestFlight is not currently tracking any vessels\u0022, and I infer it is because no engine was recognized. Unclear if I should in some way make TestFlight look at the engine while in the Editor, I can\u0027t find an option for that.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan I ask which engine(s)? If TestFlight isn\u0027t attaching then it means that the config name in TF isn\u0027t matching what is in RO. They should be correct based on a clean RO install but I might have a mistake somewhere.\u003C/p\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2015-02-09T01:23:00Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003EThere is an option you can specify, \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003ErequiresEVA\u003C/span\u003E. However at this time while you can set it, it is ignored because I haven\u0027t figured out the code for it yet \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E Thanks. Looking forward to that.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003ECan I ask which engine(s)? If TestFlight isn\u0027t attaching then it means that the config name in TF isn\u0027t matching what is in RO. They should be correct based on a clean RO install but I might have a mistake somewhere.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETried the P\u0026amp;W RL-10, Rocketdyne H-1, Rocketdyne LR-105. Possible other engines too, have not found any getting tracked by TestFlight yet.\u003C/p\u003E\u003Cp\u003EI\u0027m not running the full list of RO recommended add-ons currently, just a minimum subset to check this. Got a pic of one test \u003Ca href=\u0022https://www.dropbox.com/s/shf2urnwu6p6tu1/screenshot16.png?dl=0\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E, maybe useful. Nothing in the output_log to suggest a problem.\u003C/p\u003E\u003Cp\u003EEDIT: did a test with stock parts (not RO-modified) after having copied these config files from a dev version of TestFlight: \u0022Squad_Engines.cfg\u0022 and \u0022Squad_FuelTanks.cfg\u0022. Launched a rocket, and both tank and engine installed were recognised. Therefore confirmed TestFlight works, just a problem either with config or my install of RO to make parts not recognized.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-09T01:41:33Z\u0022 title=\u002202/09/2015 01:41  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 9, 2015\u003C/time\u003E by diomedea\u003C/strong\u003E\n\u003Cbr\u003Enew info\n\u003C/span\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-09T01:41:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022diomedea\u0022 data-cite=\u0022diomedea\u0022\u003E\u003Cdiv\u003EThanks. Looking forward to that.\u003Cp\u003ETried the P\u0026amp;W RL-10, Rocketdyne H-1, Rocketdyne LR-105. Possible other engines too, have not found any getting tracked by TestFlight yet.\u003C/p\u003E\u003Cp\u003EI\u0027m not running the full list of RO recommended add-ons currently, just a minimum subset to check this. Got a pic of one test \u003Ca href=\u0022https://www.dropbox.com/s/shf2urnwu6p6tu1/screenshot16.png?dl=0\u0022 rel=\u0022external nofollow\u0022\u003Ehere\u003C/a\u003E, maybe useful. Nothing in the output_log to suggest a problem.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOk actually none of those are in TestFlight yet sorry. With so incredibly many RO engines, I needed a plan so what I decided to do was work on the engines from earliest to latest in the RP-0 tech tree. I am doing the RL-10 right now so that will be in the next update. Looking at my list the only engine I guess that you should have is the LR-89. The Aerobee Sustainer as well but I think that is configured by RP-0 not RO so you might not have that one.\u003C/p\u003E\u003Cp\u003EThe LR-105 should also be configured, but its possible I messed up the config on that one. I\u0027ll double check it. The LR-89 and LR-105 are a bit confusing on my end because RP-0 and RO both use them with DIFFERENT Stock parts \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 alt=\u0022:(\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-09T02:03:39Z","Content":"\n\u003Cp\u003ESo my apologies here. I didn\u0027t realize really that most of the engines I initially supported come from other part packs than Stock in RO. I am working very hard to expand the amount of engines supported by TestFlight and the next release should add 5 or so more plus derivatives, and I will keep pushing to get more and more parts in here as quickly as I can.\u003C/p\u003E\n"},{"CreatedByName":"FennexFox","CreatedById":111279,"CreatedDateTime":"2015-02-09T06:04:52Z","Content":"\n\u003Cp\u003EWill it cause any problem if I install this mod on ongoing save?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-09T06:16:09Z\u0022 title=\u002202/09/2015 06:16  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 9, 2015\u003C/time\u003E by FennexFox\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"diomedea","CreatedById":93700,"CreatedDateTime":"2015-02-09T09:26:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Agathorn\u0022 data-cite=\u0022Agathorn\u0022\u003E\u003Cdiv\u003E.... I am working very hard to expand the amount of engines supported by TestFlight and the next release should add 5 or so more plus derivatives, and I will keep pushing to get more and more parts in here as quickly as I can.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EMuch understandable. Really too many the engines to deal with (and then other parts too).\u003C/p\u003E\u003Cp\u003EBut I\u0027m happy to already see the add-on working, to get acquainted with it, and with the prospect of credible progress in the reliability of parts.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-09T14:12:52Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FennexFox\u0022 data-cite=\u0022FennexFox\u0022\u003E\u003Cdiv\u003EWill it cause any problem if I install this mod on ongoing save?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe main issue you would have is that any craft you switched to for the first time should get initialized with your current level of flight data for its parts, which if you just installed this and immediately switched to a craft, would be 0. What you would need to try doing for an existing save would be install, then do NOT switch to any active craft but instead start flight testing the parts you have already used on your existing craft. Then once you have those parts to where you ant them, switching to your already existing active craft should initialize them with that data. This happens the first time TestFlight sees a vessel.\u003C/p\u003E\u003Cp\u003EAll of that said, I have never tested adding this to an existing save, so I\u0027m not 100% sure on the side effects. I strongly suggest using TestFlight for the first time in a new game.\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-09T16:47:56Z","Content":"\n\u003Cp\u003EJust a quick note to say that TestFlight is now available through CKAN.\u003C/p\u003E\u003Cp\u003EAlso I have updated the Parts Compatibility in the OP to indicate what part packs the supported parts come from.\u003C/p\u003E\n"},{"CreatedByName":"Sampa","CreatedById":130079,"CreatedDateTime":"2015-02-09T17:24:52Z","Content":"\n\u003Cp\u003EI\u0027ll wait until someone comes out with a stock config for this before downloading...I AM interested, though!\u003C/p\u003E\n"},{"CreatedByName":"Agathorn","CreatedById":99662,"CreatedDateTime":"2015-02-10T02:41:21Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003ETestFlight v1.1.0.0\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:12px;\u0022\u003EChange Log\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cul\u003E\u003Cli\u003E Changed AJ10 engine config names to line up with RP-0\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003ENEW ENGINE\u003C/strong\u003E: XLR11 (FASA Pack) --\u0026gt; XLR99\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003ENEW ENGINE\u003C/strong\u003E: LR-87-3 (FASA and AIES Packs) --\u0026gt; LR-87-5 --\u0026gt; LR-87-7 --\u0026gt; LR-87-9 --\u0026gt; LR-87-11 --\u0026gt; LR-87-11A\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003ENEW ENGINE\u003C/strong\u003E: RL10A-1 (Squd, KW, and FASA Packs) -\u0026gt; RL10A-3-1 --\u0026gt; RL10A-3-3 --\u0026gt; RL10A-3-3A --\u0026gt; RL-10A-4 --\u0026gt; RL-10A-4-1/2 --\u0026gt; RL10B-2 --\u0026gt; RL10C-1\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003EFIX\u003C/strong\u003E spelling error in settings window\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003EFIX\u003C/strong\u003E #47 Parts that are destroyed or staged will now remain in the MSD for about 15 seconds giving you time to see their status\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003EFIX\u003C/strong\u003E Incorrect LR-89 engine reference\u003Cbr\u003E\u003C/li\u003E\u003Cli\u003E \u003Cstrong\u003ENEW\u003C/strong\u003E Initial support for Procedural Tanks, more to come on this!\u003Cbr\u003E\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EDownload from GitHub\u003C/strong\u003E: \u003Ca href=\u0022https://github.com/jwvanderbeck/TestFlight/releases/tag/1.1.0.0\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/jwvanderbeck/TestFlight/releases/tag/1.1.0.0\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EDownload From KerbalStuff\u003C/strong\u003E: \u003Ca href=\u0022https://kerbalstuff.com/mod/572/TestFlight\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalstuff.com/mod/572/TestFlight\u003C/a\u003E\u003C/p\u003E\n"}]}