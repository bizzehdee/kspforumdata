{"TopicId":75314,"ForumId":34,"TopicTitle":"GimbalDebug class to use in your plugin","CreatedByName":"philotical","CreatedById":109390,"CreatedDateTime":"2014-06-17T17:22:47Z","PageNum":1,"Articles":[{"CreatedByName":"philotical","CreatedById":109390,"CreatedDateTime":"2014-06-17T17:22:47Z","Content":"\n\u003Cp\u003E\u003Cstrong\u003EWhat it does:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E It will draw a line from the origin of the GameObject/Vessel/Part along each of the axis x/y/z as seen in unity editor.\u003C/p\u003E\u003Cp\u003EIt simulates a 3D-Gimbal.\u003C/p\u003E\u003Cp\u003E It might help to debug the common rotation issues by making them visible in game.\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EInstallation in your project:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E simply change the namespace to fit your project and you are good to go..\u003C/p\u003E\u003Cp\u003E The code below should work as it is - but you may change what ever you need to fit your situation..\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E/*\u003Cbr\u003E * GimbalDebug Class by Philotical is released as is with the license \u0022Do what ever you want with it\u0022 \u003Cbr\u003E * All code you see is a direct derivate of Unity-Docs examples - so a license other than the above is obsolete\u003Cbr\u003E * Everyone can put that together on his own..\u003Cbr\u003E * \u003Cbr\u003E * Version 0.1 - released 17.06.2014\u003Cbr\u003E * bugs report here..\u003Cbr\u003E * http://forum.kerbalspaceprogram.com/threads/83386-GimbalDebug-class-to-use-in-your-plugin\u003Cbr\u003E *\u003Cbr\u003E * Usage:\u003Cbr\u003E\u003Cbr\u003E  GimbalDebug foo = new GimbalDebug();\u003Cbr\u003E  foo.drawGimbal(nb.ship, 20, 0.5f);\u003Cbr\u003E  // and later..\u003Cbr\u003E  foo.removeGimbal();\u003Cbr\u003E\u003Cbr\u003E * There are overloads:\u003Cbr\u003E * drawGimbal(GameObject o,int length, float width)\u003Cbr\u003E * drawGimbal(Vessel o,int length, float width)\u003Cbr\u003E * drawGimbal(Part o,int length, float width)\u003Cbr\u003E\u003Cbr\u003E * What it does:\u003Cbr\u003E * It will draw a line from the origin of the GameObject/Vessel/Part along the axis x/y/z as seen in unity editor.\u003Cbr\u003E * It might help to debug the common rotation issues by making them visible in game.\u003Cbr\u003E * \u003Cbr\u003E * Installation in your project:\u003Cbr\u003E * simply change the namespace to fit your project and you are good to go..\u003Cbr\u003E * The code below should work as it is - but you may change what ever you need to fit your situation..\u003Cbr\u003E\u003Cbr\u003E */\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace YourCoolNameSpaceHere\u003Cbr\u003E{\u003Cbr\u003E    class GimbalDebug\u003Cbr\u003E    {\u003Cbr\u003E        LineRenderer l1 = null;\u003Cbr\u003E        LineRenderer l2 = null;\u003Cbr\u003E        LineRenderer l3 = null;\u003Cbr\u003E\u003Cbr\u003E        public void drawGimbal(GameObject o,int length, float width)\u003Cbr\u003E        {\u003Cbr\u003E            _drawGimbal(o.transform, length,  width);\u003Cbr\u003E        }\u003Cbr\u003E        public void drawGimbal(Vessel o, int length, float width)\u003Cbr\u003E        {\u003Cbr\u003E            _drawGimbal(o.transform, length, width);\u003Cbr\u003E        }\u003Cbr\u003E        public void drawGimbal(Part o, int length, float width)\u003Cbr\u003E        {\u003Cbr\u003E            _drawGimbal(o.transform, length,  width);\u003Cbr\u003E        }\u003Cbr\u003E        public void removeGimbal()\u003Cbr\u003E        {\u003Cbr\u003E            _removeGimbal();\u003Cbr\u003E        }\u003Cbr\u003E        public void _drawGimbal(Transform o, int length, float width)\u003Cbr\u003E        {\u003Cbr\u003E            if (l1==null)\u003Cbr\u003E            {\u003Cbr\u003E                l1 = new LineRenderer();\u003Cbr\u003E                l2 = new LineRenderer();\u003Cbr\u003E                l3 = new LineRenderer();\u003Cbr\u003E            }\u003Cbr\u003E            this.l1 = DebugLine(l1, o.transform, o.transform.up, Color.green, length,  width);\u003Cbr\u003E            this.l2 = DebugLine(l2, o.transform, o.transform.right, Color.red, length,  width);\u003Cbr\u003E            this.l3 = DebugLine(l3, o.transform, o.transform.forward, Color.blue, length,  width);\u003Cbr\u003E        }\u003Cbr\u003E        public void _removeGimbal()\u003Cbr\u003E        {\u003Cbr\u003E            this.l1.SetPosition(0, Vector3.zero);\u003Cbr\u003E            this.l1.SetPosition(1, Vector3.zero);\u003Cbr\u003E            this.l2.SetPosition(0, Vector3.zero);\u003Cbr\u003E            this.l2.SetPosition(1, Vector3.zero);\u003Cbr\u003E            this.l3.SetPosition(0, Vector3.zero);\u003Cbr\u003E            this.l3.SetPosition(1, Vector3.zero);\u003Cbr\u003E        }\u003Cbr\u003E        private LineRenderer DebugLine(LineRenderer line, Transform origin, Vector3 transformDirection, Color color, int length, float width)\u003Cbr\u003E        {\u003Cbr\u003E            GameObject o = new GameObject(\u0022Test\u0022);\u003Cbr\u003E            Transform transform = origin;\u003Cbr\u003E            o.transform.parent = transform;\u003Cbr\u003E            o.transform.localEulerAngles = Vector3.zero;\u003Cbr\u003E            line = o.AddComponent\u0026lt;LineRenderer\u0026gt;();\u003Cbr\u003E            line.transform.parent = transform;\u003Cbr\u003E            line.useWorldSpace = false;\u003Cbr\u003E            line.transform.localPosition = origin.localPosition;\u003Cbr\u003E            line.transform.localEulerAngles = Vector3.zero;\u003Cbr\u003E            line.material = new Material(Shader.Find(\u0022Particles/Additive\u0022));\u003Cbr\u003E            line.SetWidth(width, width);\u003Cbr\u003E            line.SetVertexCount(2);\u003Cbr\u003E            line.SetPosition(0, transform.localPosition);\u003Cbr\u003E            line.SetPosition(1, transform.InverseTransformDirection(transformDirection) * length);\u003Cbr\u003E            line.SetColors(color, color);\u003Cbr\u003E            return line;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIn case someone might find it usefull...\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EScreenshot:\u003C/strong\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022http://i.imgur.com/uvyic5r.png\u0022 alt=\u0022uvyic5r.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EBugs: report below...\u003C/p\u003E\u003Cp\u003Ehave fun..\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-06-17T20:05:31Z\u0022 title=\u002206/17/2014 08:05  PM\u0022 data-short=\u002210 yr\u0022\u003EJune 17, 2014\u003C/time\u003E by philotical\u003C/strong\u003E\n\u003C/span\u003E\n"}]}