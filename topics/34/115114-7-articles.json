{"TopicId":115114,"ForumId":34,"TopicTitle":"Sigma Binary","CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-07-05T15:20:00Z","PageNum":7,"Articles":[{"CreatedByName":"Pkmniako","CreatedById":138569,"CreatedDateTime":"2015-09-22T20:26:23Z","Content":"\u003E \n\u003E Since the mod was moved from KerbalStuff to GitHub I thought it was time to change [download buttons](https://forum.kerbalspaceprogram.com/threads/127820#DL) and [signature banner](http://i.imgur.com/bIdFzCj.png).\n\u003E Thanks to **pkmniako** for the new design. (Check out his mod [**Other\\_Worlds**](https://forum.kerbalspaceprogram.com/threads/128695))\n\n![:wink:](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif)"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-23T22:46:53Z","Content":"Ive just noticed something: whenever I make a binary system that has two large objects the rotation period of the primary object is messed up. Any help?"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-23T22:49:27Z","Content":"\u003E \n\u003E Ive just noticed something: whenever I make a binary system that has two large objects the rotation period of the primary object is messed up. Any help?\n\ncould you send me the stuff I need to reproduce the error? the cfgs for the two large objects and the template.cfg you are using ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\nthat way I can check if there\u0027s an error in my mod or in how you are using it"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-23T23:34:13Z","Content":"I was trying to make a barycentre for Tylo and Duna from Alternis Kerbol mod. Ill give you the code for the cfgs, but they have not been changed:\n\nTylo:\n\n    // Apply this patch after the Kopernicus mod is loaded@Kopernicus:FOR[AlternisKerbol]{    // We want to make Tylo occupy the point in space that Duna usually occupies.    @Body[Tylo]    {  flightGlobalsIndex = 9288  @Template   {    @name = Duna   }  @Template  {   removePQSMods = VertexColorMapBlend,PQSLandControl  }  @Properties  {    biomeMap = AlternisKerbol/Tylo/PluginData/TyloBiomes.png   @Biomes   {    Biome    {     name = Lowlands     value = 1.0     color = 1,1,1,1    }    Biome    {     name = Highlands     value = 1.1     color = 0,0,0,1    }   }   radius  = 1103000   geeASL  = 4.035   description = Tylo is an insanely massive so-called \u0022Superkerbin\u0022 planet. With four gees of surface gravity and a thin atmosphere, aerospace engineers fear it. Its atmosphere is so thin that it won\u0027t slow you down, but it is so thick that it will burn you up on re-entry. Some kerbals have even suggested that landing on Tylo is impossible, let alone returning. The Kerbal Astronomical Society claims to give three golden stars to the first kerbal to make the trip.   @ScienceValues   {    landedDataValue   = 18    splashedDataValue  = 1    flyingLowDataValue  = 9    flyingHighDataValue  = 8    flyingAltitudeThreshold = 25000    inSpaceLowDataValue  = 5    inSpaceHighDataValue = 4   }  }  @ScaledVersion  {   Material   {    texture   = AlternisKerbol/Tylo/Textures/Tylo_Color    normals   = AlternisKerbol/Tylo/Textures/Tylo_Normal    rimColorRamp = AlternisKerbol/Rims/ramp_red    rimPower  = 1.06    rimBlend  = 0.3   }  }  @PQS  {   Mods   {    VoronoiCraters                {     name = 1                    deformation = 900                    voronoiSeed = 986                    voronoiDisplacement = 0.1                    voronoiFrequency = 24                    simplexSeed = 123123                    simplexOctaves = 9                    simplexPersistence = 0.5                    simplexFrequency = 120                    jitter = 0.1                    jitterHeight = 3                    rFactor = 1                    rOffset = 1                    colorOpacity = 0.2                    DebugColorMapping = false                    enabled = true                    order = 101                }    VertexSimplexNoiseColor    {      seed = 45      blend = 0.5      colorStart = 0,0,0,0      //colorEnd = 1,1,1,1      colorEnd = 0,0,0,0      octaves = 12.0      persistence = 0.7      frequency = 2.0      enabled = true      order = 9999994    }    VertexColorSolid    {      //Thanks Probus.      blend = 0.0      //color = 0.01, 0.01, 0.01, 1.0      color = 0.1, 0.01, 0.01, 0.0      order = 19    }    VertexColorMap    {     map  = AlternisKerbol/Tylo/PluginData/tylo_newcolor.png     enabled = true    }    VertexHeightMap    {     map  = AlternisKerbol/Tylo/PluginData/Tylo_Height.png     deformity = 21500     enabled = true    }   }  }  Atmosphere        {            // effectively the ambient lighting color for all objects on the ground of this body (provides a slight tint)            ambientColor = 0.175,0.15,0.15,1               // sets the waveLength property in the AtmosphereFromGround component of the scaled version            // From my picking around in the KSP assemblies, it seems this is fed to the shader in this way:            //            // shader.invWaveLength = Color( 1 / r^4, 1 / g^4, 1 / b^4, 0.5);            //            // Obviously the code for the shader is not available, and I don\u0027t feel like picking through ARB shader IL so we\u0027ll need            // to figure this out experiementally.            lightColor = 0.4632503906, 0.52200625, 0.55200625, 0.5    AtmosphereFromGround    {     outerRadiusMult = 1.032     innerRadiusMult = 0.958    }            // General atmosphere settings            enabled = true            oxygen = False            altitude = 80000.0            // Atmosphere Pressure   // Values for pressure and temperature created with the handy-dandy Atmosphere Calculator by KillAshley            // pressure (in atm) = multipler * e ^ -(altitude / (scaleHeight * 1000))            pressureCurve   {    key = 0 56.13405 -5.90216365E-03 -5.90216365E-03    key = 4000 32.5253954 -4.803547025E-03 -4.803547025E-03    key = 8000 17.7056738 -2.9398841E-03 -2.9398841E-03    key = 12000 9.0063226 -1.6466819E-03 -1.6466819E-03    key = 16000 4.5322186 -8.40161775E-04 -8.40161775E-04    key = 20000 2.2850284 -4.206522E-04 -4.206522E-04    key = 24000 1.167001 -2.10499225E-04 -2.10499225E-04    key = 28000 0.6010346 -1.061464E-04 -1.061464E-04    key = 32000 0.3178298 -5.36272E-05 -5.36272E-05    key = 36000 0.172017 -2.76446E-05 -2.76446E-05    key = 40000 0.096673 -1.4632525E-05 -1.4632525E-05    key = 44000 0.0549568 -8.039925E-06 -8.039925E-06    key = 48000 0.0323536 -4.5705E-06 -4.5705E-06    key = 52000 0.0183928 -2.763075E-06 -2.763075E-06    key = 56000 0.010249 -1.613525E-06 -1.613525E-06    key = 60000 0.0054846 -9.21025E-07 -9.21025E-07    key = 64000 0.0028808 -5.05525E-07 -5.05525E-07    key = 68000 0.0014404 -2.70075E-07 -2.70075E-07    key = 72000 0.0007202 -1.5235E-07 -1.5235E-07    key = 76000 0.0002216 -9.0025E-08 -9.0025E-08    key = 80000 0 -5.54E-08 -5.54E-08   }   temperatureCurve   {    key = 0 279.19 -0.00802083375 -0.00802083375    key = 9600 205.8567917 -0.0011360735 -0.0011325715    key = 16800 205.8567917 0.0011325715 0.0011325715    key = 24800 258.2376548 0.000619018 0.000619018    key = 44800 258.2376548 -0.000853660375 -0.000853660375    key = 64000 178.2377912 -0.0011360735 -0.0011360735    key = 72000 178.2377912 0.000592218125 0.000592218125    key = 80000 219.1901023 0.000868255125 0.000868255125    key = 120000 0 -0.000562011375 -0.000562011375   }            // Atmosphere Temperature            temperatureMultiplier = 1.0   atmosphereMolarMass = 0.022        }  @Orbit        {            // Moves Tylo to Duna\u0027s position in space.            // -- Note the \u0022@\u0022 on the front of referenceBody.  This means edit an existing attribute            @referenceBody = Sun            // Other orbit stuff            inclination = 1.22            eccentricity = 0.03            semiMajorAxis = 24708887045            longitudeOfAscendingNode = 0            argumentOfPeriapsis = 0            meanAnomalyAtEpoch = 3.14            epoch = 0   color = RGBA(102, 63.75, 38.25, 255)        }    }}@Kopernicus:FOR[AlternisKerbol]:NEEDS[GalacticNeighborhood]{ @Body[Tylo] {  @Properties  {   description = Stumbos is one of the largest rocky planets on record. With a very thin atmosphere and a very high gravity, it would be quite the challenge to land on. Not enough air to slow you down, and so much air that you have to worry about re-entry heating. Luckily engineers won\u0027t have to worry about landing on it, because it is a distant planet lightyears away.  } }}\n\nAnd Duna:\n\n    // Apply this patch after the Kopernicus mod is loaded@Kopernicus:FOR[AlternisKerbol]{    // We want to make Duna orbit Tylo    @Body[Duna]    {  @Properties  {   tidallyLocked = true   description = Also known as The Butterscotch Dot Next To Tylo, Duna has been a wonder to Kerbalkind for quite some time after its discovery. It was the first secondary planet to be discovered around a primary planet other than Jool. If it does have life on it, it is probably butterscotch flavoured.  }  Debug  {   exportBin = false  }  @Template  {   removePQSMods = VertexColorMapBlend,PQSLandControl  }  @ScaledVersion  {   Material   {    texture = AlternisKerbol/Duna/Textures/Duna_Color    normals = AlternisKerbol/Duna/Textures/Duna_Normal   }  }  @PQS  {   Mods   {    VertexColorSolid    {     //Thanks Probus     blend = 0.0     //color = 0.01, 0.01, 0.01, 1.0     color = 0.1, 0.01, 0.01, 0.0     order = 19    }    VertexSimplexNoiseColor    {     seed = 45     blend = 0.5     colorStart = 0,0,0,0     //colorEnd = 1,1,1,1     colorEnd = 0,0,0,0     octaves = 12.0     persistence = 0.7     frequency = 2.0     enabled = true     order = 9999994    }    VertexColorMap    {     map = AlternisKerbol/Duna/Textures/Duna_Color.png     enabled = true    }    VertexHeightMap    {     map = AlternisKerbol/Duna/PluginData/Duna_Height.png     deformity = 11000     enabled = true    }   }  }  @Orbit  {   @referenceBody = Tylo   semiMajorAxis = 34598850   inclination = 0.7   eccentricity = 0.05   longitudeOfAscendingNode = 135.5   argumentOfPeriapsis = 0   meanAnomalyAtEpoch = 3.14   epoch = 0   color = RGBA(255, 185, 123, 255)  }    }}@Kopernicus:FOR[AlternisKerbol]:NEEDS[GalacticNeighborhood]{ @Body[Duna] {  @Properties  {   %description = Egar is a medium-sized moon orbiting Stumbos. It is colored a nice butterscotch color. It may very well hold life on its surface somewhere, because there\u0027s definitely some canalis. Maybe. It looks decently canal-like for sure. Hard to tell at this distance.  } }}\n\nAnd the template:\n\n                          //////////////////////////////////                     //  Requires SigmaBinary 1.1.1  //                    //////////////////////////////////  ////////////////////////////////////////////////////////////////////// // Forum Thread: http://forum.kerbalspaceprogram.com/threads/127820 ////////////////////////////////////////////////////////////////////////@Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ // INSTRUCTIONS: // Copy this cfg anywhere into the GameData folder // Set the name of the two bodies you want to turn into a binary system plus the reference body @Body[Tylo]          // Put here the name of the heavies body (eg: Pluto) {  SigmaBinary = Primary    // Don\u0027t change this line } @Body[Duna]            // Put here the name of the lightest body (eg: Charon) {  SigmaBinary = Secondary  // Don\u0027t change this line } @Body[PARENT_NAME_HERE]          // Put here the name of the body around which your binary system orbits (eg: Sun) {  SigmaBinary = Reference  // Don\u0027t change this line }}// Now sit back and enjoy your binary system// Sigma  //////////////////////////////////////////// // You don\u0027t need to read past this point //////////////////////////////////////////////// This part checks for a Finalize node inside Kopernicus@Kopernicus:HAS[@Finalize]:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ @Finalize:HAS[#finalizeOrbits[?rue]] {  SigmaFinalize = True } @Finalize:HAS[~finalizeOrbits[?rue]] {  SigmaFinalize = False }}@Kopernicus:HAS[!Finalize]:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ Finalize {  SigmaFinalize = False  removeFinalize = True }}// This part creates the barycenter@Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ \u002BBody[SigmaBarycenter] {  SigmaBinary = Barycenter  @name = #$/Body:HAS[#SigmaBinary[Primary]]/name$$/Body:HAS[#SigmaBinary[Secondary]]/name$  #/Body:HAS[#SigmaBinary[Primary]]/Orbit {}  @Properties  {   SigmaFinalize = #$/Finalize/SigmaFinalize$  } }// This part sets the Primary body @Body:HAS[#SigmaBinary[Primary]] {  @Properties  {   %solarRotationPeriod = false   SigmaFinalize = #$/Finalize/SigmaFinalize$  }  // Calculate the temporary SoI (only if it\u0027s not already explicitly set)  @Properties:HAS[~sphereOfInfluence[*]]  {   sphereOfInfluence = #$mass$   @sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$   @sphereOfInfluence != 0.4   @sphereOfInfluence *= #$../Orbit/semiMajorAxis$   minSoI = 1  }  // Fixes the SoI if it\u0027s too small  @Properties:HAS[#minSoI[1]]  {   @minSoI = #$radius$   @minSoI *= 2   @minSoI -= #$radius$   @minSoI -= 40000     }  @Properties:[#minSoI[\u003E0]|#minSoI[0]]  {   @minSoI \u002B= #$radius$   @minSoI \u002B= 40000   }  @Properties:HAS[#minSoI[\u003C0]]  {   %minSoI = #$radius$   @minSoI *= 2  }  @Properties  {   @minSoI -= #$sphereOfInfluence$  }  @Properties:HAS[#minSoI[\u003E0]]  {   @sphereOfInfluence \u002B= #$minSoI$  }  // Set orbital parameters  !Orbit {}  #/Body:HAS[#SigmaBinary[Secondary]]/Orbit {}  @Orbit  {   @color = #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/color$   @referenceBody = #$/Body:HAS[#SigmaBinary[Barycenter]]/name$   @argumentOfPeriapsis \u002B= 180   // Set new semiMajorAxis   %semiMajorAxis = #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$   @semiMajorAxis \u002B= #$../Properties/mass$   @semiMajorAxis != -1   @semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$   @semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$  } } // This part changes the SoI of the Secondary body when it\u0027s too small or too big // If the original body have the SoI already explicitly set, this part won\u0027t change anything @Body:HAS[#SigmaBinary[Secondary]] {  @Properties:HAS[~sphereOfInfluence[*]]  {   %sphereOfInfluence = #$mass$   @sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$   @sphereOfInfluence != 0.4   @sphereOfInfluence *= #$../Orbit/semiMajorAxis$   %maxSoI = 1   %minSoI = 1  }  @Properties:HAS[#minSoI[1]]  {   @minSoI = #$radius$   @minSoI *= 2   @minSoI -= #$radius$   @minSoI -= 40000     }  @Properties:[#minSoI[\u003E0]|#minSoI[0]]  {   @minSoI \u002B= #$radius$   @minSoI \u002B= 40000   }  @Properties:HAS[#minSoI[\u003C0]]  {   %minSoI = #$radius$   @minSoI *= 2  }  @Properties  {   @minSoI -= #$sphereOfInfluence$  }  @Properties:HAS[#minSoI[\u003E0]]  {   @sphereOfInfluence \u002B= #$minSoI$  }  @Properties:HAS[#maxSoI[1]]  {   @maxSoI -= #$../Orbit/eccentricity$   @maxSoI *= #$../Orbit/semiMajorAxis$   @maxSoI -= #$radius$   @maxSoI -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/radius$   @maxSoI /= 2   @maxSoI \u002B= #$radius$   @maxSoI -= #$sphereOfInfluence$  }  @Properties:HAS[#maxSoI[\u003C0]]  {   @sphereOfInfluence \u002B= #$maxSoI$  } } // This part sets Barycenter\u0027s mass, description and SoI @Body:HAS[#SigmaBinary[Barycenter]] {  @Properties:HAS[#SigmaFinalize[?rue]]  {   @mass \u002B= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$  }  @Properties  {   // Set description   description = #This is the Barycenter of the $/Body:HAS[#SigmaBinary[Primary]]/name$-$/Body:HAS[#SigmaBinary[Secondary]]/name$ System.   // Set mass   @mass \u002B= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$   @mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$   @mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$   @mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$   @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$   @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$   @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$   // Set Sphere of Influence   %sphereOfInfluence = #$/Body:HAS[#SigmaBinary[Primary]]/Properties/sphereOfInfluence$  }  @Properties:HAS[#SigmaFinalize[?rue]]  {   @mass -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$  } } // This part: // Sets the final SoI value for the Primary Body // Calculates the correct rotation period if the body is tidallyLocked @Body:HAS[#SigmaBinary[Primary]] {  // Set final SoI value  @Properties  {   %sphereOfInfluence = #$../Orbit/eccentricity$   @sphereOfInfluence \u002B= 1   @sphereOfInfluence *= #$../Orbit/semiMajorAxis$   @sphereOfInfluence \u002B= #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/sphereOfInfluence$  }  // If tidallyLocked fix the rotationPeriod  @Properties:HAS[#tidallyLocked[?rue]]  {   %rotationPeriod = 0  }    @Properties:HAS[#tidallyLocked[?rue],#SigmaFinalize[?rue]]  {   @rotationPeriod \u002B= #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/mass$  }  @Properties:HAS[#tidallyLocked[?rue]]  {   !tidallyLocked = DEL   %rotates = true   @rotationPeriod \u002B= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$   @rotationPeriod /= #$../Orbit/semiMajorAxis$   @rotationPeriod /= #$../Orbit/semiMajorAxis$   @rotationPeriod /= #$../Orbit/semiMajorAxis$   @rotationPeriod /= 5.91525585920849e11 // divide by (4*pi^2)/G   @rotationPeriod != -0.5  } }}// This part adds an exception for ISRU contracts on the barycenter@Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ @ISRU {  @RESOURCE_REQUEST[Ore]  {   Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  } }}// This part clears temporary stuff@Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]{ @Body:HAS[#SigmaBinary[*]] {  !SigmaBinary = DEL  @Properties  {   !minSoI = DEL   !maxSoI = DEL   !SigmaFinalize = DEL  } } @Finalize:HAS[#SigmaFinalize[*]] {  !SigmaFinalize = DEL } !Finalize:HAS[#removeFinalize[*]] {}}\n\nEDIT: Okay, now it is working... Could there be any reason??\n\nEDIT2: Wait, SOI and Rotation aren\u0027t working for Tylo: Soi is set to 87 quadrillion km and rotation is more than 233 years...\n\n**Edited \u003Ctime datetime=\u00222015-10-23T23:43:35Z\u0022 title=\u002210/23/2015 11:43  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 23, 2015\u003C/time\u003E by RA3236**"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-23T23:48:49Z","Content":"\u003E \n\u003E EDIT: Okay, now it is working... Could there be any reason??\n\u003E \n\u003E EDIT2: Wait, SOI and Rotation aren\u0027t working for Tylo: Soi is set to 87 quadrillion km and rotation is more than 233 years...\n\u003E \n\u003E \n\u003E \u003E \n\u003E \u003E I was trying to make a barycentre for Tylo and Duna from Alternis Kerbol mod. Ill give you the code for the cfgs, but they have not been changed:\n\u003E \u003E \n\u003E \u003E Tylo:\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E @Kopernicus:FOR[AlternisKerbol]  \n\u003E \u003E {  \n\u003E \u003E  // We want to make Tylo occupy the point in space that Duna usually occupies.  \n\u003E \u003E  @Body[Tylo]  \n\u003E \u003E  {  \n\u003E \u003E  flightGlobalsIndex = 9288  \n\u003E \u003E   \n\u003E \u003E  @Template   \n\u003E \u003E  {   \n\u003E \u003E  @name = Duna   \n\u003E \u003E  }  \n\u003E \u003E  @Template  \n\u003E \u003E  {  \n\u003E \u003E  removePQSMods = VertexColorMapBlend,PQSLandControl  \n\u003E \u003E  }  \n\u003E \u003E  @Properties  \n\u003E \u003E  {   \n\u003E \u003E  biomeMap = AlternisKerbol/Tylo/PluginData/TyloBiomes.png  \n\u003E \u003E   \n\u003E \u003E  @Biomes  \n\u003E \u003E  {  \n\u003E \u003E  Biome  \n\u003E \u003E  {  \n\u003E \u003E  name = Lowlands  \n\u003E \u003E  value = 1.0  \n\u003E \u003E  color = 1,1,1,1  \n\u003E \u003E  }  \n\u003E \u003E  Biome  \n\u003E \u003E  {  \n\u003E \u003E  name = Highlands  \n\u003E \u003E  value = 1.1  \n\u003E \u003E  color = 0,0,0,1  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  radius = 1103000  \n\u003E \u003E  geeASL = 4.035  \n\u003E \u003E  description = Tylo is an insanely massive so-called \u0022Superkerbin\u0022 planet. With four gees of surface gravity and a thin atmosphere, aerospace engineers fear it. Its atmosphere is so thin that it won\u0027t slow you down, but it is so thick that it will burn you up on re-entry. Some kerbals have even suggested that landing on Tylo is impossible, let alone returning. The Kerbal Astronomical Society claims to give three golden stars to the first kerbal to make the trip.  \n\u003E \u003E   \n\u003E \u003E  @ScienceValues  \n\u003E \u003E  {  \n\u003E \u003E  landedDataValue = 18  \n\u003E \u003E  splashedDataValue = 1  \n\u003E \u003E  flyingLowDataValue = 9  \n\u003E \u003E  flyingHighDataValue = 8  \n\u003E \u003E  flyingAltitudeThreshold = 25000  \n\u003E \u003E  inSpaceLowDataValue = 5  \n\u003E \u003E  inSpaceHighDataValue = 4  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  @ScaledVersion  \n\u003E \u003E  {  \n\u003E \u003E  Material  \n\u003E \u003E  {  \n\u003E \u003E  texture = AlternisKerbol/Tylo/Textures/Tylo\\_Color  \n\u003E \u003E  normals = AlternisKerbol/Tylo/Textures/Tylo\\_Normal  \n\u003E \u003E  rimColorRamp = AlternisKerbol/Rims/ramp\\_red  \n\u003E \u003E  rimPower = 1.06  \n\u003E \u003E  rimBlend = 0.3  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  @PQS  \n\u003E \u003E  {  \n\u003E \u003E  Mods  \n\u003E \u003E  {  \n\u003E \u003E  VoronoiCraters  \n\u003E \u003E  {  \n\u003E \u003E  name = 1  \n\u003E \u003E  deformation = 900  \n\u003E \u003E  voronoiSeed = 986  \n\u003E \u003E  voronoiDisplacement = 0.1  \n\u003E \u003E  voronoiFrequency = 24  \n\u003E \u003E  simplexSeed = 123123  \n\u003E \u003E  simplexOctaves = 9  \n\u003E \u003E  simplexPersistence = 0.5  \n\u003E \u003E  simplexFrequency = 120  \n\u003E \u003E  jitter = 0.1  \n\u003E \u003E  jitterHeight = 3  \n\u003E \u003E  rFactor = 1  \n\u003E \u003E  rOffset = 1  \n\u003E \u003E  colorOpacity = 0.2  \n\u003E \u003E  DebugColorMapping = false  \n\u003E \u003E  enabled = true  \n\u003E \u003E  order = 101  \n\u003E \u003E  }  \n\u003E \u003E  VertexSimplexNoiseColor  \n\u003E \u003E  {  \n\u003E \u003E  seed = 45  \n\u003E \u003E  blend = 0.5  \n\u003E \u003E  colorStart = 0,0,0,0  \n\u003E \u003E  //colorEnd = 1,1,1,1  \n\u003E \u003E  colorEnd = 0,0,0,0  \n\u003E \u003E  octaves = 12.0  \n\u003E \u003E  persistence = 0.7  \n\u003E \u003E  frequency = 2.0  \n\u003E \u003E  enabled = true  \n\u003E \u003E  order = 9999994  \n\u003E \u003E  }  \n\u003E \u003E  VertexColorSolid  \n\u003E \u003E  {  \n\u003E \u003E  //Thanks Probus.  \n\u003E \u003E  blend = 0.0  \n\u003E \u003E  //color = 0.01, 0.01, 0.01, 1.0  \n\u003E \u003E  color = 0.1, 0.01, 0.01, 0.0  \n\u003E \u003E  order = 19  \n\u003E \u003E  }  \n\u003E \u003E  VertexColorMap  \n\u003E \u003E  {  \n\u003E \u003E  map = AlternisKerbol/Tylo/PluginData/tylo\\_newcolor.png  \n\u003E \u003E  enabled = true  \n\u003E \u003E  }  \n\u003E \u003E  VertexHeightMap  \n\u003E \u003E  {  \n\u003E \u003E  map = AlternisKerbol/Tylo/PluginData/Tylo\\_Height.png  \n\u003E \u003E  deformity = 21500  \n\u003E \u003E  enabled = true  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  Atmosphere  \n\u003E \u003E  {  \n\u003E \u003E  // effectively the ambient lighting color for all objects on the ground of this body (provides a slight tint)  \n\u003E \u003E  ambientColor = 0.175,0.15,0.15,1   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // sets the waveLength property in the AtmosphereFromGround component of the scaled version  \n\u003E \u003E  // From my picking around in the KSP assemblies, it seems this is fed to the shader in this way:  \n\u003E \u003E  //  \n\u003E \u003E  // shader.invWaveLength = Color( 1 / r^4, 1 / g^4, 1 / b^4, 0.5);  \n\u003E \u003E  //  \n\u003E \u003E  // Obviously the code for the shader is not available, and I don\u0027t feel like picking through ARB shader IL so we\u0027ll need  \n\u003E \u003E  // to figure this out experiementally.  \n\u003E \u003E  lightColor = 0.4632503906, 0.52200625, 0.55200625, 0.5  \n\u003E \u003E   \n\u003E \u003E  AtmosphereFromGround  \n\u003E \u003E  {  \n\u003E \u003E  outerRadiusMult = 1.032  \n\u003E \u003E  innerRadiusMult = 0.958  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // General atmosphere settings  \n\u003E \u003E  enabled = true  \n\u003E \u003E  oxygen = False  \n\u003E \u003E  altitude = 80000.0  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // Atmosphere Pressure  \n\u003E \u003E  // Values for pressure and temperature created with the handy-dandy Atmosphere Calculator by KillAshley  \n\u003E \u003E  // pressure (in atm) = multipler \\* e ^ -(altitude / (scaleHeight \\* 1000))  \n\u003E \u003E  pressureCurve  \n\u003E \u003E  {  \n\u003E \u003E  key = 0 56.13405 -5.90216365E-03 -5.90216365E-03  \n\u003E \u003E  key = 4000 32.5253954 -4.803547025E-03 -4.803547025E-03  \n\u003E \u003E  key = 8000 17.7056738 -2.9398841E-03 -2.9398841E-03  \n\u003E \u003E  key = 12000 9.0063226 -1.6466819E-03 -1.6466819E-03  \n\u003E \u003E  key = 16000 4.5322186 -8.40161775E-04 -8.40161775E-04  \n\u003E \u003E  key = 20000 2.2850284 -4.206522E-04 -4.206522E-04  \n\u003E \u003E  key = 24000 1.167001 -2.10499225E-04 -2.10499225E-04  \n\u003E \u003E  key = 28000 0.6010346 -1.061464E-04 -1.061464E-04  \n\u003E \u003E  key = 32000 0.3178298 -5.36272E-05 -5.36272E-05  \n\u003E \u003E  key = 36000 0.172017 -2.76446E-05 -2.76446E-05  \n\u003E \u003E  key = 40000 0.096673 -1.4632525E-05 -1.4632525E-05  \n\u003E \u003E  key = 44000 0.0549568 -8.039925E-06 -8.039925E-06  \n\u003E \u003E  key = 48000 0.0323536 -4.5705E-06 -4.5705E-06  \n\u003E \u003E  key = 52000 0.0183928 -2.763075E-06 -2.763075E-06  \n\u003E \u003E  key = 56000 0.010249 -1.613525E-06 -1.613525E-06  \n\u003E \u003E  key = 60000 0.0054846 -9.21025E-07 -9.21025E-07  \n\u003E \u003E  key = 64000 0.0028808 -5.05525E-07 -5.05525E-07  \n\u003E \u003E  key = 68000 0.0014404 -2.70075E-07 -2.70075E-07  \n\u003E \u003E  key = 72000 0.0007202 -1.5235E-07 -1.5235E-07  \n\u003E \u003E  key = 76000 0.0002216 -9.0025E-08 -9.0025E-08  \n\u003E \u003E  key = 80000 0 -5.54E-08 -5.54E-08  \n\u003E \u003E  }  \n\u003E \u003E  temperatureCurve  \n\u003E \u003E  {  \n\u003E \u003E  key = 0 279.19 -0.00802083375 -0.00802083375  \n\u003E \u003E  key = 9600 205.8567917 -0.0011360735 -0.0011325715  \n\u003E \u003E  key = 16800 205.8567917 0.0011325715 0.0011325715  \n\u003E \u003E  key = 24800 258.2376548 0.000619018 0.000619018  \n\u003E \u003E  key = 44800 258.2376548 -0.000853660375 -0.000853660375  \n\u003E \u003E  key = 64000 178.2377912 -0.0011360735 -0.0011360735  \n\u003E \u003E  key = 72000 178.2377912 0.000592218125 0.000592218125  \n\u003E \u003E  key = 80000 219.1901023 0.000868255125 0.000868255125  \n\u003E \u003E  key = 120000 0 -0.000562011375 -0.000562011375  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // Atmosphere Temperature  \n\u003E \u003E  temperatureMultiplier = 1.0  \n\u003E \u003E  atmosphereMolarMass = 0.022  \n\u003E \u003E  }  \n\u003E \u003E  @Orbit  \n\u003E \u003E  {  \n\u003E \u003E  // Moves Tylo to Duna\u0027s position in space.  \n\u003E \u003E  // -- Note the \u0022@\u0022 on the front of referenceBody. This means edit an existing attribute  \n\u003E \u003E  @referenceBody = Sun  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // Other orbit stuff  \n\u003E \u003E  inclination = 1.22  \n\u003E \u003E  eccentricity = 0.03  \n\u003E \u003E  semiMajorAxis = 24708887045  \n\u003E \u003E  longitudeOfAscendingNode = 0  \n\u003E \u003E  argumentOfPeriapsis = 0  \n\u003E \u003E  meanAnomalyAtEpoch = 3.14  \n\u003E \u003E  epoch = 0  \n\u003E \u003E  color = RGBA(102, 63.75, 38.25, 255)  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E @Kopernicus:FOR[AlternisKerbol]:NEEDS[GalacticNeighborhood]  \n\u003E \u003E {  \n\u003E \u003E  @Body[Tylo]  \n\u003E \u003E  {  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  description = Stumbos is one of the largest rocky planets on record. With a very thin atmosphere and a very high gravity, it would be quite the challenge to land on. Not enough air to slow you down, and so much air that you have to worry about re-entry heating. Luckily engineers won\u0027t have to worry about landing on it, because it is a distant planet lightyears away.  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E     // Apply this patch after the Kopernicus mod is loaded\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E And Duna:\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E @Kopernicus:FOR[AlternisKerbol]  \n\u003E \u003E {  \n\u003E \u003E  // We want to make Duna orbit Tylo  \n\u003E \u003E  @Body[Duna]  \n\u003E \u003E  {  \n\u003E \u003E   \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  tidallyLocked = true  \n\u003E \u003E  description = Also known as The Butterscotch Dot Next To Tylo, Duna has been a wonder to Kerbalkind for quite some time after its discovery. It was the first secondary planet to be discovered around a primary planet other than Jool. If it does have life on it, it is probably butterscotch flavoured.  \n\u003E \u003E  }  \n\u003E \u003E  Debug  \n\u003E \u003E  {  \n\u003E \u003E  exportBin = false  \n\u003E \u003E  }  \n\u003E \u003E  @Template  \n\u003E \u003E  {  \n\u003E \u003E  removePQSMods = VertexColorMapBlend,PQSLandControl  \n\u003E \u003E  }  \n\u003E \u003E  @ScaledVersion  \n\u003E \u003E  {  \n\u003E \u003E  Material  \n\u003E \u003E  {  \n\u003E \u003E  texture = AlternisKerbol/Duna/Textures/Duna\\_Color  \n\u003E \u003E  normals = AlternisKerbol/Duna/Textures/Duna\\_Normal  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  @PQS  \n\u003E \u003E  {  \n\u003E \u003E  Mods  \n\u003E \u003E  {  \n\u003E \u003E  VertexColorSolid  \n\u003E \u003E  {  \n\u003E \u003E  //Thanks Probus  \n\u003E \u003E  blend = 0.0  \n\u003E \u003E  //color = 0.01, 0.01, 0.01, 1.0  \n\u003E \u003E  color = 0.1, 0.01, 0.01, 0.0  \n\u003E \u003E  order = 19  \n\u003E \u003E  }  \n\u003E \u003E  VertexSimplexNoiseColor  \n\u003E \u003E  {  \n\u003E \u003E  seed = 45  \n\u003E \u003E  blend = 0.5  \n\u003E \u003E  colorStart = 0,0,0,0  \n\u003E \u003E  //colorEnd = 1,1,1,1  \n\u003E \u003E  colorEnd = 0,0,0,0  \n\u003E \u003E  octaves = 12.0  \n\u003E \u003E  persistence = 0.7  \n\u003E \u003E  frequency = 2.0  \n\u003E \u003E  enabled = true  \n\u003E \u003E  order = 9999994  \n\u003E \u003E  }  \n\u003E \u003E  VertexColorMap  \n\u003E \u003E  {  \n\u003E \u003E  map = AlternisKerbol/Duna/Textures/Duna\\_Color.png  \n\u003E \u003E  enabled = true  \n\u003E \u003E  }  \n\u003E \u003E  VertexHeightMap  \n\u003E \u003E  {  \n\u003E \u003E  map = AlternisKerbol/Duna/PluginData/Duna\\_Height.png  \n\u003E \u003E  deformity = 11000  \n\u003E \u003E  enabled = true  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  @Orbit  \n\u003E \u003E  {  \n\u003E \u003E  @referenceBody = Tylo  \n\u003E \u003E  semiMajorAxis = 34598850  \n\u003E \u003E  inclination = 0.7  \n\u003E \u003E  eccentricity = 0.05  \n\u003E \u003E  longitudeOfAscendingNode = 135.5  \n\u003E \u003E  argumentOfPeriapsis = 0  \n\u003E \u003E  meanAnomalyAtEpoch = 3.14  \n\u003E \u003E  epoch = 0  \n\u003E \u003E  color = RGBA(255, 185, 123, 255)  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Kopernicus:FOR[AlternisKerbol]:NEEDS[GalacticNeighborhood]  \n\u003E \u003E {  \n\u003E \u003E  @Body[Duna]  \n\u003E \u003E  {  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  %description = Egar is a medium-sized moon orbiting Stumbos. It is colored a nice butterscotch color. It may very well hold life on its surface somewhere, because there\u0027s definitely some canalis. Maybe. It looks decently canal-like for sure. Hard to tell at this distance.  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E     // Apply this patch after the Kopernicus mod is loaded\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E And the template:\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \u003E // Requires SigmaBinary 1.1.1 //  \n\u003E \u003E  //////////////////////////////////  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  //////////////////////////////////////////////////////////////////////  \n\u003E \u003E  // Forum Thread: http://forum.kerbalspaceprogram.com/threads/127820 //  \n\u003E \u003E //////////////////////////////////////////////////////////////////////  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E   \n\u003E \u003E  // INSTRUCTIONS:  \n\u003E \u003E  // Copy this cfg anywhere into the GameData folder  \n\u003E \u003E  // Set the name of the two bodies you want to turn into a binary system plus the reference body  \n\u003E \u003E   \n\u003E \u003E  @Body[Tylo] // Put here the name of the heavies body (eg: Pluto)  \n\u003E \u003E  {  \n\u003E \u003E  SigmaBinary = Primary // Don\u0027t change this line  \n\u003E \u003E  }  \n\u003E \u003E  @Body[Duna] // Put here the name of the lightest body (eg: Charon)  \n\u003E \u003E  {  \n\u003E \u003E  SigmaBinary = Secondary // Don\u0027t change this line  \n\u003E \u003E  }  \n\u003E \u003E  @Body[PARENT\\_NAME\\_HERE] // Put here the name of the body around which your binary system orbits (eg: Sun)  \n\u003E \u003E  {  \n\u003E \u003E  SigmaBinary = Reference // Don\u0027t change this line  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // Now sit back and enjoy your binary system  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // Sigma  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  ////////////////////////////////////////////  \n\u003E \u003E  // You don\u0027t need to read past this point //  \n\u003E \u003E ////////////////////////////////////////////  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // This part checks for a Finalize node inside Kopernicus  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Kopernicus:HAS[@Finalize]:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  @Finalize:HAS[#finalizeOrbits[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  SigmaFinalize = True  \n\u003E \u003E  }  \n\u003E \u003E  @Finalize:HAS[~finalizeOrbits[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  SigmaFinalize = False  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E @Kopernicus:HAS[!Finalize]:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  Finalize  \n\u003E \u003E  {  \n\u003E \u003E  SigmaFinalize = False  \n\u003E \u003E  removeFinalize = True  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // This part creates the barycenter  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  \u002BBody[SigmaBarycenter]  \n\u003E \u003E  {  \n\u003E \u003E  SigmaBinary = Barycenter  \n\u003E \u003E  @name = #$/Body:HAS[#SigmaBinary[Primary]]/name$$/Body:HAS[#SigmaBinary[Secondary]]/name$  \n\u003E \u003E  #/Body:HAS[#SigmaBinary[Primary]]/Orbit {}  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  SigmaFinalize = #$/Finalize/SigmaFinalize$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E // This part sets the Primary body  \n\u003E \u003E   \n\u003E \u003E  @Body:HAS[#SigmaBinary[Primary]]  \n\u003E \u003E  {  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  %solarRotationPeriod = false  \n\u003E \u003E  SigmaFinalize = #$/Finalize/SigmaFinalize$  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  // Calculate the temporary SoI (only if it\u0027s not already explicitly set)  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E  @Properties:HAS[~sphereOfInfluence  \n\u003E \u003E [\\*]]  \n\u003E \u003E  {  \n\u003E \u003E  sphereOfInfluence = #$mass$  \n\u003E \u003E  @sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$  \n\u003E \u003E  @sphereOfInfluence != 0.4  \n\u003E \u003E  @sphereOfInfluence \\*= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  minSoI = 1  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // Fixes the SoI if it\u0027s too small  \n\u003E \u003E   \n\u003E \u003E  @Properties:HAS[#minSoI[1]]  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI = #$radius$  \n\u003E \u003E  @minSoI \\*= 2  \n\u003E \u003E  @minSoI -= #$radius$  \n\u003E \u003E  @minSoI -= 40000   \n\u003E \u003E  }  \n\u003E \u003E  @Properties:[#minSoI[\u003E0]|#minSoI[0]]  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI \u002B= #$radius$  \n\u003E \u003E  @minSoI \u002B= 40000   \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#minSoI[\u003C0]]  \n\u003E \u003E  {  \n\u003E \u003E  %minSoI = #$radius$  \n\u003E \u003E  @minSoI \\*= 2  \n\u003E \u003E  }  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI -= #$sphereOfInfluence$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#minSoI[\u003E0]]  \n\u003E \u003E  {  \n\u003E \u003E  @sphereOfInfluence \u002B= #$minSoI$  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // Set orbital parameters  \n\u003E \u003E   \n\u003E \u003E  !Orbit {}  \n\u003E \u003E  #/Body:HAS[#SigmaBinary[Secondary]]/Orbit {}  \n\u003E \u003E  @Orbit  \n\u003E \u003E  {  \n\u003E \u003E  @color = #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/color$  \n\u003E \u003E  @referenceBody = #$/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E \u003E  @argumentOfPeriapsis \u002B= 180  \n\u003E \u003E   \n\u003E \u003E  // Set new semiMajorAxis  \n\u003E \u003E   \n\u003E \u003E  %semiMajorAxis = #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$  \n\u003E \u003E  @semiMajorAxis \u002B= #$../Properties/mass$  \n\u003E \u003E  @semiMajorAxis != -1  \n\u003E \u003E  @semiMajorAxis \\*= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$  \n\u003E \u003E  @semiMajorAxis \\*= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // This part changes the SoI of the Secondary body when it\u0027s too small or too big  \n\u003E \u003E  // If the original body have the SoI already explicitly set, this part won\u0027t change anything  \n\u003E \u003E   \n\u003E \u003E  @Body:HAS[#SigmaBinary[Secondary]]  \n\u003E \u003E  {  \n\u003E \u003E  @Properties:HAS[~sphereOfInfluence  \n\u003E \u003E [\\*]]  \n\u003E \u003E  {  \n\u003E \u003E  %sphereOfInfluence = #$mass$  \n\u003E \u003E  @sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$  \n\u003E \u003E  @sphereOfInfluence != 0.4  \n\u003E \u003E  @sphereOfInfluence \\*= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  %maxSoI = 1  \n\u003E \u003E  %minSoI = 1  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#minSoI[1]]  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI = #$radius$  \n\u003E \u003E  @minSoI \\*= 2  \n\u003E \u003E  @minSoI -= #$radius$  \n\u003E \u003E  @minSoI -= 40000   \n\u003E \u003E  }  \n\u003E \u003E  @Properties:[#minSoI[\u003E0]|#minSoI[0]]  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI \u002B= #$radius$  \n\u003E \u003E  @minSoI \u002B= 40000   \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#minSoI[\u003C0]]  \n\u003E \u003E  {  \n\u003E \u003E  %minSoI = #$radius$  \n\u003E \u003E  @minSoI \\*= 2  \n\u003E \u003E  }  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  @minSoI -= #$sphereOfInfluence$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#minSoI[\u003E0]]  \n\u003E \u003E  {  \n\u003E \u003E  @sphereOfInfluence \u002B= #$minSoI$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#maxSoI[1]]  \n\u003E \u003E  {  \n\u003E \u003E  @maxSoI -= #$../Orbit/eccentricity$  \n\u003E \u003E  @maxSoI \\*= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  @maxSoI -= #$radius$  \n\u003E \u003E  @maxSoI -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/radius$  \n\u003E \u003E  @maxSoI /= 2  \n\u003E \u003E  @maxSoI \u002B= #$radius$  \n\u003E \u003E  @maxSoI -= #$sphereOfInfluence$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#maxSoI[\u003C0]]  \n\u003E \u003E  {  \n\u003E \u003E  @sphereOfInfluence \u002B= #$maxSoI$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // This part sets Barycenter\u0027s mass, description and SoI  \n\u003E \u003E   \n\u003E \u003E  @Body:HAS[#SigmaBinary[Barycenter]]  \n\u003E \u003E  {  \n\u003E \u003E  @Properties:HAS[#SigmaFinalize[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  @mass \u002B= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E   \n\u003E \u003E  // Set description  \n\u003E \u003E   \n\u003E \u003E  description = #This is the Barycenter of the $/Body:HAS[#SigmaBinary[Primary]]/name$-$/Body:HAS[#SigmaBinary[Secondary]]/name$ System.  \n\u003E \u003E   \n\u003E \u003E  // Set mass  \n\u003E \u003E   \n\u003E \u003E  @mass \u002B= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$  \n\u003E \u003E  @mass \\*= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  @mass \\*= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  @mass \\*= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$  \n\u003E \u003E  @mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$  \n\u003E \u003E   \n\u003E \u003E  // Set Sphere of Influence  \n\u003E \u003E   \n\u003E \u003E  %sphereOfInfluence = #$/Body:HAS[#SigmaBinary[Primary]]/Properties/sphereOfInfluence$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#SigmaFinalize[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  @mass -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // This part:  \n\u003E \u003E  // Sets the final SoI value for the Primary Body  \n\u003E \u003E  // Calculates the correct rotation period if the body is tidallyLocked  \n\u003E \u003E   \n\u003E \u003E  @Body:HAS[#SigmaBinary[Primary]]  \n\u003E \u003E  {  \n\u003E \u003E   \n\u003E \u003E  // Set final SoI value  \n\u003E \u003E   \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  %sphereOfInfluence = #$../Orbit/eccentricity$  \n\u003E \u003E  @sphereOfInfluence \u002B= 1  \n\u003E \u003E  @sphereOfInfluence \\*= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  @sphereOfInfluence \u002B= #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/sphereOfInfluence$  \n\u003E \u003E  }  \n\u003E \u003E   \n\u003E \u003E  // If tidallyLocked fix the rotationPeriod  \n\u003E \u003E   \n\u003E \u003E  @Properties:HAS[#tidallyLocked[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  %rotationPeriod = 0  \n\u003E \u003E  }   \n\u003E \u003E  @Properties:HAS[#tidallyLocked[?rue],#SigmaFinalize[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  @rotationPeriod \u002B= #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/mass$  \n\u003E \u003E  }  \n\u003E \u003E  @Properties:HAS[#tidallyLocked[?rue]]  \n\u003E \u003E  {  \n\u003E \u003E  !tidallyLocked = DEL  \n\u003E \u003E  %rotates = true  \n\u003E \u003E  @rotationPeriod \u002B= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$  \n\u003E \u003E  @rotationPeriod /= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  @rotationPeriod /= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  @rotationPeriod /= #$../Orbit/semiMajorAxis$  \n\u003E \u003E  @rotationPeriod /= 5.91525585920849e11 // divide by (4\\*pi^2)/G  \n\u003E \u003E  @rotationPeriod != -0.5  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // This part adds an exception for ISRU contracts on the barycenter  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  @ISRU  \n\u003E \u003E  {  \n\u003E \u003E  @RESOURCE\\_REQUEST[Ore]  \n\u003E \u003E  {  \n\u003E \u003E  Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E // This part clears temporary stuff  \n\u003E \u003E   \n\u003E \u003E   \n\u003E \u003E @Kopernicus:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  @Body:HAS[#SigmaBinary  \n\u003E \u003E [\\*]]  \n\u003E \u003E  {  \n\u003E \u003E  !SigmaBinary = DEL  \n\u003E \u003E  @Properties  \n\u003E \u003E  {  \n\u003E \u003E  !minSoI = DEL  \n\u003E \u003E  !maxSoI = DEL  \n\u003E \u003E  !SigmaFinalize = DEL  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E  @Finalize:HAS[#SigmaFinalize  \n\u003E \u003E [\\*]]  \n\u003E \u003E  {  \n\u003E \u003E  !SigmaFinalize = DEL  \n\u003E \u003E  }  \n\u003E \u003E  !Finalize:HAS[#removeFinalize  \n\u003E \u003E [\\*]] {}  \n\u003E \u003E }\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E                           //////////////////////////////////\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \n\nyou don\u0027t have a PARENT\\_BODY set, you should put there the name of the body around which tylo rotates\n\n**Edited \u003Ctime datetime=\u00222015-10-23T23:51:01Z\u0022 title=\u002210/23/2015 11:51  PM\u0022 data-short=\u00228 yr\u0022\u003EOctober 23, 2015\u003C/time\u003E by Sigma88**"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-23T23:58:02Z","Content":"Ok oops My bad ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\n- - - Updated - - -\n\nActually looking at that is it possible to make the Sun binary with Jool without setting PARENT\\_BODY?\n\n- - - Updated - - -\n\nAnd now rotations messed up WITH PARENT\\_BODY set to Sun for TyloDuna binary.."},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-23T23:59:00Z","Content":"\u003E \n\u003E Ok oops My bad ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\u003E - - - Updated - - -\n\u003E \n\u003E Actually looking at that is it possible to make the Sun binary with Jool without setting PARENT\\_BODY?\n\nnope, the sun is a special body and cannot be moved easily. that\u0027s a KSP limitation.\n\nIt is actually possible to do a Sun-Jool binary, but using SigmaBinary is not enough ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-24T00:09:56Z","Content":"Ok good to know.\n\n- - - Updated - - -\n\nAnd by the way the binary system is fixed when putting @Kopernicus:NEEDS[sigmaBinary]:AFTER[sigmaBinary\u0026AlternisKerbol] in the binary cfg."},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-24T00:12:17Z","Content":"\u003E \n\u003E Ok good to know.\n\u003E - - - Updated - - -\n\u003E \n\u003E And by the way the binary system is fixed when putting @Kopernicus:NEEDS[sigmaBinary]:AFTER[sigmaBinary\u0026AlternisKerbol] in the binary cfg.\n\nthe standard :AFTER[sigmaBinary] should be fine since **A**lternisKerbol comes before than **S**igmaBinary"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-24T07:42:08Z","Content":"\u003E \n\u003E the standard :AFTER[sigmaBinary] should be fine since **A**lternisKerbol comes before than **S**igmaBinary\n\nIt might be because of where I put the files... template.cfg comes before AlternisKerbol/Tylo (folder). And template2.cfg comes after AlternisKerbol/Eeloo. Both were in the AlternisKerbol folder. AlternisKerbol also only had :FOR[AlternisKerbol] so it\u0027s definatly bad MM coding on my behalf ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-24T08:13:46Z","Content":"Just saying, I have contracts showing up for the barycenters... Fix?"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-24T11:27:25Z","Content":"\u003E \n\u003E Just saying, I have contracts showing up for the barycenters... Fix?\n\nI can\u0027t do anything about that. the current contract system doesn\u0027t allow you to exclude bodies from getting contracts\n\nor at least I was told it won\u0027t.\n\nIf anyone knows a way to remove contracts I\u0027ll be happy to implement it ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-24T11:35:29Z","Content":"In the template.cfg you disabled ISRU contracts for the barycentre. I think it was something like this:\n\n\u003E \n\u003E @Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E {  \n\u003E  @ISRU  \n\u003E  {  \n\u003E  @RESOURCE\\_REQUEST[Ore]  \n\u003E  {  \n\u003E  Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E  }  \n\u003E  }  \n\u003E }\n\u003E \n\u003E \n\u003E     // This part adds an exception for ISRU contracts on the barycenter\n\u003E \n\u003E \n\u003E \n\nEDIT: Couldn\u0027t you:\n\n\u003E \n\u003E @Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E {  \n\u003E  @Whatever contract you need  \n\u003E  {  \n\u003E  Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E  }  \n\u003E }\n\u003E \n\u003E \n\u003E     // This part adds an exception for ISRU contracts on the barycenter\n\u003E \n\u003E \n\u003E \n\n**Edited \u003Ctime datetime=\u00222015-10-24T11:40:30Z\u0022 title=\u002210/24/2015 11:40  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 24, 2015\u003C/time\u003E by RA3236**"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-25T11:21:29Z","Content":"\u003E \n\u003E In the template.cfg you disabled ISRU contracts for the barycentre. I think it was something like this:\n\u003E \n\u003E \n\u003E \n\u003E \u003E \n\u003E \u003E @Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  @ISRU  \n\u003E \u003E  {  \n\u003E \u003E  @RESOURCE\\_REQUEST[Ore]  \n\u003E \u003E  {  \n\u003E \u003E  Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E \u003E  }  \n\u003E \u003E  }  \n\u003E \u003E }\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E     // This part adds an exception for ISRU contracts on the barycenter\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E \n\u003E \n\u003E \n\u003E EDIT: Couldn\u0027t you:\n\u003E \n\u003E \n\u003E \n\u003E \n\u003E \u003E \n\u003E \u003E @Contracts:NEEDS[SigmaBinary]:AFTER[SigmaBinary]  \n\u003E \u003E {  \n\u003E \u003E  @Whatever contract you need  \n\u003E \u003E  {  \n\u003E \u003E  Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$  \n\u003E \u003E  }  \n\u003E \u003E }\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E     // This part adds an exception for ISRU contracts on the barycenter\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E\n\nI could add that line, but I don\u0027t think ksp will look for that when generating contracts"},{"CreatedByName":"iliketrains0pwned","CreatedById":95370,"CreatedDateTime":"2015-10-26T13:24:14Z","Content":"I need some help with kopernicus binary. I typed up the code for it, and it seems like it should work. But I don\u0027t know where to put the config file. Should it be put next to the system file for the mod or combined with the coding for the two orbiting bodies?"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-26T14:19:18Z","Content":"\u003E \n\u003E I need some help with kopernicus binary. I typed up the code for it, and it seems like it should work. But I don\u0027t know where to put the config file. Should it be put next to the system file for the mod or combined with the coding for the two orbiting bodies?\n\nIt doesn\u0027t matter where you put the .cfg file, it should work as long as you put it anywhere in the GameData folder.\n\nif you are having troubles pm me the .cfg you are using and I may be able to help"},{"CreatedByName":"RA3236","CreatedById":150734,"CreatedDateTime":"2015-10-27T07:49:30Z","Content":"\u003E \n\u003E It doesn\u0027t matter where you put the .cfg file, it should work as long as you put it anywhere in the GameData folder.\n\u003E if you are having troubles pm me the .cfg you are using and I may be able to help\n\nFor MM issues make it load before your planets to avoid issues. It was the one issue I found with MM and is easily fixed by doing so."},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-27T09:54:28Z","Content":"\u003E \n\u003E For MM issues make it load before your planets to avoid issues. It was the one issue I found with MM and is easily fixed by doing so.\n\nActually this is not correct.\n\nthe patch contained in the ***template.cfg*** needs to be applied **after** the planet is defined, otherwise it would not be able to read the parameters of that planet ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\nfor this reason I made the patch apply at:\n\n**:AFTER[sigmaBinary]**\n\nThis means that your planet needs to be created before that checkpoint.\n\nusually planet packs use **:AFTER[Kopernicus]** which is fine.\n\nthe position of the file inside GameData has almost nothing to do with when the patch is applied.\n\nof course if there are other configs that apply at the checkpoint **:AFTER[sigmaBinary]** the position will define which one is applied first.\n\nBut that should not affect the result, unless you are trying to nest binaries one into another."},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-28T16:37:43Z","Content":"A new version (v1.2.0) will be released soon.\n\nOld ***template.cfg*** files (from v1.1.1) should be compatible with this new version, but will not benefit of the [**GalacticNeighborhood**](https://forum.kerbalspaceprogram.com/threads/128856) **** compatibility (which will be added in 1.2.0)"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-30T00:46:51Z","Content":"***Sigma Binary******[v1.2.1]*** ***is now available***\n\n**Download**\n\n[TABLE=width: 145]\n\n[TR]\n\n[TD=align: center]\n\n**Latest Release**\n\n[TABLE=width: 90]\n\n[TR]\n\n[TD][![a7Abccw.png](http://i.imgur.com/a7Abccw.png)](https://github.com/Sigma88/Sigma-Binary/releases/latest)\n**@GitHub**\n\n[/TD]\n\n[/TR]\n\n[/TABLE]\n\n[/TD]\n\n[/TR]\n\n[/TABLE]\n\n**ChangeLog**\n\n[TABLE=width: 700]\n\n[TR]\n\n[TD]\n\n    [B]v1.2.1[/B]- Bug Hotfix[B]v1.2.0[/B]- Improved definition of template parameters- Improved calculation of mass for planets- Improved compatibility with [URL=\u0022http://forum.kerbalspaceprogram.com/threads/128856\u0022][B]GalacticNeighborhood[/B][/URL]\n\n[/TD]\n\n[/TR]\n\n[/TABLE]\n\n**Edited \u003Ctime datetime=\u00222015-10-30T10:44:11Z\u0022 title=\u002210/30/2015 10:44  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 30, 2015\u003C/time\u003E by Sigma88**\n  \nhotfixed"},{"CreatedByName":"theersink","CreatedById":130163,"CreatedDateTime":"2015-10-30T03:54:46Z","Content":"I\u0027m getting a module manager config error in PluronKhato after installing the new version."},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-10-30T08:43:56Z","Content":"Could you please send me the KSP.log file (found in the ksp installation folder)\n\nAnd the module manager cache (found in the GameData folder)\n\nThanks for reporting ![:)](//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif)\n\n---edit---\n\nHOTFIXED\n\n**Edited \u003Ctime datetime=\u00222015-10-30T10:45:13Z\u0022 title=\u002210/30/2015 10:45  AM\u0022 data-short=\u00228 yr\u0022\u003EOctober 30, 2015\u003C/time\u003E by Sigma88**"},{"CreatedByName":"ProtoJeb21","CreatedById":153551,"CreatedDateTime":"2015-11-15T19:47:42Z","Content":"Hey, Sigma88, when will this plugin be updated for KSP 1.0.5? I\u0027m stuck with 0.90 for now, but I will be getting 1.0.5 off of Steam soon and I would LOVE to use Sigma Binary in some of my planet packs. I will probably use it for the Titan-like planet Anthe in my Othrys Planet Pack, which will eventually have a large moon based off of Enceladus. They would look really cool as a binary. Right now, though, Anthe is very buggy and that moon won\u0027t come until at least version 0.6.\n\n**Edited \u003Ctime datetime=\u00222015-11-15T19:54:04Z\u0022 title=\u002211/15/2015 07:54  PM\u0022 data-short=\u00228 yr\u0022\u003ENovember 15, 2015\u003C/time\u003E by ProtoJeb21**\n  \nForgot to put something"},{"CreatedByName":"Sigma88","CreatedById":113260,"CreatedDateTime":"2015-11-16T08:50:44Z","Content":"[quote name=\u0027ProtoJeb21\u0027]Hey, Sigma88, when will this plugin be updated for KSP 1.0.5? I\u0027m stuck with 0.90 for now, but I will be getting 1.0.5 off of Steam soon and I would LOVE to use Sigma Binary in some of my planet packs. I will probably use it for the Titan-like planet Anthe in my Othrys Planet Pack, which will eventually have a large moon based off of Enceladus. They would look really cool as a binary. Right now, though, Anthe is very buggy and that moon won\u0027t come until at least version 0.6.[/QUOTE]  \n\nI\u0027m waiting for kopernicus 0.5 to be released, plus I have some irl stuff to sort out that will keep me busy this week"},{"CreatedByName":"CaptRobau","CreatedById":41695,"CreatedDateTime":"2015-11-16T20:12:56Z","Content":"What needs to be updated any way? The orbital mechanics haven\u0027t changed, which is the only thing all these impressive MM configs concern themselves with. Right?"}]}