{"TopicId":88777,"ForumId":34,"TopicTitle":"[1.1.3] BackgroundProcessing","CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-10-28T18:40:42Z","PageNum":2,"Articles":[{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-05T01:39:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EThere\u0027s a big difference between the resource module data that I store and providing a generic per-module data store for other users - the resource module info isn\u0027t really associated with a given partmodule once I\u0027ve made it.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, fair enough. That wasn\u0027t apparent from my cursory examination of your code. I was under the impression you were storing the orientation of specific instances of panels and such, and thus assumed that an association to the actual module was maintained.\u003C/p\u003E\u003Cp\u003EHow about parts then? Do you have a clear association between the parts and the data that would then allow creation of such data stores on a per part per module *type* basis? I suspect that for my purposes anyways, that would be just as good.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIt has to persist across save/load because someone can close the game while a vessel is in the background and then open it again with the same vessel in the background.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot sure I get that one though. Wouldn\u0027t all your stored vessel data be reinitialized if that were to happen?\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIncidentally, as of right now FixedBackgroundUpdate isn\u0027t called once per PartModule on unloaded vessels. It\u0027s called once per PartModule type per part. So if a Part has two PartModules of the same type that both implement FixedBackgroundUpdate, FixedBackgroundUpdate will only get called /once/ on that partmodule type with that partFlightID. That\u0027s another one that\u0027s a result of trying to sidestep how tricky it is to keep ProtoPartSnapshot module lists in sync with Part module lists.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot sure if others would consider that a problem, but I can\u0027t really think of a circumstance where I would want to have multiple modules of the same type within a single part. Worst case, you could always loop through the individual instances within your FixedBackgroundUpdate function if you *really* needed to do something like that.\u003C/p\u003E\u003Cp\u003ETo me then, the above is definitely an acceptable compromise, and I definitely realize that compromises are an integral part of making something like this happen \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-05T01:43:27Z\u0022 title=\u002202/05/2015 01:43  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 5, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-05T01:48:25Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003EAh, fair enough. That wasn\u0027t apparent from my cursory examination of your code. I was under the impression you were storing the orientation of specific instances of panels and such, and thus assumed that an association to the actual module was maintained.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI just copy out the relevant information - for solar panels, charge rate, power curve, position and orientation, the normal that defines the \u0027live\u0027 side, the pivot axis, and whether or not it tracks. I cheat with tracking - I assume it always tracks fast enough to be in the optimal position (and that it can do that without intersecting other bits of the craft) and just pump out as much power as it would in that situation. Compromises, etc.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003ENot sure I get that one though. Wouldn\u0027t all your stored vessel data be reinitialized if that were to happen?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EOnly if the stored vessel data were written into the ConfigNode. If you were keeping a static collection of some kind with the data around, it wouldn\u0027t be restored, and you don\u0027t get a call you could use to save it. Unless you hooked a GameEvent I guess, but that\u0027s not a very clean solution.\u003C/p\u003E\u003Cp\u003EWhereas my addon will get a Save/Load, and I can call a function on your partmodule type to get you to save/load it.\u003C/p\u003E\u003Cp\u003EI guess the data could be stored per-partmodule type-per-part, like FixedBackgroundUpdate is currently called. That seems sensible. I\u0027ll look into implementation today.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003ENot sure if others would consider that a problem, but I can\u0027t really think of a circumstance where I would want to have multiple modules of the same type within a single part. Worst case, you could always loop through the individual instances within your FixedBackgroundUpdate function if you *really* needed to do something like that.\u003C/p\u003E\u003Cp\u003ETo me then, the above is definitely an acceptable compromise, and I definitely realize that compromises are an integral part of making something like this happen \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-05T01:51:09Z\u0022 title=\u002202/05/2015 01:51  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 5, 2015\u003C/time\u003E by jamespicone\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-05T02:17:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EI just copy out the relevant information - for solar panels, charge rate, power curve, position and orientation, the normal that defines the \u0027live\u0027 side, the pivot axis, and whether or not it tracks. I cheat with tracking - I assume it always tracks fast enough to be in the optimal position (and that it can do that without intersecting other bits of the craft) and just pump out as much power as it would in that situation. Compromises, etc.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYup, I noticed the cheating on the tracking which is certainly fine by me. If it were just for my own purposes I\u0027d probably even go more abstract and not consider orientation to cut down on overhead as BTSM vessels tend to be rather heavy on the number of solar panels \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EOnly if the stored vessel data were written into the ConfigNode. If you were keeping a static collection of some kind with the data around, it wouldn\u0027t be restored, and you don\u0027t get a call you could use to save it. Unless you hooked a GameEvent I guess, but that\u0027s not a very clean solution.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGotcha. Yeah, the data I\u0027m working with is straight out of the config node, so I\u0027m not really concerned with being able to save/load any changes I make during persistent updates (other than the actual resource amounts which you\u0027re taking care of in your code). I was considering doing something like that for my fuel processors though, so that I could just buffer the amount of all fuel produced, and then get it to flow into the appropriate tanks via crossfeed once the vessel becomes active again (since the fuel can\u0027t be used in the background anyways, there\u0027s no point trying to manage flow via crossfeed while it\u0027s inactive), so that\u0027s a good thing for me to know so I can make other plans there.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EI guess the data could be stored per-partmodule type-per-part, like FixedBackgroundUpdate is currently called. That seems sensible. I\u0027ll look into implementation today.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat would be quite awesome man. Thanks a bunch \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-06T03:15:42Z","Content":"\n\u003Cp\u003EThere\u0027s a new version of BackgroundProcessing up on KerbalStuff, with data persistence changes.\u003C/p\u003E\u003Cp\u003EThe big change is that now FixedBackgroundUpdate takes a System.Object by reference:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void FixedBackgroundUpdate(vessel v, uint partFlightId, ref System.Object data)\u003C/pre\u003E\u003Cp\u003E (and similar for the resource-handling version). That object persists across FixedBackgroundUpdate calls.\u003C/p\u003E\u003Cp\u003EAlso there\u0027s two new functions you may implement:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void BackgroundLoad(Vessel v, uint partFlightId, ref System.Object data)\u003C/pre\u003E\u003Cp\u003E Guaranteed to be called once before FixedBackgroundUpdate, gives you a chance to load whatever data you want out of the config nodes (you can also use a null \u0027data\u0027 as a flag in fixedbackgroundupdate for the same purpose)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void BackgroundSave(Vessel v, uint partFlightId, System.Object data)\u003C/pre\u003E\u003Cp\u003E Called during savefile creation, lets you persist background data to config nodes.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-06T05:12:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003ECalled during savefile creation, lets you persist background data to config nodes.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETotally awesome man. Thank you \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EOne question on the save: are any modifications performed to the config nodes contained within the vessel automatically saved, or do we have to handle that part on our end? Like for example if I have a persistent field within a ProtoPartModuleSnapshot, can I simply modify the field directly and then trust that it will be saved appropriately, or is there more to it than that?\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-06T05:23:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003ETotally awesome man. Thank you \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003Cp\u003EOne question on the save: are any modifications performed to the config nodes contained within the vessel automatically saved, or do we have to handle that part on our end? Like for example if I have a persistent field within a ProtoPartModuleSnapshot, can I simply modify the field directly and then trust that it will be saved appropriately, or is there more to it than that?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI just hook game scene changes (via GameEvents.onLevelWasLoaded) and game state saves (GameEvents.onGameStateSave). I *think* changes to the protovessel config should be persisted in those situations. If it isn\u0027t, I\u0027ll have to come up with something else.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-06T08:27:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void BackgroundLoad(Vessel v, uint partFlightId, ref System.Object data)\u003C/pre\u003E\u003Cp\u003E \u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EActually, looking at this a little more closely, maybe the syntax is eluding me here (I\u0027m primarily a C\u002B\u002B programmer rather than C#), but I can see no way of actually setting the data with the above.\u003C/p\u003E\u003Cp\u003ECould you possible provide a small use example here? As I\u0027m reading it, if you set System.Object to another object, you\u0027d only be doing so local to the function, and not actually setting it for storage in background. To my mind, for this to work, you\u0027d either have to return an object from this function and have the calling code then store the return value, or the data parameter would need to be some kind of reference to a reference that could then be set from within the function.\u003C/p\u003E\u003Cp\u003EOr is data actually already a reference to a reference given that parameters default to passing by reference in C#, rather than passing by value as happens in C\u002B\u002B?\u003C/p\u003E\u003Cp\u003EActually, in writing this, I suspect that\u0027s exactly what\u0027s happening here, but I\u0027d appreciate confirmation that I\u0027m interpreting the intended usage correctly. It\u0027s one of my pet peeves about C# the way the whole pass by reference or pass by value thing isn\u0027t required to be explicitly stated and differs between base types and objects \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-02-06T08:45:10Z","Content":"\n\u003Cp\u003EThe \u0022ref\u0022 keyword means that data is being passed by reference not by value. In this case though, wouldn\u0027t it make more sense to use \u0022out\u0022? (it\u0027s ref, but it makes it explicit that the value of \u0027data\u0027 going in won\u0027t be used inside the function)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T08:47:52Z\u0022 title=\u002202/06/2015 08:47  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-06T08:52:10Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003EThe \u0022ref\u0022 keyword means that data is being passed by reference not by value. \u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, I realize. But in C# any object as a parameter is essentially already a ref (they\u0027re all passed by reference, not value, unless you\u0027re passing a base type like an int) and thus I suspect by adding another \u0022ref\u0022 keyword on top of that, you\u0027re essentially creating a ref to a ref, allowing the function to essentially set the reference the calling code is using.\u003C/p\u003E\u003Cp\u003EI\u0027m pretty sure that jamespicone has it right here, as that\u0027s exactly what is needed in this situation so that you can create and set your own data object. As I said, my only confusion with it is likely the difference between how C\u002B\u002B and C# operate in that regard, as in C\u002B\u002B objects default to passing by value.\u003C/p\u003E\u003Cp\u003EIn C\u002B\u002B the equivalent code would look something like:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic static void BackgroundLoad(Vessel v, uint partFlightId, System.Object \u0026amp;\u0026amp;data)\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWith the \u0027\u0026amp;\u0027 being the equivalent of the \u0027ref\u0027 keyword in C#. But references to references don\u0027t even exist in C\u002B\u002B so you\u0027d likely be using a pointer to a pointer instead, but pointers don\u0027t exist in C# so you wouldn\u0027t be able to use that here. \u003C/p\u003E\u003Cp\u003EHopefully you can now see why I was a tad confused by this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T09:00:54Z\u0022 title=\u002202/06/2015 09:00  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-02-06T09:27:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003EHopefully you can now see why I was a tad confused by this \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EUgh, I think I got confused by your confusion \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_huh.gif\u0022 alt=\u0022:confused:\u0022\u003E\u003C/p\u003E\u003Cp\u003EIf I\u0027m reading you/it right, the System.Object is being used as a generic boxing of whatever object you\u0027re actually requesting because you know what type you\u0027re getting, but overloading is either tedious or impossible (if a non-standard object can be sent through data?)\u003C/p\u003E\u003Cp\u003EEDIT\u003C/p\u003E\u003Cp\u003EThis is just me being curious now. I\u0027ve never run into the need for a pointer to a pointer before so I\u0027m more wondering as to why it would be used.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T10:08:51Z\u0022 title=\u002202/06/2015 10:08  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by Crzyrndm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-06T10:35:04Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Crzyrndm\u0022 data-cite=\u0022Crzyrndm\u0022\u003E\u003Cdiv\u003EThis is just me being curious now. I\u0027ve never run into the need for a pointer to a pointer before so I\u0027m more wondering as to why it would be used.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFor exactly what it\u0027s being used for here with the ref to an object in C# \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_wink.gif\u0022 alt=\u0022;)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAny confusion here is stemming from layers of abstraction that have been introduced with each new generation of language. A pointer is just a variable containing an address in memory abstracted slightly so that it has an associated type (which was the only way to do it in C). A reference is just an abstracted pointer that makes things a little more convenient and less prone to error (which was introduced in C\u002B\u002B). An object passed in C# as a parameter is just an abstracted reference, and that was likely done so people wouldn\u0027t pass objects by value all the time when they didn\u0027t know any better, but it also tends to confuse geezers like me who are used to having to explicitly specify when something is a reference or pointer.\u003C/p\u003E\u003Cp\u003EThus, in passing a reference to an object in C# you\u0027re essentially passing a pointer to a pointer. You\u0027re allowing the called function to modify your original reference to that object (not just the contents of the object), and make it refer to something else entirely. With just a pointer to the object, you\u0027d be modifying the contents of the object in the function, but couldn\u0027t change which object the calling code was referring to.\u003C/p\u003E\u003Cp\u003EIn this case we want to be able to create a data object and tell BackgroundProcessing to hang onto it for us for later, so we want to specify an actual object, not just modify the contents of an existing one.\u003C/p\u003E\u003Cp\u003EWhat it all comes down to (and the way I think of it because I used to code in Assembly) is that you\u0027re passing an address in memory as a parameter, which points to another address in the calling code, that points to the object, so that the called function can change it to point to another object entirely.\u003C/p\u003E\u003Cp\u003EEDIT: Actually, here, I just wrote this up for my mod which is probably a better explanation of what\u0027s going on here than anything I\u0027ve said above:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static void BackgroundLoad( Vessel vessel, uint uiPartFlightID, ref System.Object customData )\u003Cbr\u003E        {\u003Cbr\u003E            bool bIsActive = false;\u003Cbr\u003E            float fEnergyConsumedRate = 0F;\u003Cbr\u003E\u003Cbr\u003E            ProtoPartSnapshot partSnapshot = GetProtoPartFromVessel( vessel, uiPartFlightID );\u003Cbr\u003E\u003Cbr\u003E            if ( partSnapshot != null )\u003Cbr\u003E            {\u003Cbr\u003E                ProtoPartModuleSnapshot moduleSnapshot = GetProtoModuleSnapshotFromPart( partSnapshot, \u0022BTSMModuleProbePower\u0022 );\u003Cbr\u003E\u003Cbr\u003E                if ( moduleSnapshot != null )\u003Cbr\u003E                {\u003Cbr\u003E                    Part partPrefab = PartLoader.getPartInfoByName( partSnapshot.partName ).partPrefab;\u003Cbr\u003E\u003Cbr\u003E                    if ( partPrefab != null )\u003Cbr\u003E                    {\u003Cbr\u003E                        if ( partPrefab.Modules != null )\u003Cbr\u003E                        {\u003Cbr\u003E                            if ( partPrefab.Modules.Contains( \u0022BTSMModuleProbePower\u0022 ) )\u003Cbr\u003E                            {\u003Cbr\u003E                                BTSMModuleProbePower modulePrefab = (BTSMModuleProbePower)partPrefab.Modules[\u0022BTSMModuleProbePower\u0022];\u003Cbr\u003E\u003Cbr\u003E                                if ( modulePrefab != null )\u003Cbr\u003E                                {\u003Cbr\u003E                                    bool bCoreDisabled = false;\u003Cbr\u003E                                    bool bCoreDamaged = false;\u003Cbr\u003E\u003Cbr\u003E                                    if ( bool.TryParse( moduleSnapshot.moduleValues.GetValue( \u0022coreDisabled\u0022 ), out bCoreDisabled ) \u0026amp;\u0026amp;\u003Cbr\u003E                                        bool.TryParse( moduleSnapshot.moduleValues.GetValue( \u0022m_bProbeDamaged\u0022 ), out bCoreDamaged ) )\u003Cbr\u003E                                    {\u003Cbr\u003E                                        bIsActive = !(bCoreDisabled || bCoreDamaged );\u003Cbr\u003E\u003Cbr\u003E                                        fEnergyConsumedRate = modulePrefab.energyConsumedRate;\u003Cbr\u003E                                    }\u003Cbr\u003E                                }\u003Cbr\u003E                            }\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            customData = new BTSMModuleProbePowerBackgroundUpdateData( bIsActive, fEnergyConsumedRate );\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EThe really important bit is that last line:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E            customData = new BTSMModuleProbePowerBackgroundUpdateData( bIsActive, fEnergyConsumedRate );\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENotice how I\u0027m creating a whole new object and setting customData to it, not just manipulating its internal values. That\u0027s essentially setting what object is being referred to in the calling code, not just locally within the function.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T11:05:17Z\u0022 title=\u002202/06/2015 11:05  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"FreeThinker","CreatedById":117389,"CreatedDateTime":"2015-02-06T11:06:08Z","Content":"\n\u003Cp\u003EIntresting, I hope it is flexible enough and doesn\u0027t require too much processing\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-06T20:05:19Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FreeThinker\u0022 data-cite=\u0022FreeThinker\u0022\u003E\u003Cdiv\u003EIntresting, I hope it is flexible enough and doesn\u0027t require too much processing\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFrom what I\u0027ve seen of its internals it\u0027s both extremely flexible (especially with the additions in the latest release), and the approach taken within the code is extremely well thought out, so while I do have my performance concerns, particularly where large numbers of solar panels are involved, I think if any method is likely to resolve this issue in a performance friendly way, this is likely it. It\u0027s obvious from the code that it was architected with performance in mind.\u003C/p\u003E\u003Cp\u003EIt\u0027s a bit of a shame IMO that this thread has received so little attention the past couple of months. I was planning on checking this out for awhile now but had other things to get off my plate before doing so.\u003C/p\u003E\u003Cp\u003EBTW James, on the above, I really think it would help the visibility of the mod greatly if the OP here in this thread were more robust. I can definitely appreciate you not wanting to essentially duplicate code by having the instructions for use in two places and thus having to maintain both, but in this case I think it would really be worth the hassle if you\u0027re hoping for this system to gain wider acceptance amongst modders.\u003C/p\u003E\u003Cp\u003EI know myself, I was originally linked to the thread here, took one look at the OP and its brevity and thought \u0022ok...this isn\u0027t serious\u0022. I almost walked away from it entirely as a result but then thought better of it and decided to check the Kerbal Stuff page almost on a whim. I\u0027m very glad that I took the time to do so as it became immediately apparent that my first impressions were not at all accurate when I saw your callback system.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-06T20:11:45Z\u0022 title=\u002202/06/2015 08:11  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 6, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T00:20:59Z","Content":"\n\u003Cp\u003EYeah, the \u0027ref\u0027 keyword here is the equivalent of \u0026amp; in C\u002B\u002B (which I also program in primarily, incidentally!)\u003C/p\u003E\u003Cp\u003E\u0027out\u0027 might have been more appropriate for the load function, but I\u0027m already using ref for FixedBackgroundUpdate (where it does make sense - you need to take the passed value and possibly mutate the reference), so I figured for consistency I\u0027d use \u0027ref\u0027 for load.\u003C/p\u003E\u003Cp\u003EI\u0027ll duplicate the KerbalStuff explanation into this post.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EIf I\u0027m reading you/it right, the System.Object is being used as a generic boxing of whatever object you\u0027re actually requesting because you know what type you\u0027re getting, but overloading is either tedious or impossible (if a non-standard object can be sent through data?)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe reason it\u0027s a System.Object is because the API for background processing is entirely reflection-based - people using it don\u0027t need to include a reference to the DLL, and their code will work fine without it being present, it just won\u0027t do background processing. Because they can\u0027t refer to me, and I can\u0027t refer to them, a generic box is all we\u0027ve got.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T00:57:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EYeah, the \u0027ref\u0027 keyword here is the equivalent of \u0026amp; in C\u002B\u002B (which I also program in primarily, incidentally!)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHehe...I suspected you might be a C\u002B\u002B programmer actually, as I don\u0027t think I\u0027ve ever seen C# code that makes such extensive use of what basically amounts to pointers to functions and such. I actually learned a fair amount of C# syntax I wasn\u0027t aware of through perusing your code, so I really appreciate all this on the level of being a learning experience as well \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T04:07:34Z","Content":"\n\u003Cp\u003EHmmm...something appears to have gone amiss with version 4.0.\u003C/p\u003E\u003Cp\u003ENone of the following functions seem to be being called within my part module:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static void BackgroundLoad( Vessel vessel, uint uiPartFlightID, ref System.Object customData )\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: background load for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, ref System.Object data)\u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: simple persistant update for \u0022 \u002B v.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiPartFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc, ref System.Object customData )        \u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Persistant update for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENo debug output is generated, and while I\u0027ve trimmed down the above to only list the log output at the start, the code that follows to drain power in the background isn\u0027t triggering either.\u003C/p\u003E\u003Cp\u003EI only included the simple form of FixedBackgroundUpdate() in there as I wanted to test if it was just a problem with the complex form, but neither seem to be called.\u003C/p\u003E\u003Cp\u003EFull code for the module below:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace BTSM\u003Cbr\u003E{\u003Cbr\u003E    [KSPModule( \u0022Probe Core\u0022 )]\u003Cbr\u003E    class BTSMModuleProbePower : BTSMPartModule\u003Cbr\u003E    {\u003Cbr\u003E        private static int m_iNumOutOfEnergyUpdatesForDamage = 20;\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = false )]\u003Cbr\u003E        public float energyConsumedRate = 0.16666668F; // default is same as Stayputnik (6X a stock probe core)\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = false )]\u003Cbr\u003E        public bool canBeDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = true )]\u003Cbr\u003E        public bool m_bProbeDamaged = false; // persistant variable to track if the probe has been damaged by lack of power\u003Cbr\u003E\u003Cbr\u003E        private float m_fEnergyRequiredLeftovers = 0F; // variable to store any energy remnants required which haven\u0027t been consumed on a previous update\u003Cbr\u003E        private int m_iOutOfEnergyUpdateCount = 0; // acts as buffer to prevent momentary power supply problems due to vanilla bugs causing probe cores to fail\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = \u0022Probe Core\u0022), UI_Toggle( disabledText=\u0022Enabled\u0022, enabledText=\u0022Disabled\u0022 )]\u003Cbr\u003E        public bool coreDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        public bool m_bPreviousCoreDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPAction( \u0022Toggle Probe Core\u0022 )]\u003Cbr\u003E        public void ToggleProbeCoreAction( KSPActionParam param )\u003Cbr\u003E        {\u003Cbr\u003E            if ( vessel != null \u0026amp;\u0026amp; vessel.IsControllable \u0026amp;\u0026amp; canBeDisabled )\u003Cbr\u003E            {\u003Cbr\u003E                coreDisabled = !coreDisabled;\u003Cbr\u003E\u003Cbr\u003E                RefreshAssociatedWindows();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart( StartState state )\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E            // FCTEST:\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Start()\u0022 );\u003Cbr\u003E\u003Cbr\u003E            if ( !m_bInEditor )\u003Cbr\u003E            {\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    DamageAssociatedProbeCore();\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    SetProbeCoreDeactivated( coreDisabled );\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                BaseField coreEnabledField = Fields[\u0022coreDisabled\u0022];\u003Cbr\u003E\u003Cbr\u003E                if ( coreEnabledField != null )\u003Cbr\u003E                {\u003Cbr\u003E                    coreEnabledField.guiActive = canBeDisabled;\u003Cbr\u003E                    coreEnabledField.guiActiveEditor = canBeDisabled;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            m_bPreviousCoreDisabled = coreDisabled;\u003Cbr\u003E            m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E            m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            base.FixedUpdate();\u003Cbr\u003E\u003Cbr\u003E            // FCTEST:\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Fixed Update\u0022 );\u003Cbr\u003E\u003Cbr\u003E            if ( !m_bInEditor )\u003Cbr\u003E            {\u003Cbr\u003E                bool bShouldGUIBeActive = canBeDisabled;\u003Cbr\u003E\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    bShouldGUIBeActive = false;\u003Cbr\u003E                }\u003Cbr\u003E                else \u003Cbr\u003E                {\u003Cbr\u003E                    if ( m_bPreviousCoreDisabled != coreDisabled )\u003Cbr\u003E                    {\u003Cbr\u003E                        SetProbeCoreDeactivated( coreDisabled );\u003Cbr\u003E\u003Cbr\u003E                        m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E                        m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    if ( !coreDisabled )\u003Cbr\u003E                    {\u003Cbr\u003E                        if ( !AttemptToDeductEnergyForUse() )\u003Cbr\u003E                        {\u003Cbr\u003E                            if ( !canBeDisabled )\u003Cbr\u003E                            {\u003Cbr\u003E                                DamageAssociatedProbeCore();\u003Cbr\u003E\u003Cbr\u003E                                bShouldGUIBeActive = false;\u003Cbr\u003E                            }\u003Cbr\u003E                            else\u003Cbr\u003E                            {\u003Cbr\u003E                                coreDisabled = true;\u003Cbr\u003E\u003Cbr\u003E                                SetProbeCoreDeactivated( true );\u003Cbr\u003E\u003Cbr\u003E                                ScreenMessages.PostScreenMessage( part.partInfo.title \u002B \u0022 shut itself down due to lack of power.\u0022, 10F, ScreenMessageStyle.UPPER_CENTER );\u003Cbr\u003E\u003Cbr\u003E                                m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E                                m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E                            }\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    else if ( !vessel.IsControllable )\u003Cbr\u003E                    {\u003Cbr\u003E                        bShouldGUIBeActive = false;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                BaseField coreEnabledField = Fields[\u0022coreDisabled\u0022];\u003Cbr\u003E\u003Cbr\u003E                if ( coreEnabledField != null )\u003Cbr\u003E                {\u003Cbr\u003E                    if ( coreEnabledField.guiActive != bShouldGUIBeActive )\u003Cbr\u003E                    {\u003Cbr\u003E                        coreEnabledField.guiActive = bShouldGUIBeActive;\u003Cbr\u003E\u003Cbr\u003E                        RefreshAssociatedWindows();\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                UpdateStateString();\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            m_bPreviousCoreDisabled = coreDisabled;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private bool AttemptToDeductEnergyForUse()\u003Cbr\u003E        {\u003Cbr\u003E            return ConsumeResourceReliable( \u0022ElectricCharge\u0022, energyConsumedRate, m_iNumOutOfEnergyUpdatesForDamage, ref m_iOutOfEnergyUpdateCount, ref m_fEnergyRequiredLeftovers );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void DamageAssociatedProbeCore()\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                associatedCommandModule.minimumCrew = 1;\u003Cbr\u003E\u003Cbr\u003E                if ( !m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    m_bProbeDamaged = true;\u003Cbr\u003E\u003Cbr\u003E                    ScreenMessages.PostScreenMessage( part.partInfo.title \u002B \u0022 was damaged due to lack of power.\u0022, 10F, ScreenMessageStyle.UPPER_CENTER );\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void SetProbeCoreDeactivated( bool bDeactivated )\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                if ( bDeactivated )\u003Cbr\u003E                {\u003Cbr\u003E                    associatedCommandModule.minimumCrew = 1;\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    associatedCommandModule.minimumCrew = 0;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateStateString()\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                string sDesiredStateString = \u0022Operational\u0022;\u003Cbr\u003E\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    sDesiredStateString = \u0022Damaged\u0022;\u003Cbr\u003E                }\u003Cbr\u003E                else if ( coreDisabled )\u003Cbr\u003E                {\u003Cbr\u003E                    sDesiredStateString = \u0022Disabled\u0022;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                associatedCommandModule.controlSrcStatusText = sDesiredStateString;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private ModuleCommand FindAssociatedCommandModule()\u003Cbr\u003E        {\u003Cbr\u003E            return (ModuleCommand)FindAssociatedModuleOfType( \u0022ModuleCommand\u0022 );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override string GetInfo()\u003Cbr\u003E        {\u003Cbr\u003E            string sDescString =\u003Cbr\u003E                \u0022\u0026lt;b\u0026gt;\u0026lt;color=#99ff00ff\u0026gt;Requires:\u0026lt;/color\u0026gt;\u0026lt;/b\u0026gt;\\n\u0022 \u002B \u003Cbr\u003E                \u0022- \u0026lt;b\u0026gt;Electric Charge: \u0026lt;/b\u0026gt;\u0022 \u002B FormatRateString( energyConsumedRate ) \u002B \u0022\\n\u0022;\u003Cbr\u003E\u003Cbr\u003E            if ( canBeDisabled )\u003Cbr\u003E            {\u003Cbr\u003E                sDescString \u002B= \u0022\\n\u0026lt;b\u0026gt;Can Be Safely Powered Down\u0026lt;/b\u0026gt;\\n\u0022;\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                sDescString \u002B= \u0022\\n\u0026lt;b\u0026gt;WARNING: Requires constant power to avoid damage\u0026lt;/b\u0026gt;\\n\u0022;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            return sDescString;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        /*-----------------[ Background Processing Handling ]----------------------------------------------*/\u003Cbr\u003E\u003Cbr\u003E        public static void BackgroundLoad( Vessel vessel, uint uiPartFlightID, ref System.Object customData )\u003Cbr\u003E        {\u003Cbr\u003E            // FCTEST\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: background load for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E\u003Cbr\u003E            bool bIsActive = false;\u003Cbr\u003E            float fEnergyConsumedRate = 0F;\u003Cbr\u003E\u003Cbr\u003E            ProtoPartSnapshot partSnapshot = BTSMUtils.GetProtoPartFromVessel( vessel, uiPartFlightID );\u003Cbr\u003E\u003Cbr\u003E            if ( partSnapshot != null )\u003Cbr\u003E            {\u003Cbr\u003E                ProtoPartModuleSnapshot moduleSnapshot = BTSMUtils.GetProtoModuleSnapshotFromPart( partSnapshot, \u0022BTSMModuleProbePower\u0022 );\u003Cbr\u003E\u003Cbr\u003E                if ( moduleSnapshot != null )\u003Cbr\u003E                {\u003Cbr\u003E                    Part partPrefab = PartLoader.getPartInfoByName( partSnapshot.partName ).partPrefab;\u003Cbr\u003E\u003Cbr\u003E                    if ( partPrefab != null )\u003Cbr\u003E                    {\u003Cbr\u003E                        if ( partPrefab.Modules != null )\u003Cbr\u003E                        {\u003Cbr\u003E                            if ( partPrefab.Modules.Contains( \u0022BTSMModuleProbePower\u0022 ) )\u003Cbr\u003E                            {\u003Cbr\u003E                                BTSMModuleProbePower modulePrefab = (BTSMModuleProbePower)partPrefab.Modules[\u0022BTSMModuleProbePower\u0022];\u003Cbr\u003E\u003Cbr\u003E                                if ( modulePrefab != null )\u003Cbr\u003E                                {\u003Cbr\u003E                                    bool bCoreDisabled = false;\u003Cbr\u003E                                    bool bCoreDamaged = false;\u003Cbr\u003E\u003Cbr\u003E                                    if ( bool.TryParse( moduleSnapshot.moduleValues.GetValue( \u0022coreDisabled\u0022 ), out bCoreDisabled ) \u0026amp;\u0026amp;\u003Cbr\u003E                                        bool.TryParse( moduleSnapshot.moduleValues.GetValue( \u0022m_bProbeDamaged\u0022 ), out bCoreDamaged ) )\u003Cbr\u003E                                    {\u003Cbr\u003E                                        bIsActive = !(bCoreDisabled || bCoreDamaged );\u003Cbr\u003E\u003Cbr\u003E                                        fEnergyConsumedRate = modulePrefab.energyConsumedRate;\u003Cbr\u003E\u003Cbr\u003E                                        // FCTEST \u003Cbr\u003E                                        Debug.Log( \u0022BTSMModuleProbePower: Backround Processing successfully initialized for: \u0022 \u002B vessel.vesselName );\u003Cbr\u003E                                    }\u003Cbr\u003E                                }\u003Cbr\u003E                            }\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            customData = new BTSMModuleProbePowerBackgroundUpdateData( bIsActive, fEnergyConsumedRate );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate(Vessel v, uint partFlightID, ref System.Object data)\u003Cbr\u003E        {\u003Cbr\u003E            // FCTEST\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: simple persistant update for \u0022 \u002B v.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiPartFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc, ref System.Object customData )        \u003Cbr\u003E        {\u003Cbr\u003E            // FCTEST\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Persistant update for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E\u003Cbr\u003E            // Background Processing callback\u003Cbr\u003E\u003Cbr\u003E            if ( customData != null )\u003Cbr\u003E            {\u003Cbr\u003E                BTSMModuleProbePowerBackgroundUpdateData probePowerCustomData = (BTSMModuleProbePowerBackgroundUpdateData)customData;\u003Cbr\u003E\u003Cbr\u003E                if ( probePowerCustomData.m_bIsActive )\u003Cbr\u003E                {\u003Cbr\u003E\u003Cbr\u003E                    float fResourceConsumed = ResourceRequestFunc( vessel, probePowerCustomData.m_fEnergyConsumedRate * TimeWarp.fixedDeltaTime, \u0022ElectricCharge\u0022 );\u003Cbr\u003E\u003Cbr\u003E                    // FCTEST\u003Cbr\u003E                    Debug.Log( \u0022BTSMModuleProbePower: Persistant update for consumed: \u0022 \u002B fResourceConsumed  );\u003Cbr\u003E\u003Cbr\u003E                    // FCTODO: Check energy consumed and damage probe core on lack of power\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E\u003Cbr\u003E    class BTSMModuleProbePowerBackgroundUpdateData\u003Cbr\u003E    {\u003Cbr\u003E        public bool m_bIsActive;\u003Cbr\u003E        public float m_fEnergyConsumedRate;\u003Cbr\u003E\u003Cbr\u003E        public BTSMModuleProbePowerBackgroundUpdateData( bool bIsActive, float fEnergyConsumedRate )\u003Cbr\u003E        {\u003Cbr\u003E            m_bIsActive = bIsActive;\u003Cbr\u003E            m_fEnergyConsumedRate = fEnergyConsumedRate;\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI included debug output in the OnStart() and FixedUpdate() functions as well to verify that the module is indeed being added to the parts, which it is.\u003C/p\u003E\u003Cp\u003EAny ideas?\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T04:13:34Z","Content":"\n\u003Cp\u003EAre you getting the \u0022Debug.Log(\u0022BackgroundProcessing: Running assembly at \u0022 \u002B Assembly.GetExecutingAssembly().Location \u002B \u0022 (\u0022 \u002B Assembly.GetExecutingAssembly().GetName().Version \u002B \u0022)\u0022);\u0022 debug output? What does it say?\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T04:16:53Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EAre you getting the \u0022Debug.Log(\u0022BackgroundProcessing: Running assembly at \u0022 \u002B Assembly.GetExecutingAssembly().Location \u002B \u0022 (\u0022 \u002B Assembly.GetExecutingAssembly().GetName().Version \u002B \u0022)\u0022);\u0022 debug output? What does it say?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBackgroundProcessing: Running assembly at path\\Kerbal Space Program\\GameData\\BackgroundProcessing-0.4.0.0.dll (0.4.0.0)\u003C/p\u003E\u003Cp\u003ELater on getting messages about clearing and saving game state, so BP itself seems to be functioning fine. The callbacks themselves just never seem to be called.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-07T04:34:12Z\u0022 title=\u002202/07/2015 04:34  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 7, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T04:25:54Z","Content":"\n\u003Cp\u003EWell it\u0027s at least starting up then...\u003C/p\u003E\u003Cp\u003EIs the vessel prelaunch? You can tell if it says \u0022Standing by to launch\u0022 on the main screen.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T04:43:43Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EWell it\u0027s at least starting up then...\u003Cp\u003EIs the vessel prelaunch? You can tell if it says \u0022Standing by to launch\u0022 on the main screen.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThe specific test case I am using right now is, yes, as I cleaned out the mods folder of everything other than BTSM and BP to make sure it wasn\u0027t a secondary interaction, and created a new save with just a single probe core on the launch pad.\u003C/p\u003E\u003Cp\u003ESame thing seems to be happening with existing saves and many vessels in flight however, which is why I trimmed it down to a test case. I was also getting a bunch of debug log output about modules being in the wrong index with Deadly Reentry installed, I assume because it dynamically adds modules to handle reentry.\u003C/p\u003E\u003Cp\u003ELaunching my simple test case the BackgroundLoad() function is called after I return to the space center, and the simple form of FixedBackroundUpdate() begins to be called each tick.\u003C/p\u003E\u003Cp\u003EEDIT: \u003C/p\u003E\u003Cp\u003EFurther info: Upon exiting the game, and commenting out the simple form to see if the complex would be called, I booted the game back up. Vessel status is now \u0022landed at launch pad\u0022 neither BackgroundLoad() or FixedBackgroundUpdate() appear to be called. Making vessel active then returning to space center doesn\u0027t start it up either. Making it active, flying it up a bit, then relanding it and returning to space center also fails to net results.\u003C/p\u003E\u003Cp\u003EI seemed to get a brief moment there when I first launched it and then returned to space center where BP started calling the callbacks, and that was it.\u003C/p\u003E\u003Cp\u003ESurprisingly, recovering that vessel, placing a new one, launching it, landing it back, and returning to space center doesn\u0027t seem to start it up again either.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-07T04:58:00Z\u0022 title=\u002202/07/2015 04:58  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 7, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T04:54:15Z","Content":"\n\u003Cp\u003EOkay, so prelaunch vessels shouldn\u0027t get anything called on them. The reason is because when vessels are put in the launchpad there\u0027s a transitory half-initialised vessel created and added to the FlightGlobals.Vessels list that I don\u0027t want to do background processing on, and testing for prelaunch caught that problem without too many other problems. My usual testing practice is to attach wheels to the probe core I\u0027m testing and move it a bit - that\u0027s usually enough to get it out of prelaunch, as far as I can tell.\u003C/p\u003E\u003Cp\u003EAnd yeah, plugins that add modules at runtime, or changing mods change partmodules that are available, can play merry hell. If there\u0027s a difference between the PartModules on a ProtoPartSnapshot and the PartModules on the prefab Part, you should expect background callbacks to happen, but you should expect some weirdness with resource handling. That code can probably be improved, but will probably never be perfect.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T05:16:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EOkay, so prelaunch vessels shouldn\u0027t get anything called on them. The reason is because when vessels are put in the launchpad there\u0027s a transitory half-initialised vessel created and added to the FlightGlobals.Vessels list that I don\u0027t want to do background processing on, and testing for prelaunch caught that problem without too many other problems. My usual testing practice is to attach wheels to the probe core I\u0027m testing and move it a bit - that\u0027s usually enough to get it out of prelaunch, as far as I can tell.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFair enough, but doesn\u0027t explain the additional weirdness described in my edit though. Following up on it I just launched another probe to full orbit in my simple test case, and still getting no callbacks.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EAnd yeah, plugins that add modules at runtime, or changing mods change partmodules that are available, can play merry hell. If there\u0027s a difference between the PartModules on a ProtoPartSnapshot and the PartModules on the prefab Part, you should expect background callbacks to happen, but you should expect some weirdness with resource handling. That code can probably be improved, but will probably never be perfect.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmmm...ok, that may be problematic given my mod essentially requires DR to be installed along side it (not doing that for my test cases here though). Can talk about that separately though as callbacks weren\u0027t resulting regardless.\u003C/p\u003E\u003Cp\u003EAt the moment I\u0027m just trying to reproduce when the callbacks *do* get called, rather than when they don\u0027t, as other than that one specific instance I mentioned above right after launch, they aren\u0027t happening right now \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EEDIT: Ah...this is very interesting:\u003C/p\u003E\u003Cp\u003EExited game. Restarted. Went back into game and loaded simple test case with probe in orbit. No callbacks.\u003C/p\u003E\u003Cp\u003EExited game again. Uncommented the simple form of FixedBackgroundUpdate(). Restarted. Callbacks happening.\u003C/p\u003E\u003Cp\u003ESo it looks like the simple form is working, and if it\u0027s present, callbacks are working fine. If you just have the complex form I have listed above, no callbacks are triggered.\u003C/p\u003E\u003Cp\u003ESo either there\u0027s a problem with my syntax (you can check it above), or there\u0027s something wonky about the complex form in particular. All test cases where I haven\u0027t had callbacks have been *only* with the complex form. I\u0027ll go back now and check it with DR installed and a more populated save game with the simple form.\u003C/p\u003E\u003Cp\u003EEDIT 2: Yup, DR installed, populated save game, simple form of FixedBackgroundUpdate() present, popped into save and got debug messages for a whole bunch of different vessels indicating FixedBackgroundUpdate() was being called. Looks like this is really a problem with the complex form.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-07T05:35:56Z\u0022 title=\u002202/07/2015 05:35  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 7, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T05:39:11Z","Content":"\n\u003Cp\u003EThat\u0027s very strange. I haven\u0027t been able to reproduce the problem yet. I assume you\u0027re not getting any exceptions in your log - they\u0027d be potentially meaningful. If you\u0027re comfortable with compiling BP from source, I can add a bunch of debug statements that might be useful so we can get a feel for where it\u0027s falling down.\u003C/p\u003E\u003Cp\u003EIf Deadly Reentry only adds partmodules at the end of the module list it should be fine - you\u0027ll get a bunch of messages like \u0022Ran out of modules before finding module SOME_REENTRY_MODULE\u0022, but it shouldn\u0027t break anything. You should only worry if it can\u0027t find ModuleDeployableSolarPanel, ModuleGenerator, or ModuleCommand.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-07T05:46:56Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EThat\u0027s very strange. I haven\u0027t been able to reproduce the problem yet. I assume you\u0027re not getting any exceptions in your log - they\u0027d be potentially meaningful. If you\u0027re comfortable with compiling BP from source, I can add a bunch of debug statements that might be useful so we can get a feel for where it\u0027s falling down.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENo, no exceptions at all. I just ran a test where I straight out copy pasted your function prototype listed on Kerbal Stuff for the complex form of FixedBackgroundUpdate() and renamed all my local variables to match your names to make sure I hadn\u0027t just made some weird typo somewhere that was preventing it being called, and am still getting nothing on it. So, simple form good, complex form bad apparently \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EAnd yeah, I\u0027m comfortable compiling from source, and previously set myself up to do so with BP when I was running some initial tests. Before we start inserting debug statements though, can you pass me a code snippet where you\u0027re testing with *just* the complex form of the FixedBackgroundUpdate() callback so I can make 100% certain my function definition is kosher? If it\u0027s working for you, and not for me, the only thing I can think of is that the definition isn\u0027t 100% identical and thus BP isn\u0027t recognizing my callback.\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-07T06:02:40Z","Content":"\n\u003Cp\u003EI\u0027m an idiot, and the test case I was looking at wasn\u0027t the complex FixedBackgroundUpdate, which I indeed broke (it was expecting a delegate type thing, not a Func\u0026lt;Vessel, float, string float\u0026gt;). Should be fixed in 0.4.0.1, up on kerbalstuff right now.\u003C/p\u003E\n"}]}