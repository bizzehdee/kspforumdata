{"TopicId":155796,"ForumId":34,"TopicTitle":"[KSP 1.10.0] Kerbal Simpit: A KSP serial mod for hardware controllers (1.4.1)","CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2017-01-30T17:07:07Z","PageNum":11,"Articles":[{"CreatedByName":"madradhu","CreatedById":200371,"CreatedDateTime":"2019-09-20T03:03:38Z","Content":"\n\u003Cp\u003E\nI\u0027m starting in on my kerbtroller project, and I\u0027m at the part where I\u0027m working on getting the controller prototype and the game talking to each other, and I can\u0027t seem to get it working - there\u0027s Simpit references in KSP.log, but KerbalSimpitStageDemo that I loaded onto my arduino doesn\u0027t seem to do anything, and the built in LED stays on. Any ideas?\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222019-09-23T03:13:55Z\u0022 title=\u002209/23/2019 03:13  AM\u0022 data-short=\u00224 yr\u0022\u003ESeptember 23, 2019\u003C/time\u003E by madradhu\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LRTNZ","CreatedById":193780,"CreatedDateTime":"2019-09-23T04:33:01Z","Content":"\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/200371-madradhu/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022200371\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/200371-madradhu/\u0022 rel=\u0022\u0022\u003E@madradhu\u003C/a\u003E\u00A0What do you mean by simply references in the log? Could you provide a copy of the log file somewhere for us to look over to see what the issue may be?\n\u003C/p\u003E\n\u003Cp\u003E\nHave you checked the serial port the Arduino is connected to is not in use by another program?\n\u003C/p\u003E\n\u003Cp\u003E\nIs the serial port the Arduino is using defined as the serial port in the config file for Kerbal simpit?\n\u003C/p\u003E\n"},{"CreatedByName":"madradhu","CreatedById":200371,"CreatedDateTime":"2019-09-24T04:07:07Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223676146\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221569213181\u0022 data-ipsquote-userid=\u0022193780\u0022 data-ipsquote-username=\u0022LRTNZ\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n23 hours ago, LRTNZ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/200371-madradhu/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022200371\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/200371-madradhu/\u0022 rel=\u0022\u0022\u003E@madradhu\u003C/a\u003E\u00A0What do you mean by simply references in the log? Could you provide a copy of the log file somewhere for us to look over to see what the issue may be?\n\u003C/p\u003E\n\u003Cp\u003E\nHave you checked the serial port the Arduino is connected to is not in use by another program?\n\u003C/p\u003E\n\u003Cp\u003E\nIs the serial port the Arduino is using defined as the serial port in the config file for Kerbal simpit?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThis I believe is the plugin loading, right at the top of KSP.log:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[LOG 20:54:04.476] Load(Assembly): KerbalSimpit/KerbalSimpit\n[LOG 20:54:04.477] AssemblyLoader: Loading assembly at S:\\SteamLibrary\\steamapps\\common\\Kerbal Space Program\\GameData\\KerbalSimpit\\KerbalSimpit.dll\n[LOG 20:54:04.507] AssemblyLoader: KSPAssembly \u0027KerbalSimpit\u0027 V1.3.0\n[LOG 20:54:04.507] AssemblyLoader: KSPAssemblyDependency \u0027KerbalSimpitSerial\u0027 V1.0.0\n[LOG 20:54:04.507] Load(Assembly): KerbalSimpit/KerbalSimpitSerial\n[LOG 20:54:04.507] AssemblyLoader: Loading assembly at S:\\SteamLibrary\\steamapps\\common\\Kerbal Space Program\\GameData\\KerbalSimpit\\KerbalSimpitSerial.dll\n[LOG 20:54:04.508] AssemblyLoader: KSPAssembly \u0027KerbalSimpitSerial\u0027 V1.0.0\n[LOG 20:54:04.508] Load(Assembly): KerbalSimpit/Mono.Posix\n[LOG 20:54:04.508] AssemblyLoader: Loading assembly at S:\\SteamLibrary\\steamapps\\common\\Kerbal Space Program\\GameData\\KerbalSimpit\\Mono.Posix.dll\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nIt\u0027s pointed at the correct \u003Cabbr title=\u0022Center of Mass\u0022\u003ECOM\u003C/abbr\u003E port in Settings.cfg, nothing else is using it as far as I can tell. I mocked up the simple debounce sketch physically on my arduino that KerbalSimpitStageDemo.ino references, but I can\u0027t seem to get it to work. Dunno if there\u0027s anything obvious to try.\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"TygurDuck","CreatedById":201941,"CreatedDateTime":"2019-12-22T19:27:27Z","Content":"\n\u003Cp\u003E\nI do not get how to access the resourceMessage struct. I want to see my total and available \u003Cabbr title=\u0022Liquid Fuel\u0022\u003ELF\u003C/abbr\u003E (all really, but lets start with that.) Although I follow the example of altitude its just not doing anything. Code below. Lots of stuff wrong, I am sure. All I really need is to see how to access the resource information. Do I have to use Altnerate Resource Panel for it to work at all?\n\u003C/p\u003E\n\u003Cp\u003E\n#include \u0026lt;KerbalSimpit.h\u0026gt;\n\u003C/p\u003E\n\u003Cp\u003E\nKerbalSimpit mySimpit(Serial);\n\u003C/p\u003E\n\u003Cp\u003E\nint DS_pin = 11;\u003Cbr\u003E\nint STCP_pin = 8;\u003Cbr\u003E\nint SHCP_pin = 12;\n\u003C/p\u003E\n\u003Cp\u003E\nboolean registers[10];\n\u003C/p\u003E\n\u003Cp\u003E\nvoid setup() {\u003Cbr\u003E\n\u00A0 // put your setup code here, to run once:\u003Cbr\u003E\n\u00A0 \u00A0\u003Cbr\u003E\n\u00A0 Serial.begin(115200);\u003Cbr\u003E\n\u00A0\u00A0\u003Cbr\u003E\n\u00A0 pinMode(DS_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(STCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(SHCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(LED_BUILTIN,OUTPUT);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 //digitalWrite(LED_BUILTIN,HIGH);\u003Cbr\u003E\n\u00A0 for(int i = 0; i\u0026lt;10; i\u002B\u002B)\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 registers\u003Cem\u003E = LOW;\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 writereg();\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 while(!mySimpit.init()); {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 delay(100);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 } \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003EdigitalWrite(LED_BUILTIN,HIGH); \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u00A0 mySimpit.inboundHandler(messageHandler);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 mySimpit.registerChannel(LF_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 //mySimpit.registerChannel(ALTITUDE_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E} \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003Evoid writereg() {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 for(int i = 9; i\u0026gt;=0; i--)\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(DS_pin, registers\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003Evoid loop() {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 // put your main code here, to run repeatedly:\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 mySimpit.update();\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Evoid messageHandler(byte messageType, byte msg[], byte msgSize)\u00A0{ \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Eif (msgSize == sizeof(resourceMessage))\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 resourceMessage myLF;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 myLF = parseResource(msg);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 //float percentLF = myLF.available / myLF.total;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 if (myLF.available \u0026lt; 10)\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100); \u00A0 \u00A0\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Wasabi","CreatedById":126194,"CreatedDateTime":"2020-02-21T20:39:58Z","Content":"\n\u003Cp\u003E\nI can\u0027t figure out what WHEEL_MESSAGE is used for. What does it contain that ROTATION_MESSAGE doesn\u0027t?\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://kerbalsimpit-arduino.readthedocs.io/en/stable/payloadstructs.html?highlight=wheelmessage#_CPPv312wheelMessage\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalsimpit-arduino.readthedocs.io/en/stable/payloadstructs.html?highlight=wheelmessage#_CPPv312wheelMessage\u003C/a\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"Mofates","CreatedById":194097,"CreatedDateTime":"2020-03-27T22:43:07Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223745020\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221582317598\u0022 data-ipsquote-userid=\u0022126194\u0022 data-ipsquote-username=\u0022Wasabi\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 2/21/2020 at 3:39 PM, Wasabi said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI can\u0027t figure out what WHEEL_MESSAGE is used for. What does it contain that ROTATION_MESSAGE doesn\u0027t?\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca href=\u0022https://kerbalsimpit-arduino.readthedocs.io/en/stable/payloadstructs.html?highlight=wheelmessage#_CPPv312wheelMessage\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://kerbalsimpit-arduino.readthedocs.io/en/stable/payloadstructs.html?highlight=wheelmessage#_CPPv312wheelMessage\u003C/a\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWasabi,\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 The Wheel_Message is used to control rovers or wheel motors (Think -- ground based vehicles).\u00A0 The Rotation_Message is for just that - rotational parameters (think space/airborne).\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E    myWheel.throttle = buttonCurrent[i];\n    myWheel.steer = buttonCurrent[j];\n    myWheel.mask = 3;\n    mySimpit.send(WHEEL_MESSAGE, myWheel); \u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Mofates","CreatedById":194097,"CreatedDateTime":"2020-03-28T01:37:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223720059\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221577042847\u0022 data-ipsquote-userid=\u0022201941\u0022 data-ipsquote-username=\u0022TygurDuck\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/22/2019 at 2:27 PM, TygurDuck said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI do not get how to access the resourceMessage struct. I want to see my total and available \u003Cabbr title=\u0022Liquid Fuel\u0022\u003ELF\u003C/abbr\u003E (all really, but lets start with that.) Although I follow the example of altitude its just not doing anything. Code below. Lots of stuff wrong, I am sure. All I really need is to see how to access the resource information. Do I have to use Altnerate Resource Panel for it to work at all?\n\u003C/p\u003E\n\u003Cp\u003E\n#include \u0026lt;KerbalSimpit.h\u0026gt;\n\u003C/p\u003E\n\u003Cp\u003E\nKerbalSimpit mySimpit(Serial);\n\u003C/p\u003E\n\u003Cp\u003E\nint DS_pin = 11;\u003Cbr\u003E\nint STCP_pin = 8;\u003Cbr\u003E\nint SHCP_pin = 12;\n\u003C/p\u003E\n\u003Cp\u003E\nboolean registers[10];\n\u003C/p\u003E\n\u003Cp\u003E\nvoid setup() {\u003Cbr\u003E\n\u00A0 // put your setup code here, to run once:\u003Cbr\u003E\n\u00A0 \u00A0\u003Cbr\u003E\n\u00A0 Serial.begin(115200);\u003Cbr\u003E\n\u00A0\u00A0\u003Cbr\u003E\n\u00A0 pinMode(DS_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(STCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(SHCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(LED_BUILTIN,OUTPUT);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 //digitalWrite(LED_BUILTIN,HIGH);\u003Cbr\u003E\n\u00A0 for(int i = 0; i\u0026lt;10; i\u002B\u002B)\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 registers\u003Cem\u003E = LOW;\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 writereg();\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 while(!mySimpit.init()); {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 delay(100);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 } \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003EdigitalWrite(LED_BUILTIN,HIGH); \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u00A0 mySimpit.inboundHandler(messageHandler);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 mySimpit.registerChannel(LF_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 //mySimpit.registerChannel(ALTITUDE_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E} \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003Evoid writereg() {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 for(int i = 9; i\u0026gt;=0; i--)\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(DS_pin, registers\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003Evoid loop() {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 // put your main code here, to run repeatedly:\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 mySimpit.update();\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Evoid messageHandler(byte messageType, byte msg[], byte msgSize)\u00A0{ \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Eif (msgSize == sizeof(resourceMessage))\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 resourceMessage myLF;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 myLF = parseResource(msg);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 //float percentLF = myLF.available / myLF.total;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 if (myLF.available \u0026lt; 10)\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100); \u00A0 \u00A0\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI have recently only been able to achieve Controller to KSP communications.\u00A0 \u00A0My controller works fine but I can no longer get data from the KSP Client.\n\u003C/p\u003E\n\u003Cp\u003E\njust a suggestion - loops and timing checks are much better than repeated hard coded delays.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Mofates","CreatedById":194097,"CreatedDateTime":"2020-03-28T18:45:30Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223720059\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221577042847\u0022 data-ipsquote-userid=\u0022201941\u0022 data-ipsquote-username=\u0022TygurDuck\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/22/2019 at 2:27 PM, TygurDuck said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI do not get how to access the resourceMessage struct. I want to see my total and available \u003Cabbr title=\u0022Liquid Fuel\u0022\u003ELF\u003C/abbr\u003E (all really, but lets start with that.) Although I follow the example of altitude its just not doing anything. Code below. Lots of stuff wrong, I am sure. All I really need is to see how to access the resource information. Do I have to use Altnerate Resource Panel for it to work at all?\n\u003C/p\u003E\n\u003Cp\u003E\n#include \u0026lt;KerbalSimpit.h\u0026gt;\n\u003C/p\u003E\n\u003Cp\u003E\nKerbalSimpit mySimpit(Serial);\n\u003C/p\u003E\n\u003Cp\u003E\nint DS_pin = 11;\u003Cbr\u003E\nint STCP_pin = 8;\u003Cbr\u003E\nint SHCP_pin = 12;\n\u003C/p\u003E\n\u003Cp\u003E\nboolean registers[10];\n\u003C/p\u003E\n\u003Cp\u003E\nvoid setup() {\u003Cbr\u003E\n\u00A0 // put your setup code here, to run once:\u003Cbr\u003E\n\u00A0 \u00A0\u003Cbr\u003E\n\u00A0 Serial.begin(115200);\u003Cbr\u003E\n\u00A0\u00A0\u003Cbr\u003E\n\u00A0 pinMode(DS_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(STCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(SHCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(LED_BUILTIN,OUTPUT);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 //digitalWrite(LED_BUILTIN,HIGH);\u003Cbr\u003E\n\u00A0 for(int i = 0; i\u0026lt;10; i\u002B\u002B)\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 registers\u003Cem\u003E = LOW;\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 writereg();\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 while(!mySimpit.init()); {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 delay(100);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 } \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003EdigitalWrite(LED_BUILTIN,HIGH); \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u00A0 mySimpit.inboundHandler(messageHandler);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 mySimpit.registerChannel(LF_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 //mySimpit.registerChannel(ALTITUDE_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E} \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003Evoid writereg() {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 for(int i = 9; i\u0026gt;=0; i--)\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(DS_pin, registers\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003Evoid loop() {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 // put your main code here, to run repeatedly:\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 mySimpit.update();\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Evoid messageHandler(byte messageType, byte msg[], byte msgSize)\u00A0{ \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Eif (msgSize == sizeof(resourceMessage))\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 resourceMessage myLF;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 myLF = parseResource(msg);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 //float percentLF = myLF.available / myLF.total;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 if (myLF.available \u0026lt; 10)\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100); \u00A0 \u00A0\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI sorted out my comm issues between KSP and my controller.\n\u003C/p\u003E\n\u003Cp\u003E\nI threw together a basic sketch that \u0027tries\u0027 to do what you were attempting.\u00A0 It will blink the builtinLED when the fuel level is below 10.0.\n\u003C/p\u003E\n\u003Cp\u003E\nPLEASE make sure that you have the correct \u003Cabbr title=\u0022Center of Mass\u0022\u003ECOM\u003C/abbr\u003E port assigned in the settings.cfg file in the\u00A0plugindata directory\n\u003C/p\u003E\n\u003Cp\u003E\nD:\\SteamLibrary\\SteamApps\\common\\Kerbal Space Program\\GameData\\KerbalSimpit\\PluginData\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpitMessageTypes.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PayloadStructs.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpit.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\nKerbalSimpit mySimpit(Serial);\nfloat fuel = 10.0;\n\nunsigned int lastBlink = 0;\nint blinkPeriod = 500;\nbool blinkBool = false;\n\nvoid setup() {\n  // put your setup code here, to run once:\n   \n  Serial.begin(115200);\n  \n  pinMode(LED_BUILTIN,OUTPUT);\n  digitalWrite(LED_BUILTIN,LOW);  //TURN THE LED OFF UNTIL WE CONNECT WITH KSP\n  \n  delay(100);\n  while(!mySimpit.init()); {\n    delay(100);\n  }\n\n  digitalWrite(LED_BUILTIN,HIGH);  //  SHOWS WERE CONNECTED!\n  delay(500);\n  \n  mySimpit.inboundHandler(messageHandler);\n  mySimpit.registerChannel(10);   // 10 is the value for LF  --  Outputs a resourceMessage\n \n}\n\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  mySimpit.update();\n  checkFuelLevel();\n}\n\nvoid messageHandler(byte messageType, byte msg[], byte msgSize) {\n  \n  if (msgSize == sizeof(resourceMessage))\n  {\n    resourceMessage myLF;\n    myLF = parseResource(msg);\n    //float percentLF = myLF.available / myLF.total;\n    fuel = myLF.available;\n  }\n}\n\nvoid checkFuelLevel(){\n    unsigned int nowCheck = millis();\n  if( fuel \u0026lt; 10.0 ){  //  CHECK FOR FUEL LOW\n    if( nowCheck \u0026gt; ( lastBlink \u002B blinkPeriod ) ){\n      lastBlink = nowCheck;\n      digitalWrite(LED_BUILTIN, blinkBool);\n      blinkBool = !blinkBool;\n    } \n  }else{\n     digitalWrite(LED_BUILTIN,HIGH); \n  }\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"LRTNZ","CreatedById":193780,"CreatedDateTime":"2020-05-20T01:51:17Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223720059\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221577042847\u0022 data-ipsquote-userid=\u0022201941\u0022 data-ipsquote-username=\u0022TygurDuck\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/23/2019 at 8:27 AM, TygurDuck said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nI do not get how to access the resourceMessage struct. I want to see my total and available \u003Cabbr title=\u0022Liquid Fuel\u0022\u003ELF\u003C/abbr\u003E (all really, but lets start with that.) Although I follow the example of altitude its just not doing anything. Code below. Lots of stuff wrong, I am sure. All I really need is to see how to access the resource information. Do I have to use Altnerate Resource Panel for it to work at all?\n\u003C/p\u003E\n\u003Cp\u003E\n#include \u0026lt;KerbalSimpit.h\u0026gt;\n\u003C/p\u003E\n\u003Cp\u003E\nKerbalSimpit mySimpit(Serial);\n\u003C/p\u003E\n\u003Cp\u003E\nint DS_pin = 11;\u003Cbr\u003E\nint STCP_pin = 8;\u003Cbr\u003E\nint SHCP_pin = 12;\n\u003C/p\u003E\n\u003Cp\u003E\nboolean registers[10];\n\u003C/p\u003E\n\u003Cp\u003E\nvoid setup() {\u003Cbr\u003E\n\u00A0 // put your setup code here, to run once:\u003Cbr\u003E\n\u00A0 \u00A0\u003Cbr\u003E\n\u00A0 Serial.begin(115200);\u003Cbr\u003E\n\u00A0\u00A0\u003Cbr\u003E\n\u00A0 pinMode(DS_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(STCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(SHCP_pin,OUTPUT);\u003Cbr\u003E\n\u00A0 pinMode(LED_BUILTIN,OUTPUT);\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0 //digitalWrite(LED_BUILTIN,HIGH);\u003Cbr\u003E\n\u00A0 for(int i = 0; i\u0026lt;10; i\u002B\u002B)\u003Cbr\u003E\n\u00A0 \u00A0 {\u003Cbr\u003E\n\u00A0 \u00A0 \u00A0 registers\u003Cem\u003E = LOW;\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 writereg();\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 while(!mySimpit.init()); {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 delay(100);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 } \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003EdigitalWrite(LED_BUILTIN,HIGH); \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u00A0 mySimpit.inboundHandler(messageHandler);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 mySimpit.registerChannel(LF_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 //mySimpit.registerChannel(ALTITUDE_MESSAGE);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0\u00A0\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E} \u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003Evoid writereg() {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 for(int i = 9; i\u0026gt;=0; i--)\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, LOW);\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(DS_pin, registers\u003C/em\u003E\u003Cem\u003E\u003Cem\u003E);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 digitalWrite(SHCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 digitalWrite(STCP_pin, HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003Evoid loop() {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 // put your main code here, to run repeatedly:\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 mySimpit.update();\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Evoid messageHandler(byte messageType, byte msg[], byte msgSize)\u00A0{ \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cem\u003E\u003Cem\u003Eif (msgSize == sizeof(resourceMessage))\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 resourceMessage myLF;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 myLF = parseResource(msg);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 //float percentLF = myLF.available / myLF.total;\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 if (myLF.available \u0026lt; 10)\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 {\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(300);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,HIGH);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 digitalWrite(LED_BUILTIN,LOW);\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 \u00A0 delay(100); \u00A0 \u00A0\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 \u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E\u00A0 }\u003C/em\u003E\u003C/em\u003E\u003Cbr\u003E\u003Cem\u003E\u003Cem\u003E} \u003C/em\u003E\u003C/em\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/201941-tygurduck/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022201941\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/201941-tygurduck/\u0022 rel=\u0022\u0022\u003E@TygurDuck\u003C/a\u003E The big issue is that you are running blocking code - this is where you prevent the processor from doing anything else, as it is stuck in a delay.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/194097-mofates/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022194097\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/194097-mofates/\u0022 rel=\u0022\u0022\u003E@Mofates\u003C/a\u003E your demo code using the boolean operators and the timer code is how I would recommend to do it. There is one really big issue though - that is, you have about 65 seconds of useful time to use it, before you will probably encounter some really weird timing bugs, when lastBlink rolls over back to zero. An unsigned int on an arduino has a maximum value of 65,535. As you are storing milliseconds, that comes to just over a minute, until it rolls over. You need to be using an unsigned long, which can hold a maximum value of 4,294,967,295 - if you manage to exceed that, you really need to stop playing \u003Cspan\u003E\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n"},{"CreatedByName":"PSU_Jedi","CreatedById":170782,"CreatedDateTime":"2020-05-21T14:06:35Z","Content":"\n\u003Cp\u003E\nHello \u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57865-stibbons/\u0026amp;do=hovercard\u0022 data-mentionid=\u002257865\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/57865-stibbons/\u0022 rel=\u0022\u0022\u003E@stibbons\u003C/a\u003E! I really appreciate the work you\u0027ve done here and it\u0027s been really exciting building my own Kontrol box for KSP. I have successfully gotten a load of buttons to work, plus throttle. I\u0027m working through translating my 3-axis analog joystick inputs now to the format that Simpit needs.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nI wanted to ask if you had any plans to incorporate more of the overall game commands into your mod. For instance, I\u0027ve put Quicksave, Load, Pause, Time Warp, and Map functions on my Kontrol box. At this time I don\u0027t see any such functionality built into Simpit, so it looks like I\u0027m going to have to emulate an HID with a second arduino board to accomplish that. Thanks!\n\u003C/p\u003E\n"},{"CreatedByName":"PSU_Jedi","CreatedById":170782,"CreatedDateTime":"2020-06-04T15:24:03Z","Content":"\n\u003Cp\u003E\nAll,\n\u003C/p\u003E\n\u003Cp\u003E\nI just finished constructing my prototype control box and everything was working individually until I put it all together. Now it freezes up about 5-10 seconds into game play and seems to stop transmitting data to the computer. I\u0027ve checked the circuit connections and have found no shorts or faulty connections. Running tests with serial monitor shows that the Arduino is continuously outputting data in these situations. What I\u0027ve noticed when I play the game is that the Rx LED on the Arduino is constantly lit up, which makes me think that it\u0027s locking up because it\u0027s getting inundated with information from the USB port. Do the message channels continually broadcast? TIA.\u003Cbr\u003E\u003Cbr\u003E\nEDIT: Further testing revealed that it is the interaction of the analog joysticks that seems to cause everything to freeze up. I commented out the portion of the code below where the joysticks live and everything else worked flawlessly without freezing. The joysticks work on their own when I troubleshoot with serial monitor, and both power and ground are commonly wired with the joysticks in parallel with the other buttons and switches, so it\u0027s not a physical connection issue. It seems to be something with the Simpit code sending/receiving too much data when the joysticks are used that causes it to lock up. What am I doing in the joystick code that\u0027s causing this?\u003Cbr\u003E\u003Cbr\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E// Sets up the Arduino Mega to handle the analog joysticks, Action Groups, switches and buttons\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpit.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpitMessageTypes.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PayloadStructs.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ezButton.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E // loads ezButton library for button debounce\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Rotary.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\nrotationMessage myRotation;\ntranslationMessage myTranslation;\n\nconst int ROT_X = A0; // assigns rotation joystick X-axis to pin Analog 0\nconst int ROT_Y = A1; // assigns rotation joystick Y-axis to pin Analog 1\nconst int ROT_Z = A2; // assigns rotation joystick Z-axis to pin Analog 2\nconst int TRANS_X = A3; // assigns translation joystick X-axis to pin Analog 3\nconst int TRANS_Y = A4; // assigns translation joystick Y-axis to pin Analog 4\nconst int TRANS_Z = A5; // assigns translation joystick Z-axis to pin Analog 5\nconst int STAGE_BTN = 2; // assigns the Staging button to pin 2\nconst int RCS_LED = 3; // assigns the RCS indicator LED to pin 3\nconst int BRAKES_LED = 4; // assigns the Brakes indicator LED to pin 4\nconst int GEAR_LED = 5; // assigns the Landing Gear indicator LED to pin 5\nconst int LIGHTS_LED = 6; // assigns the Lights indicator LED to pin 6\nconst int SAS_LED = 7; // assigns the SAS indicator LED to pin 7\nconst int THROT_CLK = 22; // assigns the Throttle rotary encoder CLK output (\u0022A\u0022) to pin 22\nconst int THROT_DT = 23; // assigns the Throttle rotary encoder DT output (\u0022B\u0022) to pin 23\nconst int THROT_BTN = 24; // assigns the Throttle rotary encoder Switch output to pin 24\nconst int THROT_CUT = 25; // assigns the Throttle Cut button output to pin 25\nconst int SAS_CLK = 32; // assigns the SAS rotary encoder CLK output (\u0022A\u0022) to pin 32\nconst int SAS_DT = 33; // assigns the SAS rotary encoder DT output (\u0022B\u0022) to pin 33\nconst int SAS_SWITCH = 34; // assigns the SAS switch output to pin 34\nconst int RCS_SWITCH = 35; // assigns the RCS switch output to pin 35\nconst int BRAKES_SWITCH = 36; // assigns the Brakes switch output to pin 36\nconst int GEAR_SWITCH = 37; // assigns the Gear switch output to pin 37\nconst int LIGHTS_SWITCH = 38; // assigns the Lights switch output to pin 38\nconst int ABORT_BTN = 39; // assigns the Abort switch output to pin 38\nconst int AG_01 = 41; // assigns the Action Group 1 switch output to pin 41\nconst int AG_02 = 42; // assigns the Action Group 2 switch output to pin 42\nconst int AG_03 = 43; // assigns the Action Group 3 switch output to pin 43\nconst int AG_04 = 44; // assigns the Action Group 4 switch output to pin 44\nconst int AG_05 = 45; // assigns the Action Group 5 switch output to pin 45\nconst int AG_06 = 46; // assigns the Action Group 6 switch output to pin 46\nconst int AG_07 = 47; // assigns the Action Group 7 switch output to pin 47\nconst int AG_08 = 48; // assigns the Action Group 8 switch output to pin 48\nconst int AG_09 = 49; // assigns the Action Group 9 switch output to pin 49\nconst int AG_10 = 50; // assigns the Action Group 10 switch output to pin 50\n\nint sas_Counter = 1; // initializes SAS Mode counter value variable at 1\nint currentSASStateCLK;\nint lastSASStateCLK;\nint throt_Counter = 0; // initializes Throttle counter value variable at 0\nint currentThrotStateCLK;\nint lastThrotStateCLK;\nint rot_X_Read;\nint rot_Y_Read;\nint rot_Z_Read;\nint rot_X_Mapped;\nint rot_Y_Mapped;\nint rot_Z_Mapped;\nint trans_X_Read;\nint trans_Y_Read;\nint trans_Z_Read;\nint trans_X_Mapped;\nint trans_Y_Mapped;\nint trans_Z_Mapped;\nint debounce_Time = 25;\n\nKerbalSimpit mySimpit(Serial);\n\nezButton buttonSTAGE(STAGE_BTN);\nezButton buttonTHROT(THROT_BTN);\nezButton buttonTHROT_CUT(THROT_CUT);\nezButton buttonSAS(SAS_SWITCH);\nezButton buttonRCS(RCS_SWITCH);\nezButton buttonBRAKES(BRAKES_SWITCH);\nezButton buttonGEAR(GEAR_SWITCH);\nezButton buttonLIGHTS(LIGHTS_SWITCH);\nezButton buttonABORT(ABORT_BTN);\nezButton buttonAG_01(AG_01);\nezButton buttonAG_02(AG_02);\nezButton buttonAG_03(AG_03);\nezButton buttonAG_04(AG_04);\nezButton buttonAG_05(AG_05);\nezButton buttonAG_06(AG_06);\nezButton buttonAG_07(AG_07);\nezButton buttonAG_08(AG_08);\nezButton buttonAG_09(AG_09);\nezButton buttonAG_10(AG_10);\n\nRotary throtRotary = Rotary(THROT_DT, THROT_CLK);\nRotary sasRotary = Rotary(SAS_DT, SAS_CLK);\n\nvoid setup() {\n  Serial.begin(115200); // begins the serial connection to the computer through USB\n  pinMode(ROT_X, INPUT); // defines inputs and outputs on Arduino pins\n  pinMode(ROT_Y, INPUT);\n  pinMode(ROT_Z, INPUT);\n  pinMode(TRANS_X, INPUT);\n  pinMode(TRANS_Y, INPUT);\n  pinMode(TRANS_Z, INPUT);\n  pinMode(STAGE_BTN, INPUT_PULLUP);\n  pinMode(SAS_LED, OUTPUT); \n  pinMode(RCS_LED, OUTPUT);\n  pinMode(BRAKES_LED, OUTPUT);\n  pinMode(GEAR_LED, OUTPUT);\n  pinMode(LIGHTS_LED, OUTPUT); \n  pinMode(SAS_CLK, INPUT);\n  pinMode(SAS_DT, INPUT);\n  pinMode(SAS_SWITCH, INPUT);\n  pinMode(THROT_CLK, INPUT);\n  pinMode(THROT_DT, INPUT);\n  pinMode(THROT_BTN, INPUT);\n  pinMode(SAS_SWITCH, INPUT_PULLUP);\n  pinMode(RCS_SWITCH, INPUT_PULLUP);\n  pinMode(BRAKES_SWITCH, INPUT_PULLUP);\n  pinMode(GEAR_SWITCH, INPUT_PULLUP);\n  pinMode(LIGHTS_SWITCH, INPUT_PULLUP);\n  pinMode(ABORT_BTN, INPUT_PULLUP);\n  pinMode(AG_01, INPUT_PULLUP);\n  pinMode(AG_02, INPUT_PULLUP);\n  pinMode(AG_03, INPUT_PULLUP);\n  pinMode(AG_04, INPUT_PULLUP);\n  pinMode(AG_05, INPUT_PULLUP);\n  pinMode(AG_06, INPUT_PULLUP);\n  pinMode(AG_07, INPUT_PULLUP);\n  pinMode(AG_08, INPUT_PULLUP);\n  pinMode(AG_09, INPUT_PULLUP);\n  pinMode(AG_10, INPUT_PULLUP);  \n\n  buttonSTAGE.setDebounceTime(debounce_Time); // sets debounce times for buttons\n  buttonTHROT.setDebounceTime(debounce_Time);\n  buttonTHROT_CUT.setDebounceTime(debounce_Time);\n  buttonSAS.setDebounceTime(debounce_Time);\n  buttonRCS.setDebounceTime(debounce_Time);\n  buttonBRAKES.setDebounceTime(debounce_Time);\n  buttonGEAR.setDebounceTime(debounce_Time);\n  buttonLIGHTS.setDebounceTime(debounce_Time);\n  buttonABORT.setDebounceTime(debounce_Time);\n  buttonAG_01.setDebounceTime(debounce_Time);\n  buttonAG_02.setDebounceTime(debounce_Time);\n  buttonAG_03.setDebounceTime(debounce_Time);\n  buttonAG_04.setDebounceTime(debounce_Time);\n  buttonAG_05.setDebounceTime(debounce_Time);\n  buttonAG_06.setDebounceTime(debounce_Time);\n  buttonAG_07.setDebounceTime(debounce_Time);\n  buttonAG_08.setDebounceTime(debounce_Time);\n  buttonAG_09.setDebounceTime(debounce_Time);\n  buttonAG_10.setDebounceTime(debounce_Time);\n\n  digitalWrite(SAS_LED, HIGH); // turns on all the LEDs while the handshake process is happening\n  digitalWrite(RCS_LED, HIGH);\n  digitalWrite(BRAKES_LED, HIGH);\n  digitalWrite(GEAR_LED, HIGH);\n  digitalWrite(LIGHTS_LED, HIGH);\n  while (!mySimpit.init()) { // initializes (handshakes) with Simpit mod\n    delay(100);\n  }\n  digitalWrite(SAS_LED, LOW); // turns off all the LEDs once the handshake process is complete\n  digitalWrite(RCS_LED, LOW);\n  digitalWrite(BRAKES_LED, LOW);\n  digitalWrite(GEAR_LED, LOW);\n  digitalWrite(LIGHTS_LED, LOW);\n\n  mySimpit.inboundHandler(messageHandler); // declares the message handler to read incoming messages from Simpit mod\n  mySimpit.registerChannel(ACTIONSTATUS_MESSAGE); // subscribes to the Action Status message channel\n  mySimpit.registerChannel(ROTATION_MESSAGE); // subscribes to the Rotation message channel\n  mySimpit.registerChannel(TRANSLATION_MESSAGE); // subscribes to the Translation message channel\n}\n\nvoid loop() {\n  mySimpit.update(); // necessary updates and loops for called functions\n  buttonSTAGE.loop();\n  buttonTHROT.loop();\n  buttonTHROT_CUT.loop();\n  buttonSAS.loop();\n  buttonRCS.loop();\n  buttonBRAKES.loop();\n  buttonGEAR.loop();\n  buttonLIGHTS.loop();\n  buttonABORT.loop();\n  buttonAG_01.loop();\n  buttonAG_02.loop();\n  buttonAG_03.loop();\n  buttonAG_04.loop();\n  buttonAG_05.loop();\n  buttonAG_06.loop();\n  buttonAG_07.loop();\n  buttonAG_08.loop();\n  buttonAG_09.loop();\n  buttonAG_10.loop();  \n\n  throt_Counter = constrain(throt_Counter, 0, 32767); // sets upper and lower limits for counter variables for rotary encoders\n  sas_Counter = constrain(sas_Counter, 1, 10);\n\n  rot_X_Read = analogRead(ROT_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n  if (rot_X_Read \u0026lt; 510 \u0026amp;\u0026amp; rot_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n    rot_X_Mapped = 0;\n  }\n  if (rot_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n    rot_X_Mapped = map(rot_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n  }\n  if (rot_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n    rot_X_Mapped = map(rot_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n  }\n\n  rot_X_Mapped = constrain(rot_X_Mapped, -32768, 32767); // constrains the mapped value of the X-axis reading to valid results\n  myRotation.mask = 2; // applies the bitmask required to only send roll information to Simpit\n  myRotation.roll = rot_X_Mapped; // applies the X-axis value as the rotation roll value\n  mySimpit.send(ROTATION_MESSAGE, myRotation); // sends the roll value to Simpit\n  delay(1);  \n  \n  rot_Y_Read = analogRead(ROT_Y);\n  if (rot_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; rot_Y_Read \u0026gt; 508) {\n    rot_Y_Mapped = 0;\n  }\n  if (rot_Y_Read \u0026lt;= 508) {\n    rot_Y_Mapped = map(rot_Y_Read, 344, 508, -32768, 0);\n  }\n  if (rot_Y_Read \u0026gt;= 518) {\n    rot_Y_Mapped = map(rot_Y_Read, 518, 680, 0, 32767);\n  }\n\n  rot_Y_Mapped = constrain(rot_Y_Mapped, -32768, 32767);\n  myRotation.mask = 1;\n  myRotation.pitch = rot_Y_Mapped;\n  mySimpit.send(ROTATION_MESSAGE, myRotation);\n  delay(1);\n\n  rot_Z_Read = analogRead(ROT_Z);\n  if (rot_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; rot_Z_Read \u0026gt; 510) {\n    rot_Z_Mapped = 0;\n  }\n  if (rot_Z_Read \u0026lt;= 510) {\n    rot_Z_Mapped = map(rot_Z_Read, 296, 510, -32768, 0);\n  }\n  if (rot_Z_Read \u0026gt;= 520) {\n    rot_Z_Mapped = map(rot_Z_Read, 520, 733, 0, 32767);\n  }\n\n  rot_Z_Mapped = constrain(rot_Z_Mapped, -32768, 32767);\n  myRotation.mask = 4;\n  myRotation.yaw = rot_Z_Mapped;\n  mySimpit.send(ROTATION_MESSAGE, myRotation);\n  delay(1);\n\n  trans_X_Read = analogRead(TRANS_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n  if (trans_X_Read \u0026lt; 510 \u0026amp;\u0026amp; trans_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n    trans_X_Mapped = 0;\n  }\n  if (trans_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n    trans_X_Mapped = map(trans_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n  }\n  if (trans_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n    trans_X_Mapped = map(trans_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n  }\n\n  trans_X_Mapped = constrain(trans_X_Mapped, -32768, 32767); // constrains the mapped value of the X-axis reading to valid results\n  myTranslation.mask = 1; // applies the bitmask required to only send X information to Simpit\n  myTranslation.X = trans_X_Mapped; // applies the X-axis value as the X translation value\n  mySimpit.send(TRANSLATION_MESSAGE, myTranslation); // sends the x translation value to Simpit\n  delay(1);  \n  \n  trans_Y_Read = analogRead(TRANS_Y);\n  if (trans_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; trans_Y_Read \u0026gt; 508) {\n    trans_Y_Mapped = 0;\n  }\n  if (trans_Y_Read \u0026lt;= 508) {\n    trans_Y_Mapped = map(trans_Y_Read, 344, 508, -32768, 0);\n  }\n  if (trans_Y_Read \u0026gt;= 518) {\n    trans_Y_Mapped = map(trans_Y_Read, 518, 680, 0, 32767);\n  }\n\n  trans_Y_Mapped = constrain(trans_Y_Mapped, -32768, 32767);\n  myTranslation.mask = 2;\n  myTranslation.Y = trans_Y_Mapped;\n  mySimpit.send(TRANSLATION_MESSAGE, myTranslation);\n  delay(1);\n\n  trans_Z_Read = analogRead(TRANS_Z);\n  if (trans_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; trans_Z_Read \u0026gt; 510) {\n    trans_Z_Mapped = 0;\n  }\n  if (trans_Z_Read \u0026lt;= 510) {\n    trans_Z_Mapped = map(trans_Z_Read, 296, 510, -32768, 0);\n  }\n  if (trans_Z_Read \u0026gt;= 520) {\n    trans_Z_Mapped = map(trans_Z_Read, 520, 733, 0, 32767);\n  }\n\n  trans_Z_Mapped = constrain(trans_Z_Mapped, -32768, 32767);\n  myTranslation.mask = 4;\n  myTranslation.Z = trans_Z_Mapped;\n  mySimpit.send(TRANSLATION_MESSAGE, myTranslation);\n  delay(1);\n\n  if (buttonSTAGE.isPressed()) {\n    mySimpit.toggleAction(STAGE_ACTION);\n  }\n\n  if (buttonTHROT.isPressed()) {\n    throt_Counter = 32767;\n    mySimpit.send(THROTTLE_MESSAGE, throt_Counter);\n  }\n\n  if (buttonTHROT_CUT.isPressed()) {\n    throt_Counter = 0;\n    mySimpit.send(THROTTLE_MESSAGE, throt_Counter);\n  }\n  \n  if (buttonSAS.isPressed()) {\n    mySimpit.toggleAction(SAS_ACTION);\n  }\n  \n  if (buttonRCS.isPressed()) { // declares action if the RCS button is pressed (toggles RCS on/off)\n    mySimpit.toggleAction(RCS_ACTION);\n  }\n  if (buttonBRAKES.isPressed()) { // declares action if the Brakes button is pressed (toggles Brakes on/off)\n    mySimpit.toggleAction(BRAKES_ACTION);\n  }\n  if (buttonGEAR.isPressed()) { // declares action if the Gear button is pressed (toggles Gear up/down)\n    mySimpit.toggleAction(GEAR_ACTION);\n  }\n  if (buttonLIGHTS.isPressed()) { // declares action if the Lights button is pressed (toggles Lights on/off)\n    mySimpit.toggleAction(LIGHT_ACTION);\n  }\n\n  if (buttonABORT.isPressed()) { // declares action if the Abort button is pressed (activates the Abort action group)\n    mySimpit.toggleAction(ABORT_ACTION);\n  }\n\n  if (buttonAG_01.isPressed()) { // declares action if the Action Group 1 is pressed (toggles Action Group 1)\n    mySimpit.toggleCAG(1); \n  }\n\n  if (buttonAG_02.isPressed()) { // declares action if the Action Group 2 is pressed (toggles Action Group 2)\n    mySimpit.toggleCAG(2); \n  }\n\n  if (buttonAG_03.isPressed()) { // declares action if the Action Group 3 is pressed (toggles Action Group 3)\n    mySimpit.toggleCAG(3); \n  }\n\n  if (buttonAG_04.isPressed()) { // declares action if the Action Group 4 is pressed (toggles Action Group 4)\n    mySimpit.toggleCAG(4); \n  }\n\n  if (buttonAG_05.isPressed()) { // declares action if the Action Group 5 is pressed (toggles Action Group 5)\n    mySimpit.toggleCAG(5); \n  }\n\n  if (buttonAG_05.isPressed()) { // declares action if the Action Group 6 is pressed (toggles Action Group 6)\n    mySimpit.toggleCAG(6); \n  }\n\n  if (buttonAG_07.isPressed()) { // declares action if the Action Group 7 is pressed (toggles Action Group 7)\n    mySimpit.toggleCAG(7); \n  }\n\n  if (buttonAG_08.isPressed()) { // declares action if the Action Group 8 is pressed (toggles Action Group 8)\n    mySimpit.toggleCAG(8); \n  }\n\n  if (buttonAG_09.isPressed()) { // declares action if the Action Group 9 is pressed (toggles Action Group 9)\n    mySimpit.toggleCAG(9); \n  }\n\n  if (buttonAG_10.isPressed()) { // declares action if the Action Group 10 is pressed (toggles Action Group 10)\n    mySimpit.toggleCAG(10); \n  }\n\n  unsigned char throtResult = throtRotary.process();\n\n  if (throtResult == DIR_CW \u0026amp;\u0026amp; (throt_Counter \u0026lt;= 32349)) {\n    throt_Counter = throt_Counter \u002B 327; // increments the Throttle counter by ~1%\n    mySimpit.send(THROTTLE_MESSAGE, throt_Counter); // sends the new throttle setting to Simpit\n  }\n  if (throtResult == DIR_CCW \u0026amp;\u0026amp; (throt_Counter \u0026gt;= 327)) {\n    throt_Counter = throt_Counter - 327; // decrements the Throttle counter by ~1%\n    mySimpit.send(THROTTLE_MESSAGE, throt_Counter); // sends the new throttle setting to Simpit\n  }\n\n  unsigned char sasResult = sasRotary.process();\n\n  if (sasResult == DIR_CW) {\n    sas_Counter\u002B\u002B; // increments the SAS counter by 1\n    mySimpit.send(28, (unsigned char*) \u0026amp;sas_Counter, 1); // sends the new SAS mode setting to Simpit \n  }\n\n  if (sasResult == DIR_CCW) {\n    sas_Counter--; // decrements the SAS Counter by 1\n    mySimpit.send(28, (unsigned char*) \u0026amp;sas_Counter, 1); // sends the new SAS mode setting to Simpit\n  }\n\n\n} \n  \nvoid messageHandler(byte messageType, byte msg[], byte msgSize) { // sets up the message handler to receive messages from Simpit\n  switch(messageType) {\n  case ACTIONSTATUS_MESSAGE: // defines the set of actions for messages coming from ACTIONSTATUS_MESSAGE\n  byte actions = msg[0]; // assigns the ACTIONSTATUS_MESSAGE to the variable actions\n    if (actions \u0026amp; SAS_ACTION) { // checks to see if SAS is turned on\n      digitalWrite(SAS_LED, HIGH); // turns on the SAS LED indicator if SAS is on\n    } else {\n      digitalWrite(SAS_LED, LOW); // set SAS LED indicator off if SAS is off\n    }\n    if (actions \u0026amp; GEAR_ACTION) { // checks to see if Gear is down\n      digitalWrite(GEAR_LED, HIGH); // turns on Gear LED indicator if gear is down\n    } else {\n      digitalWrite(GEAR_LED, LOW); // set the Gear indicator off if gear is up\n    }\n    if (actions \u0026amp; LIGHT_ACTION) { // checks to see if Lights are on\n      digitalWrite(LIGHTS_LED, HIGH); // turns on Lights LED indicator if lights are on\n    } else {\n      digitalWrite(LIGHTS_LED, LOW); // set Lights indicator off if lights are off\n    }\n    if (actions \u0026amp; RCS_ACTION) { // checks to see if RCS is active\n      digitalWrite(RCS_LED, HIGH); // turns on the RCS LED indicator if RCS is active\n    } else {\n      digitalWrite(RCS_LED, LOW); // set RCS indicator off if RCS is inactive\n    }\n    if (actions \u0026amp; BRAKES_ACTION) { // checks to see if Brakes are on\n      digitalWrite(BRAKES_LED, HIGH); // turns on Brakes LED indicator if brakes are on\n    } else {\n      digitalWrite(BRAKES_LED, LOW); // set Brakes indicator off if brakes are off\n    }\n    break;\n}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nUPDATE: Here is the joystick portion of the\u00A0code that I finally got to work:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E\u00A0 int rot_X_Read = analogRead(ROT_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n\u00A0 if (rot_X_Read \u0026lt; 510 \u0026amp;\u0026amp; rot_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n\u00A0 \u00A0 rot_X_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n\u00A0 \u00A0 rot_X_Mapped = map(rot_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n\u00A0 }\n\u00A0 if (rot_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n\u00A0 \u00A0 rot_X_Mapped = map(rot_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n\u00A0 }\n\n\u00A0 int rot_Y_Read = analogRead(ROT_Y);\n\u00A0 if (rot_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; rot_Y_Read \u0026gt; 508) {\n\u00A0 \u00A0 rot_Y_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_Y_Read \u0026lt;= 508) {\n\u00A0 \u00A0 rot_Y_Mapped = map(rot_Y_Read, 344, 508, -32768, 0);\n\u00A0 }\n\u00A0 if (rot_Y_Read \u0026gt;= 518) {\n\u00A0 \u00A0 rot_Y_Mapped = map(rot_Y_Read, 518, 680, 0, 32767);\n\u00A0 }\n\n\u00A0 int rot_Z_Read = analogRead(ROT_Z);\n\u00A0 if (rot_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; rot_Z_Read \u0026gt; 510) {\n\u00A0 \u00A0 rot_Z_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_Z_Read \u0026lt;= 510) {\n\u00A0 \u00A0 rot_Z_Mapped = map(rot_Z_Read, 296, 510, -32768, 0);\n\u00A0 }\n\u00A0 if (rot_Z_Read \u0026gt;= 520) {\n\u00A0 \u00A0 rot_Z_Mapped = map(rot_Z_Read, 520, 733, 0, 32767);\n\u00A0 }\n\n\u00A0 myRotation.mask = 1|2|4;\n\u00A0 myRotation.pitch = rot_Y_Mapped;\n\u00A0 myRotation.roll = rot_X_Mapped; // applies the X-axis value as the rotation roll value\n\u00A0 myRotation.yaw = rot_Z_Mapped;\n\u00A0 mySimpit.send(ROTATION_MESSAGE, myRotation); // sends the roll value to Simpit\n\u00A0\n\u00A0 int trans_X_Read = analogRead(TRANS_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n\u00A0 if (trans_X_Read \u0026lt; 510 \u0026amp;\u0026amp; trans_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n\u00A0 \u00A0 trans_X_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n\u00A0 \u00A0 trans_X_Mapped = map(trans_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n\u00A0 }\n\u00A0 if (trans_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n\u00A0 \u00A0 trans_X_Mapped = map(trans_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n\u00A0 }\n\n\u00A0 int trans_Y_Read = analogRead(TRANS_Y);\n\u00A0 if (trans_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; trans_Y_Read \u0026gt; 508) {\n\u00A0 \u00A0 trans_Y_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_Y_Read \u0026lt;= 508) {\n\u00A0 \u00A0 trans_Y_Mapped = map(trans_Y_Read, 344, 508, -32768, 0);\n\u00A0 }\n\u00A0 if (trans_Y_Read \u0026gt;= 518) {\n\u00A0 \u00A0 trans_Y_Mapped = map(trans_Y_Read, 518, 680, 0, 32767);\n\u00A0 }\n\n\u00A0 int trans_Z_Read = analogRead(TRANS_Z);\n\u00A0 if (trans_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; trans_Z_Read \u0026gt; 510) {\n\u00A0 \u00A0 trans_Z_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_Z_Read \u0026lt;= 510) {\n\u00A0 \u00A0 trans_Z_Mapped = map(trans_Z_Read, 296, 510, -32768, 0);\n\u00A0 }\n\u00A0 if (trans_Z_Read \u0026gt;= 520) {\n\u00A0 \u00A0 trans_Z_Mapped = map(trans_Z_Read, 520, 733, 0, 32767);\n\u00A0 }\n\u00A0\u00A0\n\u00A0 myTranslation.mask = 1|2|4;\n\u00A0 myTranslation.X = trans_X_Mapped; // applies the X-axis value as the X translation value\n\u00A0 myTranslation.Y = trans_Y_Mapped;\n\u00A0 myTranslation.Z = trans_Z_Mapped;\n\u00A0 mySimpit.send(TRANSLATION_MESSAGE, myTranslation); // sends the x translation value to Simpit\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-06-05T11:50:54Z\u0022 title=\u002206/05/2020 11:50  AM\u0022 data-short=\u00224 yr\u0022\u003EJune 5, 2020\u003C/time\u003E by PSU_Jedi\u003C/strong\u003E\n\u003Cbr\u003EUpdate\n\u003C/span\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-06-29T13:27:05Z","Content":"\n\u003Cp\u003E\nBack after an extended break from all things Kerbal with some small maintenance releases.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EArduino library\u003C/strong\u003E is now up to 1.4.0. This release has some minor changes to the function definitions, to work with recent Arduino releases. I\u0027ve tested with Arduino 1.8.13, on macOS.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EKerbal Simpit plugin\u003C/strong\u003E has been updated to (coincidentally) 1.4.0 as well. This release builds against KSP 1.9.1, and removes a \u003Cem\u003Elot\u003C/em\u003E of old code that\u0027s now bundled with Unity.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E and AVC should find the new plugin now. Arduino is waiting for a library manager rescan, and I promise for sure I\u0027ll actually check to make sure it updated tomorrow. \u003Cspan\u003E\u003Cimg alt=\u0022:(\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 title=\u0022:(\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nNo real changes apart from just blowing off the dust, but I expect to find some time to catch up a little more in coming weeks.\n\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-07-01T14:34:47Z","Content":"\n\u003Cp\u003E\nBecause I happened to be awake at the right time, version 1.4.1 is available, built against KSP 1.10.0. Should pop up in the next \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E index run.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"Mofates","CreatedById":194097,"CreatedDateTime":"2020-07-14T04:44:10Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223788009\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221589939477\u0022 data-ipsquote-userid=\u0022193780\u0022 data-ipsquote-username=\u0022LRTNZ\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 5/19/2020 at 9:51 PM, LRTNZ said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/201941-tygurduck/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022201941\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/201941-tygurduck/\u0022 rel=\u0022\u0022\u003E@TygurDuck\u003C/a\u003E The big issue is that you are running blocking code - this is where you prevent the processor from doing anything else, as it is stuck in a delay.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/194097-mofates/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022194097\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/194097-mofates/\u0022 rel=\u0022\u0022\u003E@Mofates\u003C/a\u003E your demo code using the boolean operators and the timer code is how I would recommend to do it. There is one really big issue though - that is, you have about 65 seconds of useful time to use it, before you will probably encounter some really weird timing bugs, when lastBlink rolls over back to zero. An unsigned int on an arduino has a maximum value of 65,535. As you are storing milliseconds, that comes to just over a minute, until it rolls over. You need to be using an unsigned long, which can hold a maximum value of 4,294,967,295 - if you manage to exceed that, you really need to stop playing \u003Cspan\u003E\u003Cimg alt=\u0022:)\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 title=\u0022:)\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u003Ca contenteditable=\u0022false\u0022 data-ipshover=\u0022\u0022 data-ipshover-target=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/193780-lrtnz/\u0026amp;do=hovercard\u0022 data-mentionid=\u0022193780\u0022 href=\u0022https://forum.kerbalspaceprogram.com/index.php?/profile/193780-lrtnz/\u0022 rel=\u0022\u0022\u003E@LRTNZ\u003C/a\u003Eyes, of course it should have been an unsigned long!\u00A0 I have no idea what part of my brain saw a squirrel while I was writing that.\u00A0 \u003Cspan\u003E: )\u003C/span\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-14T04:47:36Z\u0022 title=\u002207/14/2020 04:47  AM\u0022 data-short=\u00223 yr\u0022\u003EJuly 14, 2020\u003C/time\u003E by Mofates\u003C/strong\u003E\n\u003Cbr\u003EFixed @Tag\n\u003C/span\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-07-14T14:49:54Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223720059\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221577042847\u0022 data-ipsquote-userid=\u0022201941\u0022 data-ipsquote-username=\u0022TygurDuck\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 12/23/2019 at 6:27 AM, TygurDuck said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nDo I have to use Altnerate Resource Panel for it to work at all?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nTo answer a fairly old question: yes, without ARP the resource channels will not be sent at all. I\u0027ll make sure the documentation is clearer on this.\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nGetting stage and vessel resources isn\u0027t exactly a trivial thing - there\u0027s some calculation involved. Rather than reinvent the wheel I chose to use the very tidy API that Alternate Resources Panel provides for its data.\n\u003C/p\u003E\n\u003Cp\u003E\n(for bonus points, even though simpit only supports stock resources, using ARP makes it really really easy to write a companion plugin for modded resources)\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"PSU_Jedi","CreatedById":170782,"CreatedDateTime":"2020-07-20T14:21:37Z","Content":"\n\u003Cp\u003E\nMy control box becomes unresponsive ~20-30 minutes into gameplay, or sometimes it seems shorter if I\u0027m using the analog joysticks a lot.\u00A0Given that, it seems that maybe the information exchange between the Mega board and the game is getting overloaded? Also, the rotary encoder for my \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E mode selector isn\u0027t working anymore. Could be that the wiring came loose (hard to check without pulling the whole panel off the control box), but if you see anything in that part of the code that would give you pause, let me know please.\u00A0BTW, I also have a Leonardo emulating keyboard commands into KSP running on the same control box. It continues to function indefinitely, even after the Mega quits functioning.\n\u003C/p\u003E\n\u003Cp\u003E\nCode is below...any help would be appreciated!\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E// Sets up the Arduino Mega to handle the analog joysticks, Action Groups, switches and buttons\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpit.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpitMessageTypes.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PayloadStructs.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ezButton.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E // loads ezButton library for button debounce\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Rotary.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\nrotationMessage myRotation;\ntranslationMessage myTranslation;\n\nconst int ROT_X = A0; // assigns rotation joystick X-axis to pin Analog 0\nconst int ROT_Y = A1; // assigns rotation joystick Y-axis to pin Analog 1\nconst int ROT_Z = A2; // assigns rotation joystick Z-axis to pin Analog 2\nconst int TRANS_X = A3; // assigns translation joystick X-axis to pin Analog 3\nconst int TRANS_Y = A4; // assigns translation joystick Y-axis to pin Analog 4\nconst int TRANS_Z = A5; // assigns translation joystick Z-axis to pin Analog 5\nconst int STAGE_BTN = 2; // assigns the Staging button to pin 2\nconst int RCS_LED = 3; // assigns the RCS indicator LED to pin 3\nconst int BRAKES_LED = 4; // assigns the Brakes indicator LED to pin 4\nconst int GEAR_LED = 5; // assigns the Landing Gear indicator LED to pin 5\nconst int LIGHTS_LED = 6; // assigns the Lights indicator LED to pin 6\nconst int SAS_LED = 7; // assigns the SAS indicator LED to pin 7\nconst int THROT_CLK = 22; // assigns the Throttle rotary encoder CLK output (\u0022A\u0022) to pin 22\nconst int THROT_DT = 23; // assigns the Throttle rotary encoder DT output (\u0022B\u0022) to pin 23\nconst int THROT_BTN = 24; // assigns the Throttle rotary encoder Switch output to pin 24\nconst int THROT_CUT = 25; // assigns the Throttle Cut button output to pin 25\nconst int SAS_CLK = 32; // assigns the SAS rotary encoder CLK output (\u0022A\u0022) to pin 32\nconst int SAS_DT = 33; // assigns the SAS rotary encoder DT output (\u0022B\u0022) to pin 33\nconst int SAS_SWITCH = 34; // assigns the SAS switch output to pin 34\nconst int RCS_SWITCH = 35; // assigns the RCS switch output to pin 35\nconst int BRAKES_SWITCH = 36; // assigns the Brakes switch output to pin 36\nconst int GEAR_SWITCH = 37; // assigns the Gear switch output to pin 37\nconst int LIGHTS_SWITCH = 38; // assigns the Lights switch output to pin 38\nconst int ABORT_BTN = 39; // assigns the Abort switch output to pin 38\nconst int AG_01 = 41; // assigns the Action Group 1 switch output to pin 41\nconst int AG_02 = 42; // assigns the Action Group 2 switch output to pin 42\nconst int AG_03 = 43; // assigns the Action Group 3 switch output to pin 43\nconst int AG_04 = 44; // assigns the Action Group 4 switch output to pin 44\nconst int AG_05 = 45; // assigns the Action Group 5 switch output to pin 45\nconst int AG_06 = 46; // assigns the Action Group 6 switch output to pin 46\nconst int AG_07 = 47; // assigns the Action Group 7 switch output to pin 47\nconst int AG_08 = 48; // assigns the Action Group 8 switch output to pin 48\nconst int AG_09 = 49; // assigns the Action Group 9 switch output to pin 49\nconst int AG_10 = 50; // assigns the Action Group 10 switch output to pin 50\n\nint sas_Counter = 1; // initializes SAS Mode counter value variable at 1\nint currentSASStateCLK;\nint lastSASStateCLK;\nint throt_Counter = 0; // initializes Throttle counter value variable at 0\nint currentThrotStateCLK;\nint lastThrotStateCLK;\nint rot_X_Read;\nint rot_Y_Read;\nint rot_Z_Read;\nint rot_X_Mapped;\nint rot_Y_Mapped;\nint rot_Z_Mapped;\nint trans_X_Read;\nint trans_Y_Read;\nint trans_Z_Read;\nint trans_X_Mapped;\nint trans_Y_Mapped;\nint trans_Z_Mapped;\nint debounce_Time = 25;\n\nKerbalSimpit mySimpit(Serial);\n\nezButton buttonSTAGE(STAGE_BTN);\nezButton buttonTHROT(THROT_BTN);\nezButton buttonTHROT_CUT(THROT_CUT);\nezButton buttonSAS(SAS_SWITCH);\nezButton buttonRCS(RCS_SWITCH);\nezButton buttonBRAKES(BRAKES_SWITCH);\nezButton buttonGEAR(GEAR_SWITCH);\nezButton buttonLIGHTS(LIGHTS_SWITCH);\nezButton buttonABORT(ABORT_BTN);\nezButton buttonAG_01(AG_01);\nezButton buttonAG_02(AG_02);\nezButton buttonAG_03(AG_03);\nezButton buttonAG_04(AG_04);\nezButton buttonAG_05(AG_05);\nezButton buttonAG_06(AG_06);\nezButton buttonAG_07(AG_07);\nezButton buttonAG_08(AG_08);\nezButton buttonAG_09(AG_09);\nezButton buttonAG_10(AG_10);\n\nRotary throtRotary = Rotary(THROT_DT, THROT_CLK);\nRotary sasRotary = Rotary(SAS_DT, SAS_CLK);\n\nvoid setup() {\n\u00A0 Serial.begin(115200); // begins the serial connection to the computer through USB\n\u00A0 pinMode(ROT_X, INPUT); // defines inputs and outputs on Arduino pins\n\u00A0 pinMode(ROT_Y, INPUT);\n\u00A0 pinMode(ROT_Z, INPUT);\n\u00A0 pinMode(TRANS_X, INPUT);\n\u00A0 pinMode(TRANS_Y, INPUT);\n\u00A0 pinMode(TRANS_Z, INPUT);\n\u00A0 pinMode(STAGE_BTN, INPUT_PULLUP);\n\u00A0 pinMode(SAS_LED, OUTPUT);\u00A0\n\u00A0 pinMode(RCS_LED, OUTPUT);\n\u00A0 pinMode(BRAKES_LED, OUTPUT);\n\u00A0 pinMode(GEAR_LED, OUTPUT);\n\u00A0 pinMode(LIGHTS_LED, OUTPUT);\u00A0\n\u00A0 pinMode(SAS_CLK, INPUT);\n\u00A0 pinMode(SAS_DT, INPUT);\n\u00A0 pinMode(SAS_SWITCH, INPUT);\n\u00A0 pinMode(THROT_CLK, INPUT);\n\u00A0 pinMode(THROT_DT, INPUT);\n\u00A0 pinMode(THROT_BTN, INPUT);\n\u00A0 pinMode(SAS_SWITCH, INPUT_PULLUP);\n\u00A0 pinMode(RCS_SWITCH, INPUT_PULLUP);\n\u00A0 pinMode(BRAKES_SWITCH, INPUT_PULLUP);\n\u00A0 pinMode(GEAR_SWITCH, INPUT_PULLUP);\n\u00A0 pinMode(LIGHTS_SWITCH, INPUT_PULLUP);\n\u00A0 pinMode(ABORT_BTN, INPUT_PULLUP);\n\u00A0 pinMode(AG_01, INPUT_PULLUP);\n\u00A0 pinMode(AG_02, INPUT_PULLUP);\n\u00A0 pinMode(AG_03, INPUT_PULLUP);\n\u00A0 pinMode(AG_04, INPUT_PULLUP);\n\u00A0 pinMode(AG_05, INPUT_PULLUP);\n\u00A0 pinMode(AG_06, INPUT_PULLUP);\n\u00A0 pinMode(AG_07, INPUT_PULLUP);\n\u00A0 pinMode(AG_08, INPUT_PULLUP);\n\u00A0 pinMode(AG_09, INPUT_PULLUP);\n\u00A0 pinMode(AG_10, INPUT_PULLUP); \u00A0\n\n\u00A0 buttonSTAGE.setDebounceTime(debounce_Time); // sets debounce times for buttons\n\u00A0 buttonTHROT.setDebounceTime(debounce_Time);\n\u00A0 buttonTHROT_CUT.setDebounceTime(debounce_Time);\n\u00A0 buttonSAS.setDebounceTime(debounce_Time);\n\u00A0 buttonRCS.setDebounceTime(debounce_Time);\n\u00A0 buttonBRAKES.setDebounceTime(debounce_Time);\n\u00A0 buttonGEAR.setDebounceTime(debounce_Time);\n\u00A0 buttonLIGHTS.setDebounceTime(debounce_Time);\n\u00A0 buttonABORT.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_01.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_02.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_03.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_04.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_05.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_06.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_07.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_08.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_09.setDebounceTime(debounce_Time);\n\u00A0 buttonAG_10.setDebounceTime(debounce_Time);\n\n\u00A0 digitalWrite(SAS_LED, HIGH); // turns on all the LEDs while the handshake process is happening\n\u00A0 digitalWrite(RCS_LED, HIGH);\n\u00A0 digitalWrite(BRAKES_LED, HIGH);\n\u00A0 digitalWrite(GEAR_LED, HIGH);\n\u00A0 digitalWrite(LIGHTS_LED, HIGH);\n\u00A0 while (!mySimpit.init()) { // initializes (handshakes) with Simpit mod\n\u00A0 \u00A0 delay(100);\n\u00A0 }\n\u00A0 digitalWrite(SAS_LED, LOW); // turns off all the LEDs once the handshake process is complete\n\u00A0 digitalWrite(RCS_LED, LOW);\n\u00A0 digitalWrite(BRAKES_LED, LOW);\n\u00A0 digitalWrite(GEAR_LED, LOW);\n\u00A0 digitalWrite(LIGHTS_LED, LOW);\n\n\u00A0 mySimpit.inboundHandler(messageHandler); // declares the message handler to read incoming messages from Simpit mod\n\u00A0 mySimpit.registerChannel(ACTIONSTATUS_MESSAGE); // subscribes to the Action Status message channel\n\u00A0 mySimpit.registerChannel(ROTATION_MESSAGE); // subscribes to the Rotation message channel\n\u00A0 mySimpit.registerChannel(TRANSLATION_MESSAGE); // subscribes to the Translation message channel\n\u00A0 mySimpit.registerChannel(SCENE_CHANGE_MESSAGE); // subscribes to the Scene Change message channel\n}\n\nvoid loop() {\n\u00A0 mySimpit.update(); // necessary updates and loops for called functions\n\u00A0 buttonSTAGE.loop();\n\u00A0 buttonTHROT.loop();\n\u00A0 buttonTHROT_CUT.loop();\n\u00A0 buttonSAS.loop();\n\u00A0 buttonRCS.loop();\n\u00A0 buttonBRAKES.loop();\n\u00A0 buttonGEAR.loop();\n\u00A0 buttonLIGHTS.loop();\n\u00A0 buttonABORT.loop();\n\u00A0 buttonAG_01.loop();\n\u00A0 buttonAG_02.loop();\n\u00A0 buttonAG_03.loop();\n\u00A0 buttonAG_04.loop();\n\u00A0 buttonAG_05.loop();\n\u00A0 buttonAG_06.loop();\n\u00A0 buttonAG_07.loop();\n\u00A0 buttonAG_08.loop();\n\u00A0 buttonAG_09.loop();\n\u00A0 buttonAG_10.loop(); \u00A0\n\n\u00A0 throt_Counter = constrain(throt_Counter, 0, 32767); // sets upper and lower limits for counter variables for rotary encoders\n\u00A0 sas_Counter = constrain(sas_Counter, 1, 10);\n\n\u00A0 int rot_X_Read = analogRead(ROT_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n\u00A0 if (rot_X_Read \u0026lt; 510 \u0026amp;\u0026amp; rot_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n\u00A0 \u00A0 rot_X_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n\u00A0 \u00A0 rot_X_Mapped = map(rot_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n\u00A0 }\n\u00A0 if (rot_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n\u00A0 \u00A0 rot_X_Mapped = map(rot_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n\u00A0 }\n\n\u00A0 int rot_Y_Read = analogRead(ROT_Y);\n\u00A0 if (rot_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; rot_Y_Read \u0026gt; 508) {\n\u00A0 \u00A0 rot_Y_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_Y_Read \u0026lt;= 508) {\n\u00A0 \u00A0 rot_Y_Mapped = map(rot_Y_Read, 344, 508, -32768, 0);\n\u00A0 }\n\u00A0 if (rot_Y_Read \u0026gt;= 518) {\n\u00A0 \u00A0 rot_Y_Mapped = map(rot_Y_Read, 518, 680, 0, 32767);\n\u00A0 }\n\n\u00A0 int rot_Z_Read = analogRead(ROT_Z);\n\u00A0 if (rot_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; rot_Z_Read \u0026gt; 510) {\n\u00A0 \u00A0 rot_Z_Mapped = 0;\n\u00A0 }\n\u00A0 if (rot_Z_Read \u0026lt;= 510) {\n\u00A0 \u00A0 rot_Z_Mapped = map(rot_Z_Read, 296, 510, -32768, 0);\n\u00A0 }\n\u00A0 if (rot_Z_Read \u0026gt;= 520) {\n\u00A0 \u00A0 rot_Z_Mapped = map(rot_Z_Read, 520, 733, 0, 32767);\n\u00A0 }\n\n\u00A0 myRotation.mask = 1|2|4;\n\u00A0 myRotation.pitch = rot_Y_Mapped;\n\u00A0 myRotation.roll = rot_X_Mapped; // applies the X-axis value as the rotation roll value\n\u00A0 myRotation.yaw = rot_Z_Mapped;\n\u00A0 mySimpit.send(ROTATION_MESSAGE, myRotation); // sends the rotation value to Simpit\n\u00A0\n\u00A0 int trans_X_Read = analogRead(TRANS_X); // takes a reading for the X-axis; from testing determined X-min = 330, X-mid = 505, X-max = 693\n\u00A0 if (trans_X_Read \u0026lt; 510 \u0026amp;\u0026amp; trans_X_Read \u0026gt; 500) { // determines if the X-axis pot is in the middle deadzone to eliminate jitter\n\u00A0 \u00A0 trans_X_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_X_Read \u0026lt;= 500) { // determines if X-axis pot is in the negative portion of its motion\n\u00A0 \u00A0 trans_X_Mapped = map(trans_X_Read, 330, 500, -32768, 0); // sets the mapping for the negative portion of the axis\n\u00A0 }\n\u00A0 if (trans_X_Read \u0026gt;= 510) { // determined if X-axis pot is in the positive portion of its motion\n\u00A0 \u00A0 trans_X_Mapped = map(trans_X_Read, 510, 693, 0, 32767); // sets the mapping for the positive portion of the axis\n\u00A0 }\n\n\u00A0 int trans_Y_Read = analogRead(TRANS_Y);\n\u00A0 if (trans_Y_Read \u0026lt; 518 \u0026amp;\u0026amp; trans_Y_Read \u0026gt; 508) {\n\u00A0 \u00A0 trans_Y_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_Y_Read \u0026lt;= 508) {\n\u00A0 \u00A0 trans_Y_Mapped = map(trans_Y_Read, 344, 508, -32768, 0);\n\u00A0 }\n\u00A0 if (trans_Y_Read \u0026gt;= 518) {\n\u00A0 \u00A0 trans_Y_Mapped = map(trans_Y_Read, 518, 680, 0, 32767);\n\u00A0 }\n\n\u00A0 int trans_Z_Read = analogRead(TRANS_Z);\n\u00A0 if (trans_Z_Read \u0026lt; 520 \u0026amp;\u0026amp; trans_Z_Read \u0026gt; 510) {\n\u00A0 \u00A0 trans_Z_Mapped = 0;\n\u00A0 }\n\u00A0 if (trans_Z_Read \u0026lt;= 510) {\n\u00A0 \u00A0 trans_Z_Mapped = map(trans_Z_Read, 296, 510, -32768, 0);\n\u00A0 }\n\u00A0 if (trans_Z_Read \u0026gt;= 520) {\n\u00A0 \u00A0 trans_Z_Mapped = map(trans_Z_Read, 520, 733, 0, 32767);\n\u00A0 }\n\u00A0\u00A0\n\u00A0 myTranslation.mask = 1|2|4;\n\u00A0 myTranslation.X = trans_X_Mapped; // applies the X-axis value as the X translation value\n\u00A0 myTranslation.Y = trans_Y_Mapped;\n\u00A0 myTranslation.Z = trans_Z_Mapped;\n\u00A0 mySimpit.send(TRANSLATION_MESSAGE, myTranslation); // sends the translation value to Simpit\n\n\u00A0 if (buttonSTAGE.isPressed()) {\n\u00A0 \u00A0 mySimpit.toggleAction(STAGE_ACTION);\n\u00A0 }\n\n\u00A0 if (buttonTHROT.isPressed()) {\n\u00A0 \u00A0 throt_Counter = 32767;\n\u00A0 \u00A0 mySimpit.send(THROTTLE_MESSAGE, throt_Counter);\n\u00A0 }\n\n\u00A0 if (buttonTHROT_CUT.isPressed()) {\n\u00A0 \u00A0 throt_Counter = 0;\n\u00A0 \u00A0 mySimpit.send(THROTTLE_MESSAGE, throt_Counter);\n\u00A0 }\n\u00A0\u00A0\n\u00A0 if (buttonSAS.isPressed()) {\n\u00A0 \u00A0 mySimpit.toggleAction(SAS_ACTION);\n\u00A0 }\n\u00A0\u00A0\n\u00A0 if (buttonRCS.isPressed()) { // declares action if the RCS button is pressed (toggles RCS on/off)\n\u00A0 \u00A0 mySimpit.toggleAction(RCS_ACTION);\n\u00A0 }\n\u00A0 if (buttonBRAKES.isPressed()) { // declares action if the Brakes button is pressed (toggles Brakes on/off)\n\u00A0 \u00A0 mySimpit.toggleAction(BRAKES_ACTION);\n\u00A0 }\n\u00A0 if (buttonGEAR.isPressed()) { // declares action if the Gear button is pressed (toggles Gear up/down)\n\u00A0 \u00A0 mySimpit.toggleAction(GEAR_ACTION);\n\u00A0 }\n\u00A0 if (buttonLIGHTS.isPressed()) { // declares action if the Lights button is pressed (toggles Lights on/off)\n\u00A0 \u00A0 mySimpit.toggleAction(LIGHT_ACTION);\n\u00A0 }\n\n\u00A0 if (buttonABORT.isPressed()) { // declares action if the Abort button is pressed (activates the Abort action group)\n\u00A0 \u00A0 mySimpit.toggleAction(ABORT_ACTION);\n\u00A0 }\n\n\u00A0 if (buttonAG_01.isPressed()) { // declares action if the Action Group 1 is pressed (toggles Action Group 1)\n\u00A0 \u00A0 mySimpit.toggleCAG(1);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_02.isPressed()) { // declares action if the Action Group 2 is pressed (toggles Action Group 2)\n\u00A0 \u00A0 mySimpit.toggleCAG(2);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_03.isPressed()) { // declares action if the Action Group 3 is pressed (toggles Action Group 3)\n\u00A0 \u00A0 mySimpit.toggleCAG(3);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_04.isPressed()) { // declares action if the Action Group 4 is pressed (toggles Action Group 4)\n\u00A0 \u00A0 mySimpit.toggleCAG(4);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_05.isPressed()) { // declares action if the Action Group 5 is pressed (toggles Action Group 5)\n\u00A0 \u00A0 mySimpit.toggleCAG(5);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_05.isPressed()) { // declares action if the Action Group 6 is pressed (toggles Action Group 6)\n\u00A0 \u00A0 mySimpit.toggleCAG(6);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_07.isPressed()) { // declares action if the Action Group 7 is pressed (toggles Action Group 7)\n\u00A0 \u00A0 mySimpit.toggleCAG(7);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_08.isPressed()) { // declares action if the Action Group 8 is pressed (toggles Action Group 8)\n\u00A0 \u00A0 mySimpit.toggleCAG(8);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_09.isPressed()) { // declares action if the Action Group 9 is pressed (toggles Action Group 9)\n\u00A0 \u00A0 mySimpit.toggleCAG(9);\u00A0\n\u00A0 }\n\n\u00A0 if (buttonAG_10.isPressed()) { // declares action if the Action Group 10 is pressed (toggles Action Group 10)\n\u00A0 \u00A0 mySimpit.toggleCAG(10);\u00A0\n\u00A0 }\n\n\u00A0 unsigned char throtResult = throtRotary.process();\n\n\u00A0 if (throtResult == DIR_CW \u0026amp;\u0026amp; (throt_Counter \u0026lt;= 29487)) {\n\u00A0 \u00A0 throt_Counter = throt_Counter \u002B 3276; // increments the Throttle counter by ~10%\n\u00A0 \u00A0 mySimpit.send(THROTTLE_MESSAGE, throt_Counter); // sends the new throttle setting to Simpit\n\u00A0 }\n\u00A0 if (throtResult == DIR_CCW \u0026amp;\u0026amp; (throt_Counter \u0026gt;= 3276)) {\n\u00A0 \u00A0 throt_Counter = throt_Counter - 3276; // decrements the Throttle counter by ~10%\n\u00A0 \u00A0 mySimpit.send(THROTTLE_MESSAGE, throt_Counter); // sends the new throttle setting to Simpit\n\u00A0 }\n\n\u00A0 unsigned char sasResult = sasRotary.process();\n\n\u00A0 if (sasResult == DIR_CW) {\n\u00A0 \u00A0 sas_Counter\u002B\u002B; // increments the SAS counter by 1\n\u00A0 \u00A0 mySimpit.send(28, (unsigned char*) \u0026amp;sas_Counter, 1); // sends the new SAS mode setting to Simpit\u00A0\n\u00A0 }\n\n\u00A0 if (sasResult == DIR_CCW) {\n\u00A0 \u00A0 sas_Counter--; // decrements the SAS Counter by 1\n\u00A0 \u00A0 mySimpit.send(28, (unsigned char*) \u0026amp;sas_Counter, 1); // sends the new SAS mode setting to Simpit\n\u00A0 }\n}\u00A0\n\u00A0\u00A0\nvoid messageHandler(byte messageType, byte msg[], byte msgSize) { // sets up the message handler to receive messages from Simpit\n\u00A0 switch(messageType) {\n\u00A0 case ACTIONSTATUS_MESSAGE: // defines the set of actions for messages coming from ACTIONSTATUS_MESSAGE\n\u00A0 byte actions = msg[0]; // assigns the ACTIONSTATUS_MESSAGE to the variable actions\n\u00A0 \u00A0 if (actions \u0026amp; SAS_ACTION) { // checks to see if SAS is turned on\n\u00A0 \u00A0 \u00A0 digitalWrite(SAS_LED, HIGH); // turns on the SAS LED indicator if SAS is on\n\u00A0 \u00A0 } else {\n\u00A0 \u00A0 \u00A0 digitalWrite(SAS_LED, LOW); // set SAS LED indicator off if SAS is off\n\u00A0 \u00A0 }\n\u00A0 \u00A0 if (actions \u0026amp; GEAR_ACTION) { // checks to see if Gear is down\n\u00A0 \u00A0 \u00A0 digitalWrite(GEAR_LED, HIGH); // turns on Gear LED indicator if gear is down\n\u00A0 \u00A0 } else {\n\u00A0 \u00A0 \u00A0 digitalWrite(GEAR_LED, LOW); // set the Gear indicator off if gear is up\n\u00A0 \u00A0 }\n\u00A0 \u00A0 if (actions \u0026amp; LIGHT_ACTION) { // checks to see if Lights are on\n\u00A0 \u00A0 \u00A0 digitalWrite(LIGHTS_LED, HIGH); // turns on Lights LED indicator if lights are on\n\u00A0 \u00A0 } else {\n\u00A0 \u00A0 \u00A0 digitalWrite(LIGHTS_LED, LOW); // set Lights indicator off if lights are off\n\u00A0 \u00A0 }\n\u00A0 \u00A0 if (actions \u0026amp; RCS_ACTION) { // checks to see if RCS is active\n\u00A0 \u00A0 \u00A0 digitalWrite(RCS_LED, HIGH); // turns on the RCS LED indicator if RCS is active\n\u00A0 \u00A0 } else {\n\u00A0 \u00A0 \u00A0 digitalWrite(RCS_LED, LOW); // set RCS indicator off if RCS is inactive\n\u00A0 \u00A0 }\n\u00A0 \u00A0 if (actions \u0026amp; BRAKES_ACTION) { // checks to see if Brakes are on\n\u00A0 \u00A0 \u00A0 digitalWrite(BRAKES_LED, HIGH); // turns on Brakes LED indicator if brakes are on\n\u00A0 \u00A0 } else {\n\u00A0 \u00A0 \u00A0 digitalWrite(BRAKES_LED, LOW); // set Brakes indicator off if brakes are off\n\u00A0 \u00A0 }\n\u00A0 \u00A0 break;\n\u00A0 case SCENE_CHANGE_MESSAGE: // defines the set of actions for messages coming from SCENE-CHANGE-MESSAGE\n\u00A0 byte scene_state = msg[0]; // assigns the SCENE_CHANGE_MESSAGE to the variable scene_state\n\u00A0 \u00A0 if (scene_state \u0026amp; 0x01) { // checks to see if we are leaving the Flight scene\n\u00A0 \u00A0 \u00A0 digitalWrite(SAS_LED, LOW); // turns off all LED indicators is leaving the Flight scene\n\u00A0 \u00A0 \u00A0 digitalWrite(GEAR_LED, LOW);\n\u00A0 \u00A0 \u00A0 digitalWrite(LIGHTS_LED, LOW);\n\u00A0 \u00A0 \u00A0 digitalWrite(RCS_LED, LOW);\n\u00A0 \u00A0 \u00A0 digitalWrite(BRAKES_LED, LOW);\n\u00A0 \u00A0 }\n\u00A0 \u00A0 break;\n}\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-07-21T10:49:24Z","Content":"\n\u003Cp\u003E\nHey mate. Sorry you\u0027ve been having troubles. Let me start with the easiest stuff first:\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823447\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595254897\u0022 data-ipsquote-userid=\u0022170782\u0022 data-ipsquote-username=\u0022PSU_Jedi\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n19 hours ago, PSU_Jedi said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nAlso, the rotary encoder for my \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E mode selector isn\u0027t working anymore. Could be that the wiring came loose (hard to check without pulling the whole panel off the control box), but if you see anything in that part of the code that would give you pause, let me know please.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI\u0027m not familiar with rotary encoders at all tbh, but I assume you\u0027re using the library at \u003Ca href=\u0022https://github.com/brianlow/Rotary\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/brianlow/Rotary\u003C/a\u003E to work with it (that\u0027s the one I installed in my IDE to get your sketch to compile).\n\u003C/p\u003E\n\u003Cp\u003E\nYou\u0027re right, the first thing to check is that it actually works at all. If it were me I\u0027d test it with one of the Rotary library examples - it looks like your code basically replicates what the Polling example does.\n\u003C/p\u003E\n\u003Cp\u003E\nAfter that, I\u0027d be thinking about whether or not turning rotary encoder events are just getting lost because your code is so busy doing other things that it can\u0027t poll fast enough. Did it just recently stop working after you had the rest of your setup finalised? Or did it stop somewhere along the way of adding more functionality to your sketch? It might be that you have to delve in to figuring out how to use interrupts to do some processing of events from your encoders.\n\u003C/p\u003E\n\u003Cp\u003E\nThat said, I can\u0027t see anything \u003Cstrong\u003Ewrong\u003C/strong\u003E with your code, but I do have some suggestions!\n\u003C/p\u003E\n\u003Cp\u003E\nYour \u003Cabbr title=\u0022Stability Augmentation System\u0022\u003ESAS\u003C/abbr\u003E calls, like\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003EmySimpit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esend\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E28\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eunsigned\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Echar\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esas_Counter\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// sends the new SAS mode setting to Simpit\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nfeel clumsy. Do you really need to use the pointers there? I thought just \u0060mySimpit.send(28, sas_Counter, 1);\u0060 would work. And, indeed, I had to change the code to that to make it compile on my local machine using Arduino 1.8.3 and Simpit 1.4.0. Haven\u0027t actually run it though. \u003Cspan\u003E\u003Cimg alt=\u0022:(\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 title=\u0022:(\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nYour joystick read routines will be \u003Cem\u003Eslightly\u003C/em\u003E faster with a series of if/else statements rather than just ifs. Like this\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E  \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E analogRead\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EROT_Y\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eelse\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Emap\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E344\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E32768\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eelse\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Emap\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E680\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E32767\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nThe only other thing I\u0027ll say is that digitalWrite is surprisingly slow. Your messageHandler currently writes every single action LED whenever you get an ACTIONSTATUS message. If you keep variables tracking what the LED currently is, you can write messageHandler so it only updates the LED if it changes. Something like\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022com\u0022\u003E// First we need a global variable to remember SAS state:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// You could use a shorter type here if you\u0027re tight on space.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Then we do this in messageHandler:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Check if SAS_ACTION in our actions packet matches what we remember.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// If not, remember the current value and write it to the LED.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eactions \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E SAS_ACTION \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E!=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  sasActive \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E actions \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E SAS_ACTION\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  digitalWrite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ESAS_LED\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// no else required any more!\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nOK. That\u0027s the easy stuff.\n\u003C/p\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-07-21T11:09:32Z","Content":"\n\u003Cp\u003E\nNow the harder stuff.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823447\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595254897\u0022 data-ipsquote-userid=\u0022170782\u0022 data-ipsquote-username=\u0022PSU_Jedi\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n20 hours ago, PSU_Jedi said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nMy control box becomes unresponsive ~20-30 minutes into gameplay, or sometimes it seems shorter if I\u0027m using the analog joysticks a lot.\u00A0Given that, it seems that maybe the information exchange between the Mega board and the game is getting overloaded?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI do not know why. Yet. But let me ask the stupid questions: what exactly do you mean by unresponsive? Does it just stop updating LEDs? Does it just stop sending data from your joysticks? Is it both? Does it catch fire (OK maybe not, but I definitely had a small fire on my controller thanks to a shorted LED at one point)?\n\u003C/p\u003E\n\u003Cp\u003E\nMy first thought was maybe you were leaking memory somehow and the arduino was resetting. But that doesn\u0027t seem likely - you\u0027ve got a lot of free RAM, and I don\u0027t see any obvious leaks in this code (although there might be some in the library?). And you\u0027re also turning all of your LEDs on in your init. If the arduino was resetting then your board would light up. So that\u0027s not it.\n\u003C/p\u003E\n\u003Cp\u003E\nYour thinking around the volume of info getting from the game to your mega is overloading things could be right. I think that would mean that the serial buffer on your Arduino is filling up faster than your sketch is able to read it. You can check that! The serial buffer should be 64 bytes, I think, and \u0060Serial.available()\u0060 will tell you how many bytes are in the buffer. So you could temporarily repurpose one of your LEDs and use it to tell you if the buffer ever gets full. Remove the code from messageHandler that updates your Brake LED (because nobody should ever be using the brakes, gosh!), and then put something like this at the top of your loop(). Note that the best place for it is right \u003Cstrong\u003Ebefore\u003C/strong\u003E you call the simpit update, because that\u0027s the fullest the buffer will get.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\u003Cspan class=\u0022com\u0022\u003E// The serial receive buffer should be 64 bytes.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Check how much is there, and flip a warning light on if we\u0027ve filled it:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003ESerial\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eavailable\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E63\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  digitalWrite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EBRAKES_LED\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E HIGH\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd then play until\u00A0 your board stops. If the brake light comes on at any point there, then you know to blame the buffer.\n\u003C/p\u003E\n\u003Cp\u003E\nFinally, you can also get more logging out of the game. It\u0027s worth turning on the debug flag in the Kerbal Simpit config file. Play until you get the problem, and then upload the KSP.log file somewhere I can get to it. With the debug flag on, Simpit logs a \u003Cem\u003Elot\u003C/em\u003E. You should be able to find messages from it by just searching the log file for \u0022KerbalSimpit\u0022.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-07-21T11:11:17Z\u0022 title=\u002207/21/2020 11:11  AM\u0022 data-short=\u00223 yr\u0022\u003EJuly 21, 2020\u003C/time\u003E by stibbons\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"stibbons","CreatedById":57865,"CreatedDateTime":"2020-07-22T11:28:06Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823447\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595254897\u0022 data-ipsquote-userid=\u0022170782\u0022 data-ipsquote-username=\u0022PSU_Jedi\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/21/2020 at 12:21 AM, PSU_Jedi said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nGiven that, it seems that maybe the information exchange between the Mega board and the game is getting overloaded?\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nGah, I forgot the one other thing fairly simple thing you can try to test this theory, without having to recompile your controller fimrware. It might be worth experimenting with the RefreshRate in the config file. The default is 125 milliseconds, maybe try doubling that to 250 and see how you go.\n\u003C/p\u003E\n"},{"CreatedByName":"PSU_Jedi","CreatedById":170782,"CreatedDateTime":"2020-07-24T14:51:12Z","Content":"\n\u003Cp\u003E\nI\u0027m running KSP version 1.10.0.2917 on Windows 10. Acording to \u003Cabbr title=\u0022Comprehensive Kerbal Archive Network (a KSP mod manager)\u0022\u003ECKAN\u003C/abbr\u003E I have Kerbal Simpit version 1.4.1.66.\u00A0I\u0027m on Arduino IDE 1.8.13 (Windows Store 1.8.42.0).\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823865\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595328564\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/21/2020 at 6:49 AM, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003EmySimpit\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esend\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E28\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eunsigned\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Echar\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E*)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Esas_Counter\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// sends the new SAS mode setting to Simpit\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nfeel clumsy. Do you really need to use the pointers there? I thought just \u0060mySimpit.send(28, sas_Counter, 1);\u0060 would work. And, indeed, I had to change the code to that to make it compile on my local machine using Arduino 1.8.3 and Simpit 1.4.0. Haven\u0027t actually run it though. \u003Cspan\u003E\u003Cimg alt=\u0022:(\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_sad.gif\u0022 title=\u0022:(\u0022\u003E\u003C/span\u003E\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nI tried your code here and strangely I got this error:\u00A0no matching function for call to \u0027KerbalSimpit::send(int, int*, int)\u0027\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nQuote\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYour joystick read routines will be \u003Cem\u003Eslightly\u003C/em\u003E faster with a series of if/else statements rather than just ifs. Like this\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E  \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E analogRead\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EROT_Y\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E rot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eelse\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026lt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Emap\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E344\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E508\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E-\u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E32768\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eelse\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    rot_Y_Mapped \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Emap\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Erot_Y_Read\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E518\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E680\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E32767\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823872\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595329772\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/21/2020 at 7:09 AM, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022com\u0022\u003E// The serial receive buffer should be 64 bytes.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Check how much is there, and flip a warning light on if we\u0027ve filled it:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003ESerial\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eavailable\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E63\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  digitalWrite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EBRAKES_LED\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E HIGH\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nThese two pieces of advice seemed to work really well. I played for well over a half hour and had no issues with the controller locking up at all. I didn\u0027t change the RefreshRate at all. So based on a couple of test runs, I want to say it was the code for the analog stick that was overloading everything.\n\u003C/p\u003E\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823865\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595328564\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/21/2020 at 6:49 AM, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022com\u0022\u003E// First we need a global variable to remember SAS state:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003Eint\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E0\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// You could use a shorter type here if you\u0027re tight on space.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Then we do this in messageHandler:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Check if SAS_ACTION in our actions packet matches what we remember.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// If not, remember the current value and write it to the LED.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eactions \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E SAS_ACTION \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E!=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  sasActive \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E actions \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026amp;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E SAS_ACTION\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  digitalWrite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003ESAS_LED\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E sasActive\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// no else required any more!\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nOK. That\u0027s the easy stuff.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nAlso, something I did in this part of code didn\u0027t work right. The LEDs no longer responded properly and only seemed to randomly come on and never turned off once on.\n\u003C/p\u003E\n\u003Cp\u003E\nTHANKS for your advice above! It has really helped me enjoy my custom controller again!!!\n\u003C/p\u003E\n"},{"CreatedByName":"midnitemax","CreatedById":119586,"CreatedDateTime":"2020-09-06T14:51:19Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223823872\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221595329772\u0022 data-ipsquote-userid=\u002257865\u0022 data-ipsquote-username=\u0022stibbons\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 7/21/2020 at 1:09 PM, stibbons said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nYour thinking around the volume of info getting from the game to your mega is overloading things could be right. I think that would mean that the serial buffer on your Arduino is filling up faster than your sketch is able to read it. You can check that! The serial buffer should be 64 bytes, I think, and \u0060Serial.available()\u0060 will tell you how many bytes are in the buffer. So you could temporarily repurpose one of your LEDs and use it to tell you if the buffer ever gets full. Remove the code from messageHandler that updates your Brake LED (because nobody should ever be using the brakes, gosh!), and then put something like this at the top of your loop(). Note that the best place for it is right \u003Cstrong\u003Ebefore\u003C/strong\u003E you call the simpit update, because that\u0027s the fullest the buffer will get.\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-c prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022com\u0022\u003E// The serial receive buffer should be 64 bytes.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022com\u0022\u003E// Check how much is there, and flip a warning light on if we\u0027ve filled it:\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022kwd\u0022\u003Eif\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022typ\u0022\u003ESerial\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E.\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eavailable\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E()\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022lit\u0022\u003E63\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E)\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E{\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n  digitalWrite\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E(\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EBRAKES_LED\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E,\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E HIGH\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E);\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nAnd then play until\u00A0 your board stops. If the brake light comes on at any point there, then you know to blame the buffer.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nJust wanted to chime in on this discussion, because I have similar problems. It doesn\u0027t seem like the serial buffer filling up is the issue. I followed your other advice though and that solved the problem (at least this one \u003Cimg alt=\u0022:rolleyes:\u0022 data-emoticon=\u0022\u0022 src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_rolleyes.gif\u0022 title=\u0022:rolleyes:\u0022\u003E).\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222020-09-07T19:56:52Z\u0022 title=\u002209/07/2020 07:56  PM\u0022 data-short=\u00223 yr\u0022\u003ESeptember 7, 2020\u003C/time\u003E by midnitemax\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"midnitemax","CreatedById":119586,"CreatedDateTime":"2020-09-21T09:36:48Z","Content":"\n\u003Cp\u003E\nSo, I\u0027ve run into this problem again (controller becoming unresponsive) and now it happens right away when I want to send a translation message. Here\u0027s my code:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpit.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PayloadStructs.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;DebounceInput.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n#define forwardPin 51\n#define backwardPin 50\n#define rightPin 52\n#define leftPin 53\n#define upPin 48\n#define downPin 49\n#define stagePin 26\n\nint lastUpdte = 0;\nint updateDelay = 125;\n\nDebouncedInput displaySelect(4);\nDebouncedInput forward(forwardPin);\nDebouncedInput backward(backwardPin);\nDebouncedInput right(rightPin);\nDebouncedInput left(leftPin);\nDebouncedInput up(upPin);\nDebouncedInput down(downPin);\nDebouncedInput stage(stagePin);\n\nKerbalSimpit mySimpit(Serial);\n\n\nvoid setup() {\n  Serial.begin(115200);\n  while (!mySimpit.init());\n}\n\nvoid loop() {\n  mySimpit.update();\n  \n  stage.read();\n  if (stage.falling()) {\n    mySimpit.activateAction(STAGE_ACTION);\n  }\n  \n  translation();\n}\n\nvoid translation() {\n  translationMessage translationMsg;\n  translationMsg.mask=1|2|4;\n  \n  forward.read();\n  backward.read();\n  right.read();\n  left.read();\n  up.read();\n  down.read();\n\n  if (forward.falling() || forward.low()) {\n    translationMsg.X = 32767;\n  }\n  if (backward.falling() || backward.low()) {\n    translationMsg.X = -32767;\n  }\n  if (right.falling() || right.low()) {\n    translationMsg.Y = 32767;\n  }\n  if (left.falling() || left.low()) {\n    translationMsg.Y = -32767;\n  }\n  if (up.falling() || up.low()) {\n    translationMsg.Z = 32767;\n  }\n  if (down.falling() || down.low()) {\n    translationMsg.Z = -32767;\n  }\n\n  mySimpit.send(TRANSLATION_MESSAGE,translationMsg);\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nIf I comment out the translation(); it works fine (well, all it really does then is staging). But if I leave it in, the staging doesn\u0027t work either, indicating to me, that something somewhere has crashed.\n\u003C/p\u003E\n"},{"CreatedByName":"PSU_Jedi","CreatedById":170782,"CreatedDateTime":"2020-10-23T00:25:24Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223857360\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221600681008\u0022 data-ipsquote-userid=\u0022119586\u0022 data-ipsquote-username=\u0022midnitemax\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 9/21/2020 at 5:36 AM, midnitemax said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nSo, I\u0027ve run into this problem again (controller becoming unresponsive) and now it happens right away when I want to send a translation message. Here\u0027s my code:\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\n\u003Cspan class=\u0022pln\u0022\u003E#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;KerbalSimpit.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PayloadStructs.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n#include \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;DebounceInput.h\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n\n#define forwardPin 51\n#define backwardPin 50\n#define rightPin 52\n#define leftPin 53\n#define upPin 48\n#define downPin 49\n#define stagePin 26\n\nint lastUpdte = 0;\nint updateDelay = 125;\n\nDebouncedInput displaySelect(4);\nDebouncedInput forward(forwardPin);\nDebouncedInput backward(backwardPin);\nDebouncedInput right(rightPin);\nDebouncedInput left(leftPin);\nDebouncedInput up(upPin);\nDebouncedInput down(downPin);\nDebouncedInput stage(stagePin);\n\nKerbalSimpit mySimpit(Serial);\n\n\nvoid setup() {\n  Serial.begin(115200);\n  while (!mySimpit.init());\n}\n\nvoid loop() {\n  mySimpit.update();\n  \n  stage.read();\n  if (stage.falling()) {\n    mySimpit.activateAction(STAGE_ACTION);\n  }\n  \n  translation();\n}\n\nvoid translation() {\n  translationMessage translationMsg;\n  translationMsg.mask=1|2|4;\n  \n  forward.read();\n  backward.read();\n  right.read();\n  left.read();\n  up.read();\n  down.read();\n\n  if (forward.falling() || forward.low()) {\n    translationMsg.X = 32767;\n  }\n  if (backward.falling() || backward.low()) {\n    translationMsg.X = -32767;\n  }\n  if (right.falling() || right.low()) {\n    translationMsg.Y = 32767;\n  }\n  if (left.falling() || left.low()) {\n    translationMsg.Y = -32767;\n  }\n  if (up.falling() || up.low()) {\n    translationMsg.Z = 32767;\n  }\n  if (down.falling() || down.low()) {\n    translationMsg.Z = -32767;\n  }\n\n  mySimpit.send(TRANSLATION_MESSAGE,translationMsg);\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nIf I comment out the translation(); it works fine (well, all it really does then is staging). But if I leave it in, the staging doesn\u0027t work either, indicating to me, that something somewhere has crashed.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWhat happens if you put the translation code directly into loop() instead of in a separate call?\n\u003C/p\u003E\n"},{"CreatedByName":"TheDicko","CreatedById":204850,"CreatedDateTime":"2020-10-24T12:33:42Z","Content":"\n\u003Cp\u003E\nHi, just started out with what looks to be an amazing mod. Quick question, how do you guys debug code? I was thinking of printing to the serial monitor, but it says port busy, when using ksp.\n\u003C/p\u003E\n"},{"CreatedByName":"Codapop","CreatedById":188621,"CreatedDateTime":"2020-10-24T12:55:13Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223872080\u0022 data-ipsquote-contentid=\u0022155796\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221603542822\u0022 data-ipsquote-userid=\u0022204850\u0022 data-ipsquote-username=\u0022TheDicko\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n18 minutes ago, TheDicko said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nHi, just started out with what looks to be an amazing mod. Quick question, how do you guys debug code? I was thinking of printing to the serial monitor, but it says port busy, when using ksp.\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nYou can use the built-in LED in most arduinos (LED_BUILTIN) and have it turn on/off depending on where it is in the code. Alternatively, if you have any other LED indicators or displays (like a 7 segment display) you could have the arduino send debug messages there.\n\u003C/p\u003E\n"}]}