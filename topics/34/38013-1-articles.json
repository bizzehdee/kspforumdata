{"TopicId":38013,"ForumId":34,"TopicTitle":"[0.21] [Alpha] [2013-09-08] Ketchup: DCPU-16 Programmable Computer","CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-21T15:05:51Z","PageNum":1,"Articles":[{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-21T15:05:51Z","Content":"\n\u003Cp\u003E\u003Cspan style=\u0022font-size:18px;\u0022\u003EKetchup\u003C/span\u003E\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://f.cloud.github.com/assets/1547727/1023681/e3364c08-0dfe-11e3-9e0a-26d8f9579f7f.PNG\u0022 alt=\u0022e3364c08-0dfe-11e3-9e0a-26d8f9579f7f.PNG\u0022\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EVERSION:\u003C/strong\u003E 0.6.0 (2013-09-08)\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ESOURCE:\u003C/strong\u003E \u003Ca href=\u0022https://github.com/dbent/Ketchup\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EDOWNLOAD:\u003C/strong\u003E \u003Ca href=\u0022https://github.com/dbent/Ketchup/releases\u0022 rel=\u0022external nofollow\u0022\u003EGitHub\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003ELICENSE:\u003C/strong\u003E MIT\u003C/p\u003E\u003Cp\u003EKetchup is a plugin which provides parts which implement a programmable CPU. The CPU is an implementation of the \u003Ca href=\u0022http://dcpu.com/dcpu-16/\u0022 rel=\u0022external nofollow\u0022\u003EDCPU-16 specification\u003C/a\u003E, from the game \u003Ca href=\u0022http://0x10c.com/\u0022 rel=\u0022external nofollow\u0022\u003E0x10c\u003C/a\u003E created by Notch of Minecraft fame. Similar to \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/showthread.php/24955-0-20-2-ProgCom-CPU-Emulator-V0-8-2\u0022 rel=\u0022external nofollow\u0022\u003EProgCom\u003C/a\u003E this plugin only implements virtual hardware, \u003Cem\u003Eit does nothing useful on its own\u003C/em\u003E. The primary advantage over ProgCom is that it uses the DCPU-16 specification, for which numerous tools, programs, and other \u003Ca href=\u0022http://0x10cwiki.com/wiki/Main_Page\u0022 rel=\u0022external nofollow\u0022\u003Eresources\u003C/a\u003E have already been written. The primary disadvantage is that the current release is merely a proof of concept, no devices have been yet been implemented which allow the CPU to interact with the vessel, so it\u0027s not currently useful as a flight computer. However, programs written for the DCPU-16 can be executed in-game on the virtual processor. See this\n\u003C/p\u003E\u003Cdiv class=\u0022ipsEmbeddedVideo\u0022 contenteditable=\u0022false\u0022\u003E\u003Cdiv\u003E\u003Ciframe width=\u0022459\u0022 height=\u0022344\u0022 src=\u0022https://www.youtube.com/embed/aiDfms9u2WA?feature=oembed\u0022 frameborder=\u00220\u0022 allowfullscreen=\u0022true\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\u003C/div\u003E.\u003Cp\u003EI didn\u0027t want to create any Kerbal-specific devices as of yet, so that the specifications and interfaces for those can be developed through consensus of interested players, rather than just on my own. If you\u0027re interested give a shout here. For more information (including why it\u0027s named \u0022Ketchup\u0022) please see the GitHub repository.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222013-09-09T00:53:02Z\u0022 title=\u002209/09/2013 12:53  AM\u0022 data-short=\u002210 yr\u0022\u003ESeptember 9, 2013\u003C/time\u003E by zengei\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"gmpd2000","CreatedById":37101,"CreatedDateTime":"2013-07-21T16:32:25Z","Content":"\n\u003Cp\u003EUmmm, what is this?\u003C/p\u003E\u003Cp\u003EEDIT: This is a reply actually, i thinks is bugged.\u003C/p\u003E\n"},{"CreatedByName":"khyperia","CreatedById":25539,"CreatedDateTime":"2013-07-21T17:13:08Z","Content":"\n\u003Cp\u003E*sigh*\u003C/p\u003E\u003Cp\u003EI was about to release my DCPU, and then you come along and post this. Here\u0027s my repo, if you\u0027re curious - \u003Ca href=\u0022https://github.com/khyperia/Bifrost\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/khyperia/Bifrost\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt would have been nice if you hopped into the kspmodders chat and notified people you were doing this, but c\u0027est la vie.\u003C/p\u003E\u003Cp\u003E(although I\u0027m a bit upset you pulled Tomato and used that, I wrote the entire thing from scratch)\u003C/p\u003E\u003Cp\u003EI\u0027m considering hopping on your project, though, if you\u0027ll have me.\u003C/p\u003E\n"},{"CreatedByName":"betaking","CreatedById":58281,"CreatedDateTime":"2013-07-21T17:17:18Z","Content":"\n\u003Cp\u003Ethis is nice... but you\u0027re going to want to do something a bit different if you want to make a good mod.\u003C/p\u003E\u003Cp\u003ETalk to Cliph, he\u0027s doing something with progcom and remote-tech. He might have an interest in this.\u003C/p\u003E\u003Cp\u003EI personally like the idea of programmable computers in game, especially if they\u0027re not omnipotent, which makes it !!!FUN!!! when things go wrong.\u003C/p\u003E\u003Cp\u003EThough I can\u0027t say that I like assembly being used.\u003C/p\u003E\u003Cp\u003EPersonally I would prefer something like python, with the python idle and text editor.. but that\u0027s just my personal preference.\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-21T17:49:44Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022khyperia\u0022 data-cite=\u0022khyperia\u0022\u003E\u003Cdiv\u003E*sigh*\u003Cp\u003EI was about to release my DCPU, and then you come along and post this. Here\u0027s my repo, if you\u0027re curious - \u003Ca href=\u0022https://github.com/khyperia/Bifrost\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/khyperia/Bifrost\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EIt would have been nice if you hopped into the kspmodders chat and notified people you were doing this, but c\u0027est la vie.\u003C/p\u003E\u003Cp\u003E(although I\u0027m a bit upset you pulled Tomato and used that, I wrote the entire thing from scratch)\u003C/p\u003E\u003Cp\u003EI\u0027m considering hopping on your project, though, if you\u0027ll have me.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHa, well, great minds think a like. I saw ProgCom and realized it would be great if we could leverage all the work that\u0027s gone into DCPU-16 already (especially since 0x10c is on indefinite hold, so all that effort is just sort of... idle). Wasn\u0027t until I went to post an update did I see you had the same idea. I\u0027d definitely welcome collaboration, the whole idea of posting this less-than-entirely-useful proof-of-concept was to garner interest and see if like minded players would like to collaborate and come up with specs for Kerbal devices to control ships. Those hardware specs and the best way to deal with time warp (see: \u003Ca href=\u0022https://github.com/dbent/Ketchup/issues/4\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/dbent/Ketchup/issues/4\u003C/a\u003E) are the open ended problems for me.\u003C/p\u003E\u003Cp\u003EI was thinking about writing my own emulator as well, but I found Tomato and it seemed well designed and easy to reuse so I just bootstrapped from it. I\u0027ll take a look at your code as well, I could probably learn some lessons. By the way, what is its license?\u003C/p\u003E\u003Cp\u003EAlso, to be fair, I didn\u0027t realize kspmodders was a thing until now. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022betaking\u0022 data-cite=\u0022betaking\u0022\u003E\u003Cdiv\u003Ethis is nice... but you\u0027re going to want to do something a bit different if you want to make a good mod.\u003Cp\u003ETalk to Cliph, he\u0027s doing something with progcom and remote-tech. He might have an interest in this.\u003C/p\u003E\u003Cp\u003EI personally like the idea of programmable computers in game, especially if they\u0027re not omnipotent, which makes it !!!FUN!!! when things go wrong.\u003C/p\u003E\u003Cp\u003EThough I can\u0027t say that I like assembly being used.\u003C/p\u003E\u003Cp\u003EPersonally I would prefer something like python, with the python idle and text editor.. but that\u0027s just my personal preference.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks. Well a lot of work has gone into various compilers and interpreters for the DCPU-16. Unfortunately, none as high level as Python. But part of the appeal (to me at least), is seeing how much utility you can extract from few resources.\u003C/p\u003E\n"},{"CreatedByName":"khyperia","CreatedById":25539,"CreatedDateTime":"2013-07-21T17:56:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zengei\u0022 data-cite=\u0022zengei\u0022\u003E\u003Cdiv\u003EHa, well, great minds think a like. I saw ProgCom and realized it would be great if we could leverage all the work that\u0027s gone into DCPU-16 already (especially since 0x10c is on indefinite hold, so all that effort is just sort of... idle). Wasn\u0027t until I went to post an update did I see you had the same idea. I\u0027d definitely welcome collaboration, the whole idea of posting this less-than-entirely-useful proof-of-concept was to garner interest and see if like minded players would like to collaborate and come up with specs for Kerbal devices to control ships. Those hardware specs and the best way to deal with time warp (see: \u003Ca href=\u0022https://github.com/dbent/Ketchup/issues/4\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/dbent/Ketchup/issues/4\u003C/a\u003E) are the open ended problems for me.\u003Cp\u003EI was thinking about writing my own emulator as well, but I found Tomato and it seemed well designed and easy to reuse so I just bootstrapped from it. I\u0027ll take a look at your code as well, I could probably learn some lessons. By the way, what is its license?\u003C/p\u003E\u003Cp\u003EAlso, to be fair, I didn\u0027t realize kspmodders was a thing until now. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah, #kspmodders on EsperNet irc. If you could hop in there, we could talk about some stuff, would probably be good.\u003C/p\u003E\u003Cp\u003ELicence for my code is \u0022do whatever the heck you want with it, I don\u0027t care, just don\u0027t hack into the government with it :P\u0022.\u003C/p\u003E\n"},{"CreatedByName":"Panichio","CreatedById":2858,"CreatedDateTime":"2013-07-21T19:51:31Z","Content":"\n\u003Cp\u003EAs someone who doesn\u0027t understand computers very well, could you explain how much is possible with this?\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-22T01:24:28Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Panichio\u0022 data-cite=\u0022Panichio\u0022\u003E\u003Cdiv\u003EAs someone who doesn\u0027t understand computers very well, could you explain how much is possible with this?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell it won\u0027t run Crysis. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EThe simulated processor runs at 100KHz and has access to 128KB of RAM. Doesn\u0027t sound like a lot, but a competent developer can do a lot with that. If I had to give a rough analogy, it\u0027s probably within an order of magnitude as powerful as a graphing calculator (one of the old school TI-83 ones, not the fancy new ones with \u003Cem\u003Ecolor\u003C/em\u003E displays). Since the spec for the CPU has been out for a while, a number of developers have already written fairly impressive programs. A good place to see some of these is here: \u003Ca href=\u0022http://0x10co.de/\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://0x10co.de/\u003C/a\u003E. The Tetris game I was playing in the video can be found here: \u003Ca href=\u0022http://0x10co.de/ua5qu\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://0x10co.de/ua5qu\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EAnother thing to keep in mind is that the capability is mostly limited by what kind of external (virtual) hardware we come up with for it. We could make the Do-Everything Device, and the processor could then just talk to the Do-Everything Device and have it do... everything, but that wouldn\u0027t be in the spirit of the design. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"The Destroyer","CreatedById":36109,"CreatedDateTime":"2013-07-22T07:57:00Z","Content":"\n\u003Cp\u003ESooo...\u003C/p\u003E\u003Cp\u003EYou can play Tetris whilist going to Eeelo?\u003C/p\u003E\n"},{"CreatedByName":"lammatt","CreatedById":21777,"CreatedDateTime":"2013-07-22T08:33:41Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022The Destroyer\u0022 data-cite=\u0022The Destroyer\u0022\u003E\u003Cdiv\u003ESooo...\u003Cp\u003EYou can play Tetris whilist going to Eeelo?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eso that Jeb wont be bored to death on that 1yr\u002B travel...\u003C/p\u003E\n"},{"CreatedByName":"Serpentine","CreatedById":25422,"CreatedDateTime":"2013-07-22T09:57:30Z","Content":"\n\u003Cp\u003ESo... if this is in the right hands... we can program the rocket to fly itself, without switching between types of autopilot?\u003C/p\u003E\n"},{"CreatedByName":"qerupasy","CreatedById":76504,"CreatedDateTime":"2013-07-28T20:46:36Z","Content":"\n\u003Cp\u003EThis seems extremely promising, especially since it has a more extensible hardware interface than ProgCom. Is there already something planned about Kerbal-specific devices? Is it okay to fork the code and play with it (add new devices and such) to test the waters (in a manner of speaking)?\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-29T03:26:32Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Serpentine\u0022 data-cite=\u0022Serpentine\u0022\u003E\u003Cdiv\u003ESo... if this is in the right hands... we can program the rocket to fly itself, without switching between types of autopilot?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETheoretically yes, I still have yet to implement any Kerbal specific devices though.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022qerupasy\u0022 data-cite=\u0022qerupasy\u0022\u003E\u003Cdiv\u003EThis seems extremely promising, especially since it has a more extensible hardware interface than ProgCom. Is there already something planned about Kerbal-specific devices? Is it okay to fork the code and play with it (add new devices and such) to test the waters (in a manner of speaking)?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAbsolutely, fork away and play, and I accept pull requests. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E As for Kebal specific devices, Cilph has added some draft specs for hardware here: \u003Ca href=\u0022https://github.com/KerbalSystems/KSP_DCPU16_Standards/tree/master/Hardware\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KerbalSystems/KSP_DCPU16_Standards/tree/master/Hardware\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"qerupasy","CreatedById":76504,"CreatedDateTime":"2013-07-29T12:55:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zengei\u0022 data-cite=\u0022zengei\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAbsolutely, fork away and play, and I accept pull requests. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E As for Kebal specific devices, Cilph has added some draft specs for hardware here: \u003Ca href=\u0022https://github.com/KerbalSystems/KSP_DCPU16_Standards/tree/master/Hardware\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KerbalSystems/KSP_DCPU16_Standards/tree/master/Hardware\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGreat. Something that struck me while looking into ways to integrate custom device code into your framework yesterday: Is there a public interface allowing the addition of hardware devices without hard-coding them into Dcpu16Computer? If there was one, people might be able to write part modules that automatically register specific parts as devices. In addition, the ModuleManager would allow the extension of that mechanism to existing stock parts. I might be overestimating the value (or underestimating the time investment) but that sounds pretty useful in the long run. Do you have something along those lines planned?\u003C/p\u003E\u003Cp\u003EBy the way, are manufacturer IDs just randomly generated?\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-29T15:03:47Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022qerupasy\u0022 data-cite=\u0022qerupasy\u0022\u003E\u003Cdiv\u003EGreat. Something that struck me while looking into ways to integrate custom device code into your framework yesterday: Is there a public interface allowing the addition of hardware devices without hard-coding them into Dcpu16Computer? If there was one, people might be able to write part modules that automatically register specific parts as devices. In addition, the ModuleManager would allow the extension of that mechanism to existing stock parts. I might be overestimating the value (or underestimating the time investment) but that sounds pretty useful in the long run. Do you have something along those lines planned?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYep, see this \u003Ca href=\u0022https://github.com/dbent/Ketchup/issues/9\u0022 rel=\u0022external nofollow\u0022\u003Eissue\u003C/a\u003E on GitHub. The general idea is to provide a separate assembly (\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EKetchup.Api\u003C/span\u003E) that others could include in their projects, that would provide a single interface (\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EIDevice\u003C/span\u003E) that others could implement with their Parts or Modules. Then when a vessel is loaded the DCPU would scan the vessel for any parts which implement \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EIDevice\u003C/span\u003E and dynamically connect them to the CPU through a wrapper class which subclasses Tomato\u0027s \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EDevice\u003C/span\u003E object.\u003C/p\u003E\u003Cp\u003EI\u0027ve been working on loading and storing the state of the computer, which is fairly straight forward for the CPU itself, but gets complicated with external devices. I was planning on just allowing external devices to persist their own state, but this is complicated by the fact that you could have multiple of the same device attached (think dual monitors), and not only would the two instances have to store their state without colliding with each other, but when we restore state, they would have to be restored in the right order so that the right device with the right state gets the right device index.\u003C/p\u003E\u003Cp\u003ETo properly support this I\u0027ll probably need a common device interface anyway, so this will likely be the next thing I work on.\u003C/p\u003E\u003Cp\u003EBy the way, for anyone following this project, I plan to do weekly releases with whatever work I\u0027ve done in the previous week, not when a large set of changes are ready. So releases will likely be small, but they\u0027ll be consistent and predictable. The link to the GitHub releases page is in the first post.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022qerupasy\u0022 data-cite=\u0022qerupasy\u0022\u003E\u003Cdiv\u003EBy the way, are manufacturer IDs just randomly generated?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAs far as I know, yes. I was planning on using a prefix of \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003E0xCAE00000\u003C/span\u003E (\u0027K\u0027) for any Kerbal-specific manufacturers and devices though. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"qerupasy","CreatedById":76504,"CreatedDateTime":"2013-07-29T18:24:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zengei\u0022 data-cite=\u0022zengei\u0022\u003E\u003Cdiv\u003EI\u0027ve been working on loading and storing the state of the computer, which is fairly straight forward for the CPU itself, but gets complicated with external devices. I was planning on just allowing external devices to persist their own state, but this is complicated by the fact that you could have multiple of the same device attached (think dual monitors), and not only would the two instances have to store their state without colliding with each other, but when we restore state, they would have to be restored in the right order so that the right device with the right state gets the right device index.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWouldn\u0027t there also be a problem if you had two CPUs on the same vessel (especially if they\u0027re working at the same time)? Anyway, I noticed that the DCPU-16 specs say that behaviour in case of device addition/removal is undefined. Isn\u0027t that almost inevitably going to happen during staging and docking? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-29T20:03:23Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022qerupasy\u0022 data-cite=\u0022qerupasy\u0022\u003E\u003Cdiv\u003EWouldn\u0027t there also be a problem if you had two CPUs on the same vessel (especially if they\u0027re working at the same time)? Anyway, I noticed that the DCPU-16 specs say that behaviour in case of device addition/removal is undefined. Isn\u0027t that almost inevitably going to happen during staging and docking? \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_undecided.gif\u0022 alt=\u0022:huh:\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERight now the code only allows a single CPU per vessel to be active, a rather... \u003Cem\u003Eblunt\u003C/em\u003E solution. I\u0027ll be looking into doing something better in the future. It wouldn\u0027t be that hard to do, the hard part would be in the UI/UX of allowing people to configure which devices were connected to which CPUs (possibly multiple!), and displaying multiple device UIs like monitor screens.\u003C/p\u003E\u003Cp\u003EIn any case, I wouldn\u0027t automatically connect devices upon docking, but maybe the aforementioned UI could allow players to dynamically reconfigure the systems (after they\u0027ve safely powered off the computers, of course).\u003C/p\u003E\u003Cp\u003EDropping away devices due to staging is a problem I hadn\u0027t considered, but if you\u0027re doing that, well the only expected behavior should be unexpected behavior. (I\u0027m not sure exactly what would happen right now if you tried to say, interrupt a device which doesn\u0027t exist, it probably just fails silently).\u003C/p\u003E\n"},{"CreatedByName":"xZise","CreatedById":59798,"CreatedDateTime":"2013-07-30T10:37:02Z","Content":"\n\u003Cp\u003EHi, as only KSP related devices can be added/removed via docking/staging you could add additional interrupts like \u0022device added\u0022 and \u0022device removed\u0022.\u003C/p\u003E\u003Cp\u003EAnd how do you plan to store the state of the devices? I\u0027m have almost no idea about how KSP handles that, but what if you add an interface \u0022StorableDevice\u0022 (some devices might not need to be saved?) with one method with one parameter which is the ID for the CPU? Or every device has the interrupt ID (I guess that is the problem with saving the state? So that after loading the program can still access the same device with the same ID) which get\u0027s set when its get added to the DCPU. Of course this could cause problems when you have two DCPUs on one craft. Although there are other problems with this.\u003C/p\u003E\u003Cp\u003EFabian\u003C/p\u003E\n"},{"CreatedByName":"MK3424","CreatedById":19932,"CreatedDateTime":"2013-07-30T11:06:01Z","Content":"\n\u003Cp\u003EI wonder if they can implement the commands from the DSIWare program petit computer, it is a good programming environment with some high end programming commands\u003C/p\u003E\n"},{"CreatedByName":"Cilph","CreatedById":21477,"CreatedDateTime":"2013-07-30T11:10:09Z","Content":"\n\u003Cp\u003EJust FYI, I put the same DCPU core into RemoteTech. It just needs some proper hardware specifications to make use of it.\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://github.com/organizations/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/organizations/KerbalSystems\u003C/a\u003E\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-30T11:56:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xZise\u0022 data-cite=\u0022xZise\u0022\u003E\u003Cdiv\u003EHi, as only KSP related devices can be added/removed via docking/staging you could add additional interrupts like \u0022device added\u0022 and \u0022device removed\u0022.\u003Cp\u003EAnd how do you plan to store the state of the devices? I\u0027m have almost no idea about how KSP handles that, but what if you add an interface \u0022StorableDevice\u0022 (some devices might not need to be saved?) with one method with one parameter which is the ID for the CPU? Or every device has the interrupt ID (I guess that is the problem with saving the state? So that after loading the program can still access the same device with the same ID) which get\u0027s set when its get added to the DCPU. Of course this could cause problems when you have two DCPUs on one craft. Although there are other problems with this.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou can check out the work I\u0027m doing in the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Etopic/device_interface\u003C/span\u003E branch of the repository, specifically the \u003Ca href=\u0022https://github.com/dbent/Ketchup/blob/topic/device_interface/Source/Ketchup.Api/IDevice.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EIDevice\u003C/span\u003E\u003C/a\u003E interface. I have two methods: \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Ebyte[] GetState()\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Evoid SetState(byte[])\u003C/span\u003E, the idea being that when it\u0027s time to save, the add-on will get the state of every device as an arbitrary byte array and save it to a common file per vessel. When it\u0027s time to load, the add-on will do the reverse. This is nearly enough to restore state perfectly, the only rub is that if on load there are two of the same device, I still need to know which state belongs to which device (since this could be significant if they\u0027re in different stages, etc.). Still need to look into the best way to do that, looks like there\u0027s a \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EGetInstanceID()\u003C/span\u003E method on game objects that could possibly serve as a unique identifier across saves and loads.\u003C/p\u003E\u003Cp\u003EOne note, I consider topic branches in the repository \u0022private\u0022, and therefore subject to arbitrary rebasing and history rewriting, just a heads up if anyone checkouts the branch. I\u0027ll never rebase or edit version branches or master, though.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022MK3424\u0022 data-cite=\u0022MK3424\u0022\u003E\u003Cdiv\u003EI wonder if they can implement the commands from the DSIWare program petit computer, it is a good programming environment with some high end programming commands\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EFrom googling it appears it\u0027s a BASIC language for the Nintendo DS? It\u0027s certainly possible someone could implement a compiler to DCPU-16 object code for it (heck, maybe someone already has). Not me though. \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cilph\u0022 data-cite=\u0022Cilph\u0022\u003E\u003Cdiv\u003EJust FYI, I put the same DCPU core into RemoteTech. It just needs some proper hardware specifications to make use of it.\u003Cp\u003E\u003Ca href=\u0022https://github.com/organizations/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/organizations/KerbalSystems\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWoo!\u003C/p\u003E\n"},{"CreatedByName":"qerupasy","CreatedById":76504,"CreatedDateTime":"2013-07-30T15:15:35Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cilph\u0022 data-cite=\u0022Cilph\u0022\u003E\u003Cdiv\u003EJust FYI, I put the same DCPU core into RemoteTech. It just needs some proper hardware specifications to make use of it.\u003Cp\u003E\u003Ca href=\u0022https://github.com/organizations/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/organizations/KerbalSystems\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI tried implementing the DevicePilot specification from KerbalSystems/KSP_DCPU16_Standards (just for the hell of it) and was quite confused by what the interrupt was supposed to do. Isn\u0027t that feature already provided by the Generic Clock?\u003C/p\u003E\n"},{"CreatedByName":"xZise","CreatedById":59798,"CreatedDateTime":"2013-07-30T15:41:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zengei\u0022 data-cite=\u0022zengei\u0022\u003E\u003Cdiv\u003EYou can check out the work I\u0027m doing in the \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Etopic/device_interface\u003C/span\u003E branch of the repository, specifically the \u003Ca href=\u0022https://github.com/dbent/Ketchup/blob/topic/device_interface/Source/Ketchup.Api/IDevice.cs\u0022 rel=\u0022external nofollow\u0022\u003E\u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EIDevice\u003C/span\u003E\u003C/a\u003E interface. I have two methods: \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Ebyte[] GetState()\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Evoid SetState(byte[])\u003C/span\u003E, the idea being that when it\u0027s time to save, the add-on will get the state of every device as an arbitrary byte array and save it to a common file per vessel. When it\u0027s time to load, the add-on will do the reverse. This is nearly enough to restore state perfectly, the only rub is that if on load there are two of the same device, I still need to know which state belongs to which device (since this could be significant if they\u0027re in different stages, etc.). Still need to look into the best way to do that, looks like there\u0027s a \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003EGetInstanceID()\u003C/span\u003E method on game objects that could possibly serve as a unique identifier across saves and loads.[\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6]\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh I assumed you would use the game own persistence system. But as I already said I have no idea how KSP does this actually.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Cilph\u0022 data-cite=\u0022Cilph\u0022\u003E\u003Cdiv\u003EJust FYI, I put the same DCPU core into RemoteTech. It just needs some proper hardware specifications to make use of it.\u003Cp\u003E\u003Ca href=\u0022https://github.com/organizations/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/organizations/KerbalSystems\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHmmm this link doesn\u0027t seem to work for me. Isn\u0027t \u003Ca href=\u0022https://github.com/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KerbalSystems\u003C/a\u003E that the same?\u003C/p\u003E\u003Cp\u003EFabian\u003C/p\u003E\n"},{"CreatedByName":"zengei","CreatedById":75233,"CreatedDateTime":"2013-07-30T16:23:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xZise\u0022 data-cite=\u0022xZise\u0022\u003E\u003Cdiv\u003EHmmm this link doesn\u0027t seem to work for me. Isn\u0027t \u003Ca href=\u0022https://github.com/KerbalSystems\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/KerbalSystems\u003C/a\u003E that the same?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYep, same thing.\u003C/p\u003E\n"},{"CreatedByName":"qerupasy","CreatedById":76504,"CreatedDateTime":"2013-07-31T23:33:45Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022zengei\u0022 data-cite=\u0022zengei\u0022\u003E\u003Cdiv\u003E I have two methods: \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Ebyte[] GetState()\u003C/span\u003E and \u003Cspan style=\u0022font-family:\u0027Courier New\u0027;\u0022\u003Evoid SetState(byte[])\u003C/span\u003E, the idea being that when it\u0027s time to save, the add-on will get the state of every device as an arbitrary byte array and save it to a common file per vessel. When it\u0027s time to load, the add-on will do the reverse.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI assume that once there are external storage systems (such as the Floppy Drive), they will be persistent as well. If so, will the stored memory sections be machine-independent (i.e. of specific endianness)? I\u0027ve been working on a floating point coprocessor based on the x87 architecture but I\u0027ve been having endianness problems with data types spanning multiple words. It would be nice to know whether I have to invert the byte order or just the word order when interacting with DCPU memory.\u003C/p\u003E\n"}]}