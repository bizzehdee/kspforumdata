{"TopicId":88777,"ForumId":34,"TopicTitle":"[1.1.3] BackgroundProcessing","CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-10-28T18:40:42Z","PageNum":1,"Articles":[{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-10-28T18:40:42Z","Content":"\n\u003Cp\u003E\n\u003Cstrong\u003ESpaceDock: \u003C/strong\u003E\u003Ca href=\u0022http://spacedock.info/mod/288/BackgroundProcessing\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://spacedock.info/mod/288/BackgroundProcessing\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003ESource: \u003C/strong\u003E\u003Ca href=\u0022https://bitbucket.org/j_picone/background-processing\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://bitbucket.org/j_picone/background-processing\u003C/a\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBackgroundProcessing is a small and simple mod that performs some processing for vessels \u0027in the background\u0027 - probes or manned craft that have been left orbiting while the player is in the Kerbal Space Center or piloting another vessel.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EInstallation\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\n* Download the BackgroundProcessing.zip file from KerbalStuff\n\u003C/p\u003E\n\u003Cp\u003E\n* Extract it to your GameData folder\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EI\u0027m a player. What does BackgroundProcessing offer me?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBackgroundProcessing will allow craft to gain and lose ElectricCharge while you\u0027re off doing something else. This doesn\u0027t actually happen in stock KSP - try building a spaceship made up of an empty battery, an \u003Cabbr title=\u0022Radio-isotope Thermo-electric Generator (a.k.a. Mars rover heating device)\u0022\u003ERTG\u003C/abbr\u003E, and some wheels (to get it off the launchpad). Move it off the launchpad, check resources, notice that it\u0027s gaining charge over time. Then leave it and go back to the space center and speed up time. Check the craft again, and it won\u0027t have gained or lost any charge. That\u0027s a minor realism issue, but its nice to have fixed.\n\u003C/p\u003E\n\u003Cp\u003E\nThe other thing BackgroundProcessing provides is support for other mods that might want to do something while a craft is in the background. A scanner, something that produces a mod-specific resource, anything like that. Because of the way BackgroundProcessing is designed that other mod doesn\u0027t have to include BP, and it doesn\u0027t have to use its features, but if that mod has implemented BP-compatibility, BP will detect it and use it.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EI\u0027m a mod author. What does BackgroundProcessing offer me?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nIf you have a PartModule that should do stuff even while a craft isn\u0027t the actual active vessel - like a scanner, or a solar-wind collector - you can get background processing just by implementing a couple of functions. BackgroundProcessing has already implemented a lot of the boilerplate required to get this working. Your PartModule can do anything in the background that can be done with a ProtoVessel - which is quite a lot - and BP provides some mechanisms for producing or consuming resources easily. BP also allows mods to indicate that some mod-specific resource should be handled in the background, and then any ModuleGenerator or ModuleDeployableSolarPanel that produces that resource (with no resource consumed) will produce it in the background. Additionally, any ModuleCommand that consumes that resource will consume it in the background. All of this can be done without reference to the BackgroundProcessing assembly, so your users can choose whether or not they want background handling, and you don\u0027t have to package BP with your mod.\n\u003C/p\u003E\n\u003Cp\u003E\nBackgroundProcessing is MIT-licensed, so there aren\u0027t any license worries.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EWhat specific things are handled?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nAny Part using the ModuleGenerator or ModuleDeployableSolarPanel to produce ElectricCharge with no inputs, any Part using ModuleComand to consume ElectricCharge. At present ModuleDeployableSolarPanel output charge takes into account the location of Kerbol, its power curve, planetary shadows, and panel orientation, including tracking solar panels.\n\u003C/p\u003E\n\u003Cp\u003E\nMods can instruct BackgroundProcessing that particular PartModule classes should be considered to produce or consume some resource at a given rate. They can also have BackgroundProcessing handle ModuleGenerator/ModuleDeployableSolarPanel/ModuleCommand that produces/consumes resources other than ElectricCharge. Finally, their background handling code can consume or produce any resource they please.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow do I get BackgroundProcessing support in my PartModule?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nImplement some static functions in your PartModule.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\npublic static void FixedBackgroundUpdate(Vessel v, uint partFlightID, ref System.Object data)\n\npublic static void FixedBackgroundUpdate(Vessel v, uint partFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; resourceRequest, ref System.Object data)\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThese two functions are the \u0027simple\u0027 and \u0027complex\u0027 background update functions. If you implement either of them, BackgroundProcessing will call it at FixedUpdate() intervals (if you implement both, only the complex version will get called). The function will only be called for unloaded vessels, and it will be called once per part per partmodule type - so if you have more than one of the same PartModule on the same part you\u0027ll only get one update for all of those PartModules. \u003Cem\u003EVessel v\u003C/em\u003E is the Vessel object that you should update - be careful, it\u0027s quite likely unloaded and very little of it is there. \u003Cem\u003EpartFlightID\u003C/em\u003E is the flightID of the Part this update was associated with. \u003Cem\u003EresourceRequest \u003C/em\u003Eis a function that provides an analog of Part.RequestResource. It takes a vessel, an amount of resource to take, and a resource name, and returns the amount of resource that you got. Like Part.RequestResource, you can ask for a negative amount of some resource to fill up the tanks. The resource is consumed as if it can be reached from the entire vessel - be very careful with resources like liquid fuel that should only flow through crossfeeds. \u003Cem\u003Edata \u003C/em\u003Eis arbitrary per-part-per-partmodule-type storage - you can stash anything you want there, and it will persist between FixedBackgroundUpdate calls.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\npublic static void BackgroundLoad(Vessel v, uint partFlightId, ref System.Object data)\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis function will be called once prior to FixedBackgroundUpdate, and it gives you a chance to load data out of the ConfigNodes on the vessel\u0027s protovessel into the storage BackgroundProcessing manages for you.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\npublic static void BackgroundSave(Vessel v, uint partFlightId, System.Object data)\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis function will be called prior to the game scene changing or the game otherwise being saved. Use it to persist background data to the vessel\u0027s confignodes. Note that \u003Cem\u003ESystem.Object data\u003C/em\u003E is *not* a ref type here, unlike the other functions that have it as an argument.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\npublic static List\u0026lt;string\u0026gt; GetInterestingResources()\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nImplement this function to return a list of resources that your PartModule would like BackgroundProcessing to handle in the background. It\u0027s okay if multiple PartModules say a given resource is interesting.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cdiv\u003E\n\u00A0\n\u003C/div\u003E\n\u003Cpre class=\u0022ipsCode\u0022\u003E\npublic static int GetBackgroundResourceCount()\n\npublic static void GetBackgroundResource(int index, out string resourceName, out float resourceRate)\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nImplement these functions to inform BackgroundProcessing that your PartModule should be considered to produce or consume a resource in the background. GetBackgroundResourceCount() should return the number of different resources that your PartModule produces/consumes. GetBackgroundResource() will then be called with each index from 0 up to one less than the count you indicated, and you should set resourceName and resourceRate to the appropriate values for the index-th resource your PartModule produces. resourceRate is the amount of resource your part should produce each second - if your part consumes resources, it should be negative. If your part only consumes or produces resources in some situation, it\u0027s better to implement the complex background update and use the resource request function.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EHow do I distribute a mod that uses BackgroundProcessing?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nHaving multiple copies of the BackgroundProcessing DLL in a GameData directory is fine - only the most recent version will run. If your mod absolutely needs BackgroundProcessing present to be useful, consider including the BackgroundProcessing DLL in your mod\u0027s zip file, the same way ModuleManager is handled.\n\u003C/p\u003E\n\u003Cp\u003E\nIf BackgroundProcessing isn\u0027t central to your mod, feel free not to distribute it at all. If players don\u0027t have this mod installed, they just won\u0027t get your off-rails features.\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cstrong\u003EAre there any caveats when writing code that uses BackgroundProcessing?\u003C/strong\u003E\n\u003C/p\u003E\n\u003Cp\u003E\nBackgroundProcessing works optimally with PartModules that are present in prefab parts. The list of modules that has BackgroundProcessing handling is constructed by walking all the AvailablePart objects in PartLoader.LoadedPartLists at the main menu. If your partmodule isn\u0027t in that set, very little will work. Similarly, if your PartModule is added to a part\u0027s module list after part instantiation, and isn\u0027t present in the part\u0027s prefab module list, resource handling will likely not work. This is all only relevant if your PartModule is added dynamically to parts, after construction. It isn\u0027t relevant to PartModules that are present in config files, or to PartModules added by ModuleManager (which appropriately modifies prefab parts). The takeaway is that if you intend to dynamically add PartModules to parts, and those dynamically-added PartModules should have BackgroundProcessing behaviour, make sure you add them to the appropriate part prefab before the main menu, like ModuleManager.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222016-08-03T12:54:37Z\u0022 title=\u002208/03/2016 12:54  PM\u0022 data-short=\u00227 yr\u0022\u003EAugust 3, 2016\u003C/time\u003E by jamespicone\u003C/strong\u003E\n\u003Cbr\u003EUpdate for 1.1.3\n\u003C/span\u003E\n"},{"CreatedByName":"DocMop","CreatedById":125896,"CreatedDateTime":"2014-10-28T21:01:46Z","Content":"\n\u003Cp\u003EInteresting! \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"Redmanjbj","CreatedById":99888,"CreatedDateTime":"2014-10-28T22:37:13Z","Content":"\n\u003Cp\u003Ecool, thanks! Just read the detail page. This could be very useful. Could this also take into account the orbits of not-active vessels? I\u0027ve noticed that if a not-active vessel is in an eccentric orbit that hits atmosphere, the orbit doesn\u0027t decay like it would on an active vessel. Wondering if this could be used in that situation?\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-10-28T22:41:11Z","Content":"\n\u003Cp\u003EPossibly. I\u0027m not sure this mod would strictly be the right place to do it. I\u0027d need to look into it.\u003C/p\u003E\u003Cp\u003EIIRC some other mod devs I\u0027ve talked to in the #kspmodders channel have noted that adjusting orbital parameters with unloaded vessels doesn\u0027t work terribly well. It would also be quite hard to match KSPs behaviour accurately. I\u0027ll keep it in mind as a future thing to consider.\u003C/p\u003E\n"},{"CreatedByName":"Drew Kerman","CreatedById":103177,"CreatedDateTime":"2014-10-29T01:57:24Z","Content":"\n\u003Cp\u003EGreat to see this released. Hope to see background EC consumption soon as well!\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Redmanjbj\u0022 data-cite=\u0022Redmanjbj\u0022\u003E\u003Cdiv\u003Ecool, thanks! Just read the detail page. This could be very useful. Could this also take into account the orbits of not-active vessels? I\u0027ve noticed that if a not-active vessel is in an eccentric orbit that hits atmosphere, the orbit doesn\u0027t decay like it would on an active vessel. Wondering if this could be used in that situation?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/70881-0-24-Orbit-Manipulator-Series-%28Updated-March-12-2014%29\u0022 rel=\u0022external nofollow\u0022\u003EAlready done\u003C/a\u003E. Although I have it installed, have not been able to see it in action myself so don\u0027t know how well it works. Was planning to test it with a recent launch but ended up dropping my spent stage at 75km \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"FiiZzioN","CreatedById":108954,"CreatedDateTime":"2014-10-29T04:31:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Gaiiden\u0022 data-cite=\u0022Gaiiden\u0022\u003E\u003Cdiv\u003EGreat to see this released. Hope to see background EC consumption soon as well!\u003Cp\u003E\u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/70881-0-24-Orbit-Manipulator-Series-%28Updated-March-12-2014%29\u0022 rel=\u0022external nofollow\u0022\u003EAlready done\u003C/a\u003E. Although I have it installed, have not been able to see it in action myself so don\u0027t know how well it works. Was planning to test it with a recent launch but ended up dropping my spent stage at 75km \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_tongue.gif\u0022 alt=\u0022:P\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThanks for pointing to this mod! It\u0027s something I\u0027ve wanted for quite a while; it\u0027s nice to see it actually exists.\u003C/p\u003E\n"},{"CreatedByName":"sidfu","CreatedById":70409,"CreatedDateTime":"2014-12-08T23:10:44Z","Content":"\n\u003Cp\u003E[ERR 17:54:19.121] BackgroundProcessing: Ran out of modules before finding module FARBasicDragModel\u003C/p\u003E\u003Cp\u003Eis all is eem to get from this tons of messages saying ran out of modules. guess shouldnt use tthis maybe till mod authors incorprate it first maybe.\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-12-09T03:24:05Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022sidfu\u0022 data-cite=\u0022sidfu\u0022\u003E\u003Cdiv\u003E[ERR 17:54:19.121] BackgroundProcessing: Ran out of modules before finding module FARBasicDragModel\u003Cp\u003Eis all is eem to get from this tons of messages saying ran out of modules. guess shouldnt use tthis maybe till mod authors incorprate it first maybe.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat particular error message isn\u0027t super important - it\u0027s in there because it\u0027s good for me to know about, but it shouldn\u0027t break too much. It happens when I can\u0027t find a PartModule for a given unloaded Part in a vessel - in this case, it looks like FAR creates some PartModules on all parts when they\u0027re created, but doesn\u0027t modify the part prefab, so I can\u0027t find an actual instantiated instance of the FAR modules. That means I won\u0027t do background resource handling for those modules, but given that FAR\u0027s inserted modules don\u0027t contain or consume resources anyway that shouldn\u0027t matter too much. I\u0027m looking into ways of improving this behaviour, but it\u0027s kind of tricky to get some of the information I want for a PartModule from its ProtoPartModuleSnapshot.\u003C/p\u003E\n"},{"CreatedByName":"sidfu","CreatedById":70409,"CreatedDateTime":"2014-12-09T04:02:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EThat particular error message isn\u0027t super important - it\u0027s in there because it\u0027s good for me to know about, but it shouldn\u0027t break too much. It happens when I can\u0027t find a PartModule for a given unloaded Part in a vessel - in this case, it looks like FAR creates some PartModules on all parts when they\u0027re created, but doesn\u0027t modify the part prefab, so I can\u0027t find an actual instantiated instance of the FAR modules. That means I won\u0027t do background resource handling for those modules, but given that FAR\u0027s inserted modules don\u0027t contain or consume resources anyway that shouldn\u0027t matter too much. I\u0027m looking into ways of improving this behaviour, but it\u0027s kind of tricky to get some of the information I want for a PartModule from its ProtoPartModuleSnapshot.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003Eok thats good then. but its annoying to keep seeing when i was trying to hunt down a incompatiable mod and haveing a message from it every time i left the hangers lol.\u003C/p\u003E\n"},{"CreatedByName":"Budgie","CreatedById":13840,"CreatedDateTime":"2014-12-09T05:05:50Z","Content":"\n\u003Cp\u003EI\u0027m really excited to see if this will affect non-active ships. I\u0027m tired of my space stations spinning around as if they have no internal reaction wheels and such\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2014-12-09T05:13:22Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Budgie\u0022 data-cite=\u0022Budgie\u0022\u003E\u003Cdiv\u003EI\u0027m really excited to see if this will affect non-active ships. I\u0027m tired of my space stations spinning around as if they have no internal reaction wheels and such\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t make any attempt to maintain orientation or anything like that. It does work on non-active ships, but as a user, and with close to zero mods using this right now, the only change you\u0027ll notice is that electric charge will be consumed by command modules and generated by solar panels and anything using ModuleGenerator (The PB-NUK in stock, maybe some mods).\u003C/p\u003E\n"},{"CreatedByName":"Budgie","CreatedById":13840,"CreatedDateTime":"2014-12-09T18:53:51Z","Content":"\n\u003Cp\u003EAs a cheaty workaround, could you lock orientation in exchange for a constant power draw (hopefully offset by panels)?\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-03T07:42:54Z","Content":"\n\u003Cp\u003EI was fooling around with attempting to support BackgroundProcessing in BTSM this evening, which seems to run fine on its own, but soon as I attempt to add callbacks into my own part modules, it appears to crash the game during loading before hitting the main menu.\u003C/p\u003E\u003Cp\u003EI only added a single function to my part module, as follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc )        \u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Persistant update for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhich is obviously not intended to do anything other than establish that the callback is indeed being called at the appropriate time. Removing the single Debug.Log() call results in the same crash.\u003C/p\u003E\u003Cp\u003EAny ideas as to what might be causing it? Am I doing something funky or am I simply the first to test out the mod support functionality?\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-03T08:11:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003EI was fooling around with attempting to support BackgroundProcessing in BTSM this evening, which seems to run fine on its own, but soon as I attempt to add callbacks into my own part modules, it appears to crash the game during loading before hitting the main menu.\u003Cp\u003EI only added a single function to my part module, as follows:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc )        \u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Persistant update for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EWhich is obviously not intended to do anything other than establish that the callback is indeed being called at the appropriate time. Removing the single Debug.Log() call results in the same crash.\u003C/p\u003E\u003Cp\u003EAny ideas as to what might be causing it? Am I doing something funky or am I simply the first to test out the mod support functionality?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAll of my prior tests had only one part with a given partmodule that had a FixedBackgroundUpdate, so I hadn\u0027t noticed that I was handling each partmodule once for each part that contained it. And the handling includes calling Add on a dictionary, so that\u0027s a crash. Should be fixed in 0.3.5.2, which I just pushed to KerbalStuff and source control. Sorry for the mistake, thanks for the catch.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-03T09:12:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EAll of my prior tests had only one part with a given partmodule that had a FixedBackgroundUpdate, so I hadn\u0027t noticed that I was handling each partmodule once for each part that contained it. And the handling includes calling Add on a dictionary, so that\u0027s a crash. Should be fixed in 0.3.5.2, which I just pushed to KerbalStuff and source control. Sorry for the mistake, thanks for the catch.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECool stuff man. Much obliged for the quick fix. Will have another go at it tomorrow.\u003C/p\u003E\u003Cp\u003E\u003Cspan style=\u0022font-size:8px;\u0022\u003E\u003Cspan style=\u0022color:#C0C0C0;\u0022\u003E- - - Updated - - -\u003C/span\u003E\u003C/span\u003E\u003C/p\u003E\u003Cp\u003EWell, decided to give it a try with 3.5.2, and unfortunately same crash is occurring. Here\u0027s the full source file in case it helps any:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eusing System;\u003Cbr\u003Eusing System.Collections.Generic;\u003Cbr\u003Eusing System.Linq;\u003Cbr\u003Eusing System.Text;\u003Cbr\u003Eusing UnityEngine;\u003Cbr\u003E\u003Cbr\u003Enamespace BTSM\u003Cbr\u003E{\u003Cbr\u003E    [KSPModule( \u0022Probe Core\u0022 )]\u003Cbr\u003E    class BTSMModuleProbePower : BTSMPartModule\u003Cbr\u003E    {\u003Cbr\u003E        private static int m_iNumOutOfEnergyUpdatesForDamage = 20;\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = false )]\u003Cbr\u003E        public float energyConsumedRate = 0.16666668F; // default is same as Stayputnik (6X a stock probe core)\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = false )]\u003Cbr\u003E        public bool canBeDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = true )]\u003Cbr\u003E        public bool m_bProbeDamaged = false; // persistant variable to track if the probe has been damaged by lack of power\u003Cbr\u003E\u003Cbr\u003E\t\tprivate float m_fEnergyRequiredLeftovers = 0F; // variable to store any energy remnants required which haven\u0027t been consumed on a previous update\u003Cbr\u003E        private int m_iOutOfEnergyUpdateCount = 0; // acts as buffer to prevent momentary power supply problems due to vanilla bugs causing probe cores to fail\u003Cbr\u003E\u003Cbr\u003E        [KSPField( isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = \u0022Probe Core\u0022), UI_Toggle( disabledText=\u0022Enabled\u0022, enabledText=\u0022Disabled\u0022 )]\u003Cbr\u003E        public bool coreDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        public bool m_bPreviousCoreDisabled = false;\u003Cbr\u003E\u003Cbr\u003E        [KSPAction( \u0022Toggle Probe Core\u0022 )]\u003Cbr\u003E        public void ToggleProbeCoreAction( KSPActionParam param )\u003Cbr\u003E        {\u003Cbr\u003E            if ( vessel != null \u0026amp;\u0026amp; vessel.IsControllable \u0026amp;\u0026amp; canBeDisabled )\u003Cbr\u003E            {\u003Cbr\u003E                coreDisabled = !coreDisabled;\u003Cbr\u003E\u003Cbr\u003E                RefreshAssociatedWindows();\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void OnStart( StartState state )\u003Cbr\u003E        {\u003Cbr\u003E            base.OnStart(state);\u003Cbr\u003E\u003Cbr\u003E            if ( !m_bInEditor )\u003Cbr\u003E            {\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    DamageAssociatedProbeCore();\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    SetProbeCoreDeactivated( coreDisabled );\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                BaseField coreEnabledField = Fields[\u0022coreDisabled\u0022];\u003Cbr\u003E\u003Cbr\u003E                if ( coreEnabledField != null )\u003Cbr\u003E                {\u003Cbr\u003E                    coreEnabledField.guiActive = canBeDisabled;\u003Cbr\u003E                    coreEnabledField.guiActiveEditor = canBeDisabled;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            m_bPreviousCoreDisabled = coreDisabled;\u003Cbr\u003E            m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E            m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override void FixedUpdate()\u003Cbr\u003E        {\u003Cbr\u003E            base.FixedUpdate();\u003Cbr\u003E\u003Cbr\u003E            if ( !m_bInEditor )\u003Cbr\u003E            {\u003Cbr\u003E                bool bShouldGUIBeActive = canBeDisabled;\u003Cbr\u003E\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    bShouldGUIBeActive = false;\u003Cbr\u003E                }\u003Cbr\u003E                else \u003Cbr\u003E                {\u003Cbr\u003E                    if ( m_bPreviousCoreDisabled != coreDisabled )\u003Cbr\u003E                    {\u003Cbr\u003E                        SetProbeCoreDeactivated( coreDisabled );\u003Cbr\u003E\u003Cbr\u003E                        m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E                        m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E                    }\u003Cbr\u003E\u003Cbr\u003E                    if ( !coreDisabled )\u003Cbr\u003E                    {\u003Cbr\u003E                        if ( !AttemptToDeductEnergyForUse() )\u003Cbr\u003E                        {\u003Cbr\u003E                            if ( !canBeDisabled )\u003Cbr\u003E                            {\u003Cbr\u003E                                DamageAssociatedProbeCore();\u003Cbr\u003E\u003Cbr\u003E                                bShouldGUIBeActive = false;\u003Cbr\u003E                            }\u003Cbr\u003E                            else\u003Cbr\u003E                            {\u003Cbr\u003E                                coreDisabled = true;\u003Cbr\u003E\u003Cbr\u003E                                SetProbeCoreDeactivated( true );\u003Cbr\u003E\u003Cbr\u003E                                ScreenMessages.PostScreenMessage( part.partInfo.title \u002B \u0022 shut itself down due to lack of power.\u0022, 10F, ScreenMessageStyle.UPPER_CENTER );\u003Cbr\u003E\u003Cbr\u003E                                m_fEnergyRequiredLeftovers = 0F;\u003Cbr\u003E                                m_iOutOfEnergyUpdateCount = 0;\u003Cbr\u003E                            }\u003Cbr\u003E                        }\u003Cbr\u003E                    }\u003Cbr\u003E                    else if ( !vessel.IsControllable )\u003Cbr\u003E                    {\u003Cbr\u003E                        bShouldGUIBeActive = false;\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                BaseField coreEnabledField = Fields[\u0022coreDisabled\u0022];\u003Cbr\u003E\u003Cbr\u003E                if ( coreEnabledField != null )\u003Cbr\u003E                {\u003Cbr\u003E                    if ( coreEnabledField.guiActive != bShouldGUIBeActive )\u003Cbr\u003E                    {\u003Cbr\u003E                        coreEnabledField.guiActive = bShouldGUIBeActive;\u003Cbr\u003E\u003Cbr\u003E                        RefreshAssociatedWindows();\u003Cbr\u003E                    }\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                UpdateStateString();\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            m_bPreviousCoreDisabled = coreDisabled;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private bool AttemptToDeductEnergyForUse()\u003Cbr\u003E        {\u003Cbr\u003E            return ConsumeResourceReliable( \u0022ElectricCharge\u0022, energyConsumedRate, m_iNumOutOfEnergyUpdatesForDamage, ref m_iOutOfEnergyUpdateCount, ref m_fEnergyRequiredLeftovers );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void DamageAssociatedProbeCore()\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                associatedCommandModule.minimumCrew = 1;\u003Cbr\u003E\u003Cbr\u003E                if ( !m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    m_bProbeDamaged = true;\u003Cbr\u003E\u003Cbr\u003E                    ScreenMessages.PostScreenMessage( part.partInfo.title \u002B \u0022 was damaged due to lack of power.\u0022, 10F, ScreenMessageStyle.UPPER_CENTER );\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void SetProbeCoreDeactivated( bool bDeactivated )\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                if ( bDeactivated )\u003Cbr\u003E                {\u003Cbr\u003E                    associatedCommandModule.minimumCrew = 1;\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    associatedCommandModule.minimumCrew = 0;\u003Cbr\u003E                }\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private void UpdateStateString()\u003Cbr\u003E        {\u003Cbr\u003E            ModuleCommand associatedCommandModule = FindAssociatedCommandModule();\u003Cbr\u003E\u003Cbr\u003E            if ( associatedCommandModule != null )\u003Cbr\u003E            {\u003Cbr\u003E                string sDesiredStateString = \u0022Operational\u0022;\u003Cbr\u003E\u003Cbr\u003E                if ( m_bProbeDamaged )\u003Cbr\u003E                {\u003Cbr\u003E                    sDesiredStateString = \u0022Damaged\u0022;\u003Cbr\u003E                }\u003Cbr\u003E                else if ( coreDisabled )\u003Cbr\u003E                {\u003Cbr\u003E                    sDesiredStateString = \u0022Disabled\u0022;\u003Cbr\u003E                }\u003Cbr\u003E\u003Cbr\u003E                associatedCommandModule.controlSrcStatusText = sDesiredStateString;\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        private ModuleCommand FindAssociatedCommandModule()\u003Cbr\u003E        {\u003Cbr\u003E            return (ModuleCommand)FindAssociatedModuleOfType( \u0022ModuleCommand\u0022 );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public override string GetInfo()\u003Cbr\u003E        {\u003Cbr\u003E            string sDescString =\u003Cbr\u003E                \u0022\u0026lt;b\u0026gt;\u0026lt;color=#99ff00ff\u0026gt;Requires:\u0026lt;/color\u0026gt;\u0026lt;/b\u0026gt;\\n\u0022 \u002B \u003Cbr\u003E                \u0022- \u0026lt;b\u0026gt;Electric Charge: \u0026lt;/b\u0026gt;\u0022 \u002B FormatRateString( energyConsumedRate ) \u002B \u0022\\n\u0022;\u003Cbr\u003E\u003Cbr\u003E            if ( canBeDisabled )\u003Cbr\u003E            {\u003Cbr\u003E                sDescString \u002B= \u0022\\n\u0026lt;b\u0026gt;Can Be Safely Powered Down\u0026lt;/b\u0026gt;\\n\u0022;\u003Cbr\u003E            }\u003Cbr\u003E            else\u003Cbr\u003E            {\u003Cbr\u003E                sDescString \u002B= \u0022\\n\u0026lt;b\u0026gt;WARNING: Requires constant power to avoid damage\u0026lt;/b\u0026gt;\\n\u0022;\u003Cbr\u003E            }\u003Cbr\u003E\u003Cbr\u003E            return sDescString;\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc )        \u003Cbr\u003E        {\u003Cbr\u003E            Debug.Log( \u0022BTSMModuleProbePower: Persistant update for \u0022 \u002B vessel.vesselName );\u003Cbr\u003E\u003Cbr\u003E            /*\u003Cbr\u003E            float fResourceToRequest = 10F;\u003Cbr\u003E\u003Cbr\u003E            float fResourceConsumed = ResourceRequestFunc( vessel, fResourceToRequest, \u0022ElectricCharge\u0022 );\u003Cbr\u003E            */\u003Cbr\u003E        }\u003Cbr\u003E    }\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EFixedBackgroundUpdate() callback is right at that bottom there, and is the only thing I\u0027ve changed from previous versions.\u003C/p\u003E\u003Cp\u003EBTSMModuleProbePower is basically added to every probe core in the game and replaces the stock energy management for probe cores in the mod to handle them being damaged due to lack of power, and also to get around stock rounding errors in resource management by tracking remainders between ticks. If you take a look at the mod itself, the modules are added in BTSMPartChanges.cfg with an example right at the top of the file for the Stayputnik, like so:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E// Stayputnik Mk1\u003Cbr\u003E@PART[probeCoreSphere]\u003Cbr\u003E{\u003Cbr\u003E\t@TechRequired = start\u003Cbr\u003E\u003Cbr\u003E\t@description = The Stayputnik offers the ultimate solution in crew safety. A \u0022lightweight\u0022 sphere equipped with remote receivers, it carries no crew at all, thus keeping them perfectly safe from all harm. This device does require electricity to operate however, and will cease to function if the power runs out. The built-in batteries should keep it going for about 10 minutes.\u003Cbr\u003E\u003Cbr\u003E\t@cost = 500 // 300 stock\u003Cbr\u003E\u003Cbr\u003E\t@mass = 0.5 // 0.6 1.522 // 0.05 stock\u003Cbr\u003E\u003Cbr\u003E\t// noseconeish drag\u003Cbr\u003E\t@maximum_drag = 0.1\u003Cbr\u003E\t@minimum_drag = 0.1\u003Cbr\u003E\t@angularDrag = 0.5\u003Cbr\u003E\u003Cbr\u003E\t@MODULE[ModuleCommand]\u003Cbr\u003E\t{\u003Cbr\u003E\t\t!RESOURCE[ElectricCharge]\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = BTSMModuleProbePower\u003Cbr\u003E\u003Cbr\u003E\t\tenergyConsumedRate = 0.165 // 6X stock core (0.02777778 rounded to 0.0275)\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t@RESOURCE[ElectricCharge]\u003Cbr\u003E\t{\u003Cbr\u003E\t\t@amount = 100 // 10 stock\u003Cbr\u003E\t\t@maxAmount = 100 // 10\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t!MODULE[ModuleReactionWheel]\u003Cbr\u003E\t{\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\t!MODULE[ModuleSAS]\u003Cbr\u003E\t{\u003Cbr\u003E\t}\u003Cbr\u003E\u003Cbr\u003E\tMODULE\u003Cbr\u003E\t{\u003Cbr\u003E\t\tname = BTSMModulePressureRated\u003Cbr\u003E\t}\t\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ELet me know if there\u0027s any other relevant info I can provide.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-03T09:21:59Z\u0022 title=\u002202/03/2015 09:21  AM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 3, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-03T09:24:16Z","Content":"\n\u003Cp\u003EDebug log would be most relevant. I assume it\u0027s crashing in the same place - during load?\u003C/p\u003E\u003Cp\u003EI just double-checked my own multiple-parts-with-the-same-partmodule-with-background-update test, and it\u0027s definitely working over here.\u003C/p\u003E\u003Cp\u003EI\u0027m currently in #kspmodders on Espernet if you\u0027d prefer a more real-time chat.\u003C/p\u003E\u003Cp\u003EEDIT: Of course you\u0027re doing something more complicated than that, duh. Ignore the below:\u003C/p\u003E\u003Cp\u003EIncidentally, background processing already does electric charge consumption for ModuleCommands with electric charge in inputResources, so unless you\u0027re doing something more complicated than that (or replacing that) you might be able to get away without a callback.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-03T09:35:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EEDIT: Of course you\u0027re doing something more complicated than that, duh. Ignore the below:\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EHehe...yeah, and I\u0027m also using this as a simple test case to see how the system works overall. More complicated stuff like the mod\u0027s life support system and resource processors can wait until I\u0027ve learned the basics of how everything works \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cp\u003EWill PM you the relevant portions of the log momentarily.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-03T19:51:26Z","Content":"\n\u003Cp\u003EAll right, as per our discussion last night just tried compiling with .NET Framework 3.5 instead of the 4.5 I was using and everything seems to be working fine so far. I suspect I had changed to 4.5 awhile back to compile relative to another mod I was working with, but really can\u0027t remember the details there other than knowing I did it intentionally at some point. Thanks for the help on tracking it down.\u003C/p\u003E\u003Cp\u003EOn one point of immediate feedback: the debug log spam is currently rather out of control and I suspect I will likely compile my own version of BackgroundProcessing to get rid of that for now. While it might not be a priority for end-users (although I think excessive log spam tends to negatively impact performance), for mod developers it\u0027s a rather big deal in being able to track down our own debugging messages amongst a wall of text \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-04T02:46:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003EAll right, as per our discussion last night just tried compiling with .NET Framework 3.5 instead of the 4.5 I was using and everything seems to be working fine so far. I suspect I had changed to 4.5 awhile back to compile relative to another mod I was working with, but really can\u0027t remember the details there other than knowing I did it intentionally at some point. Thanks for the help on tracking it down.\u003Cp\u003EOn one point of immediate feedback: the debug log spam is currently rather out of control and I suspect I will likely compile my own version of BackgroundProcessing to get rid of that for now. While it might not be a priority for end-users (although I think excessive log spam tends to negatively impact performance), for mod developers it\u0027s a rather big deal in being able to track down our own debugging messages amongst a wall of text \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAFAIK you really have to compile against .net 3.5 for KSP to load you properly, although that might have changed in 0.90. Good to see it was a simple problem though, and you helped me find a legitimate bug in my code.\u003C/p\u003E\u003Cp\u003EDebug log spam should be substantially lessened in the source control head, I just haven\u0027t made a release of it. I\u0027ve been pretty terrible at release management, and occasionally some stuff I left in there for debugging is still there.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-04T02:56:15Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022jamespicone\u0022 data-cite=\u0022jamespicone\u0022\u003E\u003Cdiv\u003EAFAIK you really have to compile against .net 3.5 for KSP to load you properly, although that might have changed in 0.90. Good to see it was a simple problem though, and you helped me find a legitimate bug in my code.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECan\u0027t remember precisely when I changed it, but I\u0027ve certainly released several version of BTSM compiled with 4.5, so if it was a problem at some point, it definitely isn\u0027t with current versions of KSP or I would have heard back from players about it by now \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EDebug log spam should be substantially lessened in the source control head, I just haven\u0027t made a release of it. I\u0027ve been pretty terrible at release management, and occasionally some stuff I left in there for debugging is still there.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ECool stuff man. That should help a lot.\u003C/p\u003E\n"},{"CreatedByName":"m4v","CreatedById":67965,"CreatedDateTime":"2015-02-04T03:15:47Z","Content":"\n\u003Cp\u003EKSP uses .net 3.5, but you can use 4.0 or higher without problems until you run into one.\u003C/p\u003E\n"},{"CreatedByName":"Crzyrndm","CreatedById":92871,"CreatedDateTime":"2015-02-04T03:17:34Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022FlowerChild\u0022 data-cite=\u0022FlowerChild\u0022\u003E\u003Cdiv\u003ECan\u0027t remember precisely when I changed it, but I\u0027ve certainly released several version of BTSM compiled with 4.5, so if it was a problem at some point, it definitely isn\u0027t with current versions of KSP or I would have heard back from players about it by now \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EPreviously targetting 4.0\u002B only went wonky for some specific functionality (from memory, reflection results in fairly consistent breakages if 3.5 isn\u0027t targetted) and/or platforms (problems on Linux but not Windows).\u003C/p\u003E\u003Cp\u003ECompile against 3.5, it saves you many headaches if things do go wrong.\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-04T04:28:49Z","Content":"\n\u003Cp\u003EFair enough, will stay away from 4.5 in the future if I can avoid it \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_k_smiley.gif\u0022 alt=\u0022:)\u0022\u003E\u003C/p\u003E\n"},{"CreatedByName":"FlowerChild","CreatedById":74289,"CreatedDateTime":"2015-02-04T20:59:29Z","Content":"\n\u003Cp\u003EA bit more feedback based on my further experimentation:\u003C/p\u003E\u003Cp\u003EIt\u0027s occurring to me that it would be super useful in implementing custom background processing for a module if some basic data storage on a per module basis were provided.\u003C/p\u003E\u003Cp\u003ELooking over the source, it appears you are already doing this kind of thing for stock parts (for example, solar panels) so that when initializing each of the background vessels you can parse the config nodes associated with them once and then refer to that data later on without having to parse it every update.\u003C/p\u003E\u003Cp\u003EFor custom handlers though, unless I\u0027m missing something, modders aren\u0027t really left with much of a choice other than to parse those config nodes every update (which would likely be a nasty drain on performance) or maintain their own independent vessel/module lists to store custom data, which effectively duplicates a lot of the functionality already in BackgroundProcessing.\u003C/p\u003E\u003Cp\u003ESo what I\u0027m wondering is if it might not be really helpful to have static callback functions for initializing such custom data within a part module, called when BackgroundProcessing initializes the rest of the vessel data, and returning a reference to it. The list of BackgroundProcessing vessel/module data could then contain a reference to it (null by default), and pass it along to the FixedBackgroundUpdate() functions so that custom handlers could type cast it into whatever specific data type we setup and do with it what they will.\u003C/p\u003E\u003Cp\u003ETo provide a more concrete example, in the case of my probe core energy management code that I posted previously, it would be super handy if I could store whether a particular probe was damaged or disabled during initialization of a background vessel, along with its energy consumption rate, then refer to those stored variables in my custom FixedBackgroundUpdate() function to determine whether it should be draining power or not and how much. I can also see that kind of thing being useful for other things I\u0027m going to be implementing, such as needing to know how many Kerbals are within a part to determine its life support requirements.\u003C/p\u003E\u003Cp\u003ESo maybe something along these lines:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E        public static object InitializeCustomModuleData( Vessel vessel, uint uiFlightID )\u003Cbr\u003E        {\u003Cbr\u003E            // parse vessel data here\u003Cbr\u003E\u003Cbr\u003E            return new BTSMModuleProbePowerBackgroundStorage( bIsActiveCore, fEnergyConsumptionRate );\u003Cbr\u003E        }\u003Cbr\u003E\u003Cbr\u003E        public static void FixedBackgroundUpdate( Vessel vessel, uint uiFlightID, Func\u0026lt;Vessel, float, string, float\u0026gt; ResourceRequestFunc, object customModuleData )        \u003Cbr\u003E        {\u003Cbr\u003E            BTSMModuleProbePowerBackgroundStorage probeModuleData = (BTSMModuleProbePowerBackgroundStorage)customModuleData;\u003Cbr\u003E\u003Cbr\u003E            if ( probeModuleData.m_bIsActiveCore )\u003Cbr\u003E            {\u003Cbr\u003E               // do stuff\u003Cbr\u003E            }\u003Cbr\u003E        }\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EAny thoughts on this? The above may not represent the best implementation for such a scheme, but is what struck me as immediately useful while I was working on creating a custom background update handler.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-02-04T23:04:35Z\u0022 title=\u002202/04/2015 11:04  PM\u0022 data-short=\u00229 yr\u0022\u003EFebruary 4, 2015\u003C/time\u003E by FlowerChild\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"jamespicone","CreatedById":125714,"CreatedDateTime":"2015-02-05T01:17:23Z","Content":"\n\u003Cp\u003EThere\u0027s a big difference between the resource module data that I store and providing a generic per-module data store for other users - the resource module info isn\u0027t really associated with a given partmodule once I\u0027ve made it.\u003C/p\u003E\u003Cp\u003EIf I was storing per partmodule data for modders, I\u0027d have to guarantee that they were getting the same data with the same module, and there\u0027s no good identifying features for ProtoPartModuleSnapshots. Mapping the data to an individual ProtoPartModuleSnapshot across a save/load is ugly. I *think* I could do it by using the index into the module list as a key, but that\u0027s not a very stable solution under, for example, someone saving the game, removing a mod, and then loading the game.\u003C/p\u003E\u003Cp\u003EIt has to persist across save/load because someone can close the game while a vessel is in the background and then open it again with the same vessel in the background.\u003C/p\u003E\u003Cp\u003EAlthough now that I think about it, partmodules on an unloaded vessel won\u0027t get the opportunity to read from the persistence file, which means the \u0022let them sort it out\u0022 option has some problems...\u003C/p\u003E\u003Cp\u003EI\u0027ll look into it.\u003C/p\u003E\u003Cp\u003EIncidentally, as of right now FixedBackgroundUpdate isn\u0027t called once per PartModule on unloaded vessels. It\u0027s called once per PartModule type per part. So if a Part has two PartModules of the same type that both implement FixedBackgroundUpdate, FixedBackgroundUpdate will only get called /once/ on that partmodule type with that partFlightID. That\u0027s another one that\u0027s a result of trying to sidestep how tricky it is to keep ProtoPartSnapshot module lists in sync with Part module lists.\u003C/p\u003E\n"}]}