{"TopicId":224949,"ForumId":29,"TopicTitle":"What are generalized, rule of thumb approaches for cloning a repo and figuring out its build requirements? Especially project files pointing at non-existent files.","CreatedByName":"RunaDacino","CreatedById":233327,"CreatedDateTime":"2024-05-28T13:58:04Z","PageNum":1,"Articles":[{"CreatedByName":"RunaDacino","CreatedById":233327,"CreatedDateTime":"2024-05-28T13:58:04Z","Content":"\n\u003Cp\u003E\nHello!\n\u003C/p\u003E\n\u003Cp\u003E\nI want to fork and modify some annoying hard-coded values in\u00A0\u003Ca href=\u0022https://github.com/allista/GroundConstruction\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/allista/GroundConstruction\u003C/a\u003E\u00A0pertaining to how ground kit size and time are calculated as stuff keeps exploding and becoming kilometers wide and tall. Not ideal.\u00A0\u003Cbr\u003E\nWhile I havn\u0027t worked with Unity/C# before, I trust I can leverage my python, BYOND and fortran/C/C\u002B\u002B experience to figure it out. It\u0027s just adjusting variables anyhow.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nUnfortunately, I ran into an issue on building this project. The project file points to a \u0022CSharp.warnings.xml\u0022 in the project directory that does not exist.\n\u003C/p\u003E\n\u003Cdiv class=\u0022ipsSpoiler\u0022 data-ipsspoiler=\u0022\u0022\u003E\n\u003Cdiv class=\u0022ipsSpoiler_header\u0022\u003E\n\u003Cspan\u003ESpoiler\u003C/span\u003E\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsSpoiler_contents\u0022\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003E    \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Import\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022atn\u0022\u003EProject\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E\u0022$(MSBuildProjectDirectory)/../CSharp.warnings.xml\u0022\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E/\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;PropertyGroup\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E \u003C/span\u003E\u003Cspan class=\u0022atn\u0022\u003ECondition\u003C/span\u003E\u003Cspan class=\u0022pun\u0022\u003E=\u003C/span\u003E\u003Cspan class=\u0022atv\u0022\u003E\u0022 \u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|AnyCPU\u0027 \u0022\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;DebugSymbols\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/DebugSymbols\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;DebugType\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efull\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/DebugType\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;Optimize\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efalse\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/Optimize\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;OutputPath\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EGameData\\GroundConstruction\\Plugins\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/OutputPath\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;DefineConstants\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003EDEBUG;\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/DefineConstants\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ErrorReport\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Eprompt\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/ErrorReport\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;WarningLevel\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E4\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/WarningLevel\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ConsolePause\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Efalse\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/ConsolePause\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n        \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;CheckForOverflowUnderflow\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003Etrue\u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/CheckForOverflowUnderflow\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E\n    \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;/PropertyGroup\u0026gt;\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/div\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nMost other mods with gits have detailed build requirements, this one stumps me.\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nedit: I found I can edit some of what I want in the .GLOB file without rebuilding, but I still want to rebuild it for capping maximum volume rather than setting density to ... interesting values.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-28T14:19:45Z\u0022 title=\u002205/28/2024 02:19  PM\u0022 data-short=\u0022May 28\u0022\u003EMay 28\u003C/time\u003E by RunaDacino\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"HebaruSan","CreatedById":156657,"CreatedDateTime":"2024-05-28T14:36:49Z","Content":"\n\u003Cp\u003E\nFound it:\n\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\u0022https://github.com/allista/AT_KSP_Plugins\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/allista/AT_KSP_Plugins\u003C/a\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\nLooks like this author\u0027s projects were all intended to be built from within that shared root folder (which is pretty unusual). I don\u0027t think there\u0027s a \u0022generalized, rule of thumb approach\u0022 for finding stuff like that, unfortunately; for me, after seeing that same file referenced in multiple of his csproj files, I figured it had to be out there\u00A0\u003Cem\u003Esomewhere\u003C/em\u003E\u00A0and started looking for a \u0022build utils\u0022 type repo on his user profile.\n\u003C/p\u003E\n"},{"CreatedByName":"RunaDacino","CreatedById":233327,"CreatedDateTime":"2024-05-29T05:03:10Z","Content":"\n\u003Cp\u003E\nThank you very much!\n\u003C/p\u003E\n\u003Cp\u003E\n\u00A0\n\u003C/p\u003E\n\u003Cp\u003E\nThis is very different from my past experience of \u0022everything you need is in the same repo with minimal external dependencies\u0022, but hey... new experiences.\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222024-05-29T05:04:40Z\u0022 title=\u002205/29/2024 05:04  AM\u0022 data-short=\u0022May 29\u0022\u003EMay 29\u003C/time\u003E by RunaDacino\u003C/strong\u003E\n\u003C/span\u003E\n"}]}