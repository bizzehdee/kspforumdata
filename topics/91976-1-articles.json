{"TopicId":91976,"ForumId":44,"TopicTitle":"Simulating a restricted 3-body system with On-Rails timewarping","CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-12-05T01:37:15Z","PageNum":1,"Articles":[{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-12-05T01:37:15Z","Content":"\n\u003Cp\u003EKSP uses the \u0022Patched Conics\u0022 system for orbital mechanics. What this means is that you patch together \u0022Spheres of Influence\u0022 (roughly equivalent to real-world Hill Spheres) to simulate only the gravity of the most prevalent gravity source. All trajectories are just conic sections patched together into ellipses. This system is also called \u0022Restricted Two-Body\u0022 because you use the Parent Body (Planet) with gravity and the Satellite (Spacecraft) without gravity. The advantage of this system is that the position and velocity of the spacecraft is a function of time. This means you can run time forwards (or backwards!) freely, and it will always be accurate. Compare to N-Body simulations which can not warp on rails, so timewarp introduces a whole lot of lag/inaccuracies.\u003C/p\u003E\u003Cp\u003EThe question is, can you simulate the two most gravitationally significant bodies at one time, whilst still being able to maintain an on-rails system where location is a function of time.\u003C/p\u003E\u003Cp\u003EWhy would anyone want this? Perhaps a space simulation game would want to simulate, say, Duna and Ike together. (Or Pluto and Charon). The two are actually a binary system, so the gravity of Ike would significantly affect spacecraft orbiting Duna, especially during a transfer orbit flight.\u003C/p\u003E\u003Cp\u003EAnd a quick bit about how planets would be simulated under this model: It\u0027s the same deal as the restricted 3-body system except all bodies have gravity. Ike and Duna both move together, and around the sun. You would not need a barycenter SOI. (Except perhaps as a boundary SOI, for when Kerbol\u0027s gravity is actually more influential than Ike\u0027s gravity. Only simulating Duna\u0027s gravity without factoring in Ike is like the difference between weighing a bowling ball versus a canonball. They have to have their gravity affect the craft at all times when inside Duna\u0027s Hill Sphere. So you probably need a sort of barycenter artificially determined area of influence to transition from Duna\u002BKerbol to Duna\u002BIke.\u003C/p\u003E\u003Cp\u003E\u003Cem\u003ETo be clear, I\u0027m using Duna and Ike as an example, not as an idea for a mod.\u003C/em\u003E\u003C/p\u003E\u003Cp\u003E\u002BRep and also sheer amazement if one of you advanced coder-type persons can manage to build a prototype of this. Just a star and two binary-orbit planets and a spacecraft which can change it\u0027s velocity, and it can transfer to on-rails warp. I know that if it\u0027s possible, some of you programmer-type people are skilled enough to do it. Think of it as a challenge. Not a contest or a prize, but a challenge.\u003C/p\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-05T01:47:48Z","Content":"\n\u003Cp\u003EThe math for 3 body is much much much harder than the math for 2 body. And it doesn\u0027t scale. The correct method to use that will work to N-bodies is described here : \u003Ca href=\u0022http://http.developer.nvidia.com/GPUGems3/gpugems3_ch31.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://http.developer.nvidia.com/GPUGems3/gpugems3_ch31.html\u003C/a\u003E\u003C/p\u003E\u003Cp\u003EBy using an octree to represent far away clouds of particles, the actual computational load is much less than N^2. It\u0027s not even that complicated - the code listings for all the key parts are right there in the article, and I\u0027ve heard of a half dozen folks who have gotten such a simulation running in their spare time. Also, using proper N-body gravity means it would not be any big deal to have ships running their engines during timewarp so that we don\u0027t have to wait all day for ion drive burns.\u003C/p\u003E\n"},{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-12-05T01:54:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EzinX\u0022 data-cite=\u0022EzinX\u0022\u003E\u003Cdiv\u003EThe math for 3 body is much much much harder than the math for 2 body. And it doesn\u0027t scale. The correct method to use that will work to N-bodies is described here : \u003Ca href=\u0022http://http.developer.nvidia.com/GPUGems3/gpugems3_ch31.html\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://http.developer.nvidia.com/GPUGems3/gpugems3_ch31.html\u003C/a\u003E\u003Cp\u003EBy using an octree to represent far away clouds of particles, the actual computational load is much less than N^2. It\u0027s not even that complicated - the code listings for all the key parts are right there in the article, and I\u0027ve heard of a half dozen folks who have gotten such a simulation running in their spare time. Also, using proper N-body gravity means it would not be any big deal to have ships running their engines during timewarp so that we don\u0027t have to wait all day for ion drive burns.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat do you mean \u0022doesn\u0027t scale\u0022? And this doesn\u0027t look like it could actually accellerate time without errors accumulating. Anyway, finding an alternate solution is not the point, the point is whether restricted 3-body on rails would work.\u003C/p\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-05T02:04:59Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022GregroxMun\u0022 data-cite=\u0022GregroxMun\u0022\u003E\u003Cdiv\u003EWhat do you mean \u0022doesn\u0027t scale\u0022? And this doesn\u0027t look like it could actually accellerate time without errors accumulating. Anyway, finding an alternate solution is not the point, the point is whether restricted 3-body on rails would work.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBy \u0022doesn\u0027t scale\u0022, I mean just that. You could maybe have 1 planet and a moon considered at the same time, but what about 2 moons? What about 1 moon and 1 asteroid and 1 planet? And so on and so forth. The correct solution is much easier and simpler to program than what you\u0027re asking for. \u003C/p\u003E\u003Cp\u003EAs for errors accumulating, actually, if you use symplectic integration, the errors for energy are guaranteed to remain bounded. What that means is, the actual position of the simulated bodies (aka phase angle) will vary over time, but the energy in their orbits will not. That means that stuff won\u0027t fall out of orbit, etc. The current method KSP uses does not preserve phase angle, either, so this drawback is not a detriment. (I don\u0027t know the exact reason it loses phase angle, but I know that if you put a satellite into perfect geosync it will drift anyway)\u003C/p\u003E\n"},{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-12-05T02:14:17Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EzinX\u0022 data-cite=\u0022EzinX\u0022\u003E\u003Cdiv\u003EBy \u0022doesn\u0027t scale\u0022, I mean just that. You could maybe have 1 planet and a moon considered at the same time, but what about 2 moons? What about 1 moon and 1 asteroid and 1 planet? And so on and so forth. The correct solution is much easier and simpler to program than what you\u0027re asking for. \u003Cp\u003EAs for errors accumulating, actually, if you use symplectic integration, the errors for energy are guaranteed to remain bounded. What that means is, the actual position of the simulated bodies (aka phase angle) will vary over time, but the energy in their orbits will not. That means that stuff won\u0027t fall out of orbit, etc. The current method KSP uses does not preserve phase angle, either, so this drawback is not a detriment. (I don\u0027t know the exact reason it loses phase angle, but I know that if you put a satellite into perfect geosync it will drift anyway)\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell I don\u0027t want 1 planet, 1 moon, and 1 asteroid. And I don\u0027t want to feel the gravity of two moons. I only want to deal with 2 sources of gravity at a time. This is not about solving the actual problem, it\u0027s about making a restricted 3-body on-rails and off-rails simulation. It\u0027s a challenge, like building a ternary computer or even a simple robot that unplugs itself.\u003C/p\u003E\u003Cp\u003EAnd what happens in the N-body solution here when you go up to very high timewarps? 1,000,000x timewarp? KSP can handle it. (As long as you don\u0027t change SOIs)\u003C/p\u003E\u003Cp\u003EI think the key of this is finding the recursion time of a system. The recursion time of a restricted 2-body system is the time it takes to complete one orbit. But for a 3-body system, the recursion time will obviously be much longer, but eventually (As long as an orbit is stable) there will be a recursion.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-05T02:17:42Z\u0022 title=\u002212/05/2014 02:17  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 5, 2014\u003C/time\u003E by GregroxMun\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-05T02:26:40Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022GregroxMun\u0022 data-cite=\u0022GregroxMun\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EAnd what happens in the N-body solution here when you go up to very high timewarps? 1,000,000x timewarp? KSP can handle it. (As long as you don\u0027t change SOIs)\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ETo handle higher timewarps, you have to start to sacrifice positional accuracy to a larger degree, which you don\u0027t want to do with planets. So, at least for Sol, baked solutions exist that work at any time warp like \u003Ca href=\u0022https://en.wikipedia.org/wiki/VSOP_%28planets%29#VSOP87\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://en.wikipedia.org/wiki/VSOP_%28planets%29#VSOP87\u003C/a\u003E . To do what you would like, you would need to create an analytical solution for the Kerbin system for all the major planets and moons that was accurate for several thousand years, just like VSOP87. This is essentially a gigantic equation that will tell you where any given body is at any given time, specific to the major planets in Sol. \u003C/p\u003E\u003Cp\u003EA solution like this is what you\u0027re really asking for : you would probably dig up the methods and code used to created VSOP87, then simulate the bodies of KSP over time using a powerful computer and then generate the equations from that empirical data.\u003C/p\u003E\n"},{"CreatedByName":"Whirligig Girl","CreatedById":36077,"CreatedDateTime":"2014-12-05T02:50:00Z","Content":"\n\u003Cp\u003ENo, all I\u0027m asking for is a star and a binary set of planets. Not the Kerbolar system.\u003C/p\u003E\u003Cp\u003EIf I wanted to make a whole solar system, then for the planets I\u0027d just have them in normal orbits. And at any rate, I\u0027m more concerned with this spacecraft.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-05T02:52:26Z\u0022 title=\u002212/05/2014 02:52  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 5, 2014\u003C/time\u003E by GregroxMun\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2014-12-05T05:31:23Z","Content":"\n\u003Cp\u003EOn-rails timewarping as you describe it requires an analytic solution for the three-body problem. In general the gravitational three-body problem has no analytic solution. The only three-body systems that do have analytic solutions have \u003Cem\u003Every\u003C/em\u003E particular restrictions. For example, in addition to the third body having negligible mass, there are analytical solutions \u003Ca href=\u0022http://ocw.mit.edu/courses/aeronautics-and-astronautics/16-07-dynamics-fall-2009/lecture-notes/MIT16_07F09_Lec18.pdf\u0022 rel=\u0022external nofollow\u0022\u003Eif the two massive bodies move around each other in circular orbits and all motion is restricted to the plane of that orbit\u003C/a\u003E. In more general cases, no. The motion is usually chaotic; there is no recursion time.\u003C/p\u003E\u003Cp\u003EAlso, regarding restricted N-body simulations of the Kerbal solar system, yes, they can run at 1,000,000x time warp and faster. In the context of KSP the game (i.e., the simulation only need run for ~100 years rather than geologic time periods and only need be accurate enough to produce reasonable-looking behavior in the game), it is even easy.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-05T05:54:53Z","Content":"\n\u003Cp\u003EIndeed. In order to get on-the-rails solution, you must first find constants of motion. There are 6 for a general orbit. In 2-body problem, these are trivially related to the 6 orbital elements. Furthermore, Energy and Angular Momentum account for 3 of the 6, which leaves a time and two angle references as your other 3.\u003C/p\u003E\u003Cp\u003EA 3-body restricted problem is not conservative. So energy is not a constant of motion. Neither is reference time. When you can\u0027t use time as a coordinate, you know you are in trouble. If the two massive bodies are further restricted to a circular orbit, then you can go into a rotating frame of reference, where energy is conserved. But you still have only one component of angular momentum. So that leaves two constants of motion and two coordinates to disentangle. If orbits are not circular, then you are completely screwed.\u003C/p\u003E\u003Cp\u003EI\u0027m not entirely sure why planar motion is a requirement. Intuitively, it feels like cylindrical symmetry here should let you generalize to any restricted 3-body where the two massive bodies are on a fixed circular orbit with respect to each other. I\u0027m going to play with Hamilton-Jacobi for this setup in cylindrical coordinates and see if I can come up with anything half-useful.\u003C/p\u003E\u003Cp\u003EEdit: Took a look at your link. It looks to me like 2D case is considered for simplicity. Same methodology should be applicable for general 3D motion. It\u0027s just going to be way scarier. But this would suggest that at least something like Kerbin-Mun system could be done as restricted 3-body on rails, giving these two their own, combined SOI. (Minmus would still need its own SOI.)\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-05T05:57:38Z\u0022 title=\u002212/05/2014 05:57  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 5, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2014-12-05T06:05:44Z","Content":"\n\u003Cp\u003EIt may be that the planar case was considered there for simplicity, but I\u0027ve seen it mentioned in multiple places as a restriction so I felt safe in claiming that. But this is getting outside of my experience, so I would not be terribly surprised to be shown to be wrong.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-05T06:50:44Z","Content":"\n\u003Cp\u003EI\u0027ve just realized, as I was writing it all down, that centrifugal potential breaks the cylindrical symmetry in the rotating frame. So it probably needs to be planar, after all. At least, I see no obvious way of separating this crocodile of an equation.\u003C/p\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-05T06:55:46Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI\u0027ve just realized, as I was writing it all down, that centrifugal potential breaks the cylindrical symmetry in the rotating frame. So it probably needs to be planar, after all. At least, I see no obvious way of separating this crocodile of an equation.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo why not just go ahead and do it with numerical integration for the N-body, using an octree to group together and average farther away bodies? GPU-gems makes it look so easy.\u003C/p\u003E\n"},{"CreatedByName":"Mattasmack","CreatedById":62809,"CreatedDateTime":"2014-12-06T01:48:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI\u0027ve just realized, as I was writing it all down, that centrifugal potential breaks the cylindrical symmetry in the rotating frame. So it probably needs to be planar, after all. At least, I see no obvious way of separating this crocodile of an equation.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAh, yeah, that would do it.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EzinX\u0022 data-cite=\u0022EzinX\u0022\u003E\u003Cdiv\u003ESo why not just go ahead and do it with numerical integration for the N-body, using an octree to group together and average farther away bodies? GPU-gems makes it look so easy.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBecause the context of this thread is GregoxMun asking about analytic solutions to a restricted three-body problem.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-06T02:00:15Z\u0022 title=\u002212/06/2014 02:00  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 6, 2014\u003C/time\u003E by Mattasmack\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"YNM","CreatedById":98447,"CreatedDateTime":"2014-12-06T04:33:59Z","Content":"\n\u003Cp\u003ERestricted three body problems are hard to a fair extent (Least are, harder than restricted two-body problems or harder than two body problems). As far as I can tell the only easy solution is for some special points where you can predict it\u0027ll stay there relative to the two bodies (ie. Lagrangian points). Other than that, you need to calculate the forces everytime, probably nearing infinite amount of calculations ; but as we can\u0027t reach that, you need to simplify it down, maybe calculating it every tens of milisecond. I know you\u0027re asking for a trajectory, but when you start to talk about N-body problem (restricted three-body problem is already one of it - the lowest, easiest of all) you should realize most movements will be chaotic, even in infinite time. No real predictions exist unless you already run the simulation to all those time - even it\u0027s not an unusual thing to see the true end is different compared to what\u0027s simulated. If you ever wonder why probes (or other things) mostly do mid-course correction, it\u0027s one of the reason.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-06T04:49:58Z\u0022 title=\u002212/06/2014 04:49  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 6, 2014\u003C/time\u003E by YNM\u003C/strong\u003E\n\u003Cbr\u003Eadding some clarity\n\u003C/span\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-06T04:35:54Z","Content":"\n\u003Cp\u003EAlso, while not a huge problem with 3 bodies, a general N-body 1/R potential problem is a numerical nightmare. Don\u0027t trust any game-oriented literature on the subject. You can run a plausible-looking galaxy with millions of stars using GPU, but you wouldn\u0027t be able to simulate trajectory of a comet well enough to say for sure if it will hit your planet within a few years with just a handful of significant sources of gravity in the system. And for a KSP-like game, ability to predict \u003Cem\u003Eprecisely\u003C/em\u003E where you\u0027ll end up is the key.\u003C/p\u003E\n"},{"CreatedByName":"SciMan","CreatedById":12748,"CreatedDateTime":"2014-12-06T06:30:35Z","Content":"\n\u003Cp\u003EEverybody keeps coming up with \u0022computational load\u0022 as a negative factor.\u003C/p\u003E\u003Cp\u003ELet me tell you, it\u0027s a complete and total NON-issue.\u003C/p\u003E\u003Cp\u003EFor evidence, I present Orbiter. Yes, the space sim that (partially?) inspired KSP.\u003C/p\u003E\u003Cp\u003EIt uses the VSOP87 solution that was mentioned several posts above mine, coupled with the ELP2000 solution for the Earth-Moon system.\u003C/p\u003E\u003Cp\u003EThat covers all 8 \u0022official\u0022 planets, Earth\u0027s Moon, the two moons of Mars, 4 moons of Jupiter, and a bunch around Saturn and Neptune as well.\u003C/p\u003E\u003Cp\u003EIt does all that, and it has time warp that allows engine thrust, atmospheric flight, and control inputs. And the time warp even tracks rotation.\u003C/p\u003E\u003Cp\u003EAnd it does that all at up to 600 frames per second. I could easily keep the simulation pegged at 600fps on a 7-8 year old computer, even at full time warp.\u003C/p\u003E\u003Cp\u003EAnd it can simulate non-spherical gravity, gravity gradient torque, Lagrange points and a bunch of other really tiny details that most people don\u0027t even know exist.\u003C/p\u003E\u003Cp\u003EAll of that means that the simulation is accurate and stable enough that the limiting factor is the accuracy of the burns that you perform, not the accuracy of the simulation.\u003C/p\u003E\u003Cp\u003EA fully autopilot flown mission in Orbiter will be able to choose which square meter of it\u0027s target planet it lands on, and tell you how much fuel you need down to a single cubic centimeter or better. And then it can do it again, as many times as you want or have fuel for.\u003C/p\u003E\u003Cp\u003EBottom line? If this idea is ever implemented, the load of the N-body physics calculations won\u0027t be what kills it. Assuming anything \u0022kills\u0022 it, of course. I doubt anything except a Unity bug could do such a thing.\u003C/p\u003E\u003Cp\u003EOf course, anyone attempting to make this system in KSP will probably need to re-work twenty other things just to get them all to agree on where the ship is going (maneuver nodes, I\u0027m looking at you).\u003C/p\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-06T06:35:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EAlso, while not a huge problem with 3 bodies, a general N-body 1/R potential problem is a numerical nightmare. Don\u0027t trust any game-oriented literature on the subject. You can run a plausible-looking galaxy with millions of stars using GPU, but you wouldn\u0027t be able to simulate trajectory of a comet well enough to say for sure if it will hit your planet within a few years with just a handful of significant sources of gravity in the system. And for a KSP-like game, ability to predict \u003Cem\u003Eprecisely\u003C/em\u003E where you\u0027ll end up is the key.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ESo, for a KSP like game, you want to be able to specify a rendezvous with, say, that comet, and perform a series of burns to set up the intercept. With true N-body gravity, everything affects everything to a degree, and you cannot serially run the simulation beyond the serial processing speed of your GPU. \u003C/p\u003E\u003Cp\u003EWell, we can\u0027t make that intercept perfectly in real life, either. Corrective burns have to be done. So, what you *could* do is the following :\u003C/p\u003E\u003Cp\u003EPlan the trajectory to reach the intercept position (a closest approach to the target) by using long timesteps and high order symplectic integration over a brief period of realtime. Essentially, you now have a rough trajectory that using a lower precision integration method than your game\u0027s real simulation uses (the longer timesteps cut the precision), ends up somewhere roughly where you want to be.\u003C/p\u003E\u003Cp\u003EIf the player approves the flight plan, you would perform corrective burns automatically during the flight if the relative differencee between the planned trajectory and the actual trajectory were tiny enough to correct this way.\u003C/p\u003E\u003Cp\u003EAnother approach is one even you probably haven\u0027t heard of, K^2. There is a method to simulate a serial trajectory in parallel, despite trajectories being a series of mathematically dependent states. PM me if you\u0027d like an explanation of how to use the method. Using that method, and given access to a monster GPU, you could run at at full simulation precision at millions of times speedup and predict a trajectory perfectly.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-06T07:47:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022EzinX\u0022 data-cite=\u0022EzinX\u0022\u003E\u003Cdiv\u003Elong timesteps and high order symplectic integration over a brief period of realtime.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd there is no symplectic method for 1/R potential. So you are down to implicit integration over collocation points, or some variation on that, which tends to be extremely time consuming. It also can\u0027t be broken into parallel computations, because you are solving a non-linear optimization problem at each point. Or we\u0027d all be doing that.\u003C/p\u003E\n"},{"CreatedByName":"EzinX","CreatedById":118288,"CreatedDateTime":"2014-12-07T00:39:00Z","Content":"\n\u003Cp\u003EWhat\u0027s this 1/R potential? At any given point along a spacecraft\u0027s trajectory, it\u0027s subject to forces from gravity and from it\u0027s own engine. Those forces always sum to an acceleration vector. That vector varies over time. You have a starting position, and you want to know the new velocity and new position. Boom, you just invented Euler\u0027s method.\u003C/p\u003E\u003Cp\u003E You then use a fancier method to compensate for some of the changes of acceleration over the timestep and you end up sampling at several past states and you end up with 4th order symplectic. Mathematically \u003Cem\u003Eproving \u003C/em\u003Eit or studying effects of the integrator and it\u0027s error over time is a whole field of study, but, regardless, you have something that works pretty well.\u003C/p\u003E\u003Cp\u003EI take it this 1/R problem is some change in energy from close approaches to planets? How big of a change are we talking about here?\u003C/p\u003E\u003Cp\u003EWith a game, you can cheat in several ways that scientists running simulations cannot. For one thing, you can simply declare that the planets obey a pre-baked solution like VSOP87. Even the longest KSP campaign is realistically not more than a century anyway, so some of the numerical integration methods are probably good enough that you won\u0027t have them crashing into each other or drifting too far from their orbits. You only really care about N-body effects on a \u003Cem\u003Espacecraft\u003C/em\u003E and so your numerical simulation does not have to be infinitely accurate.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2014-12-07T02:53:15Z","Content":"\n\u003Cp\u003EDo you actually know what \u0022symplectic integrator\u0022 means? I have no idea how you\u0027ve managed to pick up that term and not understand something about potentials.\u003C/p\u003E\u003Cp\u003EIn the context of gravitational interaction, and without getting into details of symplectic geometry, symplectic integrator would be the one that keeps energy within roughly the correct value. It can change due to numerical errors, but these errors don\u0027t explode over time.\u003C/p\u003E\u003Cp\u003EFor example, if you are simulating a spring, Forward Euler is \u003Cem\u003Enot\u003C/em\u003E symplectic. But then pretty much any second order method is. Which is why nearly every half-decent game simulation is done using Velocity Verlets. It\u0027s enough to prevent your collisions from \u0022exploding\u0022 the system.\u003C/p\u003E\u003Cp\u003EGravity has no symplectic method. Any integration method will end up with energy being lost or generated in the system. And that very quickly causes the system to diverge from true solution in \u003Cem\u003Echaotic and unpredictable way\u003C/em\u003E. There is no fix for it. You can keep padding your numerical accuracy and reducing the step size, using implicit methods for every step, but you will eventually have to give up. The reason we can do better with planets is because we use classical perturbation theory to improve our computations. These are analytical methods that let you take into account the most significant deviations from Kepler. So when we get down to numerical integration, we aren\u0027t computing the trajectory, but just small deviations from it.\u003C/p\u003E\u003Cp\u003EIf you have skill to actually write a numerical integrator, I suggest you try this. JPL\u0027s \u003Ca href=\u0022http://ssd.jpl.nasa.gov/horizons.cgi\u0022 rel=\u0022external nofollow\u0022\u003EHorizons\u003C/a\u003E will let you get NASA\u0027s solutions for trajectories of major bodies in Solar System. You can get it to dump literal XYZ coordinates with respect to your chosen origin. (I recommend using Solar System\u0027s barycenter, because you\u0027ll be in accelerated frame otherwise.) Grab the data for the Sun, all planets, major moons, and anything else you might consider a significant source of gravity. Then get trajectory of some comet or asteroid. (67P/Churyumov\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20AC\u0153Gerasimenko, for example?) Try to take its initial position and velocity, then use your favorite integration method, and see how close you get to the actual trajectory. Don\u0027t forget to compare kinetic energy at different points.\u003C/p\u003E\u003Cp\u003EAfter you have tried this, I think we\u0027ll end up having a completely different conversation about N-body dynamics.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-12-07T02:57:24Z\u0022 title=\u002212/07/2014 02:57  AM\u0022 data-short=\u00229 yr\u0022\u003EDecember 7, 2014\u003C/time\u003E by K^2\u003C/strong\u003E\n\u003C/span\u003E\n"}]}