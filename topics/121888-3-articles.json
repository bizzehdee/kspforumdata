{"TopicId":121888,"ForumId":44,"TopicTitle":"C, C\u002B\u002B, C# Programming - what is the sense in this","CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-28T14:21:11Z","PageNum":3,"Articles":[{"CreatedByName":"wumpus","CreatedById":133850,"CreatedDateTime":"2015-09-29T23:53:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E For starters, you can write an operating system in FORTRAN.\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENot with any of the parts of FORTRAN77 I learned. I understand that FORTRAN since then (i.e. F90 and later) may have things like pointers (that weren\u0027t fixed to arrays), but F77 just wasn\u0027t made for that sort of thing (and C was, especially since Richie was also busy creating UNIX). There were other parts of the language that appeared insane (call by value, lack of recursion) but may have been leftover from FORTRAN66*. If you couldn\u0027t write an OS in it till the 1980s, it was too late: Unix had taken over.\u003C/p\u003E\u003Cp\u003EThe old claim used to be \u0022I don\u0027t know what language will be used for scientific calculation in 20 years, but it will be called FORTRAN\u0022. I\u0027m surprised that isn\u0027t the case anymore. I\u0027m also wondering at what point sci.py [scientific python] will be able to directly compute things without using C [for large enough arrays]. I think that is the next big push for pypy.\u003C/p\u003E\u003Cp\u003E* When I was learning FORTRAN programming on UNIVAC 11xx series machines in the 1980s (presumably to discourage engineering students) I discovered in my basement a UNIVAC 11xx programming manual (probably for FORTRAN66, but I can\u0027t remember and didn\u0027t carefully save the binder like I should have). It took me awhile to realize that it wasn\u0027t mine, it was my mother\u0027s from a job from before she had me.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T00:12:50Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EFortran is dying out in labs, and for a very good reason. There are much better libraries for C/C\u002B\u002B these days, and most of the old code written in Fortran, including some of the libraries, are absolutely atrocious. Specifically because in F77, it was very difficult to avoid bad programming practices, and while F90 is quite decent, many Fortran programmers carried their bad habits over. To put it plainly, I\u0027ve seen goto statements in F90 libraries. That\u0027s bad. That shouldn\u0027t happen.\u003C/p\u003E\u003Cp\u003ELike I\u0027ve said earlier, though, Fortran could have easily been where C is if there was no C. Out of languages currently out there, barring all C-like languages, Fortran is the next best choice for building OSes and computation libraries.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGOTO statements were how people used to program, that\u0027s how you used to loop. You assumme that just because one can have bad habits they do. part of the evolution was That MS got ridcof Gosub, replaced with subs. They added type definitions, they added option explicit. they added functions, far better designed than the C# functions. All these things can be used if the user chose to, you don\u0027t have to have bad practices, in any language.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-30T00:15:11Z\u0022 title=\u002209/30/2015 12:15  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 30, 2015\u003C/time\u003E by PB666\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-09-30T02:20:32Z","Content":"\n\u003Cp\u003EThe problem I had with VB was its compiler... it was \u003Cem\u003Eterrible\u003C/em\u003E at optimizing. I didn\u0027t care for the framework either for managing overlays, I found it a pain in the butt... that problem could also extend itself into the linker used as well. I also found that people would use VB exclusively for accessing the Windows API, allowing, or rather \u003Cem\u003Erelying\u003C/em\u003E, on Windows to do a lot of the work. That was all fine and well for coming up with a Windows-like familiar user interface, but Windows is - well - sloppy in of itself, and slow. It was because of these things that a number of the houses I did work with opted for 4GLs instead... Fox, Clipper, Recital, etc.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T04:17:13Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EThe problem I had with VB was its compiler... it was \u003Cem\u003Eterrible\u003C/em\u003E at optimizing. I didn\u0027t care for the framework either for managing overlays, I found it a pain in the butt... that problem could also extend itself into the linker used as well. I also found that people would use VB exclusively for accessing the Windows API, allowing, or rather \u003Cem\u003Erelying\u003C/em\u003E, on Windows to do a lot of the work. That was all fine and well for coming up with a Windows-like familiar user interface, but Windows is - well - sloppy in of itself, and slow. It was because of these things that a number of the houses I did work with opted for 4GLs instead... Fox, Clipper, Recital, etc.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes the gui is nice but the intricate parts of VB are the sloppiest parts, particularly the scrollable lists, i only use one active X control and that is in excel, throws me up a code box and a away to start and capture transfer bugs. The VB sourced .exe files are not standalone, so its better not to use the gui if possible. The problem since vista is that unless its a background program, you almost have to use a visual interface. XP was the last MS OS to have a dos emulation mode, and it is hideously slow. Its not impossible to run text only display and entry, but it becomes stone knives and bear skins. Excel basically is a VB gui, so whats the point of making a stand alone now. I mean you can open and save a textfile from excel\u0027s VBA so at worst you need to use two programs instead of one.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-30T06:12:09Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022wumpus\u0022 data-cite=\u0022wumpus\u0022\u003E\u003Cdiv\u003ENot with any of the parts of FORTRAN77 I learned.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYou\u0027d need a few files written in Assembly to talk to the hardware, but that\u0027s true of any language. And sure, between C and F77 for writing an OS, it\u0027s C hands down. But you totally could write an OS in F77. For something simple like loading from a floppy drive and browsing a partition on the same, I could write the code in an afternoon. I\u0027ll take a look at how flash drive access works from BIOS. Maybe I can do the same with one of these as a proof of concept.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EThe problem I had with VB was its compiler... it was terrible at optimizing.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EBecause it\u0027s a terrible language, with absolutely no structure for optimizer to work with. All it\u0027s good for is not punishing you for being bad at programming, which is why it has so many fanboys.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EGOTO statements were how people used to program, that\u0027s how you used to loop.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI don\u0027t have a problem with early languages mimicking jump instructions in assembly, which are reflection of architecture. I have a problem with seeing goto statements in F90 and C, which are modern languages with structured loops. If you are using goto statement in one of these, you are doing it wrong. You are a terrible programmer, and you should either learn not to do this or do something else. Not only does it make code harder to read and debug, but it makes it impossible for optimizer to do its job. There is zero excuse for using goto in modern languages.\u003C/p\u003E\n"},{"CreatedByName":"LordFerret","CreatedById":111598,"CreatedDateTime":"2015-09-30T07:17:17Z","Content":"\n\u003Cp\u003EI wouldn\u0027t say it\u0027s a \u0022terrible\u0022 language, it is as the name implies - Basic, and very \u0027basic\u0027 at that. Ease of use, and yes, forgiving. I have to say, I was glad many a time to have it around, as when times called for a quick fix to some file or database one could always whip up a quick Basic program to do the job. Of course, that was \u0027back then\u0027, things are a bit different now especially with databases. Still, I think one of best features of Basic is its use as an introduction tool to programming - it\u0027s easy to learn, the general principals are inherent to pretty much all other languages (C included), and once gotten a grasp of, can ease the learning curve to other more robust languages. I\u0027ve sat complete computer illiterates down (really, idiots lol) and in 30 minutes time have had them writing simple, functional, Basic programs ... and the ideas / concepts that go with it stuck. Then again, maybe it\u0027s all in the way one teaches?\u003C/p\u003E\u003Cp\u003EWithout going into lengthy explanation, I\u0027ll just say that I disagree with your view on the use of a GOTO statement (in Fortran)... only because I\u0027ve been there and done that, and to my experience, there have been situations where execution efficiency required its use.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003EProgramming style\u0027 date=\u0027 like writing style, is somewhat of an art and cannot be codified by inflexible rules, although discussions about style often seem to center exclusively around such rules. In the case of the goto statement, it has long been observed that unfettered use of goto\u0027s quickly leads to unmaintainable spaghetti code. However, a simple, unthinking ban on the goto statement does not necessarily lead immediately to beautiful programming: an unstructured programmer is just as capable of constructing a Byzantine tangle without using any goto\u0027s (perhaps substituting oddly-nested loops and Boolean control variables, instead). Many programmers adopt a moderate stance: goto\u0027s are usually to be avoided, but are acceptable in a few well-constrained situations, if necessary: as multi-level break statements, to coalesce common actions inside a switch statement, or to centralize cleanup tasks in a function with several error returns. (...) Blindly avoiding certain constructs or following rules without understanding them can lead to just as many problems as the rules were supposed to avert. Furthermore, many opinions on programming style are just that: opinions. They may be strongly argued and strongly felt, they may be backed up by solid-seeming evidence and arguments, but the opposing opinions may be just as strongly felt, supported, and argued. It\u0027s usually futile to get dragged into \u0022style wars\u0022, because on certain issues, opponents can never seem to agree, or agree to disagree, or stop arguing. - [url\u0027]\u003Ca href=\u0022https://en.wikipedia.org/wiki/Goto#Criticism\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://en.wikipedia.org/wiki/Goto#Criticism\u003C/a\u003E\u003C/div\u003E\u003C/blockquote\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-30T07:19:29Z\u0022 title=\u002209/30/2015 07:19  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 30, 2015\u003C/time\u003E by LordFerret\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Shpaget","CreatedById":45577,"CreatedDateTime":"2015-09-30T07:23:51Z","Content":"\n\u003Cp\u003E\u003Cimg src=\u0022https://imgs.xkcd.com/comics/goto.png\u0022 alt=\u0022goto.png\u0022\u003E\u003C/p\u003E\u003Cp\u003EWhich brings me back to my first days of learning programming where GOTO was a go-to function for more or less anything. Need to jump around the code? GOTO. Need to iterate something? GOTO. Need to delay the execution of something? GOTO.\u003C/p\u003E\u003Cp\u003EThey I moved away from Hello World and GOTO had to go to hell.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-30T09:31:57Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EI wouldn\u0027t say it\u0027s a \u0022terrible\u0022 language, it is as the name implies - Basic, and very \u0027basic\u0027 at that. Ease of use, and yes, forgiving. I have to say, I was glad many a time to have it around, as when times called for a quick fix to some file or database one could always whip up a quick Basic program to do the job. Of course, that was \u0027back then\u0027, things are a bit different now especially with databases. Still, I think one of best features of Basic is its use as an introduction tool to programming - it\u0027s easy to learn, the general principals are inherent to pretty much all other languages (C included), and once gotten a grasp of, can ease the learning curve to other more robust languages. I\u0027ve sat complete computer illiterates down (really, idiots lol) and in 30 minutes time have had them writing simple, functional, Basic programs ... and the ideas / concepts that go with it stuck. Then again, maybe it\u0027s all in the way one teaches?\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAll of the good things I can say about Basic, I can also say about PHP and Python, for example. But I can also say far, far fewer bad things about them. I can sort of buy that, oh, 30 years ago, BASIC had its place as a learning tool or a quick fix-up tool. We had it on school machines, the old variety where you had to put line numbers for each line, and it made sense. It was that or jumping straight into Turbo C or Turbo Pascal, which had a much steeper learning curve.\u003C/p\u003E\u003Cp\u003EToday, though? There is no good reason for Basic.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EWithout going into lengthy explanation, I\u0027ll just say that I disagree with your view on the use of a GOTO statement (in Fortran)... only because I\u0027ve been there and done that, and to my experience, there have been situations where execution efficiency required its use.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd I can point you to some libraries in Fortran that I had to give up on, because I couldn\u0027t figure out how they worked, because the entire logic was a mess of GOTO statements. I know they were just nested loops with occasional breaks, but short of printing out all 100 or so pages, decorating walls with them, and drawing arrows all over the place, there was no way to make sense of the code. Ok, so absolutely every single variable having names consisting of the same letter repeated arbitrary number of times did not help, but I could have worked around that if control paths made sense.\u003C/p\u003E\u003Cp\u003EI was able to compile them, and cross-link them into my C code, but if I needed to change anything about that library, it was a fool\u0027s quest. So I ended up either replacing them with C libraries or writing my own.\u003C/p\u003E\u003Cp\u003EAnd again, you might think you\u0027re helping execution efficiency with a goto statement, but unless you\u0027re writing an Assembly program, you\u0027re ultimately working hand-in-hand with an optimizer. And optimizers don\u0027t play well with goto loops. Were you enjoying that use of a register as a loop counter, which sped up your tightest loop by a factor of three? Well, it\u0027s gone now, because optimizer could not predict all consequences of that goto, and now the counter has to be placed on the stack.\u003C/p\u003E\u003Cp\u003EIn fact, if you think you can come up with any example where \u003Cem\u003Eoptimized\u003C/em\u003E code runs faster with a goto statement, I would be happy to see it. I think you\u0027ll find that your perception doesn\u0027t match behavior of modern compilers.\u003C/p\u003E\n"},{"CreatedByName":"Daid","CreatedById":32171,"CreatedDateTime":"2015-09-30T09:48:18Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI don\u0027t have a problem with early languages mimicking jump instructions in assembly, which are reflection of architecture. I have a problem with seeing goto statements in F90 and C, which are modern languages with structured loops. If you are using goto statement in one of these, you are doing it wrong. You are a terrible programmer, and you should either learn not to do this or do something else. Not only does it make code harder to read and debug, but it makes it impossible for optimizer to do its job. There is zero excuse for using goto in modern languages.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EGuess all the linux coders are stupider then you are?\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022http://lxr.free-electrons.com/source/drivers/mtd/mtdchar.c#L61\u0022 rel=\u0022external nofollow\u0022\u003Ehttp://lxr.free-electrons.com/source/drivers/mtd/mtdchar.c#L61\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E(just open a random piece of code in the linux kernel, 80% chance you see goto\u0027s)\u003C/p\u003E\u003Cp\u003ENever say never in programming. There are always edge cases.\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-30T10:07:55Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022K^2\u0022 data-cite=\u0022K^2\u0022\u003E\u003Cdiv\u003EI don\u0027t have a problem with early languages mimicking jump instructions in assembly, which are reflection of architecture. I have a problem with seeing goto statements in F90 and C, which are modern languages with structured loops. If you are using goto statement in one of these, you are doing it wrong. You are a terrible programmer, and you should either learn not to do this or do something else. Not only does it make code harder to read and debug, but it makes it impossible for optimizer to do its job. There is zero excuse for using goto in modern languages.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI wouldn\u0027t automatically label every bit of code with goto statement as \u0027terrible\u0027. Goto is simply jmp in assembly and under the hood many \u0027proper\u0027 things in a source code are compiled into jump opcode. If you view the native code all your for (...), while (...), do { ... } while (...), switch (...) case ... case ...}, break and continue are basically goto statement.\u003C/p\u003E\u003Cp\u003EI don\u0027t use goto simply because someone told me that \u0027it\u0027s terrible\u0027, but if you stop and think about it, sometimes it CAN be justified.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003ELet\u0027s say you\u0027ve got this algorithm (A, B, C, D are some operations ):\u003C/p\u003E\u003Cp\u003E\u003Cimg src=\u0022https://i.imgur.com/iUNJI6e.png\u0022 alt=\u0022iUNJI6e.png\u0022\u003E\u003C/p\u003E\u003Cp\u003ELet\u0027s code it the proper way:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Echar bf1, bf2, bf3;\u003Cbr\u003Eif (a)\u003Cbr\u003E{\u003Cbr\u003E\tA;\u003Cbr\u003E\tbf1 = 1;\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E\tbf1 = 0;\u003Cbr\u003E\u003Cbr\u003Ebf2 = 0;\u003Cbr\u003Edo\u003Cbr\u003E{\u003Cbr\u003E\tdo\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (bf3 || \u003Cbr\u003E\t\t\tbf3 = 1;\u003Cbr\u003E\t\telse\u003Cbr\u003E\t\t\tbf3 = 0;\u003Cbr\u003E\t\tif (bf3 || bf2)\u003Cbr\u003E\t\t\tB;\u003Cbr\u003E\t\tif (bf3 || bf1 || bf2)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tC;\u003Cbr\u003E\t\t\tbf1 = 0;\u003Cbr\u003E\t\t\tbf2 = 1;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (!bf3)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif (!c)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tD;\u003Cbr\u003E\t\t\t\tbf3 = 1;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tbf3 = 0;\u003Cbr\u003E\t\t\t\tbf2 = 0;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\twhile (bf3);\u003Cbr\u003E}\u003Cbr\u003Ewhile (bf2);\u003Cbr\u003E\u003Cbr\u003EE; \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, some heresy with goto:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif (a)\u003Cbr\u003E{\u003Cbr\u003E\tA;\u003Cbr\u003E\tgoto L3;\u003Cbr\u003E}\u003Cbr\u003EL1:\u003Cbr\u003Eif (\u003Cbr\u003E{\u003Cbr\u003EL2:\u003Cbr\u003E\tB;\u003Cbr\u003EL3:\u003Cbr\u003E\tC;\u003Cbr\u003E\tgoto L1;\u003Cbr\u003E}\u003Cbr\u003Eelse if (!c)\u003Cbr\u003E{\u003Cbr\u003E\tD;\u003Cbr\u003E\tgoto L2;\u003Cbr\u003E}\u003Cbr\u003EE;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo, which code is easier to understand and maintain?\u003C/p\u003E\u003Cp\u003EAnother example of heresy:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Echar a, b, c;\u003Cbr\u003E\u003Cbr\u003Efor (a = 0; a \u0026lt; 10; \u002B\u002Ba)\u003Cbr\u003E{\u003Cbr\u003E\tfor (b = 0; b \u0026lt; a; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!c)\u003Cbr\u003E\t\t\tgoto Leave;\u003Cbr\u003E\t}\u003Cbr\u003E\tfor (b = 10; b \u0026lt; 15; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\td ();\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003ELeave:\u003Cbr\u003Ee ();\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand the \u0027proper\u0027 way with a flag:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Echar a, b, c, f1;\u003Cbr\u003E\u003Cbr\u003Ef1 = 1;\u003Cbr\u003Efor (a = 0; a \u0026lt; 10 \u0026amp;\u0026amp; f1; \u002B\u002Ba)\u003Cbr\u003E{\u003Cbr\u003E\tfor (b = 0; b \u0026lt; a \u0026amp;\u0026amp; f1; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!c)\u003Cbr\u003E\t\t\tf1 = 0;\u003Cbr\u003E\t}\u003Cbr\u003E\tif (f1)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfor (b = 10; b \u0026lt; 15; \u002B\u002B\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\td ();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHere you add a condition check on each iteration simply because using \u0027goto\u0027 is TERRIBLE.\u003C/p\u003E\u003Cp\u003EGoto, like any other language element (in any programming language) is a tool. How you use it determines if you are good or bad, but I doubt the mere fact of using it automatically labels you \u0027terrible programmer\u0027.\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-09-30T10:56:10Z","Content":"\n\u003Cp\u003EGoto is like const_cast in C\u002B\u002B. It does have its uses, but the situation you\u0027re planning to use it is not one of them.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T11:14:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022LordFerret\u0022 data-cite=\u0022LordFerret\u0022\u003E\u003Cdiv\u003EI wouldn\u0027t say it\u0027s a \u0022terrible\u0022 language, it is as the name implies - Basic, and very \u0027basic\u0027 at that. Ease of use, and yes, forgiving. \u003C/div\u003E\u003C/blockquote\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-30T11:16:02Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EToo forgiving, ergo begin anything longer than 50 lines with OPTION EXPLICIT and start your structure in the declaration section. Look up the \u00220\u0022 vs \u0022O\u0022 controversy in fortran I cant tell you how many nights of grief this caused on FORTRAN 4. On the basic IDE just substitute a Uppercase letter midword during a set statement and if the var is mispelled it wont auto flip back to lower case.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIn vb you could get away with this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ESub Foo()\u003Cbr\u003EEnd  Sub\u003Cbr\u003E\u003Cbr\u003ESub Foo2(i As Integer, s As String)\u003Cbr\u003EEnd Function\u003Cbr\u003E\u003Cbr\u003ESub Bar()\u003Cbr\u003E  Foo \u0027 Note the absence of parentheses\u003Cbr\u003E  Foo2 2, \u0022test\u0022\u003Cbr\u003EEnd Sub\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI still have nightmares of porting this into c#.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-30T11:18:33Z\u0022 title=\u002209/30/2015 11:18  AM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 30, 2015\u003C/time\u003E by cicatrix\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T11:23:42Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003EIn vb you could get away with this:\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003ESub Foo()\u003Cbr\u003EEnd  Sub\u003Cbr\u003E\u003Cbr\u003ESub Foo2(i As Integer, s As String)\u003Cbr\u003EEnd Function\u003Cbr\u003E\u003Cbr\u003ESub Bar\u003Cbr\u003E  Foo \u0027 Note the absence of parentheses\u003Cbr\u003E  Foo2 2, \u0022test\u0022\u003Cbr\u003EEnd Sub\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EI still have nightmares of porting this into c#.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThat is one of my peeves, the closures on statement blocks should be unique an standardized. This is the reason you do want function and subs to reduce the number of nested loops and conditionals. you can formally Call in basic but it doesn\u0027t read as well.\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-30T11:30:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThat is one of my peeves, the closures on statement blocks should be unique an standardized. This is the reason you do want function and subs to reduce the number of nested loops and conditionals. you can formally Call in basic but it doesn\u0027t read as well.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt\u0027s the stupidest idea about VB.Net. It tried to maintain backward compatibility with VB6. It a) forced Microsoft marketing department to set the default setting for Option Strict and Option Explicit to Off, \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E include Microsoft.VisualBasic namespace. I shudder to think what would happen if the same approach was used to make C# backwards compatible with MSVC\u002B\u002B.\u003C/p\u003E\n"},{"CreatedByName":"Jouni","CreatedById":97346,"CreatedDateTime":"2015-09-30T12:50:33Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003ELet\u0027s say you\u0027ve got this algorithm (A, B, C, D are some operations ):\u003Cp\u003E\u003Ca href=\u0022https://i.imgur.com/iUNJI6e.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://i.imgur.com/iUNJI6e.png\u003C/a\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat about:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif(a)\u003Cbr\u003E{\u003Cbr\u003E  A;\u003Cbr\u003E  C;\u003Cbr\u003E}\u003Cbr\u003Ewhile(b || !c)\u003Cbr\u003E{\u003Cbr\u003E  if(!\u003Cbr\u003E  {\u003Cbr\u003E    D;\u003Cbr\u003E  }\u003Cbr\u003E  B;\u003Cbr\u003E  C;\u003Cbr\u003E}\u003Cbr\u003EE;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIf you want to replace gotos with structured code, you need reason about the structure of the control flow, instead of using state flags.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T13:38:20Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003EIt\u0027s the stupidest idea about VB.Net. It tried to maintain backward compatibility with VB6. It a) forced Microsoft marketing department to set the default setting for Option Strict and Option Explicit to Off, \u003Cimg src=\u0022//kerbal-forum-uploads.s3.us-west-2.amazonaws.com/emoticons/default_cool.png\u0022 alt=\u0022B)\u0022\u003E include Microsoft.VisualBasic namespace. I shudder to think what would happen if the same approach was used to make C# backwards compatible with MSVC\u002B\u002B.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI stopped upgrading with VB6 and Office2007 just to avoid the net conversion until the current research lines had played out. Now with win10 and vb.net and issues with connectivty it was time to move\u003C/p\u003E\u003Cp\u003ETIL that type declarations - gone, structures .... great ... i ll just ......wth. \u003C/p\u003E\u003Cp\u003EPublic private friend ....why do in need all these in my friggin type declarations if i make that type declaration private?\u003C/p\u003E\u003Cp\u003ESo now I wannabe in MonoDev, but im having to relearn VB in VS express.\u003C/p\u003E\u003Cp\u003EAnd my \u0027type declarations\u0027 have subroutines, oh that definitely is a performance improvement. lol.\u003C/p\u003E\u003Cp\u003EThe reason to program in basic is so your thoughts and your algorythm are fluid with the language. If all the time is spent trying to figure that language, all those nifty thoughts gravitate to figuring out the code.\u003C/p\u003E\n"},{"CreatedByName":"cicatrix","CreatedById":120831,"CreatedDateTime":"2015-09-30T14:42:06Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022PB666\u0022 data-cite=\u0022PB666\u0022\u003E\u003Cdiv\u003EThe reason to program in basic is so your thoughts and your algorythm are fluid with the language. If all the time is spent trying to figure that language, all those nifty thoughts gravitate to figuring out the code.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThis is valid ONLY if English is your native language or you know it good enough. I know .Net developers in my country who know no more than 10 words in English. For them, C# with less keywords is less stressful. Then again, class names is a separate pain (up to a point that I have seen once a whole bunch of class wrappers that simply renamed English class names to make them more meaningful for coders).\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T16:05:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003EThis is valid ONLY if English is your native language or you know it good enough. I know .Net developers in my country who know no more than 10 words in English. For them, C# with less keywords is less stressful. Then again, class names is a separate pain (up to a point that I have seen once a whole bunch of class wrappers that simply renamed English class names to make them more meaningful for coders).\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell knowing the King\u0027s English does not immunize you from geek speak. For example Class, Single, Double, Char (which is not a char, but a number that represents that char), ByVal, Option Strict, Const, Dim, Sub, Redim, Static, Friend, Gosub, ^ (not typically meanings in Basic that a non-computer savvy person might have). And of course if your friends (not the FRIENDs we just invented on Virtual Studio) read reddit then TIL WT_ NSF_, AMA, IAMA, and DAE mean. If they are having trouble with \u0022If Then Else End If\u0022 or \u0022For Next\u0022 then I would tell them they have a whole lot of woe in store for them in RL, \u0027cause the geeky-speaky urban lexicon is quickly becoming the lingua franca of a whole generation of folks who have early-onset device-induced social dysfunction.\u003C/p\u003E\n"},{"CreatedByName":"glacierre","CreatedById":63209,"CreatedDateTime":"2015-09-30T16:26:41Z","Content":"\n\u003Cp\u003EI do not understand the aims of the author (PB666) of the original post. Seems like you have a project and want to learn about half a dozen languages to finish it. Meanwhile, it also seems that you want to optimize math operations on you own, which almost nobody does (for good reasons) using languages that you just learned (terrible idea if I ever heard one).\u003C/p\u003E\u003Cp\u003ESo the first thing to learn is: \u0027Premature optimization is the root of all evil\u0027.\u003C/p\u003E\u003Cp\u003EPick one language and implement what you need. If the stuff is complex do yourself a favor and pick a comfortable language (C#, Python). Then run it. If it turns that performance is good you are done. If not, _profile_ it and attack the slowest part. I can tell you beforehand that the slowest part is not going to be calculating square roots, which is good because there is very, very little to gain there. Then go on and learn how to make that piece that is slow better. Maybe you will be able to do so still within your language of choice, maybe you will need pure C. But you will be coding something like 100 lines of C tops.\u003C/p\u003E\u003Cp\u003ENowadays you can push pieces of for example python code to speeds equal or even faster than C if you need to, often without writing a line of C. You just need to find which pieces.\u003C/p\u003E\n"},{"CreatedByName":"Daid","CreatedById":32171,"CreatedDateTime":"2015-09-30T16:32:51Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003EI wouldn\u0027t automatically label every bit of code with goto statement as \u0027terrible\u0027. Goto is simply jmp in assembly and under the hood many \u0027proper\u0027 things in a source code are compiled into jump opcode. If you view the native code all your for (...), while (...), do { ... } while (...), switch (...) case ... case ...}, break and continue are basically goto statement.\u003Cp\u003EI don\u0027t use goto simply because someone told me that \u0027it\u0027s terrible\u0027, but if you stop and think about it, sometimes it CAN be justified.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003ELet\u0027s say you\u0027ve got this algorithm (A, B, C, D are some operations ):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://i.imgur.com/iUNJI6e.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://i.imgur.com/iUNJI6e.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ELet\u0027s code it the proper way:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Echar bf1, bf2, bf3;\u003Cbr\u003Eif (a)\u003Cbr\u003E{\u003Cbr\u003E\tA;\u003Cbr\u003E\tbf1 = 1;\u003Cbr\u003E}\u003Cbr\u003Eelse\u003Cbr\u003E\tbf1 = 0;\u003Cbr\u003E\u003Cbr\u003Ebf2 = 0;\u003Cbr\u003Edo\u003Cbr\u003E{\u003Cbr\u003E\tdo\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (bf3 || \u003Cbr\u003E\t\t\tbf3 = 1;\u003Cbr\u003E\t\telse\u003Cbr\u003E\t\t\tbf3 = 0;\u003Cbr\u003E\t\tif (bf3 || bf2)\u003Cbr\u003E\t\t\tB;\u003Cbr\u003E\t\tif (bf3 || bf1 || bf2)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tC;\u003Cbr\u003E\t\t\tbf1 = 0;\u003Cbr\u003E\t\t\tbf2 = 1;\u003Cbr\u003E\t\t}\u003Cbr\u003E\t\tif (!bf3)\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\tif (!c)\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tD;\u003Cbr\u003E\t\t\t\tbf3 = 1;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t\telse\u003Cbr\u003E\t\t\t{\u003Cbr\u003E\t\t\t\tbf3 = 0;\u003Cbr\u003E\t\t\t\tbf2 = 0;\u003Cbr\u003E\t\t\t}\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E\twhile (bf3);\u003Cbr\u003E}\u003Cbr\u003Ewhile (bf2);\u003Cbr\u003E\u003Cbr\u003EE; \u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ENow, some heresy with goto:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Eif (a)\u003Cbr\u003E{\u003Cbr\u003E\tA;\u003Cbr\u003E\tgoto L3;\u003Cbr\u003E}\u003Cbr\u003EL1:\u003Cbr\u003Eif (\u003Cbr\u003E{\u003Cbr\u003EL2:\u003Cbr\u003E\tB;\u003Cbr\u003EL3:\u003Cbr\u003E\tC;\u003Cbr\u003E\tgoto L1;\u003Cbr\u003E}\u003Cbr\u003Eelse if (!c)\u003Cbr\u003E{\u003Cbr\u003E\tD;\u003Cbr\u003E\tgoto L2;\u003Cbr\u003E}\u003Cbr\u003EE;\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003ESo, which code is easier to understand and maintain?\u003C/p\u003E\u003Cp\u003EAnother example of heresy:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Echar a, b, c;\u003Cbr\u003E\u003Cbr\u003Efor (a = 0; a \u0026lt; 10; \u002B\u002Ba)\u003Cbr\u003E{\u003Cbr\u003E\tfor (b = 0; b \u0026lt; a; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!c)\u003Cbr\u003E\t\t\tgoto Leave;\u003Cbr\u003E\t}\u003Cbr\u003E\tfor (b = 10; b \u0026lt; 15; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\td ();\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003ELeave:\u003Cbr\u003Ee ();\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003Eand the \u0027proper\u0027 way with a flag:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003Echar a, b, c, f1;\u003Cbr\u003E\u003Cbr\u003Ef1 = 1;\u003Cbr\u003Efor (a = 0; a \u0026lt; 10 \u0026amp;\u0026amp; f1; \u002B\u002Ba)\u003Cbr\u003E{\u003Cbr\u003E\tfor (b = 0; b \u0026lt; a \u0026amp;\u0026amp; f1; \u002B\u002B\u003Cbr\u003E\t{\u003Cbr\u003E\t\tif (!c)\u003Cbr\u003E\t\t\tf1 = 0;\u003Cbr\u003E\t}\u003Cbr\u003E\tif (f1)\u003Cbr\u003E\t{\u003Cbr\u003E\t\tfor (b = 10; b \u0026lt; 15; \u002B\u002B\u003Cbr\u003E\t\t{\u003Cbr\u003E\t\t\td ();\u003Cbr\u003E\t\t}\u003Cbr\u003E\t}\u003Cbr\u003E}\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EHere you add a condition check on each iteration simply because using \u0027goto\u0027 is TERRIBLE.\u003C/p\u003E\u003Cp\u003EGoto, like any other language element (in any programming language) is a tool. How you use it determines if you are good or bad, but I doubt the mere fact of using it automatically labels you \u0027terrible programmer\u0027.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ENone of the above is the best way IMHO. I think coding the different options as functions, and calling them is the best option. The \u0022loop\u0022 can end up in some kind of recursion. But the tail-call optimization of any C compiler will fix growing stack issues.\u003C/p\u003E\n"},{"CreatedByName":"glacierre","CreatedById":63209,"CreatedDateTime":"2015-09-30T17:26:36Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Daid\u0022 data-cite=\u0022Daid\u0022\u003E\u003Cdiv\u003ENone of the above is the best way IMHO. I think coding the different options as functions, and calling them is the best option. The \u0022loop\u0022 can end up in some kind of recursion. But the tail-call optimization of any C compiler will fix growing stack issues.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIt is nearly always good to pack things inside a function, but those examples were snippets that you can drop anywhere.\u003C/p\u003E\u003Cp\u003EBut, talking about performance critical code, I had once a simulation where I dropped \u0026gt;70% runtime by doing parameter check before (outside) my refresh function. Construction of the stack frame for the function was a waste of cycles if often it exited straight away because the set of parameters did not trigger the full refresh procedure.\u003C/p\u003E\u003Cp\u003ESo by all means, keep it tidy, but you may have to make it messy later on.\u003C/p\u003E\u003Cp\u003EOn the example of the A B C D E operations, another optimization is running the code with example data and based on number of calls placing the most common case first, to bypass \u0027ifs\u0027 often.\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222015-09-30T17:29:13Z\u0022 title=\u002209/30/2015 05:29  PM\u0022 data-short=\u00228 yr\u0022\u003ESeptember 30, 2015\u003C/time\u003E by glacierre\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Kerbart","CreatedById":78303,"CreatedDateTime":"2015-09-30T17:37:26Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003E(...)\u003Cp\u003EI don\u0027t use goto simply because someone told me that \u0027it\u0027s terrible\u0027, but if you stop and think about it, sometimes it CAN be justified.\u003C/p\u003E\u003Cp\u003EFor example:\u003C/p\u003E\u003Cp\u003ELet\u0027s say you\u0027ve got this algorithm (A, B, C, D are some operations ):\u003C/p\u003E\u003Cp\u003E\u003Ca href=\u0022https://i.imgur.com/iUNJI6e.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://i.imgur.com/iUNJI6e.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E(...)\u003C/p\u003E\u003Cp\u003EGoto, like any other language element (in any programming language) is a tool. How you use it determines if you are good or bad, but I doubt the mere fact of using it automatically labels you \u0027terrible programmer\u0027.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI agree on your assessment of goto. In addition, my father, who had a weak spot for Basic (and he started his career in machinecode, not that sissy assembler stuff with labels that the \u0027ung ones now think is hardcore), always told me: \u00C3\u00A2\u00E2\u201A\u00AC\u00C5\u201C\u003Cem\u003Ethere are no bad languages, just bad programmers\u003C/em\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00C3\u00A2\u00E2\u201A\u00AC\u00E2\u20ACI\u0027m sure that can be extended to statements!\u003C/p\u003E\u003Cp\u003EHaving said that, my first hunch looking at that diagram would be to stop and figure out how to streamline that monster.\u003C/p\u003E\n"},{"CreatedByName":"PB666","CreatedById":107380,"CreatedDateTime":"2015-09-30T19:23:08Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022glacierre\u0022 data-cite=\u0022glacierre\u0022\u003E\u003Cdiv\u003EI do not understand the aims of the author (PB666) of the original post. Seems like you have a project and want to learn about half a dozen languages to finish it. Meanwhile, it also seems that you want to optimize math operations on you own, which almost nobody does (for good reasons) using languages that you just learned (terrible idea if I ever heard one).\u003Cp\u003ESo the first thing to learn is: \u0027Premature optimization is the root of all evil\u0027.\u003C/p\u003E\u003Cp\u003EPick one language and implement what you need. If the stuff is complex do yourself a favor and pick a comfortable language (C#, Python). Then run it. If it turns that performance is good you are done. If not, _profile_ it and attack the slowest part. I can tell you beforehand that the slowest part is not going to be calculating square roots, which is good because there is very, very little to gain there. Then go on and learn how to make that piece that is slow better. Maybe you will be able to do so still within your language of choice, maybe you will need pure C. But you will be coding something like 100 lines of C tops.\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E \u003Cp\u003EThis is a joke, right. My structures and consts all by themselves will be 100 lines. I have no choice but to move to C, VB is too slow, win10 makes it even slower. The assunption here is that you know what the density of Sqrt operations are in the code, as alredy describe above, i might get away with a substantila performabce tweeking the compiler, more if I use the inverse float square root function. Read the post, if you use an older c\u002B\u002B math.sqrt it can take 400 cycles, they managed to get that down to 3 specifying the inst set and using x * rsqrtss x. lol, 100 fold difference........\u003C/p\u003E\u003Cp\u003E To get a feel take four charcter types, lets make them bytes , now make random sized that accumulate to 150 gb. And you dont know apriori how big in terms of numer of byte strings the set is. Now i am going to give you 6gb divided in 22 units,\u003C/p\u003E\u003Cp\u003EThese units are not identical to the first, not even in pieces, they vary in both string sequnce, multiple type can exist at a position in a string and their identities are known to shrink and swell. Your job is to find which unit every piece in the first set best fits into the second and then fit those byte strings into a long chain. In addition there is degenerecy, some pieces best fit in several places, and other pieces may not fit at all, so these have to be set aside. the inclusion and set asides are determined mathematically using log functions and square roots. \u003C/p\u003E\u003Cp\u003EAll of this can be done with known algorythm on mainframes, no problem. But now I am going to give you data that is not in the public domain, its coded differently from the first set, so the public alignment routines will give false optimals. So now you need to mimic that process on the mainframe except on the PC and with a much high frequency of variation in particularly convinience defined strings without cherry picking. IOW the boundaries of the variation should be self-defining.\u003C/p\u003E\n"},{"CreatedByName":"K^2","CreatedById":57710,"CreatedDateTime":"2015-09-30T21:30:29Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022cicatrix\u0022 data-cite=\u0022cicatrix\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E\u003Ca href=\u0022https://i.imgur.com/iUNJI6e.png\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://i.imgur.com/iUNJI6e.png\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ENow, some heresy with goto:\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYeah... Now implement the garbage you\u0027ve written vs code that Jouni wrote and time it. Watch your code thrash around miserably because it ended up being unoptimized.\u003C/p\u003E\u003Cp\u003ESure, if you can\u0027t write the \u0022proper way\u0022 properly, everything looks like it needs goto. But that\u0027s, once again, just your inability to write good code.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E Goto is simply jmp in assembly and under the hood many \u0027proper\u0027 things in a source code are compiled into jump opcode.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EAnd many are not. Some loops are going to be completely unrolled by an optimizer. Many bits of code will be moved around, so that the jumps have a completely different structure.\u003C/p\u003E\u003Cp\u003EUnless you are actually coding in assembly, the code you are writing and machine code you will get are going to be pretty different. If you understand how optimizer works, you can predict that and help it out to get faster code. If you don\u0027t, your best bet is to not interfere with it. And getting \u0022clever\u0022 with goto statements is exactly that sort of interference.\u003C/p\u003E\u003Cp\u003ESo do yourself a favor, and learn to write proper code. That\u0027s what optimizer expects, and that\u0027s what will have better performance despite your misconceptions. Of course, the main reason to write proper code is the fact that it\u0027s easier to read and debug. Again, see Jouni\u0027s solution. The fact that it will also run better is just a bonus in this case.\u003C/p\u003E\n"}]}