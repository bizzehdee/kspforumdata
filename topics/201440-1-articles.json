{"TopicId":201440,"ForumId":29,"TopicTitle":"How to manage optional dependencies","CreatedByName":"NermNermNerm","CreatedById":174264,"CreatedDateTime":"2021-04-03T20:36:14Z","PageNum":1,"Articles":[{"CreatedByName":"NermNermNerm","CreatedById":174264,"CreatedDateTime":"2021-04-03T20:36:14Z","Content":"\n\u003Cp\u003E\nI recently added support for ContractConfigurator.\u00A0 This entailed adding a reference to ContractConfigurator\u0027s DLL so that I could pick up some base classes.\u00A0 I never intended to make ContractConfigurator a straight-up requirement for the mod - more I wanted to make it so that if you had ContractConfigurator, you\u0027d get some extra content.\n\u003C/p\u003E\n\u003Cp\u003E\nGenerally speaking, .Net doesn\u0027t load dependent dll\u0027s until a class that actually uses that DLL gets loaded...\u00A0 So I thought that because the contract classes have no Unity stuff in them and nothing in the rest of my DLL references the contract classes that I\u0027d be okay.\n\u003C/p\u003E\n\u003Cp\u003E\nBut... Apparently not.\u00A0 I should perhaps have figured this since Unity is reflecting over all the types:\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\n\u003Cspan class=\u0022pln\u0022\u003E[ERR 13:27:03.459] ADDON BINDER: Cannot resolve assembly: ContractConfigurator, Culture=neutral, PublicKeyToken=null\n\n[ERR 13:27:03.464] AssemblyLoader: Exception loading \u0027ProgressiveColonizationSystem\u0027: System.Reflection.ReflectionTypeLoadException: Exception of type \u0027System.Reflection.ReflectionTypeLoadException\u0027 was thrown.\n\u00A0 at (wrapper managed-to-native) System.Reflection.Assembly.GetTypes(System.Reflection.Assembly,bool)\n\u00A0 at System.Reflection.Assembly.GetTypes () [0x00000] in \u003C/span\u003E\u003Cspan class=\u0022tag\u0022\u003E\u0026lt;ad04dee02e7e4a85a1299c7ee81c79f6\u0026gt;\u003C/span\u003E\u003Cspan class=\u0022pln\u0022\u003E:0\u00A0\n\u00A0 at AssemblyLoader.LoadAssemblies () [0x000e6] in \u0026lt;06f13185617646e5bc801baeab53ab75\u0026gt;:0\u00A0\n\nAdditional information about this exception:\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nSeems like I got a couple of choices, and I thought I\u0027d see if anybody has an opinion or maybe a better alternative.\n\u003C/p\u003E\n\u003Col\u003E\u003Cli\u003E\nI could create a second mod for the contracts, and have that have a dependency on ContractConfigurator and my mod.\n\u003C/li\u003E\n\u003Cli\u003E\nI could create a second DLL which depends on my mod and ContractConfigurator.\u00A0 This one will not load correctly if CC is not present.\n\u003C/li\u003E\n\u003C/ol\u003E\u003Cp\u003E\nI\u0027m not fond of #2 because that means my mod will generate a nastygram in the log for folks without ContractsConfigurator.\u00A0 That wouldn\u0027t hardly be the first one, but it\u0027s bad form.\u00A0 I\u0027m not fond of #1 because I feel like it makes for more work for the user (heh, and some more work for me too!)\n\u003C/p\u003E\n"},{"CreatedByName":"peteletroll","CreatedById":144573,"CreatedDateTime":"2021-04-04T10:13:57Z","Content":"\n\u003Cp\u003E\nThe clean solution is to use reflection: big topic!\n\u003C/p\u003E\n"},{"CreatedByName":"NermNermNerm","CreatedById":174264,"CreatedDateTime":"2021-04-04T17:30:35Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223948898\u0022 data-ipsquote-contentid=\u0022201440\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221617531237\u0022 data-ipsquote-userid=\u0022144573\u0022 data-ipsquote-username=\u0022peteletroll\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\n7 hours ago, peteletroll said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe clean solution is to use reflection: big topic!\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nWouldn\u0027t be so clean for this dependency - for ContractsConfigurator you need to create subclasses.\n\u003C/p\u003E\n"},{"CreatedByName":"NermNermNerm","CreatedById":174264,"CreatedDateTime":"2021-04-04T22:41:38Z","Content":"\n\u003Cp\u003E\nFor the sake of posterity, I went with the option of splitting it out into a separate DLL, but not a separate mod.\u00A0 Work was done in this commit:\n\u003C/p\u003E\n\u003Cp\u003E\n\u003Cbr\u003E\u003Ca href=\u0022https://github.com/SteveBenz/ProgressiveColonizationSystem/commit/66d8a63f09e0757faea2f8ddaf647152e11c8f64\u0022 rel=\u0022external nofollow\u0022\u003EBreak out Contracts code into its own DLL \u00B7 SteveBenz/ProgressiveColonizationSystem@66d8a63 (github.com)\u003C/a\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-04-04T23:14:09Z\u0022 title=\u002204/04/2021 11:14  PM\u0022 data-short=\u00223 yr\u0022\u003EApril 4, 2021\u003C/time\u003E by NermNermNerm\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"Gotmachine","CreatedById":163039,"CreatedDateTime":"2021-07-13T14:37:40Z","Content":"\n\u003Cblockquote class=\u0022ipsQuote\u0022 data-ipsquote=\u0022\u0022 data-ipsquote-contentapp=\u0022forums\u0022 data-ipsquote-contentclass=\u0022forums_Topic\u0022 data-ipsquote-contentcommentid=\u00223948898\u0022 data-ipsquote-contentid=\u0022201440\u0022 data-ipsquote-contenttype=\u0022forums\u0022 data-ipsquote-timestamp=\u00221617531237\u0022 data-ipsquote-userid=\u0022144573\u0022 data-ipsquote-username=\u0022peteletroll\u0022\u003E\n\u003Cdiv class=\u0022ipsQuote_citation\u0022\u003E\nOn 4/4/2021 at 12:13 PM, peteletroll said:\n\u003C/div\u003E\n\u003Cdiv class=\u0022ipsQuote_contents\u0022\u003E\n\u003Cp\u003E\nThe clean solution is to use reflection: big topic!\n\u003C/p\u003E\n\u003C/div\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E\nReflexion quickly become a mess to work with, it is prone to breakage when the target mod is updated, and it comes with a very noticable performance cost.\n\u003C/p\u003E\n\u003Cp\u003E\nThe best way to handle this is to make a separate binary (dll) that reference both mods, and to conditonally load it from your main mod when the other mod is detected.\n\u003C/p\u003E\n\u003Cp\u003E\nExample \u003Cspan\u003E: \u003C/span\u003E\u003Ca href=\u0022https://github.com/Kerbalism/Kerbalism/blob/master/src/KerbalismBootstrap/Bootstrap.cs\u0022 rel=\u0022external nofollow\u0022\u003Ehttps://github.com/Kerbalism/Kerbalism/blob/master/src/KerbalismBootstrap/Bootstrap.cs\u003C/a\u003E\n\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222021-07-13T14:40:24Z\u0022 title=\u002207/13/2021 02:40  PM\u0022 data-short=\u00222 yr\u0022\u003EJuly 13, 2021\u003C/time\u003E by Gotmachine\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"sunnypunny","CreatedById":212559,"CreatedDateTime":"2021-12-23T17:19:47Z","Content":"\n\u003Cp\u003E\nI\u0027m noob at this topic but thought I\u0027d share my solution in case anyone else struggled figuring it out like I did, there seems to be very little info around about it so it took a while to work out and was very necessary when making modular mods with optional dependencies\n\u003C/p\u003E\n\u003Cp\u003E\nIf u add a reference to another mod\u0027s DLL then try to access those classes in ur mod, the KSP \u0022Addon Binder\u0022 (which controls the loading of mod DLLs) will throw an exception if the other mod is absent - even if u hide ur code behind a System.IO.File.Exists check for whether the other mod is present. My solution was to find the mod in the list of loaded assemblies, then reflect on the classes and methods in order to run a method from the other mod.\n\u003C/p\u003E\n\u003Cp\u003E\nHere is a one line sample (replacing \u0022OtherMod\u0022 etc with whatever the mod name, namespace, class and methods are)\n\u003C/p\u003E\n\u003Cpre class=\u0022ipsCode prettyprint lang-html prettyprinted\u0022\u003E\u003Cspan class=\u0022pln\u0022\u003Eif (System.IO.File.Exists(KSPUtil.ApplicationRootPath \u002B \u0022GameData/OtherModName/OtherMod.dll\u0022)) {\n\ttry {\n\t\tAppDomain.CurrentDomain.GetAssemblies().First(a =\u0026gt; a.GetName().Name == \u0022OtherModName\u0022).GetType(\u0022OtherModNameSpace.OtherModClass\u0022).GetMethod(\u0022OtherModMethod\u0022, BindingFlags.Public | BindingFlags.Static).Invoke(null, null);\n\t}\n\tfinally { }\n}\u003C/span\u003E\u003C/pre\u003E\n\u003Cp\u003E\nmaybe that will help someone idk\n\u003C/p\u003E\n"}]}