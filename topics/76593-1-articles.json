{"TopicId":76593,"ForumId":29,"TopicTitle":"How to walk from a Unity primitive to the KSP object it\u0026#039;s contained in?","CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-03T17:48:52Z","PageNum":1,"Articles":[{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-03T17:48:52Z","Content":"\n\u003Cp\u003EI have a laser distance measurer that does a ray cast and returns the distance to the first item the laser hits along its beam. Finding that distance works great.\u003C/p\u003E\u003Cp\u003EBut now the problem is that Physics.Raycast is a Unity routine at a low level underneath KSP. Thus when it finds a hit object, the hit object it finds is a low level Unity primitive like \u0022Cylinder\u0022. But what I\u0027d like to report to the user is the name of the KSP object that was hit. i.e. not \u0022Cylnder\u0022 but \u0022FL-T200 Fuel Tank\u0022.\u003C/p\u003E\u003Cp\u003EI know that I can walk up the tree of GameObject\u0027s, as in \u0022this object is part of this other object which is part of this other object which is\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6.\u0022.\u003C/p\u003E\u003Cp\u003EThe problem is that I don\u0027t know how to detect when to stop that walk. Ideally what I\u0027d like is a flag that tells me \u0022this GameObject is one of the GameObjects the user sees in the user interface, like a Part from the parts bin, or a building name, or a planet name, rather than a low-level primitive they never see like \u0022terrain polygon na039103r12\u0022\u003C/p\u003E\n"},{"CreatedByName":"Diazo","CreatedById":81549,"CreatedDateTime":"2014-07-03T18:38:26Z","Content":"\n\u003Cp\u003EAs a place to start, I use the following to detect the part that is under the mouse with the following code. As written it only returns valid data if the ray hits a Part, if it hits anything else it returns nothing. (Note the LayerMask so the ray is only capable of hitting layer 0 which is the Part layer.)\u003C/p\u003E\u003Cp\u003EIt is part specific though, but I would think it could be modified to do what you need, maybe with multiple cases, one for if the ray hits a Part, one for Terrain, and one for Buildings. I don\u0027t think there is any other type of object you would need to worry about hitting?\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003Epublic Part SelectPartUnderMouse()\u003Cbr\u003E        {\u003Cbr\u003E            FlightCamera CamTest = new FlightCamera();\u003Cbr\u003E            CamTest = FlightCamera.fetch;\u003Cbr\u003E            Ray ray = CamTest.mainCamera.ScreenPointToRay(Input.mousePosition);\u003Cbr\u003E            LayerMask RayMask = new LayerMask();\u003Cbr\u003E            RayMask = 1 \u0026lt;\u0026lt; 0;\u003Cbr\u003E            RaycastHit hit;\u003Cbr\u003E            if (Physics.Raycast(ray, out hit,Mathf.Infinity,RayMask))\u003Cbr\u003E            {\u003Cbr\u003E\u003Cbr\u003E               [b]return FlightGlobals.ActiveVessel.Parts.Find(p =\u0026gt; p.gameObject == hit.transform.gameObject);[/b]\u003Cbr\u003E//The critical bit. Note I\u0027m generating a list of possible objects hit and then asking if I hit one of them. I\u0027m not starting with the object hit and trying to work my way up.\u003Cbr\u003E            }\u003Cbr\u003E            return null;\u003Cbr\u003E        }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-03T18:42:24Z\u0022 title=\u002207/03/2014 06:42  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 3, 2014\u003C/time\u003E by Diazo\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-03T23:25:39Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EI have a laser distance measurer that does a ray cast and returns the distance to the first item the laser hits along its beam. Finding that distance works great.\u003Cp\u003EBut now the problem is that Physics.Raycast is a Unity routine at a low level underneath KSP. Thus when it finds a hit object, the hit object it finds is a low level Unity primitive like \u0022Cylinder\u0022. But what I\u0027d like to report to the user is the name of the KSP object that was hit. i.e. not \u0022Cylnder\u0022 but \u0022FL-T200 Fuel Tank\u0022.\u003C/p\u003E\u003Cp\u003EI know that I can walk up the tree of GameObject\u0027s, as in \u0022this object is part of this other object which is part of this other object which is\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6.\u0022.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EThere was a \u003Ca href=\u0022https://forum.kerbalspaceprogram.com/threads/78474-List-of-layer-masks-to-use-with-Physics-Raycast%28%29?p=1243092\u0026amp;viewfull=1#post1243092\u0022 rel=\u0022external nofollow\u0022\u003Erecent post\u003C/a\u003E that will be helpful to you. Once you have your RaycastHit info, you already have a GameObject entry into the hierarchy of whatever you hit. Let\u0027s say I want to find out if it\u0027s a part or the ground terrain (non-scaled space) that I\u0027ve hit:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E            LayerMask mask = (1 \u0026lt;\u0026lt; 0) | (1 \u0026lt;\u0026lt; 15);\u003Cbr\u003E\u003Cbr\u003E            if (Physics.Raycast(ray, out hit, 10f, mask))\u003Cbr\u003E            {\u003Cbr\u003E                if (hit.transform.gameObject.layer == 15)\u003Cbr\u003E                {\u003Cbr\u003E                    // real terrain was hit\u003Cbr\u003E                }\u003Cbr\u003E                else\u003Cbr\u003E                {\u003Cbr\u003E                    Part target = Part.FromGO(hit.transform.gameObject) ?? hit.transform.gameObject.GetComponentInParent\u0026lt;Part\u0026gt;();\u003Cbr\u003E                    if (target != null) Log.Write(\u0022we hit {0}\u0022, target.name);\u003Cbr\u003E                }\u003Cbr\u003E            }\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt would be useful to write a method that prints the components attached to the GameObject hierarchy you\u0027ve hit. Mine\u0027s come in handy on many occasions\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-04T10:18:21Z","Content":"\n\u003Cp\u003E@xEvilReeperx - It looks like the existence of the Part.FromGO() static method, and it\u0027s purpose, is what I was missing.\u003C/p\u003E\u003Cp\u003ESo much undocumented stuff in KSP\u0027s API.. sooooo annoying at times. They appear to have included very little explanation in their xml-comment tags so most of the documentation is fan-made by guesswork and trial and error.\u003C/p\u003E\u003Cp\u003E\u0022Some sort of way to get the Part that a Unity GameObject is a component of\u0022 is exactly what I needed and it looks like that\u0027s exactly what that does.\u003C/p\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-04T10:35:38Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003E\u0022Some sort of way to get the Part that a Unity GameObject is a component of\u0022 is exactly what I needed and it looks like that\u0027s exactly what that does.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWell, a \u0022Part\u0022 is really just a component attached to a GameObject (the documentation you referred to really botched the description there), plus potentially some supporting components (like PartModules). \u003C/p\u003E\u003Cp\u003EThe second portion of that line is because the GameObject containing the collider hit by your ray might not necessarily have a Part component attached to it if the Part it\u0027s related to has a hierarchy of colliders. Consider one of the deployable solar panels or wheels, or any user-created part that has multiple primitive Box/Sphere/etc colliders.\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-04T20:10:11Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003EWell, a \u0022Part\u0022 is really just a component attached to a GameObject (the documentation you referred to really botched the description there)\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhat documentation? It\u0027s not documented. I have to guess from the name of the method and its signature.\u003C/p\u003E\u003Cp\u003EWait, so are you saying that Part.FromGO() does NOT scan through the children of the Part\u0027s game object to see if the GO passed in is contained inside the part\u0027s GO? That it only works if the GO passed in is at *exactly* the tree depth that the Part object is connected to?\u003C/p\u003E\u003Cp\u003EIf so then what you posted wouldn\u0027t work either, would it? It only works if the tree structure looks like this:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E...\u003Cbr\u003E|\u003Cbr\u003E\u002B-- GameObject\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- A KSP part\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject A\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject B   \u0026lt;-- ray cast hits here.\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject C\u003Cbr\u003E|\u003Cbr\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIt doesn\u0027t look like it would work if KSP modeled the part in a more complex way with grandchildren or great-grandchildren, like so:\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003Cdiv\u003E\u003C/div\u003E\u003Cpre class=\u0022ipsCode\u0022\u003E\u003Cbr\u003E...\u003Cbr\u003E|\u003Cbr\u003E\u002B-- GameObject\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- A KSP part\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject A\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject B\u003Cbr\u003E|    |    |\u003Cbr\u003E|    |    \u002B-- GameObject BA  \u0026lt;--- ray cast hits here\u003Cbr\u003E|    |    |\u003Cbr\u003E|    |    \u002B-- GameObject BB\u003Cbr\u003E|    |\u003Cbr\u003E|    \u002B-- GameObject C\u003Cbr\u003E|\u003Cbr\u003E\u00C3\u00A2\u00E2\u201A\u00AC\u00C2\u00A6\u003Cbr\u003E\u003C/pre\u003E\u003Cp\u003E\u003C/p\u003E\u003Cp\u003EIsn\u0027t a tree walk upward still needed to handle that case? Or is there some guarantee that KSP never models any of its parts that way - that they all have exactly one level of depth only and no more?\u003C/p\u003E\n\u003Cspan class=\u0022ipsType_reset ipsType_medium ipsType_light\u0022 data-excludequote=\u0022\u0022\u003E\n\u003Cstrong\u003EEdited \u003Ctime datetime=\u00222014-07-04T20:17:49Z\u0022 title=\u002207/04/2014 08:17  PM\u0022 data-short=\u002210 yr\u0022\u003EJuly 4, 2014\u003C/time\u003E by Steven Mading\u003C/strong\u003E\n\u003C/span\u003E\n"},{"CreatedByName":"xEvilReeperx","CreatedById":75857,"CreatedDateTime":"2014-07-05T02:58:03Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EWhat documentation? It\u0027s not documented. I have to guess from the name of the method and its signature.\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EWhoops, misread.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EWait, so are you saying that Part.FromGO() does NOT scan through the children of the Part\u0027s game object to see if the GO passed in is contained inside the part\u0027s GO? That it only works if the GO passed in is at *exactly* the tree depth that the Part object is connected to?\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003ERight, that\u0027s why I was explaining why you need the second half of that line. You don\u0027t need to scan the children; if the GO you hit is included in a Part\u0027s hierarchy, the Part component will always be found in the hit GO or an ancestor\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022Steven Mading\u0022 data-cite=\u0022Steven Mading\u0022\u003E\u003Cdiv\u003EIf so then what you posted wouldn\u0027t work either, would it? ...\u003Cp\u003EIt doesn\u0027t look like it would work if KSP modeled the part in a more complex way with grandchildren or great-grandchildren...\u003C/p\u003E\u003Cp\u003EIsn\u0027t a tree walk upward still needed to handle that case?\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EYes, walking the tree upwards is exactly what \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Component.GetComponentInParent.html\u0022 rel=\u0022external nofollow\u0022\u003EComponent.GetComponentInParent\u003C/a\u003E does. That\u0027s why I was trying to point out that you need more than just Part.FromGO, you need the hit.transform.gameObject.GetComponentInParent\u0026lt;Part\u0026gt;(); part of that line too because Part.FromGO will fail in both of your examples\u003C/p\u003E\n"},{"CreatedByName":"Dunbaratu","CreatedById":63481,"CreatedDateTime":"2014-07-05T04:00:01Z","Content":"\n\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022 data-ipsquote-username=\u0022xEvilReeperx\u0022 data-cite=\u0022xEvilReeperx\u0022\u003E\u003Cdiv\u003E\u003Cp\u003EYes, walking the tree upwards is exactly what \u003Ca href=\u0022http://docs.unity3d.com/ScriptReference/Component.GetComponentInParent.html\u0022 rel=\u0022external nofollow\u0022\u003EComponent.GetComponentInParent\u003C/a\u003E does.\u003C/p\u003E\u003Cp\u003E\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EIf that\u0027s true then the Unity documentation needs fixing because it says \u0022parents\u0022 rather than \u0022ancestors\u0022, implying it doesn\u0027t go more than one generation up (it doesn\u0027t say \u0022grandparents\u0022), and that perhaps the reason it\u0027s a plural is because they\u0027re violating the tree structure a bit and giving some nodes more than one parent.\u003C/p\u003E\u003Cblockquote data-ipsquote=\u0022\u0022 class=\u0022ipsQuote\u0022\u003E\u003Cdiv\u003E\u003Cp\u003E That\u0027s why I was trying to point out that you need more than just Part.FromGO, you need the hit.transform.gameObject.GetComponentInParent\u0026lt;Part\u0026gt;(); part of that line too because Part.FromGO will fail in both of your examples\u003C/p\u003E\u003C/div\u003E\u003C/blockquote\u003E\u003Cp\u003EI never wrote any examples using Part.FromGO. I was trying to work out whether or not GetComponentInParent worked like you showed it working or if it worked like the both its name and the Unity documentation implies. By using the word \u0022Parent\u0022 rather than \u0022Ancestor\u0022, it carries the meaning that it only goes one level up and stops. That terminology *means* something in computer science and it appears Unity is using it slightly wrongly, if what you\u0027re saying is true.\u003C/p\u003E\u003Cp\u003EAt any rate, Unity\u0027s documentation isn\u0027t your fault. Thanks for the information.\u003C/p\u003E\n"}]}